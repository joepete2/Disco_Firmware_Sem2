
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800da90  0800da90  0001da90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db10  0800db10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800db10  0800db10  0001db10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db18  0800db18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db18  0800db18  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db1c  0800db1c  0001db1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800db20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  24000078  0800db98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  0800db98  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f20b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303d  00000000  00000000  0003f2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  000422f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00043a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d8c1  00000000  00000000  000450c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f392  00000000  00000000  00082989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019e956  00000000  00000000  000a1d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00240671  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  002406c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da78 	.word	0x0800da78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800da78 	.word	0x0800da78

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000698:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800069c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800069e:	4bcd      	ldr	r3, [pc, #820]	; (80009d4 <main+0x340>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d11b      	bne.n	80006e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b0:	f3bf 8f6f 	isb	sy
}
 80006b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b6:	4bc7      	ldr	r3, [pc, #796]	; (80009d4 <main+0x340>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c4:	f3bf 8f6f 	isb	sy
}
 80006c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ca:	4bc2      	ldr	r3, [pc, #776]	; (80009d4 <main+0x340>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4ac1      	ldr	r2, [pc, #772]	; (80009d4 <main+0x340>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006dc:	f3bf 8f6f 	isb	sy
}
 80006e0:	e000      	b.n	80006e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006e4:	4bbb      	ldr	r3, [pc, #748]	; (80009d4 <main+0x340>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d143      	bne.n	8000778 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006f0:	4bb8      	ldr	r3, [pc, #736]	; (80009d4 <main+0x340>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f8:	f3bf 8f4f 	dsb	sy
}
 80006fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006fe:	4bb5      	ldr	r3, [pc, #724]	; (80009d4 <main+0x340>)
 8000700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000704:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000708:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800070c:	0b5b      	lsrs	r3, r3, #13
 800070e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000712:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000716:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000720:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000724:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8000734:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000736:	49a7      	ldr	r1, [pc, #668]	; (80009d4 <main+0x340>)
 8000738:	4313      	orrs	r3, r2
 800073a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	f8c7 2400 	str.w	r2, [r7, #1024]	; 0x400
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1eb      	bne.n	8000724 <main+0x90>
    } while(sets-- != 0U);
 800074c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1dd      	bne.n	8000716 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 800075a:	f3bf 8f4f 	dsb	sy
}
 800075e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000760:	4b9c      	ldr	r3, [pc, #624]	; (80009d4 <main+0x340>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a9b      	ldr	r2, [pc, #620]	; (80009d4 <main+0x340>)
 8000766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000772:	f3bf 8f6f 	isb	sy
}
 8000776:	e000      	b.n	800077a <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000778:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 fd11 	bl	80021a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 fad1 	bl	8000d24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000782:	f000 fb53 	bl	8000e2c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000786:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <main+0x344>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	4a92      	ldr	r2, [pc, #584]	; (80009d8 <main+0x344>)
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80007a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80007a4:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80007ae:	f5a3 6384 	sub.w	r3, r3, #1056	; 0x420
 80007b2:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fea6 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b8:	f000 fe84 	bl	80014c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007bc:	f000 fe34 	bl	8001428 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80007c0:	f000 fd64 	bl	800128c <MX_TIM2_Init>
  MX_TIM1_Init();
 80007c4:	f000 fcb6 	bl	8001134 <MX_TIM1_Init>
  MX_TIM4_Init();
 80007c8:	f000 fdac 	bl	8001324 <MX_TIM4_Init>
  MX_TIM16_Init();
 80007cc:	f000 fe04 	bl	80013d8 <MX_TIM16_Init>
  MX_ADC1_Init();
 80007d0:	f000 fb5c 	bl	8000e8c <MX_ADC1_Init>
  MX_SPI2_Init();
 80007d4:	f000 fc56 	bl	8001084 <MX_SPI2_Init>
  MX_ADC3_Init();
 80007d8:	f000 fbf2 	bl	8000fc0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007dc:	487f      	ldr	r0, [pc, #508]	; (80009dc <main+0x348>)
 80007de:	f00a f87b 	bl	800a8d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80007e2:	487f      	ldr	r0, [pc, #508]	; (80009e0 <main+0x34c>)
 80007e4:	f00a f878 	bl	800a8d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	487e      	ldr	r0, [pc, #504]	; (80009e4 <main+0x350>)
 80007ec:	f00a f972 	bl	800aad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80007f0:	2104      	movs	r1, #4
 80007f2:	487c      	ldr	r0, [pc, #496]	; (80009e4 <main+0x350>)
 80007f4:	f00a f96e 	bl	800aad4 <HAL_TIM_PWM_Start>



  TIM4->CCR1 = 5;
 80007f8:	4b7b      	ldr	r3, [pc, #492]	; (80009e8 <main+0x354>)
 80007fa:	2205      	movs	r2, #5
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5; // 5/10 50 percent duty cycle, becomes the clock for the H-chip
 80007fe:	4b7a      	ldr	r3, [pc, #488]	; (80009e8 <main+0x354>)
 8000800:	2205      	movs	r2, #5
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t writeBuf1 = 0b0000100001100100; // LED
 8000804:	f640 0364 	movw	r3, #2148	; 0x864
 8000808:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
  uint16_t writeBuf2 = 0b0000010001100100; // LED
 800080c:	f240 4364 	movw	r3, #1124	; 0x464
 8000810:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
  uint16_t writeBuf3 = 0b0000110001100100; // LED
 8000814:	f640 4364 	movw	r3, #3172	; 0xc64
 8000818:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
  uint16_t writeBuf4 = 0b0000001001100100; // LED
 800081c:	f44f 7319 	mov.w	r3, #612	; 0x264
 8000820:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8
  uint16_t writeBuf5 = 0b0000101001100100; // LED
 8000824:	f640 2364 	movw	r3, #2660	; 0xa64
 8000828:	f8a7 33f6 	strh.w	r3, [r7, #1014]	; 0x3f6
  uint16_t writeBuf6 = 0b0000011001100100; // LED
 800082c:	f240 6364 	movw	r3, #1636	; 0x664
 8000830:	f8a7 33f4 	strh.w	r3, [r7, #1012]	; 0x3f4
  uint16_t ADCData[needed];
 8000834:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <main+0x358>)
 8000836:	6819      	ldr	r1, [r3, #0]
 8000838:	1e4b      	subs	r3, r1, #1
 800083a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800083e:	460a      	mov	r2, r1
 8000840:	2300      	movs	r3, #0
 8000842:	4690      	mov	r8, r2
 8000844:	4699      	mov	r9, r3
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000852:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000856:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800085a:	460a      	mov	r2, r1
 800085c:	2300      	movs	r3, #0
 800085e:	4614      	mov	r4, r2
 8000860:	461d      	mov	r5, r3
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	012b      	lsls	r3, r5, #4
 800086c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000870:	0122      	lsls	r2, r4, #4
 8000872:	460b      	mov	r3, r1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	3307      	adds	r3, #7
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	ebad 0d03 	sub.w	sp, sp, r3
 8000880:	466b      	mov	r3, sp
 8000882:	3301      	adds	r3, #1
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  char uart_buf[1000];
  int uart_buf_len;
  char num[6];

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x35c>)
 8000892:	f005 fca5 	bl	80061e0 <HAL_GPIO_WritePin>
  slowSPI = true;
 8000896:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <main+0x360>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
  MX_SPI2_Init();
 800089c:	f000 fbf2 	bl	8001084 <MX_SPI2_Init>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 80008a0:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	2201      	movs	r2, #1
 80008a8:	4853      	ldr	r0, [pc, #332]	; (80009f8 <main+0x364>)
 80008aa:	f009 fb49 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	484f      	ldr	r0, [pc, #316]	; (80009f0 <main+0x35c>)
 80008b4:	f005 fc94 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	484c      	ldr	r0, [pc, #304]	; (80009f0 <main+0x35c>)
 80008be:	f005 fc8f 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 80008c2:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	484b      	ldr	r0, [pc, #300]	; (80009f8 <main+0x364>)
 80008cc:	f009 fb38 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4846      	ldr	r0, [pc, #280]	; (80009f0 <main+0x35c>)
 80008d6:	f005 fc83 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	4844      	ldr	r0, [pc, #272]	; (80009f0 <main+0x35c>)
 80008e0:	f005 fc7e 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 80008e4:	f207 31fa 	addw	r1, r7, #1018	; 0x3fa
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	4842      	ldr	r0, [pc, #264]	; (80009f8 <main+0x364>)
 80008ee:	f009 fb27 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2110      	movs	r1, #16
 80008f6:	483e      	ldr	r0, [pc, #248]	; (80009f0 <main+0x35c>)
 80008f8:	f005 fc72 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <main+0x35c>)
 8000902:	f005 fc6d 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000906:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2201      	movs	r2, #1
 800090e:	483a      	ldr	r0, [pc, #232]	; (80009f8 <main+0x364>)
 8000910:	f009 fb16 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2110      	movs	r1, #16
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <main+0x35c>)
 800091a:	f005 fc61 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4833      	ldr	r0, [pc, #204]	; (80009f0 <main+0x35c>)
 8000924:	f005 fc5c 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000928:	f207 31f6 	addw	r1, r7, #1014	; 0x3f6
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2201      	movs	r2, #1
 8000930:	4831      	ldr	r0, [pc, #196]	; (80009f8 <main+0x364>)
 8000932:	f009 fb05 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <main+0x35c>)
 800093c:	f005 fc50 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	482a      	ldr	r0, [pc, #168]	; (80009f0 <main+0x35c>)
 8000946:	f005 fc4b 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 800094a:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	2201      	movs	r2, #1
 8000952:	4829      	ldr	r0, [pc, #164]	; (80009f8 <main+0x364>)
 8000954:	f009 faf4 	bl	8009f40 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4824      	ldr	r0, [pc, #144]	; (80009f0 <main+0x35c>)
 800095e:	f005 fc3f 	bl	80061e0 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000962:	2203      	movs	r2, #3
 8000964:	4925      	ldr	r1, [pc, #148]	; (80009fc <main+0x368>)
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <main+0x36c>)
 8000968:	f002 f87c 	bl	8002a64 <HAL_ADC_Start_DMA>

  HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 fca8 	bl	80022c4 <HAL_Delay>

  //char spi_read_buf[20];

  state = collect; //Initial state. Set to test to test out a block of code.
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <main+0x370>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <main+0x370>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d8fb      	bhi.n	800097a <main+0x2e6>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <main+0x2f4>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	08000b01 	.word	0x08000b01
 8000990:	08000be5 	.word	0x08000be5
 8000994:	0800097b 	.word	0x0800097b
	  	  case collect:

	  		    if (counter == 0) // set spec reset pin high to tell h-chip to send data
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0x374>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10b      	bne.n	80009b8 <main+0x324>
				{
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_SET); // Tells H-chip to send data
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x378>)
 80009a8:	f005 fc1a 	bl	80061e0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, VNA_TRIG_Pin,GPIO_PIN_SET); // Tells VNA to collect data
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <main+0x35c>)
 80009b2:	f005 fc15 	bl	80061e0 <HAL_GPIO_WritePin>
 80009b6:	e098      	b.n	8000aea <main+0x456>
				}
	  		    else if (counter == 10) // set spec reset back low
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <main+0x374>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d129      	bne.n	8000a14 <main+0x380>
				{
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_RESET); // Sends SPEC_RST back low
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <main+0x378>)
 80009c8:	f005 fc0a 	bl	80061e0 <HAL_GPIO_WritePin>
					optReady = true; // We found that it was more effective to hard code the timing of this rather than tying optReady to an external interrupt
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <main+0x37c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e08a      	b.n	8000aea <main+0x456>
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	58024400 	.word	0x58024400
 80009dc:	240002a8 	.word	0x240002a8
 80009e0:	24000340 	.word	0x24000340
 80009e4:	240002f4 	.word	0x240002f4
 80009e8:	40000800 	.word	0x40000800
 80009ec:	24000000 	.word	0x24000000
 80009f0:	58020400 	.word	0x58020400
 80009f4:	24000421 	.word	0x24000421
 80009f8:	240001d4 	.word	0x240001d4
 80009fc:	2400043c 	.word	0x2400043c
 8000a00:	24000094 	.word	0x24000094
 8000a04:	24000438 	.word	0x24000438
 8000a08:	24000428 	.word	0x24000428
 8000a0c:	58020c00 	.word	0x58020c00
 8000a10:	24000420 	.word	0x24000420
				}
				else if (optReady && (counter > counterPrevious) && (collected < needed) && (counter > 14)) // wait for AD_SP from the h-chip then uses spi2 to read from adc
 8000a14:	4bae      	ldr	r3, [pc, #696]	; (8000cd0 <main+0x63c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d049      	beq.n	8000ab0 <main+0x41c>
 8000a1c:	4bad      	ldr	r3, [pc, #692]	; (8000cd4 <main+0x640>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4bad      	ldr	r3, [pc, #692]	; (8000cd8 <main+0x644>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dd43      	ble.n	8000ab0 <main+0x41c>
 8000a28:	4bac      	ldr	r3, [pc, #688]	; (8000cdc <main+0x648>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4bac      	ldr	r3, [pc, #688]	; (8000ce0 <main+0x64c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	da3d      	bge.n	8000ab0 <main+0x41c>
 8000a34:	4ba7      	ldr	r3, [pc, #668]	; (8000cd4 <main+0x640>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b0e      	cmp	r3, #14
 8000a3a:	dd39      	ble.n	8000ab0 <main+0x41c>
				{

					for(int i = 0; i < 12; i++) // A little jenky, delays so that timing is right for data collection from H-chip
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8000a42:	e009      	b.n	8000a58 <main+0x3c4>
					{
						HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);//This is the onboard red LED
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	48a6      	ldr	r0, [pc, #664]	; (8000ce4 <main+0x650>)
 8000a4a:	f005 fbe2 	bl	8006212 <HAL_GPIO_TogglePin>
					for(int i = 0; i < 12; i++) // A little jenky, delays so that timing is right for data collection from H-chip
 8000a4e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000a52:	3301      	adds	r3, #1
 8000a54:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8000a58:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000a5c:	2b0b      	cmp	r3, #11
 8000a5e:	ddf1      	ble.n	8000a44 <main+0x3b0>
					}
					HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_SET); //CS for ADC, ADC collects at the moment this goes high
 8000a60:	2201      	movs	r2, #1
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	48a0      	ldr	r0, [pc, #640]	; (8000ce8 <main+0x654>)
 8000a66:	f005 fbbb 	bl	80061e0 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_destroy_buf, 1, 100); //ADC needs this clock to convert analog value to Digital
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	499f      	ldr	r1, [pc, #636]	; (8000cec <main+0x658>)
 8000a70:	489f      	ldr	r0, [pc, #636]	; (8000cf0 <main+0x65c>)
 8000a72:	f009 fc61 	bl	800a338 <HAL_SPI_Receive>
				    HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_RESET); //Tells ADC we are done sampling
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	489b      	ldr	r0, [pc, #620]	; (8000ce8 <main+0x654>)
 8000a7c:	f005 fbb0 	bl	80061e0 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_read_buf, 1, 100); // Read digital value from ADC
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	2201      	movs	r2, #1
 8000a84:	499b      	ldr	r1, [pc, #620]	; (8000cf4 <main+0x660>)
 8000a86:	489a      	ldr	r0, [pc, #616]	; (8000cf0 <main+0x65c>)
 8000a88:	f009 fc56 	bl	800a338 <HAL_SPI_Receive>
				    counterPrevious = counter; // So we only collect when the value of counter changes
 8000a8c:	4b91      	ldr	r3, [pc, #580]	; (8000cd4 <main+0x640>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a91      	ldr	r2, [pc, #580]	; (8000cd8 <main+0x644>)
 8000a92:	6013      	str	r3, [r2, #0]
				    ADCData[collected] = spi_read_buf; // append to array
 8000a94:	4b91      	ldr	r3, [pc, #580]	; (8000cdc <main+0x648>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b96      	ldr	r3, [pc, #600]	; (8000cf4 <main+0x660>)
 8000a9a:	8819      	ldrh	r1, [r3, #0]
 8000a9c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000aa0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				    collected++;
 8000aa4:	4b8d      	ldr	r3, [pc, #564]	; (8000cdc <main+0x648>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a8c      	ldr	r2, [pc, #560]	; (8000cdc <main+0x648>)
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e01c      	b.n	8000aea <main+0x456>

				}
				else if (collected == needed) // Stop collecting data, save data
 8000ab0:	4b8a      	ldr	r3, [pc, #552]	; (8000cdc <main+0x648>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b8a      	ldr	r3, [pc, #552]	; (8000ce0 <main+0x64c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d106      	bne.n	8000aca <main+0x436>
					//uart_buf = "";
					//uart_buf_len = 0;
    				//uart_buf_len = sprintf(uart_buf,"\n");
//					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
					//*****************************************************************************************************************************************************************************************
					collected = 0; // Resets Collected to 0 for next data collection cycle
 8000abc:	4b87      	ldr	r3, [pc, #540]	; (8000cdc <main+0x648>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
					optReady = false; // Prevents code from trying to collect from ADC until reset to true
 8000ac2:	4b83      	ldr	r3, [pc, #524]	; (8000cd0 <main+0x63c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e00f      	b.n	8000aea <main+0x456>
					//************this is where we save the data***********************************************************************************************************************************************;
				}
				else if (counter == 160) // reset after one data collection cycle
 8000aca:	4b82      	ldr	r3, [pc, #520]	; (8000cd4 <main+0x640>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2ba0      	cmp	r3, #160	; 0xa0
 8000ad0:	d10b      	bne.n	8000aea <main+0x456>
				{
					counter = 0;
 8000ad2:	4b80      	ldr	r3, [pc, #512]	; (8000cd4 <main+0x640>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
					counterPrevious = 0;
 8000ad8:	4b7f      	ldr	r3, [pc, #508]	; (8000cd8 <main+0x644>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
					state = wait;
 8000ade:	4b86      	ldr	r3, [pc, #536]	; (8000cf8 <main+0x664>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
					sendData = true;
 8000ae4:	4b85      	ldr	r3, [pc, #532]	; (8000cfc <main+0x668>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
				}
	  		    if (counter == 20) //Sets VNA_TRIG_Pin low without interrupting timing of H-Chip collection
 8000aea:	4b7a      	ldr	r3, [pc, #488]	; (8000cd4 <main+0x640>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b14      	cmp	r3, #20
 8000af0:	f040 80ea 	bne.w	8000cc8 <main+0x634>
	  		    {
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4881      	ldr	r0, [pc, #516]	; (8000d00 <main+0x66c>)
 8000afa:	f005 fb71 	bl	80061e0 <HAL_GPIO_WritePin>
	  		    }
				break;
 8000afe:	e0e3      	b.n	8000cc8 <main+0x634>
	  	  case wait:
	  		  	// Just waits for 50Hz timer to switch state back to collect and checks LEDs once a second
	  		  	 if (sendData)
 8000b00:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <main+0x668>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d065      	beq.n	8000bd4 <main+0x540>
				 {
					for (int i = 1; i < 129; i++) {
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8000b0e:	e03d      	b.n	8000b8c <main+0x4f8>
						//char num[6]; // allocate space for a 5-digit number and a null terminator
						sprintf(num, "%hu", ADCData[i]); // convert uint16_t to string
 8000b10:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000b14:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000b18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4978      	ldr	r1, [pc, #480]	; (8000d04 <main+0x670>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00c fb2c 	bl	800d180 <siprintf>
						strcat(uart_buf, num); // concatenate string with current number
 8000b28:	1d3a      	adds	r2, r7, #4
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00c fb45 	bl	800d1c0 <strcat>
						if (i < 128) { // add a comma after every element except the last one
 8000b36:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3c:	dc0e      	bgt.n	8000b5c <main+0x4c8>
							strcat(uart_buf, ",");
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fbcc 	bl	80002e0 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4413      	add	r3, r2
 8000b52:	496d      	ldr	r1, [pc, #436]	; (8000d08 <main+0x674>)
 8000b54:	461a      	mov	r2, r3
 8000b56:	460b      	mov	r3, r1
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	8013      	strh	r3, [r2, #0]
						}
						if (i == 128) { // add a comma after every element except the last one
 8000b5c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b60:	2b80      	cmp	r3, #128	; 0x80
 8000b62:	d10e      	bne.n	8000b82 <main+0x4ee>
//							strcat(uart_buf, ",");
//							sprintf(num, "%hu", slowCounter);
//							strcat(uart_buf,num);
							strcat(uart_buf, "\n");
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fbb9 	bl	80002e0 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4413      	add	r3, r2
 8000b78:	4964      	ldr	r1, [pc, #400]	; (8000d0c <main+0x678>)
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	8013      	strh	r3, [r2, #0]
					for (int i = 1; i < 129; i++) {
 8000b82:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b86:	3301      	adds	r3, #1
 8000b88:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8000b8c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b90:	2b80      	cmp	r3, #128	; 0x80
 8000b92:	ddbd      	ble.n	8000b10 <main+0x47c>
						}
					}
					uart_buf_len = strlen(uart_buf);//sprintf(uart_buf, "%d", ADCData[127]);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fba1 	bl	80002e0 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,strlen(uart_buf),50);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fb99 	bl	80002e0 <strlen>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	f107 010c 	add.w	r1, r7, #12
 8000bb6:	2332      	movs	r3, #50	; 0x32
 8000bb8:	4855      	ldr	r0, [pc, #340]	; (8000d10 <main+0x67c>)
 8000bba:	f00b f99b 	bl	800bef4 <HAL_UART_Transmit>
					memset(uart_buf,0,uart_buf_len);
 8000bbe:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f00c fad1 	bl	800d170 <memset>
					sendData = false;
 8000bce:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <main+0x668>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
				 }
	  		  	 if (slowCounter > 50)
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <main+0x680>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b32      	cmp	r3, #50	; 0x32
 8000bda:	dd77      	ble.n	8000ccc <main+0x638>
	  		  	{
	  		  		slowCounter = 0;
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <main+0x680>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
	  		  		//state = checkLED;
	  		  		//seconds++;
	  		  	}
	  		  	break;
 8000be2:	e073      	b.n	8000ccc <main+0x638>
//	  		    }
	  		  	break;

	  	  case test: //Never runs in normal code operation, just a handy place to test something out
	  		  //To use set state to test right above the while loop
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000be4:	484c      	ldr	r0, [pc, #304]	; (8000d18 <main+0x684>)
 8000be6:	f009 feef 	bl	800a9c8 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim16);
 8000bea:	484c      	ldr	r0, [pc, #304]	; (8000d1c <main+0x688>)
 8000bec:	f009 feec 	bl	800a9c8 <HAL_TIM_Base_Stop_IT>
//			HAL_Delay(50);
//	  		  HAL_TIM_Base_Stop_IT(&htim2);
//	  		  HAL_TIM_Base_Stop_IT(&htim16);
//
//
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	4842      	ldr	r0, [pc, #264]	; (8000d00 <main+0x66c>)
 8000bf6:	f005 faf3 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  slowSPI = true;
 8000bfa:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <main+0x68c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
	  		  MX_SPI2_Init();
 8000c00:	f000 fa40 	bl	8001084 <MX_SPI2_Init>
	  		  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 8000c04:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000c08:	2364      	movs	r3, #100	; 0x64
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4838      	ldr	r0, [pc, #224]	; (8000cf0 <main+0x65c>)
 8000c0e:	f009 f997 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2110      	movs	r1, #16
 8000c16:	483a      	ldr	r0, [pc, #232]	; (8000d00 <main+0x66c>)
 8000c18:	f005 fae2 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2110      	movs	r1, #16
 8000c20:	4837      	ldr	r0, [pc, #220]	; (8000d00 <main+0x66c>)
 8000c22:	f005 fadd 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 8000c26:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4830      	ldr	r0, [pc, #192]	; (8000cf0 <main+0x65c>)
 8000c30:	f009 f986 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	4831      	ldr	r0, [pc, #196]	; (8000d00 <main+0x66c>)
 8000c3a:	f005 fad1 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2110      	movs	r1, #16
 8000c42:	482f      	ldr	r0, [pc, #188]	; (8000d00 <main+0x66c>)
 8000c44:	f005 facc 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 8000c48:	f207 31fa 	addw	r1, r7, #1018	; 0x3fa
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4827      	ldr	r0, [pc, #156]	; (8000cf0 <main+0x65c>)
 8000c52:	f009 f975 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4829      	ldr	r0, [pc, #164]	; (8000d00 <main+0x66c>)
 8000c5c:	f005 fac0 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	4826      	ldr	r0, [pc, #152]	; (8000d00 <main+0x66c>)
 8000c66:	f005 fabb 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000c6a:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2201      	movs	r2, #1
 8000c72:	481f      	ldr	r0, [pc, #124]	; (8000cf0 <main+0x65c>)
 8000c74:	f009 f964 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	4820      	ldr	r0, [pc, #128]	; (8000d00 <main+0x66c>)
 8000c7e:	f005 faaf 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <main+0x66c>)
 8000c88:	f005 faaa 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000c8c:	f207 31f6 	addw	r1, r7, #1014	; 0x3f6
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <main+0x65c>)
 8000c96:	f009 f953 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2110      	movs	r1, #16
 8000c9e:	4818      	ldr	r0, [pc, #96]	; (8000d00 <main+0x66c>)
 8000ca0:	f005 fa9e 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <main+0x66c>)
 8000caa:	f005 fa99 	bl	80061e0 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 8000cae:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <main+0x65c>)
 8000cb8:	f009 f942 	bl	8009f40 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <main+0x66c>)
 8000cc2:	f005 fa8d 	bl	80061e0 <HAL_GPIO_WritePin>
//	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//	  		  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
//	  		  HAL_Delay(50);

	  		  break;
 8000cc6:	e002      	b.n	8000cce <main+0x63a>
				break;
 8000cc8:	bf00      	nop
 8000cca:	e656      	b.n	800097a <main+0x2e6>
	  		  	break;
 8000ccc:	bf00      	nop
	  switch(state){
 8000cce:	e654      	b.n	800097a <main+0x2e6>
 8000cd0:	24000420 	.word	0x24000420
 8000cd4:	24000428 	.word	0x24000428
 8000cd8:	24000434 	.word	0x24000434
 8000cdc:	24000430 	.word	0x24000430
 8000ce0:	24000000 	.word	0x24000000
 8000ce4:	58022000 	.word	0x58022000
 8000ce8:	58020000 	.word	0x58020000
 8000cec:	24000426 	.word	0x24000426
 8000cf0:	240001d4 	.word	0x240001d4
 8000cf4:	24000424 	.word	0x24000424
 8000cf8:	24000438 	.word	0x24000438
 8000cfc:	24000422 	.word	0x24000422
 8000d00:	58020400 	.word	0x58020400
 8000d04:	0800da90 	.word	0x0800da90
 8000d08:	0800da94 	.word	0x0800da94
 8000d0c:	0800da98 	.word	0x0800da98
 8000d10:	2400038c 	.word	0x2400038c
 8000d14:	2400042c 	.word	0x2400042c
 8000d18:	240002a8 	.word	0x240002a8
 8000d1c:	24000340 	.word	0x24000340
 8000d20:	24000421 	.word	0x24000421

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	; 0x70
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	224c      	movs	r2, #76	; 0x4c
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00c fa1c 	bl	800d170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00c fa16 	bl	800d170 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d44:	2004      	movs	r0, #4
 8000d46:	f005 fa99 	bl	800627c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d54:	f023 0301 	bic.w	r3, r3, #1
 8000d58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <SystemClock_Config+0xfc>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <SystemClock_Config+0x100>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a2e      	ldr	r2, [pc, #184]	; (8000e24 <SystemClock_Config+0x100>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <SystemClock_Config+0x100>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d7c:	bf00      	nop
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <SystemClock_Config+0x100>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d8a:	d1f8      	bne.n	8000d7e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <SystemClock_Config+0x104>)
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <SystemClock_Config+0x104>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000dae:	2305      	movs	r3, #5
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f005 faac 	bl	8006330 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000dde:	f000 fd6b 	bl	80018b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	233f      	movs	r3, #63	; 0x3f
 8000de4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2303      	movs	r3, #3
 8000de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dee:	2308      	movs	r3, #8
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f005 feeb 	bl	8006be4 <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e14:	f000 fd50 	bl	80018b8 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3770      	adds	r7, #112	; 0x70
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58000400 	.word	0x58000400
 8000e24:	58024800 	.word	0x58024800
 8000e28:	58024400 	.word	0x58024400

08000e2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0b0      	sub	sp, #192	; 0xc0
 8000e30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f00c f999 	bl	800d170 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e4e:	230c      	movs	r3, #12
 8000e50:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e52:	2302      	movs	r3, #2
 8000e54:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e5e:	23c0      	movs	r3, #192	; 0xc0
 8000e60:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e62:	2320      	movs	r3, #32
 8000e64:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 fa42 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000e7e:	f000 fd1b 	bl	80018b8 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	37c0      	adds	r7, #192	; 0xc0
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eb0:	4b3f      	ldr	r3, [pc, #252]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000eb2:	4a40      	ldr	r2, [pc, #256]	; (8000fb4 <MX_ADC1_Init+0x128>)
 8000eb4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000eb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b39      	ldr	r3, [pc, #228]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed0:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8000edc:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b33      	ldr	r3, [pc, #204]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 3;
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000eea:	2203      	movs	r2, #3
 8000eec:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eee:	4b30      	ldr	r3, [pc, #192]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f14:	4826      	ldr	r0, [pc, #152]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f16:	f001 fc03 	bl	8002720 <HAL_ADC_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f20:	f000 fcca 	bl	80018b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4820      	ldr	r0, [pc, #128]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f30:	f002 fc1a 	bl	8003768 <HAL_ADCEx_MultiModeConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f3a:	f000 fcbd 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f42:	2306      	movs	r3, #6
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f4a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f50:	2304      	movs	r3, #4
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f62:	f001 fe61 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f6c:	f000 fca4 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ADC1_Init+0x12c>)
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f74:	230c      	movs	r3, #12
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f7e:	f001 fe53 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f88:	f000 fc96 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_ADC1_Init+0x130>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f90:	2312      	movs	r3, #18
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_ADC1_Init+0x124>)
 8000f9a:	f001 fe45 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fa4:	f000 fc88 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	24000094 	.word	0x24000094
 8000fb4:	40022000 	.word	0x40022000
 8000fb8:	04300002 	.word	0x04300002
 8000fbc:	2a000400 	.word	0x2a000400

08000fc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000fd8:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <MX_ADC3_Init+0xbc>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ADC3_Init+0xb8>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001004:	2200      	movs	r2, #0
 8001006:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_ADC3_Init+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_ADC3_Init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001030:	f001 fb76 	bl	8002720 <HAL_ADC_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800103a:	f000 fc3d 	bl	80018b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_ADC3_Init+0xc0>)
 8001040:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001042:	2306      	movs	r3, #6
 8001044:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800104a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800104e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001050:	2304      	movs	r3, #4
 8001052:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_ADC3_Init+0xb8>)
 8001062:	f001 fde1 	bl	8002c28 <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800106c:	f000 fc24 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	240000f8 	.word	0x240000f8
 800107c:	58026000 	.word	0x58026000
 8001080:	1d500080 	.word	0x1d500080

08001084 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_SPI2_Init+0xa8>)
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <MX_SPI2_Init+0xac>)
 800108c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_SPI2_Init+0xa8>)
 8001090:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001094:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_SPI2_Init+0xa8>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <MX_SPI2_Init+0xa8>)
 800109e:	220f      	movs	r2, #15
 80010a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_SPI2_Init+0xa8>)
 80010a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010aa:	4b20      	ldr	r3, [pc, #128]	; (800112c <MX_SPI2_Init+0xa8>)
 80010ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <MX_SPI2_Init+0xa8>)
 80010b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MX_SPI2_Init+0xa8>)
 80010bc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80010c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_SPI2_Init+0xa8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_SPI2_Init+0xa8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <MX_SPI2_Init+0xa8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_SPI2_Init+0xa8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI2_Init+0xa8>)
 80010dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_SPI2_Init+0xa8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_SPI2_Init+0xa8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI2_Init+0xa8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_SPI2_Init+0xa8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI2_Init+0xa8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_SPI2_Init+0xa8>)
 8001102:	2200      	movs	r2, #0
 8001104:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI2_Init+0xa8>)
 8001108:	2200      	movs	r2, #0
 800110a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_SPI2_Init+0xa8>)
 800110e:	2200      	movs	r2, #0
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI2_Init+0xa8>)
 8001114:	2200      	movs	r2, #0
 8001116:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_SPI2_Init+0xa8>)
 800111a:	f008 fded 	bl	8009cf8 <HAL_SPI_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001124:	f000 fbc8 	bl	80018b8 <Error_Handler>
//  {
//	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
//  }
  /* USER CODE END SPI2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	240001d4 	.word	0x240001d4
 8001130:	40003800 	.word	0x40003800

08001134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09a      	sub	sp, #104	; 0x68
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	222c      	movs	r2, #44	; 0x2c
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f00b fffe 	bl	800d170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MX_TIM1_Init+0x150>)
 8001176:	4a44      	ldr	r2, [pc, #272]	; (8001288 <MX_TIM1_Init+0x154>)
 8001178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_TIM1_Init+0x150>)
 800117c:	22c8      	movs	r2, #200	; 0xc8
 800117e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <MX_TIM1_Init+0x150>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <MX_TIM1_Init+0x150>)
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <MX_TIM1_Init+0x150>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <MX_TIM1_Init+0x150>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001198:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <MX_TIM1_Init+0x150>)
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119e:	4839      	ldr	r0, [pc, #228]	; (8001284 <MX_TIM1_Init+0x150>)
 80011a0:	f009 fb43 	bl	800a82a <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011aa:	f000 fb85 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011b8:	4619      	mov	r1, r3
 80011ba:	4832      	ldr	r0, [pc, #200]	; (8001284 <MX_TIM1_Init+0x150>)
 80011bc:	f009 ffcc 	bl	800b158 <HAL_TIM_ConfigClockSource>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011c6:	f000 fb77 	bl	80018b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ca:	482e      	ldr	r0, [pc, #184]	; (8001284 <MX_TIM1_Init+0x150>)
 80011cc:	f009 fc2b 	bl	800aa26 <HAL_TIM_PWM_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011d6:	f000 fb6f 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ea:	4619      	mov	r1, r3
 80011ec:	4825      	ldr	r0, [pc, #148]	; (8001284 <MX_TIM1_Init+0x150>)
 80011ee:	f00a fd07 	bl	800bc00 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011f8:	f000 fb5e 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fc:	2360      	movs	r3, #96	; 0x60
 80011fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001204:	2300      	movs	r3, #0
 8001206:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_TIM1_Init+0x150>)
 8001222:	f009 fe85 	bl	800af30 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800122c:	f000 fb44 	bl	80018b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MX_TIM1_Init+0x150>)
 8001266:	f00a fd59 	bl	800bd1c <HAL_TIMEx_ConfigBreakDeadTime>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001270:	f000 fb22 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <MX_TIM1_Init+0x150>)
 8001276:	f000 fd6f 	bl	8001d58 <HAL_TIM_MspPostInit>

}
 800127a:	bf00      	nop
 800127c:	3768      	adds	r7, #104	; 0x68
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400025c 	.word	0x2400025c
 8001288:	40010000 	.word	0x40010000

0800128c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_TIM2_Init+0x94>)
 80012ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_TIM2_Init+0x94>)
 80012b4:	22c7      	movs	r2, #199	; 0xc7
 80012b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_TIM2_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_TIM2_Init+0x94>)
 80012c0:	2209      	movs	r2, #9
 80012c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_TIM2_Init+0x94>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_TIM2_Init+0x94>)
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_TIM2_Init+0x94>)
 80012d2:	f009 faaa 	bl	800a82a <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012dc:	f000 faec 	bl	80018b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_TIM2_Init+0x94>)
 80012ee:	f009 ff33 	bl	800b158 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f8:	f000 fade 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_TIM2_Init+0x94>)
 800130a:	f00a fc79 	bl	800bc00 <HAL_TIMEx_MasterConfigSynchronization>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001314:	f000 fad0 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	240002a8 	.word	0x240002a8

08001324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_TIM4_Init+0xac>)
 800134a:	4a22      	ldr	r2, [pc, #136]	; (80013d4 <MX_TIM4_Init+0xb0>)
 800134c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_TIM4_Init+0xac>)
 8001350:	22c7      	movs	r2, #199	; 0xc7
 8001352:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_TIM4_Init+0xac>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM4_Init+0xac>)
 800135c:	2209      	movs	r2, #9
 800135e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM4_Init+0xac>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM4_Init+0xac>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <MX_TIM4_Init+0xac>)
 800136e:	f009 fb5a 	bl	800aa26 <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001378:	f000 fa9e 	bl	80018b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <MX_TIM4_Init+0xac>)
 800138c:	f00a fc38 	bl	800bc00 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001396:	f000 fa8f 	bl	80018b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	; 0x60
 800139c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <MX_TIM4_Init+0xac>)
 80013b2:	f009 fdbd 	bl	800af30 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013bc:	f000 fa7c 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <MX_TIM4_Init+0xac>)
 80013c2:	f000 fcc9 	bl	8001d58 <HAL_TIM_MspPostInit>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	240002f4 	.word	0x240002f4
 80013d4:	40000800 	.word	0x40000800

080013d8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_TIM16_Init+0x48>)
 80013de:	4a11      	ldr	r2, [pc, #68]	; (8001424 <MX_TIM16_Init+0x4c>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000-1;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_TIM16_Init+0x48>)
 80013e4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_TIM16_Init+0x48>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3000-1;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_TIM16_Init+0x48>)
 80013f2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80013f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_TIM16_Init+0x48>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_TIM16_Init+0x48>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_TIM16_Init+0x48>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM16_Init+0x48>)
 800140c:	f009 fa0d 	bl	800a82a <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001416:	f000 fa4f 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	24000340 	.word	0x24000340
 8001424:	40014400 	.word	0x40014400

08001428 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <MX_USART3_UART_Init+0x94>)
 8001430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <MX_USART3_UART_Init+0x98>)
 8001436:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800143e:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 800144c:	220c      	movs	r2, #12
 800144e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 800146a:	2200      	movs	r2, #0
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800146e:	4812      	ldr	r0, [pc, #72]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001470:	f00a fcf0 	bl	800be54 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800147a:	f000 fa1d 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147e:	2100      	movs	r1, #0
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001482:	f00b fd80 	bl	800cf86 <HAL_UARTEx_SetTxFifoThreshold>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800148c:	f000 fa14 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001490:	2100      	movs	r1, #0
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 8001494:	f00b fdb5 	bl	800d002 <HAL_UARTEx_SetRxFifoThreshold>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800149e:	f000 fa0b 	bl	80018b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_USART3_UART_Init+0x90>)
 80014a4:	f00b fd36 	bl	800cf14 <HAL_UARTEx_DisableFifoMode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80014ae:	f000 fa03 	bl	80018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2400038c 	.word	0x2400038c
 80014bc:	40004800 	.word	0x40004800
 80014c0:	0007a120 	.word	0x0007a120

080014c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_DMA_Init+0x3c>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <MX_DMA_Init+0x3c>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_DMA_Init+0x3c>)
 80014dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	200b      	movs	r0, #11
 80014ee:	f002 faf4 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014f2:	200b      	movs	r0, #11
 80014f4:	f002 fb0b 	bl	8003b0e <HAL_NVIC_EnableIRQ>

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	; 0x40
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4bc0      	ldr	r3, [pc, #768]	; (800181c <MX_GPIO_Init+0x318>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4abe      	ldr	r2, [pc, #760]	; (800181c <MX_GPIO_Init+0x318>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4bbc      	ldr	r3, [pc, #752]	; (800181c <MX_GPIO_Init+0x318>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4bb8      	ldr	r3, [pc, #736]	; (800181c <MX_GPIO_Init+0x318>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153e:	4ab7      	ldr	r2, [pc, #732]	; (800181c <MX_GPIO_Init+0x318>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001548:	4bb4      	ldr	r3, [pc, #720]	; (800181c <MX_GPIO_Init+0x318>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001556:	4bb1      	ldr	r3, [pc, #708]	; (800181c <MX_GPIO_Init+0x318>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	4aaf      	ldr	r2, [pc, #700]	; (800181c <MX_GPIO_Init+0x318>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001566:	4bad      	ldr	r3, [pc, #692]	; (800181c <MX_GPIO_Init+0x318>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001574:	4ba9      	ldr	r3, [pc, #676]	; (800181c <MX_GPIO_Init+0x318>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157a:	4aa8      	ldr	r2, [pc, #672]	; (800181c <MX_GPIO_Init+0x318>)
 800157c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001584:	4ba5      	ldr	r3, [pc, #660]	; (800181c <MX_GPIO_Init+0x318>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4ba2      	ldr	r3, [pc, #648]	; (800181c <MX_GPIO_Init+0x318>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4aa0      	ldr	r2, [pc, #640]	; (800181c <MX_GPIO_Init+0x318>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b9e      	ldr	r3, [pc, #632]	; (800181c <MX_GPIO_Init+0x318>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b9a      	ldr	r3, [pc, #616]	; (800181c <MX_GPIO_Init+0x318>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a99      	ldr	r2, [pc, #612]	; (800181c <MX_GPIO_Init+0x318>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <MX_GPIO_Init+0x318>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	4b93      	ldr	r3, [pc, #588]	; (800181c <MX_GPIO_Init+0x318>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a91      	ldr	r2, [pc, #580]	; (800181c <MX_GPIO_Init+0x318>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b8f      	ldr	r3, [pc, #572]	; (800181c <MX_GPIO_Init+0x318>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015ec:	4b8b      	ldr	r3, [pc, #556]	; (800181c <MX_GPIO_Init+0x318>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a8a      	ldr	r2, [pc, #552]	; (800181c <MX_GPIO_Init+0x318>)
 80015f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <MX_GPIO_Init+0x318>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800160a:	4b84      	ldr	r3, [pc, #528]	; (800181c <MX_GPIO_Init+0x318>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	4a82      	ldr	r2, [pc, #520]	; (800181c <MX_GPIO_Init+0x318>)
 8001612:	f043 0320 	orr.w	r3, r3, #32
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161a:	4b80      	ldr	r3, [pc, #512]	; (800181c <MX_GPIO_Init+0x318>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001628:	4b7c      	ldr	r3, [pc, #496]	; (800181c <MX_GPIO_Init+0x318>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a7b      	ldr	r2, [pc, #492]	; (800181c <MX_GPIO_Init+0x318>)
 8001630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b78      	ldr	r3, [pc, #480]	; (800181c <MX_GPIO_Init+0x318>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f241 0190 	movw	r1, #4240	; 0x1090
 800164c:	4874      	ldr	r0, [pc, #464]	; (8001820 <MX_GPIO_Init+0x31c>)
 800164e:	f004 fdc7 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001658:	4872      	ldr	r0, [pc, #456]	; (8001824 <MX_GPIO_Init+0x320>)
 800165a:	f004 fdc1 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001664:	4870      	ldr	r0, [pc, #448]	; (8001828 <MX_GPIO_Init+0x324>)
 8001666:	f004 fdbb 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	486f      	ldr	r0, [pc, #444]	; (800182c <MX_GPIO_Init+0x328>)
 8001670:	f004 fdb6 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_RST_GPIO_Port, SPEC_RST_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167a:	486d      	ldr	r0, [pc, #436]	; (8001830 <MX_GPIO_Init+0x32c>)
 800167c:	f004 fdb0 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2104      	movs	r1, #4
 8001684:	486b      	ldr	r0, [pc, #428]	; (8001834 <MX_GPIO_Init+0x330>)
 8001686:	f004 fdab 	bl	80061e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800168a:	2340      	movs	r3, #64	; 0x40
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169a:	4619      	mov	r1, r3
 800169c:	4860      	ldr	r0, [pc, #384]	; (8001820 <MX_GPIO_Init+0x31c>)
 800169e:	f004 fbef 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 VNA_TRIG_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin;
 80016a2:	f241 0390 	movw	r3, #4240	; 0x1090
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4859      	ldr	r0, [pc, #356]	; (8001820 <MX_GPIO_Init+0x31c>)
 80016bc:	f004 fbe0 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4852      	ldr	r0, [pc, #328]	; (8001824 <MX_GPIO_Init+0x320>)
 80016da:	f004 fbd1 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ee:	4619      	mov	r1, r3
 80016f0:	484f      	ldr	r0, [pc, #316]	; (8001830 <MX_GPIO_Init+0x32c>)
 80016f2:	f004 fbc5 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001708:	4619      	mov	r1, r3
 800170a:	4848      	ldr	r0, [pc, #288]	; (800182c <MX_GPIO_Init+0x328>)
 800170c:	f004 fbb8 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001722:	4619      	mov	r1, r3
 8001724:	4844      	ldr	r0, [pc, #272]	; (8001838 <MX_GPIO_Init+0x334>)
 8001726:	f004 fbab 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800172a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001730:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800173a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800173e:	4619      	mov	r1, r3
 8001740:	4839      	ldr	r0, [pc, #228]	; (8001828 <MX_GPIO_Init+0x324>)
 8001742:	f004 fb9d 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001746:	2340      	movs	r3, #64	; 0x40
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001758:	4619      	mov	r1, r3
 800175a:	4838      	ldr	r0, [pc, #224]	; (800183c <MX_GPIO_Init+0x338>)
 800175c:	f004 fb90 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	482b      	ldr	r0, [pc, #172]	; (8001828 <MX_GPIO_Init+0x324>)
 800177a:	f004 fb81 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800177e:	2301      	movs	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800178e:	4619      	mov	r1, r3
 8001790:	482b      	ldr	r0, [pc, #172]	; (8001840 <MX_GPIO_Init+0x33c>)
 8001792:	f004 fb75 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4823      	ldr	r0, [pc, #140]	; (8001838 <MX_GPIO_Init+0x334>)
 80017aa:	f004 fb69 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c2:	4619      	mov	r1, r3
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_GPIO_Init+0x328>)
 80017c6:	f004 fb5b 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_RST_Pin */
  GPIO_InitStruct.Pin = SPEC_RST_Pin;
 80017ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d4:	2302      	movs	r3, #2
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPEC_RST_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e0:	4619      	mov	r1, r3
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <MX_GPIO_Init+0x32c>)
 80017e4:	f004 fb4c 	bl	8005e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80017e8:	2304      	movs	r3, #4
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_GPIO_Init+0x330>)
 8001800:	f004 fb3e 	bl	8005e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2017      	movs	r0, #23
 800180a:	f002 f966 	bl	8003ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180e:	2017      	movs	r0, #23
 8001810:	f002 f97d 	bl	8003b0e <HAL_NVIC_EnableIRQ>

}
 8001814:	bf00      	nop
 8001816:	3740      	adds	r7, #64	; 0x40
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	58024400 	.word	0x58024400
 8001820:	58020400 	.word	0x58020400
 8001824:	58021c00 	.word	0x58021c00
 8001828:	58022000 	.word	0x58022000
 800182c:	58020000 	.word	0x58020000
 8001830:	58020c00 	.word	0x58020c00
 8001834:	58022400 	.word	0x58022400
 8001838:	58020800 	.word	0x58020800
 800183c:	58021000 	.word	0x58021000
 8001840:	58022800 	.word	0x58022800

08001844 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
	else if (GPIO_Pin == GPIO_PIN_8)
	{
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//optReady = true;
	}
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d105      	bne.n	8001878 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//		HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//counterPrevious = counter;
		counter++;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001874:	6013      	str	r3, [r2, #0]
	{
		state = collect;
		counter = 0;
		slowCounter++;
	}
}
 8001876:	e00e      	b.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if (htim == &htim16)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d10a      	bne.n	8001896 <HAL_TIM_PeriodElapsedCallback+0x3a>
		state = collect;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
		slowCounter++;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	240002a8 	.word	0x240002a8
 80018a8:	24000428 	.word	0x24000428
 80018ac:	24000340 	.word	0x24000340
 80018b0:	24000438 	.word	0x24000438
 80018b4:	2400042c 	.word	0x2400042c

080018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
}
 80018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_MspInit+0x30>)
 80018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x30>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x30>)
 80018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	58024400 	.word	0x58024400

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b092      	sub	sp, #72	; 0x48
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a6c      	ldr	r2, [pc, #432]	; (8001ac8 <HAL_ADC_MspInit+0x1d0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f040 808d 	bne.w	8001a36 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800191e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001922:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800192c:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800192e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	623b      	str	r3, [r7, #32]
 8001938:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193a:	4b64      	ldr	r3, [pc, #400]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	4a62      	ldr	r2, [pc, #392]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194a:	4b60      	ldr	r3, [pc, #384]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b5c      	ldr	r3, [pc, #368]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	4a5b      	ldr	r2, [pc, #364]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001968:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
 8001974:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001976:	2301      	movs	r3, #1
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001986:	4619      	mov	r1, r3
 8001988:	4851      	ldr	r0, [pc, #324]	; (8001ad0 <HAL_ADC_MspInit+0x1d8>)
 800198a:	f004 fa79 	bl	8005e80 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800198e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001992:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001996:	f000 fcc5 	bl	8002324 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800199a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800199e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019a2:	f000 fcbf 	bl	8002324 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_ADC_MspInit+0x1e0>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019ac:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019ae:	2209      	movs	r2, #9
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ce:	4b41      	ldr	r3, [pc, #260]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019d6:	4b3f      	ldr	r3, [pc, #252]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e4:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019ea:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 80019ec:	f002 f8aa 	bl	8003b44 <HAL_DMA_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80019f6:	f7ff ff5f 	bl	80018b8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 80019fa:	2306      	movs	r3, #6
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	4619      	mov	r1, r3
 8001a18:	482e      	ldr	r0, [pc, #184]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 8001a1a:	f004 f96b 	bl	8005cf4 <HAL_DMAEx_ConfigMuxSync>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001a24:	f7ff ff48 	bl	80018b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 8001a2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a2e:	4a29      	ldr	r2, [pc, #164]	; (8001ad4 <HAL_ADC_MspInit+0x1dc>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a34:	e044      	b.n	8001ac0 <HAL_ADC_MspInit+0x1c8>
  else if(hadc->Instance==ADC3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_ADC_MspInit+0x1e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d13f      	bne.n	8001ac0 <HAL_ADC_MspInit+0x1c8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a66:	f043 0320 	orr.w	r3, r3, #32
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0320 	and.w	r3, r3, #32
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_ADC_MspInit+0x1d4>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aac:	4619      	mov	r1, r3
 8001aae:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <HAL_ADC_MspInit+0x1e8>)
 8001ab0:	f004 f9e6 	bl	8005e80 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001ab4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001ab8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001abc:	f000 fc32 	bl	8002324 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001ac0:	bf00      	nop
 8001ac2:	3748      	adds	r7, #72	; 0x48
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	58020800 	.word	0x58020800
 8001ad4:	2400015c 	.word	0x2400015c
 8001ad8:	40020010 	.word	0x40020010
 8001adc:	58026000 	.word	0x58026000
 8001ae0:	58021400 	.word	0x58021400

08001ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0bc      	sub	sp, #240	; 0xf0
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001afc:	f107 0318 	add.w	r3, r7, #24
 8001b00:	22c0      	movs	r2, #192	; 0xc0
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00b fb33 	bl	800d170 <memset>
  if(hspi->Instance==SPI2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_SPI_MspInit+0x158>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	f040 808e 	bne.w	8001c32 <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fbe6 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001b36:	f7ff febf 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b40:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	4a38      	ldr	r2, [pc, #224]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9a:	4a29      	ldr	r2, [pc, #164]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba4:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_SPI_MspInit+0x15c>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bca:	2305      	movs	r3, #5
 8001bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481b      	ldr	r0, [pc, #108]	; (8001c44 <HAL_SPI_MspInit+0x160>)
 8001bd8:	f004 f952 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bfa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <HAL_SPI_MspInit+0x164>)
 8001c02:	f004 f93d 	bl	8005e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c20:	2305      	movs	r3, #5
 8001c22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <HAL_SPI_MspInit+0x168>)
 8001c2e:	f004 f927 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	37f0      	adds	r7, #240	; 0xf0
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40003800 	.word	0x40003800
 8001c40:	58024400 	.word	0x58024400
 8001c44:	58020c00 	.word	0x58020c00
 8001c48:	58022000 	.word	0x58022000
 8001c4c:	58020400 	.word	0x58020400

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a27      	ldr	r2, [pc, #156]	; (8001cfc <HAL_TIM_Base_MspInit+0xac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10f      	bne.n	8001c82 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c80:	e038      	b.n	8001cf4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8a:	d117      	bne.n	8001cbc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	201c      	movs	r0, #28
 8001cb0:	f001 ff13 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f001 ff2a 	bl	8003b0e <HAL_NVIC_EnableIRQ>
}
 8001cba:	e01b      	b.n	8001cf4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_TIM_Base_MspInit+0xb4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d116      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_TIM_Base_MspInit+0xb0>)
 8001cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2075      	movs	r0, #117	; 0x75
 8001cea:	f001 fef6 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001cee:	2075      	movs	r0, #117	; 0x75
 8001cf0:	f001 ff0d 	bl	8003b0e <HAL_NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	58024400 	.word	0x58024400
 8001d04:	40014400 	.word	0x40014400

08001d08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_TIM_PWM_MspInit+0x48>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d116      	bne.n	8001d48 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d20:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	201e      	movs	r0, #30
 8001d3e:	f001 fecc 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d42:	201e      	movs	r0, #30
 8001d44:	f001 fee3 	bl	8003b0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40000800 	.word	0x40000800
 8001d54:	58024400 	.word	0x58024400

08001d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_TIM_MspPostInit+0xb8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d120      	bne.n	8001dbc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4818      	ldr	r0, [pc, #96]	; (8001e18 <HAL_TIM_MspPostInit+0xc0>)
 8001db6:	f004 f863 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dba:	e024      	b.n	8001e06 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a16      	ldr	r2, [pc, #88]	; (8001e1c <HAL_TIM_MspPostInit+0xc4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11f      	bne.n	8001e06 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_TIM_MspPostInit+0xbc>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001df6:	2302      	movs	r3, #2
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4807      	ldr	r0, [pc, #28]	; (8001e20 <HAL_TIM_MspPostInit+0xc8>)
 8001e02:	f004 f83d 	bl	8005e80 <HAL_GPIO_Init>
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	58024400 	.word	0x58024400
 8001e18:	58020000 	.word	0x58020000
 8001e1c:	40000800 	.word	0x40000800
 8001e20:	58020c00 	.word	0x58020c00

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0ba      	sub	sp, #232	; 0xe8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	22c0      	movs	r2, #192	; 0xc0
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00b f993 	bl	800d170 <memset>
  if(huart->Instance==USART3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_UART_MspInit+0xc8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d146      	bne.n	8001ee2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e54:	f04f 0202 	mov.w	r2, #2
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 fa46 	bl	80072fc <HAL_RCCEx_PeriphCLKConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e76:	f7ff fd1f 	bl	80018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_MspInit+0xcc>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001eb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_UART_MspInit+0xd0>)
 8001ede:	f003 ffcf 	bl	8005e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	37e8      	adds	r7, #232	; 0xe8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40004800 	.word	0x40004800
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	58020400 	.word	0x58020400

08001ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <NMI_Handler+0x4>

08001efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <HardFault_Handler+0x4>

08001f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f44:	f000 f99e 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <DMA1_Stream0_IRQHandler+0x10>)
 8001f52:	f002 fbbd 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2400015c 	.word	0x2400015c

08001f60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f64:	2040      	movs	r0, #64	; 0x40
 8001f66:	f004 f96e 	bl	8006246 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f6e:	f004 f96a 	bl	8006246 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM2_IRQHandler+0x10>)
 8001f7e:	f008 feb7 	bl	800acf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	240002a8 	.word	0x240002a8

08001f8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <TIM4_IRQHandler+0x10>)
 8001f92:	f008 fead 	bl	800acf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	240002f4 	.word	0x240002f4

08001fa0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <TIM16_IRQHandler+0x10>)
 8001fa6:	f008 fea3 	bl	800acf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	24000340 	.word	0x24000340

08001fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <_sbrk+0x5c>)
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <_sbrk+0x60>)
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <_sbrk+0x64>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <_sbrk+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d207      	bcs.n	8001ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe4:	f00b f89a 	bl	800d11c <__errno>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	220c      	movs	r2, #12
 8001fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	e009      	b.n	8002008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <_sbrk+0x64>)
 8002004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	24080000 	.word	0x24080000
 8002014:	00000400 	.word	0x00000400
 8002018:	24000448 	.word	0x24000448
 800201c:	24000460 	.word	0x24000460

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002024:	f000 f826 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	; (800205c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	; (8002060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	; (800206c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204e:	f00b f86b 	bl	800d128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7fe fb1f 	bl	8000694 <main>
  bx  lr
 8002056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800205c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002060:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002064:	0800db20 	.word	0x0800db20
  ldr r2, =_sbss
 8002068:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800206c:	24000460 	.word	0x24000460

08002070 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC3_IRQHandler>
	...

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002078:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <SystemInit+0xfc>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <SystemInit+0xfc>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002088:	4b39      	ldr	r3, [pc, #228]	; (8002170 <SystemInit+0xfc>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <SystemInit+0xfc>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <SystemInit+0x100>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	2b06      	cmp	r3, #6
 800209e:	d807      	bhi.n	80020b0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <SystemInit+0x100>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 030f 	bic.w	r3, r3, #15
 80020a8:	4a32      	ldr	r2, [pc, #200]	; (8002174 <SystemInit+0x100>)
 80020aa:	f043 0307 	orr.w	r3, r3, #7
 80020ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <SystemInit+0x104>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <SystemInit+0x104>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <SystemInit+0x104>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <SystemInit+0x104>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	492c      	ldr	r1, [pc, #176]	; (8002178 <SystemInit+0x104>)
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <SystemInit+0x108>)
 80020ca:	4013      	ands	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <SystemInit+0x100>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <SystemInit+0x100>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 030f 	bic.w	r3, r3, #15
 80020e2:	4a24      	ldr	r2, [pc, #144]	; (8002174 <SystemInit+0x100>)
 80020e4:	f043 0307 	orr.w	r3, r3, #7
 80020e8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <SystemInit+0x104>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <SystemInit+0x104>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <SystemInit+0x104>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <SystemInit+0x104>)
 80020fe:	4a20      	ldr	r2, [pc, #128]	; (8002180 <SystemInit+0x10c>)
 8002100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <SystemInit+0x104>)
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <SystemInit+0x110>)
 8002106:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <SystemInit+0x104>)
 800210a:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <SystemInit+0x114>)
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <SystemInit+0x104>)
 8002110:	2200      	movs	r2, #0
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <SystemInit+0x104>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <SystemInit+0x114>)
 8002118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <SystemInit+0x104>)
 800211c:	2200      	movs	r2, #0
 800211e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <SystemInit+0x104>)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <SystemInit+0x114>)
 8002124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <SystemInit+0x104>)
 8002128:	2200      	movs	r2, #0
 800212a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <SystemInit+0x104>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a11      	ldr	r2, [pc, #68]	; (8002178 <SystemInit+0x104>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <SystemInit+0x104>)
 800213a:	2200      	movs	r2, #0
 800213c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <SystemInit+0x118>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	4a12      	ldr	r2, [pc, #72]	; (800218c <SystemInit+0x118>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <SystemInit+0x11c>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <SystemInit+0x120>)
 8002150:	4013      	ands	r3, r2
 8002152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002156:	d202      	bcs.n	800215e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <SystemInit+0x124>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <SystemInit+0x128>)
 8002160:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002164:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	52002000 	.word	0x52002000
 8002178:	58024400 	.word	0x58024400
 800217c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002180:	02020200 	.word	0x02020200
 8002184:	01ff0000 	.word	0x01ff0000
 8002188:	01010280 	.word	0x01010280
 800218c:	580000c0 	.word	0x580000c0
 8002190:	5c001000 	.word	0x5c001000
 8002194:	ffff0000 	.word	0xffff0000
 8002198:	51008108 	.word	0x51008108
 800219c:	52004000 	.word	0x52004000

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a6:	2003      	movs	r0, #3
 80021a8:	f001 fc8c 	bl	8003ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021ac:	f004 fed0 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_Init+0x68>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	4913      	ldr	r1, [pc, #76]	; (800220c <HAL_Init+0x6c>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_Init+0x68>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <HAL_Init+0x6c>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	fa22 f303 	lsr.w	r3, r2, r3
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_Init+0x70>)
 80021e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_Init+0x74>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 f814 	bl	8002218 <HAL_InitTick>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e002      	b.n	8002200 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021fa:	f7ff fb63 	bl	80018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	58024400 	.word	0x58024400
 800220c:	0800da9c 	.word	0x0800da9c
 8002210:	24000008 	.word	0x24000008
 8002214:	24000004 	.word	0x24000004

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_InitTick+0x60>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e021      	b.n	8002270 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_InitTick+0x64>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_InitTick+0x60>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fc71 	bl	8003b2a <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f001 fc3b 	bl	8003ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_InitTick+0x68>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	24000010 	.word	0x24000010
 800227c:	24000004 	.word	0x24000004
 8002280:	2400000c 	.word	0x2400000c

08002284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_IncTick+0x20>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_IncTick+0x24>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_IncTick+0x24>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	24000010 	.word	0x24000010
 80022a8:	2400044c 	.word	0x2400044c

080022ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_GetTick+0x14>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2400044c 	.word	0x2400044c

080022c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff ffee 	bl	80022ac <HAL_GetTick>
 80022d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d005      	beq.n	80022ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_Delay+0x44>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ea:	bf00      	nop
 80022ec:	f7ff ffde 	bl	80022ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d8f7      	bhi.n	80022ec <HAL_Delay+0x28>
  {
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	24000010 	.word	0x24000010

0800230c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetREVID+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1b      	lsrs	r3, r3, #16
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	5c001000 	.word	0x5c001000

08002324 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	43db      	mvns	r3, r3
 8002336:	401a      	ands	r2, r3
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	58000400 	.word	0x58000400

08002350 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800242a:	b480      	push	{r7}
 800242c:	b087      	sub	sp, #28
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	431a      	orrs	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]
  }
}
 8002454:	bf00      	nop
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002486:	b480      	push	{r7}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	3330      	adds	r3, #48	; 0x30
 8002496:	461a      	mov	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	4413      	add	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	211f      	movs	r1, #31
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	401a      	ands	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 011f 	and.w	r1, r3, #31
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	431a      	orrs	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024d2:	bf00      	nop
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 0203 	bic.w	r2, r3, #3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3314      	adds	r3, #20
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	0d1b      	lsrs	r3, r3, #20
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2107      	movs	r1, #7
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	401a      	ands	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	0d1b      	lsrs	r3, r3, #20
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	431a      	orrs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800254e:	bf00      	nop
 8002550:	371c      	adds	r7, #28
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002574:	43db      	mvns	r3, r3
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0318 	and.w	r3, r3, #24
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002580:	40d9      	lsrs	r1, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	400b      	ands	r3, r1
 8002586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258a:	431a      	orrs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	000fffff 	.word	0x000fffff

080025a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 031f 	and.w	r3, r3, #31
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6093      	str	r3, [r2, #8]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	5fffffc0 	.word	0x5fffffc0

080025e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025f8:	d101      	bne.n	80025fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <LL_ADC_EnableInternalRegulator+0x24>)
 800261a:	4013      	ands	r3, r2
 800261c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	6fffffc0 	.word	0x6fffffc0

08002634 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002648:	d101      	bne.n	800264e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <LL_ADC_Enable+0x24>)
 800266a:	4013      	ands	r3, r2
 800266c:	f043 0201 	orr.w	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	7fffffc0 	.word	0x7fffffc0

08002684 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <LL_ADC_IsEnabled+0x18>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <LL_ADC_IsEnabled+0x1a>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <LL_ADC_REG_StartConversion+0x24>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	7fffffc0 	.word	0x7fffffc0

080026d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d101      	bne.n	80026ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b08      	cmp	r3, #8
 800270c:	d101      	bne.n	8002712 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e18f      	b.n	8002a5a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff f8d5 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff3f 	bl	80025e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff25 	bl	80025c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff5a 	bl	8002634 <LL_ADC_IsInternalRegulatorEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d114      	bne.n	80027b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff3e 	bl	800260c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_ADC_Init+0x290>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	4a87      	ldr	r2, [pc, #540]	; (80029b4 <HAL_ADC_Init+0x294>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a2:	e002      	b.n	80027aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f9      	bne.n	80027a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff3d 	bl	8002634 <LL_ADC_IsInternalRegulatorEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0210 	orr.w	r2, r3, #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff77 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 8129 	bne.w	8002a48 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8125 	bne.w	8002a48 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff36 	bl	8002684 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d136      	bne.n	800288c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a65      	ldr	r2, [pc, #404]	; (80029b8 <HAL_ADC_Init+0x298>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_ADC_Init+0x112>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a63      	ldr	r2, [pc, #396]	; (80029bc <HAL_ADC_Init+0x29c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10e      	bne.n	8002850 <HAL_ADC_Init+0x130>
 8002832:	4861      	ldr	r0, [pc, #388]	; (80029b8 <HAL_ADC_Init+0x298>)
 8002834:	f7ff ff26 	bl	8002684 <LL_ADC_IsEnabled>
 8002838:	4604      	mov	r4, r0
 800283a:	4860      	ldr	r0, [pc, #384]	; (80029bc <HAL_ADC_Init+0x29c>)
 800283c:	f7ff ff22 	bl	8002684 <LL_ADC_IsEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	4323      	orrs	r3, r4
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e008      	b.n	8002862 <HAL_ADC_Init+0x142>
 8002850:	485b      	ldr	r0, [pc, #364]	; (80029c0 <HAL_ADC_Init+0x2a0>)
 8002852:	f7ff ff17 	bl	8002684 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a53      	ldr	r2, [pc, #332]	; (80029b8 <HAL_ADC_Init+0x298>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x15a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a51      	ldr	r2, [pc, #324]	; (80029bc <HAL_ADC_Init+0x29c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x15e>
 800287a:	4a52      	ldr	r2, [pc, #328]	; (80029c4 <HAL_ADC_Init+0x2a4>)
 800287c:	e000      	b.n	8002880 <HAL_ADC_Init+0x160>
 800287e:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_ADC_Init+0x2a8>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7ff fd62 	bl	8002350 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800288c:	f7ff fd3e 	bl	800230c <HAL_GetREVID>
 8002890:	4603      	mov	r3, r0
 8002892:	f241 0203 	movw	r2, #4099	; 0x1003
 8002896:	4293      	cmp	r3, r2
 8002898:	d914      	bls.n	80028c4 <HAL_ADC_Init+0x1a4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d110      	bne.n	80028c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7d5b      	ldrb	r3, [r3, #21]
 80028a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7f1b      	ldrb	r3, [r3, #28]
 80028b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028bc:	f043 030c 	orr.w	r3, r3, #12
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e00d      	b.n	80028e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7d5b      	ldrb	r3, [r3, #21]
 80028c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7f1b      	ldrb	r3, [r3, #28]
 80028da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7f1b      	ldrb	r3, [r3, #28]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	045b      	lsls	r3, r3, #17
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_ADC_Init+0x2ac>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	430b      	orrs	r3, r1
 8002924:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fed2 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002930:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fedf 	bl	80026fa <LL_ADC_INJ_IsConversionOngoing>
 800293c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d15f      	bne.n	8002a04 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15c      	bne.n	8002a04 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7d1b      	ldrb	r3, [r3, #20]
 800294e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_ADC_Init+0x2b0>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	430b      	orrs	r3, r1
 800296a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002972:	2b01      	cmp	r3, #1
 8002974:	d130      	bne.n	80029d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_ADC_Init+0x2b4>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800298a:	3a01      	subs	r2, #1
 800298c:	0411      	lsls	r1, r2, #16
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	e01c      	b.n	80029e8 <HAL_ADC_Init+0x2c8>
 80029ae:	bf00      	nop
 80029b0:	24000004 	.word	0x24000004
 80029b4:	053e2d63 	.word	0x053e2d63
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40022100 	.word	0x40022100
 80029c0:	58026000 	.word	0x58026000
 80029c4:	40022300 	.word	0x40022300
 80029c8:	58026300 	.word	0x58026300
 80029cc:	fff0c003 	.word	0xfff0c003
 80029d0:	ffffbffc 	.word	0xffffbffc
 80029d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fd80 	bl	8003504 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10c      	bne.n	8002a26 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f023 010f 	bic.w	r1, r3, #15
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	1e5a      	subs	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
 8002a24:	e007      	b.n	8002a36 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 020f 	bic.w	r2, r2, #15
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
 8002a46:	e007      	b.n	8002a58 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0210 	orr.w	r2, r3, #16
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	; 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop

08002a64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a55      	ldr	r2, [pc, #340]	; (8002bcc <HAL_ADC_Start_DMA+0x168>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_ADC_Start_DMA+0x20>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <HAL_ADC_Start_DMA+0x16c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_Start_DMA+0x24>
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_ADC_Start_DMA+0x170>)
 8002a86:	e000      	b.n	8002a8a <HAL_ADC_Start_DMA+0x26>
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_ADC_Start_DMA+0x174>)
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fd8a 	bl	80025a4 <LL_ADC_GetMultimode>
 8002a90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe1c 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 808c 	bne.w	8002bbc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_ADC_Start_DMA+0x4e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e087      	b.n	8002bc2 <HAL_ADC_Start_DMA+0x15e>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d002      	beq.n	8002acc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b09      	cmp	r3, #9
 8002aca:	d170      	bne.n	8002bae <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fbfb 	bl	80032c8 <ADC_Enable>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ad6:	7dfb      	ldrb	r3, [r7, #23]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d163      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_ADC_Start_DMA+0x178>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <HAL_ADC_Start_DMA+0x16c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d002      	beq.n	8002afc <HAL_ADC_Start_DMA+0x98>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e000      	b.n	8002afe <HAL_ADC_Start_DMA+0x9a>
 8002afc:	4b33      	ldr	r3, [pc, #204]	; (8002bcc <HAL_ADC_Start_DMA+0x168>)
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d002      	beq.n	8002b0c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	f023 0206 	bic.w	r2, r3, #6
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_ADC_Start_DMA+0x17c>)
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <HAL_ADC_Start_DMA+0x180>)
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_ADC_Start_DMA+0x184>)
 8002b4e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	221c      	movs	r2, #28
 8002b56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0210 	orr.w	r2, r2, #16
 8002b6e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff fcaf 	bl	80024de <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3340      	adds	r3, #64	; 0x40
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f001 fb34 	bl	80041fc <HAL_DMA_Start_IT>
 8002b94:	4603      	mov	r3, r0
 8002b96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fd85 	bl	80026ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002ba2:	e00d      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002bac:	e008      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bba:	e001      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40022100 	.word	0x40022100
 8002bd4:	40022300 	.word	0x40022300
 8002bd8:	58026300 	.word	0x58026300
 8002bdc:	fffff0fe 	.word	0xfffff0fe
 8002be0:	080033dd 	.word	0x080033dd
 8002be4:	080034b5 	.word	0x080034b5
 8002be8:	080034d1 	.word	0x080034d1

08002bec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b0a1      	sub	sp, #132	; 0x84
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a9d      	ldr	r2, [pc, #628]	; (8002eb8 <HAL_ADC_ConfigChannel+0x290>)
 8002c42:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x2a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e321      	b.n	8003296 <HAL_ADC_ConfigChannel+0x66e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fd38 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 8306 	bne.w	8003278 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x62>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	e016      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x90>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	69d1      	ldr	r1, [r2, #28]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7ff fbd7 	bl	8002486 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fcf9 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002ce2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fd06 	bl	80026fa <LL_ADC_INJ_IsConversionOngoing>
 8002cee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80b3 	bne.w	8002e5e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80af 	bne.w	8002e5e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7ff fbf9 	bl	8002504 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_ADC_ConfigChannel+0x294>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x110>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	e01d      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x14c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x136>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	e00a      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x14c>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d027      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d8c:	f7ff fb14 	bl	80023b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7e5b      	ldrb	r3, [r3, #25]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x17e>
 8002da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002da4:	e000      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x180>
 8002da6:	2300      	movs	r3, #0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f7ff fb3e 	bl	800242a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7e1b      	ldrb	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x19c>
 8002dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dc2:	e000      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x19e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7ff fb16 	bl	80023f8 <LL_ADC_SetDataRightShift>
 8002dcc:	e047      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	069b      	lsls	r3, r3, #26
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d107      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	069b      	lsls	r3, r3, #26
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d107      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e14:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	069b      	lsls	r3, r3, #26
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d107      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e38:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	069b      	lsls	r3, r3, #26
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d107      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e5c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fc0e 	bl	8002684 <LL_ADC_IsEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f040 820d 	bne.w	800328a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f7ff fb6d 	bl	800255c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <HAL_ADC_ConfigChannel+0x290>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f040 8133 	bne.w	80030f4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d110      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x298>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2b09      	cmp	r3, #9
 8002eac:	bf94      	ite	ls
 8002eae:	2301      	movls	r3, #1
 8002eb0:	2300      	movhi	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	e01e      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x2cc>
 8002eb6:	bf00      	nop
 8002eb8:	47ff0000 	.word	0x47ff0000
 8002ebc:	5c001000 	.word	0x5c001000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	bf94      	ite	ls
 8002eee:	2301      	movls	r3, #1
 8002ef0:	2300      	movhi	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d079      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x2ec>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	069b      	lsls	r3, r3, #26
 8002f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f12:	e015      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x318>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f24:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e003      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	069b      	lsls	r3, r3, #26
 8002f3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x338>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	2101      	movs	r1, #1
 8002f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5e:	e017      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x368>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e003      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	ea42 0103 	orr.w	r1, r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x38e>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	051b      	lsls	r3, r3, #20
 8002fb4:	e018      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x3c0>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbe:	fa93 f3a3 	rbit	r3, r3
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e003      	b.n	8002fda <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	e07e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x3e0>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	3301      	adds	r3, #1
 8003000:	069b      	lsls	r3, r3, #26
 8003002:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003006:	e015      	b.n	8003034 <HAL_ADC_ConfigChannel+0x40c>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e003      	b.n	800302c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	3301      	adds	r3, #1
 800302e:	069b      	lsls	r3, r3, #26
 8003030:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x42c>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	3301      	adds	r3, #1
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	e017      	b.n	8003084 <HAL_ADC_ConfigChannel+0x45c>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	61bb      	str	r3, [r7, #24]
  return result;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e003      	b.n	8003078 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2101      	movs	r1, #1
 8003080:	fa01 f303 	lsl.w	r3, r1, r3
 8003084:	ea42 0103 	orr.w	r1, r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10d      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x488>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	3301      	adds	r3, #1
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	3b1e      	subs	r3, #30
 80030a8:	051b      	lsls	r3, r3, #20
 80030aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ae:	e01b      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x4c0>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	60fb      	str	r3, [r7, #12]
  return result;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e003      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 021f 	and.w	r2, r3, #31
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	3b1e      	subs	r3, #30
 80030e2:	051b      	lsls	r3, r3, #20
 80030e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e8:	430b      	orrs	r3, r1
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6892      	ldr	r2, [r2, #8]
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7ff fa08 	bl	8002504 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f280 80c6 	bge.w	800328a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_ADC_ConfigChannel+0x4ea>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a65      	ldr	r2, [pc, #404]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x4ee>
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_ADC_ConfigChannel+0x680>)
 8003114:	e000      	b.n	8003118 <HAL_ADC_ConfigChannel+0x4f0>
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_ADC_ConfigChannel+0x684>)
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff f93f 	bl	800239c <LL_ADC_GetCommonPathInternalCh>
 800311e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x50c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5d      	ldr	r2, [pc, #372]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10e      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x52a>
 8003134:	485a      	ldr	r0, [pc, #360]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 8003136:	f7ff faa5 	bl	8002684 <LL_ADC_IsEnabled>
 800313a:	4604      	mov	r4, r0
 800313c:	4859      	ldr	r0, [pc, #356]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 800313e:	f7ff faa1 	bl	8002684 <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	4323      	orrs	r3, r4
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e008      	b.n	8003164 <HAL_ADC_ConfigChannel+0x53c>
 8003152:	4857      	ldr	r0, [pc, #348]	; (80032b0 <HAL_ADC_ConfigChannel+0x688>)
 8003154:	f7ff fa96 	bl	8002684 <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d07d      	beq.n	8003264 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a51      	ldr	r2, [pc, #324]	; (80032b4 <HAL_ADC_ConfigChannel+0x68c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d130      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12b      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_ADC_ConfigChannel+0x688>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f040 8081 	bne.w	800328a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a44      	ldr	r2, [pc, #272]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_ADC_ConfigChannel+0x574>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x578>
 800319c:	4a42      	ldr	r2, [pc, #264]	; (80032a8 <HAL_ADC_ConfigChannel+0x680>)
 800319e:	e000      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x57a>
 80031a0:	4a42      	ldr	r2, [pc, #264]	; (80032ac <HAL_ADC_ConfigChannel+0x684>)
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7ff f8e3 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b0:	4b41      	ldr	r3, [pc, #260]	; (80032b8 <HAL_ADC_ConfigChannel+0x690>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <HAL_ADC_ConfigChannel+0x694>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	3301      	adds	r3, #1
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d2:	e05a      	b.n	800328a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <HAL_ADC_ConfigChannel+0x698>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11e      	bne.n	800321c <HAL_ADC_ConfigChannel+0x5f4>
 80031de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d119      	bne.n	800321c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a30      	ldr	r2, [pc, #192]	; (80032b0 <HAL_ADC_ConfigChannel+0x688>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d14b      	bne.n	800328a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x5de>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x5e2>
 8003206:	4a28      	ldr	r2, [pc, #160]	; (80032a8 <HAL_ADC_ConfigChannel+0x680>)
 8003208:	e000      	b.n	800320c <HAL_ADC_ConfigChannel+0x5e4>
 800320a:	4a28      	ldr	r2, [pc, #160]	; (80032ac <HAL_ADC_ConfigChannel+0x684>)
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	f7ff f8ae 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800321a:	e036      	b.n	800328a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a28      	ldr	r2, [pc, #160]	; (80032c4 <HAL_ADC_ConfigChannel+0x69c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d131      	bne.n	800328a <HAL_ADC_ConfigChannel+0x662>
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d12c      	bne.n	800328a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1e      	ldr	r2, [pc, #120]	; (80032b0 <HAL_ADC_ConfigChannel+0x688>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d127      	bne.n	800328a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_ADC_ConfigChannel+0x678>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_ADC_ConfigChannel+0x626>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_ADC_ConfigChannel+0x67c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x62a>
 800324e:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <HAL_ADC_ConfigChannel+0x680>)
 8003250:	e000      	b.n	8003254 <HAL_ADC_ConfigChannel+0x62c>
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_ADC_ConfigChannel+0x684>)
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7ff f88a 	bl	8002376 <LL_ADC_SetCommonPathInternalCh>
 8003262:	e012      	b.n	800328a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003276:	e008      	b.n	800328a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003292:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003296:	4618      	mov	r0, r3
 8003298:	3784      	adds	r7, #132	; 0x84
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	bf00      	nop
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40022100 	.word	0x40022100
 80032a8:	40022300 	.word	0x40022300
 80032ac:	58026300 	.word	0x58026300
 80032b0:	58026000 	.word	0x58026000
 80032b4:	cb840000 	.word	0xcb840000
 80032b8:	24000004 	.word	0x24000004
 80032bc:	053e2d63 	.word	0x053e2d63
 80032c0:	c7520000 	.word	0xc7520000
 80032c4:	cfb80000 	.word	0xcfb80000

080032c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f9d5 	bl	8002684 <LL_ADC_IsEnabled>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d16e      	bne.n	80033be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	4b38      	ldr	r3, [pc, #224]	; (80033c8 <ADC_Enable+0x100>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0210 	orr.w	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e05a      	b.n	80033c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff f9a4 	bl	800265c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003314:	f7fe ffca 	bl	80022ac <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <ADC_Enable+0x104>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <ADC_Enable+0x66>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a29      	ldr	r2, [pc, #164]	; (80033d0 <ADC_Enable+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <ADC_Enable+0x6a>
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <ADC_Enable+0x10c>)
 8003330:	e000      	b.n	8003334 <ADC_Enable+0x6c>
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <ADC_Enable+0x110>)
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff f935 	bl	80025a4 <LL_ADC_GetMultimode>
 800333a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <ADC_Enable+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d002      	beq.n	800334c <ADC_Enable+0x84>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e000      	b.n	800334e <ADC_Enable+0x86>
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <ADC_Enable+0x104>)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4293      	cmp	r3, r2
 8003354:	d02c      	beq.n	80033b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d130      	bne.n	80033be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800335c:	e028      	b.n	80033b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff f98e 	bl	8002684 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff f972 	bl	800265c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003378:	f7fe ff98 	bl	80022ac <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d914      	bls.n	80033b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d00d      	beq.n	80033b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d1cf      	bne.n	800335e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	8000003f 	.word	0x8000003f
 80033cc:	40022000 	.word	0x40022000
 80033d0:	40022100 	.word	0x40022100
 80033d4:	40022300 	.word	0x40022300
 80033d8:	58026300 	.word	0x58026300

080033dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d14b      	bne.n	800348e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d021      	beq.n	8003454 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff f823 	bl	8002460 <LL_ADC_REG_IsTriggerSourceSWStart>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d032      	beq.n	8003486 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12b      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11f      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
 8003452:	e018      	b.n	8003486 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d111      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d105      	bne.n	8003486 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff fbb0 	bl	8002bec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800348c:	e00e      	b.n	80034ac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff fbba 	bl	8002c14 <HAL_ADC_ErrorCallback>
}
 80034a0:	e004      	b.n	80034ac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff fb9c 	bl	8002c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fb8c 	bl	8002c14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7a      	ldr	r2, [pc, #488]	; (80036fc <ADC_ConfigureBoostMode+0x1f8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <ADC_ConfigureBoostMode+0x1c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a79      	ldr	r2, [pc, #484]	; (8003700 <ADC_ConfigureBoostMode+0x1fc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <ADC_ConfigureBoostMode+0x30>
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <ADC_ConfigureBoostMode+0x200>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003528:	2b00      	cmp	r3, #0
 800352a:	bf14      	ite	ne
 800352c:	2301      	movne	r3, #1
 800352e:	2300      	moveq	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e008      	b.n	8003546 <ADC_ConfigureBoostMode+0x42>
 8003534:	4b74      	ldr	r3, [pc, #464]	; (8003708 <ADC_ConfigureBoostMode+0x204>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01c      	beq.n	8003584 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800354a:	f003 fe7b 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 800354e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003558:	d010      	beq.n	800357c <ADC_ConfigureBoostMode+0x78>
 800355a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355e:	d873      	bhi.n	8003648 <ADC_ConfigureBoostMode+0x144>
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d002      	beq.n	800356c <ADC_ConfigureBoostMode+0x68>
 8003566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356a:	d16d      	bne.n	8003648 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	0c1b      	lsrs	r3, r3, #16
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	fbb2 f3f3 	udiv	r3, r2, r3
 8003578:	60fb      	str	r3, [r7, #12]
        break;
 800357a:	e068      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	60fb      	str	r3, [r7, #12]
        break;
 8003582:	e064      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003584:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	f005 f8c0 	bl	8008710 <HAL_RCCEx_GetPeriphCLKFreq>
 8003590:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800359a:	d051      	beq.n	8003640 <ADC_ConfigureBoostMode+0x13c>
 800359c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035a0:	d854      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035a6:	d047      	beq.n	8003638 <ADC_ConfigureBoostMode+0x134>
 80035a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035ac:	d84e      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035b2:	d03d      	beq.n	8003630 <ADC_ConfigureBoostMode+0x12c>
 80035b4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035b8:	d848      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035be:	d033      	beq.n	8003628 <ADC_ConfigureBoostMode+0x124>
 80035c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c4:	d842      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035ca:	d029      	beq.n	8003620 <ADC_ConfigureBoostMode+0x11c>
 80035cc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035d0:	d83c      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035d2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035d6:	d01a      	beq.n	800360e <ADC_ConfigureBoostMode+0x10a>
 80035d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035dc:	d836      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035e2:	d014      	beq.n	800360e <ADC_ConfigureBoostMode+0x10a>
 80035e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035e8:	d830      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ee:	d00e      	beq.n	800360e <ADC_ConfigureBoostMode+0x10a>
 80035f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f4:	d82a      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 80035f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035fa:	d008      	beq.n	800360e <ADC_ConfigureBoostMode+0x10a>
 80035fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003600:	d824      	bhi.n	800364c <ADC_ConfigureBoostMode+0x148>
 8003602:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003606:	d002      	beq.n	800360e <ADC_ConfigureBoostMode+0x10a>
 8003608:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800360c:	d11e      	bne.n	800364c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	0c9b      	lsrs	r3, r3, #18
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	60fb      	str	r3, [r7, #12]
        break;
 800361e:	e016      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	60fb      	str	r3, [r7, #12]
        break;
 8003626:	e012      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	60fb      	str	r3, [r7, #12]
        break;
 800362e:	e00e      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	60fb      	str	r3, [r7, #12]
        break;
 8003636:	e00a      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	09db      	lsrs	r3, r3, #7
 800363c:	60fb      	str	r3, [r7, #12]
        break;
 800363e:	e006      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	60fb      	str	r3, [r7, #12]
        break;
 8003646:	e002      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800364c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800364e:	f7fe fe5d 	bl	800230c <HAL_GetREVID>
 8003652:	4603      	mov	r3, r0
 8003654:	f241 0203 	movw	r2, #4099	; 0x1003
 8003658:	4293      	cmp	r3, r2
 800365a:	d815      	bhi.n	8003688 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a2b      	ldr	r2, [pc, #172]	; (800370c <ADC_ConfigureBoostMode+0x208>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d908      	bls.n	8003676 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003672:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003674:	e03e      	b.n	80036f4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003684:	609a      	str	r2, [r3, #8]
}
 8003686:	e035      	b.n	80036f4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	085b      	lsrs	r3, r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <ADC_ConfigureBoostMode+0x20c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d808      	bhi.n	80036a8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	e025      	b.n	80036f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <ADC_ConfigureBoostMode+0x210>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d80a      	bhi.n	80036c6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	e016      	b.n	80036f4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <ADC_ConfigureBoostMode+0x214>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d80a      	bhi.n	80036e4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	609a      	str	r2, [r3, #8]
}
 80036e2:	e007      	b.n	80036f4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40022000 	.word	0x40022000
 8003700:	40022100 	.word	0x40022100
 8003704:	40022300 	.word	0x40022300
 8003708:	58026300 	.word	0x58026300
 800370c:	01312d00 	.word	0x01312d00
 8003710:	005f5e10 	.word	0x005f5e10
 8003714:	00bebc20 	.word	0x00bebc20
 8003718:	017d7840 	.word	0x017d7840

0800371c <LL_ADC_IsEnabled>:
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <LL_ADC_IsEnabled+0x18>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <LL_ADC_IsEnabled+0x1a>
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_ADC_REG_IsConversionOngoing>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b04      	cmp	r3, #4
 8003754:	d101      	bne.n	800375a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b09f      	sub	sp, #124	; 0x7c
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003782:	2302      	movs	r3, #2
 8003784:	e0be      	b.n	8003904 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
 8003794:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5c      	ldr	r2, [pc, #368]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d102      	bne.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037a0:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	e001      	b.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e09d      	b.n	8003904 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ffb9 	bl	8003742 <LL_ADC_REG_IsConversionOngoing>
 80037d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ffb3 	bl	8003742 <LL_ADC_REG_IsConversionOngoing>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d17f      	bne.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d17c      	bne.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a46      	ldr	r2, [pc, #280]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80037fc:	4b45      	ldr	r3, [pc, #276]	; (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037fe:	e000      	b.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003800:	4b45      	ldr	r3, [pc, #276]	; (8003918 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003802:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d039      	beq.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	431a      	orrs	r2, r3
 800381a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a38      	ldr	r2, [pc, #224]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10e      	bne.n	8003850 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003832:	4836      	ldr	r0, [pc, #216]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003834:	f7ff ff72 	bl	800371c <LL_ADC_IsEnabled>
 8003838:	4604      	mov	r4, r0
 800383a:	4835      	ldr	r0, [pc, #212]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800383c:	f7ff ff6e 	bl	800371c <LL_ADC_IsEnabled>
 8003840:	4603      	mov	r3, r0
 8003842:	4323      	orrs	r3, r4
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e008      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003850:	4832      	ldr	r0, [pc, #200]	; (800391c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003852:	f7ff ff63 	bl	800371c <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d047      	beq.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800386c:	4013      	ands	r3, r2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	430a      	orrs	r2, r1
 8003878:	431a      	orrs	r2, r3
 800387a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800387e:	e03a      	b.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d10e      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80038a0:	481a      	ldr	r0, [pc, #104]	; (800390c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038a2:	f7ff ff3b 	bl	800371c <LL_ADC_IsEnabled>
 80038a6:	4604      	mov	r4, r0
 80038a8:	4819      	ldr	r0, [pc, #100]	; (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038aa:	f7ff ff37 	bl	800371c <LL_ADC_IsEnabled>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4323      	orrs	r3, r4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	e008      	b.n	80038d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80038be:	4817      	ldr	r0, [pc, #92]	; (800391c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038c0:	f7ff ff2c 	bl	800371c <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038da:	4013      	ands	r3, r2
 80038dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e0:	e009      	b.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038f4:	e000      	b.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003900:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003904:	4618      	mov	r0, r3
 8003906:	377c      	adds	r7, #124	; 0x7c
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}
 800390c:	40022000 	.word	0x40022000
 8003910:	40022100 	.word	0x40022100
 8003914:	40022300 	.word	0x40022300
 8003918:	58026300 	.word	0x58026300
 800391c:	58026000 	.word	0x58026000
 8003920:	fffff0e0 	.word	0xfffff0e0

08003924 <__NVIC_SetPriorityGrouping>:
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <__NVIC_SetPriorityGrouping+0x40>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	; (8003964 <__NVIC_SetPriorityGrouping+0x40>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00
 8003968:	05fa0000 	.word	0x05fa0000

0800396c <__NVIC_GetPriorityGrouping>:
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a90:	d301      	bcc.n	8003a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00f      	b.n	8003ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a0a      	ldr	r2, [pc, #40]	; (8003ac0 <SysTick_Config+0x40>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f7ff ff8e 	bl	80039c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <SysTick_Config+0x40>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	; (8003ac0 <SysTick_Config+0x40>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff29 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae8:	f7ff ff40 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	6978      	ldr	r0, [r7, #20]
 8003af4:	f7ff ff90 	bl	8003a18 <NVIC_EncodePriority>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003afe:	4611      	mov	r1, r2
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff5f 	bl	80039c4 <__NVIC_SetPriority>
}
 8003b06:	bf00      	nop
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff33 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ffa4 	bl	8003a80 <SysTick_Config>
 8003b38:	4603      	mov	r3, r0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7fe fbae 	bl	80022ac <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e316      	b.n	800418a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a66      	ldr	r2, [pc, #408]	; (8003cfc <HAL_DMA_Init+0x1b8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d04a      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a65      	ldr	r2, [pc, #404]	; (8003d00 <HAL_DMA_Init+0x1bc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d045      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a63      	ldr	r2, [pc, #396]	; (8003d04 <HAL_DMA_Init+0x1c0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d040      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a62      	ldr	r2, [pc, #392]	; (8003d08 <HAL_DMA_Init+0x1c4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d03b      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a60      	ldr	r2, [pc, #384]	; (8003d0c <HAL_DMA_Init+0x1c8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d036      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5f      	ldr	r2, [pc, #380]	; (8003d10 <HAL_DMA_Init+0x1cc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d031      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5d      	ldr	r2, [pc, #372]	; (8003d14 <HAL_DMA_Init+0x1d0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02c      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5c      	ldr	r2, [pc, #368]	; (8003d18 <HAL_DMA_Init+0x1d4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d027      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5a      	ldr	r2, [pc, #360]	; (8003d1c <HAL_DMA_Init+0x1d8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a59      	ldr	r2, [pc, #356]	; (8003d20 <HAL_DMA_Init+0x1dc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a57      	ldr	r2, [pc, #348]	; (8003d24 <HAL_DMA_Init+0x1e0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a56      	ldr	r2, [pc, #344]	; (8003d28 <HAL_DMA_Init+0x1e4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_DMA_Init+0x1e8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a53      	ldr	r2, [pc, #332]	; (8003d30 <HAL_DMA_Init+0x1ec>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a51      	ldr	r2, [pc, #324]	; (8003d34 <HAL_DMA_Init+0x1f0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_Init+0xb8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a50      	ldr	r2, [pc, #320]	; (8003d38 <HAL_DMA_Init+0x1f4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Init+0xbc>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_DMA_Init+0xbe>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 813b 	beq.w	8003e7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a37      	ldr	r2, [pc, #220]	; (8003cfc <HAL_DMA_Init+0x1b8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d04a      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a36      	ldr	r2, [pc, #216]	; (8003d00 <HAL_DMA_Init+0x1bc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d045      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <HAL_DMA_Init+0x1c0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d040      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a33      	ldr	r2, [pc, #204]	; (8003d08 <HAL_DMA_Init+0x1c4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d03b      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a31      	ldr	r2, [pc, #196]	; (8003d0c <HAL_DMA_Init+0x1c8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d036      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a30      	ldr	r2, [pc, #192]	; (8003d10 <HAL_DMA_Init+0x1cc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d031      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2e      	ldr	r2, [pc, #184]	; (8003d14 <HAL_DMA_Init+0x1d0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d02c      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <HAL_DMA_Init+0x1d4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d027      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <HAL_DMA_Init+0x1d8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d022      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <HAL_DMA_Init+0x1dc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d01d      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a28      	ldr	r2, [pc, #160]	; (8003d24 <HAL_DMA_Init+0x1e0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d018      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <HAL_DMA_Init+0x1e4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <HAL_DMA_Init+0x1e8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00e      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a24      	ldr	r2, [pc, #144]	; (8003d30 <HAL_DMA_Init+0x1ec>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d009      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a22      	ldr	r2, [pc, #136]	; (8003d34 <HAL_DMA_Init+0x1f0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_DMA_Init+0x174>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a21      	ldr	r2, [pc, #132]	; (8003d38 <HAL_DMA_Init+0x1f4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d108      	bne.n	8003cca <HAL_DMA_Init+0x186>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e007      	b.n	8003cda <HAL_DMA_Init+0x196>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cda:	e02f      	b.n	8003d3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cdc:	f7fe fae6 	bl	80022ac <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d928      	bls.n	8003d3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e246      	b.n	800418a <HAL_DMA_Init+0x646>
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1c8      	bne.n	8003cdc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4b83      	ldr	r3, [pc, #524]	; (8003f64 <HAL_DMA_Init+0x420>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003da0:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <HAL_DMA_Init+0x424>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b71      	ldr	r3, [pc, #452]	; (8003f6c <HAL_DMA_Init+0x428>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dac:	d328      	bcc.n	8003e00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b28      	cmp	r3, #40	; 0x28
 8003db4:	d903      	bls.n	8003dbe <HAL_DMA_Init+0x27a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b2e      	cmp	r3, #46	; 0x2e
 8003dbc:	d917      	bls.n	8003dee <HAL_DMA_Init+0x2aa>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8003dc4:	d903      	bls.n	8003dce <HAL_DMA_Init+0x28a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b42      	cmp	r3, #66	; 0x42
 8003dcc:	d90f      	bls.n	8003dee <HAL_DMA_Init+0x2aa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b46      	cmp	r3, #70	; 0x46
 8003dd4:	d903      	bls.n	8003dde <HAL_DMA_Init+0x29a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b48      	cmp	r3, #72	; 0x48
 8003ddc:	d907      	bls.n	8003dee <HAL_DMA_Init+0x2aa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b4e      	cmp	r3, #78	; 0x4e
 8003de4:	d905      	bls.n	8003df2 <HAL_DMA_Init+0x2ae>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b52      	cmp	r3, #82	; 0x52
 8003dec:	d801      	bhi.n	8003df2 <HAL_DMA_Init+0x2ae>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_Init+0x2b0>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d117      	bne.n	8003e5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00e      	beq.n	8003e5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 fdcf 	bl	80059e0 <DMA_CheckFifoParam>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e197      	b.n	800418a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f001 fd0a 	bl	800587c <DMA_CalcBaseAndBitshift>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	f003 031f 	and.w	r3, r3, #31
 8003e74:	223f      	movs	r2, #63	; 0x3f
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	e0cd      	b.n	800401a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3b      	ldr	r2, [pc, #236]	; (8003f70 <HAL_DMA_Init+0x42c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d022      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <HAL_DMA_Init+0x430>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01d      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a38      	ldr	r2, [pc, #224]	; (8003f78 <HAL_DMA_Init+0x434>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d018      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a36      	ldr	r2, [pc, #216]	; (8003f7c <HAL_DMA_Init+0x438>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <HAL_DMA_Init+0x43c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00e      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <HAL_DMA_Init+0x440>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <HAL_DMA_Init+0x444>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_DMA_Init+0x38a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a30      	ldr	r2, [pc, #192]	; (8003f8c <HAL_DMA_Init+0x448>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_Init+0x38e>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_DMA_Init+0x390>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8097 	beq.w	8004008 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <HAL_DMA_Init+0x42c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d021      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_DMA_Init+0x430>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01c      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_DMA_Init+0x434>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d017      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_DMA_Init+0x438>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d012      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_DMA_Init+0x43c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_DMA_Init+0x440>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d008      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_DMA_Init+0x444>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_Init+0x3e4>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_DMA_Init+0x448>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_DMA_Init+0x44c>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d020      	beq.n	8003f94 <HAL_DMA_Init+0x450>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d102      	bne.n	8003f60 <HAL_DMA_Init+0x41c>
 8003f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f5e:	e01a      	b.n	8003f96 <HAL_DMA_Init+0x452>
 8003f60:	2300      	movs	r3, #0
 8003f62:	e018      	b.n	8003f96 <HAL_DMA_Init+0x452>
 8003f64:	fe10803f 	.word	0xfe10803f
 8003f68:	5c001000 	.word	0x5c001000
 8003f6c:	ffff0000 	.word	0xffff0000
 8003f70:	58025408 	.word	0x58025408
 8003f74:	5802541c 	.word	0x5802541c
 8003f78:	58025430 	.word	0x58025430
 8003f7c:	58025444 	.word	0x58025444
 8003f80:	58025458 	.word	0x58025458
 8003f84:	5802546c 	.word	0x5802546c
 8003f88:	58025480 	.word	0x58025480
 8003f8c:	58025494 	.word	0x58025494
 8003f90:	fffe000f 	.word	0xfffe000f
 8003f94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d2      	ldr	r2, [r2, #12]
 8003f9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fc4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b6e      	ldr	r3, [pc, #440]	; (8004194 <HAL_DMA_Init+0x650>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_DMA_Init+0x654>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f001 fc45 	bl	800587c <DMA_CalcBaseAndBitshift>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	e008      	b.n	800401a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2240      	movs	r2, #64	; 0x40
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0b7      	b.n	800418a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a5f      	ldr	r2, [pc, #380]	; (800419c <HAL_DMA_Init+0x658>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d072      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_DMA_Init+0x65c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d06d      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a5c      	ldr	r2, [pc, #368]	; (80041a4 <HAL_DMA_Init+0x660>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d068      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_DMA_Init+0x664>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d063      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a59      	ldr	r2, [pc, #356]	; (80041ac <HAL_DMA_Init+0x668>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d05e      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a57      	ldr	r2, [pc, #348]	; (80041b0 <HAL_DMA_Init+0x66c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d059      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a56      	ldr	r2, [pc, #344]	; (80041b4 <HAL_DMA_Init+0x670>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d054      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_DMA_Init+0x674>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d04f      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a53      	ldr	r2, [pc, #332]	; (80041bc <HAL_DMA_Init+0x678>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d04a      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a51      	ldr	r2, [pc, #324]	; (80041c0 <HAL_DMA_Init+0x67c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d045      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a50      	ldr	r2, [pc, #320]	; (80041c4 <HAL_DMA_Init+0x680>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d040      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a4e      	ldr	r2, [pc, #312]	; (80041c8 <HAL_DMA_Init+0x684>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d03b      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <HAL_DMA_Init+0x688>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d036      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4b      	ldr	r2, [pc, #300]	; (80041d0 <HAL_DMA_Init+0x68c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <HAL_DMA_Init+0x690>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d02c      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a48      	ldr	r2, [pc, #288]	; (80041d8 <HAL_DMA_Init+0x694>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d027      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a47      	ldr	r2, [pc, #284]	; (80041dc <HAL_DMA_Init+0x698>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a45      	ldr	r2, [pc, #276]	; (80041e0 <HAL_DMA_Init+0x69c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01d      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a44      	ldr	r2, [pc, #272]	; (80041e4 <HAL_DMA_Init+0x6a0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_DMA_Init+0x6a4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a41      	ldr	r2, [pc, #260]	; (80041ec <HAL_DMA_Init+0x6a8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a3f      	ldr	r2, [pc, #252]	; (80041f0 <HAL_DMA_Init+0x6ac>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3e      	ldr	r2, [pc, #248]	; (80041f4 <HAL_DMA_Init+0x6b0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_Init+0x5c6>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <HAL_DMA_Init+0x6b4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_DMA_Init+0x5ca>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_DMA_Init+0x5cc>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d032      	beq.n	800417a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f001 fcdf 	bl	8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d102      	bne.n	8004128 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800413c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d010      	beq.n	8004168 <HAL_DMA_Init+0x624>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b08      	cmp	r3, #8
 800414c:	d80c      	bhi.n	8004168 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 fd5c 	bl	8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	e008      	b.n	800417a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	a7fdabf8 	.word	0xa7fdabf8
 8004198:	cccccccd 	.word	0xcccccccd
 800419c:	40020010 	.word	0x40020010
 80041a0:	40020028 	.word	0x40020028
 80041a4:	40020040 	.word	0x40020040
 80041a8:	40020058 	.word	0x40020058
 80041ac:	40020070 	.word	0x40020070
 80041b0:	40020088 	.word	0x40020088
 80041b4:	400200a0 	.word	0x400200a0
 80041b8:	400200b8 	.word	0x400200b8
 80041bc:	40020410 	.word	0x40020410
 80041c0:	40020428 	.word	0x40020428
 80041c4:	40020440 	.word	0x40020440
 80041c8:	40020458 	.word	0x40020458
 80041cc:	40020470 	.word	0x40020470
 80041d0:	40020488 	.word	0x40020488
 80041d4:	400204a0 	.word	0x400204a0
 80041d8:	400204b8 	.word	0x400204b8
 80041dc:	58025408 	.word	0x58025408
 80041e0:	5802541c 	.word	0x5802541c
 80041e4:	58025430 	.word	0x58025430
 80041e8:	58025444 	.word	0x58025444
 80041ec:	58025458 	.word	0x58025458
 80041f0:	5802546c 	.word	0x5802546c
 80041f4:	58025480 	.word	0x58025480
 80041f8:	58025494 	.word	0x58025494

080041fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e226      	b.n	8004666 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_DMA_Start_IT+0x2a>
 8004222:	2302      	movs	r3, #2
 8004224:	e21f      	b.n	8004666 <HAL_DMA_Start_IT+0x46a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	f040 820a 	bne.w	8004650 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a68      	ldr	r2, [pc, #416]	; (80043f0 <HAL_DMA_Start_IT+0x1f4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d04a      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a66      	ldr	r2, [pc, #408]	; (80043f4 <HAL_DMA_Start_IT+0x1f8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d045      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_DMA_Start_IT+0x1fc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d040      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_DMA_Start_IT+0x200>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d03b      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a62      	ldr	r2, [pc, #392]	; (8004400 <HAL_DMA_Start_IT+0x204>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d036      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a60      	ldr	r2, [pc, #384]	; (8004404 <HAL_DMA_Start_IT+0x208>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d031      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a5f      	ldr	r2, [pc, #380]	; (8004408 <HAL_DMA_Start_IT+0x20c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d02c      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5d      	ldr	r2, [pc, #372]	; (800440c <HAL_DMA_Start_IT+0x210>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d027      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5c      	ldr	r2, [pc, #368]	; (8004410 <HAL_DMA_Start_IT+0x214>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_DMA_Start_IT+0x218>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01d      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a59      	ldr	r2, [pc, #356]	; (8004418 <HAL_DMA_Start_IT+0x21c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a57      	ldr	r2, [pc, #348]	; (800441c <HAL_DMA_Start_IT+0x220>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_DMA_Start_IT+0x224>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a54      	ldr	r2, [pc, #336]	; (8004424 <HAL_DMA_Start_IT+0x228>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a53      	ldr	r2, [pc, #332]	; (8004428 <HAL_DMA_Start_IT+0x22c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_DMA_Start_IT+0xee>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a51      	ldr	r2, [pc, #324]	; (800442c <HAL_DMA_Start_IT+0x230>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <HAL_DMA_Start_IT+0x100>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e007      	b.n	800430c <HAL_DMA_Start_IT+0x110>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f001 f906 	bl	8005524 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <HAL_DMA_Start_IT+0x1f4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a33      	ldr	r2, [pc, #204]	; (80043f4 <HAL_DMA_Start_IT+0x1f8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_DMA_Start_IT+0x1fc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a30      	ldr	r2, [pc, #192]	; (80043fc <HAL_DMA_Start_IT+0x200>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <HAL_DMA_Start_IT+0x204>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <HAL_DMA_Start_IT+0x208>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <HAL_DMA_Start_IT+0x20c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <HAL_DMA_Start_IT+0x210>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a28      	ldr	r2, [pc, #160]	; (8004410 <HAL_DMA_Start_IT+0x214>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a27      	ldr	r2, [pc, #156]	; (8004414 <HAL_DMA_Start_IT+0x218>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <HAL_DMA_Start_IT+0x21c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a24      	ldr	r2, [pc, #144]	; (800441c <HAL_DMA_Start_IT+0x220>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <HAL_DMA_Start_IT+0x224>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a21      	ldr	r2, [pc, #132]	; (8004424 <HAL_DMA_Start_IT+0x228>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <HAL_DMA_Start_IT+0x22c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_DMA_Start_IT+0x1bc>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <HAL_DMA_Start_IT+0x230>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <HAL_DMA_Start_IT+0x1c0>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <HAL_DMA_Start_IT+0x1c2>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d036      	beq.n	8004430 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f023 021e 	bic.w	r2, r3, #30
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0216 	orr.w	r2, r2, #22
 80043d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d03e      	beq.n	800445c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0208 	orr.w	r2, r2, #8
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	e035      	b.n	800445c <HAL_DMA_Start_IT+0x260>
 80043f0:	40020010 	.word	0x40020010
 80043f4:	40020028 	.word	0x40020028
 80043f8:	40020040 	.word	0x40020040
 80043fc:	40020058 	.word	0x40020058
 8004400:	40020070 	.word	0x40020070
 8004404:	40020088 	.word	0x40020088
 8004408:	400200a0 	.word	0x400200a0
 800440c:	400200b8 	.word	0x400200b8
 8004410:	40020410 	.word	0x40020410
 8004414:	40020428 	.word	0x40020428
 8004418:	40020440 	.word	0x40020440
 800441c:	40020458 	.word	0x40020458
 8004420:	40020470 	.word	0x40020470
 8004424:	40020488 	.word	0x40020488
 8004428:	400204a0 	.word	0x400204a0
 800442c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 020e 	bic.w	r2, r3, #14
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 020a 	orr.w	r2, r2, #10
 8004442:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0204 	orr.w	r2, r2, #4
 800445a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a83      	ldr	r2, [pc, #524]	; (8004670 <HAL_DMA_Start_IT+0x474>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d072      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a82      	ldr	r2, [pc, #520]	; (8004674 <HAL_DMA_Start_IT+0x478>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d06d      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_DMA_Start_IT+0x47c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d068      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7f      	ldr	r2, [pc, #508]	; (800467c <HAL_DMA_Start_IT+0x480>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d063      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7d      	ldr	r2, [pc, #500]	; (8004680 <HAL_DMA_Start_IT+0x484>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d05e      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7c      	ldr	r2, [pc, #496]	; (8004684 <HAL_DMA_Start_IT+0x488>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d059      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_DMA_Start_IT+0x48c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d054      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a79      	ldr	r2, [pc, #484]	; (800468c <HAL_DMA_Start_IT+0x490>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04f      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a77      	ldr	r2, [pc, #476]	; (8004690 <HAL_DMA_Start_IT+0x494>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d04a      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a76      	ldr	r2, [pc, #472]	; (8004694 <HAL_DMA_Start_IT+0x498>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d045      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a74      	ldr	r2, [pc, #464]	; (8004698 <HAL_DMA_Start_IT+0x49c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d040      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a73      	ldr	r2, [pc, #460]	; (800469c <HAL_DMA_Start_IT+0x4a0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d03b      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a71      	ldr	r2, [pc, #452]	; (80046a0 <HAL_DMA_Start_IT+0x4a4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d036      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a70      	ldr	r2, [pc, #448]	; (80046a4 <HAL_DMA_Start_IT+0x4a8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d031      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a6e      	ldr	r2, [pc, #440]	; (80046a8 <HAL_DMA_Start_IT+0x4ac>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d02c      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6d      	ldr	r2, [pc, #436]	; (80046ac <HAL_DMA_Start_IT+0x4b0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d027      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6b      	ldr	r2, [pc, #428]	; (80046b0 <HAL_DMA_Start_IT+0x4b4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a6a      	ldr	r2, [pc, #424]	; (80046b4 <HAL_DMA_Start_IT+0x4b8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d01d      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a68      	ldr	r2, [pc, #416]	; (80046b8 <HAL_DMA_Start_IT+0x4bc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a67      	ldr	r2, [pc, #412]	; (80046bc <HAL_DMA_Start_IT+0x4c0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a65      	ldr	r2, [pc, #404]	; (80046c0 <HAL_DMA_Start_IT+0x4c4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a64      	ldr	r2, [pc, #400]	; (80046c4 <HAL_DMA_Start_IT+0x4c8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a62      	ldr	r2, [pc, #392]	; (80046c8 <HAL_DMA_Start_IT+0x4cc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_DMA_Start_IT+0x350>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a61      	ldr	r2, [pc, #388]	; (80046cc <HAL_DMA_Start_IT+0x4d0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d101      	bne.n	8004550 <HAL_DMA_Start_IT+0x354>
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_DMA_Start_IT+0x356>
 8004550:	2300      	movs	r3, #0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004572:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a37      	ldr	r2, [pc, #220]	; (8004670 <HAL_DMA_Start_IT+0x474>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d04a      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a36      	ldr	r2, [pc, #216]	; (8004674 <HAL_DMA_Start_IT+0x478>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d045      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a34      	ldr	r2, [pc, #208]	; (8004678 <HAL_DMA_Start_IT+0x47c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d040      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a33      	ldr	r2, [pc, #204]	; (800467c <HAL_DMA_Start_IT+0x480>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d03b      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a31      	ldr	r2, [pc, #196]	; (8004680 <HAL_DMA_Start_IT+0x484>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d036      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_DMA_Start_IT+0x488>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d031      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2e      	ldr	r2, [pc, #184]	; (8004688 <HAL_DMA_Start_IT+0x48c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02c      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2d      	ldr	r2, [pc, #180]	; (800468c <HAL_DMA_Start_IT+0x490>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d027      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <HAL_DMA_Start_IT+0x494>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d022      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <HAL_DMA_Start_IT+0x498>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01d      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a28      	ldr	r2, [pc, #160]	; (8004698 <HAL_DMA_Start_IT+0x49c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a27      	ldr	r2, [pc, #156]	; (800469c <HAL_DMA_Start_IT+0x4a0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <HAL_DMA_Start_IT+0x4a4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <HAL_DMA_Start_IT+0x4a8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <HAL_DMA_Start_IT+0x4ac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_DMA_Start_IT+0x430>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <HAL_DMA_Start_IT+0x4b0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <HAL_DMA_Start_IT+0x442>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e012      	b.n	8004664 <HAL_DMA_Start_IT+0x468>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e009      	b.n	8004664 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004656:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40020010 	.word	0x40020010
 8004674:	40020028 	.word	0x40020028
 8004678:	40020040 	.word	0x40020040
 800467c:	40020058 	.word	0x40020058
 8004680:	40020070 	.word	0x40020070
 8004684:	40020088 	.word	0x40020088
 8004688:	400200a0 	.word	0x400200a0
 800468c:	400200b8 	.word	0x400200b8
 8004690:	40020410 	.word	0x40020410
 8004694:	40020428 	.word	0x40020428
 8004698:	40020440 	.word	0x40020440
 800469c:	40020458 	.word	0x40020458
 80046a0:	40020470 	.word	0x40020470
 80046a4:	40020488 	.word	0x40020488
 80046a8:	400204a0 	.word	0x400204a0
 80046ac:	400204b8 	.word	0x400204b8
 80046b0:	58025408 	.word	0x58025408
 80046b4:	5802541c 	.word	0x5802541c
 80046b8:	58025430 	.word	0x58025430
 80046bc:	58025444 	.word	0x58025444
 80046c0:	58025458 	.word	0x58025458
 80046c4:	5802546c 	.word	0x5802546c
 80046c8:	58025480 	.word	0x58025480
 80046cc:	58025494 	.word	0x58025494

080046d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046dc:	4b67      	ldr	r3, [pc, #412]	; (800487c <HAL_DMA_IRQHandler+0x1ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a67      	ldr	r2, [pc, #412]	; (8004880 <HAL_DMA_IRQHandler+0x1b0>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5f      	ldr	r2, [pc, #380]	; (8004884 <HAL_DMA_IRQHandler+0x1b4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d04a      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5d      	ldr	r2, [pc, #372]	; (8004888 <HAL_DMA_IRQHandler+0x1b8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d045      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5c      	ldr	r2, [pc, #368]	; (800488c <HAL_DMA_IRQHandler+0x1bc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d040      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5a      	ldr	r2, [pc, #360]	; (8004890 <HAL_DMA_IRQHandler+0x1c0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d03b      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a59      	ldr	r2, [pc, #356]	; (8004894 <HAL_DMA_IRQHandler+0x1c4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d036      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a57      	ldr	r2, [pc, #348]	; (8004898 <HAL_DMA_IRQHandler+0x1c8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d031      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a56      	ldr	r2, [pc, #344]	; (800489c <HAL_DMA_IRQHandler+0x1cc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d02c      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a54      	ldr	r2, [pc, #336]	; (80048a0 <HAL_DMA_IRQHandler+0x1d0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d027      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a53      	ldr	r2, [pc, #332]	; (80048a4 <HAL_DMA_IRQHandler+0x1d4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d022      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_DMA_IRQHandler+0x1d8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01d      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_DMA_IRQHandler+0x1dc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d018      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a4e      	ldr	r2, [pc, #312]	; (80048b0 <HAL_DMA_IRQHandler+0x1e0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a4d      	ldr	r2, [pc, #308]	; (80048b4 <HAL_DMA_IRQHandler+0x1e4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00e      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a4b      	ldr	r2, [pc, #300]	; (80048b8 <HAL_DMA_IRQHandler+0x1e8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d009      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a4a      	ldr	r2, [pc, #296]	; (80048bc <HAL_DMA_IRQHandler+0x1ec>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d004      	beq.n	80047a2 <HAL_DMA_IRQHandler+0xd2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a48      	ldr	r2, [pc, #288]	; (80048c0 <HAL_DMA_IRQHandler+0x1f0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_IRQHandler+0xd6>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 842b 	beq.w	8005004 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2208      	movs	r2, #8
 80047b8:	409a      	lsls	r2, r3
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 80a2 	beq.w	8004908 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a2e      	ldr	r2, [pc, #184]	; (8004884 <HAL_DMA_IRQHandler+0x1b4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a2d      	ldr	r2, [pc, #180]	; (8004888 <HAL_DMA_IRQHandler+0x1b8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d045      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a2b      	ldr	r2, [pc, #172]	; (800488c <HAL_DMA_IRQHandler+0x1bc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d040      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_DMA_IRQHandler+0x1c0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d03b      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a28      	ldr	r2, [pc, #160]	; (8004894 <HAL_DMA_IRQHandler+0x1c4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d036      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a27      	ldr	r2, [pc, #156]	; (8004898 <HAL_DMA_IRQHandler+0x1c8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_DMA_IRQHandler+0x1cc>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02c      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <HAL_DMA_IRQHandler+0x1d0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d027      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a22      	ldr	r2, [pc, #136]	; (80048a4 <HAL_DMA_IRQHandler+0x1d4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a21      	ldr	r2, [pc, #132]	; (80048a8 <HAL_DMA_IRQHandler+0x1d8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1f      	ldr	r2, [pc, #124]	; (80048ac <HAL_DMA_IRQHandler+0x1dc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_DMA_IRQHandler+0x1e0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_DMA_IRQHandler+0x1e4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_DMA_IRQHandler+0x1e8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_DMA_IRQHandler+0x1ec>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_IRQHandler+0x194>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_DMA_IRQHandler+0x1f0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d12f      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x1f4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e02e      	b.n	80048d8 <HAL_DMA_IRQHandler+0x208>
 800487a:	bf00      	nop
 800487c:	24000004 	.word	0x24000004
 8004880:	1b4e81b5 	.word	0x1b4e81b5
 8004884:	40020010 	.word	0x40020010
 8004888:	40020028 	.word	0x40020028
 800488c:	40020040 	.word	0x40020040
 8004890:	40020058 	.word	0x40020058
 8004894:	40020070 	.word	0x40020070
 8004898:	40020088 	.word	0x40020088
 800489c:	400200a0 	.word	0x400200a0
 80048a0:	400200b8 	.word	0x400200b8
 80048a4:	40020410 	.word	0x40020410
 80048a8:	40020428 	.word	0x40020428
 80048ac:	40020440 	.word	0x40020440
 80048b0:	40020458 	.word	0x40020458
 80048b4:	40020470 	.word	0x40020470
 80048b8:	40020488 	.word	0x40020488
 80048bc:	400204a0 	.word	0x400204a0
 80048c0:	400204b8 	.word	0x400204b8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf14      	ite	ne
 80048d2:	2301      	movne	r3, #1
 80048d4:	2300      	moveq	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0204 	bic.w	r2, r2, #4
 80048ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2208      	movs	r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d06e      	beq.n	80049fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a69      	ldr	r2, [pc, #420]	; (8004ac8 <HAL_DMA_IRQHandler+0x3f8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d04a      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a67      	ldr	r2, [pc, #412]	; (8004acc <HAL_DMA_IRQHandler+0x3fc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d045      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a66      	ldr	r2, [pc, #408]	; (8004ad0 <HAL_DMA_IRQHandler+0x400>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d040      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a64      	ldr	r2, [pc, #400]	; (8004ad4 <HAL_DMA_IRQHandler+0x404>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d03b      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a63      	ldr	r2, [pc, #396]	; (8004ad8 <HAL_DMA_IRQHandler+0x408>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d036      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a61      	ldr	r2, [pc, #388]	; (8004adc <HAL_DMA_IRQHandler+0x40c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d031      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <HAL_DMA_IRQHandler+0x410>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d02c      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5e      	ldr	r2, [pc, #376]	; (8004ae4 <HAL_DMA_IRQHandler+0x414>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d027      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5d      	ldr	r2, [pc, #372]	; (8004ae8 <HAL_DMA_IRQHandler+0x418>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d022      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5b      	ldr	r2, [pc, #364]	; (8004aec <HAL_DMA_IRQHandler+0x41c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01d      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5a      	ldr	r2, [pc, #360]	; (8004af0 <HAL_DMA_IRQHandler+0x420>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d018      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a58      	ldr	r2, [pc, #352]	; (8004af4 <HAL_DMA_IRQHandler+0x424>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a57      	ldr	r2, [pc, #348]	; (8004af8 <HAL_DMA_IRQHandler+0x428>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00e      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a55      	ldr	r2, [pc, #340]	; (8004afc <HAL_DMA_IRQHandler+0x42c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d009      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_DMA_IRQHandler+0x430>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_DMA_IRQHandler+0x2ee>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <HAL_DMA_IRQHandler+0x434>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10a      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x304>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e003      	b.n	80049dc <HAL_DMA_IRQHandler+0x30c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	2201      	movs	r2, #1
 80049ea:	409a      	lsls	r2, r3
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	f043 0202 	orr.w	r2, r3, #2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	2204      	movs	r2, #4
 8004a06:	409a      	lsls	r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 808f 	beq.w	8004b30 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <HAL_DMA_IRQHandler+0x3f8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d04a      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a2a      	ldr	r2, [pc, #168]	; (8004acc <HAL_DMA_IRQHandler+0x3fc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d045      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a29      	ldr	r2, [pc, #164]	; (8004ad0 <HAL_DMA_IRQHandler+0x400>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d040      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_DMA_IRQHandler+0x404>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d03b      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <HAL_DMA_IRQHandler+0x408>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d036      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a24      	ldr	r2, [pc, #144]	; (8004adc <HAL_DMA_IRQHandler+0x40c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <HAL_DMA_IRQHandler+0x410>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d02c      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <HAL_DMA_IRQHandler+0x414>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d027      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a20      	ldr	r2, [pc, #128]	; (8004ae8 <HAL_DMA_IRQHandler+0x418>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d022      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_DMA_IRQHandler+0x41c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01d      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_DMA_IRQHandler+0x420>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_DMA_IRQHandler+0x424>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <HAL_DMA_IRQHandler+0x428>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <HAL_DMA_IRQHandler+0x42c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a17      	ldr	r2, [pc, #92]	; (8004b00 <HAL_DMA_IRQHandler+0x430>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x3e2>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_DMA_IRQHandler+0x434>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12a      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x438>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e023      	b.n	8004b10 <HAL_DMA_IRQHandler+0x440>
 8004ac8:	40020010 	.word	0x40020010
 8004acc:	40020028 	.word	0x40020028
 8004ad0:	40020040 	.word	0x40020040
 8004ad4:	40020058 	.word	0x40020058
 8004ad8:	40020070 	.word	0x40020070
 8004adc:	40020088 	.word	0x40020088
 8004ae0:	400200a0 	.word	0x400200a0
 8004ae4:	400200b8 	.word	0x400200b8
 8004ae8:	40020410 	.word	0x40020410
 8004aec:	40020428 	.word	0x40020428
 8004af0:	40020440 	.word	0x40020440
 8004af4:	40020458 	.word	0x40020458
 8004af8:	40020470 	.word	0x40020470
 8004afc:	40020488 	.word	0x40020488
 8004b00:	400204a0 	.word	0x400204a0
 8004b04:	400204b8 	.word	0x400204b8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f043 0204 	orr.w	r2, r3, #4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	2210      	movs	r2, #16
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a6 	beq.w	8004c92 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a85      	ldr	r2, [pc, #532]	; (8004d60 <HAL_DMA_IRQHandler+0x690>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d04a      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a83      	ldr	r2, [pc, #524]	; (8004d64 <HAL_DMA_IRQHandler+0x694>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d045      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a82      	ldr	r2, [pc, #520]	; (8004d68 <HAL_DMA_IRQHandler+0x698>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d040      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a80      	ldr	r2, [pc, #512]	; (8004d6c <HAL_DMA_IRQHandler+0x69c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03b      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7f      	ldr	r2, [pc, #508]	; (8004d70 <HAL_DMA_IRQHandler+0x6a0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d036      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7d      	ldr	r2, [pc, #500]	; (8004d74 <HAL_DMA_IRQHandler+0x6a4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d031      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7c      	ldr	r2, [pc, #496]	; (8004d78 <HAL_DMA_IRQHandler+0x6a8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d02c      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7a      	ldr	r2, [pc, #488]	; (8004d7c <HAL_DMA_IRQHandler+0x6ac>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d027      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a79      	ldr	r2, [pc, #484]	; (8004d80 <HAL_DMA_IRQHandler+0x6b0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a77      	ldr	r2, [pc, #476]	; (8004d84 <HAL_DMA_IRQHandler+0x6b4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_DMA_IRQHandler+0x6b8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a74      	ldr	r2, [pc, #464]	; (8004d8c <HAL_DMA_IRQHandler+0x6bc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a73      	ldr	r2, [pc, #460]	; (8004d90 <HAL_DMA_IRQHandler+0x6c0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <HAL_DMA_IRQHandler+0x6c4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a70      	ldr	r2, [pc, #448]	; (8004d98 <HAL_DMA_IRQHandler+0x6c8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x516>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_DMA_IRQHandler+0x6cc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d10a      	bne.n	8004bfc <HAL_DMA_IRQHandler+0x52c>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf14      	ite	ne
 8004bf4:	2301      	movne	r3, #1
 8004bf6:	2300      	moveq	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	e009      	b.n	8004c10 <HAL_DMA_IRQHandler+0x540>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bf14      	ite	ne
 8004c0a:	2301      	movne	r3, #1
 8004c0c:	2300      	moveq	r3, #0
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03e      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d024      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	4798      	blx	r3
 8004c50:	e01f      	b.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	4798      	blx	r3
 8004c62:	e016      	b.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0208 	bic.w	r2, r2, #8
 8004c80:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8110 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2c      	ldr	r2, [pc, #176]	; (8004d60 <HAL_DMA_IRQHandler+0x690>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2b      	ldr	r2, [pc, #172]	; (8004d64 <HAL_DMA_IRQHandler+0x694>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a29      	ldr	r2, [pc, #164]	; (8004d68 <HAL_DMA_IRQHandler+0x698>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <HAL_DMA_IRQHandler+0x69c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <HAL_DMA_IRQHandler+0x6a0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HAL_DMA_IRQHandler+0x6a4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <HAL_DMA_IRQHandler+0x6a8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a22      	ldr	r2, [pc, #136]	; (8004d7c <HAL_DMA_IRQHandler+0x6ac>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <HAL_DMA_IRQHandler+0x6b0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1f      	ldr	r2, [pc, #124]	; (8004d84 <HAL_DMA_IRQHandler+0x6b4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <HAL_DMA_IRQHandler+0x6b8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	; (8004d8c <HAL_DMA_IRQHandler+0x6bc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <HAL_DMA_IRQHandler+0x6c0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <HAL_DMA_IRQHandler+0x6c4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <HAL_DMA_IRQHandler+0x6c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x678>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_DMA_IRQHandler+0x6cc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d12b      	bne.n	8004da0 <HAL_DMA_IRQHandler+0x6d0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e02a      	b.n	8004db4 <HAL_DMA_IRQHandler+0x6e4>
 8004d5e:	bf00      	nop
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8087 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d139      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0216 	bic.w	r2, r2, #22
 8004de4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_DMA_IRQHandler+0x736>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	223f      	movs	r2, #63	; 0x3f
 8004e20:	409a      	lsls	r2, r3
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 834a 	beq.w	80054d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
          }
          return;
 8004e48:	e344      	b.n	80054d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d02c      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	e027      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d023      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	e01e      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10f      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0210 	bic.w	r2, r2, #16
 8004ea6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8306 	beq.w	80054de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8088 	beq.w	8004ff0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a7a      	ldr	r2, [pc, #488]	; (80050d8 <HAL_DMA_IRQHandler+0xa08>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d04a      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a79      	ldr	r2, [pc, #484]	; (80050dc <HAL_DMA_IRQHandler+0xa0c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d045      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a77      	ldr	r2, [pc, #476]	; (80050e0 <HAL_DMA_IRQHandler+0xa10>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d040      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a76      	ldr	r2, [pc, #472]	; (80050e4 <HAL_DMA_IRQHandler+0xa14>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d03b      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a74      	ldr	r2, [pc, #464]	; (80050e8 <HAL_DMA_IRQHandler+0xa18>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d036      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a73      	ldr	r2, [pc, #460]	; (80050ec <HAL_DMA_IRQHandler+0xa1c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d031      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a71      	ldr	r2, [pc, #452]	; (80050f0 <HAL_DMA_IRQHandler+0xa20>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02c      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a70      	ldr	r2, [pc, #448]	; (80050f4 <HAL_DMA_IRQHandler+0xa24>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d027      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a6e      	ldr	r2, [pc, #440]	; (80050f8 <HAL_DMA_IRQHandler+0xa28>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6d      	ldr	r2, [pc, #436]	; (80050fc <HAL_DMA_IRQHandler+0xa2c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01d      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a6b      	ldr	r2, [pc, #428]	; (8005100 <HAL_DMA_IRQHandler+0xa30>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6a      	ldr	r2, [pc, #424]	; (8005104 <HAL_DMA_IRQHandler+0xa34>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a68      	ldr	r2, [pc, #416]	; (8005108 <HAL_DMA_IRQHandler+0xa38>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a67      	ldr	r2, [pc, #412]	; (800510c <HAL_DMA_IRQHandler+0xa3c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a65      	ldr	r2, [pc, #404]	; (8005110 <HAL_DMA_IRQHandler+0xa40>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_DMA_IRQHandler+0x8b8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a64      	ldr	r2, [pc, #400]	; (8005114 <HAL_DMA_IRQHandler+0xa44>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x8ca>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e007      	b.n	8004faa <HAL_DMA_IRQHandler+0x8da>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d307      	bcc.n	8004fc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1f2      	bne.n	8004faa <HAL_DMA_IRQHandler+0x8da>
 8004fc4:	e000      	b.n	8004fc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004fc6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004fde:	e003      	b.n	8004fe8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8272 	beq.w	80054de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	e26c      	b.n	80054de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a43      	ldr	r2, [pc, #268]	; (8005118 <HAL_DMA_IRQHandler+0xa48>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_DMA_IRQHandler+0xa4c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01d      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a40      	ldr	r2, [pc, #256]	; (8005120 <HAL_DMA_IRQHandler+0xa50>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <HAL_DMA_IRQHandler+0xa54>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3d      	ldr	r2, [pc, #244]	; (8005128 <HAL_DMA_IRQHandler+0xa58>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3c      	ldr	r2, [pc, #240]	; (800512c <HAL_DMA_IRQHandler+0xa5c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a3a      	ldr	r2, [pc, #232]	; (8005130 <HAL_DMA_IRQHandler+0xa60>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_DMA_IRQHandler+0x984>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a39      	ldr	r2, [pc, #228]	; (8005134 <HAL_DMA_IRQHandler+0xa64>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <HAL_DMA_IRQHandler+0x988>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_DMA_IRQHandler+0x98a>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 823f 	beq.w	80054de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2204      	movs	r2, #4
 8005072:	409a      	lsls	r2, r3
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4013      	ands	r3, r2
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80cd 	beq.w	8005218 <HAL_DMA_IRQHandler+0xb48>
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80c7 	beq.w	8005218 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2204      	movs	r2, #4
 8005094:	409a      	lsls	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d049      	beq.n	8005138 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8210 	beq.w	80054d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050c0:	e20a      	b.n	80054d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 8206 	beq.w	80054d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d4:	e200      	b.n	80054d8 <HAL_DMA_IRQHandler+0xe08>
 80050d6:	bf00      	nop
 80050d8:	40020010 	.word	0x40020010
 80050dc:	40020028 	.word	0x40020028
 80050e0:	40020040 	.word	0x40020040
 80050e4:	40020058 	.word	0x40020058
 80050e8:	40020070 	.word	0x40020070
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	400200b8 	.word	0x400200b8
 80050f8:	40020410 	.word	0x40020410
 80050fc:	40020428 	.word	0x40020428
 8005100:	40020440 	.word	0x40020440
 8005104:	40020458 	.word	0x40020458
 8005108:	40020470 	.word	0x40020470
 800510c:	40020488 	.word	0x40020488
 8005110:	400204a0 	.word	0x400204a0
 8005114:	400204b8 	.word	0x400204b8
 8005118:	58025408 	.word	0x58025408
 800511c:	5802541c 	.word	0x5802541c
 8005120:	58025430 	.word	0x58025430
 8005124:	58025444 	.word	0x58025444
 8005128:	58025458 	.word	0x58025458
 800512c:	5802546c 	.word	0x5802546c
 8005130:	58025480 	.word	0x58025480
 8005134:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d160      	bne.n	8005204 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7f      	ldr	r2, [pc, #508]	; (8005344 <HAL_DMA_IRQHandler+0xc74>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a7d      	ldr	r2, [pc, #500]	; (8005348 <HAL_DMA_IRQHandler+0xc78>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a7c      	ldr	r2, [pc, #496]	; (800534c <HAL_DMA_IRQHandler+0xc7c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a7a      	ldr	r2, [pc, #488]	; (8005350 <HAL_DMA_IRQHandler+0xc80>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a79      	ldr	r2, [pc, #484]	; (8005354 <HAL_DMA_IRQHandler+0xc84>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a77      	ldr	r2, [pc, #476]	; (8005358 <HAL_DMA_IRQHandler+0xc88>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a76      	ldr	r2, [pc, #472]	; (800535c <HAL_DMA_IRQHandler+0xc8c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a74      	ldr	r2, [pc, #464]	; (8005360 <HAL_DMA_IRQHandler+0xc90>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a73      	ldr	r2, [pc, #460]	; (8005364 <HAL_DMA_IRQHandler+0xc94>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a71      	ldr	r2, [pc, #452]	; (8005368 <HAL_DMA_IRQHandler+0xc98>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a70      	ldr	r2, [pc, #448]	; (800536c <HAL_DMA_IRQHandler+0xc9c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6e      	ldr	r2, [pc, #440]	; (8005370 <HAL_DMA_IRQHandler+0xca0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_DMA_IRQHandler+0xca4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a6b      	ldr	r2, [pc, #428]	; (8005378 <HAL_DMA_IRQHandler+0xca8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_DMA_IRQHandler+0xcac>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_IRQHandler+0xb12>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a68      	ldr	r2, [pc, #416]	; (8005380 <HAL_DMA_IRQHandler+0xcb0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <HAL_DMA_IRQHandler+0xb24>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0208 	bic.w	r2, r2, #8
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e007      	b.n	8005204 <HAL_DMA_IRQHandler+0xb34>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0204 	bic.w	r2, r2, #4
 8005202:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8165 	beq.w	80054d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005216:	e15f      	b.n	80054d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2202      	movs	r2, #2
 8005222:	409a      	lsls	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4013      	ands	r3, r2
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80c5 	beq.w	80053b8 <HAL_DMA_IRQHandler+0xce8>
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80bf 	beq.w	80053b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2202      	movs	r2, #2
 8005244:	409a      	lsls	r2, r3
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d018      	beq.n	8005286 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 813a 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005270:	e134      	b.n	80054dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 8130 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005284:	e12a      	b.n	80054dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8089 	bne.w	80053a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <HAL_DMA_IRQHandler+0xc74>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d04a      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a29      	ldr	r2, [pc, #164]	; (8005348 <HAL_DMA_IRQHandler+0xc78>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d045      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a28      	ldr	r2, [pc, #160]	; (800534c <HAL_DMA_IRQHandler+0xc7c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d040      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a26      	ldr	r2, [pc, #152]	; (8005350 <HAL_DMA_IRQHandler+0xc80>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d03b      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a25      	ldr	r2, [pc, #148]	; (8005354 <HAL_DMA_IRQHandler+0xc84>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d036      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a23      	ldr	r2, [pc, #140]	; (8005358 <HAL_DMA_IRQHandler+0xc88>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d031      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a22      	ldr	r2, [pc, #136]	; (800535c <HAL_DMA_IRQHandler+0xc8c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d02c      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_DMA_IRQHandler+0xc90>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d027      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <HAL_DMA_IRQHandler+0xc94>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d022      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_DMA_IRQHandler+0xc98>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01d      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_DMA_IRQHandler+0xc9c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d018      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_DMA_IRQHandler+0xca0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_DMA_IRQHandler+0xca4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00e      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a17      	ldr	r2, [pc, #92]	; (8005378 <HAL_DMA_IRQHandler+0xca8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d009      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <HAL_DMA_IRQHandler+0xcac>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d004      	beq.n	8005332 <HAL_DMA_IRQHandler+0xc62>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a14      	ldr	r2, [pc, #80]	; (8005380 <HAL_DMA_IRQHandler+0xcb0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d128      	bne.n	8005384 <HAL_DMA_IRQHandler+0xcb4>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0214 	bic.w	r2, r2, #20
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e027      	b.n	8005394 <HAL_DMA_IRQHandler+0xcc4>
 8005344:	40020010 	.word	0x40020010
 8005348:	40020028 	.word	0x40020028
 800534c:	40020040 	.word	0x40020040
 8005350:	40020058 	.word	0x40020058
 8005354:	40020070 	.word	0x40020070
 8005358:	40020088 	.word	0x40020088
 800535c:	400200a0 	.word	0x400200a0
 8005360:	400200b8 	.word	0x400200b8
 8005364:	40020410 	.word	0x40020410
 8005368:	40020428 	.word	0x40020428
 800536c:	40020440 	.word	0x40020440
 8005370:	40020458 	.word	0x40020458
 8005374:	40020470 	.word	0x40020470
 8005378:	40020488 	.word	0x40020488
 800537c:	400204a0 	.word	0x400204a0
 8005380:	400204b8 	.word	0x400204b8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 020a 	bic.w	r2, r2, #10
 8005392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8097 	beq.w	80054dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b6:	e091      	b.n	80054dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2208      	movs	r2, #8
 80053c2:	409a      	lsls	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8088 	beq.w	80054de <HAL_DMA_IRQHandler+0xe0e>
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8082 	beq.w	80054de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a41      	ldr	r2, [pc, #260]	; (80054e4 <HAL_DMA_IRQHandler+0xe14>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04a      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a3f      	ldr	r2, [pc, #252]	; (80054e8 <HAL_DMA_IRQHandler+0xe18>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d045      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a3e      	ldr	r2, [pc, #248]	; (80054ec <HAL_DMA_IRQHandler+0xe1c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d040      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <HAL_DMA_IRQHandler+0xe20>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3b      	ldr	r2, [pc, #236]	; (80054f4 <HAL_DMA_IRQHandler+0xe24>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d036      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a39      	ldr	r2, [pc, #228]	; (80054f8 <HAL_DMA_IRQHandler+0xe28>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d031      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a38      	ldr	r2, [pc, #224]	; (80054fc <HAL_DMA_IRQHandler+0xe2c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02c      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a36      	ldr	r2, [pc, #216]	; (8005500 <HAL_DMA_IRQHandler+0xe30>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d027      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a35      	ldr	r2, [pc, #212]	; (8005504 <HAL_DMA_IRQHandler+0xe34>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a33      	ldr	r2, [pc, #204]	; (8005508 <HAL_DMA_IRQHandler+0xe38>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a32      	ldr	r2, [pc, #200]	; (800550c <HAL_DMA_IRQHandler+0xe3c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a30      	ldr	r2, [pc, #192]	; (8005510 <HAL_DMA_IRQHandler+0xe40>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2f      	ldr	r2, [pc, #188]	; (8005514 <HAL_DMA_IRQHandler+0xe44>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2d      	ldr	r2, [pc, #180]	; (8005518 <HAL_DMA_IRQHandler+0xe48>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2c      	ldr	r2, [pc, #176]	; (800551c <HAL_DMA_IRQHandler+0xe4c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_DMA_IRQHandler+0xdaa>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <HAL_DMA_IRQHandler+0xe50>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <HAL_DMA_IRQHandler+0xdbc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 021c 	bic.w	r2, r2, #28
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e007      	b.n	800549c <HAL_DMA_IRQHandler+0xdcc>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 020e 	bic.w	r2, r2, #14
 800549a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	2201      	movs	r2, #1
 80054a6:	409a      	lsls	r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
 80054d2:	e004      	b.n	80054de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80054d4:	bf00      	nop
 80054d6:	e002      	b.n	80054de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d8:	bf00      	nop
 80054da:	e000      	b.n	80054de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8

08005524 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a7f      	ldr	r2, [pc, #508]	; (8005740 <DMA_SetConfig+0x21c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d072      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a7d      	ldr	r2, [pc, #500]	; (8005744 <DMA_SetConfig+0x220>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d06d      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a7c      	ldr	r2, [pc, #496]	; (8005748 <DMA_SetConfig+0x224>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d068      	beq.n	800562e <DMA_SetConfig+0x10a>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7a      	ldr	r2, [pc, #488]	; (800574c <DMA_SetConfig+0x228>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d063      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	; (8005750 <DMA_SetConfig+0x22c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d05e      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a77      	ldr	r2, [pc, #476]	; (8005754 <DMA_SetConfig+0x230>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d059      	beq.n	800562e <DMA_SetConfig+0x10a>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a76      	ldr	r2, [pc, #472]	; (8005758 <DMA_SetConfig+0x234>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d054      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a74      	ldr	r2, [pc, #464]	; (800575c <DMA_SetConfig+0x238>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d04f      	beq.n	800562e <DMA_SetConfig+0x10a>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a73      	ldr	r2, [pc, #460]	; (8005760 <DMA_SetConfig+0x23c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d04a      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a71      	ldr	r2, [pc, #452]	; (8005764 <DMA_SetConfig+0x240>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d045      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a70      	ldr	r2, [pc, #448]	; (8005768 <DMA_SetConfig+0x244>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d040      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6e      	ldr	r2, [pc, #440]	; (800576c <DMA_SetConfig+0x248>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d03b      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6d      	ldr	r2, [pc, #436]	; (8005770 <DMA_SetConfig+0x24c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d036      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a6b      	ldr	r2, [pc, #428]	; (8005774 <DMA_SetConfig+0x250>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d031      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a6a      	ldr	r2, [pc, #424]	; (8005778 <DMA_SetConfig+0x254>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d02c      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a68      	ldr	r2, [pc, #416]	; (800577c <DMA_SetConfig+0x258>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d027      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a67      	ldr	r2, [pc, #412]	; (8005780 <DMA_SetConfig+0x25c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d022      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a65      	ldr	r2, [pc, #404]	; (8005784 <DMA_SetConfig+0x260>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01d      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a64      	ldr	r2, [pc, #400]	; (8005788 <DMA_SetConfig+0x264>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d018      	beq.n	800562e <DMA_SetConfig+0x10a>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a62      	ldr	r2, [pc, #392]	; (800578c <DMA_SetConfig+0x268>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a61      	ldr	r2, [pc, #388]	; (8005790 <DMA_SetConfig+0x26c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5f      	ldr	r2, [pc, #380]	; (8005794 <DMA_SetConfig+0x270>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <DMA_SetConfig+0x10a>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <DMA_SetConfig+0x274>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <DMA_SetConfig+0x10a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5c      	ldr	r2, [pc, #368]	; (800579c <DMA_SetConfig+0x278>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <DMA_SetConfig+0x10e>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <DMA_SetConfig+0x110>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005640:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d004      	beq.n	8005654 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005652:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a39      	ldr	r2, [pc, #228]	; (8005740 <DMA_SetConfig+0x21c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d04a      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a38      	ldr	r2, [pc, #224]	; (8005744 <DMA_SetConfig+0x220>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d045      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a36      	ldr	r2, [pc, #216]	; (8005748 <DMA_SetConfig+0x224>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d040      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a35      	ldr	r2, [pc, #212]	; (800574c <DMA_SetConfig+0x228>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d03b      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a33      	ldr	r2, [pc, #204]	; (8005750 <DMA_SetConfig+0x22c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d036      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a32      	ldr	r2, [pc, #200]	; (8005754 <DMA_SetConfig+0x230>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d031      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a30      	ldr	r2, [pc, #192]	; (8005758 <DMA_SetConfig+0x234>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d02c      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a2f      	ldr	r2, [pc, #188]	; (800575c <DMA_SetConfig+0x238>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d027      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <DMA_SetConfig+0x23c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d022      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2c      	ldr	r2, [pc, #176]	; (8005764 <DMA_SetConfig+0x240>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d01d      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <DMA_SetConfig+0x244>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a29      	ldr	r2, [pc, #164]	; (800576c <DMA_SetConfig+0x248>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a27      	ldr	r2, [pc, #156]	; (8005770 <DMA_SetConfig+0x24c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00e      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a26      	ldr	r2, [pc, #152]	; (8005774 <DMA_SetConfig+0x250>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d009      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a24      	ldr	r2, [pc, #144]	; (8005778 <DMA_SetConfig+0x254>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <DMA_SetConfig+0x1d0>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a23      	ldr	r2, [pc, #140]	; (800577c <DMA_SetConfig+0x258>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d101      	bne.n	80056f8 <DMA_SetConfig+0x1d4>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <DMA_SetConfig+0x1d6>
 80056f8:	2300      	movs	r3, #0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d059      	beq.n	80057b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	223f      	movs	r2, #63	; 0x3f
 8005708:	409a      	lsls	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800571c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d138      	bne.n	80057a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800573e:	e086      	b.n	800584e <DMA_SetConfig+0x32a>
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
}
 80057b0:	e04d      	b.n	800584e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a29      	ldr	r2, [pc, #164]	; (800585c <DMA_SetConfig+0x338>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a27      	ldr	r2, [pc, #156]	; (8005860 <DMA_SetConfig+0x33c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01d      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a26      	ldr	r2, [pc, #152]	; (8005864 <DMA_SetConfig+0x340>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <DMA_SetConfig+0x344>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a23      	ldr	r2, [pc, #140]	; (800586c <DMA_SetConfig+0x348>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a21      	ldr	r2, [pc, #132]	; (8005870 <DMA_SetConfig+0x34c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a20      	ldr	r2, [pc, #128]	; (8005874 <DMA_SetConfig+0x350>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <DMA_SetConfig+0x2de>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1e      	ldr	r2, [pc, #120]	; (8005878 <DMA_SetConfig+0x354>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <DMA_SetConfig+0x2e2>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <DMA_SetConfig+0x2e4>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d020      	beq.n	800584e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d108      	bne.n	800583e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	60da      	str	r2, [r3, #12]
}
 800583c:	e007      	b.n	800584e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	58025408 	.word	0x58025408
 8005860:	5802541c 	.word	0x5802541c
 8005864:	58025430 	.word	0x58025430
 8005868:	58025444 	.word	0x58025444
 800586c:	58025458 	.word	0x58025458
 8005870:	5802546c 	.word	0x5802546c
 8005874:	58025480 	.word	0x58025480
 8005878:	58025494 	.word	0x58025494

0800587c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a42      	ldr	r2, [pc, #264]	; (8005994 <DMA_CalcBaseAndBitshift+0x118>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d04a      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a41      	ldr	r2, [pc, #260]	; (8005998 <DMA_CalcBaseAndBitshift+0x11c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d045      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a3f      	ldr	r2, [pc, #252]	; (800599c <DMA_CalcBaseAndBitshift+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d040      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a3e      	ldr	r2, [pc, #248]	; (80059a0 <DMA_CalcBaseAndBitshift+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d03b      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a3c      	ldr	r2, [pc, #240]	; (80059a4 <DMA_CalcBaseAndBitshift+0x128>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d036      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a3b      	ldr	r2, [pc, #236]	; (80059a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d031      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a39      	ldr	r2, [pc, #228]	; (80059ac <DMA_CalcBaseAndBitshift+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d02c      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a38      	ldr	r2, [pc, #224]	; (80059b0 <DMA_CalcBaseAndBitshift+0x134>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d027      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a36      	ldr	r2, [pc, #216]	; (80059b4 <DMA_CalcBaseAndBitshift+0x138>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a35      	ldr	r2, [pc, #212]	; (80059b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d01d      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a33      	ldr	r2, [pc, #204]	; (80059bc <DMA_CalcBaseAndBitshift+0x140>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a32      	ldr	r2, [pc, #200]	; (80059c0 <DMA_CalcBaseAndBitshift+0x144>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a30      	ldr	r2, [pc, #192]	; (80059c4 <DMA_CalcBaseAndBitshift+0x148>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a2f      	ldr	r2, [pc, #188]	; (80059c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2d      	ldr	r2, [pc, #180]	; (80059cc <DMA_CalcBaseAndBitshift+0x150>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <DMA_CalcBaseAndBitshift+0xa8>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <DMA_CalcBaseAndBitshift+0x154>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d101      	bne.n	8005928 <DMA_CalcBaseAndBitshift+0xac>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <DMA_CalcBaseAndBitshift+0xae>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d024      	beq.n	8005978 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	3b10      	subs	r3, #16
 8005936:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <DMA_CalcBaseAndBitshift+0x158>)
 8005938:	fba2 2303 	umull	r2, r3, r2, r3
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	4a24      	ldr	r2, [pc, #144]	; (80059d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005948:	5cd3      	ldrb	r3, [r2, r3]
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b03      	cmp	r3, #3
 8005954:	d908      	bls.n	8005968 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <DMA_CalcBaseAndBitshift+0x160>)
 800595e:	4013      	ands	r3, r2
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	659a      	str	r2, [r3, #88]	; 0x58
 8005966:	e00d      	b.n	8005984 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <DMA_CalcBaseAndBitshift+0x160>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6593      	str	r3, [r2, #88]	; 0x58
 8005976:	e005      	b.n	8005984 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	40020010 	.word	0x40020010
 8005998:	40020028 	.word	0x40020028
 800599c:	40020040 	.word	0x40020040
 80059a0:	40020058 	.word	0x40020058
 80059a4:	40020070 	.word	0x40020070
 80059a8:	40020088 	.word	0x40020088
 80059ac:	400200a0 	.word	0x400200a0
 80059b0:	400200b8 	.word	0x400200b8
 80059b4:	40020410 	.word	0x40020410
 80059b8:	40020428 	.word	0x40020428
 80059bc:	40020440 	.word	0x40020440
 80059c0:	40020458 	.word	0x40020458
 80059c4:	40020470 	.word	0x40020470
 80059c8:	40020488 	.word	0x40020488
 80059cc:	400204a0 	.word	0x400204a0
 80059d0:	400204b8 	.word	0x400204b8
 80059d4:	aaaaaaab 	.word	0xaaaaaaab
 80059d8:	0800daac 	.word	0x0800daac
 80059dc:	fffffc00 	.word	0xfffffc00

080059e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d120      	bne.n	8005a36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d858      	bhi.n	8005aae <DMA_CheckFifoParam+0xce>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <DMA_CheckFifoParam+0x24>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a15 	.word	0x08005a15
 8005a08:	08005a27 	.word	0x08005a27
 8005a0c:	08005a15 	.word	0x08005a15
 8005a10:	08005aaf 	.word	0x08005aaf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d048      	beq.n	8005ab2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a24:	e045      	b.n	8005ab2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a2e:	d142      	bne.n	8005ab6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a34:	e03f      	b.n	8005ab6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	d123      	bne.n	8005a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d838      	bhi.n	8005aba <DMA_CheckFifoParam+0xda>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <DMA_CheckFifoParam+0x70>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a67 	.word	0x08005a67
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08005a79 	.word	0x08005a79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
        break;
 8005a64:	e030      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d025      	beq.n	8005abe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a76:	e022      	b.n	8005abe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a80:	d11f      	bne.n	8005ac2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a86:	e01c      	b.n	8005ac2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d902      	bls.n	8005a96 <DMA_CheckFifoParam+0xb6>
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d003      	beq.n	8005a9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a94:	e018      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9a:	e015      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8005aac:	e00b      	b.n	8005ac6 <DMA_CheckFifoParam+0xe6>
        break;
 8005aae:	bf00      	nop
 8005ab0:	e00a      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e008      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e006      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8005aba:	bf00      	nop
 8005abc:	e004      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e002      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e000      	b.n	8005ac8 <DMA_CheckFifoParam+0xe8>
    break;
 8005ac6:	bf00      	nop
    }
  }

  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a38      	ldr	r2, [pc, #224]	; (8005bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a36      	ldr	r2, [pc, #216]	; (8005bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a35      	ldr	r2, [pc, #212]	; (8005bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a33      	ldr	r2, [pc, #204]	; (8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a30      	ldr	r2, [pc, #192]	; (8005be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2f      	ldr	r2, [pc, #188]	; (8005be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a2d      	ldr	r2, [pc, #180]	; (8005be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	3b08      	subs	r3, #8
 8005b48:	4a28      	ldr	r2, [pc, #160]	; (8005bec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a24      	ldr	r2, [pc, #144]	; (8005bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b64:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005b74:	e024      	b.n	8005bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	3b10      	subs	r3, #16
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d806      	bhi.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d902      	bls.n	8005b9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2201      	movs	r2, #1
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	58025408 	.word	0x58025408
 8005bd0:	5802541c 	.word	0x5802541c
 8005bd4:	58025430 	.word	0x58025430
 8005bd8:	58025444 	.word	0x58025444
 8005bdc:	58025458 	.word	0x58025458
 8005be0:	5802546c 	.word	0x5802546c
 8005be4:	58025480 	.word	0x58025480
 8005be8:	58025494 	.word	0x58025494
 8005bec:	cccccccd 	.word	0xcccccccd
 8005bf0:	16009600 	.word	0x16009600
 8005bf4:	58025880 	.word	0x58025880
 8005bf8:	aaaaaaab 	.word	0xaaaaaaab
 8005bfc:	400204b8 	.word	0x400204b8
 8005c00:	4002040f 	.word	0x4002040f
 8005c04:	10008200 	.word	0x10008200
 8005c08:	40020880 	.word	0x40020880

08005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04a      	beq.n	8005cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d847      	bhi.n	8005cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a24      	ldr	r2, [pc, #144]	; (8005cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01d      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a1f      	ldr	r2, [pc, #124]	; (8005cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c94:	671a      	str	r2, [r3, #112]	; 0x70
 8005c96:	e009      	b.n	8005cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4b14      	ldr	r3, [pc, #80]	; (8005cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a11      	ldr	r2, [pc, #68]	; (8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005caa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	58025408 	.word	0x58025408
 8005cc8:	5802541c 	.word	0x5802541c
 8005ccc:	58025430 	.word	0x58025430
 8005cd0:	58025444 	.word	0x58025444
 8005cd4:	58025458 	.word	0x58025458
 8005cd8:	5802546c 	.word	0x5802546c
 8005cdc:	58025480 	.word	0x58025480
 8005ce0:	58025494 	.word	0x58025494
 8005ce4:	1600963f 	.word	0x1600963f
 8005ce8:	58025940 	.word	0x58025940
 8005cec:	1000823f 	.word	0x1000823f
 8005cf0:	40020940 	.word	0x40020940

08005cf4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	7a1b      	ldrb	r3, [r3, #8]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d155      	bne.n	8005dba <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a4b      	ldr	r2, [pc, #300]	; (8005e40 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d049      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a49      	ldr	r2, [pc, #292]	; (8005e44 <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d044      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a48      	ldr	r2, [pc, #288]	; (8005e48 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d03f      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a46      	ldr	r2, [pc, #280]	; (8005e4c <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d03a      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a45      	ldr	r2, [pc, #276]	; (8005e50 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d035      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a43      	ldr	r2, [pc, #268]	; (8005e54 <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d030      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a42      	ldr	r2, [pc, #264]	; (8005e58 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d02b      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a40      	ldr	r2, [pc, #256]	; (8005e5c <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d026      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a3f      	ldr	r2, [pc, #252]	; (8005e60 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d021      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01c      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d017      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3a      	ldr	r2, [pc, #232]	; (8005e6c <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d012      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a39      	ldr	r2, [pc, #228]	; (8005e70 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00d      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a37      	ldr	r2, [pc, #220]	; (8005e74 <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d008      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a36      	ldr	r2, [pc, #216]	; (8005e78 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d131      	bne.n	8005e2a <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_DMAEx_ConfigMuxSync+0xe0>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e02f      	b.n	8005e34 <HAL_DMAEx_ConfigMuxSync+0x140>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de6:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8005dea:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	b2d9      	uxtb	r1, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	061a      	lsls	r2, r3, #24
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	04db      	lsls	r3, r3, #19
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	7a1b      	ldrb	r3, [r3, #8]
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	7a5b      	ldrb	r3, [r3, #9]
 8005e12:	025b      	lsls	r3, r3, #9
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e004      	b.n	8005e34 <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40020010 	.word	0x40020010
 8005e44:	40020028 	.word	0x40020028
 8005e48:	40020040 	.word	0x40020040
 8005e4c:	40020058 	.word	0x40020058
 8005e50:	40020070 	.word	0x40020070
 8005e54:	40020088 	.word	0x40020088
 8005e58:	400200a0 	.word	0x400200a0
 8005e5c:	400200b8 	.word	0x400200b8
 8005e60:	40020410 	.word	0x40020410
 8005e64:	40020428 	.word	0x40020428
 8005e68:	40020440 	.word	0x40020440
 8005e6c:	40020458 	.word	0x40020458
 8005e70:	40020470 	.word	0x40020470
 8005e74:	40020488 	.word	0x40020488
 8005e78:	400204a0 	.word	0x400204a0
 8005e7c:	400204b8 	.word	0x400204b8

08005e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e8e:	4b89      	ldr	r3, [pc, #548]	; (80060b4 <HAL_GPIO_Init+0x234>)
 8005e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e92:	e194      	b.n	80061be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2101      	movs	r1, #1
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8186 	beq.w	80061b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d005      	beq.n	8005ec4 <HAL_GPIO_Init+0x44>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d130      	bne.n	8005f26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	2203      	movs	r2, #3
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	4013      	ands	r3, r2
 8005eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005efa:	2201      	movs	r2, #1
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0201 	and.w	r2, r3, #1
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d017      	beq.n	8005f62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	4013      	ands	r3, r2
 8005f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d123      	bne.n	8005fb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	08da      	lsrs	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3208      	adds	r2, #8
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	220f      	movs	r2, #15
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	08da      	lsrs	r2, r3, #3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3208      	adds	r2, #8
 8005fb0:	69b9      	ldr	r1, [r7, #24]
 8005fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0203 	and.w	r2, r3, #3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80e0 	beq.w	80061b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <HAL_GPIO_Init+0x238>)
 8005ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ffe:	4a2e      	ldr	r2, [pc, #184]	; (80060b8 <HAL_GPIO_Init+0x238>)
 8006000:	f043 0302 	orr.w	r3, r3, #2
 8006004:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <HAL_GPIO_Init+0x238>)
 800600a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006016:	4a29      	ldr	r2, [pc, #164]	; (80060bc <HAL_GPIO_Init+0x23c>)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	3302      	adds	r3, #2
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	220f      	movs	r2, #15
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a20      	ldr	r2, [pc, #128]	; (80060c0 <HAL_GPIO_Init+0x240>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d052      	beq.n	80060e8 <HAL_GPIO_Init+0x268>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <HAL_GPIO_Init+0x244>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d031      	beq.n	80060ae <HAL_GPIO_Init+0x22e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <HAL_GPIO_Init+0x248>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02b      	beq.n	80060aa <HAL_GPIO_Init+0x22a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <HAL_GPIO_Init+0x24c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d025      	beq.n	80060a6 <HAL_GPIO_Init+0x226>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1c      	ldr	r2, [pc, #112]	; (80060d0 <HAL_GPIO_Init+0x250>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <HAL_GPIO_Init+0x222>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_GPIO_Init+0x254>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d019      	beq.n	800609e <HAL_GPIO_Init+0x21e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1a      	ldr	r2, [pc, #104]	; (80060d8 <HAL_GPIO_Init+0x258>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <HAL_GPIO_Init+0x21a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_GPIO_Init+0x25c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00d      	beq.n	8006096 <HAL_GPIO_Init+0x216>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <HAL_GPIO_Init+0x260>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <HAL_GPIO_Init+0x212>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <HAL_GPIO_Init+0x264>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d101      	bne.n	800608e <HAL_GPIO_Init+0x20e>
 800608a:	2309      	movs	r3, #9
 800608c:	e02d      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800608e:	230a      	movs	r3, #10
 8006090:	e02b      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 8006092:	2308      	movs	r3, #8
 8006094:	e029      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 8006096:	2307      	movs	r3, #7
 8006098:	e027      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800609a:	2306      	movs	r3, #6
 800609c:	e025      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 800609e:	2305      	movs	r3, #5
 80060a0:	e023      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060a2:	2304      	movs	r3, #4
 80060a4:	e021      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060a6:	2303      	movs	r3, #3
 80060a8:	e01f      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e01d      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e01b      	b.n	80060ea <HAL_GPIO_Init+0x26a>
 80060b2:	bf00      	nop
 80060b4:	58000080 	.word	0x58000080
 80060b8:	58024400 	.word	0x58024400
 80060bc:	58000400 	.word	0x58000400
 80060c0:	58020000 	.word	0x58020000
 80060c4:	58020400 	.word	0x58020400
 80060c8:	58020800 	.word	0x58020800
 80060cc:	58020c00 	.word	0x58020c00
 80060d0:	58021000 	.word	0x58021000
 80060d4:	58021400 	.word	0x58021400
 80060d8:	58021800 	.word	0x58021800
 80060dc:	58021c00 	.word	0x58021c00
 80060e0:	58022000 	.word	0x58022000
 80060e4:	58022400 	.word	0x58022400
 80060e8:	2300      	movs	r3, #0
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	f002 0203 	and.w	r2, r2, #3
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	4093      	lsls	r3, r2
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060fa:	4938      	ldr	r1, [pc, #224]	; (80061dc <HAL_GPIO_Init+0x35c>)
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	089b      	lsrs	r3, r3, #2
 8006100:	3302      	adds	r3, #2
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800612e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800615c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f ae63 	bne.w	8005e94 <HAL_GPIO_Init+0x14>
  }
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	3724      	adds	r7, #36	; 0x24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	58000400 	.word	0x58000400

080061e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	460b      	mov	r3, r1
 80061ea:	807b      	strh	r3, [r7, #2]
 80061ec:	4613      	mov	r3, r2
 80061ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061f0:	787b      	ldrb	r3, [r7, #1]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061f6:	887a      	ldrh	r2, [r7, #2]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061fc:	e003      	b.n	8006206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	041a      	lsls	r2, r3, #16
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	619a      	str	r2, [r3, #24]
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006224:	887a      	ldrh	r2, [r7, #2]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4013      	ands	r3, r2
 800622a:	041a      	lsls	r2, r3, #16
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	43d9      	mvns	r1, r3
 8006230:	887b      	ldrh	r3, [r7, #2]
 8006232:	400b      	ands	r3, r1
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	619a      	str	r2, [r3, #24]
}
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	4603      	mov	r3, r0
 800624e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006258:	88fb      	ldrh	r3, [r7, #6]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006264:	88fb      	ldrh	r3, [r7, #6]
 8006266:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fb fae9 	bl	8001844 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	2b06      	cmp	r3, #6
 800628e:	d00a      	beq.n	80062a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006290:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d001      	beq.n	80062a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e040      	b.n	8006324 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e03e      	b.n	8006324 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062a6:	4b21      	ldr	r3, [pc, #132]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80062ae:	491f      	ldr	r1, [pc, #124]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062b6:	f7fb fff9 	bl	80022ac <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062bc:	e009      	b.n	80062d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062be:	f7fb fff5 	bl	80022ac <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062cc:	d901      	bls.n	80062d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e028      	b.n	8006324 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062d2:	4b16      	ldr	r3, [pc, #88]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062de:	d1ee      	bne.n	80062be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b1e      	cmp	r3, #30
 80062e4:	d008      	beq.n	80062f8 <HAL_PWREx_ConfigSupply+0x7c>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b2e      	cmp	r3, #46	; 0x2e
 80062ea:	d005      	beq.n	80062f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b1d      	cmp	r3, #29
 80062f0:	d002      	beq.n	80062f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b2d      	cmp	r3, #45	; 0x2d
 80062f6:	d114      	bne.n	8006322 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062f8:	f7fb ffd8 	bl	80022ac <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062fe:	e009      	b.n	8006314 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006300:	f7fb ffd4 	bl	80022ac <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630e:	d901      	bls.n	8006314 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e007      	b.n	8006324 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_PWREx_ConfigSupply+0xb0>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006320:	d1ee      	bne.n	8006300 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	58024800 	.word	0x58024800

08006330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	; 0x30
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	f000 bc48 	b.w	8006bd4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8088 	beq.w	8006462 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006352:	4b99      	ldr	r3, [pc, #612]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800635c:	4b96      	ldr	r3, [pc, #600]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2b10      	cmp	r3, #16
 8006366:	d007      	beq.n	8006378 <HAL_RCC_OscConfig+0x48>
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b18      	cmp	r3, #24
 800636c:	d111      	bne.n	8006392 <HAL_RCC_OscConfig+0x62>
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d10c      	bne.n	8006392 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d06d      	beq.n	8006460 <HAL_RCC_OscConfig+0x130>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d169      	bne.n	8006460 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f000 bc21 	b.w	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639a:	d106      	bne.n	80063aa <HAL_RCC_OscConfig+0x7a>
 800639c:	4b86      	ldr	r3, [pc, #536]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a85      	ldr	r2, [pc, #532]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	e02e      	b.n	8006408 <HAL_RCC_OscConfig+0xd8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10c      	bne.n	80063cc <HAL_RCC_OscConfig+0x9c>
 80063b2:	4b81      	ldr	r3, [pc, #516]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a80      	ldr	r2, [pc, #512]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b7e      	ldr	r3, [pc, #504]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a7d      	ldr	r2, [pc, #500]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e01d      	b.n	8006408 <HAL_RCC_OscConfig+0xd8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0xc0>
 80063d6:	4b78      	ldr	r3, [pc, #480]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a77      	ldr	r2, [pc, #476]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a74      	ldr	r2, [pc, #464]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0xd8>
 80063f0:	4b71      	ldr	r3, [pc, #452]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a70      	ldr	r2, [pc, #448]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b6e      	ldr	r3, [pc, #440]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a6d      	ldr	r2, [pc, #436]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006410:	f7fb ff4c 	bl	80022ac <HAL_GetTick>
 8006414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006418:	f7fb ff48 	bl	80022ac <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e3d4      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800642a:	4b63      	ldr	r3, [pc, #396]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0xe8>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fb ff38 	bl	80022ac <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006440:	f7fb ff34 	bl	80022ac <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e3c0      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0x110>
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80ca 	beq.w	8006604 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006470:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006478:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800647a:	4b4f      	ldr	r3, [pc, #316]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d007      	beq.n	8006496 <HAL_RCC_OscConfig+0x166>
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	2b18      	cmp	r3, #24
 800648a:	d156      	bne.n	800653a <HAL_RCC_OscConfig+0x20a>
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d151      	bne.n	800653a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006496:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_RCC_OscConfig+0x17e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e392      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064ae:	4b42      	ldr	r3, [pc, #264]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 0219 	bic.w	r2, r3, #25
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	493f      	ldr	r1, [pc, #252]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fb fef4 	bl	80022ac <HAL_GetTick>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c8:	f7fb fef0 	bl	80022ac <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e37c      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064da:	4b37      	ldr	r3, [pc, #220]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e6:	f7fb ff11 	bl	800230c <HAL_GetREVID>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d817      	bhi.n	8006524 <HAL_RCC_OscConfig+0x1f4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d108      	bne.n	800650e <HAL_RCC_OscConfig+0x1de>
 80064fc:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006504:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800650c:	e07a      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650e:	4b2a      	ldr	r3, [pc, #168]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	031b      	lsls	r3, r3, #12
 800651c:	4926      	ldr	r1, [pc, #152]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800651e:	4313      	orrs	r3, r2
 8006520:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006522:	e06f      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	061b      	lsls	r3, r3, #24
 8006532:	4921      	ldr	r1, [pc, #132]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006534:	4313      	orrs	r3, r2
 8006536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006538:	e064      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d047      	beq.n	80065d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0219 	bic.w	r2, r3, #25
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	491a      	ldr	r1, [pc, #104]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fb feaa 	bl	80022ac <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655c:	f7fb fea6 	bl	80022ac <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e332      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657a:	f7fb fec7 	bl	800230c <HAL_GetREVID>
 800657e:	4603      	mov	r3, r0
 8006580:	f241 0203 	movw	r2, #4099	; 0x1003
 8006584:	4293      	cmp	r3, r2
 8006586:	d819      	bhi.n	80065bc <HAL_RCC_OscConfig+0x28c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	d108      	bne.n	80065a2 <HAL_RCC_OscConfig+0x272>
 8006590:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006598:	4a07      	ldr	r2, [pc, #28]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659e:	6053      	str	r3, [r2, #4]
 80065a0:	e030      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	031b      	lsls	r3, r3, #12
 80065b0:	4901      	ldr	r1, [pc, #4]	; (80065b8 <HAL_RCC_OscConfig+0x288>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	604b      	str	r3, [r1, #4]
 80065b6:	e025      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
 80065b8:	58024400 	.word	0x58024400
 80065bc:	4b9a      	ldr	r3, [pc, #616]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	4997      	ldr	r1, [pc, #604]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]
 80065d0:	e018      	b.n	8006604 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065d2:	4b95      	ldr	r3, [pc, #596]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a94      	ldr	r2, [pc, #592]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065de:	f7fb fe65 	bl	80022ac <HAL_GetTick>
 80065e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065e4:	e008      	b.n	80065f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e6:	f7fb fe61 	bl	80022ac <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e2ed      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065f8:	4b8b      	ldr	r3, [pc, #556]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f0      	bne.n	80065e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a9 	beq.w	8006764 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006612:	4b85      	ldr	r3, [pc, #532]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800661a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800661c:	4b82      	ldr	r3, [pc, #520]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d007      	beq.n	8006638 <HAL_RCC_OscConfig+0x308>
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b18      	cmp	r3, #24
 800662c:	d13a      	bne.n	80066a4 <HAL_RCC_OscConfig+0x374>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d135      	bne.n	80066a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006638:	4b7b      	ldr	r3, [pc, #492]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_OscConfig+0x320>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d001      	beq.n	8006650 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e2c1      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006650:	f7fb fe5c 	bl	800230c <HAL_GetREVID>
 8006654:	4603      	mov	r3, r0
 8006656:	f241 0203 	movw	r2, #4099	; 0x1003
 800665a:	4293      	cmp	r3, r2
 800665c:	d817      	bhi.n	800668e <HAL_RCC_OscConfig+0x35e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	2b20      	cmp	r3, #32
 8006664:	d108      	bne.n	8006678 <HAL_RCC_OscConfig+0x348>
 8006666:	4b70      	ldr	r3, [pc, #448]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800666e:	4a6e      	ldr	r2, [pc, #440]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006674:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006676:	e075      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006678:	4b6b      	ldr	r3, [pc, #428]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	069b      	lsls	r3, r3, #26
 8006686:	4968      	ldr	r1, [pc, #416]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800668c:	e06a      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800668e:	4b66      	ldr	r3, [pc, #408]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	4962      	ldr	r1, [pc, #392]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066a2:	e05f      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d042      	beq.n	8006732 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066ac:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a5d      	ldr	r2, [pc, #372]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fb fdf8 	bl	80022ac <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066c0:	f7fb fdf4 	bl	80022ac <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e280      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066d2:	4b55      	ldr	r3, [pc, #340]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066de:	f7fb fe15 	bl	800230c <HAL_GetREVID>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d817      	bhi.n	800671c <HAL_RCC_OscConfig+0x3ec>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d108      	bne.n	8006706 <HAL_RCC_OscConfig+0x3d6>
 80066f4:	4b4c      	ldr	r3, [pc, #304]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066fc:	4a4a      	ldr	r2, [pc, #296]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80066fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006702:	6053      	str	r3, [r2, #4]
 8006704:	e02e      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
 8006706:	4b48      	ldr	r3, [pc, #288]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	069b      	lsls	r3, r3, #26
 8006714:	4944      	ldr	r1, [pc, #272]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006716:	4313      	orrs	r3, r2
 8006718:	604b      	str	r3, [r1, #4]
 800671a:	e023      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
 800671c:	4b42      	ldr	r3, [pc, #264]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	061b      	lsls	r3, r3, #24
 800672a:	493f      	ldr	r1, [pc, #252]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800672c:	4313      	orrs	r3, r2
 800672e:	60cb      	str	r3, [r1, #12]
 8006730:	e018      	b.n	8006764 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006732:	4b3d      	ldr	r3, [pc, #244]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 8006738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fb fdb5 	bl	80022ac <HAL_GetTick>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006746:	f7fb fdb1 	bl	80022ac <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e23d      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006758:	4b33      	ldr	r3, [pc, #204]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f0      	bne.n	8006746 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d036      	beq.n	80067de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d019      	beq.n	80067ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006778:	4b2b      	ldr	r3, [pc, #172]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800677a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006784:	f7fb fd92 	bl	80022ac <HAL_GetTick>
 8006788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800678c:	f7fb fd8e 	bl	80022ac <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e21a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800679e:	4b22      	ldr	r3, [pc, #136]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0x45c>
 80067aa:	e018      	b.n	80067de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ac:	4b1e      	ldr	r3, [pc, #120]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b0:	4a1d      	ldr	r2, [pc, #116]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b8:	f7fb fd78 	bl	80022ac <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c0:	f7fb fd74 	bl	80022ac <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e200      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d039      	beq.n	800685e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01c      	beq.n	800682c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80067f2:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a0c      	ldr	r2, [pc, #48]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 80067f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80067fe:	f7fb fd55 	bl	80022ac <HAL_GetTick>
 8006802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006806:	f7fb fd51 	bl	80022ac <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e1dd      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006818:	4b03      	ldr	r3, [pc, #12]	; (8006828 <HAL_RCC_OscConfig+0x4f8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x4d6>
 8006824:	e01b      	b.n	800685e <HAL_RCC_OscConfig+0x52e>
 8006826:	bf00      	nop
 8006828:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800682c:	4b9b      	ldr	r3, [pc, #620]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a9a      	ldr	r2, [pc, #616]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006838:	f7fb fd38 	bl	80022ac <HAL_GetTick>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006840:	f7fb fd34 	bl	80022ac <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e1c0      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006852:	4b92      	ldr	r3, [pc, #584]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8081 	beq.w	800696e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800686c:	4b8c      	ldr	r3, [pc, #560]	; (8006aa0 <HAL_RCC_OscConfig+0x770>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a8b      	ldr	r2, [pc, #556]	; (8006aa0 <HAL_RCC_OscConfig+0x770>)
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006878:	f7fb fd18 	bl	80022ac <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006880:	f7fb fd14 	bl	80022ac <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e1a0      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006892:	4b83      	ldr	r3, [pc, #524]	; (8006aa0 <HAL_RCC_OscConfig+0x770>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d106      	bne.n	80068b4 <HAL_RCC_OscConfig+0x584>
 80068a6:	4b7d      	ldr	r3, [pc, #500]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a7c      	ldr	r2, [pc, #496]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068ac:	f043 0301 	orr.w	r3, r3, #1
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	e02d      	b.n	8006910 <HAL_RCC_OscConfig+0x5e0>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <HAL_RCC_OscConfig+0x5a6>
 80068bc:	4b77      	ldr	r3, [pc, #476]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c0:	4a76      	ldr	r2, [pc, #472]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	; 0x70
 80068c8:	4b74      	ldr	r3, [pc, #464]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068ce:	f023 0304 	bic.w	r3, r3, #4
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
 80068d4:	e01c      	b.n	8006910 <HAL_RCC_OscConfig+0x5e0>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d10c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x5c8>
 80068de:	4b6f      	ldr	r3, [pc, #444]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	4a6e      	ldr	r2, [pc, #440]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068e4:	f043 0304 	orr.w	r3, r3, #4
 80068e8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ea:	4b6c      	ldr	r3, [pc, #432]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a6b      	ldr	r2, [pc, #428]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	; 0x70
 80068f6:	e00b      	b.n	8006910 <HAL_RCC_OscConfig+0x5e0>
 80068f8:	4b68      	ldr	r3, [pc, #416]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fc:	4a67      	ldr	r2, [pc, #412]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	6713      	str	r3, [r2, #112]	; 0x70
 8006904:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006908:	4a64      	ldr	r2, [pc, #400]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fb fcc8 	bl	80022ac <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800691e:	e00a      	b.n	8006936 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f7fb fcc4 	bl	80022ac <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	; 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e14e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006936:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0ee      	beq.n	8006920 <HAL_RCC_OscConfig+0x5f0>
 8006942:	e014      	b.n	800696e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fb fcb2 	bl	80022ac <HAL_GetTick>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fb fcae 	bl	80022ac <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e138      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006962:	4b4e      	ldr	r3, [pc, #312]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ee      	bne.n	800694c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 812d 	beq.w	8006bd2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006978:	4b48      	ldr	r3, [pc, #288]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006980:	2b18      	cmp	r3, #24
 8006982:	f000 80bd 	beq.w	8006b00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	2b02      	cmp	r3, #2
 800698c:	f040 809e 	bne.w	8006acc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006990:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a41      	ldr	r2, [pc, #260]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699c:	f7fb fc86 	bl	80022ac <HAL_GetTick>
 80069a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fb fc82 	bl	80022ac <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e10e      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c2:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80069c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c6:	4b37      	ldr	r3, [pc, #220]	; (8006aa4 <HAL_RCC_OscConfig+0x774>)
 80069c8:	4013      	ands	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069d2:	0112      	lsls	r2, r2, #4
 80069d4:	430a      	orrs	r2, r1
 80069d6:	4931      	ldr	r1, [pc, #196]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	628b      	str	r3, [r1, #40]	; 0x28
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	3b01      	subs	r3, #1
 80069e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ea:	3b01      	subs	r3, #1
 80069ec:	025b      	lsls	r3, r3, #9
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	3b01      	subs	r3, #1
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a04:	3b01      	subs	r3, #1
 8006a06:	061b      	lsls	r3, r3, #24
 8006a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a0c:	4923      	ldr	r1, [pc, #140]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a12:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a1e:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a22:	4b21      	ldr	r3, [pc, #132]	; (8006aa8 <HAL_RCC_OscConfig+0x778>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	491b      	ldr	r1, [pc, #108]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a32:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f023 020c 	bic.w	r2, r3, #12
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	4917      	ldr	r1, [pc, #92]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a44:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	f023 0202 	bic.w	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a50:	4912      	ldr	r1, [pc, #72]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a66:	4a0d      	ldr	r2, [pc, #52]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	4a0a      	ldr	r2, [pc, #40]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a7a:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a04      	ldr	r2, [pc, #16]	; (8006a9c <HAL_RCC_OscConfig+0x76c>)
 8006a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a92:	f7fb fc0b 	bl	80022ac <HAL_GetTick>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a98:	e011      	b.n	8006abe <HAL_RCC_OscConfig+0x78e>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58024800 	.word	0x58024800
 8006aa4:	fffffc0c 	.word	0xfffffc0c
 8006aa8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aac:	f7fb fbfe 	bl	80022ac <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e08a      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006abe:	4b47      	ldr	r3, [pc, #284]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x77c>
 8006aca:	e082      	b.n	8006bd2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006acc:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a42      	ldr	r2, [pc, #264]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fb fbe8 	bl	80022ac <HAL_GetTick>
 8006adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fb fbe4 	bl	80022ac <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e070      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006af2:	4b3a      	ldr	r3, [pc, #232]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x7b0>
 8006afe:	e068      	b.n	8006bd2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b00:	4b36      	ldr	r3, [pc, #216]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b06:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d031      	beq.n	8006b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f003 0203 	and.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d12a      	bne.n	8006b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d122      	bne.n	8006b78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d11a      	bne.n	8006b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	0a5b      	lsrs	r3, r3, #9
 8006b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d111      	bne.n	8006b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d108      	bne.n	8006b78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	0e1b      	lsrs	r3, r3, #24
 8006b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d001      	beq.n	8006b7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e02b      	b.n	8006bd4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b7c:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	08db      	lsrs	r3, r3, #3
 8006b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d01f      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b9e:	f7fb fb85 	bl	80022ac <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006ba4:	bf00      	nop
 8006ba6:	f7fb fb81 	bl	80022ac <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d0f9      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <HAL_RCC_OscConfig+0x8b0>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bbe:	00d2      	lsls	r2, r2, #3
 8006bc0:	4906      	ldr	r1, [pc, #24]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	4a04      	ldr	r2, [pc, #16]	; (8006bdc <HAL_RCC_OscConfig+0x8ac>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3730      	adds	r7, #48	; 0x30
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	ffff0007 	.word	0xffff0007

08006be4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e19c      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bf8:	4b8a      	ldr	r3, [pc, #552]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 030f 	and.w	r3, r3, #15
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d910      	bls.n	8006c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c06:	4b87      	ldr	r3, [pc, #540]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f023 020f 	bic.w	r2, r3, #15
 8006c0e:	4985      	ldr	r1, [pc, #532]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b83      	ldr	r3, [pc, #524]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d001      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e184      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	4b7b      	ldr	r3, [pc, #492]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d908      	bls.n	8006c56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c44:	4b78      	ldr	r3, [pc, #480]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	4975      	ldr	r1, [pc, #468]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695a      	ldr	r2, [r3, #20]
 8006c66:	4b70      	ldr	r3, [pc, #448]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d908      	bls.n	8006c84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c72:	4b6d      	ldr	r3, [pc, #436]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	496a      	ldr	r1, [pc, #424]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d010      	beq.n	8006cb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	4b64      	ldr	r3, [pc, #400]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d908      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ca0:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	495e      	ldr	r1, [pc, #376]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d010      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	4b59      	ldr	r3, [pc, #356]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d908      	bls.n	8006ce0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cce:	4b56      	ldr	r3, [pc, #344]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	4953      	ldr	r1, [pc, #332]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d010      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	4b4d      	ldr	r3, [pc, #308]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d908      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cfc:	4b4a      	ldr	r3, [pc, #296]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f023 020f 	bic.w	r2, r3, #15
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4947      	ldr	r1, [pc, #284]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d055      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d1a:	4b43      	ldr	r3, [pc, #268]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4940      	ldr	r1, [pc, #256]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d34:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d121      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0f6      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d115      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0ea      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0de      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d74:	4b2c      	ldr	r3, [pc, #176]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e0d6      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d84:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f023 0207 	bic.w	r2, r3, #7
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	4925      	ldr	r1, [pc, #148]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d96:	f7fb fa89 	bl	80022ac <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9c:	e00a      	b.n	8006db4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9e:	f7fb fa85 	bl	80022ac <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e0be      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006db4:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d1eb      	bne.n	8006d9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d208      	bcs.n	8006df4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006de2:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f023 020f 	bic.w	r2, r3, #15
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	490e      	ldr	r1, [pc, #56]	; (8006e28 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d214      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e02:	4b08      	ldr	r3, [pc, #32]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 020f 	bic.w	r2, r3, #15
 8006e0a:	4906      	ldr	r1, [pc, #24]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <HAL_RCC_ClockConfig+0x240>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e086      	b.n	8006f32 <HAL_RCC_ClockConfig+0x34e>
 8006e24:	52002000 	.word	0x52002000
 8006e28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691a      	ldr	r2, [r3, #16]
 8006e3c:	4b3f      	ldr	r3, [pc, #252]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d208      	bcs.n	8006e5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e48:	4b3c      	ldr	r3, [pc, #240]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	4939      	ldr	r1, [pc, #228]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	4b34      	ldr	r3, [pc, #208]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d208      	bcs.n	8006e88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e76:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	492e      	ldr	r1, [pc, #184]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d010      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d208      	bcs.n	8006eb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	4922      	ldr	r1, [pc, #136]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d010      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69da      	ldr	r2, [r3, #28]
 8006ec6:	4b1d      	ldr	r3, [pc, #116]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d208      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ed2:	4b1a      	ldr	r3, [pc, #104]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	4917      	ldr	r1, [pc, #92]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ee4:	f000 f834 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	4912      	ldr	r1, [pc, #72]	; (8006f40 <HAL_RCC_ClockConfig+0x35c>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f02:	4b0e      	ldr	r3, [pc, #56]	; (8006f3c <HAL_RCC_ClockConfig+0x358>)
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	4a0d      	ldr	r2, [pc, #52]	; (8006f40 <HAL_RCC_ClockConfig+0x35c>)
 8006f0c:	5cd3      	ldrb	r3, [r2, r3]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <HAL_RCC_ClockConfig+0x360>)
 8006f1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f1c:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <HAL_RCC_ClockConfig+0x364>)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f22:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_RCC_ClockConfig+0x368>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fb f976 	bl	8002218 <HAL_InitTick>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	58024400 	.word	0x58024400
 8006f40:	0800da9c 	.word	0x0800da9c
 8006f44:	24000008 	.word	0x24000008
 8006f48:	24000004 	.word	0x24000004
 8006f4c:	2400000c 	.word	0x2400000c

08006f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f56:	4bb3      	ldr	r3, [pc, #716]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f5e:	2b18      	cmp	r3, #24
 8006f60:	f200 8155 	bhi.w	800720e <HAL_RCC_GetSysClockFreq+0x2be>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006fd1 	.word	0x08006fd1
 8006f70:	0800720f 	.word	0x0800720f
 8006f74:	0800720f 	.word	0x0800720f
 8006f78:	0800720f 	.word	0x0800720f
 8006f7c:	0800720f 	.word	0x0800720f
 8006f80:	0800720f 	.word	0x0800720f
 8006f84:	0800720f 	.word	0x0800720f
 8006f88:	0800720f 	.word	0x0800720f
 8006f8c:	08006ff7 	.word	0x08006ff7
 8006f90:	0800720f 	.word	0x0800720f
 8006f94:	0800720f 	.word	0x0800720f
 8006f98:	0800720f 	.word	0x0800720f
 8006f9c:	0800720f 	.word	0x0800720f
 8006fa0:	0800720f 	.word	0x0800720f
 8006fa4:	0800720f 	.word	0x0800720f
 8006fa8:	0800720f 	.word	0x0800720f
 8006fac:	08006ffd 	.word	0x08006ffd
 8006fb0:	0800720f 	.word	0x0800720f
 8006fb4:	0800720f 	.word	0x0800720f
 8006fb8:	0800720f 	.word	0x0800720f
 8006fbc:	0800720f 	.word	0x0800720f
 8006fc0:	0800720f 	.word	0x0800720f
 8006fc4:	0800720f 	.word	0x0800720f
 8006fc8:	0800720f 	.word	0x0800720f
 8006fcc:	08007003 	.word	0x08007003
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fd0:	4b94      	ldr	r3, [pc, #592]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d009      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fdc:	4b91      	ldr	r3, [pc, #580]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	4a90      	ldr	r2, [pc, #576]	; (8007228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006fee:	e111      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ff0:	4b8d      	ldr	r3, [pc, #564]	; (8007228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ff2:	61bb      	str	r3, [r7, #24]
      break;
 8006ff4:	e10e      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006ff6:	4b8d      	ldr	r3, [pc, #564]	; (800722c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ff8:	61bb      	str	r3, [r7, #24]
      break;
 8006ffa:	e10b      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006ffc:	4b8c      	ldr	r3, [pc, #560]	; (8007230 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006ffe:	61bb      	str	r3, [r7, #24]
      break;
 8007000:	e108      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007002:	4b88      	ldr	r3, [pc, #544]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800700c:	4b85      	ldr	r3, [pc, #532]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	091b      	lsrs	r3, r3, #4
 8007012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007016:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007018:	4b82      	ldr	r3, [pc, #520]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007022:	4b80      	ldr	r3, [pc, #512]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80e1 	beq.w	8007208 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b02      	cmp	r3, #2
 800704a:	f000 8083 	beq.w	8007154 <HAL_RCC_GetSysClockFreq+0x204>
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b02      	cmp	r3, #2
 8007052:	f200 80a1 	bhi.w	8007198 <HAL_RCC_GetSysClockFreq+0x248>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0x114>
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d056      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007062:	e099      	b.n	8007198 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007064:	4b6f      	ldr	r3, [pc, #444]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02d      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007070:	4b6c      	ldr	r3, [pc, #432]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	4a6b      	ldr	r2, [pc, #428]	; (8007228 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
 8007080:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709a:	4b62      	ldr	r3, [pc, #392]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070ca:	e087      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007238 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b51      	ldr	r3, [pc, #324]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800710e:	e065      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800723c <HAL_RCC_GetSysClockFreq+0x2ec>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b40      	ldr	r3, [pc, #256]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007152:	e043      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007240 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b2f      	ldr	r3, [pc, #188]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007234 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007196:	e021      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800723c <HAL_RCC_GetSysClockFreq+0x2ec>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007234 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071dc:	4b11      	ldr	r3, [pc, #68]	; (8007224 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	0a5b      	lsrs	r3, r3, #9
 80071e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e6:	3301      	adds	r3, #1
 80071e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80071f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007200:	ee17 3a90 	vmov	r3, s15
 8007204:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007206:	e005      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
      break;
 800720c:	e002      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800720e:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007210:	61bb      	str	r3, [r7, #24]
      break;
 8007212:	bf00      	nop
  }

  return sysclockfreq;
 8007214:	69bb      	ldr	r3, [r7, #24]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3724      	adds	r7, #36	; 0x24
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	58024400 	.word	0x58024400
 8007228:	03d09000 	.word	0x03d09000
 800722c:	003d0900 	.word	0x003d0900
 8007230:	017d7840 	.word	0x017d7840
 8007234:	46000000 	.word	0x46000000
 8007238:	4c742400 	.word	0x4c742400
 800723c:	4a742400 	.word	0x4a742400
 8007240:	4bbebc20 	.word	0x4bbebc20

08007244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800724a:	f7ff fe81 	bl	8006f50 <HAL_RCC_GetSysClockFreq>
 800724e:	4602      	mov	r2, r0
 8007250:	4b10      	ldr	r3, [pc, #64]	; (8007294 <HAL_RCC_GetHCLKFreq+0x50>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	490f      	ldr	r1, [pc, #60]	; (8007298 <HAL_RCC_GetHCLKFreq+0x54>)
 800725c:	5ccb      	ldrb	r3, [r1, r3]
 800725e:	f003 031f 	and.w	r3, r3, #31
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007268:	4b0a      	ldr	r3, [pc, #40]	; (8007294 <HAL_RCC_GetHCLKFreq+0x50>)
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	f003 030f 	and.w	r3, r3, #15
 8007270:	4a09      	ldr	r2, [pc, #36]	; (8007298 <HAL_RCC_GetHCLKFreq+0x54>)
 8007272:	5cd3      	ldrb	r3, [r2, r3]
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	fa22 f303 	lsr.w	r3, r2, r3
 800727e:	4a07      	ldr	r2, [pc, #28]	; (800729c <HAL_RCC_GetHCLKFreq+0x58>)
 8007280:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007282:	4a07      	ldr	r2, [pc, #28]	; (80072a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <HAL_RCC_GetHCLKFreq+0x58>)
 800728a:	681b      	ldr	r3, [r3, #0]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	58024400 	.word	0x58024400
 8007298:	0800da9c 	.word	0x0800da9c
 800729c:	24000008 	.word	0x24000008
 80072a0:	24000004 	.word	0x24000004

080072a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072a8:	f7ff ffcc 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	091b      	lsrs	r3, r3, #4
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	4904      	ldr	r1, [pc, #16]	; (80072cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80072ba:	5ccb      	ldrb	r3, [r1, r3]
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	58024400 	.word	0x58024400
 80072cc:	0800da9c 	.word	0x0800da9c

080072d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072d4:	f7ff ffb6 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4904      	ldr	r1, [pc, #16]	; (80072f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58024400 	.word	0x58024400
 80072f8:	0800da9c 	.word	0x0800da9c

080072fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007300:	b0ca      	sub	sp, #296	; 0x128
 8007302:	af00      	add	r7, sp, #0
 8007304:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007308:	2300      	movs	r3, #0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800730e:	2300      	movs	r3, #0
 8007310:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007320:	2500      	movs	r5, #0
 8007322:	ea54 0305 	orrs.w	r3, r4, r5
 8007326:	d049      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800732e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007338:	d828      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800733a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800733e:	d01a      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007344:	d822      	bhi.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800734e:	d007      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007350:	e01c      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007352:	4bb8      	ldr	r3, [pc, #736]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	4ab7      	ldr	r2, [pc, #732]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800735e:	e01a      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007364:	3308      	adds	r3, #8
 8007366:	2102      	movs	r1, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f002 fb61 	bl	8009a30 <RCCEx_PLL2_Config>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007374:	e00f      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737a:	3328      	adds	r3, #40	; 0x28
 800737c:	2102      	movs	r1, #2
 800737e:	4618      	mov	r0, r3
 8007380:	f002 fc08 	bl	8009b94 <RCCEx_PLL3_Config>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800738a:	e004      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007392:	e000      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800739e:	4ba5      	ldr	r3, [pc, #660]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073ac:	4aa1      	ldr	r2, [pc, #644]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073ae:	430b      	orrs	r3, r1
 80073b0:	6513      	str	r3, [r2, #80]	; 0x50
 80073b2:	e003      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80073c8:	f04f 0900 	mov.w	r9, #0
 80073cc:	ea58 0309 	orrs.w	r3, r8, r9
 80073d0:	d047      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d82a      	bhi.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073dc:	a201      	add	r2, pc, #4	; (adr r2, 80073e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e2:	bf00      	nop
 80073e4:	080073f9 	.word	0x080073f9
 80073e8:	08007407 	.word	0x08007407
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	0800743b 	.word	0x0800743b
 80073f4:	0800743b 	.word	0x0800743b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f8:	4b8e      	ldr	r3, [pc, #568]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a8d      	ldr	r2, [pc, #564]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007404:	e01a      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740a:	3308      	adds	r3, #8
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f002 fb0e 	bl	8009a30 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800741a:	e00f      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007420:	3328      	adds	r3, #40	; 0x28
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f002 fbb5 	bl	8009b94 <RCCEx_PLL3_Config>
 800742a:	4603      	mov	r3, r0
 800742c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007430:	e004      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007438:	e000      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800743a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007444:	4b7b      	ldr	r3, [pc, #492]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007448:	f023 0107 	bic.w	r1, r3, #7
 800744c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	4a78      	ldr	r2, [pc, #480]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007454:	430b      	orrs	r3, r1
 8007456:	6513      	str	r3, [r2, #80]	; 0x50
 8007458:	e003      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800745e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800746e:	f04f 0b00 	mov.w	fp, #0
 8007472:	ea5a 030b 	orrs.w	r3, sl, fp
 8007476:	d04c      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800747e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007482:	d030      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007488:	d829      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800748a:	2bc0      	cmp	r3, #192	; 0xc0
 800748c:	d02d      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800748e:	2bc0      	cmp	r3, #192	; 0xc0
 8007490:	d825      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d018      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007496:	2b80      	cmp	r3, #128	; 0x80
 8007498:	d821      	bhi.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d007      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074a2:	e01c      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a4:	4b63      	ldr	r3, [pc, #396]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	4a62      	ldr	r2, [pc, #392]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074b0:	e01c      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	3308      	adds	r3, #8
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f002 fab8 	bl	8009a30 <RCCEx_PLL2_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074c6:	e011      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074cc:	3328      	adds	r3, #40	; 0x28
 80074ce:	2100      	movs	r1, #0
 80074d0:	4618      	mov	r0, r3
 80074d2:	f002 fb5f 	bl	8009b94 <RCCEx_PLL3_Config>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074dc:	e006      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074e4:	e002      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074f4:	4b4f      	ldr	r3, [pc, #316]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007502:	4a4c      	ldr	r2, [pc, #304]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007504:	430b      	orrs	r3, r1
 8007506:	6513      	str	r3, [r2, #80]	; 0x50
 8007508:	e003      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800750e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800751e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007522:	2300      	movs	r3, #0
 8007524:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007528:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800752c:	460b      	mov	r3, r1
 800752e:	4313      	orrs	r3, r2
 8007530:	d053      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800753a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800753e:	d035      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007544:	d82e      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007546:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800754a:	d031      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800754c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007550:	d828      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007556:	d01a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800755c:	d822      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007566:	d007      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007568:	e01c      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756a:	4b32      	ldr	r3, [pc, #200]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	4a31      	ldr	r2, [pc, #196]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007576:	e01c      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800757c:	3308      	adds	r3, #8
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f002 fa55 	bl	8009a30 <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800758c:	e011      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007592:	3328      	adds	r3, #40	; 0x28
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f002 fafc 	bl	8009b94 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075a2:	e006      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075aa:	e002      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075ac:	bf00      	nop
 80075ae:	e000      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075ba:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6593      	str	r3, [r2, #88]	; 0x58
 80075d0:	e003      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80075e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d056      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007606:	d038      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800760c:	d831      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800760e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007612:	d034      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007618:	d82b      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800761a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800761e:	d01d      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007624:	d825      	bhi.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800762a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007630:	e01f      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007638:	4ba2      	ldr	r3, [pc, #648]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4aa1      	ldr	r2, [pc, #644]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007644:	e01c      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764a:	3308      	adds	r3, #8
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f002 f9ee 	bl	8009a30 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800765a:	e011      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007660:	3328      	adds	r3, #40	; 0x28
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f002 fa95 	bl	8009b94 <RCCEx_PLL3_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800767e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007688:	4b8e      	ldr	r3, [pc, #568]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007694:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007698:	4a8a      	ldr	r2, [pc, #552]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800769a:	430b      	orrs	r3, r1
 800769c:	6593      	str	r3, [r2, #88]	; 0x58
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80076b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076be:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80076c2:	460b      	mov	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	d03a      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ce:	2b30      	cmp	r3, #48	; 0x30
 80076d0:	d01f      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076d2:	2b30      	cmp	r3, #48	; 0x30
 80076d4:	d819      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d00c      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d815      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d019      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076e2:	2b10      	cmp	r3, #16
 80076e4:	d111      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e6:	4b77      	ldr	r3, [pc, #476]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	4a76      	ldr	r2, [pc, #472]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076f2:	e011      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	3308      	adds	r3, #8
 80076fa:	2102      	movs	r1, #2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 f997 	bl	8009a30 <RCCEx_PLL2_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007708:	e006      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007718:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007720:	4b68      	ldr	r3, [pc, #416]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007724:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	4a65      	ldr	r2, [pc, #404]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007730:	430b      	orrs	r3, r1
 8007732:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800773a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800774a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007754:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d051      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007768:	d035      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800776a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800776e:	d82e      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007770:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007774:	d031      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800777a:	d828      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800777c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007780:	d01a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007786:	d822      	bhi.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007790:	d007      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007792:	e01c      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b4b      	ldr	r3, [pc, #300]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a4a      	ldr	r2, [pc, #296]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077a0:	e01c      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a6:	3308      	adds	r3, #8
 80077a8:	2100      	movs	r1, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f002 f940 	bl	8009a30 <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077b6:	e011      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077bc:	3328      	adds	r3, #40	; 0x28
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f002 f9e7 	bl	8009b94 <RCCEx_PLL3_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077d4:	e002      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10a      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077e4:	4b37      	ldr	r3, [pc, #220]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f2:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6513      	str	r3, [r2, #80]	; 0x50
 80077f8:	e003      	b.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800780e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007818:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800781c:	460b      	mov	r3, r1
 800781e:	4313      	orrs	r3, r2
 8007820:	d056      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800782c:	d033      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800782e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007832:	d82c      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007838:	d02f      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800783a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800783e:	d826      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007844:	d02b      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800784a:	d820      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800784c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007850:	d012      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007856:	d81a      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007860:	d115      	bne.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007866:	3308      	adds	r3, #8
 8007868:	2101      	movs	r1, #1
 800786a:	4618      	mov	r0, r3
 800786c:	f002 f8e0 	bl	8009a30 <RCCEx_PLL2_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007876:	e015      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787c:	3328      	adds	r3, #40	; 0x28
 800787e:	2101      	movs	r1, #1
 8007880:	4618      	mov	r0, r3
 8007882:	f002 f987 	bl	8009b94 <RCCEx_PLL3_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800788c:	e00a      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007894:	e006      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ba:	4a02      	ldr	r2, [pc, #8]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078bc:	430b      	orrs	r3, r1
 80078be:	6513      	str	r3, [r2, #80]	; 0x50
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078c2:	bf00      	nop
 80078c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80078dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80078e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	d055      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078fc:	d033      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007902:	d82c      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007908:	d02f      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800790a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790e:	d826      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007914:	d02b      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007916:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800791a:	d820      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800791c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007920:	d012      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007926:	d81a      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d022      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800792c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007930:	d115      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007936:	3308      	adds	r3, #8
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f002 f878 	bl	8009a30 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007946:	e015      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794c:	3328      	adds	r3, #40	; 0x28
 800794e:	2101      	movs	r1, #1
 8007950:	4618      	mov	r0, r3
 8007952:	f002 f91f 	bl	8009b94 <RCCEx_PLL3_Config>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800795c:	e00a      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007964:	e006      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007966:	bf00      	nop
 8007968:	e004      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800796a:	bf00      	nop
 800796c:	e002      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800796e:	bf00      	nop
 8007970:	e000      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800797c:	4ba3      	ldr	r3, [pc, #652]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800797e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007980:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800798c:	4a9f      	ldr	r2, [pc, #636]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800798e:	430b      	orrs	r3, r1
 8007990:	6593      	str	r3, [r2, #88]	; 0x58
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007998:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80079a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	d037      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c6:	d00e      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079cc:	d816      	bhi.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d018      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079d6:	d111      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079d8:	4b8c      	ldr	r3, [pc, #560]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079dc:	4a8b      	ldr	r2, [pc, #556]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079e4:	e00f      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ea:	3308      	adds	r3, #8
 80079ec:	2101      	movs	r1, #1
 80079ee:	4618      	mov	r0, r3
 80079f0:	f002 f81e 	bl	8009a30 <RCCEx_PLL2_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079fa:	e004      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a02:	e000      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a0e:	4b7f      	ldr	r3, [pc, #508]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a12:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	4a7b      	ldr	r2, [pc, #492]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	6513      	str	r3, [r2, #80]	; 0x50
 8007a22:	e003      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	d039      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d81c      	bhi.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a99 	.word	0x08007a99
 8007a60:	08007a6d 	.word	0x08007a6d
 8007a64:	08007a7b 	.word	0x08007a7b
 8007a68:	08007a99 	.word	0x08007a99
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a6c:	4b67      	ldr	r3, [pc, #412]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	4a66      	ldr	r2, [pc, #408]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a78:	e00f      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7e:	3308      	adds	r3, #8
 8007a80:	2102      	movs	r1, #2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 ffd4 	bl	8009a30 <RCCEx_PLL2_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a8e:	e004      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a96:	e000      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10a      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007aa2:	4b5a      	ldr	r3, [pc, #360]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa6:	f023 0103 	bic.w	r1, r3, #3
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab0:	4a56      	ldr	r2, [pc, #344]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ab6:	e003      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007abc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ad6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f000 809f 	beq.w	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a4a      	ldr	r2, [pc, #296]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aee:	f7fa fbdd 	bl	80022ac <HAL_GetTick>
 8007af2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af6:	e00b      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af8:	f7fa fbd8 	bl	80022ac <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b64      	cmp	r3, #100	; 0x64
 8007b06:	d903      	bls.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b0e:	e005      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b10:	4b3f      	ldr	r3, [pc, #252]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0ed      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d179      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b24:	4b39      	ldr	r3, [pc, #228]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b30:	4053      	eors	r3, r2
 8007b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d015      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b3a:	4b34      	ldr	r3, [pc, #208]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b46:	4b31      	ldr	r3, [pc, #196]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a30      	ldr	r2, [pc, #192]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b52:	4b2e      	ldr	r3, [pc, #184]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a2d      	ldr	r2, [pc, #180]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b5e:	4a2b      	ldr	r2, [pc, #172]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b72:	d118      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fa fb9a 	bl	80022ac <HAL_GetTick>
 8007b78:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b7c:	e00d      	b.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fa fb95 	bl	80022ac <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b88:	1ad2      	subs	r2, r2, r3
 8007b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d903      	bls.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007b98:	e005      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b9a:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0eb      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d129      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bbe:	d10e      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bd0:	091a      	lsrs	r2, r3, #4
 8007bd2:	4b10      	ldr	r3, [pc, #64]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	4a0d      	ldr	r2, [pc, #52]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6113      	str	r3, [r2, #16]
 8007bdc:	e005      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007bde:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007be8:	6113      	str	r3, [r2, #16]
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bfa:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007c00:	e00e      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007c0a:	e009      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	58024800 	.word	0x58024800
 8007c14:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f002 0301 	and.w	r3, r2, #1
 8007c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f000 8089 	beq.w	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c48:	2b28      	cmp	r3, #40	; 0x28
 8007c4a:	d86b      	bhi.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007d2d 	.word	0x08007d2d
 8007c58:	08007d25 	.word	0x08007d25
 8007c5c:	08007d25 	.word	0x08007d25
 8007c60:	08007d25 	.word	0x08007d25
 8007c64:	08007d25 	.word	0x08007d25
 8007c68:	08007d25 	.word	0x08007d25
 8007c6c:	08007d25 	.word	0x08007d25
 8007c70:	08007d25 	.word	0x08007d25
 8007c74:	08007cf9 	.word	0x08007cf9
 8007c78:	08007d25 	.word	0x08007d25
 8007c7c:	08007d25 	.word	0x08007d25
 8007c80:	08007d25 	.word	0x08007d25
 8007c84:	08007d25 	.word	0x08007d25
 8007c88:	08007d25 	.word	0x08007d25
 8007c8c:	08007d25 	.word	0x08007d25
 8007c90:	08007d25 	.word	0x08007d25
 8007c94:	08007d0f 	.word	0x08007d0f
 8007c98:	08007d25 	.word	0x08007d25
 8007c9c:	08007d25 	.word	0x08007d25
 8007ca0:	08007d25 	.word	0x08007d25
 8007ca4:	08007d25 	.word	0x08007d25
 8007ca8:	08007d25 	.word	0x08007d25
 8007cac:	08007d25 	.word	0x08007d25
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d2d 	.word	0x08007d2d
 8007cb8:	08007d25 	.word	0x08007d25
 8007cbc:	08007d25 	.word	0x08007d25
 8007cc0:	08007d25 	.word	0x08007d25
 8007cc4:	08007d25 	.word	0x08007d25
 8007cc8:	08007d25 	.word	0x08007d25
 8007ccc:	08007d25 	.word	0x08007d25
 8007cd0:	08007d25 	.word	0x08007d25
 8007cd4:	08007d2d 	.word	0x08007d2d
 8007cd8:	08007d25 	.word	0x08007d25
 8007cdc:	08007d25 	.word	0x08007d25
 8007ce0:	08007d25 	.word	0x08007d25
 8007ce4:	08007d25 	.word	0x08007d25
 8007ce8:	08007d25 	.word	0x08007d25
 8007cec:	08007d25 	.word	0x08007d25
 8007cf0:	08007d25 	.word	0x08007d25
 8007cf4:	08007d2d 	.word	0x08007d2d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	2101      	movs	r1, #1
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 fe95 	bl	8009a30 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d0c:	e00f      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	2101      	movs	r1, #1
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 ff3c 	bl	8009b94 <RCCEx_PLL3_Config>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d22:	e004      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d2a:	e000      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d36:	4bbf      	ldr	r3, [pc, #764]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d44:	4abb      	ldr	r2, [pc, #748]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d46:	430b      	orrs	r3, r1
 8007d48:	6553      	str	r3, [r2, #84]	; 0x54
 8007d4a:	e003      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f002 0302 	and.w	r3, r2, #2
 8007d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d64:	2300      	movs	r3, #0
 8007d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4313      	orrs	r3, r2
 8007d72:	d041      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d824      	bhi.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007dd1 	.word	0x08007dd1
 8007d88:	08007d9d 	.word	0x08007d9d
 8007d8c:	08007db3 	.word	0x08007db3
 8007d90:	08007dd1 	.word	0x08007dd1
 8007d94:	08007dd1 	.word	0x08007dd1
 8007d98:	08007dd1 	.word	0x08007dd1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da0:	3308      	adds	r3, #8
 8007da2:	2101      	movs	r1, #1
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fe43 	bl	8009a30 <RCCEx_PLL2_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007db0:	e00f      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	3328      	adds	r3, #40	; 0x28
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 feea 	bl	8009b94 <RCCEx_PLL3_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dc6:	e004      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dce:	e000      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dda:	4b96      	ldr	r3, [pc, #600]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	f023 0107 	bic.w	r1, r3, #7
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de8:	4a92      	ldr	r2, [pc, #584]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6553      	str	r3, [r2, #84]	; 0x54
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f002 0304 	and.w	r3, r2, #4
 8007e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d044      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e20:	2b05      	cmp	r3, #5
 8007e22:	d825      	bhi.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e24:	a201      	add	r2, pc, #4	; (adr r2, 8007e2c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e79 	.word	0x08007e79
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e5b 	.word	0x08007e5b
 8007e38:	08007e79 	.word	0x08007e79
 8007e3c:	08007e79 	.word	0x08007e79
 8007e40:	08007e79 	.word	0x08007e79
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e48:	3308      	adds	r3, #8
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fdef 	bl	8009a30 <RCCEx_PLL2_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e58:	e00f      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5e:	3328      	adds	r3, #40	; 0x28
 8007e60:	2101      	movs	r1, #1
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 fe96 	bl	8009b94 <RCCEx_PLL3_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e6e:	e004      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e76:	e000      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10b      	bne.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e82:	4b6c      	ldr	r3, [pc, #432]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e86:	f023 0107 	bic.w	r1, r3, #7
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e92:	4a68      	ldr	r2, [pc, #416]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e94:	430b      	orrs	r3, r1
 8007e96:	6593      	str	r3, [r2, #88]	; 0x58
 8007e98:	e003      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f002 0320 	and.w	r3, r2, #32
 8007eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	d055      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ece:	d033      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ed4:	d82c      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eda:	d02f      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee0:	d826      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ee6:	d02b      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007eec:	d820      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef2:	d012      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d81a      	bhi.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d022      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f02:	d115      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	3308      	adds	r3, #8
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 fd8f 	bl	8009a30 <RCCEx_PLL2_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f18:	e015      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f1e:	3328      	adds	r3, #40	; 0x28
 8007f20:	2102      	movs	r1, #2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 fe36 	bl	8009b94 <RCCEx_PLL3_Config>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f36:	e006      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f38:	bf00      	nop
 8007f3a:	e004      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10b      	bne.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f4e:	4b39      	ldr	r3, [pc, #228]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f5e:	4a35      	ldr	r2, [pc, #212]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f60:	430b      	orrs	r3, r1
 8007f62:	6553      	str	r3, [r2, #84]	; 0x54
 8007f64:	e003      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f84:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	d058      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f9a:	d033      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fa0:	d82c      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa6:	d02f      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fac:	d826      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb2:	d02b      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb8:	d820      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	d012      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc4:	d81a      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d022      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fce:	d115      	bne.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fd29 	bl	8009a30 <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e015      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fea:	3328      	adds	r3, #40	; 0x28
 8007fec:	2102      	movs	r1, #2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fdd0 	bl	8009b94 <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e00a      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008002:	e006      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008004:	bf00      	nop
 8008006:	e004      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008008:	bf00      	nop
 800800a:	e002      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800800c:	bf00      	nop
 800800e:	e000      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10e      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800801a:	4b06      	ldr	r3, [pc, #24]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800802a:	4a02      	ldr	r2, [pc, #8]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800802c:	430b      	orrs	r3, r1
 800802e:	6593      	str	r3, [r2, #88]	; 0x58
 8008030:	e006      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800804c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008056:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800805a:	460b      	mov	r3, r1
 800805c:	4313      	orrs	r3, r2
 800805e:	d055      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008068:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800806c:	d033      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800806e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008072:	d82c      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008078:	d02f      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800807a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807e:	d826      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008080:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008084:	d02b      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008086:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800808a:	d820      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800808c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008090:	d012      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008092:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008096:	d81a      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008098:	2b00      	cmp	r3, #0
 800809a:	d022      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800809c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a0:	d115      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a6:	3308      	adds	r3, #8
 80080a8:	2100      	movs	r1, #0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 fcc0 	bl	8009a30 <RCCEx_PLL2_Config>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080b6:	e015      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080bc:	3328      	adds	r3, #40	; 0x28
 80080be:	2102      	movs	r1, #2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fd67 	bl	8009b94 <RCCEx_PLL3_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080cc:	e00a      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080d4:	e006      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080d6:	bf00      	nop
 80080d8:	e004      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080da:	bf00      	nop
 80080dc:	e002      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080de:	bf00      	nop
 80080e0:	e000      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10b      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080ec:	4ba1      	ldr	r3, [pc, #644]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80080f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080fc:	4a9d      	ldr	r2, [pc, #628]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fe:	430b      	orrs	r3, r1
 8008100:	6593      	str	r3, [r2, #88]	; 0x58
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f002 0308 	and.w	r3, r2, #8
 8008118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008122:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008126:	460b      	mov	r3, r1
 8008128:	4313      	orrs	r3, r2
 800812a:	d01e      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008138:	d10c      	bne.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800813a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800813e:	3328      	adds	r3, #40	; 0x28
 8008140:	2102      	movs	r1, #2
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fd26 	bl	8009b94 <RCCEx_PLL3_Config>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008154:	4b87      	ldr	r3, [pc, #540]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008158:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800815c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008164:	4a83      	ldr	r2, [pc, #524]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008166:	430b      	orrs	r3, r1
 8008168:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800816a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	f002 0310 	and.w	r3, r2, #16
 8008176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800817a:	2300      	movs	r3, #0
 800817c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008180:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008184:	460b      	mov	r3, r1
 8008186:	4313      	orrs	r3, r2
 8008188:	d01e      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800818a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	d10c      	bne.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819c:	3328      	adds	r3, #40	; 0x28
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 fcf7 	bl	8009b94 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081b2:	4b70      	ldr	r3, [pc, #448]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081c2:	4a6c      	ldr	r2, [pc, #432]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081c4:	430b      	orrs	r3, r1
 80081c6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80081d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081d8:	2300      	movs	r3, #0
 80081da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d03e      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f4:	d022      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081fa:	d81b      	bhi.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d00b      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008206:	e015      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820c:	3308      	adds	r3, #8
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f001 fc0d 	bl	8009a30 <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800821c:	e00f      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800821e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008222:	3328      	adds	r3, #40	; 0x28
 8008224:	2102      	movs	r1, #2
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fcb4 	bl	8009b94 <RCCEx_PLL3_Config>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800823c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008246:	4b4b      	ldr	r3, [pc, #300]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008256:	4a47      	ldr	r2, [pc, #284]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6593      	str	r3, [r2, #88]	; 0x58
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008272:	67bb      	str	r3, [r7, #120]	; 0x78
 8008274:	2300      	movs	r3, #0
 8008276:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008278:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800827c:	460b      	mov	r3, r1
 800827e:	4313      	orrs	r3, r2
 8008280:	d03b      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800828a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800828e:	d01f      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008290:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008294:	d818      	bhi.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800829a:	d003      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800829c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082a0:	d007      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082a2:	e011      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a4:	4b33      	ldr	r3, [pc, #204]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a32      	ldr	r2, [pc, #200]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082b0:	e00f      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b6:	3328      	adds	r3, #40	; 0x28
 80082b8:	2101      	movs	r1, #1
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fc6a 	bl	8009b94 <RCCEx_PLL3_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082c6:	e004      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082ce:	e000      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082da:	4b26      	ldr	r3, [pc, #152]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ea:	4a22      	ldr	r2, [pc, #136]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6553      	str	r3, [r2, #84]	; 0x54
 80082f0:	e003      	b.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008306:	673b      	str	r3, [r7, #112]	; 0x70
 8008308:	2300      	movs	r3, #0
 800830a:	677b      	str	r3, [r7, #116]	; 0x74
 800830c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d034      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008324:	d007      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008326:	e011      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008328:	4b12      	ldr	r3, [pc, #72]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	4a11      	ldr	r2, [pc, #68]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008334:	e00e      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833a:	3308      	adds	r3, #8
 800833c:	2102      	movs	r1, #2
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fb76 	bl	8009a30 <RCCEx_PLL2_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800834a:	e003      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008354:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800835e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	4a02      	ldr	r2, [pc, #8]	; (8008374 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836c:	430b      	orrs	r3, r1
 800836e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008370:	e006      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008372:	bf00      	nop
 8008374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800838c:	66bb      	str	r3, [r7, #104]	; 0x68
 800838e:	2300      	movs	r3, #0
 8008390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008392:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008396:	460b      	mov	r3, r1
 8008398:	4313      	orrs	r3, r2
 800839a:	d00c      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	3328      	adds	r3, #40	; 0x28
 80083a2:	2102      	movs	r1, #2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 fbf5 	bl	8009b94 <RCCEx_PLL3_Config>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80083c2:	663b      	str	r3, [r7, #96]	; 0x60
 80083c4:	2300      	movs	r3, #0
 80083c6:	667b      	str	r3, [r7, #100]	; 0x64
 80083c8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80083cc:	460b      	mov	r3, r1
 80083ce:	4313      	orrs	r3, r2
 80083d0:	d038      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083de:	d018      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80083e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083e4:	d811      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ea:	d014      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f0:	d80b      	bhi.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d011      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fa:	d106      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083fc:	4bc3      	ldr	r3, [pc, #780]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	4ac2      	ldr	r2, [pc, #776]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008408:	e008      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800841a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10b      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008424:	4bb9      	ldr	r3, [pc, #740]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008434:	4ab5      	ldr	r2, [pc, #724]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008436:	430b      	orrs	r3, r1
 8008438:	6553      	str	r3, [r2, #84]	; 0x54
 800843a:	e003      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008440:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008450:	65bb      	str	r3, [r7, #88]	; 0x58
 8008452:	2300      	movs	r3, #0
 8008454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008456:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800845a:	460b      	mov	r3, r1
 800845c:	4313      	orrs	r3, r2
 800845e:	d009      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008460:	4baa      	ldr	r3, [pc, #680]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846e:	4aa7      	ldr	r2, [pc, #668]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008470:	430b      	orrs	r3, r1
 8008472:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008480:	653b      	str	r3, [r7, #80]	; 0x50
 8008482:	2300      	movs	r3, #0
 8008484:	657b      	str	r3, [r7, #84]	; 0x54
 8008486:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800848a:	460b      	mov	r3, r1
 800848c:	4313      	orrs	r3, r2
 800848e:	d00a      	beq.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008490:	4b9e      	ldr	r3, [pc, #632]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084a0:	4a9a      	ldr	r2, [pc, #616]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a2:	430b      	orrs	r3, r1
 80084a4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80084b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b4:	2300      	movs	r3, #0
 80084b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80084bc:	460b      	mov	r3, r1
 80084be:	4313      	orrs	r3, r2
 80084c0:	d009      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084c2:	4b92      	ldr	r3, [pc, #584]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d0:	4a8e      	ldr	r2, [pc, #568]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80084e2:	643b      	str	r3, [r7, #64]	; 0x40
 80084e4:	2300      	movs	r3, #0
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
 80084e8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80084ec:	460b      	mov	r3, r1
 80084ee:	4313      	orrs	r3, r2
 80084f0:	d00e      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084f2:	4b86      	ldr	r3, [pc, #536]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	4a85      	ldr	r2, [pc, #532]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084fc:	6113      	str	r3, [r2, #16]
 80084fe:	4b83      	ldr	r3, [pc, #524]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008500:	6919      	ldr	r1, [r3, #16]
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800850a:	4a80      	ldr	r2, [pc, #512]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800850c:	430b      	orrs	r3, r1
 800850e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008518:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800851c:	63bb      	str	r3, [r7, #56]	; 0x38
 800851e:	2300      	movs	r3, #0
 8008520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008522:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008526:	460b      	mov	r3, r1
 8008528:	4313      	orrs	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800852c:	4b77      	ldr	r3, [pc, #476]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008530:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	4a74      	ldr	r2, [pc, #464]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853c:	430b      	orrs	r3, r1
 800853e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800854c:	633b      	str	r3, [r7, #48]	; 0x30
 800854e:	2300      	movs	r3, #0
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
 8008552:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d00a      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800855c:	4b6b      	ldr	r3, [pc, #428]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856c:	4a67      	ldr	r2, [pc, #412]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800856e:	430b      	orrs	r3, r1
 8008570:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	2100      	movs	r1, #0
 800857c:	62b9      	str	r1, [r7, #40]	; 0x28
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008584:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008588:	460b      	mov	r3, r1
 800858a:	4313      	orrs	r3, r2
 800858c:	d011      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800858e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008592:	3308      	adds	r3, #8
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fa4a 	bl	8009a30 <RCCEx_PLL2_Config>
 800859c:	4603      	mov	r3, r0
 800859e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	2100      	movs	r1, #0
 80085bc:	6239      	str	r1, [r7, #32]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
 80085c4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085c8:	460b      	mov	r3, r1
 80085ca:	4313      	orrs	r3, r2
 80085cc:	d011      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2101      	movs	r1, #1
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fa2a 	bl	8009a30 <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	2100      	movs	r1, #0
 80085fc:	61b9      	str	r1, [r7, #24]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	61fb      	str	r3, [r7, #28]
 8008604:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008608:	460b      	mov	r3, r1
 800860a:	4313      	orrs	r3, r2
 800860c:	d011      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008612:	3308      	adds	r3, #8
 8008614:	2102      	movs	r1, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fa0a 	bl	8009a30 <RCCEx_PLL2_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800862e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	2100      	movs	r1, #0
 800863c:	6139      	str	r1, [r7, #16]
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008648:	460b      	mov	r3, r1
 800864a:	4313      	orrs	r3, r2
 800864c:	d011      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008652:	3328      	adds	r3, #40	; 0x28
 8008654:	2100      	movs	r1, #0
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fa9c 	bl	8009b94 <RCCEx_PLL3_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	2100      	movs	r1, #0
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d011      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008692:	3328      	adds	r3, #40	; 0x28
 8008694:	2101      	movs	r1, #1
 8008696:	4618      	mov	r0, r3
 8008698:	f001 fa7c 	bl	8009b94 <RCCEx_PLL3_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d003      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	2100      	movs	r1, #0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	607b      	str	r3, [r7, #4]
 80086c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d011      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086d2:	3328      	adds	r3, #40	; 0x28
 80086d4:	2102      	movs	r1, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fa5c 	bl	8009b94 <RCCEx_PLL3_Config>
 80086dc:	4603      	mov	r3, r0
 80086de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80086f2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e000      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
}
 8008700:	4618      	mov	r0, r3
 8008702:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008706:	46bd      	mov	sp, r7
 8008708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870c:	58024400 	.word	0x58024400

08008710 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b090      	sub	sp, #64	; 0x40
 8008714:	af00      	add	r7, sp, #0
 8008716:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800871a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800871e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008722:	430b      	orrs	r3, r1
 8008724:	f040 8094 	bne.w	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008728:	4b9e      	ldr	r3, [pc, #632]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800872a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872c:	f003 0307 	and.w	r3, r3, #7
 8008730:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	2b04      	cmp	r3, #4
 8008736:	f200 8087 	bhi.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008755 	.word	0x08008755
 8008744:	0800877d 	.word	0x0800877d
 8008748:	080087a5 	.word	0x080087a5
 800874c:	08008841 	.word	0x08008841
 8008750:	080087cd 	.word	0x080087cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008754:	4b93      	ldr	r3, [pc, #588]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008760:	d108      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008766:	4618      	mov	r0, r3
 8008768:	f001 f810 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008770:	f000 bd45 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008778:	f000 bd41 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800877c:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008788:	d108      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0318 	add.w	r3, r7, #24
 800878e:	4618      	mov	r0, r3
 8008790:	f000 fd54 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008798:	f000 bd31 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a0:	f000 bd2d 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087a4:	4b7f      	ldr	r3, [pc, #508]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b0:	d108      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087b2:	f107 030c 	add.w	r3, r7, #12
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fe94 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c0:	f000 bd1d 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c8:	f000 bd19 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087cc:	4b75      	ldr	r3, [pc, #468]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087d6:	4b73      	ldr	r3, [pc, #460]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0304 	and.w	r3, r3, #4
 80087de:	2b04      	cmp	r3, #4
 80087e0:	d10c      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e8:	4b6e      	ldr	r3, [pc, #440]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	08db      	lsrs	r3, r3, #3
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	4a6d      	ldr	r2, [pc, #436]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087fa:	e01f      	b.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087fc:	4b69      	ldr	r3, [pc, #420]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008808:	d106      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008810:	d102      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008812:	4b66      	ldr	r3, [pc, #408]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008816:	e011      	b.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008818:	4b62      	ldr	r3, [pc, #392]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008824:	d106      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882c:	d102      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800882e:	4b60      	ldr	r3, [pc, #384]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008832:	e003      	b.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008834:	2300      	movs	r3, #0
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008838:	f000 bce1 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800883c:	f000 bcdf 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008840:	4b5c      	ldr	r3, [pc, #368]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	f000 bcdb 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800884c:	f000 bcd7 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008854:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008858:	430b      	orrs	r3, r1
 800885a:	f040 80ad 	bne.w	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800885e:	4b51      	ldr	r3, [pc, #324]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008862:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008866:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886e:	d056      	beq.n	800891e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008876:	f200 8090 	bhi.w	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	2bc0      	cmp	r3, #192	; 0xc0
 800887e:	f000 8088 	beq.w	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	2bc0      	cmp	r3, #192	; 0xc0
 8008886:	f200 8088 	bhi.w	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	2b80      	cmp	r3, #128	; 0x80
 800888e:	d032      	beq.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	f200 8081 	bhi.w	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d014      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088a4:	e079      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088a6:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b2:	d108      	bne.n	80088c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f000 ff67 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088c2:	f000 bc9c 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ca:	f000 bc98 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088ce:	4b35      	ldr	r3, [pc, #212]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088da:	d108      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088dc:	f107 0318 	add.w	r3, r7, #24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fcab 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ea:	f000 bc88 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ee:	2300      	movs	r3, #0
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f2:	f000 bc84 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088f6:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008902:	d108      	bne.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fdeb 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008912:	f000 bc74 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800891a:	f000 bc70 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800891e:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008926:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008928:	4b1e      	ldr	r3, [pc, #120]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b04      	cmp	r3, #4
 8008932:	d10c      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800893a:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	08db      	lsrs	r3, r3, #3
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	4a18      	ldr	r2, [pc, #96]	; (80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008946:	fa22 f303 	lsr.w	r3, r2, r3
 800894a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894c:	e01f      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800894e:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800895a:	d106      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008962:	d102      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008964:	4b11      	ldr	r3, [pc, #68]	; (80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008968:	e011      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800896a:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008976:	d106      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e003      	b.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800898a:	f000 bc38 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800898e:	f000 bc36 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008992:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008996:	f000 bc32 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800899e:	f000 bc2e 	b.w	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	003d0900 	.word	0x003d0900
 80089b0:	017d7840 	.word	0x017d7840
 80089b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089bc:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089c0:	430b      	orrs	r3, r1
 80089c2:	f040 809c 	bne.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089c6:	4b9e      	ldr	r3, [pc, #632]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80089ce:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089d6:	d054      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089de:	f200 808b 	bhi.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089e8:	f000 8083 	beq.w	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089f2:	f200 8081 	bhi.w	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089fc:	d02f      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80089fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a04:	d878      	bhi.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d004      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a12:	d012      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a14:	e070      	b.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a16:	4b8a      	ldr	r3, [pc, #552]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a22:	d107      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 feaf 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a32:	e3e4      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a38:	e3e1      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a3a:	4b81      	ldr	r3, [pc, #516]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a46:	d107      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a48:	f107 0318 	add.w	r3, r7, #24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fbf5 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a56:	e3d2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5c:	e3cf      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a5e:	4b78      	ldr	r3, [pc, #480]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fd37 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	e3c0      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a80:	e3bd      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a82:	4b6f      	ldr	r3, [pc, #444]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a8c:	4b6c      	ldr	r3, [pc, #432]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d10c      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a9e:	4b68      	ldr	r3, [pc, #416]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	08db      	lsrs	r3, r3, #3
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	4a66      	ldr	r2, [pc, #408]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ab0:	e01e      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ab2:	4b63      	ldr	r3, [pc, #396]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008abe:	d106      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac6:	d102      	bne.n	8008ace <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ac8:	4b5f      	ldr	r3, [pc, #380]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008acc:	e010      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ace:	4b5c      	ldr	r3, [pc, #368]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ae2:	d102      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ae4:	4b59      	ldr	r3, [pc, #356]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae8:	e002      	b.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008aee:	e386      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008af0:	e385      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008af2:	4b57      	ldr	r3, [pc, #348]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008af6:	e382      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008afc:	e37f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b02:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008b06:	430b      	orrs	r3, r1
 8008b08:	f040 80a7 	bne.w	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b0c:	4b4c      	ldr	r3, [pc, #304]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b10:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b1c:	d055      	beq.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b24:	f200 8096 	bhi.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b2e:	f000 8084 	beq.w	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b38:	f200 808c 	bhi.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b42:	d030      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b4a:	f200 8083 	bhi.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b5a:	d012      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b5c:	e07a      	b.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b5e:	4b38      	ldr	r3, [pc, #224]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b6a:	d107      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fe0b 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7a:	e340      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b80:	e33d      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b82:	4b2f      	ldr	r3, [pc, #188]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8e:	d107      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fb51 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9e:	e32e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba4:	e32b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ba6:	4b26      	ldr	r3, [pc, #152]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fc93 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc2:	e31c      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc8:	e319      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bca:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bd4:	4b1a      	ldr	r3, [pc, #104]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0304 	and.w	r3, r3, #4
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be6:	4b16      	ldr	r3, [pc, #88]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	4a14      	ldr	r2, [pc, #80]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf8:	e01e      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bfa:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c06:	d106      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d102      	bne.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c10:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c14:	e010      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c16:	4b0a      	ldr	r3, [pc, #40]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c22:	d106      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c36:	e2e2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c38:	e2e1      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e2de      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	017d7840 	.word	0x017d7840
 8008c50:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c58:	e2d1      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c5e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c62:	430b      	orrs	r3, r1
 8008c64:	f040 809c 	bne.w	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c68:	4b93      	ldr	r3, [pc, #588]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c70:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c78:	d054      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c80:	f200 808b 	bhi.w	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c8a:	f000 8083 	beq.w	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c94:	f200 8081 	bhi.w	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c9e:	d02f      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca6:	d878      	bhi.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb4:	d012      	beq.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008cb6:	e070      	b.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cb8:	4b7f      	ldr	r3, [pc, #508]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fd5e 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cd4:	e293      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cda:	e290      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cdc:	4b76      	ldr	r3, [pc, #472]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cea:	f107 0318 	add.w	r3, r7, #24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 faa4 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf8:	e281      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cfe:	e27e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d00:	4b6d      	ldr	r3, [pc, #436]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0e:	f107 030c 	add.w	r3, r7, #12
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fbe6 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1c:	e26f      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d22:	e26c      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d24:	4b64      	ldr	r3, [pc, #400]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d2e:	4b62      	ldr	r3, [pc, #392]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d10c      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d40:	4b5d      	ldr	r3, [pc, #372]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	4a5c      	ldr	r2, [pc, #368]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d52:	e01e      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d54:	4b58      	ldr	r3, [pc, #352]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d68:	d102      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d6a:	4b55      	ldr	r3, [pc, #340]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6e:	e010      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d70:	4b51      	ldr	r3, [pc, #324]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d7c:	d106      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d84:	d102      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d86:	4b4f      	ldr	r3, [pc, #316]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e002      	b.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d90:	e235      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d92:	e234      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d94:	4b4c      	ldr	r3, [pc, #304]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d98:	e231      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d9e:	e22e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008da8:	430b      	orrs	r3, r1
 8008daa:	f040 808f 	bne.w	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008dae:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008db6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dbe:	d06b      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dc6:	d874      	bhi.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dce:	d056      	beq.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dd6:	d86c      	bhi.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008dde:	d03b      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008de6:	d864      	bhi.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dee:	d021      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008df6:	d85c      	bhi.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d004      	beq.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e04:	d004      	beq.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e06:	e054      	b.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e08:	f7fe fa4c 	bl	80072a4 <HAL_RCC_GetPCLK1Freq>
 8008e0c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e0e:	e1f6      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e10:	4b29      	ldr	r3, [pc, #164]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e1e:	f107 0318 	add.w	r3, r7, #24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 fa0a 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e2c:	e1e7      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e32:	e1e4      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e34:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e40:	d107      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fb4c 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e50:	e1d5      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e56:	e1d2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d109      	bne.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e64:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	08db      	lsrs	r3, r3, #3
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e76:	e1c2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7c:	e1bf      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e8a:	d102      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008e8c:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e90:	e1b5      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e96:	e1b2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e98:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea4:	d102      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008ea6:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eaa:	e1a8      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb0:	e1a5      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb6:	e1a2      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	03d09000 	.word	0x03d09000
 8008ec0:	003d0900 	.word	0x003d0900
 8008ec4:	017d7840 	.word	0x017d7840
 8008ec8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	d173      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008ed8:	4b9c      	ldr	r3, [pc, #624]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ee0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee8:	d02f      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef0:	d863      	bhi.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efe:	d012      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f00:	e05b      	b.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f02:	4b92      	ldr	r3, [pc, #584]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f0e:	d107      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f10:	f107 0318 	add.w	r3, r7, #24
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f991 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f1e:	e16e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f24:	e16b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f26:	4b89      	ldr	r3, [pc, #548]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fad3 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f42:	e15c      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f48:	e159      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f4a:	4b80      	ldr	r3, [pc, #512]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f52:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f54:	4b7d      	ldr	r3, [pc, #500]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d10c      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d109      	bne.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f66:	4b79      	ldr	r3, [pc, #484]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	08db      	lsrs	r3, r3, #3
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	4a77      	ldr	r2, [pc, #476]	; (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f72:	fa22 f303 	lsr.w	r3, r2, r3
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f78:	e01e      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f7a:	4b74      	ldr	r3, [pc, #464]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f86:	d106      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8e:	d102      	bne.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008f90:	4b70      	ldr	r3, [pc, #448]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f94:	e010      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f96:	4b6d      	ldr	r3, [pc, #436]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa2:	d106      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008faa:	d102      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fac:	4b6a      	ldr	r3, [pc, #424]	; (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb0:	e002      	b.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fb6:	e122      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fb8:	e121      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fbe:	e11e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	d133      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008fcc:	4b5f      	ldr	r3, [pc, #380]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d004      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fe2:	d012      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008fe4:	e023      	b.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fe6:	4b59      	ldr	r3, [pc, #356]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ff2:	d107      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f000 fbc7 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009002:	e0fc      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009008:	e0f9      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800900a:	4b50      	ldr	r3, [pc, #320]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009018:	f107 0318 	add.w	r3, r7, #24
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f90d 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009026:	e0ea      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902c:	e0e7      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009032:	e0e4      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009038:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800903c:	430b      	orrs	r3, r1
 800903e:	f040 808d 	bne.w	800915c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009042:	4b42      	ldr	r3, [pc, #264]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800904a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009052:	d06b      	beq.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800905a:	d874      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009062:	d056      	beq.n	8009112 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800906a:	d86c      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800906c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009072:	d03b      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800907a:	d864      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009082:	d021      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800908a:	d85c      	bhi.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009098:	d004      	beq.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800909a:	e054      	b.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800909c:	f000 f8b8 	bl	8009210 <HAL_RCCEx_GetD3PCLK1Freq>
 80090a0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090a2:	e0ac      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090a4:	4b29      	ldr	r3, [pc, #164]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b0:	d107      	bne.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090b2:	f107 0318 	add.w	r3, r7, #24
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f8c0 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090c0:	e09d      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090c6:	e09a      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090c8:	4b20      	ldr	r3, [pc, #128]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090d6:	f107 030c 	add.w	r3, r7, #12
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 fa02 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e4:	e08b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ea:	e088      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80090ec:	4b17      	ldr	r3, [pc, #92]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d109      	bne.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f8:	4b14      	ldr	r3, [pc, #80]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	08db      	lsrs	r3, r3, #3
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	4a13      	ldr	r2, [pc, #76]	; (8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009104:	fa22 f303 	lsr.w	r3, r2, r3
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800910a:	e078      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009110:	e075      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009112:	4b0e      	ldr	r3, [pc, #56]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911e:	d102      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009120:	4b0c      	ldr	r3, [pc, #48]	; (8009154 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009124:	e06b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800912a:	e068      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800912c:	4b07      	ldr	r3, [pc, #28]	; (800914c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009138:	d102      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800913a:	4b07      	ldr	r3, [pc, #28]	; (8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800913c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913e:	e05e      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009144:	e05b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800914a:	e058      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800914c:	58024400 	.word	0x58024400
 8009150:	03d09000 	.word	0x03d09000
 8009154:	003d0900 	.word	0x003d0900
 8009158:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800915c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009160:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009164:	430b      	orrs	r3, r1
 8009166:	d148      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800916a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009170:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009178:	d02a      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009180:	d838      	bhi.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800918e:	d00d      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009190:	e030      	b.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009192:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800919e:	d102      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091a0:	4b1a      	ldr	r3, [pc, #104]	; (800920c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091a4:	e02b      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091aa:	e028      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ac:	4b16      	ldr	r3, [pc, #88]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fae4 	bl	800978c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c8:	e019      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ce:	e016      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091dc:	d107      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091de:	f107 0318 	add.w	r3, r7, #24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f82a 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ec:	e007      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f2:	e004      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f8:	e001      	b.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80091fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009200:	4618      	mov	r0, r3
 8009202:	3740      	adds	r7, #64	; 0x40
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	58024400 	.word	0x58024400
 800920c:	017d7840 	.word	0x017d7840

08009210 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009214:	f7fe f816 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8009218:	4602      	mov	r2, r0
 800921a:	4b06      	ldr	r3, [pc, #24]	; (8009234 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	091b      	lsrs	r3, r3, #4
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	4904      	ldr	r1, [pc, #16]	; (8009238 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009226:	5ccb      	ldrb	r3, [r1, r3]
 8009228:	f003 031f 	and.w	r3, r3, #31
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009230:	4618      	mov	r0, r3
 8009232:	bd80      	pop	{r7, pc}
 8009234:	58024400 	.word	0x58024400
 8009238:	0800da9c 	.word	0x0800da9c

0800923c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800923c:	b480      	push	{r7}
 800923e:	b089      	sub	sp, #36	; 0x24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009244:	4ba1      	ldr	r3, [pc, #644]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800924e:	4b9f      	ldr	r3, [pc, #636]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	0b1b      	lsrs	r3, r3, #12
 8009254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009258:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800925a:	4b9c      	ldr	r3, [pc, #624]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800925c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925e:	091b      	lsrs	r3, r3, #4
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009266:	4b99      	ldr	r3, [pc, #612]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926a:	08db      	lsrs	r3, r3, #3
 800926c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	fb02 f303 	mul.w	r3, r2, r3
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 8111 	beq.w	80094ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b02      	cmp	r3, #2
 800928e:	f000 8083 	beq.w	8009398 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	2b02      	cmp	r3, #2
 8009296:	f200 80a1 	bhi.w	80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d056      	beq.n	8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092a6:	e099      	b.n	80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a8:	4b88      	ldr	r3, [pc, #544]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d02d      	beq.n	8009310 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092b4:	4b85      	ldr	r3, [pc, #532]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	08db      	lsrs	r3, r3, #3
 80092ba:	f003 0303 	and.w	r3, r3, #3
 80092be:	4a84      	ldr	r2, [pc, #528]	; (80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092c0:	fa22 f303 	lsr.w	r3, r2, r3
 80092c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092de:	4b7b      	ldr	r3, [pc, #492]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e6:	ee07 3a90 	vmov	s15, r3
 80092ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80092f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800930e:	e087      	b.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	ee07 3a90 	vmov	s15, r3
 8009316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800931e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009322:	4b6a      	ldr	r3, [pc, #424]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009332:	ed97 6a03 	vldr	s12, [r7, #12]
 8009336:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800933a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009352:	e065      	b.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009366:	4b59      	ldr	r3, [pc, #356]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009376:	ed97 6a03 	vldr	s12, [r7, #12]
 800937a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800937e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009396:	e043      	b.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b48      	ldr	r3, [pc, #288]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80093be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093da:	e021      	b.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b37      	ldr	r3, [pc, #220]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009402:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009420:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	0a5b      	lsrs	r3, r3, #9
 8009426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800943a:	edd7 6a07 	vldr	s13, [r7, #28]
 800943e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009446:	ee17 2a90 	vmov	r2, s15
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800944e:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	0c1b      	lsrs	r3, r3, #16
 8009454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009458:	ee07 3a90 	vmov	s15, r3
 800945c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009468:	edd7 6a07 	vldr	s13, [r7, #28]
 800946c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009474:	ee17 2a90 	vmov	r2, s15
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800947c:	4b13      	ldr	r3, [pc, #76]	; (80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	0e1b      	lsrs	r3, r3, #24
 8009482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009496:	edd7 6a07 	vldr	s13, [r7, #28]
 800949a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800949e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a2:	ee17 2a90 	vmov	r2, s15
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094aa:	e008      	b.n	80094be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	609a      	str	r2, [r3, #8]
}
 80094be:	bf00      	nop
 80094c0:	3724      	adds	r7, #36	; 0x24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	58024400 	.word	0x58024400
 80094d0:	03d09000 	.word	0x03d09000
 80094d4:	46000000 	.word	0x46000000
 80094d8:	4c742400 	.word	0x4c742400
 80094dc:	4a742400 	.word	0x4a742400
 80094e0:	4bbebc20 	.word	0x4bbebc20

080094e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b089      	sub	sp, #36	; 0x24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094ec:	4ba1      	ldr	r3, [pc, #644]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80094f6:	4b9f      	ldr	r3, [pc, #636]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fa:	0d1b      	lsrs	r3, r3, #20
 80094fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009500:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009502:	4b9c      	ldr	r3, [pc, #624]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800950e:	4b99      	ldr	r3, [pc, #612]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	08db      	lsrs	r3, r3, #3
 8009514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 8111 	beq.w	8009754 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b02      	cmp	r3, #2
 8009536:	f000 8083 	beq.w	8009640 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b02      	cmp	r3, #2
 800953e:	f200 80a1 	bhi.w	8009684 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d056      	beq.n	80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800954e:	e099      	b.n	8009684 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009550:	4b88      	ldr	r3, [pc, #544]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0320 	and.w	r3, r3, #32
 8009558:	2b00      	cmp	r3, #0
 800955a:	d02d      	beq.n	80095b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800955c:	4b85      	ldr	r3, [pc, #532]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	08db      	lsrs	r3, r3, #3
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	4a84      	ldr	r2, [pc, #528]	; (8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	ee07 3a90 	vmov	s15, r3
 8009574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009586:	4b7b      	ldr	r3, [pc, #492]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	ed97 6a03 	vldr	s12, [r7, #12]
 800959a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800959e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095b6:	e087      	b.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009780 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b6a      	ldr	r3, [pc, #424]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a03 	vldr	s12, [r7, #12]
 80095de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095fa:	e065      	b.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b59      	ldr	r3, [pc, #356]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009622:	eddf 5a56 	vldr	s11, [pc, #344]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963e:	e043      	b.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b48      	ldr	r3, [pc, #288]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a03 	vldr	s12, [r7, #12]
 8009666:	eddf 5a45 	vldr	s11, [pc, #276]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009682:	e021      	b.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009784 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b37      	ldr	r3, [pc, #220]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800977c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096c8:	4b2a      	ldr	r3, [pc, #168]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096cc:	0a5b      	lsrs	r3, r3, #9
 80096ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ee:	ee17 2a90 	vmov	r2, s15
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80096f6:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800970c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009710:	edd7 6a07 	vldr	s13, [r7, #28]
 8009714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971c:	ee17 2a90 	vmov	r2, s15
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009724:	4b13      	ldr	r3, [pc, #76]	; (8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	0e1b      	lsrs	r3, r3, #24
 800972a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800973a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974a:	ee17 2a90 	vmov	r2, s15
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009752:	e008      	b.n	8009766 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	609a      	str	r2, [r3, #8]
}
 8009766:	bf00      	nop
 8009768:	3724      	adds	r7, #36	; 0x24
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	58024400 	.word	0x58024400
 8009778:	03d09000 	.word	0x03d09000
 800977c:	46000000 	.word	0x46000000
 8009780:	4c742400 	.word	0x4c742400
 8009784:	4a742400 	.word	0x4a742400
 8009788:	4bbebc20 	.word	0x4bbebc20

0800978c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800978c:	b480      	push	{r7}
 800978e:	b089      	sub	sp, #36	; 0x24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009794:	4ba0      	ldr	r3, [pc, #640]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	f003 0303 	and.w	r3, r3, #3
 800979c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800979e:	4b9e      	ldr	r3, [pc, #632]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097aa:	4b9b      	ldr	r3, [pc, #620]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097b4:	4b98      	ldr	r3, [pc, #608]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b8:	08db      	lsrs	r3, r3, #3
 80097ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	fb02 f303 	mul.w	r3, r2, r3
 80097c4:	ee07 3a90 	vmov	s15, r3
 80097c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8111 	beq.w	80099fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b02      	cmp	r3, #2
 80097dc:	f000 8083 	beq.w	80098e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	f200 80a1 	bhi.w	800992a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d056      	beq.n	80098a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80097f4:	e099      	b.n	800992a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097f6:	4b88      	ldr	r3, [pc, #544]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d02d      	beq.n	800985e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009802:	4b85      	ldr	r3, [pc, #532]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	08db      	lsrs	r3, r3, #3
 8009808:	f003 0303 	and.w	r3, r3, #3
 800980c:	4a83      	ldr	r2, [pc, #524]	; (8009a1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800980e:	fa22 f303 	lsr.w	r3, r2, r3
 8009812:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009828:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982c:	4b7a      	ldr	r3, [pc, #488]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800982e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009834:	ee07 3a90 	vmov	s15, r3
 8009838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009840:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009844:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009848:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009858:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800985c:	e087      	b.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	ee07 3a90 	vmov	s15, r3
 8009864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009868:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800986c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009870:	4b69      	ldr	r3, [pc, #420]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009880:	ed97 6a03 	vldr	s12, [r7, #12]
 8009884:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098a0:	e065      	b.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b4:	4b58      	ldr	r3, [pc, #352]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098bc:	ee07 3a90 	vmov	s15, r3
 80098c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098e4:	e043      	b.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80098f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f8:	4b47      	ldr	r3, [pc, #284]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009908:	ed97 6a03 	vldr	s12, [r7, #12]
 800990c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009924:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009928:	e021      	b.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009934:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993c:	4b36      	ldr	r3, [pc, #216]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009950:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800996e:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009978:	ee07 3a90 	vmov	s15, r3
 800997c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009984:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009988:	edd7 6a07 	vldr	s13, [r7, #28]
 800998c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009994:	ee17 2a90 	vmov	r2, s15
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800999c:	4b1e      	ldr	r3, [pc, #120]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800999e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a0:	0c1b      	lsrs	r3, r3, #16
 80099a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099c2:	ee17 2a90 	vmov	r2, s15
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ce:	0e1b      	lsrs	r3, r3, #24
 80099d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d4:	ee07 3a90 	vmov	s15, r3
 80099d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80099e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f0:	ee17 2a90 	vmov	r2, s15
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80099f8:	e008      	b.n	8009a0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	609a      	str	r2, [r3, #8]
}
 8009a0c:	bf00      	nop
 8009a0e:	3724      	adds	r7, #36	; 0x24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	58024400 	.word	0x58024400
 8009a1c:	03d09000 	.word	0x03d09000
 8009a20:	46000000 	.word	0x46000000
 8009a24:	4c742400 	.word	0x4c742400
 8009a28:	4a742400 	.word	0x4a742400
 8009a2c:	4bbebc20 	.word	0x4bbebc20

08009a30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a3e:	4b53      	ldr	r3, [pc, #332]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d101      	bne.n	8009a4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e099      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a4e:	4b4f      	ldr	r3, [pc, #316]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a4e      	ldr	r2, [pc, #312]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5a:	f7f8 fc27 	bl	80022ac <HAL_GetTick>
 8009a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a60:	e008      	b.n	8009a74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a62:	f7f8 fc23 	bl	80022ac <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d901      	bls.n	8009a74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e086      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a74:	4b45      	ldr	r3, [pc, #276]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1f0      	bne.n	8009a62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a80:	4b42      	ldr	r3, [pc, #264]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	031b      	lsls	r3, r3, #12
 8009a8e:	493f      	ldr	r1, [pc, #252]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	628b      	str	r3, [r1, #40]	; 0x28
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	025b      	lsls	r3, r3, #9
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	041b      	lsls	r3, r3, #16
 8009ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	061b      	lsls	r3, r3, #24
 8009ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ac4:	4931      	ldr	r1, [pc, #196]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009aca:	4b30      	ldr	r3, [pc, #192]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	492d      	ldr	r1, [pc, #180]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009adc:	4b2b      	ldr	r3, [pc, #172]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	f023 0220 	bic.w	r2, r3, #32
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	4928      	ldr	r1, [pc, #160]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009aee:	4b27      	ldr	r3, [pc, #156]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	4a26      	ldr	r2, [pc, #152]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009af4:	f023 0310 	bic.w	r3, r3, #16
 8009af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009afa:	4b24      	ldr	r3, [pc, #144]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009afe:	4b24      	ldr	r3, [pc, #144]	; (8009b90 <RCCEx_PLL2_Config+0x160>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	69d2      	ldr	r2, [r2, #28]
 8009b06:	00d2      	lsls	r2, r2, #3
 8009b08:	4920      	ldr	r1, [pc, #128]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b12:	4a1e      	ldr	r2, [pc, #120]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b14:	f043 0310 	orr.w	r3, r3, #16
 8009b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d106      	bne.n	8009b2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b20:	4b1a      	ldr	r3, [pc, #104]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a19      	ldr	r2, [pc, #100]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b2c:	e00f      	b.n	8009b4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d106      	bne.n	8009b42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b34:	4b15      	ldr	r3, [pc, #84]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4a14      	ldr	r2, [pc, #80]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b40:	e005      	b.n	8009b4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b42:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	4a11      	ldr	r2, [pc, #68]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a0e      	ldr	r2, [pc, #56]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b5a:	f7f8 fba7 	bl	80022ac <HAL_GetTick>
 8009b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b60:	e008      	b.n	8009b74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b62:	f7f8 fba3 	bl	80022ac <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d901      	bls.n	8009b74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e006      	b.n	8009b82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b74:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <RCCEx_PLL2_Config+0x15c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0f0      	beq.n	8009b62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	ffff0007 	.word	0xffff0007

08009b94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ba2:	4b53      	ldr	r3, [pc, #332]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba6:	f003 0303 	and.w	r3, r3, #3
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d101      	bne.n	8009bb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e099      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bb2:	4b4f      	ldr	r3, [pc, #316]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a4e      	ldr	r2, [pc, #312]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bbe:	f7f8 fb75 	bl	80022ac <HAL_GetTick>
 8009bc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bc4:	e008      	b.n	8009bd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bc6:	f7f8 fb71 	bl	80022ac <HAL_GetTick>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d901      	bls.n	8009bd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e086      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bd8:	4b45      	ldr	r3, [pc, #276]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f0      	bne.n	8009bc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009be4:	4b42      	ldr	r3, [pc, #264]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	051b      	lsls	r3, r3, #20
 8009bf2:	493f      	ldr	r1, [pc, #252]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	025b      	lsls	r3, r3, #9
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c28:	4931      	ldr	r1, [pc, #196]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c2e:	4b30      	ldr	r3, [pc, #192]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	492d      	ldr	r1, [pc, #180]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c40:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	699b      	ldr	r3, [r3, #24]
 8009c4c:	4928      	ldr	r1, [pc, #160]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c52:	4b27      	ldr	r3, [pc, #156]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	4a26      	ldr	r2, [pc, #152]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c5e:	4b24      	ldr	r3, [pc, #144]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c62:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <RCCEx_PLL3_Config+0x160>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	69d2      	ldr	r2, [r2, #28]
 8009c6a:	00d2      	lsls	r2, r2, #3
 8009c6c:	4920      	ldr	r1, [pc, #128]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c72:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	4a1e      	ldr	r2, [pc, #120]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d106      	bne.n	8009c92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c84:	4b1a      	ldr	r3, [pc, #104]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	4a19      	ldr	r2, [pc, #100]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c90:	e00f      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d106      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ca4:	e005      	b.n	8009cb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	4a11      	ldr	r2, [pc, #68]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a0e      	ldr	r2, [pc, #56]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cbe:	f7f8 faf5 	bl	80022ac <HAL_GetTick>
 8009cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cc4:	e008      	b.n	8009cd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cc6:	f7f8 faf1 	bl	80022ac <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e006      	b.n	8009ce6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0f0      	beq.n	8009cc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	ffff0007 	.word	0xffff0007

08009cf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e10f      	b.n	8009f2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a87      	ldr	r2, [pc, #540]	; (8009f34 <HAL_SPI_Init+0x23c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00f      	beq.n	8009d3a <HAL_SPI_Init+0x42>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a86      	ldr	r2, [pc, #536]	; (8009f38 <HAL_SPI_Init+0x240>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00a      	beq.n	8009d3a <HAL_SPI_Init+0x42>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a84      	ldr	r2, [pc, #528]	; (8009f3c <HAL_SPI_Init+0x244>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d005      	beq.n	8009d3a <HAL_SPI_Init+0x42>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	2b0f      	cmp	r3, #15
 8009d34:	d901      	bls.n	8009d3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e0f7      	b.n	8009f2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fd5a 	bl	800a7f4 <SPI_GetPacketSize>
 8009d40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a7b      	ldr	r2, [pc, #492]	; (8009f34 <HAL_SPI_Init+0x23c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00c      	beq.n	8009d66 <HAL_SPI_Init+0x6e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a79      	ldr	r2, [pc, #484]	; (8009f38 <HAL_SPI_Init+0x240>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d007      	beq.n	8009d66 <HAL_SPI_Init+0x6e>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a78      	ldr	r2, [pc, #480]	; (8009f3c <HAL_SPI_Init+0x244>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d002      	beq.n	8009d66 <HAL_SPI_Init+0x6e>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b08      	cmp	r3, #8
 8009d64:	d811      	bhi.n	8009d8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d6a:	4a72      	ldr	r2, [pc, #456]	; (8009f34 <HAL_SPI_Init+0x23c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d009      	beq.n	8009d84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a70      	ldr	r2, [pc, #448]	; (8009f38 <HAL_SPI_Init+0x240>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d004      	beq.n	8009d84 <HAL_SPI_Init+0x8c>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a6f      	ldr	r2, [pc, #444]	; (8009f3c <HAL_SPI_Init+0x244>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d104      	bne.n	8009d8e <HAL_SPI_Init+0x96>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d901      	bls.n	8009d8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e0cd      	b.n	8009f2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7f7 fe9e 	bl	8001ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2202      	movs	r2, #2
 8009dac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0201 	bic.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009dca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009dd4:	d119      	bne.n	8009e0a <HAL_SPI_Init+0x112>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dde:	d103      	bne.n	8009de8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d008      	beq.n	8009dfa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10c      	bne.n	8009e0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009df4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009df8:	d107      	bne.n	8009e0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00f      	beq.n	8009e36 <HAL_SPI_Init+0x13e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	2b06      	cmp	r3, #6
 8009e1c:	d90b      	bls.n	8009e36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e007      	b.n	8009e46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	69da      	ldr	r2, [r3, #28]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	431a      	orrs	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e58:	ea42 0103 	orr.w	r1, r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	431a      	orrs	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea6:	ea42 0103 	orr.w	r1, r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d113      	bne.n	8009ee6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ed0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ee4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0201 	bic.w	r2, r2, #1
 8009ef4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40013000 	.word	0x40013000
 8009f38:	40003800 	.word	0x40003800
 8009f3c:	40003c00 	.word	0x40003c00

08009f40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b08a      	sub	sp, #40	; 0x28
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3320      	adds	r3, #32
 8009f56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d101      	bne.n	8009f6a <HAL_SPI_Transmit+0x2a>
 8009f66:	2302      	movs	r3, #2
 8009f68:	e1e1      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f72:	f7f8 f99b 	bl	80022ac <HAL_GetTick>
 8009f76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d007      	beq.n	8009f94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009f84:	2302      	movs	r3, #2
 8009f86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f90:	7efb      	ldrb	r3, [r7, #27]
 8009f92:	e1cc      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <HAL_SPI_Transmit+0x60>
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d107      	bne.n	8009fb0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009fac:	7efb      	ldrb	r3, [r7, #27]
 8009fae:	e1be      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	88fa      	ldrh	r2, [r7, #6]
 8009fca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	88fa      	ldrh	r2, [r7, #6]
 8009fd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a000:	d108      	bne.n	800a014 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	e009      	b.n	800a028 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a026:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	4b96      	ldr	r3, [pc, #600]	; (800a288 <HAL_SPI_Transmit+0x348>)
 800a030:	4013      	ands	r3, r2
 800a032:	88f9      	ldrh	r1, [r7, #6]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	6812      	ldr	r2, [r2, #0]
 800a038:	430b      	orrs	r3, r1
 800a03a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f042 0201 	orr.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a054:	d107      	bne.n	800a066 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	d947      	bls.n	800a0fe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a06e:	e03f      	b.n	800a0f0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d114      	bne.n	800a0a8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08e:	1d1a      	adds	r2, r3, #4
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	3b01      	subs	r3, #1
 800a09e:	b29a      	uxth	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0a6:	e023      	b.n	800a0f0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0a8:	f7f8 f900 	bl	80022ac <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d803      	bhi.n	800a0c0 <HAL_SPI_Transmit+0x180>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0be:	d102      	bne.n	800a0c6 <HAL_SPI_Transmit+0x186>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d114      	bne.n	800a0f0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f000 fac6 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	e11e      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1b9      	bne.n	800a070 <HAL_SPI_Transmit+0x130>
 800a0fc:	e0f1      	b.n	800a2e2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	2b07      	cmp	r3, #7
 800a104:	f240 80e6 	bls.w	800a2d4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a108:	e05d      	b.n	800a1c6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b02      	cmp	r3, #2
 800a116:	d132      	bne.n	800a17e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b01      	cmp	r3, #1
 800a122:	d918      	bls.n	800a156 <HAL_SPI_Transmit+0x216>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d014      	beq.n	800a156 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6812      	ldr	r2, [r2, #0]
 800a136:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a148:	b29b      	uxth	r3, r3
 800a14a:	3b02      	subs	r3, #2
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a154:	e037      	b.n	800a1c6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15a:	881a      	ldrh	r2, [r3, #0]
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a164:	1c9a      	adds	r2, r3, #2
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a170:	b29b      	uxth	r3, r3
 800a172:	3b01      	subs	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a17c:	e023      	b.n	800a1c6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a17e:	f7f8 f895 	bl	80022ac <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d803      	bhi.n	800a196 <HAL_SPI_Transmit+0x256>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d102      	bne.n	800a19c <HAL_SPI_Transmit+0x25c>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d114      	bne.n	800a1c6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fa5b 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e0b3      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d19b      	bne.n	800a10a <HAL_SPI_Transmit+0x1ca>
 800a1d2:	e086      	b.n	800a2e2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d154      	bne.n	800a28c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d918      	bls.n	800a220 <HAL_SPI_Transmit+0x2e0>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	2b40      	cmp	r3, #64	; 0x40
 800a1f4:	d914      	bls.n	800a220 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a206:	1d1a      	adds	r2, r3, #4
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b04      	subs	r3, #4
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a21e:	e059      	b.n	800a2d4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a226:	b29b      	uxth	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d917      	bls.n	800a25c <HAL_SPI_Transmit+0x31c>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d013      	beq.n	800a25c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a238:	881a      	ldrh	r2, [r3, #0]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a242:	1c9a      	adds	r2, r3, #2
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a24e:	b29b      	uxth	r3, r3
 800a250:	3b02      	subs	r3, #2
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a25a:	e03b      	b.n	800a2d4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3320      	adds	r3, #32
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a26e:	1c5a      	adds	r2, r3, #1
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a286:	e025      	b.n	800a2d4 <HAL_SPI_Transmit+0x394>
 800a288:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a28c:	f7f8 f80e 	bl	80022ac <HAL_GetTick>
 800a290:	4602      	mov	r2, r0
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	1ad3      	subs	r3, r2, r3
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d803      	bhi.n	800a2a4 <HAL_SPI_Transmit+0x364>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a2:	d102      	bne.n	800a2aa <HAL_SPI_Transmit+0x36a>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d114      	bne.n	800a2d4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f9d4 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e02c      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f47f af79 	bne.w	800a1d4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2108      	movs	r1, #8
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 fa53 	bl	800a798 <SPI_WaitOnFlagUntilTimeout>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d007      	beq.n	800a308 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2fe:	f043 0220 	orr.w	r2, r3, #32
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f9a5 	bl	800a658 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e000      	b.n	800a32e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a32c:	7efb      	ldrb	r3, [r7, #27]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop

0800a338 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	603b      	str	r3, [r7, #0]
 800a344:	4613      	mov	r3, r2
 800a346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3330      	adds	r3, #48	; 0x30
 800a352:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <HAL_SPI_Receive+0x2a>
 800a35e:	2302      	movs	r3, #2
 800a360:	e173      	b.n	800a64a <HAL_SPI_Receive+0x312>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a36a:	f7f7 ff9f 	bl	80022ac <HAL_GetTick>
 800a36e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d007      	beq.n	800a38c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800a37c:	2302      	movs	r3, #2
 800a37e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a388:	7ffb      	ldrb	r3, [r7, #31]
 800a38a:	e15e      	b.n	800a64a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_SPI_Receive+0x60>
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d107      	bne.n	800a3a8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a3a4:	7ffb      	ldrb	r3, [r7, #31]
 800a3a6:	e150      	b.n	800a64a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	88fa      	ldrh	r2, [r7, #6]
 800a3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	88fa      	ldrh	r2, [r7, #6]
 800a3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a3f8:	d108      	bne.n	800a40c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a408:	601a      	str	r2, [r3, #0]
 800a40a:	e009      	b.n	800a420 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a41e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	4b8b      	ldr	r3, [pc, #556]	; (800a654 <HAL_SPI_Receive+0x31c>)
 800a428:	4013      	ands	r3, r2
 800a42a:	88f9      	ldrh	r1, [r7, #6]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	430b      	orrs	r3, r1
 800a432:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0201 	orr.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a44c:	d107      	bne.n	800a45e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a45c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d948      	bls.n	800a4f8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a466:	e040      	b.n	800a4ea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695a      	ldr	r2, [r3, #20]
 800a46e:	f248 0308 	movw	r3, #32776	; 0x8008
 800a472:	4013      	ands	r3, r2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d014      	beq.n	800a4a2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a480:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a482:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a488:	1d1a      	adds	r2, r3, #4
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a494:	b29b      	uxth	r3, r3
 800a496:	3b01      	subs	r3, #1
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4a0:	e023      	b.n	800a4ea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4a2:	f7f7 ff03 	bl	80022ac <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d803      	bhi.n	800a4ba <HAL_SPI_Receive+0x182>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b8:	d102      	bne.n	800a4c0 <HAL_SPI_Receive+0x188>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d114      	bne.n	800a4ea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f8c9 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e0af      	b.n	800a64a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1b8      	bne.n	800a468 <HAL_SPI_Receive+0x130>
 800a4f6:	e095      	b.n	800a624 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	2b07      	cmp	r3, #7
 800a4fe:	f240 808b 	bls.w	800a618 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a502:	e03f      	b.n	800a584 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f003 0301 	and.w	r3, r3, #1
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d114      	bne.n	800a53c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a516:	69ba      	ldr	r2, [r7, #24]
 800a518:	8812      	ldrh	r2, [r2, #0]
 800a51a:	b292      	uxth	r2, r2
 800a51c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a522:	1c9a      	adds	r2, r3, #2
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a53a:	e023      	b.n	800a584 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a53c:	f7f7 feb6 	bl	80022ac <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d803      	bhi.n	800a554 <HAL_SPI_Receive+0x21c>
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	d102      	bne.n	800a55a <HAL_SPI_Receive+0x222>
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d114      	bne.n	800a584 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f87c 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a56e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e062      	b.n	800a64a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1b9      	bne.n	800a504 <HAL_SPI_Receive+0x1cc>
 800a590:	e048      	b.n	800a624 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d117      	bne.n	800a5d0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ac:	7812      	ldrb	r2, [r2, #0]
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a5ce:	e023      	b.n	800a618 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5d0:	f7f7 fe6c 	bl	80022ac <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d803      	bhi.n	800a5e8 <HAL_SPI_Receive+0x2b0>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d102      	bne.n	800a5ee <HAL_SPI_Receive+0x2b6>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d114      	bne.n	800a618 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 f832 	bl	800a658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a602:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2201      	movs	r2, #1
 800a610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e018      	b.n	800a64a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a61e:	b29b      	uxth	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1b6      	bne.n	800a592 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f817 	bl	800a658 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800a648:	7ffb      	ldrb	r3, [r7, #31]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	ffff0000 	.word	0xffff0000

0800a658 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0208 	orr.w	r2, r2, #8
 800a676:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699a      	ldr	r2, [r3, #24]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f042 0210 	orr.w	r2, r2, #16
 800a686:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0201 	bic.w	r2, r2, #1
 800a696:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6919      	ldr	r1, [r3, #16]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4b3c      	ldr	r3, [pc, #240]	; (800a794 <SPI_CloseTransfer+0x13c>)
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a6b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d014      	beq.n	800a6ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0320 	and.w	r3, r3, #32
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00f      	beq.n	800a6ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	699a      	ldr	r2, [r3, #24]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0220 	orr.w	r2, r2, #32
 800a6ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d014      	beq.n	800a724 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00f      	beq.n	800a724 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a70a:	f043 0204 	orr.w	r2, r3, #4
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699a      	ldr	r2, [r3, #24]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a722:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00f      	beq.n	800a74e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a734:	f043 0201 	orr.w	r2, r3, #1
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	699a      	ldr	r2, [r3, #24]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a74c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a75e:	f043 0208 	orr.w	r2, r3, #8
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699a      	ldr	r2, [r3, #24]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a776:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	fffffc90 	.word	0xfffffc90

0800a798 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7a8:	e010      	b.n	800a7cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7aa:	f7f7 fd7f 	bl	80022ac <HAL_GetTick>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d803      	bhi.n	800a7c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c0:	d102      	bne.n	800a7c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e00f      	b.n	800a7ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695a      	ldr	r2, [r3, #20]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	79fb      	ldrb	r3, [r7, #7]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d0df      	beq.n	800a7aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a800:	095b      	lsrs	r3, r3, #5
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	3307      	adds	r3, #7
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3714      	adds	r7, #20
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e049      	b.n	800a8d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d106      	bne.n	800a856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7f7 f9fd 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2202      	movs	r2, #2
 800a85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3304      	adds	r3, #4
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f000 fd95 	bl	800b398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d001      	beq.n	800a8f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e054      	b.n	800a99a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a26      	ldr	r2, [pc, #152]	; (800a9a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d022      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a91a:	d01d      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a22      	ldr	r2, [pc, #136]	; (800a9ac <HAL_TIM_Base_Start_IT+0xd4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d018      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a21      	ldr	r2, [pc, #132]	; (800a9b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d013      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1f      	ldr	r2, [pc, #124]	; (800a9b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00e      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1e      	ldr	r2, [pc, #120]	; (800a9b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d009      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1c      	ldr	r2, [pc, #112]	; (800a9bc <HAL_TIM_Base_Start_IT+0xe4>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d004      	beq.n	800a958 <HAL_TIM_Base_Start_IT+0x80>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a1b      	ldr	r2, [pc, #108]	; (800a9c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d115      	bne.n	800a984 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	689a      	ldr	r2, [r3, #8]
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <HAL_TIM_Base_Start_IT+0xec>)
 800a960:	4013      	ands	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b06      	cmp	r3, #6
 800a968:	d015      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0xbe>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a970:	d011      	beq.n	800a996 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a982:	e008      	b.n	800a996 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f042 0201 	orr.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	e000      	b.n	800a998 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40000400 	.word	0x40000400
 800a9b0:	40000800 	.word	0x40000800
 800a9b4:	40000c00 	.word	0x40000c00
 800a9b8:	40010400 	.word	0x40010400
 800a9bc:	40001800 	.word	0x40001800
 800a9c0:	40014000 	.word	0x40014000
 800a9c4:	00010007 	.word	0x00010007

0800a9c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f022 0201 	bic.w	r2, r2, #1
 800a9de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6a1a      	ldr	r2, [r3, #32]
 800a9e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10f      	bne.n	800aa10 <HAL_TIM_Base_Stop_IT+0x48>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6a1a      	ldr	r2, [r3, #32]
 800a9f6:	f240 4344 	movw	r3, #1092	; 0x444
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d107      	bne.n	800aa10 <HAL_TIM_Base_Stop_IT+0x48>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0201 	bic.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e049      	b.n	800aacc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7f7 f95b 	bl	8001d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2202      	movs	r2, #2
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3304      	adds	r3, #4
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f000 fc97 	bl	800b398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d109      	bne.n	800aaf8 <HAL_TIM_PWM_Start+0x24>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	bf14      	ite	ne
 800aaf0:	2301      	movne	r3, #1
 800aaf2:	2300      	moveq	r3, #0
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	e03c      	b.n	800ab72 <HAL_TIM_PWM_Start+0x9e>
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d109      	bne.n	800ab12 <HAL_TIM_PWM_Start+0x3e>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	bf14      	ite	ne
 800ab0a:	2301      	movne	r3, #1
 800ab0c:	2300      	moveq	r3, #0
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	e02f      	b.n	800ab72 <HAL_TIM_PWM_Start+0x9e>
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d109      	bne.n	800ab2c <HAL_TIM_PWM_Start+0x58>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	bf14      	ite	ne
 800ab24:	2301      	movne	r3, #1
 800ab26:	2300      	moveq	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	e022      	b.n	800ab72 <HAL_TIM_PWM_Start+0x9e>
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	2b0c      	cmp	r3, #12
 800ab30:	d109      	bne.n	800ab46 <HAL_TIM_PWM_Start+0x72>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	bf14      	ite	ne
 800ab3e:	2301      	movne	r3, #1
 800ab40:	2300      	moveq	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	e015      	b.n	800ab72 <HAL_TIM_PWM_Start+0x9e>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d109      	bne.n	800ab60 <HAL_TIM_PWM_Start+0x8c>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	bf14      	ite	ne
 800ab58:	2301      	movne	r3, #1
 800ab5a:	2300      	moveq	r3, #0
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e008      	b.n	800ab72 <HAL_TIM_PWM_Start+0x9e>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	bf14      	ite	ne
 800ab6c:	2301      	movne	r3, #1
 800ab6e:	2300      	moveq	r3, #0
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e0a1      	b.n	800acbe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <HAL_TIM_PWM_Start+0xb6>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab88:	e023      	b.n	800abd2 <HAL_TIM_PWM_Start+0xfe>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d104      	bne.n	800ab9a <HAL_TIM_PWM_Start+0xc6>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2202      	movs	r2, #2
 800ab94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab98:	e01b      	b.n	800abd2 <HAL_TIM_PWM_Start+0xfe>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b08      	cmp	r3, #8
 800ab9e:	d104      	bne.n	800abaa <HAL_TIM_PWM_Start+0xd6>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aba8:	e013      	b.n	800abd2 <HAL_TIM_PWM_Start+0xfe>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b0c      	cmp	r3, #12
 800abae:	d104      	bne.n	800abba <HAL_TIM_PWM_Start+0xe6>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abb8:	e00b      	b.n	800abd2 <HAL_TIM_PWM_Start+0xfe>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b10      	cmp	r3, #16
 800abbe:	d104      	bne.n	800abca <HAL_TIM_PWM_Start+0xf6>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abc8:	e003      	b.n	800abd2 <HAL_TIM_PWM_Start+0xfe>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2202      	movs	r2, #2
 800abce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2201      	movs	r2, #1
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 ffea 	bl	800bbb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a38      	ldr	r2, [pc, #224]	; (800acc8 <HAL_TIM_PWM_Start+0x1f4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d013      	beq.n	800ac12 <HAL_TIM_PWM_Start+0x13e>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a37      	ldr	r2, [pc, #220]	; (800accc <HAL_TIM_PWM_Start+0x1f8>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d00e      	beq.n	800ac12 <HAL_TIM_PWM_Start+0x13e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a35      	ldr	r2, [pc, #212]	; (800acd0 <HAL_TIM_PWM_Start+0x1fc>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d009      	beq.n	800ac12 <HAL_TIM_PWM_Start+0x13e>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a34      	ldr	r2, [pc, #208]	; (800acd4 <HAL_TIM_PWM_Start+0x200>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d004      	beq.n	800ac12 <HAL_TIM_PWM_Start+0x13e>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a32      	ldr	r2, [pc, #200]	; (800acd8 <HAL_TIM_PWM_Start+0x204>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d101      	bne.n	800ac16 <HAL_TIM_PWM_Start+0x142>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <HAL_TIM_PWM_Start+0x144>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d007      	beq.n	800ac2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a25      	ldr	r2, [pc, #148]	; (800acc8 <HAL_TIM_PWM_Start+0x1f4>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d022      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac3e:	d01d      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a25      	ldr	r2, [pc, #148]	; (800acdc <HAL_TIM_PWM_Start+0x208>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d018      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a24      	ldr	r2, [pc, #144]	; (800ace0 <HAL_TIM_PWM_Start+0x20c>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d013      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a22      	ldr	r2, [pc, #136]	; (800ace4 <HAL_TIM_PWM_Start+0x210>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d00e      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a1a      	ldr	r2, [pc, #104]	; (800accc <HAL_TIM_PWM_Start+0x1f8>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d009      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a1e      	ldr	r2, [pc, #120]	; (800ace8 <HAL_TIM_PWM_Start+0x214>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d004      	beq.n	800ac7c <HAL_TIM_PWM_Start+0x1a8>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a16      	ldr	r2, [pc, #88]	; (800acd0 <HAL_TIM_PWM_Start+0x1fc>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d115      	bne.n	800aca8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	4b1a      	ldr	r3, [pc, #104]	; (800acec <HAL_TIM_PWM_Start+0x218>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b06      	cmp	r3, #6
 800ac8c:	d015      	beq.n	800acba <HAL_TIM_PWM_Start+0x1e6>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac94:	d011      	beq.n	800acba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0201 	orr.w	r2, r2, #1
 800aca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aca6:	e008      	b.n	800acba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0201 	orr.w	r2, r2, #1
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	e000      	b.n	800acbc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	40010000 	.word	0x40010000
 800accc:	40010400 	.word	0x40010400
 800acd0:	40014000 	.word	0x40014000
 800acd4:	40014400 	.word	0x40014400
 800acd8:	40014800 	.word	0x40014800
 800acdc:	40000400 	.word	0x40000400
 800ace0:	40000800 	.word	0x40000800
 800ace4:	40000c00 	.word	0x40000c00
 800ace8:	40001800 	.word	0x40001800
 800acec:	00010007 	.word	0x00010007

0800acf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d122      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f003 0302 	and.w	r3, r3, #2
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d11b      	bne.n	800ad4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f06f 0202 	mvn.w	r2, #2
 800ad1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2201      	movs	r2, #1
 800ad22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fb12 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800ad38:	e005      	b.n	800ad46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fb04 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fb15 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d122      	bne.n	800ada0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f003 0304 	and.w	r3, r3, #4
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	d11b      	bne.n	800ada0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f06f 0204 	mvn.w	r2, #4
 800ad70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2202      	movs	r2, #2
 800ad76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d003      	beq.n	800ad8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fae8 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800ad8c:	e005      	b.n	800ad9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fada 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 faeb 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	f003 0308 	and.w	r3, r3, #8
 800adaa:	2b08      	cmp	r3, #8
 800adac:	d122      	bne.n	800adf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d11b      	bne.n	800adf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f06f 0208 	mvn.w	r2, #8
 800adc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2204      	movs	r2, #4
 800adca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fabe 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800ade0:	e005      	b.n	800adee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fab0 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fac1 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	691b      	ldr	r3, [r3, #16]
 800adfa:	f003 0310 	and.w	r3, r3, #16
 800adfe:	2b10      	cmp	r3, #16
 800ae00:	d122      	bne.n	800ae48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	f003 0310 	and.w	r3, r3, #16
 800ae0c:	2b10      	cmp	r3, #16
 800ae0e:	d11b      	bne.n	800ae48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f06f 0210 	mvn.w	r2, #16
 800ae18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa94 	bl	800b35c <HAL_TIM_IC_CaptureCallback>
 800ae34:	e005      	b.n	800ae42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fa86 	bl	800b348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fa97 	bl	800b370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d10e      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d107      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f06f 0201 	mvn.w	r2, #1
 800ae6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7f6 fcf4 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae7e:	2b80      	cmp	r3, #128	; 0x80
 800ae80:	d10e      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8c:	2b80      	cmp	r3, #128	; 0x80
 800ae8e:	d107      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 ffc6 	bl	800be2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeae:	d10e      	bne.n	800aece <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeba:	2b80      	cmp	r3, #128	; 0x80
 800aebc:	d107      	bne.n	800aece <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 ffb9 	bl	800be40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed8:	2b40      	cmp	r3, #64	; 0x40
 800aeda:	d10e      	bne.n	800aefa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee6:	2b40      	cmp	r3, #64	; 0x40
 800aee8:	d107      	bne.n	800aefa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fa45 	bl	800b384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b20      	cmp	r3, #32
 800af06:	d10e      	bne.n	800af26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b20      	cmp	r3, #32
 800af14:	d107      	bne.n	800af26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f06f 0220 	mvn.w	r2, #32
 800af1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 ff79 	bl	800be18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af26:	bf00      	nop
 800af28:	3708      	adds	r7, #8
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af4a:	2302      	movs	r3, #2
 800af4c:	e0ff      	b.n	800b14e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b14      	cmp	r3, #20
 800af5a:	f200 80f0 	bhi.w	800b13e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af5e:	a201      	add	r2, pc, #4	; (adr r2, 800af64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800afb9 	.word	0x0800afb9
 800af68:	0800b13f 	.word	0x0800b13f
 800af6c:	0800b13f 	.word	0x0800b13f
 800af70:	0800b13f 	.word	0x0800b13f
 800af74:	0800aff9 	.word	0x0800aff9
 800af78:	0800b13f 	.word	0x0800b13f
 800af7c:	0800b13f 	.word	0x0800b13f
 800af80:	0800b13f 	.word	0x0800b13f
 800af84:	0800b03b 	.word	0x0800b03b
 800af88:	0800b13f 	.word	0x0800b13f
 800af8c:	0800b13f 	.word	0x0800b13f
 800af90:	0800b13f 	.word	0x0800b13f
 800af94:	0800b07b 	.word	0x0800b07b
 800af98:	0800b13f 	.word	0x0800b13f
 800af9c:	0800b13f 	.word	0x0800b13f
 800afa0:	0800b13f 	.word	0x0800b13f
 800afa4:	0800b0bd 	.word	0x0800b0bd
 800afa8:	0800b13f 	.word	0x0800b13f
 800afac:	0800b13f 	.word	0x0800b13f
 800afb0:	0800b13f 	.word	0x0800b13f
 800afb4:	0800b0fd 	.word	0x0800b0fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68b9      	ldr	r1, [r7, #8]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fa84 	bl	800b4cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f042 0208 	orr.w	r2, r2, #8
 800afd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0204 	bic.w	r2, r2, #4
 800afe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6999      	ldr	r1, [r3, #24]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691a      	ldr	r2, [r3, #16]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	619a      	str	r2, [r3, #24]
      break;
 800aff6:	e0a5      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 faf4 	bl	800b5ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699a      	ldr	r2, [r3, #24]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6999      	ldr	r1, [r3, #24]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	021a      	lsls	r2, r3, #8
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	619a      	str	r2, [r3, #24]
      break;
 800b038:	e084      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fb5d 	bl	800b700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69da      	ldr	r2, [r3, #28]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0208 	orr.w	r2, r2, #8
 800b054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69da      	ldr	r2, [r3, #28]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 0204 	bic.w	r2, r2, #4
 800b064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69d9      	ldr	r1, [r3, #28]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	691a      	ldr	r2, [r3, #16]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	61da      	str	r2, [r3, #28]
      break;
 800b078:	e064      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fbc5 	bl	800b810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69d9      	ldr	r1, [r3, #28]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	021a      	lsls	r2, r3, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	61da      	str	r2, [r3, #28]
      break;
 800b0ba:	e043      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68b9      	ldr	r1, [r7, #8]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fc0e 	bl	800b8e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f042 0208 	orr.w	r2, r2, #8
 800b0d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f022 0204 	bic.w	r2, r2, #4
 800b0e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	691a      	ldr	r2, [r3, #16]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0fa:	e023      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fc52 	bl	800b9ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	021a      	lsls	r2, r3, #8
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b13c:	e002      	b.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	75fb      	strb	r3, [r7, #23]
      break;
 800b142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop

0800b158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d101      	bne.n	800b174 <HAL_TIM_ConfigClockSource+0x1c>
 800b170:	2302      	movs	r3, #2
 800b172:	e0dc      	b.n	800b32e <HAL_TIM_ConfigClockSource+0x1d6>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	4b6a      	ldr	r3, [pc, #424]	; (800b338 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b190:	4013      	ands	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b19a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a64      	ldr	r2, [pc, #400]	; (800b33c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	f000 80a9 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1b0:	4a62      	ldr	r2, [pc, #392]	; (800b33c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	f200 80ae 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1b8:	4a61      	ldr	r2, [pc, #388]	; (800b340 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	f000 80a1 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1c0:	4a5f      	ldr	r2, [pc, #380]	; (800b340 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	f200 80a6 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1c8:	4a5e      	ldr	r2, [pc, #376]	; (800b344 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	f000 8099 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1d0:	4a5c      	ldr	r2, [pc, #368]	; (800b344 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	f200 809e 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1dc:	f000 8091 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b1e4:	f200 8096 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1ec:	f000 8089 	beq.w	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b1f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1f4:	f200 808e 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fc:	d03e      	beq.n	800b27c <HAL_TIM_ConfigClockSource+0x124>
 800b1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b202:	f200 8087 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20a:	f000 8086 	beq.w	800b31a <HAL_TIM_ConfigClockSource+0x1c2>
 800b20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b212:	d87f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b214:	2b70      	cmp	r3, #112	; 0x70
 800b216:	d01a      	beq.n	800b24e <HAL_TIM_ConfigClockSource+0xf6>
 800b218:	2b70      	cmp	r3, #112	; 0x70
 800b21a:	d87b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b21c:	2b60      	cmp	r3, #96	; 0x60
 800b21e:	d050      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0x16a>
 800b220:	2b60      	cmp	r3, #96	; 0x60
 800b222:	d877      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b224:	2b50      	cmp	r3, #80	; 0x50
 800b226:	d03c      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x14a>
 800b228:	2b50      	cmp	r3, #80	; 0x50
 800b22a:	d873      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b22c:	2b40      	cmp	r3, #64	; 0x40
 800b22e:	d058      	beq.n	800b2e2 <HAL_TIM_ConfigClockSource+0x18a>
 800b230:	2b40      	cmp	r3, #64	; 0x40
 800b232:	d86f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b234:	2b30      	cmp	r3, #48	; 0x30
 800b236:	d064      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b238:	2b30      	cmp	r3, #48	; 0x30
 800b23a:	d86b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	d060      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b240:	2b20      	cmp	r3, #32
 800b242:	d867      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d05c      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b248:	2b10      	cmp	r3, #16
 800b24a:	d05a      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x1aa>
 800b24c:	e062      	b.n	800b314 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6899      	ldr	r1, [r3, #8]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f000 fc89 	bl	800bb74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	609a      	str	r2, [r3, #8]
      break;
 800b27a:	e04f      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6818      	ldr	r0, [r3, #0]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	6899      	ldr	r1, [r3, #8]
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f000 fc72 	bl	800bb74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b29e:	609a      	str	r2, [r3, #8]
      break;
 800b2a0:	e03c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	6859      	ldr	r1, [r3, #4]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f000 fbe2 	bl	800ba78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2150      	movs	r1, #80	; 0x50
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fc3c 	bl	800bb38 <TIM_ITRx_SetConfig>
      break;
 800b2c0:	e02c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6859      	ldr	r1, [r3, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f000 fc01 	bl	800bad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2160      	movs	r1, #96	; 0x60
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 fc2c 	bl	800bb38 <TIM_ITRx_SetConfig>
      break;
 800b2e0:	e01c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6818      	ldr	r0, [r3, #0]
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6859      	ldr	r1, [r3, #4]
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f000 fbc2 	bl	800ba78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2140      	movs	r1, #64	; 0x40
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 fc1c 	bl	800bb38 <TIM_ITRx_SetConfig>
      break;
 800b300:	e00c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f000 fc13 	bl	800bb38 <TIM_ITRx_SetConfig>
      break;
 800b312:	e003      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	73fb      	strb	r3, [r7, #15]
      break;
 800b318:	e000      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b31a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	ffceff88 	.word	0xffceff88
 800b33c:	00100040 	.word	0x00100040
 800b340:	00100030 	.word	0x00100030
 800b344:	00100020 	.word	0x00100020

0800b348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b364:	bf00      	nop
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b378:	bf00      	nop
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d013      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b6:	d00f      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a3d      	ldr	r2, [pc, #244]	; (800b4b0 <TIM_Base_SetConfig+0x118>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d00b      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	4a3c      	ldr	r2, [pc, #240]	; (800b4b4 <TIM_Base_SetConfig+0x11c>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d007      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a3b      	ldr	r2, [pc, #236]	; (800b4b8 <TIM_Base_SetConfig+0x120>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d003      	beq.n	800b3d8 <TIM_Base_SetConfig+0x40>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a3a      	ldr	r2, [pc, #232]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d108      	bne.n	800b3ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a2f      	ldr	r2, [pc, #188]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d01f      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3f8:	d01b      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <TIM_Base_SetConfig+0x118>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d017      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4a2b      	ldr	r2, [pc, #172]	; (800b4b4 <TIM_Base_SetConfig+0x11c>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d013      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2a      	ldr	r2, [pc, #168]	; (800b4b8 <TIM_Base_SetConfig+0x120>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d00f      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d00b      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a28      	ldr	r2, [pc, #160]	; (800b4c0 <TIM_Base_SetConfig+0x128>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d007      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a27      	ldr	r2, [pc, #156]	; (800b4c4 <TIM_Base_SetConfig+0x12c>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d003      	beq.n	800b432 <TIM_Base_SetConfig+0x9a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a26      	ldr	r2, [pc, #152]	; (800b4c8 <TIM_Base_SetConfig+0x130>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d108      	bne.n	800b444 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4313      	orrs	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a10      	ldr	r2, [pc, #64]	; (800b4ac <TIM_Base_SetConfig+0x114>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00f      	beq.n	800b490 <TIM_Base_SetConfig+0xf8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a12      	ldr	r2, [pc, #72]	; (800b4bc <TIM_Base_SetConfig+0x124>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00b      	beq.n	800b490 <TIM_Base_SetConfig+0xf8>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a11      	ldr	r2, [pc, #68]	; (800b4c0 <TIM_Base_SetConfig+0x128>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d007      	beq.n	800b490 <TIM_Base_SetConfig+0xf8>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a10      	ldr	r2, [pc, #64]	; (800b4c4 <TIM_Base_SetConfig+0x12c>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d003      	beq.n	800b490 <TIM_Base_SetConfig+0xf8>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a0f      	ldr	r2, [pc, #60]	; (800b4c8 <TIM_Base_SetConfig+0x130>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d103      	bne.n	800b498 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	691a      	ldr	r2, [r3, #16]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	615a      	str	r2, [r3, #20]
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40014400 	.word	0x40014400
 800b4c8:	40014800 	.word	0x40014800

0800b4cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f023 0201 	bic.w	r2, r3, #1
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	4b37      	ldr	r3, [pc, #220]	; (800b5d4 <TIM_OC1_SetConfig+0x108>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0303 	bic.w	r3, r3, #3
 800b502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f023 0302 	bic.w	r3, r3, #2
 800b514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a2d      	ldr	r2, [pc, #180]	; (800b5d8 <TIM_OC1_SetConfig+0x10c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d00f      	beq.n	800b548 <TIM_OC1_SetConfig+0x7c>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a2c      	ldr	r2, [pc, #176]	; (800b5dc <TIM_OC1_SetConfig+0x110>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d00b      	beq.n	800b548 <TIM_OC1_SetConfig+0x7c>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a2b      	ldr	r2, [pc, #172]	; (800b5e0 <TIM_OC1_SetConfig+0x114>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d007      	beq.n	800b548 <TIM_OC1_SetConfig+0x7c>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a2a      	ldr	r2, [pc, #168]	; (800b5e4 <TIM_OC1_SetConfig+0x118>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_OC1_SetConfig+0x7c>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a29      	ldr	r2, [pc, #164]	; (800b5e8 <TIM_OC1_SetConfig+0x11c>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d10c      	bne.n	800b562 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f023 0308 	bic.w	r3, r3, #8
 800b54e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	4313      	orrs	r3, r2
 800b558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f023 0304 	bic.w	r3, r3, #4
 800b560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a1c      	ldr	r2, [pc, #112]	; (800b5d8 <TIM_OC1_SetConfig+0x10c>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00f      	beq.n	800b58a <TIM_OC1_SetConfig+0xbe>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a1b      	ldr	r2, [pc, #108]	; (800b5dc <TIM_OC1_SetConfig+0x110>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d00b      	beq.n	800b58a <TIM_OC1_SetConfig+0xbe>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	4a1a      	ldr	r2, [pc, #104]	; (800b5e0 <TIM_OC1_SetConfig+0x114>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d007      	beq.n	800b58a <TIM_OC1_SetConfig+0xbe>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a19      	ldr	r2, [pc, #100]	; (800b5e4 <TIM_OC1_SetConfig+0x118>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d003      	beq.n	800b58a <TIM_OC1_SetConfig+0xbe>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a18      	ldr	r2, [pc, #96]	; (800b5e8 <TIM_OC1_SetConfig+0x11c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d111      	bne.n	800b5ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	693a      	ldr	r2, [r7, #16]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	621a      	str	r2, [r3, #32]
}
 800b5c8:	bf00      	nop
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	fffeff8f 	.word	0xfffeff8f
 800b5d8:	40010000 	.word	0x40010000
 800b5dc:	40010400 	.word	0x40010400
 800b5e0:	40014000 	.word	0x40014000
 800b5e4:	40014400 	.word	0x40014400
 800b5e8:	40014800 	.word	0x40014800

0800b5ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b087      	sub	sp, #28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	f023 0210 	bic.w	r2, r3, #16
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	4b34      	ldr	r3, [pc, #208]	; (800b6e8 <TIM_OC2_SetConfig+0xfc>)
 800b618:	4013      	ands	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	021b      	lsls	r3, r3, #8
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f023 0320 	bic.w	r3, r3, #32
 800b636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	011b      	lsls	r3, r3, #4
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a29      	ldr	r2, [pc, #164]	; (800b6ec <TIM_OC2_SetConfig+0x100>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_OC2_SetConfig+0x68>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a28      	ldr	r2, [pc, #160]	; (800b6f0 <TIM_OC2_SetConfig+0x104>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d10d      	bne.n	800b670 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b66e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a1e      	ldr	r2, [pc, #120]	; (800b6ec <TIM_OC2_SetConfig+0x100>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d00f      	beq.n	800b698 <TIM_OC2_SetConfig+0xac>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a1d      	ldr	r2, [pc, #116]	; (800b6f0 <TIM_OC2_SetConfig+0x104>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00b      	beq.n	800b698 <TIM_OC2_SetConfig+0xac>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a1c      	ldr	r2, [pc, #112]	; (800b6f4 <TIM_OC2_SetConfig+0x108>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d007      	beq.n	800b698 <TIM_OC2_SetConfig+0xac>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a1b      	ldr	r2, [pc, #108]	; (800b6f8 <TIM_OC2_SetConfig+0x10c>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d003      	beq.n	800b698 <TIM_OC2_SetConfig+0xac>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a1a      	ldr	r2, [pc, #104]	; (800b6fc <TIM_OC2_SetConfig+0x110>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d113      	bne.n	800b6c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b69e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	695b      	ldr	r3, [r3, #20]
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	feff8fff 	.word	0xfeff8fff
 800b6ec:	40010000 	.word	0x40010000
 800b6f0:	40010400 	.word	0x40010400
 800b6f4:	40014000 	.word	0x40014000
 800b6f8:	40014400 	.word	0x40014400
 800b6fc:	40014800 	.word	0x40014800

0800b700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b700:	b480      	push	{r7}
 800b702:	b087      	sub	sp, #28
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4b33      	ldr	r3, [pc, #204]	; (800b7f8 <TIM_OC3_SetConfig+0xf8>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f023 0303 	bic.w	r3, r3, #3
 800b736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	4313      	orrs	r3, r2
 800b754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a28      	ldr	r2, [pc, #160]	; (800b7fc <TIM_OC3_SetConfig+0xfc>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d003      	beq.n	800b766 <TIM_OC3_SetConfig+0x66>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a27      	ldr	r2, [pc, #156]	; (800b800 <TIM_OC3_SetConfig+0x100>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d10d      	bne.n	800b782 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b76c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	4313      	orrs	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a1d      	ldr	r2, [pc, #116]	; (800b7fc <TIM_OC3_SetConfig+0xfc>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00f      	beq.n	800b7aa <TIM_OC3_SetConfig+0xaa>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a1c      	ldr	r2, [pc, #112]	; (800b800 <TIM_OC3_SetConfig+0x100>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d00b      	beq.n	800b7aa <TIM_OC3_SetConfig+0xaa>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a1b      	ldr	r2, [pc, #108]	; (800b804 <TIM_OC3_SetConfig+0x104>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d007      	beq.n	800b7aa <TIM_OC3_SetConfig+0xaa>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <TIM_OC3_SetConfig+0x108>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d003      	beq.n	800b7aa <TIM_OC3_SetConfig+0xaa>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a19      	ldr	r2, [pc, #100]	; (800b80c <TIM_OC3_SetConfig+0x10c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d113      	bne.n	800b7d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	621a      	str	r2, [r3, #32]
}
 800b7ec:	bf00      	nop
 800b7ee:	371c      	adds	r7, #28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	fffeff8f 	.word	0xfffeff8f
 800b7fc:	40010000 	.word	0x40010000
 800b800:	40010400 	.word	0x40010400
 800b804:	40014000 	.word	0x40014000
 800b808:	40014400 	.word	0x40014400
 800b80c:	40014800 	.word	0x40014800

0800b810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b810:	b480      	push	{r7}
 800b812:	b087      	sub	sp, #28
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a1b      	ldr	r3, [r3, #32]
 800b82a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <TIM_OC4_SetConfig+0xbc>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	021b      	lsls	r3, r3, #8
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b85a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	031b      	lsls	r3, r3, #12
 800b862:	693a      	ldr	r2, [r7, #16]
 800b864:	4313      	orrs	r3, r2
 800b866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	4a19      	ldr	r2, [pc, #100]	; (800b8d0 <TIM_OC4_SetConfig+0xc0>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d00f      	beq.n	800b890 <TIM_OC4_SetConfig+0x80>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	4a18      	ldr	r2, [pc, #96]	; (800b8d4 <TIM_OC4_SetConfig+0xc4>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d00b      	beq.n	800b890 <TIM_OC4_SetConfig+0x80>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a17      	ldr	r2, [pc, #92]	; (800b8d8 <TIM_OC4_SetConfig+0xc8>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d007      	beq.n	800b890 <TIM_OC4_SetConfig+0x80>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a16      	ldr	r2, [pc, #88]	; (800b8dc <TIM_OC4_SetConfig+0xcc>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d003      	beq.n	800b890 <TIM_OC4_SetConfig+0x80>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a15      	ldr	r2, [pc, #84]	; (800b8e0 <TIM_OC4_SetConfig+0xd0>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d109      	bne.n	800b8a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	019b      	lsls	r3, r3, #6
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685a      	ldr	r2, [r3, #4]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	621a      	str	r2, [r3, #32]
}
 800b8be:	bf00      	nop
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	feff8fff 	.word	0xfeff8fff
 800b8d0:	40010000 	.word	0x40010000
 800b8d4:	40010400 	.word	0x40010400
 800b8d8:	40014000 	.word	0x40014000
 800b8dc:	40014400 	.word	0x40014400
 800b8e0:	40014800 	.word	0x40014800

0800b8e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	4b21      	ldr	r3, [pc, #132]	; (800b994 <TIM_OC5_SetConfig+0xb0>)
 800b910:	4013      	ands	r3, r2
 800b912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	041b      	lsls	r3, r3, #16
 800b92c:	693a      	ldr	r2, [r7, #16]
 800b92e:	4313      	orrs	r3, r2
 800b930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a18      	ldr	r2, [pc, #96]	; (800b998 <TIM_OC5_SetConfig+0xb4>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d00f      	beq.n	800b95a <TIM_OC5_SetConfig+0x76>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a17      	ldr	r2, [pc, #92]	; (800b99c <TIM_OC5_SetConfig+0xb8>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00b      	beq.n	800b95a <TIM_OC5_SetConfig+0x76>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a16      	ldr	r2, [pc, #88]	; (800b9a0 <TIM_OC5_SetConfig+0xbc>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d007      	beq.n	800b95a <TIM_OC5_SetConfig+0x76>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <TIM_OC5_SetConfig+0xc0>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d003      	beq.n	800b95a <TIM_OC5_SetConfig+0x76>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a14      	ldr	r2, [pc, #80]	; (800b9a8 <TIM_OC5_SetConfig+0xc4>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d109      	bne.n	800b96e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	021b      	lsls	r3, r3, #8
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	697a      	ldr	r2, [r7, #20]
 800b972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	621a      	str	r2, [r3, #32]
}
 800b988:	bf00      	nop
 800b98a:	371c      	adds	r7, #28
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	fffeff8f 	.word	0xfffeff8f
 800b998:	40010000 	.word	0x40010000
 800b99c:	40010400 	.word	0x40010400
 800b9a0:	40014000 	.word	0x40014000
 800b9a4:	40014400 	.word	0x40014400
 800b9a8:	40014800 	.word	0x40014800

0800b9ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1b      	ldr	r3, [r3, #32]
 800b9c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4b22      	ldr	r3, [pc, #136]	; (800ba60 <TIM_OC6_SetConfig+0xb4>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	051b      	lsls	r3, r3, #20
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a19      	ldr	r2, [pc, #100]	; (800ba64 <TIM_OC6_SetConfig+0xb8>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d00f      	beq.n	800ba24 <TIM_OC6_SetConfig+0x78>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a18      	ldr	r2, [pc, #96]	; (800ba68 <TIM_OC6_SetConfig+0xbc>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d00b      	beq.n	800ba24 <TIM_OC6_SetConfig+0x78>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a17      	ldr	r2, [pc, #92]	; (800ba6c <TIM_OC6_SetConfig+0xc0>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d007      	beq.n	800ba24 <TIM_OC6_SetConfig+0x78>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a16      	ldr	r2, [pc, #88]	; (800ba70 <TIM_OC6_SetConfig+0xc4>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d003      	beq.n	800ba24 <TIM_OC6_SetConfig+0x78>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a15      	ldr	r2, [pc, #84]	; (800ba74 <TIM_OC6_SetConfig+0xc8>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d109      	bne.n	800ba38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	029b      	lsls	r3, r3, #10
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685a      	ldr	r2, [r3, #4]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	693a      	ldr	r2, [r7, #16]
 800ba50:	621a      	str	r2, [r3, #32]
}
 800ba52:	bf00      	nop
 800ba54:	371c      	adds	r7, #28
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	feff8fff 	.word	0xfeff8fff
 800ba64:	40010000 	.word	0x40010000
 800ba68:	40010400 	.word	0x40010400
 800ba6c:	40014000 	.word	0x40014000
 800ba70:	40014400 	.word	0x40014400
 800ba74:	40014800 	.word	0x40014800

0800ba78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6a1b      	ldr	r3, [r3, #32]
 800ba88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	f023 0201 	bic.w	r2, r3, #1
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800baa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	011b      	lsls	r3, r3, #4
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	4313      	orrs	r3, r2
 800baac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f023 030a 	bic.w	r3, r3, #10
 800bab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4313      	orrs	r3, r2
 800babc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	621a      	str	r2, [r3, #32]
}
 800baca:	bf00      	nop
 800bacc:	371c      	adds	r7, #28
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b087      	sub	sp, #28
 800bada:	af00      	add	r7, sp, #0
 800badc:	60f8      	str	r0, [r7, #12]
 800bade:	60b9      	str	r1, [r7, #8]
 800bae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f023 0210 	bic.w	r2, r3, #16
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	699b      	ldr	r3, [r3, #24]
 800baf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	031b      	lsls	r3, r3, #12
 800bb06:	697a      	ldr	r2, [r7, #20]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	011b      	lsls	r3, r3, #4
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	621a      	str	r2, [r3, #32]
}
 800bb2a:	bf00      	nop
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
	...

0800bb38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <TIM_ITRx_SetConfig+0x38>)
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	f043 0307 	orr.w	r3, r3, #7
 800bb5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	609a      	str	r2, [r3, #8]
}
 800bb62:	bf00      	nop
 800bb64:	3714      	adds	r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	ffcfff8f 	.word	0xffcfff8f

0800bb74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b087      	sub	sp, #28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	021a      	lsls	r2, r3, #8
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	431a      	orrs	r2, r3
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	609a      	str	r2, [r3, #8]
}
 800bba8:	bf00      	nop
 800bbaa:	371c      	adds	r7, #28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f003 031f 	and.w	r3, r3, #31
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a1a      	ldr	r2, [r3, #32]
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	43db      	mvns	r3, r3
 800bbd6:	401a      	ands	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a1a      	ldr	r2, [r3, #32]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f003 031f 	and.w	r3, r3, #31
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbec:	431a      	orrs	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	621a      	str	r2, [r3, #32]
}
 800bbf2:	bf00      	nop
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
	...

0800bc00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d101      	bne.n	800bc18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc14:	2302      	movs	r3, #2
 800bc16:	e06d      	b.n	800bcf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2202      	movs	r2, #2
 800bc24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a30      	ldr	r2, [pc, #192]	; (800bd00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d004      	beq.n	800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a2f      	ldr	r2, [pc, #188]	; (800bd04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d108      	bne.n	800bc5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a20      	ldr	r2, [pc, #128]	; (800bd00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d022      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc8a:	d01d      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a1d      	ldr	r2, [pc, #116]	; (800bd08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d018      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a1c      	ldr	r2, [pc, #112]	; (800bd0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d013      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a1a      	ldr	r2, [pc, #104]	; (800bd10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00e      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a15      	ldr	r2, [pc, #84]	; (800bd04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d009      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a16      	ldr	r2, [pc, #88]	; (800bd14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a15      	ldr	r2, [pc, #84]	; (800bd18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d10c      	bne.n	800bce2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	40010000 	.word	0x40010000
 800bd04:	40010400 	.word	0x40010400
 800bd08:	40000400 	.word	0x40000400
 800bd0c:	40000800 	.word	0x40000800
 800bd10:	40000c00 	.word	0x40000c00
 800bd14:	40001800 	.word	0x40001800
 800bd18:	40014000 	.word	0x40014000

0800bd1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d101      	bne.n	800bd38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd34:	2302      	movs	r3, #2
 800bd36:	e065      	b.n	800be04 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	041b      	lsls	r3, r3, #16
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a16      	ldr	r2, [pc, #88]	; (800be10 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d004      	beq.n	800bdc6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a14      	ldr	r2, [pc, #80]	; (800be14 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d115      	bne.n	800bdf2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	051b      	lsls	r3, r3, #20
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	69db      	ldr	r3, [r3, #28]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	40010000 	.word	0x40010000
 800be14:	40010400 	.word	0x40010400

0800be18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e042      	b.n	800beec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d106      	bne.n	800be7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7f5 ffd3 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2224      	movs	r2, #36	; 0x24
 800be82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0201 	bic.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f8ba 	bl	800c010 <UART_SetConfig>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e022      	b.n	800beec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fe16 	bl	800cae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0201 	orr.w	r2, r2, #1
 800bee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fe9d 	bl	800cc24 <UART_CheckIdleState>
 800beea:	4603      	mov	r3, r0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af02      	add	r7, sp, #8
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	603b      	str	r3, [r7, #0]
 800bf00:	4613      	mov	r3, r2
 800bf02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0a:	2b20      	cmp	r3, #32
 800bf0c:	d17b      	bne.n	800c006 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <HAL_UART_Transmit+0x26>
 800bf14:	88fb      	ldrh	r3, [r7, #6]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d101      	bne.n	800bf1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e074      	b.n	800c008 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2221      	movs	r2, #33	; 0x21
 800bf2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf2e:	f7f6 f9bd 	bl	80022ac <HAL_GetTick>
 800bf32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	88fa      	ldrh	r2, [r7, #6]
 800bf38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	88fa      	ldrh	r2, [r7, #6]
 800bf40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf4c:	d108      	bne.n	800bf60 <HAL_UART_Transmit+0x6c>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d104      	bne.n	800bf60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf56:	2300      	movs	r3, #0
 800bf58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	61bb      	str	r3, [r7, #24]
 800bf5e:	e003      	b.n	800bf68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf68:	e030      	b.n	800bfcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2200      	movs	r2, #0
 800bf72:	2180      	movs	r1, #128	; 0x80
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f000 feff 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2220      	movs	r2, #32
 800bf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e03d      	b.n	800c008 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	461a      	mov	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	3302      	adds	r3, #2
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	e007      	b.n	800bfba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1c8      	bne.n	800bf6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	2140      	movs	r1, #64	; 0x40
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f000 fec8 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d005      	beq.n	800bffa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2220      	movs	r2, #32
 800bff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bff6:	2303      	movs	r3, #3
 800bff8:	e006      	b.n	800c008 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2220      	movs	r2, #32
 800bffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c002:	2300      	movs	r3, #0
 800c004:	e000      	b.n	800c008 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c006:	2302      	movs	r3, #2
  }
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3720      	adds	r7, #32
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c014:	b092      	sub	sp, #72	; 0x48
 800c016:	af00      	add	r7, sp, #0
 800c018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	431a      	orrs	r2, r3
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	431a      	orrs	r2, r3
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	4313      	orrs	r3, r2
 800c036:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	4bbe      	ldr	r3, [pc, #760]	; (800c338 <UART_SetConfig+0x328>)
 800c040:	4013      	ands	r3, r2
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c048:	430b      	orrs	r3, r1
 800c04a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4ab3      	ldr	r2, [pc, #716]	; (800c33c <UART_SetConfig+0x32c>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d004      	beq.n	800c07c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c078:	4313      	orrs	r3, r2
 800c07a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	4baf      	ldr	r3, [pc, #700]	; (800c340 <UART_SetConfig+0x330>)
 800c084:	4013      	ands	r3, r2
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	6812      	ldr	r2, [r2, #0]
 800c08a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c08c:	430b      	orrs	r3, r1
 800c08e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	f023 010f 	bic.w	r1, r3, #15
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4aa6      	ldr	r2, [pc, #664]	; (800c344 <UART_SetConfig+0x334>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d177      	bne.n	800c1a0 <UART_SetConfig+0x190>
 800c0b0:	4ba5      	ldr	r3, [pc, #660]	; (800c348 <UART_SetConfig+0x338>)
 800c0b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0b8:	2b28      	cmp	r3, #40	; 0x28
 800c0ba:	d86d      	bhi.n	800c198 <UART_SetConfig+0x188>
 800c0bc:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <UART_SetConfig+0xb4>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c169 	.word	0x0800c169
 800c0c8:	0800c199 	.word	0x0800c199
 800c0cc:	0800c199 	.word	0x0800c199
 800c0d0:	0800c199 	.word	0x0800c199
 800c0d4:	0800c199 	.word	0x0800c199
 800c0d8:	0800c199 	.word	0x0800c199
 800c0dc:	0800c199 	.word	0x0800c199
 800c0e0:	0800c199 	.word	0x0800c199
 800c0e4:	0800c171 	.word	0x0800c171
 800c0e8:	0800c199 	.word	0x0800c199
 800c0ec:	0800c199 	.word	0x0800c199
 800c0f0:	0800c199 	.word	0x0800c199
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c199 	.word	0x0800c199
 800c0fc:	0800c199 	.word	0x0800c199
 800c100:	0800c199 	.word	0x0800c199
 800c104:	0800c179 	.word	0x0800c179
 800c108:	0800c199 	.word	0x0800c199
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c199 	.word	0x0800c199
 800c114:	0800c199 	.word	0x0800c199
 800c118:	0800c199 	.word	0x0800c199
 800c11c:	0800c199 	.word	0x0800c199
 800c120:	0800c199 	.word	0x0800c199
 800c124:	0800c181 	.word	0x0800c181
 800c128:	0800c199 	.word	0x0800c199
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c199 	.word	0x0800c199
 800c13c:	0800c199 	.word	0x0800c199
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c189 	.word	0x0800c189
 800c148:	0800c199 	.word	0x0800c199
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c191 	.word	0x0800c191
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e222      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e21e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e21a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e216      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c188:	2320      	movs	r3, #32
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e212      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e20e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c198:	2380      	movs	r3, #128	; 0x80
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e20a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a69      	ldr	r2, [pc, #420]	; (800c34c <UART_SetConfig+0x33c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <UART_SetConfig+0x1fc>
 800c1aa:	4b67      	ldr	r3, [pc, #412]	; (800c348 <UART_SetConfig+0x338>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d826      	bhi.n	800c204 <UART_SetConfig+0x1f4>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <UART_SetConfig+0x1ac>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1dd 	.word	0x0800c1dd
 800c1c4:	0800c1e5 	.word	0x0800c1e5
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1da:	e1ec      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e1e8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1e4:	2308      	movs	r3, #8
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e1e4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e1e0      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e1dc      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1fc:	2340      	movs	r3, #64	; 0x40
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e1d8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c204:	2380      	movs	r3, #128	; 0x80
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e1d4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a4f      	ldr	r2, [pc, #316]	; (800c350 <UART_SetConfig+0x340>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d130      	bne.n	800c278 <UART_SetConfig+0x268>
 800c216:	4b4c      	ldr	r3, [pc, #304]	; (800c348 <UART_SetConfig+0x338>)
 800c218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d826      	bhi.n	800c270 <UART_SetConfig+0x260>
 800c222:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <UART_SetConfig+0x218>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c261 	.word	0x0800c261
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c246:	e1b6      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e1b2      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e1ae      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e1aa      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e1a6      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e1a2      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c270:	2380      	movs	r3, #128	; 0x80
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e19e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a35      	ldr	r2, [pc, #212]	; (800c354 <UART_SetConfig+0x344>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d130      	bne.n	800c2e4 <UART_SetConfig+0x2d4>
 800c282:	4b31      	ldr	r3, [pc, #196]	; (800c348 <UART_SetConfig+0x338>)
 800c284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d826      	bhi.n	800c2dc <UART_SetConfig+0x2cc>
 800c28e:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <UART_SetConfig+0x284>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b2:	e180      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ba:	e17c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c2:	e178      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e174      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e170      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e16c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e168      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a1b      	ldr	r2, [pc, #108]	; (800c358 <UART_SetConfig+0x348>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d142      	bne.n	800c374 <UART_SetConfig+0x364>
 800c2ee:	4b16      	ldr	r3, [pc, #88]	; (800c348 <UART_SetConfig+0x338>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d838      	bhi.n	800c36c <UART_SetConfig+0x35c>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <UART_SetConfig+0x2f0>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c319 	.word	0x0800c319
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c329 	.word	0x0800c329
 800c30c:	0800c331 	.word	0x0800c331
 800c310:	0800c35d 	.word	0x0800c35d
 800c314:	0800c365 	.word	0x0800c365
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31e:	e14a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c320:	2304      	movs	r3, #4
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c326:	e146      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c328:	2308      	movs	r3, #8
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32e:	e142      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c330:	2310      	movs	r3, #16
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e13e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c338:	cfff69f3 	.word	0xcfff69f3
 800c33c:	58000c00 	.word	0x58000c00
 800c340:	11fff4ff 	.word	0x11fff4ff
 800c344:	40011000 	.word	0x40011000
 800c348:	58024400 	.word	0x58024400
 800c34c:	40004400 	.word	0x40004400
 800c350:	40004800 	.word	0x40004800
 800c354:	40004c00 	.word	0x40004c00
 800c358:	40005000 	.word	0x40005000
 800c35c:	2320      	movs	r3, #32
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e128      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e124      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c36c:	2380      	movs	r3, #128	; 0x80
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e120      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4acb      	ldr	r2, [pc, #812]	; (800c6a8 <UART_SetConfig+0x698>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d176      	bne.n	800c46c <UART_SetConfig+0x45c>
 800c37e:	4bcb      	ldr	r3, [pc, #812]	; (800c6ac <UART_SetConfig+0x69c>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c386:	2b28      	cmp	r3, #40	; 0x28
 800c388:	d86c      	bhi.n	800c464 <UART_SetConfig+0x454>
 800c38a:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x380>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c465 	.word	0x0800c465
 800c398:	0800c465 	.word	0x0800c465
 800c39c:	0800c465 	.word	0x0800c465
 800c3a0:	0800c465 	.word	0x0800c465
 800c3a4:	0800c465 	.word	0x0800c465
 800c3a8:	0800c465 	.word	0x0800c465
 800c3ac:	0800c465 	.word	0x0800c465
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c465 	.word	0x0800c465
 800c3b8:	0800c465 	.word	0x0800c465
 800c3bc:	0800c465 	.word	0x0800c465
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c465 	.word	0x0800c465
 800c3c8:	0800c465 	.word	0x0800c465
 800c3cc:	0800c465 	.word	0x0800c465
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c465 	.word	0x0800c465
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c465 	.word	0x0800c465
 800c404:	0800c465 	.word	0x0800c465
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c455 	.word	0x0800c455
 800c414:	0800c465 	.word	0x0800c465
 800c418:	0800c465 	.word	0x0800c465
 800c41c:	0800c465 	.word	0x0800c465
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c465 	.word	0x0800c465
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e0bc      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e0b8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e0b4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e0b0      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e0ac      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c462:	e0a8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46a:	e0a4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a8f      	ldr	r2, [pc, #572]	; (800c6b0 <UART_SetConfig+0x6a0>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x4c8>
 800c476:	4b8d      	ldr	r3, [pc, #564]	; (800c6ac <UART_SetConfig+0x69c>)
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x4c0>
 800c482:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0x478>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e086      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e082      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b6:	e07e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4be:	e07a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e076      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e072      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e06e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a75      	ldr	r2, [pc, #468]	; (800c6b4 <UART_SetConfig+0x6a4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d130      	bne.n	800c544 <UART_SetConfig+0x534>
 800c4e2:	4b72      	ldr	r3, [pc, #456]	; (800c6ac <UART_SetConfig+0x69c>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d826      	bhi.n	800c53c <UART_SetConfig+0x52c>
 800c4ee:	a201      	add	r2, pc, #4	; (adr r2, 800c4f4 <UART_SetConfig+0x4e4>)
 800c4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f4:	0800c50d 	.word	0x0800c50d
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c51d 	.word	0x0800c51d
 800c500:	0800c525 	.word	0x0800c525
 800c504:	0800c52d 	.word	0x0800c52d
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c512:	e050      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c514:	2304      	movs	r3, #4
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51a:	e04c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c51c:	2308      	movs	r3, #8
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c522:	e048      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c524:	2310      	movs	r3, #16
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52a:	e044      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c52c:	2320      	movs	r3, #32
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e040      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e03c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c53c:	2380      	movs	r3, #128	; 0x80
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e038      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a5b      	ldr	r2, [pc, #364]	; (800c6b8 <UART_SetConfig+0x6a8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d130      	bne.n	800c5b0 <UART_SetConfig+0x5a0>
 800c54e:	4b57      	ldr	r3, [pc, #348]	; (800c6ac <UART_SetConfig+0x69c>)
 800c550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b05      	cmp	r3, #5
 800c558:	d826      	bhi.n	800c5a8 <UART_SetConfig+0x598>
 800c55a:	a201      	add	r2, pc, #4	; (adr r2, 800c560 <UART_SetConfig+0x550>)
 800c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c560:	0800c579 	.word	0x0800c579
 800c564:	0800c581 	.word	0x0800c581
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	2302      	movs	r3, #2
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57e:	e01a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c580:	2304      	movs	r3, #4
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e016      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c588:	2308      	movs	r3, #8
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e012      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c590:	2310      	movs	r3, #16
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e00e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c598:	2320      	movs	r3, #32
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e00a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5a0:	2340      	movs	r3, #64	; 0x40
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e006      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5a8:	2380      	movs	r3, #128	; 0x80
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e002      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5b0:	2380      	movs	r3, #128	; 0x80
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a3f      	ldr	r2, [pc, #252]	; (800c6b8 <UART_SetConfig+0x6a8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	f040 80f8 	bne.w	800c7b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5c6:	2b20      	cmp	r3, #32
 800c5c8:	dc46      	bgt.n	800c658 <UART_SetConfig+0x648>
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	f2c0 8082 	blt.w	800c6d4 <UART_SetConfig+0x6c4>
 800c5d0:	3b02      	subs	r3, #2
 800c5d2:	2b1e      	cmp	r3, #30
 800c5d4:	d87e      	bhi.n	800c6d4 <UART_SetConfig+0x6c4>
 800c5d6:	a201      	add	r2, pc, #4	; (adr r2, 800c5dc <UART_SetConfig+0x5cc>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c65f 	.word	0x0800c65f
 800c5e0:	0800c6d5 	.word	0x0800c6d5
 800c5e4:	0800c667 	.word	0x0800c667
 800c5e8:	0800c6d5 	.word	0x0800c6d5
 800c5ec:	0800c6d5 	.word	0x0800c6d5
 800c5f0:	0800c6d5 	.word	0x0800c6d5
 800c5f4:	0800c677 	.word	0x0800c677
 800c5f8:	0800c6d5 	.word	0x0800c6d5
 800c5fc:	0800c6d5 	.word	0x0800c6d5
 800c600:	0800c6d5 	.word	0x0800c6d5
 800c604:	0800c6d5 	.word	0x0800c6d5
 800c608:	0800c6d5 	.word	0x0800c6d5
 800c60c:	0800c6d5 	.word	0x0800c6d5
 800c610:	0800c6d5 	.word	0x0800c6d5
 800c614:	0800c687 	.word	0x0800c687
 800c618:	0800c6d5 	.word	0x0800c6d5
 800c61c:	0800c6d5 	.word	0x0800c6d5
 800c620:	0800c6d5 	.word	0x0800c6d5
 800c624:	0800c6d5 	.word	0x0800c6d5
 800c628:	0800c6d5 	.word	0x0800c6d5
 800c62c:	0800c6d5 	.word	0x0800c6d5
 800c630:	0800c6d5 	.word	0x0800c6d5
 800c634:	0800c6d5 	.word	0x0800c6d5
 800c638:	0800c6d5 	.word	0x0800c6d5
 800c63c:	0800c6d5 	.word	0x0800c6d5
 800c640:	0800c6d5 	.word	0x0800c6d5
 800c644:	0800c6d5 	.word	0x0800c6d5
 800c648:	0800c6d5 	.word	0x0800c6d5
 800c64c:	0800c6d5 	.word	0x0800c6d5
 800c650:	0800c6d5 	.word	0x0800c6d5
 800c654:	0800c6c7 	.word	0x0800c6c7
 800c658:	2b40      	cmp	r3, #64	; 0x40
 800c65a:	d037      	beq.n	800c6cc <UART_SetConfig+0x6bc>
 800c65c:	e03a      	b.n	800c6d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c65e:	f7fc fdd7 	bl	8009210 <HAL_RCCEx_GetD3PCLK1Freq>
 800c662:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c664:	e03c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fc fde6 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c674:	e034      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fc ff32 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c684:	e02c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c686:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <UART_SetConfig+0x69c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d016      	beq.n	800c6c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c692:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <UART_SetConfig+0x69c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	08db      	lsrs	r3, r3, #3
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	4a07      	ldr	r2, [pc, #28]	; (800c6bc <UART_SetConfig+0x6ac>)
 800c69e:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6a4:	e01c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
 800c6a6:	bf00      	nop
 800c6a8:	40011400 	.word	0x40011400
 800c6ac:	58024400 	.word	0x58024400
 800c6b0:	40007800 	.word	0x40007800
 800c6b4:	40007c00 	.word	0x40007c00
 800c6b8:	58000c00 	.word	0x58000c00
 800c6bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6c0:	4b9d      	ldr	r3, [pc, #628]	; (800c938 <UART_SetConfig+0x928>)
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e00c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6c6:	4b9d      	ldr	r3, [pc, #628]	; (800c93c <UART_SetConfig+0x92c>)
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ca:	e009      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d2:	e005      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 81de 	beq.w	800caa4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	4a94      	ldr	r2, [pc, #592]	; (800c940 <UART_SetConfig+0x930>)
 800c6ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c708:	429a      	cmp	r2, r3
 800c70a:	d305      	bcc.n	800c718 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c714:	429a      	cmp	r2, r3
 800c716:	d903      	bls.n	800c720 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c71e:	e1c1      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c722:	2200      	movs	r2, #0
 800c724:	60bb      	str	r3, [r7, #8]
 800c726:	60fa      	str	r2, [r7, #12]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	4a84      	ldr	r2, [pc, #528]	; (800c940 <UART_SetConfig+0x930>)
 800c72e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c732:	b29b      	uxth	r3, r3
 800c734:	2200      	movs	r2, #0
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	607a      	str	r2, [r7, #4]
 800c73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c742:	f7f3 fe25 	bl	8000390 <__aeabi_uldivmod>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4610      	mov	r0, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	020b      	lsls	r3, r1, #8
 800c758:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c75c:	0202      	lsls	r2, r0, #8
 800c75e:	6979      	ldr	r1, [r7, #20]
 800c760:	6849      	ldr	r1, [r1, #4]
 800c762:	0849      	lsrs	r1, r1, #1
 800c764:	2000      	movs	r0, #0
 800c766:	460c      	mov	r4, r1
 800c768:	4605      	mov	r5, r0
 800c76a:	eb12 0804 	adds.w	r8, r2, r4
 800c76e:	eb43 0905 	adc.w	r9, r3, r5
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	469a      	mov	sl, r3
 800c77a:	4693      	mov	fp, r2
 800c77c:	4652      	mov	r2, sl
 800c77e:	465b      	mov	r3, fp
 800c780:	4640      	mov	r0, r8
 800c782:	4649      	mov	r1, r9
 800c784:	f7f3 fe04 	bl	8000390 <__aeabi_uldivmod>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	4613      	mov	r3, r2
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c796:	d308      	bcc.n	800c7aa <UART_SetConfig+0x79a>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c79e:	d204      	bcs.n	800c7aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a6:	60da      	str	r2, [r3, #12]
 800c7a8:	e17c      	b.n	800caa4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c7b0:	e178      	b.n	800caa4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7ba:	f040 80c5 	bne.w	800c948 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c7be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	dc48      	bgt.n	800c858 <UART_SetConfig+0x848>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db7b      	blt.n	800c8c2 <UART_SetConfig+0x8b2>
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d879      	bhi.n	800c8c2 <UART_SetConfig+0x8b2>
 800c7ce:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <UART_SetConfig+0x7c4>)
 800c7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d4:	0800c85f 	.word	0x0800c85f
 800c7d8:	0800c867 	.word	0x0800c867
 800c7dc:	0800c8c3 	.word	0x0800c8c3
 800c7e0:	0800c8c3 	.word	0x0800c8c3
 800c7e4:	0800c86f 	.word	0x0800c86f
 800c7e8:	0800c8c3 	.word	0x0800c8c3
 800c7ec:	0800c8c3 	.word	0x0800c8c3
 800c7f0:	0800c8c3 	.word	0x0800c8c3
 800c7f4:	0800c87f 	.word	0x0800c87f
 800c7f8:	0800c8c3 	.word	0x0800c8c3
 800c7fc:	0800c8c3 	.word	0x0800c8c3
 800c800:	0800c8c3 	.word	0x0800c8c3
 800c804:	0800c8c3 	.word	0x0800c8c3
 800c808:	0800c8c3 	.word	0x0800c8c3
 800c80c:	0800c8c3 	.word	0x0800c8c3
 800c810:	0800c8c3 	.word	0x0800c8c3
 800c814:	0800c88f 	.word	0x0800c88f
 800c818:	0800c8c3 	.word	0x0800c8c3
 800c81c:	0800c8c3 	.word	0x0800c8c3
 800c820:	0800c8c3 	.word	0x0800c8c3
 800c824:	0800c8c3 	.word	0x0800c8c3
 800c828:	0800c8c3 	.word	0x0800c8c3
 800c82c:	0800c8c3 	.word	0x0800c8c3
 800c830:	0800c8c3 	.word	0x0800c8c3
 800c834:	0800c8c3 	.word	0x0800c8c3
 800c838:	0800c8c3 	.word	0x0800c8c3
 800c83c:	0800c8c3 	.word	0x0800c8c3
 800c840:	0800c8c3 	.word	0x0800c8c3
 800c844:	0800c8c3 	.word	0x0800c8c3
 800c848:	0800c8c3 	.word	0x0800c8c3
 800c84c:	0800c8c3 	.word	0x0800c8c3
 800c850:	0800c8c3 	.word	0x0800c8c3
 800c854:	0800c8b5 	.word	0x0800c8b5
 800c858:	2b40      	cmp	r3, #64	; 0x40
 800c85a:	d02e      	beq.n	800c8ba <UART_SetConfig+0x8aa>
 800c85c:	e031      	b.n	800c8c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c85e:	f7fa fd21 	bl	80072a4 <HAL_RCC_GetPCLK1Freq>
 800c862:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c864:	e033      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c866:	f7fa fd33 	bl	80072d0 <HAL_RCC_GetPCLK2Freq>
 800c86a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c86c:	e02f      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c86e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c872:	4618      	mov	r0, r3
 800c874:	f7fc fce2 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87c:	e027      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c87e:	f107 0318 	add.w	r3, r7, #24
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc fe2e 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e01f      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c88e:	4b2d      	ldr	r3, [pc, #180]	; (800c944 <UART_SetConfig+0x934>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c89a:	4b2a      	ldr	r3, [pc, #168]	; (800c944 <UART_SetConfig+0x934>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	08db      	lsrs	r3, r3, #3
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	4a24      	ldr	r2, [pc, #144]	; (800c938 <UART_SetConfig+0x928>)
 800c8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8ac:	e00f      	b.n	800c8ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8ae:	4b22      	ldr	r3, [pc, #136]	; (800c938 <UART_SetConfig+0x928>)
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	e00c      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8b4:	4b21      	ldr	r3, [pc, #132]	; (800c93c <UART_SetConfig+0x92c>)
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b8:	e009      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	e005      	b.n	800c8ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c8cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80e7 	beq.w	800caa4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	4a19      	ldr	r2, [pc, #100]	; (800c940 <UART_SetConfig+0x930>)
 800c8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e8:	005a      	lsls	r2, r3, #1
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	085b      	lsrs	r3, r3, #1
 800c8f0:	441a      	add	r2, r3
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fe:	2b0f      	cmp	r3, #15
 800c900:	d916      	bls.n	800c930 <UART_SetConfig+0x920>
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c908:	d212      	bcs.n	800c930 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f023 030f 	bic.w	r3, r3, #15
 800c912:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	085b      	lsrs	r3, r3, #1
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f003 0307 	and.w	r3, r3, #7
 800c91e:	b29a      	uxth	r2, r3
 800c920:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c922:	4313      	orrs	r3, r2
 800c924:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c92c:	60da      	str	r2, [r3, #12]
 800c92e:	e0b9      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c936:	e0b5      	b.n	800caa4 <UART_SetConfig+0xa94>
 800c938:	03d09000 	.word	0x03d09000
 800c93c:	003d0900 	.word	0x003d0900
 800c940:	0800dab4 	.word	0x0800dab4
 800c944:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c948:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c94c:	2b20      	cmp	r3, #32
 800c94e:	dc49      	bgt.n	800c9e4 <UART_SetConfig+0x9d4>
 800c950:	2b00      	cmp	r3, #0
 800c952:	db7c      	blt.n	800ca4e <UART_SetConfig+0xa3e>
 800c954:	2b20      	cmp	r3, #32
 800c956:	d87a      	bhi.n	800ca4e <UART_SetConfig+0xa3e>
 800c958:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <UART_SetConfig+0x950>)
 800c95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95e:	bf00      	nop
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800c9f3 	.word	0x0800c9f3
 800c968:	0800ca4f 	.word	0x0800ca4f
 800c96c:	0800ca4f 	.word	0x0800ca4f
 800c970:	0800c9fb 	.word	0x0800c9fb
 800c974:	0800ca4f 	.word	0x0800ca4f
 800c978:	0800ca4f 	.word	0x0800ca4f
 800c97c:	0800ca4f 	.word	0x0800ca4f
 800c980:	0800ca0b 	.word	0x0800ca0b
 800c984:	0800ca4f 	.word	0x0800ca4f
 800c988:	0800ca4f 	.word	0x0800ca4f
 800c98c:	0800ca4f 	.word	0x0800ca4f
 800c990:	0800ca4f 	.word	0x0800ca4f
 800c994:	0800ca4f 	.word	0x0800ca4f
 800c998:	0800ca4f 	.word	0x0800ca4f
 800c99c:	0800ca4f 	.word	0x0800ca4f
 800c9a0:	0800ca1b 	.word	0x0800ca1b
 800c9a4:	0800ca4f 	.word	0x0800ca4f
 800c9a8:	0800ca4f 	.word	0x0800ca4f
 800c9ac:	0800ca4f 	.word	0x0800ca4f
 800c9b0:	0800ca4f 	.word	0x0800ca4f
 800c9b4:	0800ca4f 	.word	0x0800ca4f
 800c9b8:	0800ca4f 	.word	0x0800ca4f
 800c9bc:	0800ca4f 	.word	0x0800ca4f
 800c9c0:	0800ca4f 	.word	0x0800ca4f
 800c9c4:	0800ca4f 	.word	0x0800ca4f
 800c9c8:	0800ca4f 	.word	0x0800ca4f
 800c9cc:	0800ca4f 	.word	0x0800ca4f
 800c9d0:	0800ca4f 	.word	0x0800ca4f
 800c9d4:	0800ca4f 	.word	0x0800ca4f
 800c9d8:	0800ca4f 	.word	0x0800ca4f
 800c9dc:	0800ca4f 	.word	0x0800ca4f
 800c9e0:	0800ca41 	.word	0x0800ca41
 800c9e4:	2b40      	cmp	r3, #64	; 0x40
 800c9e6:	d02e      	beq.n	800ca46 <UART_SetConfig+0xa36>
 800c9e8:	e031      	b.n	800ca4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9ea:	f7fa fc5b 	bl	80072a4 <HAL_RCC_GetPCLK1Freq>
 800c9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9f0:	e033      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9f2:	f7fa fc6d 	bl	80072d0 <HAL_RCC_GetPCLK2Freq>
 800c9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9f8:	e02f      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fc fc1c 	bl	800923c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca08:	e027      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca0a:	f107 0318 	add.w	r3, r7, #24
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fc fd68 	bl	80094e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca18:	e01f      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca1a:	4b2d      	ldr	r3, [pc, #180]	; (800cad0 <UART_SetConfig+0xac0>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca26:	4b2a      	ldr	r3, [pc, #168]	; (800cad0 <UART_SetConfig+0xac0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	08db      	lsrs	r3, r3, #3
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	4a28      	ldr	r2, [pc, #160]	; (800cad4 <UART_SetConfig+0xac4>)
 800ca32:	fa22 f303 	lsr.w	r3, r2, r3
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca38:	e00f      	b.n	800ca5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca3a:	4b26      	ldr	r3, [pc, #152]	; (800cad4 <UART_SetConfig+0xac4>)
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3e:	e00c      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca40:	4b25      	ldr	r3, [pc, #148]	; (800cad8 <UART_SetConfig+0xac8>)
 800ca42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca44:	e009      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4c:	e005      	b.n	800ca5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca58:	bf00      	nop
    }

    if (pclk != 0U)
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d021      	beq.n	800caa4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	4a1d      	ldr	r2, [pc, #116]	; (800cadc <UART_SetConfig+0xacc>)
 800ca66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	085b      	lsrs	r3, r3, #1
 800ca78:	441a      	add	r2, r3
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d909      	bls.n	800ca9e <UART_SetConfig+0xa8e>
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca90:	d205      	bcs.n	800ca9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	e002      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2201      	movs	r2, #1
 800cab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	2200      	movs	r2, #0
 800cab8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2200      	movs	r2, #0
 800cabe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cac0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3748      	adds	r7, #72	; 0x48
 800cac8:	46bd      	mov	sp, r7
 800caca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cace:	bf00      	nop
 800cad0:	58024400 	.word	0x58024400
 800cad4:	03d09000 	.word	0x03d09000
 800cad8:	003d0900 	.word	0x003d0900
 800cadc:	0800dab4 	.word	0x0800dab4

0800cae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00a      	beq.n	800cb0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00a      	beq.n	800cb2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	f003 0308 	and.w	r3, r3, #8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb74:	f003 0310 	and.w	r3, r3, #16
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00a      	beq.n	800cb92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01a      	beq.n	800cbf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbde:	d10a      	bne.n	800cbf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	430a      	orrs	r2, r1
 800cc16:	605a      	str	r2, [r3, #4]
  }
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b098      	sub	sp, #96	; 0x60
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc34:	f7f5 fb3a 	bl	80022ac <HAL_GetTick>
 800cc38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0308 	and.w	r3, r3, #8
 800cc44:	2b08      	cmp	r3, #8
 800cc46:	d12f      	bne.n	800cca8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc50:	2200      	movs	r2, #0
 800cc52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f88e 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d022      	beq.n	800cca8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	e853 3f00 	ldrex	r3, [r3]
 800cc6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc76:	653b      	str	r3, [r7, #80]	; 0x50
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc80:	647b      	str	r3, [r7, #68]	; 0x44
 800cc82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e6      	bne.n	800cc62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2220      	movs	r2, #32
 800cc98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	e063      	b.n	800cd70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b04      	cmp	r3, #4
 800ccb4:	d149      	bne.n	800cd4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f857 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d03c      	beq.n	800cd4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	623b      	str	r3, [r7, #32]
   return(result);
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccee:	633b      	str	r3, [r7, #48]	; 0x30
 800ccf0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e6      	bne.n	800ccd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3308      	adds	r3, #8
 800cd08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f023 0301 	bic.w	r3, r3, #1
 800cd18:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd22:	61fa      	str	r2, [r7, #28]
 800cd24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	69b9      	ldr	r1, [r7, #24]
 800cd28:	69fa      	ldr	r2, [r7, #28]
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	617b      	str	r3, [r7, #20]
   return(result);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e5      	bne.n	800cd02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd46:	2303      	movs	r3, #3
 800cd48:	e012      	b.n	800cd70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3758      	adds	r7, #88	; 0x58
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd88:	e049      	b.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd90:	d045      	beq.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd92:	f7f5 fa8b 	bl	80022ac <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d302      	bcc.n	800cda8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e048      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d031      	beq.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d110      	bne.n	800cdea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2208      	movs	r2, #8
 800cdce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f839 	bl	800ce48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2208      	movs	r2, #8
 800cdda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e029      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	69db      	ldr	r3, [r3, #28]
 800cdf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdf8:	d111      	bne.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f81f 	bl	800ce48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e00f      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69da      	ldr	r2, [r3, #28]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	4013      	ands	r3, r2
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	bf0c      	ite	eq
 800ce2e:	2301      	moveq	r3, #1
 800ce30:	2300      	movne	r3, #0
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	461a      	mov	r2, r3
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d0a6      	beq.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b095      	sub	sp, #84	; 0x54
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce58:	e853 3f00 	ldrex	r3, [r3]
 800ce5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ce70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e6      	bne.n	800ce50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3308      	adds	r3, #8
 800ce88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	e853 3f00 	ldrex	r3, [r3]
 800ce90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	4b1e      	ldr	r3, [pc, #120]	; (800cf10 <UART_EndRxTransfer+0xc8>)
 800ce96:	4013      	ands	r3, r2
 800ce98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cea2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cea4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cea8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e5      	bne.n	800ce82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d118      	bne.n	800cef0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	e853 3f00 	ldrex	r3, [r3]
 800ceca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f023 0310 	bic.w	r3, r3, #16
 800ced2:	647b      	str	r3, [r7, #68]	; 0x44
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cedc:	61bb      	str	r3, [r7, #24]
 800cede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	6979      	ldr	r1, [r7, #20]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	e841 2300 	strex	r3, r2, [r1]
 800cee8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e6      	bne.n	800cebe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2220      	movs	r2, #32
 800cef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf04:	bf00      	nop
 800cf06:	3754      	adds	r7, #84	; 0x54
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	effffffe 	.word	0xeffffffe

0800cf14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d101      	bne.n	800cf2a <HAL_UARTEx_DisableFifoMode+0x16>
 800cf26:	2302      	movs	r3, #2
 800cf28:	e027      	b.n	800cf7a <HAL_UARTEx_DisableFifoMode+0x66>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2224      	movs	r2, #36	; 0x24
 800cf36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f022 0201 	bic.w	r2, r2, #1
 800cf50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
 800cf8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d101      	bne.n	800cf9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf9a:	2302      	movs	r3, #2
 800cf9c:	e02d      	b.n	800cffa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2224      	movs	r2, #36	; 0x24
 800cfaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	681a      	ldr	r2, [r3, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f022 0201 	bic.w	r2, r2, #1
 800cfc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	430a      	orrs	r2, r1
 800cfd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f850 	bl	800d080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2220      	movs	r2, #32
 800cfec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d016:	2302      	movs	r3, #2
 800d018:	e02d      	b.n	800d076 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2224      	movs	r2, #36	; 0x24
 800d026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f022 0201 	bic.w	r2, r2, #1
 800d040:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	430a      	orrs	r2, r1
 800d054:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f812 	bl	800d080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	68fa      	ldr	r2, [r7, #12]
 800d062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d108      	bne.n	800d0a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0a0:	e031      	b.n	800d106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0a2:	2310      	movs	r3, #16
 800d0a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0a6:	2310      	movs	r3, #16
 800d0a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	0e5b      	lsrs	r3, r3, #25
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	f003 0307 	and.w	r3, r3, #7
 800d0b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	0f5b      	lsrs	r3, r3, #29
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0307 	and.w	r3, r3, #7
 800d0c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0ca:	7bbb      	ldrb	r3, [r7, #14]
 800d0cc:	7b3a      	ldrb	r2, [r7, #12]
 800d0ce:	4911      	ldr	r1, [pc, #68]	; (800d114 <UARTEx_SetNbDataToProcess+0x94>)
 800d0d0:	5c8a      	ldrb	r2, [r1, r2]
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0d6:	7b3a      	ldrb	r2, [r7, #12]
 800d0d8:	490f      	ldr	r1, [pc, #60]	; (800d118 <UARTEx_SetNbDataToProcess+0x98>)
 800d0da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	7b7a      	ldrb	r2, [r7, #13]
 800d0ec:	4909      	ldr	r1, [pc, #36]	; (800d114 <UARTEx_SetNbDataToProcess+0x94>)
 800d0ee:	5c8a      	ldrb	r2, [r1, r2]
 800d0f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d0f4:	7b7a      	ldrb	r2, [r7, #13]
 800d0f6:	4908      	ldr	r1, [pc, #32]	; (800d118 <UARTEx_SetNbDataToProcess+0x98>)
 800d0f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d106:	bf00      	nop
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	0800dacc 	.word	0x0800dacc
 800d118:	0800dad4 	.word	0x0800dad4

0800d11c <__errno>:
 800d11c:	4b01      	ldr	r3, [pc, #4]	; (800d124 <__errno+0x8>)
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	24000014 	.word	0x24000014

0800d128 <__libc_init_array>:
 800d128:	b570      	push	{r4, r5, r6, lr}
 800d12a:	4d0d      	ldr	r5, [pc, #52]	; (800d160 <__libc_init_array+0x38>)
 800d12c:	4c0d      	ldr	r4, [pc, #52]	; (800d164 <__libc_init_array+0x3c>)
 800d12e:	1b64      	subs	r4, r4, r5
 800d130:	10a4      	asrs	r4, r4, #2
 800d132:	2600      	movs	r6, #0
 800d134:	42a6      	cmp	r6, r4
 800d136:	d109      	bne.n	800d14c <__libc_init_array+0x24>
 800d138:	4d0b      	ldr	r5, [pc, #44]	; (800d168 <__libc_init_array+0x40>)
 800d13a:	4c0c      	ldr	r4, [pc, #48]	; (800d16c <__libc_init_array+0x44>)
 800d13c:	f000 fc9c 	bl	800da78 <_init>
 800d140:	1b64      	subs	r4, r4, r5
 800d142:	10a4      	asrs	r4, r4, #2
 800d144:	2600      	movs	r6, #0
 800d146:	42a6      	cmp	r6, r4
 800d148:	d105      	bne.n	800d156 <__libc_init_array+0x2e>
 800d14a:	bd70      	pop	{r4, r5, r6, pc}
 800d14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d150:	4798      	blx	r3
 800d152:	3601      	adds	r6, #1
 800d154:	e7ee      	b.n	800d134 <__libc_init_array+0xc>
 800d156:	f855 3b04 	ldr.w	r3, [r5], #4
 800d15a:	4798      	blx	r3
 800d15c:	3601      	adds	r6, #1
 800d15e:	e7f2      	b.n	800d146 <__libc_init_array+0x1e>
 800d160:	0800db18 	.word	0x0800db18
 800d164:	0800db18 	.word	0x0800db18
 800d168:	0800db18 	.word	0x0800db18
 800d16c:	0800db1c 	.word	0x0800db1c

0800d170 <memset>:
 800d170:	4402      	add	r2, r0
 800d172:	4603      	mov	r3, r0
 800d174:	4293      	cmp	r3, r2
 800d176:	d100      	bne.n	800d17a <memset+0xa>
 800d178:	4770      	bx	lr
 800d17a:	f803 1b01 	strb.w	r1, [r3], #1
 800d17e:	e7f9      	b.n	800d174 <memset+0x4>

0800d180 <siprintf>:
 800d180:	b40e      	push	{r1, r2, r3}
 800d182:	b500      	push	{lr}
 800d184:	b09c      	sub	sp, #112	; 0x70
 800d186:	ab1d      	add	r3, sp, #116	; 0x74
 800d188:	9002      	str	r0, [sp, #8]
 800d18a:	9006      	str	r0, [sp, #24]
 800d18c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d190:	4809      	ldr	r0, [pc, #36]	; (800d1b8 <siprintf+0x38>)
 800d192:	9107      	str	r1, [sp, #28]
 800d194:	9104      	str	r1, [sp, #16]
 800d196:	4909      	ldr	r1, [pc, #36]	; (800d1bc <siprintf+0x3c>)
 800d198:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19c:	9105      	str	r1, [sp, #20]
 800d19e:	6800      	ldr	r0, [r0, #0]
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	a902      	add	r1, sp, #8
 800d1a4:	f000 f876 	bl	800d294 <_svfiprintf_r>
 800d1a8:	9b02      	ldr	r3, [sp, #8]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	b01c      	add	sp, #112	; 0x70
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	b003      	add	sp, #12
 800d1b6:	4770      	bx	lr
 800d1b8:	24000014 	.word	0x24000014
 800d1bc:	ffff0208 	.word	0xffff0208

0800d1c0 <strcat>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	7814      	ldrb	r4, [r2, #0]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	3201      	adds	r2, #1
 800d1ca:	2c00      	cmp	r4, #0
 800d1cc:	d1fa      	bne.n	800d1c4 <strcat+0x4>
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d1f9      	bne.n	800d1d0 <strcat+0x10>
 800d1dc:	bd10      	pop	{r4, pc}

0800d1de <__ssputs_r>:
 800d1de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e2:	688e      	ldr	r6, [r1, #8]
 800d1e4:	429e      	cmp	r6, r3
 800d1e6:	4682      	mov	sl, r0
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	4690      	mov	r8, r2
 800d1ec:	461f      	mov	r7, r3
 800d1ee:	d838      	bhi.n	800d262 <__ssputs_r+0x84>
 800d1f0:	898a      	ldrh	r2, [r1, #12]
 800d1f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1f6:	d032      	beq.n	800d25e <__ssputs_r+0x80>
 800d1f8:	6825      	ldr	r5, [r4, #0]
 800d1fa:	6909      	ldr	r1, [r1, #16]
 800d1fc:	eba5 0901 	sub.w	r9, r5, r1
 800d200:	6965      	ldr	r5, [r4, #20]
 800d202:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d206:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d20a:	3301      	adds	r3, #1
 800d20c:	444b      	add	r3, r9
 800d20e:	106d      	asrs	r5, r5, #1
 800d210:	429d      	cmp	r5, r3
 800d212:	bf38      	it	cc
 800d214:	461d      	movcc	r5, r3
 800d216:	0553      	lsls	r3, r2, #21
 800d218:	d531      	bpl.n	800d27e <__ssputs_r+0xa0>
 800d21a:	4629      	mov	r1, r5
 800d21c:	f000 fb62 	bl	800d8e4 <_malloc_r>
 800d220:	4606      	mov	r6, r0
 800d222:	b950      	cbnz	r0, 800d23a <__ssputs_r+0x5c>
 800d224:	230c      	movs	r3, #12
 800d226:	f8ca 3000 	str.w	r3, [sl]
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	f04f 30ff 	mov.w	r0, #4294967295
 800d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23a:	6921      	ldr	r1, [r4, #16]
 800d23c:	464a      	mov	r2, r9
 800d23e:	f000 fabd 	bl	800d7bc <memcpy>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d24c:	81a3      	strh	r3, [r4, #12]
 800d24e:	6126      	str	r6, [r4, #16]
 800d250:	6165      	str	r5, [r4, #20]
 800d252:	444e      	add	r6, r9
 800d254:	eba5 0509 	sub.w	r5, r5, r9
 800d258:	6026      	str	r6, [r4, #0]
 800d25a:	60a5      	str	r5, [r4, #8]
 800d25c:	463e      	mov	r6, r7
 800d25e:	42be      	cmp	r6, r7
 800d260:	d900      	bls.n	800d264 <__ssputs_r+0x86>
 800d262:	463e      	mov	r6, r7
 800d264:	6820      	ldr	r0, [r4, #0]
 800d266:	4632      	mov	r2, r6
 800d268:	4641      	mov	r1, r8
 800d26a:	f000 fab5 	bl	800d7d8 <memmove>
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	1b9b      	subs	r3, r3, r6
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	4433      	add	r3, r6
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	2000      	movs	r0, #0
 800d27c:	e7db      	b.n	800d236 <__ssputs_r+0x58>
 800d27e:	462a      	mov	r2, r5
 800d280:	f000 fba4 	bl	800d9cc <_realloc_r>
 800d284:	4606      	mov	r6, r0
 800d286:	2800      	cmp	r0, #0
 800d288:	d1e1      	bne.n	800d24e <__ssputs_r+0x70>
 800d28a:	6921      	ldr	r1, [r4, #16]
 800d28c:	4650      	mov	r0, sl
 800d28e:	f000 fabd 	bl	800d80c <_free_r>
 800d292:	e7c7      	b.n	800d224 <__ssputs_r+0x46>

0800d294 <_svfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	4698      	mov	r8, r3
 800d29a:	898b      	ldrh	r3, [r1, #12]
 800d29c:	061b      	lsls	r3, r3, #24
 800d29e:	b09d      	sub	sp, #116	; 0x74
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	460d      	mov	r5, r1
 800d2a4:	4614      	mov	r4, r2
 800d2a6:	d50e      	bpl.n	800d2c6 <_svfiprintf_r+0x32>
 800d2a8:	690b      	ldr	r3, [r1, #16]
 800d2aa:	b963      	cbnz	r3, 800d2c6 <_svfiprintf_r+0x32>
 800d2ac:	2140      	movs	r1, #64	; 0x40
 800d2ae:	f000 fb19 	bl	800d8e4 <_malloc_r>
 800d2b2:	6028      	str	r0, [r5, #0]
 800d2b4:	6128      	str	r0, [r5, #16]
 800d2b6:	b920      	cbnz	r0, 800d2c2 <_svfiprintf_r+0x2e>
 800d2b8:	230c      	movs	r3, #12
 800d2ba:	603b      	str	r3, [r7, #0]
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	e0d1      	b.n	800d466 <_svfiprintf_r+0x1d2>
 800d2c2:	2340      	movs	r3, #64	; 0x40
 800d2c4:	616b      	str	r3, [r5, #20]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2ca:	2320      	movs	r3, #32
 800d2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2d4:	2330      	movs	r3, #48	; 0x30
 800d2d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d480 <_svfiprintf_r+0x1ec>
 800d2da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2de:	f04f 0901 	mov.w	r9, #1
 800d2e2:	4623      	mov	r3, r4
 800d2e4:	469a      	mov	sl, r3
 800d2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ea:	b10a      	cbz	r2, 800d2f0 <_svfiprintf_r+0x5c>
 800d2ec:	2a25      	cmp	r2, #37	; 0x25
 800d2ee:	d1f9      	bne.n	800d2e4 <_svfiprintf_r+0x50>
 800d2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d2f4:	d00b      	beq.n	800d30e <_svfiprintf_r+0x7a>
 800d2f6:	465b      	mov	r3, fp
 800d2f8:	4622      	mov	r2, r4
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	4638      	mov	r0, r7
 800d2fe:	f7ff ff6e 	bl	800d1de <__ssputs_r>
 800d302:	3001      	adds	r0, #1
 800d304:	f000 80aa 	beq.w	800d45c <_svfiprintf_r+0x1c8>
 800d308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d30a:	445a      	add	r2, fp
 800d30c:	9209      	str	r2, [sp, #36]	; 0x24
 800d30e:	f89a 3000 	ldrb.w	r3, [sl]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 80a2 	beq.w	800d45c <_svfiprintf_r+0x1c8>
 800d318:	2300      	movs	r3, #0
 800d31a:	f04f 32ff 	mov.w	r2, #4294967295
 800d31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d322:	f10a 0a01 	add.w	sl, sl, #1
 800d326:	9304      	str	r3, [sp, #16]
 800d328:	9307      	str	r3, [sp, #28]
 800d32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d32e:	931a      	str	r3, [sp, #104]	; 0x68
 800d330:	4654      	mov	r4, sl
 800d332:	2205      	movs	r2, #5
 800d334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d338:	4851      	ldr	r0, [pc, #324]	; (800d480 <_svfiprintf_r+0x1ec>)
 800d33a:	f7f2 ffd9 	bl	80002f0 <memchr>
 800d33e:	9a04      	ldr	r2, [sp, #16]
 800d340:	b9d8      	cbnz	r0, 800d37a <_svfiprintf_r+0xe6>
 800d342:	06d0      	lsls	r0, r2, #27
 800d344:	bf44      	itt	mi
 800d346:	2320      	movmi	r3, #32
 800d348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34c:	0711      	lsls	r1, r2, #28
 800d34e:	bf44      	itt	mi
 800d350:	232b      	movmi	r3, #43	; 0x2b
 800d352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d356:	f89a 3000 	ldrb.w	r3, [sl]
 800d35a:	2b2a      	cmp	r3, #42	; 0x2a
 800d35c:	d015      	beq.n	800d38a <_svfiprintf_r+0xf6>
 800d35e:	9a07      	ldr	r2, [sp, #28]
 800d360:	4654      	mov	r4, sl
 800d362:	2000      	movs	r0, #0
 800d364:	f04f 0c0a 	mov.w	ip, #10
 800d368:	4621      	mov	r1, r4
 800d36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d36e:	3b30      	subs	r3, #48	; 0x30
 800d370:	2b09      	cmp	r3, #9
 800d372:	d94e      	bls.n	800d412 <_svfiprintf_r+0x17e>
 800d374:	b1b0      	cbz	r0, 800d3a4 <_svfiprintf_r+0x110>
 800d376:	9207      	str	r2, [sp, #28]
 800d378:	e014      	b.n	800d3a4 <_svfiprintf_r+0x110>
 800d37a:	eba0 0308 	sub.w	r3, r0, r8
 800d37e:	fa09 f303 	lsl.w	r3, r9, r3
 800d382:	4313      	orrs	r3, r2
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	46a2      	mov	sl, r4
 800d388:	e7d2      	b.n	800d330 <_svfiprintf_r+0x9c>
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	1d19      	adds	r1, r3, #4
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	9103      	str	r1, [sp, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	bfbb      	ittet	lt
 800d396:	425b      	neglt	r3, r3
 800d398:	f042 0202 	orrlt.w	r2, r2, #2
 800d39c:	9307      	strge	r3, [sp, #28]
 800d39e:	9307      	strlt	r3, [sp, #28]
 800d3a0:	bfb8      	it	lt
 800d3a2:	9204      	strlt	r2, [sp, #16]
 800d3a4:	7823      	ldrb	r3, [r4, #0]
 800d3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a8:	d10c      	bne.n	800d3c4 <_svfiprintf_r+0x130>
 800d3aa:	7863      	ldrb	r3, [r4, #1]
 800d3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d3ae:	d135      	bne.n	800d41c <_svfiprintf_r+0x188>
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	1d1a      	adds	r2, r3, #4
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	9203      	str	r2, [sp, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	bfb8      	it	lt
 800d3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3c0:	3402      	adds	r4, #2
 800d3c2:	9305      	str	r3, [sp, #20]
 800d3c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d490 <_svfiprintf_r+0x1fc>
 800d3c8:	7821      	ldrb	r1, [r4, #0]
 800d3ca:	2203      	movs	r2, #3
 800d3cc:	4650      	mov	r0, sl
 800d3ce:	f7f2 ff8f 	bl	80002f0 <memchr>
 800d3d2:	b140      	cbz	r0, 800d3e6 <_svfiprintf_r+0x152>
 800d3d4:	2340      	movs	r3, #64	; 0x40
 800d3d6:	eba0 000a 	sub.w	r0, r0, sl
 800d3da:	fa03 f000 	lsl.w	r0, r3, r0
 800d3de:	9b04      	ldr	r3, [sp, #16]
 800d3e0:	4303      	orrs	r3, r0
 800d3e2:	3401      	adds	r4, #1
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ea:	4826      	ldr	r0, [pc, #152]	; (800d484 <_svfiprintf_r+0x1f0>)
 800d3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3f0:	2206      	movs	r2, #6
 800d3f2:	f7f2 ff7d 	bl	80002f0 <memchr>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d038      	beq.n	800d46c <_svfiprintf_r+0x1d8>
 800d3fa:	4b23      	ldr	r3, [pc, #140]	; (800d488 <_svfiprintf_r+0x1f4>)
 800d3fc:	bb1b      	cbnz	r3, 800d446 <_svfiprintf_r+0x1b2>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	3307      	adds	r3, #7
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	3308      	adds	r3, #8
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d40c:	4433      	add	r3, r6
 800d40e:	9309      	str	r3, [sp, #36]	; 0x24
 800d410:	e767      	b.n	800d2e2 <_svfiprintf_r+0x4e>
 800d412:	fb0c 3202 	mla	r2, ip, r2, r3
 800d416:	460c      	mov	r4, r1
 800d418:	2001      	movs	r0, #1
 800d41a:	e7a5      	b.n	800d368 <_svfiprintf_r+0xd4>
 800d41c:	2300      	movs	r3, #0
 800d41e:	3401      	adds	r4, #1
 800d420:	9305      	str	r3, [sp, #20]
 800d422:	4619      	mov	r1, r3
 800d424:	f04f 0c0a 	mov.w	ip, #10
 800d428:	4620      	mov	r0, r4
 800d42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d42e:	3a30      	subs	r2, #48	; 0x30
 800d430:	2a09      	cmp	r2, #9
 800d432:	d903      	bls.n	800d43c <_svfiprintf_r+0x1a8>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0c5      	beq.n	800d3c4 <_svfiprintf_r+0x130>
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	e7c3      	b.n	800d3c4 <_svfiprintf_r+0x130>
 800d43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d440:	4604      	mov	r4, r0
 800d442:	2301      	movs	r3, #1
 800d444:	e7f0      	b.n	800d428 <_svfiprintf_r+0x194>
 800d446:	ab03      	add	r3, sp, #12
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	462a      	mov	r2, r5
 800d44c:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <_svfiprintf_r+0x1f8>)
 800d44e:	a904      	add	r1, sp, #16
 800d450:	4638      	mov	r0, r7
 800d452:	f3af 8000 	nop.w
 800d456:	1c42      	adds	r2, r0, #1
 800d458:	4606      	mov	r6, r0
 800d45a:	d1d6      	bne.n	800d40a <_svfiprintf_r+0x176>
 800d45c:	89ab      	ldrh	r3, [r5, #12]
 800d45e:	065b      	lsls	r3, r3, #25
 800d460:	f53f af2c 	bmi.w	800d2bc <_svfiprintf_r+0x28>
 800d464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d466:	b01d      	add	sp, #116	; 0x74
 800d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46c:	ab03      	add	r3, sp, #12
 800d46e:	9300      	str	r3, [sp, #0]
 800d470:	462a      	mov	r2, r5
 800d472:	4b06      	ldr	r3, [pc, #24]	; (800d48c <_svfiprintf_r+0x1f8>)
 800d474:	a904      	add	r1, sp, #16
 800d476:	4638      	mov	r0, r7
 800d478:	f000 f87a 	bl	800d570 <_printf_i>
 800d47c:	e7eb      	b.n	800d456 <_svfiprintf_r+0x1c2>
 800d47e:	bf00      	nop
 800d480:	0800dadc 	.word	0x0800dadc
 800d484:	0800dae6 	.word	0x0800dae6
 800d488:	00000000 	.word	0x00000000
 800d48c:	0800d1df 	.word	0x0800d1df
 800d490:	0800dae2 	.word	0x0800dae2

0800d494 <_printf_common>:
 800d494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	4616      	mov	r6, r2
 800d49a:	4699      	mov	r9, r3
 800d49c:	688a      	ldr	r2, [r1, #8]
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	bfb8      	it	lt
 800d4a8:	4613      	movlt	r3, r2
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	b10a      	cbz	r2, 800d4ba <_printf_common+0x26>
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	6823      	ldr	r3, [r4, #0]
 800d4bc:	0699      	lsls	r1, r3, #26
 800d4be:	bf42      	ittt	mi
 800d4c0:	6833      	ldrmi	r3, [r6, #0]
 800d4c2:	3302      	addmi	r3, #2
 800d4c4:	6033      	strmi	r3, [r6, #0]
 800d4c6:	6825      	ldr	r5, [r4, #0]
 800d4c8:	f015 0506 	ands.w	r5, r5, #6
 800d4cc:	d106      	bne.n	800d4dc <_printf_common+0x48>
 800d4ce:	f104 0a19 	add.w	sl, r4, #25
 800d4d2:	68e3      	ldr	r3, [r4, #12]
 800d4d4:	6832      	ldr	r2, [r6, #0]
 800d4d6:	1a9b      	subs	r3, r3, r2
 800d4d8:	42ab      	cmp	r3, r5
 800d4da:	dc26      	bgt.n	800d52a <_printf_common+0x96>
 800d4dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d4e0:	1e13      	subs	r3, r2, #0
 800d4e2:	6822      	ldr	r2, [r4, #0]
 800d4e4:	bf18      	it	ne
 800d4e6:	2301      	movne	r3, #1
 800d4e8:	0692      	lsls	r2, r2, #26
 800d4ea:	d42b      	bmi.n	800d544 <_printf_common+0xb0>
 800d4ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d01e      	beq.n	800d538 <_printf_common+0xa4>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	68e5      	ldr	r5, [r4, #12]
 800d4fe:	6832      	ldr	r2, [r6, #0]
 800d500:	f003 0306 	and.w	r3, r3, #6
 800d504:	2b04      	cmp	r3, #4
 800d506:	bf08      	it	eq
 800d508:	1aad      	subeq	r5, r5, r2
 800d50a:	68a3      	ldr	r3, [r4, #8]
 800d50c:	6922      	ldr	r2, [r4, #16]
 800d50e:	bf0c      	ite	eq
 800d510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d514:	2500      	movne	r5, #0
 800d516:	4293      	cmp	r3, r2
 800d518:	bfc4      	itt	gt
 800d51a:	1a9b      	subgt	r3, r3, r2
 800d51c:	18ed      	addgt	r5, r5, r3
 800d51e:	2600      	movs	r6, #0
 800d520:	341a      	adds	r4, #26
 800d522:	42b5      	cmp	r5, r6
 800d524:	d11a      	bne.n	800d55c <_printf_common+0xc8>
 800d526:	2000      	movs	r0, #0
 800d528:	e008      	b.n	800d53c <_printf_common+0xa8>
 800d52a:	2301      	movs	r3, #1
 800d52c:	4652      	mov	r2, sl
 800d52e:	4649      	mov	r1, r9
 800d530:	4638      	mov	r0, r7
 800d532:	47c0      	blx	r8
 800d534:	3001      	adds	r0, #1
 800d536:	d103      	bne.n	800d540 <_printf_common+0xac>
 800d538:	f04f 30ff 	mov.w	r0, #4294967295
 800d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d540:	3501      	adds	r5, #1
 800d542:	e7c6      	b.n	800d4d2 <_printf_common+0x3e>
 800d544:	18e1      	adds	r1, r4, r3
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	2030      	movs	r0, #48	; 0x30
 800d54a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54e:	4422      	add	r2, r4
 800d550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d558:	3302      	adds	r3, #2
 800d55a:	e7c7      	b.n	800d4ec <_printf_common+0x58>
 800d55c:	2301      	movs	r3, #1
 800d55e:	4622      	mov	r2, r4
 800d560:	4649      	mov	r1, r9
 800d562:	4638      	mov	r0, r7
 800d564:	47c0      	blx	r8
 800d566:	3001      	adds	r0, #1
 800d568:	d0e6      	beq.n	800d538 <_printf_common+0xa4>
 800d56a:	3601      	adds	r6, #1
 800d56c:	e7d9      	b.n	800d522 <_printf_common+0x8e>
	...

0800d570 <_printf_i>:
 800d570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	7e0f      	ldrb	r7, [r1, #24]
 800d576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d578:	2f78      	cmp	r7, #120	; 0x78
 800d57a:	4691      	mov	r9, r2
 800d57c:	4680      	mov	r8, r0
 800d57e:	460c      	mov	r4, r1
 800d580:	469a      	mov	sl, r3
 800d582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d586:	d807      	bhi.n	800d598 <_printf_i+0x28>
 800d588:	2f62      	cmp	r7, #98	; 0x62
 800d58a:	d80a      	bhi.n	800d5a2 <_printf_i+0x32>
 800d58c:	2f00      	cmp	r7, #0
 800d58e:	f000 80d8 	beq.w	800d742 <_printf_i+0x1d2>
 800d592:	2f58      	cmp	r7, #88	; 0x58
 800d594:	f000 80a3 	beq.w	800d6de <_printf_i+0x16e>
 800d598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d59c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5a0:	e03a      	b.n	800d618 <_printf_i+0xa8>
 800d5a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5a6:	2b15      	cmp	r3, #21
 800d5a8:	d8f6      	bhi.n	800d598 <_printf_i+0x28>
 800d5aa:	a101      	add	r1, pc, #4	; (adr r1, 800d5b0 <_printf_i+0x40>)
 800d5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5b0:	0800d609 	.word	0x0800d609
 800d5b4:	0800d61d 	.word	0x0800d61d
 800d5b8:	0800d599 	.word	0x0800d599
 800d5bc:	0800d599 	.word	0x0800d599
 800d5c0:	0800d599 	.word	0x0800d599
 800d5c4:	0800d599 	.word	0x0800d599
 800d5c8:	0800d61d 	.word	0x0800d61d
 800d5cc:	0800d599 	.word	0x0800d599
 800d5d0:	0800d599 	.word	0x0800d599
 800d5d4:	0800d599 	.word	0x0800d599
 800d5d8:	0800d599 	.word	0x0800d599
 800d5dc:	0800d729 	.word	0x0800d729
 800d5e0:	0800d64d 	.word	0x0800d64d
 800d5e4:	0800d70b 	.word	0x0800d70b
 800d5e8:	0800d599 	.word	0x0800d599
 800d5ec:	0800d599 	.word	0x0800d599
 800d5f0:	0800d74b 	.word	0x0800d74b
 800d5f4:	0800d599 	.word	0x0800d599
 800d5f8:	0800d64d 	.word	0x0800d64d
 800d5fc:	0800d599 	.word	0x0800d599
 800d600:	0800d599 	.word	0x0800d599
 800d604:	0800d713 	.word	0x0800d713
 800d608:	682b      	ldr	r3, [r5, #0]
 800d60a:	1d1a      	adds	r2, r3, #4
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	602a      	str	r2, [r5, #0]
 800d610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d618:	2301      	movs	r3, #1
 800d61a:	e0a3      	b.n	800d764 <_printf_i+0x1f4>
 800d61c:	6820      	ldr	r0, [r4, #0]
 800d61e:	6829      	ldr	r1, [r5, #0]
 800d620:	0606      	lsls	r6, r0, #24
 800d622:	f101 0304 	add.w	r3, r1, #4
 800d626:	d50a      	bpl.n	800d63e <_printf_i+0xce>
 800d628:	680e      	ldr	r6, [r1, #0]
 800d62a:	602b      	str	r3, [r5, #0]
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	da03      	bge.n	800d638 <_printf_i+0xc8>
 800d630:	232d      	movs	r3, #45	; 0x2d
 800d632:	4276      	negs	r6, r6
 800d634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d638:	485e      	ldr	r0, [pc, #376]	; (800d7b4 <_printf_i+0x244>)
 800d63a:	230a      	movs	r3, #10
 800d63c:	e019      	b.n	800d672 <_printf_i+0x102>
 800d63e:	680e      	ldr	r6, [r1, #0]
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d646:	bf18      	it	ne
 800d648:	b236      	sxthne	r6, r6
 800d64a:	e7ef      	b.n	800d62c <_printf_i+0xbc>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	6820      	ldr	r0, [r4, #0]
 800d650:	1d19      	adds	r1, r3, #4
 800d652:	6029      	str	r1, [r5, #0]
 800d654:	0601      	lsls	r1, r0, #24
 800d656:	d501      	bpl.n	800d65c <_printf_i+0xec>
 800d658:	681e      	ldr	r6, [r3, #0]
 800d65a:	e002      	b.n	800d662 <_printf_i+0xf2>
 800d65c:	0646      	lsls	r6, r0, #25
 800d65e:	d5fb      	bpl.n	800d658 <_printf_i+0xe8>
 800d660:	881e      	ldrh	r6, [r3, #0]
 800d662:	4854      	ldr	r0, [pc, #336]	; (800d7b4 <_printf_i+0x244>)
 800d664:	2f6f      	cmp	r7, #111	; 0x6f
 800d666:	bf0c      	ite	eq
 800d668:	2308      	moveq	r3, #8
 800d66a:	230a      	movne	r3, #10
 800d66c:	2100      	movs	r1, #0
 800d66e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d672:	6865      	ldr	r5, [r4, #4]
 800d674:	60a5      	str	r5, [r4, #8]
 800d676:	2d00      	cmp	r5, #0
 800d678:	bfa2      	ittt	ge
 800d67a:	6821      	ldrge	r1, [r4, #0]
 800d67c:	f021 0104 	bicge.w	r1, r1, #4
 800d680:	6021      	strge	r1, [r4, #0]
 800d682:	b90e      	cbnz	r6, 800d688 <_printf_i+0x118>
 800d684:	2d00      	cmp	r5, #0
 800d686:	d04d      	beq.n	800d724 <_printf_i+0x1b4>
 800d688:	4615      	mov	r5, r2
 800d68a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d68e:	fb03 6711 	mls	r7, r3, r1, r6
 800d692:	5dc7      	ldrb	r7, [r0, r7]
 800d694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d698:	4637      	mov	r7, r6
 800d69a:	42bb      	cmp	r3, r7
 800d69c:	460e      	mov	r6, r1
 800d69e:	d9f4      	bls.n	800d68a <_printf_i+0x11a>
 800d6a0:	2b08      	cmp	r3, #8
 800d6a2:	d10b      	bne.n	800d6bc <_printf_i+0x14c>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	07de      	lsls	r6, r3, #31
 800d6a8:	d508      	bpl.n	800d6bc <_printf_i+0x14c>
 800d6aa:	6923      	ldr	r3, [r4, #16]
 800d6ac:	6861      	ldr	r1, [r4, #4]
 800d6ae:	4299      	cmp	r1, r3
 800d6b0:	bfde      	ittt	le
 800d6b2:	2330      	movle	r3, #48	; 0x30
 800d6b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6bc:	1b52      	subs	r2, r2, r5
 800d6be:	6122      	str	r2, [r4, #16]
 800d6c0:	f8cd a000 	str.w	sl, [sp]
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	aa03      	add	r2, sp, #12
 800d6c8:	4621      	mov	r1, r4
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	f7ff fee2 	bl	800d494 <_printf_common>
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	d14c      	bne.n	800d76e <_printf_i+0x1fe>
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	b004      	add	sp, #16
 800d6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6de:	4835      	ldr	r0, [pc, #212]	; (800d7b4 <_printf_i+0x244>)
 800d6e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d6e4:	6829      	ldr	r1, [r5, #0]
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d6ec:	6029      	str	r1, [r5, #0]
 800d6ee:	061d      	lsls	r5, r3, #24
 800d6f0:	d514      	bpl.n	800d71c <_printf_i+0x1ac>
 800d6f2:	07df      	lsls	r7, r3, #31
 800d6f4:	bf44      	itt	mi
 800d6f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6fa:	6023      	strmi	r3, [r4, #0]
 800d6fc:	b91e      	cbnz	r6, 800d706 <_printf_i+0x196>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	f023 0320 	bic.w	r3, r3, #32
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	2310      	movs	r3, #16
 800d708:	e7b0      	b.n	800d66c <_printf_i+0xfc>
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	f043 0320 	orr.w	r3, r3, #32
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	2378      	movs	r3, #120	; 0x78
 800d714:	4828      	ldr	r0, [pc, #160]	; (800d7b8 <_printf_i+0x248>)
 800d716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d71a:	e7e3      	b.n	800d6e4 <_printf_i+0x174>
 800d71c:	0659      	lsls	r1, r3, #25
 800d71e:	bf48      	it	mi
 800d720:	b2b6      	uxthmi	r6, r6
 800d722:	e7e6      	b.n	800d6f2 <_printf_i+0x182>
 800d724:	4615      	mov	r5, r2
 800d726:	e7bb      	b.n	800d6a0 <_printf_i+0x130>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	6826      	ldr	r6, [r4, #0]
 800d72c:	6961      	ldr	r1, [r4, #20]
 800d72e:	1d18      	adds	r0, r3, #4
 800d730:	6028      	str	r0, [r5, #0]
 800d732:	0635      	lsls	r5, r6, #24
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	d501      	bpl.n	800d73c <_printf_i+0x1cc>
 800d738:	6019      	str	r1, [r3, #0]
 800d73a:	e002      	b.n	800d742 <_printf_i+0x1d2>
 800d73c:	0670      	lsls	r0, r6, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0x1c8>
 800d740:	8019      	strh	r1, [r3, #0]
 800d742:	2300      	movs	r3, #0
 800d744:	6123      	str	r3, [r4, #16]
 800d746:	4615      	mov	r5, r2
 800d748:	e7ba      	b.n	800d6c0 <_printf_i+0x150>
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	1d1a      	adds	r2, r3, #4
 800d74e:	602a      	str	r2, [r5, #0]
 800d750:	681d      	ldr	r5, [r3, #0]
 800d752:	6862      	ldr	r2, [r4, #4]
 800d754:	2100      	movs	r1, #0
 800d756:	4628      	mov	r0, r5
 800d758:	f7f2 fdca 	bl	80002f0 <memchr>
 800d75c:	b108      	cbz	r0, 800d762 <_printf_i+0x1f2>
 800d75e:	1b40      	subs	r0, r0, r5
 800d760:	6060      	str	r0, [r4, #4]
 800d762:	6863      	ldr	r3, [r4, #4]
 800d764:	6123      	str	r3, [r4, #16]
 800d766:	2300      	movs	r3, #0
 800d768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d76c:	e7a8      	b.n	800d6c0 <_printf_i+0x150>
 800d76e:	6923      	ldr	r3, [r4, #16]
 800d770:	462a      	mov	r2, r5
 800d772:	4649      	mov	r1, r9
 800d774:	4640      	mov	r0, r8
 800d776:	47d0      	blx	sl
 800d778:	3001      	adds	r0, #1
 800d77a:	d0ab      	beq.n	800d6d4 <_printf_i+0x164>
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	079b      	lsls	r3, r3, #30
 800d780:	d413      	bmi.n	800d7aa <_printf_i+0x23a>
 800d782:	68e0      	ldr	r0, [r4, #12]
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	4298      	cmp	r0, r3
 800d788:	bfb8      	it	lt
 800d78a:	4618      	movlt	r0, r3
 800d78c:	e7a4      	b.n	800d6d8 <_printf_i+0x168>
 800d78e:	2301      	movs	r3, #1
 800d790:	4632      	mov	r2, r6
 800d792:	4649      	mov	r1, r9
 800d794:	4640      	mov	r0, r8
 800d796:	47d0      	blx	sl
 800d798:	3001      	adds	r0, #1
 800d79a:	d09b      	beq.n	800d6d4 <_printf_i+0x164>
 800d79c:	3501      	adds	r5, #1
 800d79e:	68e3      	ldr	r3, [r4, #12]
 800d7a0:	9903      	ldr	r1, [sp, #12]
 800d7a2:	1a5b      	subs	r3, r3, r1
 800d7a4:	42ab      	cmp	r3, r5
 800d7a6:	dcf2      	bgt.n	800d78e <_printf_i+0x21e>
 800d7a8:	e7eb      	b.n	800d782 <_printf_i+0x212>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	f104 0619 	add.w	r6, r4, #25
 800d7b0:	e7f5      	b.n	800d79e <_printf_i+0x22e>
 800d7b2:	bf00      	nop
 800d7b4:	0800daed 	.word	0x0800daed
 800d7b8:	0800dafe 	.word	0x0800dafe

0800d7bc <memcpy>:
 800d7bc:	440a      	add	r2, r1
 800d7be:	4291      	cmp	r1, r2
 800d7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7c4:	d100      	bne.n	800d7c8 <memcpy+0xc>
 800d7c6:	4770      	bx	lr
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7d2:	4291      	cmp	r1, r2
 800d7d4:	d1f9      	bne.n	800d7ca <memcpy+0xe>
 800d7d6:	bd10      	pop	{r4, pc}

0800d7d8 <memmove>:
 800d7d8:	4288      	cmp	r0, r1
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	eb01 0402 	add.w	r4, r1, r2
 800d7e0:	d902      	bls.n	800d7e8 <memmove+0x10>
 800d7e2:	4284      	cmp	r4, r0
 800d7e4:	4623      	mov	r3, r4
 800d7e6:	d807      	bhi.n	800d7f8 <memmove+0x20>
 800d7e8:	1e43      	subs	r3, r0, #1
 800d7ea:	42a1      	cmp	r1, r4
 800d7ec:	d008      	beq.n	800d800 <memmove+0x28>
 800d7ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7f6:	e7f8      	b.n	800d7ea <memmove+0x12>
 800d7f8:	4402      	add	r2, r0
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	428a      	cmp	r2, r1
 800d7fe:	d100      	bne.n	800d802 <memmove+0x2a>
 800d800:	bd10      	pop	{r4, pc}
 800d802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d80a:	e7f7      	b.n	800d7fc <memmove+0x24>

0800d80c <_free_r>:
 800d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d80e:	2900      	cmp	r1, #0
 800d810:	d044      	beq.n	800d89c <_free_r+0x90>
 800d812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d816:	9001      	str	r0, [sp, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f1a1 0404 	sub.w	r4, r1, #4
 800d81e:	bfb8      	it	lt
 800d820:	18e4      	addlt	r4, r4, r3
 800d822:	f000 f913 	bl	800da4c <__malloc_lock>
 800d826:	4a1e      	ldr	r2, [pc, #120]	; (800d8a0 <_free_r+0x94>)
 800d828:	9801      	ldr	r0, [sp, #4]
 800d82a:	6813      	ldr	r3, [r2, #0]
 800d82c:	b933      	cbnz	r3, 800d83c <_free_r+0x30>
 800d82e:	6063      	str	r3, [r4, #4]
 800d830:	6014      	str	r4, [r2, #0]
 800d832:	b003      	add	sp, #12
 800d834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d838:	f000 b90e 	b.w	800da58 <__malloc_unlock>
 800d83c:	42a3      	cmp	r3, r4
 800d83e:	d908      	bls.n	800d852 <_free_r+0x46>
 800d840:	6825      	ldr	r5, [r4, #0]
 800d842:	1961      	adds	r1, r4, r5
 800d844:	428b      	cmp	r3, r1
 800d846:	bf01      	itttt	eq
 800d848:	6819      	ldreq	r1, [r3, #0]
 800d84a:	685b      	ldreq	r3, [r3, #4]
 800d84c:	1949      	addeq	r1, r1, r5
 800d84e:	6021      	streq	r1, [r4, #0]
 800d850:	e7ed      	b.n	800d82e <_free_r+0x22>
 800d852:	461a      	mov	r2, r3
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	b10b      	cbz	r3, 800d85c <_free_r+0x50>
 800d858:	42a3      	cmp	r3, r4
 800d85a:	d9fa      	bls.n	800d852 <_free_r+0x46>
 800d85c:	6811      	ldr	r1, [r2, #0]
 800d85e:	1855      	adds	r5, r2, r1
 800d860:	42a5      	cmp	r5, r4
 800d862:	d10b      	bne.n	800d87c <_free_r+0x70>
 800d864:	6824      	ldr	r4, [r4, #0]
 800d866:	4421      	add	r1, r4
 800d868:	1854      	adds	r4, r2, r1
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	6011      	str	r1, [r2, #0]
 800d86e:	d1e0      	bne.n	800d832 <_free_r+0x26>
 800d870:	681c      	ldr	r4, [r3, #0]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	6053      	str	r3, [r2, #4]
 800d876:	4421      	add	r1, r4
 800d878:	6011      	str	r1, [r2, #0]
 800d87a:	e7da      	b.n	800d832 <_free_r+0x26>
 800d87c:	d902      	bls.n	800d884 <_free_r+0x78>
 800d87e:	230c      	movs	r3, #12
 800d880:	6003      	str	r3, [r0, #0]
 800d882:	e7d6      	b.n	800d832 <_free_r+0x26>
 800d884:	6825      	ldr	r5, [r4, #0]
 800d886:	1961      	adds	r1, r4, r5
 800d888:	428b      	cmp	r3, r1
 800d88a:	bf04      	itt	eq
 800d88c:	6819      	ldreq	r1, [r3, #0]
 800d88e:	685b      	ldreq	r3, [r3, #4]
 800d890:	6063      	str	r3, [r4, #4]
 800d892:	bf04      	itt	eq
 800d894:	1949      	addeq	r1, r1, r5
 800d896:	6021      	streq	r1, [r4, #0]
 800d898:	6054      	str	r4, [r2, #4]
 800d89a:	e7ca      	b.n	800d832 <_free_r+0x26>
 800d89c:	b003      	add	sp, #12
 800d89e:	bd30      	pop	{r4, r5, pc}
 800d8a0:	24000450 	.word	0x24000450

0800d8a4 <sbrk_aligned>:
 800d8a4:	b570      	push	{r4, r5, r6, lr}
 800d8a6:	4e0e      	ldr	r6, [pc, #56]	; (800d8e0 <sbrk_aligned+0x3c>)
 800d8a8:	460c      	mov	r4, r1
 800d8aa:	6831      	ldr	r1, [r6, #0]
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	b911      	cbnz	r1, 800d8b6 <sbrk_aligned+0x12>
 800d8b0:	f000 f8bc 	bl	800da2c <_sbrk_r>
 800d8b4:	6030      	str	r0, [r6, #0]
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f000 f8b7 	bl	800da2c <_sbrk_r>
 800d8be:	1c43      	adds	r3, r0, #1
 800d8c0:	d00a      	beq.n	800d8d8 <sbrk_aligned+0x34>
 800d8c2:	1cc4      	adds	r4, r0, #3
 800d8c4:	f024 0403 	bic.w	r4, r4, #3
 800d8c8:	42a0      	cmp	r0, r4
 800d8ca:	d007      	beq.n	800d8dc <sbrk_aligned+0x38>
 800d8cc:	1a21      	subs	r1, r4, r0
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f000 f8ac 	bl	800da2c <_sbrk_r>
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d101      	bne.n	800d8dc <sbrk_aligned+0x38>
 800d8d8:	f04f 34ff 	mov.w	r4, #4294967295
 800d8dc:	4620      	mov	r0, r4
 800d8de:	bd70      	pop	{r4, r5, r6, pc}
 800d8e0:	24000454 	.word	0x24000454

0800d8e4 <_malloc_r>:
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	1ccd      	adds	r5, r1, #3
 800d8ea:	f025 0503 	bic.w	r5, r5, #3
 800d8ee:	3508      	adds	r5, #8
 800d8f0:	2d0c      	cmp	r5, #12
 800d8f2:	bf38      	it	cc
 800d8f4:	250c      	movcc	r5, #12
 800d8f6:	2d00      	cmp	r5, #0
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	db01      	blt.n	800d900 <_malloc_r+0x1c>
 800d8fc:	42a9      	cmp	r1, r5
 800d8fe:	d905      	bls.n	800d90c <_malloc_r+0x28>
 800d900:	230c      	movs	r3, #12
 800d902:	603b      	str	r3, [r7, #0]
 800d904:	2600      	movs	r6, #0
 800d906:	4630      	mov	r0, r6
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	4e2e      	ldr	r6, [pc, #184]	; (800d9c8 <_malloc_r+0xe4>)
 800d90e:	f000 f89d 	bl	800da4c <__malloc_lock>
 800d912:	6833      	ldr	r3, [r6, #0]
 800d914:	461c      	mov	r4, r3
 800d916:	bb34      	cbnz	r4, 800d966 <_malloc_r+0x82>
 800d918:	4629      	mov	r1, r5
 800d91a:	4638      	mov	r0, r7
 800d91c:	f7ff ffc2 	bl	800d8a4 <sbrk_aligned>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	4604      	mov	r4, r0
 800d924:	d14d      	bne.n	800d9c2 <_malloc_r+0xde>
 800d926:	6834      	ldr	r4, [r6, #0]
 800d928:	4626      	mov	r6, r4
 800d92a:	2e00      	cmp	r6, #0
 800d92c:	d140      	bne.n	800d9b0 <_malloc_r+0xcc>
 800d92e:	6823      	ldr	r3, [r4, #0]
 800d930:	4631      	mov	r1, r6
 800d932:	4638      	mov	r0, r7
 800d934:	eb04 0803 	add.w	r8, r4, r3
 800d938:	f000 f878 	bl	800da2c <_sbrk_r>
 800d93c:	4580      	cmp	r8, r0
 800d93e:	d13a      	bne.n	800d9b6 <_malloc_r+0xd2>
 800d940:	6821      	ldr	r1, [r4, #0]
 800d942:	3503      	adds	r5, #3
 800d944:	1a6d      	subs	r5, r5, r1
 800d946:	f025 0503 	bic.w	r5, r5, #3
 800d94a:	3508      	adds	r5, #8
 800d94c:	2d0c      	cmp	r5, #12
 800d94e:	bf38      	it	cc
 800d950:	250c      	movcc	r5, #12
 800d952:	4629      	mov	r1, r5
 800d954:	4638      	mov	r0, r7
 800d956:	f7ff ffa5 	bl	800d8a4 <sbrk_aligned>
 800d95a:	3001      	adds	r0, #1
 800d95c:	d02b      	beq.n	800d9b6 <_malloc_r+0xd2>
 800d95e:	6823      	ldr	r3, [r4, #0]
 800d960:	442b      	add	r3, r5
 800d962:	6023      	str	r3, [r4, #0]
 800d964:	e00e      	b.n	800d984 <_malloc_r+0xa0>
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	1b52      	subs	r2, r2, r5
 800d96a:	d41e      	bmi.n	800d9aa <_malloc_r+0xc6>
 800d96c:	2a0b      	cmp	r2, #11
 800d96e:	d916      	bls.n	800d99e <_malloc_r+0xba>
 800d970:	1961      	adds	r1, r4, r5
 800d972:	42a3      	cmp	r3, r4
 800d974:	6025      	str	r5, [r4, #0]
 800d976:	bf18      	it	ne
 800d978:	6059      	strne	r1, [r3, #4]
 800d97a:	6863      	ldr	r3, [r4, #4]
 800d97c:	bf08      	it	eq
 800d97e:	6031      	streq	r1, [r6, #0]
 800d980:	5162      	str	r2, [r4, r5]
 800d982:	604b      	str	r3, [r1, #4]
 800d984:	4638      	mov	r0, r7
 800d986:	f104 060b 	add.w	r6, r4, #11
 800d98a:	f000 f865 	bl	800da58 <__malloc_unlock>
 800d98e:	f026 0607 	bic.w	r6, r6, #7
 800d992:	1d23      	adds	r3, r4, #4
 800d994:	1af2      	subs	r2, r6, r3
 800d996:	d0b6      	beq.n	800d906 <_malloc_r+0x22>
 800d998:	1b9b      	subs	r3, r3, r6
 800d99a:	50a3      	str	r3, [r4, r2]
 800d99c:	e7b3      	b.n	800d906 <_malloc_r+0x22>
 800d99e:	6862      	ldr	r2, [r4, #4]
 800d9a0:	42a3      	cmp	r3, r4
 800d9a2:	bf0c      	ite	eq
 800d9a4:	6032      	streq	r2, [r6, #0]
 800d9a6:	605a      	strne	r2, [r3, #4]
 800d9a8:	e7ec      	b.n	800d984 <_malloc_r+0xa0>
 800d9aa:	4623      	mov	r3, r4
 800d9ac:	6864      	ldr	r4, [r4, #4]
 800d9ae:	e7b2      	b.n	800d916 <_malloc_r+0x32>
 800d9b0:	4634      	mov	r4, r6
 800d9b2:	6876      	ldr	r6, [r6, #4]
 800d9b4:	e7b9      	b.n	800d92a <_malloc_r+0x46>
 800d9b6:	230c      	movs	r3, #12
 800d9b8:	603b      	str	r3, [r7, #0]
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	f000 f84c 	bl	800da58 <__malloc_unlock>
 800d9c0:	e7a1      	b.n	800d906 <_malloc_r+0x22>
 800d9c2:	6025      	str	r5, [r4, #0]
 800d9c4:	e7de      	b.n	800d984 <_malloc_r+0xa0>
 800d9c6:	bf00      	nop
 800d9c8:	24000450 	.word	0x24000450

0800d9cc <_realloc_r>:
 800d9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d0:	4680      	mov	r8, r0
 800d9d2:	4614      	mov	r4, r2
 800d9d4:	460e      	mov	r6, r1
 800d9d6:	b921      	cbnz	r1, 800d9e2 <_realloc_r+0x16>
 800d9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9dc:	4611      	mov	r1, r2
 800d9de:	f7ff bf81 	b.w	800d8e4 <_malloc_r>
 800d9e2:	b92a      	cbnz	r2, 800d9f0 <_realloc_r+0x24>
 800d9e4:	f7ff ff12 	bl	800d80c <_free_r>
 800d9e8:	4625      	mov	r5, r4
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f0:	f000 f838 	bl	800da64 <_malloc_usable_size_r>
 800d9f4:	4284      	cmp	r4, r0
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	d802      	bhi.n	800da00 <_realloc_r+0x34>
 800d9fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9fe:	d812      	bhi.n	800da26 <_realloc_r+0x5a>
 800da00:	4621      	mov	r1, r4
 800da02:	4640      	mov	r0, r8
 800da04:	f7ff ff6e 	bl	800d8e4 <_malloc_r>
 800da08:	4605      	mov	r5, r0
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d0ed      	beq.n	800d9ea <_realloc_r+0x1e>
 800da0e:	42bc      	cmp	r4, r7
 800da10:	4622      	mov	r2, r4
 800da12:	4631      	mov	r1, r6
 800da14:	bf28      	it	cs
 800da16:	463a      	movcs	r2, r7
 800da18:	f7ff fed0 	bl	800d7bc <memcpy>
 800da1c:	4631      	mov	r1, r6
 800da1e:	4640      	mov	r0, r8
 800da20:	f7ff fef4 	bl	800d80c <_free_r>
 800da24:	e7e1      	b.n	800d9ea <_realloc_r+0x1e>
 800da26:	4635      	mov	r5, r6
 800da28:	e7df      	b.n	800d9ea <_realloc_r+0x1e>
	...

0800da2c <_sbrk_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d06      	ldr	r5, [pc, #24]	; (800da48 <_sbrk_r+0x1c>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	602b      	str	r3, [r5, #0]
 800da38:	f7f4 fabc 	bl	8001fb4 <_sbrk>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_sbrk_r+0x1a>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_sbrk_r+0x1a>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	24000458 	.word	0x24000458

0800da4c <__malloc_lock>:
 800da4c:	4801      	ldr	r0, [pc, #4]	; (800da54 <__malloc_lock+0x8>)
 800da4e:	f000 b811 	b.w	800da74 <__retarget_lock_acquire_recursive>
 800da52:	bf00      	nop
 800da54:	2400045c 	.word	0x2400045c

0800da58 <__malloc_unlock>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__malloc_unlock+0x8>)
 800da5a:	f000 b80c 	b.w	800da76 <__retarget_lock_release_recursive>
 800da5e:	bf00      	nop
 800da60:	2400045c 	.word	0x2400045c

0800da64 <_malloc_usable_size_r>:
 800da64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da68:	1f18      	subs	r0, r3, #4
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	bfbc      	itt	lt
 800da6e:	580b      	ldrlt	r3, [r1, r0]
 800da70:	18c0      	addlt	r0, r0, r3
 800da72:	4770      	bx	lr

0800da74 <__retarget_lock_acquire_recursive>:
 800da74:	4770      	bx	lr

0800da76 <__retarget_lock_release_recursive>:
 800da76:	4770      	bx	lr

0800da78 <_init>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	bf00      	nop
 800da7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7e:	bc08      	pop	{r3}
 800da80:	469e      	mov	lr, r3
 800da82:	4770      	bx	lr

0800da84 <_fini>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	bf00      	nop
 800da88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8a:	bc08      	pop	{r3}
 800da8c:	469e      	mov	lr, r3
 800da8e:	4770      	bx	lr
