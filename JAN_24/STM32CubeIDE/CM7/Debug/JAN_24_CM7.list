
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a9c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008db0  08008db0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db8  08008db8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db8  08008db8  00018db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08008dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  24000078  08008e38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000310  08008e38  00020310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a87  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002618  00000000  00000000  00038b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b048  00000000  00000000  0003d4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e38  00000000  00000000  00078538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018959c  00000000  00000000  0008f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021890c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000524c  00000000  00000000  0021895c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008d24 	.word	0x08008d24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008d24 	.word	0x08008d24

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000688:	b0a4      	sub	sp, #144	; 0x90
 800068a:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800068c:	4ba3      	ldr	r3, [pc, #652]	; (800091c <main+0x298>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d11b      	bne.n	80006d0 <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a4:	4b9d      	ldr	r3, [pc, #628]	; (800091c <main+0x298>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
}
 80006b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b8:	4b98      	ldr	r3, [pc, #608]	; (800091c <main+0x298>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a97      	ldr	r2, [pc, #604]	; (800091c <main+0x298>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c4:	f3bf 8f4f 	dsb	sy
}
 80006c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ca:	f3bf 8f6f 	isb	sy
}
 80006ce:	e000      	b.n	80006d2 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d0:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d2:	4b92      	ldr	r3, [pc, #584]	; (800091c <main+0x298>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d13b      	bne.n	8000756 <main+0xd2>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006de:	4b8f      	ldr	r3, [pc, #572]	; (800091c <main+0x298>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e6:	f3bf 8f4f 	dsb	sy
}
 80006ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ec:	4b8b      	ldr	r3, [pc, #556]	; (800091c <main+0x298>)
 80006ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006fa:	0b5b      	lsrs	r3, r3, #13
 80006fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000700:	67fb      	str	r3, [r7, #124]	; 0x7c
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	497f      	ldr	r1, [pc, #508]	; (800091c <main+0x298>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	67ba      	str	r2, [r7, #120]	; 0x78
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x8a>
    } while(sets-- != 0U);
 800072e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e4      	bne.n	8000702 <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b77      	ldr	r3, [pc, #476]	; (800091c <main+0x298>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a76      	ldr	r2, [pc, #472]	; (800091c <main+0x298>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xd4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f001 f9f6 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f9f8 	bl	8000b50 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000760:	4b6f      	ldr	r3, [pc, #444]	; (8000920 <main+0x29c>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	4a6e      	ldr	r2, [pc, #440]	; (8000920 <main+0x29c>)
 8000768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000770:	4b6b      	ldr	r3, [pc, #428]	; (8000920 <main+0x29c>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fc7f 	bl	8001080 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000782:	f000 fa5f 	bl	8000c44 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000786:	f000 fc2f 	bl	8000fe8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800078a:	f000 fb5f 	bl	8000e4c <MX_TIM2_Init>
  MX_TIM1_Init();
 800078e:	f000 fab1 	bl	8000cf4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000792:	f000 fba7 	bl	8000ee4 <MX_TIM4_Init>
  MX_TIM16_Init();
 8000796:	f000 fbff 	bl	8000f98 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800079a:	4862      	ldr	r0, [pc, #392]	; (8000924 <main+0x2a0>)
 800079c:	f005 fa00 	bl	8005ba0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80007a0:	4861      	ldr	r0, [pc, #388]	; (8000928 <main+0x2a4>)
 80007a2:	f005 f9fd 	bl	8005ba0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80007a6:	2100      	movs	r1, #0
 80007a8:	4860      	ldr	r0, [pc, #384]	; (800092c <main+0x2a8>)
 80007aa:	f005 faf7 	bl	8005d9c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80007ae:	2104      	movs	r1, #4
 80007b0:	485e      	ldr	r0, [pc, #376]	; (800092c <main+0x2a8>)
 80007b2:	f005 faf3 	bl	8005d9c <HAL_TIM_PWM_Start>


  //TIM1->CCR1 = (htim1.Init.Period *1);
  TIM4->CCR1 = 5;//(htim4.Init.Period / 2);
 80007b6:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <main+0x2ac>)
 80007b8:	2205      	movs	r2, #5
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5;
 80007bc:	4b5c      	ldr	r3, [pc, #368]	; (8000930 <main+0x2ac>)
 80007be:	2205      	movs	r2, #5
 80007c0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM16->CCR1 = 5;//(htim16.Init.Period *1);
 80007c2:	4b5c      	ldr	r3, [pc, #368]	; (8000934 <main+0x2b0>)
 80007c4:	2205      	movs	r2, #5
 80007c6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint16_t writeBuf1 = 0b0000100010000000;
 80007c8:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80007cc:	81fb      	strh	r3, [r7, #14]
  const uint16_t writeBuf2 = 0b0000010010000000;
 80007ce:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80007d2:	81bb      	strh	r3, [r7, #12]
  const uint16_t writeBuf3 = 0b0000110010000000;
 80007d4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80007d8:	817b      	strh	r3, [r7, #10]
  const uint16_t writeBuf4 = 0b0000001010000000;
 80007da:	f44f 7320 	mov.w	r3, #640	; 0x280
 80007de:	813b      	strh	r3, [r7, #8]
  const uint16_t writeBuf5 = 0b0000101010000000;
 80007e0:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 80007e4:	80fb      	strh	r3, [r7, #6]
  const uint16_t writeBuf6 = 0b0000011010000000;
 80007e6:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80007ea:	80bb      	strh	r3, [r7, #4]
  uint16_t ADCData[needed];
 80007ec:	4b52      	ldr	r3, [pc, #328]	; (8000938 <main+0x2b4>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	1e4b      	subs	r3, r1, #1
 80007f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007f6:	460a      	mov	r2, r1
 80007f8:	2300      	movs	r3, #0
 80007fa:	4690      	mov	r8, r2
 80007fc:	4699      	mov	r9, r3
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800080a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800080e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000812:	460a      	mov	r2, r1
 8000814:	2300      	movs	r3, #0
 8000816:	4614      	mov	r4, r2
 8000818:	461d      	mov	r5, r3
 800081a:	f04f 0200 	mov.w	r2, #0
 800081e:	f04f 0300 	mov.w	r3, #0
 8000822:	012b      	lsls	r3, r5, #4
 8000824:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000828:	0122      	lsls	r2, r4, #4
 800082a:	460b      	mov	r3, r1
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	3307      	adds	r3, #7
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	ebad 0d03 	sub.w	sp, sp, r3
 8000838:	466b      	mov	r3, sp
 800083a:	3301      	adds	r3, #1
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2110      	movs	r1, #16
 8000848:	483c      	ldr	r0, [pc, #240]	; (800093c <main+0x2b8>)
 800084a:	f001 fcff 	bl	800224c <HAL_GPIO_WritePin>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 800084e:	f107 010e 	add.w	r1, r7, #14
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	2201      	movs	r2, #1
 8000856:	483a      	ldr	r0, [pc, #232]	; (8000940 <main+0x2bc>)
 8000858:	f004 fcd6 	bl	8005208 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	2201      	movs	r2, #1
 8000864:	4836      	ldr	r0, [pc, #216]	; (8000940 <main+0x2bc>)
 8000866:	f004 fccf 	bl	8005208 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 800086a:	f107 010a 	add.w	r1, r7, #10
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2201      	movs	r2, #1
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <main+0x2bc>)
 8000874:	f004 fcc8 	bl	8005208 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000878:	f107 0108 	add.w	r1, r7, #8
 800087c:	2364      	movs	r3, #100	; 0x64
 800087e:	2201      	movs	r2, #1
 8000880:	482f      	ldr	r0, [pc, #188]	; (8000940 <main+0x2bc>)
 8000882:	f004 fcc1 	bl	8005208 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000886:	1db9      	adds	r1, r7, #6
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2201      	movs	r2, #1
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <main+0x2bc>)
 800088e:	f004 fcbb 	bl	8005208 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 8000892:	1d39      	adds	r1, r7, #4
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	2201      	movs	r2, #1
 8000898:	4829      	ldr	r0, [pc, #164]	; (8000940 <main+0x2bc>)
 800089a:	f004 fcb5 	bl	8005208 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	4826      	ldr	r0, [pc, #152]	; (800093c <main+0x2b8>)
 80008a4:	f001 fcd2 	bl	800224c <HAL_GPIO_WritePin>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  //hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  //char spi_read_buf[20];

  state = collect;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <main+0x2c0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <main+0x2c0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	f000 80c9 	beq.w	8000a4a <main+0x3c6>
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	dcf8      	bgt.n	80008ae <main+0x22a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <main+0x240>
 80008c0:	2b01      	cmp	r3, #1
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
	  		    }
				break;
	  	  case wait:

	  		  	break;
 80008c2:	e124      	b.n	8000b0e <main+0x48a>
	  		    if (counter == 200) // reset after one data collection cycle
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <main+0x2c4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2bc8      	cmp	r3, #200	; 0xc8
 80008ca:	d109      	bne.n	80008e0 <main+0x25c>
					counter = 0;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <main+0x2c4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
					counterPrevious = 0;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <main+0x2c8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
					state = wait;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <main+0x2c0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	e0aa      	b.n	8000a36 <main+0x3b2>
	  		    else if (counter == 0) // set spec reset pin high to tell h-chip to send data
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <main+0x2c4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10b      	bne.n	8000900 <main+0x27c>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ee:	4818      	ldr	r0, [pc, #96]	; (8000950 <main+0x2cc>)
 80008f0:	f001 fcac 	bl	800224c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, VNA_TRIG_Pin,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <main+0x2b8>)
 80008fa:	f001 fca7 	bl	800224c <HAL_GPIO_WritePin>
 80008fe:	e09a      	b.n	8000a36 <main+0x3b2>
	  		    else if (counter == 10) // set spec reset back low
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <main+0x2c4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b0a      	cmp	r3, #10
 8000906:	d127      	bne.n	8000958 <main+0x2d4>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	4810      	ldr	r0, [pc, #64]	; (8000950 <main+0x2cc>)
 8000910:	f001 fc9c 	bl	800224c <HAL_GPIO_WritePin>
					optReady = true;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <main+0x2d0>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e08c      	b.n	8000a36 <main+0x3b2>
 800091c:	e000ed00 	.word	0xe000ed00
 8000920:	58024400 	.word	0x58024400
 8000924:	24000168 	.word	0x24000168
 8000928:	24000200 	.word	0x24000200
 800092c:	240001b4 	.word	0x240001b4
 8000930:	40000800 	.word	0x40000800
 8000934:	40014400 	.word	0x40014400
 8000938:	24000000 	.word	0x24000000
 800093c:	58020400 	.word	0x58020400
 8000940:	24000094 	.word	0x24000094
 8000944:	240002f4 	.word	0x240002f4
 8000948:	240002e8 	.word	0x240002e8
 800094c:	240002f0 	.word	0x240002f0
 8000950:	58020c00 	.word	0x58020c00
 8000954:	240002e0 	.word	0x240002e0
				else if (optReady && (counter > counterPrevious) && (collected < needed) && (counter > 14)) // wait for AD_SP from the h-chip then uses spi2 to read from adc
 8000958:	4b6d      	ldr	r3, [pc, #436]	; (8000b10 <main+0x48c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d037      	beq.n	80009d0 <main+0x34c>
 8000960:	4b6c      	ldr	r3, [pc, #432]	; (8000b14 <main+0x490>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b6c      	ldr	r3, [pc, #432]	; (8000b18 <main+0x494>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	429a      	cmp	r2, r3
 800096a:	dd31      	ble.n	80009d0 <main+0x34c>
 800096c:	4b6b      	ldr	r3, [pc, #428]	; (8000b1c <main+0x498>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b6b      	ldr	r3, [pc, #428]	; (8000b20 <main+0x49c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	da2b      	bge.n	80009d0 <main+0x34c>
 8000978:	4b66      	ldr	r3, [pc, #408]	; (8000b14 <main+0x490>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b0e      	cmp	r3, #14
 800097e:	dd27      	ble.n	80009d0 <main+0x34c>
					HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	4867      	ldr	r0, [pc, #412]	; (8000b24 <main+0x4a0>)
 8000986:	f001 fc61 	bl	800224c <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_destroy_buf, 1, 100);
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	2201      	movs	r2, #1
 800098e:	4966      	ldr	r1, [pc, #408]	; (8000b28 <main+0x4a4>)
 8000990:	4866      	ldr	r0, [pc, #408]	; (8000b2c <main+0x4a8>)
 8000992:	f004 fe35 	bl	8005600 <HAL_SPI_Receive>
				    HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	4862      	ldr	r0, [pc, #392]	; (8000b24 <main+0x4a0>)
 800099c:	f001 fc56 	bl	800224c <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_read_buf, 1, 100);
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	2201      	movs	r2, #1
 80009a4:	4962      	ldr	r1, [pc, #392]	; (8000b30 <main+0x4ac>)
 80009a6:	4861      	ldr	r0, [pc, #388]	; (8000b2c <main+0x4a8>)
 80009a8:	f004 fe2a 	bl	8005600 <HAL_SPI_Receive>
				    counterPrevious = counter;
 80009ac:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <main+0x490>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <main+0x494>)
 80009b2:	6013      	str	r3, [r2, #0]
				    ADCData[collected] = spi_destroy_buf;
 80009b4:	4b59      	ldr	r3, [pc, #356]	; (8000b1c <main+0x498>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b5b      	ldr	r3, [pc, #364]	; (8000b28 <main+0x4a4>)
 80009ba:	8819      	ldrh	r1, [r3, #0]
 80009bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				    collected++;
 80009c4:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <main+0x498>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a54      	ldr	r2, [pc, #336]	; (8000b1c <main+0x498>)
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e032      	b.n	8000a36 <main+0x3b2>
				else if (collected == needed)
 80009d0:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <main+0x498>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <main+0x49c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d12c      	bne.n	8000a36 <main+0x3b2>
					uart_buf_len = sprintf(uart_buf, "%d", ADCData[40]);
 80009dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80009e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80009e4:	461a      	mov	r2, r3
 80009e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009ea:	4952      	ldr	r1, [pc, #328]	; (8000b34 <main+0x4b0>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 fd2b 	bl	8008448 <siprintf>
 80009f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 80009f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	484d      	ldr	r0, [pc, #308]	; (8000b38 <main+0x4b4>)
 8000a04:	f006 fbda 	bl	80071bc <HAL_UART_Transmit>
					uart_buf_len = sprintf(uart_buf, "\n");
 8000a08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0c:	494b      	ldr	r1, [pc, #300]	; (8000b3c <main+0x4b8>)
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f007 fd1a 	bl	8008448 <siprintf>
 8000a14:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 8000a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	4844      	ldr	r0, [pc, #272]	; (8000b38 <main+0x4b4>)
 8000a26:	f006 fbc9 	bl	80071bc <HAL_UART_Transmit>
					collected = 0;
 8000a2a:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <main+0x498>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
					optReady = false;
 8000a30:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <main+0x48c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
	  		    if (counter == 20)
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <main+0x490>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b14      	cmp	r3, #20
 8000a3c:	d166      	bne.n	8000b0c <main+0x488>
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	483f      	ldr	r0, [pc, #252]	; (8000b40 <main+0x4bc>)
 8000a44:	f001 fc02 	bl	800224c <HAL_GPIO_WritePin>
				break;
 8000a48:	e060      	b.n	8000b0c <main+0x488>

	  	  case test:
	  		  HAL_TIM_Base_Stop_IT(&htim2);
 8000a4a:	483e      	ldr	r0, [pc, #248]	; (8000b44 <main+0x4c0>)
 8000a4c:	f005 f920 	bl	8005c90 <HAL_TIM_Base_Stop_IT>
	  		  HAL_TIM_Base_Stop_IT(&htim16);
 8000a50:	483d      	ldr	r0, [pc, #244]	; (8000b48 <main+0x4c4>)
 8000a52:	f005 f91d 	bl	8005c90 <HAL_TIM_Base_Stop_IT>


	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4839      	ldr	r0, [pc, #228]	; (8000b40 <main+0x4bc>)
 8000a5c:	f001 fbf6 	bl	800224c <HAL_GPIO_WritePin>
	  		  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a60:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <main+0x4a8>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a66:	61da      	str	r2, [r3, #28]
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 8000a68:	f107 010e 	add.w	r1, r7, #14
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	2201      	movs	r2, #1
 8000a70:	482e      	ldr	r0, [pc, #184]	; (8000b2c <main+0x4a8>)
 8000a72:	f004 fbc9 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 8000a76:	f107 010c 	add.w	r1, r7, #12
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	482b      	ldr	r0, [pc, #172]	; (8000b2c <main+0x4a8>)
 8000a80:	f004 fbc2 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 8000a84:	f107 010a 	add.w	r1, r7, #10
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4827      	ldr	r0, [pc, #156]	; (8000b2c <main+0x4a8>)
 8000a8e:	f004 fbbb 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000a92:	f107 0108 	add.w	r1, r7, #8
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <main+0x4a8>)
 8000a9c:	f004 fbb4 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000aa0:	1db9      	adds	r1, r7, #6
 8000aa2:	2364      	movs	r3, #100	; 0x64
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <main+0x4a8>)
 8000aa8:	f004 fbae 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	481e      	ldr	r0, [pc, #120]	; (8000b2c <main+0x4a8>)
 8000ab4:	f004 fba8 	bl	8005208 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	4820      	ldr	r0, [pc, #128]	; (8000b40 <main+0x4bc>)
 8000abe:	f001 fbc5 	bl	800224c <HAL_GPIO_WritePin>
	  		  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <main+0x4a8>)
 8000ac4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000ac8:	61da      	str	r2, [r3, #28]
	  		  //hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4815      	ldr	r0, [pc, #84]	; (8000b24 <main+0x4a0>)
 8000ace:	f001 fbd6 	bl	800227e <HAL_GPIO_TogglePin>
	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <main+0x4ac>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	2201      	movs	r2, #1
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <main+0x4a8>)
 8000ade:	f004 fd8f 	bl	8005600 <HAL_SPI_Receive>
	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <main+0x4a0>)
 8000ae6:	f001 fbca 	bl	800227e <HAL_GPIO_TogglePin>
	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <main+0x4ac>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	2201      	movs	r2, #1
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x4a8>)
 8000af6:	f004 fd83 	bl	8005600 <HAL_SPI_Receive>
	  		  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4813      	ldr	r0, [pc, #76]	; (8000b4c <main+0x4c8>)
 8000b00:	f001 fbbd 	bl	800227e <HAL_GPIO_TogglePin>
	  		  HAL_Delay(50);
 8000b04:	2032      	movs	r0, #50	; 0x32
 8000b06:	f001 f8b1 	bl	8001c6c <HAL_Delay>

	  		  break;
 8000b0a:	e000      	b.n	8000b0e <main+0x48a>
				break;
 8000b0c:	bf00      	nop
	  switch(state){
 8000b0e:	e6ce      	b.n	80008ae <main+0x22a>
 8000b10:	240002e0 	.word	0x240002e0
 8000b14:	240002e8 	.word	0x240002e8
 8000b18:	240002f0 	.word	0x240002f0
 8000b1c:	240002ec 	.word	0x240002ec
 8000b20:	24000000 	.word	0x24000000
 8000b24:	58020000 	.word	0x58020000
 8000b28:	240002e4 	.word	0x240002e4
 8000b2c:	24000094 	.word	0x24000094
 8000b30:	240002e2 	.word	0x240002e2
 8000b34:	08008d3c 	.word	0x08008d3c
 8000b38:	2400024c 	.word	0x2400024c
 8000b3c:	08008d40 	.word	0x08008d40
 8000b40:	58020400 	.word	0x58020400
 8000b44:	24000168 	.word	0x24000168
 8000b48:	24000200 	.word	0x24000200
 8000b4c:	58022000 	.word	0x58022000

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09c      	sub	sp, #112	; 0x70
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	224c      	movs	r2, #76	; 0x4c
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fc6a 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 fc64 	bl	8008438 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b70:	2004      	movs	r0, #4
 8000b72:	f001 fbb9 	bl	80022e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <SystemClock_Config+0xec>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <SystemClock_Config+0xec>)
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <SystemClock_Config+0xec>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <SystemClock_Config+0xf0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <SystemClock_Config+0xf0>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <SystemClock_Config+0xf0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	bf00      	nop
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xf0>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb6:	d1f8      	bne.n	8000baa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bde:	2308      	movs	r3, #8
 8000be0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fbd4 	bl	800239c <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfa:	f000 fc31 	bl	8001460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	233f      	movs	r3, #63	; 0x3f
 8000c00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c12:	2340      	movs	r3, #64	; 0x40
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c1c:	2340      	movs	r3, #64	; 0x40
 8000c1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 f813 	bl	8002c50 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c30:	f000 fc16 	bl	8001460 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3770      	adds	r7, #112	; 0x70
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58000400 	.word	0x58000400
 8000c40:	58024800 	.word	0x58024800

08000c44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <MX_SPI2_Init+0xac>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b25      	ldr	r3, [pc, #148]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c5e:	220f      	movs	r2, #15
 8000c60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c7a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_SPI2_Init+0xa8>)
 8000cd8:	f004 f972 	bl	8004fc0 <HAL_SPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000ce2:	f000 fbbd 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000094 	.word	0x24000094
 8000cf0:	40003800 	.word	0x40003800

08000cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b09a      	sub	sp, #104	; 0x68
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	222c      	movs	r2, #44	; 0x2c
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f007 fb82 	bl	8008438 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d34:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d36:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <MX_TIM1_Init+0x154>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d3c:	22c8      	movs	r2, #200	; 0xc8
 8000d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000d46:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d48:	2232      	movs	r2, #50	; 0x32
 8000d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d52:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d5a:	2280      	movs	r2, #128	; 0x80
 8000d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5e:	4839      	ldr	r0, [pc, #228]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d60:	f004 fec7 	bl	8005af2 <HAL_TIM_Base_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d6a:	f000 fb79 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d74:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4832      	ldr	r0, [pc, #200]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d7c:	f005 fb50 	bl	8006420 <HAL_TIM_ConfigClockSource>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d86:	f000 fb6b 	bl	8001460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000d8c:	f004 ffaf 	bl	8005cee <HAL_TIM_PWM_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d96:	f000 fb63 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000dae:	f006 f88b 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000db8:	f000 fb52 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbc:	2360      	movs	r3, #96	; 0x60
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4818      	ldr	r0, [pc, #96]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000de2:	f005 fa09 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000dec:	f000 fb38 	bl	8001460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4807      	ldr	r0, [pc, #28]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000e26:	f006 f8dd 	bl	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e30:	f000 fb16 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e34:	4803      	ldr	r0, [pc, #12]	; (8000e44 <MX_TIM1_Init+0x150>)
 8000e36:	f000 fc6d 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8000e3a:	bf00      	nop
 8000e3c:	3768      	adds	r7, #104	; 0x68
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2400011c 	.word	0x2400011c
 8000e48:	40010000 	.word	0x40010000

08000e4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e74:	22c7      	movs	r2, #199	; 0xc7
 8000e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e80:	2209      	movs	r2, #9
 8000e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000e92:	f004 fe2e 	bl	8005af2 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f000 fae0 	bl	8001460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eae:	f005 fab7 	bl	8006420 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 fad2 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM2_Init+0x94>)
 8000eca:	f005 fffd 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed4:	f000 fac4 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	24000168 	.word	0x24000168

08000ee4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f08:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <MX_TIM4_Init+0xb0>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f10:	22c7      	movs	r2, #199	; 0xc7
 8000f12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f1c:	2209      	movs	r2, #9
 8000f1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f2c:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f2e:	f004 fede 	bl	8005cee <HAL_TIM_PWM_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000f38:	f000 fa92 	bl	8001460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f4c:	f005 ffbc 	bl	8006ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000f56:	f000 fa83 	bl	8001460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f62:	2302      	movs	r3, #2
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f72:	f005 f941 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000f7c:	f000 fa70 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM4_Init+0xac>)
 8000f82:	f000 fbc7 	bl	8001714 <HAL_TIM_MspPostInit>

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	240001b4 	.word	0x240001b4
 8000f94:	40000800 	.word	0x40000800

08000f98 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000f9e:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <MX_TIM16_Init+0x4c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000-1;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fa4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fa8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fb2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fb6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM16_Init+0x48>)
 8000fcc:	f004 fd91 	bl	8005af2 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000fd6:	f000 fa43 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	24000200 	.word	0x24000200
 8000fe4:	40014400 	.word	0x40014400

08000fe8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <MX_USART3_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_USART3_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001032:	f006 f873 	bl	800711c <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 fa10 	bl	8001460 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001044:	f007 f903 	bl	800824e <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 fa07 	bl	8001460 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001056:	f007 f938 	bl	80082ca <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f000 f9fe 	bl	8001460 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_USART3_UART_Init+0x90>)
 8001066:	f007 f8b9 	bl	80081dc <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 f9f6 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400024c 	.word	0x2400024c
 800107c:	40004800 	.word	0x40004800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	; 0x40
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4bc1      	ldr	r3, [pc, #772]	; (800139c <MX_GPIO_Init+0x31c>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109c:	4abf      	ldr	r2, [pc, #764]	; (800139c <MX_GPIO_Init+0x31c>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a6:	4bbd      	ldr	r3, [pc, #756]	; (800139c <MX_GPIO_Init+0x31c>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4bb9      	ldr	r3, [pc, #740]	; (800139c <MX_GPIO_Init+0x31c>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	4ab8      	ldr	r2, [pc, #736]	; (800139c <MX_GPIO_Init+0x31c>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c4:	4bb5      	ldr	r3, [pc, #724]	; (800139c <MX_GPIO_Init+0x31c>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010d2:	4bb2      	ldr	r3, [pc, #712]	; (800139c <MX_GPIO_Init+0x31c>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4ab0      	ldr	r2, [pc, #704]	; (800139c <MX_GPIO_Init+0x31c>)
 80010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4bae      	ldr	r3, [pc, #696]	; (800139c <MX_GPIO_Init+0x31c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f0:	4baa      	ldr	r3, [pc, #680]	; (800139c <MX_GPIO_Init+0x31c>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	4aa9      	ldr	r2, [pc, #676]	; (800139c <MX_GPIO_Init+0x31c>)
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001100:	4ba6      	ldr	r3, [pc, #664]	; (800139c <MX_GPIO_Init+0x31c>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <MX_GPIO_Init+0x31c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	4aa1      	ldr	r2, [pc, #644]	; (800139c <MX_GPIO_Init+0x31c>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111e:	4b9f      	ldr	r3, [pc, #636]	; (800139c <MX_GPIO_Init+0x31c>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b9b      	ldr	r3, [pc, #620]	; (800139c <MX_GPIO_Init+0x31c>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	4a9a      	ldr	r2, [pc, #616]	; (800139c <MX_GPIO_Init+0x31c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113c:	4b97      	ldr	r3, [pc, #604]	; (800139c <MX_GPIO_Init+0x31c>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	4b94      	ldr	r3, [pc, #592]	; (800139c <MX_GPIO_Init+0x31c>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	4a92      	ldr	r2, [pc, #584]	; (800139c <MX_GPIO_Init+0x31c>)
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115a:	4b90      	ldr	r3, [pc, #576]	; (800139c <MX_GPIO_Init+0x31c>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	f003 0310 	and.w	r3, r3, #16
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001168:	4b8c      	ldr	r3, [pc, #560]	; (800139c <MX_GPIO_Init+0x31c>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	4a8b      	ldr	r2, [pc, #556]	; (800139c <MX_GPIO_Init+0x31c>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001178:	4b88      	ldr	r3, [pc, #544]	; (800139c <MX_GPIO_Init+0x31c>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001186:	4b85      	ldr	r3, [pc, #532]	; (800139c <MX_GPIO_Init+0x31c>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <MX_GPIO_Init+0x31c>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <MX_GPIO_Init+0x31c>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011a4:	4b7d      	ldr	r3, [pc, #500]	; (800139c <MX_GPIO_Init+0x31c>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	4a7c      	ldr	r2, [pc, #496]	; (800139c <MX_GPIO_Init+0x31c>)
 80011ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b4:	4b79      	ldr	r3, [pc, #484]	; (800139c <MX_GPIO_Init+0x31c>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f241 0190 	movw	r1, #4240	; 0x1090
 80011c8:	4875      	ldr	r0, [pc, #468]	; (80013a0 <MX_GPIO_Init+0x320>)
 80011ca:	f001 f83f 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d4:	4873      	ldr	r0, [pc, #460]	; (80013a4 <MX_GPIO_Init+0x324>)
 80011d6:	f001 f839 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	4871      	ldr	r0, [pc, #452]	; (80013a8 <MX_GPIO_Init+0x328>)
 80011e2:	f001 f833 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2140      	movs	r1, #64	; 0x40
 80011ea:	4870      	ldr	r0, [pc, #448]	; (80013ac <MX_GPIO_Init+0x32c>)
 80011ec:	f001 f82e 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_RST_GPIO_Port, SPEC_RST_Pin, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	486e      	ldr	r0, [pc, #440]	; (80013b0 <MX_GPIO_Init+0x330>)
 80011f8:	f001 f828 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2104      	movs	r1, #4
 8001200:	486c      	ldr	r0, [pc, #432]	; (80013b4 <MX_GPIO_Init+0x334>)
 8001202:	f001 f823 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	4861      	ldr	r0, [pc, #388]	; (80013a0 <MX_GPIO_Init+0x320>)
 800121a:	f000 fe67 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 VNA_TRIG_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin;
 800121e:	f241 0390 	movw	r3, #4240	; 0x1090
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	485a      	ldr	r0, [pc, #360]	; (80013a0 <MX_GPIO_Init+0x320>)
 8001238:	f000 fe58 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800123c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	4853      	ldr	r0, [pc, #332]	; (80013a4 <MX_GPIO_Init+0x324>)
 8001256:	f000 fe49 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	4850      	ldr	r0, [pc, #320]	; (80013b0 <MX_GPIO_Init+0x330>)
 800126e:	f000 fe3d 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001284:	4619      	mov	r1, r3
 8001286:	4849      	ldr	r0, [pc, #292]	; (80013ac <MX_GPIO_Init+0x32c>)
 8001288:	f000 fe30 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129e:	4619      	mov	r1, r3
 80012a0:	4845      	ldr	r0, [pc, #276]	; (80013b8 <MX_GPIO_Init+0x338>)
 80012a2:	f000 fe23 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	483a      	ldr	r0, [pc, #232]	; (80013a8 <MX_GPIO_Init+0x328>)
 80012be:	f000 fe15 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c2:	2340      	movs	r3, #64	; 0x40
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4839      	ldr	r0, [pc, #228]	; (80013bc <MX_GPIO_Init+0x33c>)
 80012d8:	f000 fe08 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	482c      	ldr	r0, [pc, #176]	; (80013a8 <MX_GPIO_Init+0x328>)
 80012f6:	f000 fdf9 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	482c      	ldr	r0, [pc, #176]	; (80013c0 <MX_GPIO_Init+0x340>)
 800130e:	f000 fded 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : VSENSE2_Pin */
  GPIO_InitStruct.Pin = VSENSE2_Pin;
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	2303      	movs	r3, #3
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VSENSE2_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001324:	4619      	mov	r1, r3
 8001326:	4827      	ldr	r0, [pc, #156]	; (80013c4 <MX_GPIO_Init+0x344>)
 8001328:	f000 fde0 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE1_Pin PC3 */
  GPIO_InitStruct.Pin = VSENSE1_Pin|GPIO_PIN_3;
 800132c:	2309      	movs	r3, #9
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_GPIO_Init+0x338>)
 8001340:	f000 fdd4 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	4814      	ldr	r0, [pc, #80]	; (80013ac <MX_GPIO_Init+0x32c>)
 800135c:	f000 fdc6 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_RST_Pin */
  GPIO_InitStruct.Pin = SPEC_RST_Pin;
 8001360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	2301      	movs	r3, #1
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800136a:	2302      	movs	r3, #2
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPEC_RST_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0x330>)
 800137a:	f000 fdb7 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE3_Pin VSENSE4_Pin */
  GPIO_InitStruct.Pin = VSENSE3_Pin|VSENSE4_Pin;
 800137e:	2303      	movs	r3, #3
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138e:	4619      	mov	r1, r3
 8001390:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_GPIO_Init+0x32c>)
 8001392:	f000 fdab 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001396:	2304      	movs	r3, #4
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139a:	e015      	b.n	80013c8 <MX_GPIO_Init+0x348>
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020400 	.word	0x58020400
 80013a4:	58021c00 	.word	0x58021c00
 80013a8:	58022000 	.word	0x58022000
 80013ac:	58020000 	.word	0x58020000
 80013b0:	58020c00 	.word	0x58020c00
 80013b4:	58022400 	.word	0x58022400
 80013b8:	58020800 	.word	0x58020800
 80013bc:	58021000 	.word	0x58021000
 80013c0:	58022800 	.word	0x58022800
 80013c4:	58021400 	.word	0x58021400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_GPIO_Init+0x378>)
 80013dc:	f000 fd86 	bl	8001eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2017      	movs	r0, #23
 80013e6:	f000 fd4c 	bl	8001e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013ea:	2017      	movs	r0, #23
 80013ec:	f000 fd63 	bl	8001eb6 <HAL_NVIC_EnableIRQ>

}
 80013f0:	bf00      	nop
 80013f2:	3740      	adds	r7, #64	; 0x40
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	58022400 	.word	0x58022400

080013fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	else if (GPIO_Pin == GPIO_PIN_8)
	{
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//optReady = true;
	}
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d105      	bne.n	8001430 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//		HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//counterPrevious = counter;
		counter++;
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800142c:	6013      	str	r3, [r2, #0]
	{
		state = collect;
		counter = 0;
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
	}
}
 800142e:	e009      	b.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim == &htim16)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d105      	bne.n	8001444 <HAL_TIM_PeriodElapsedCallback+0x30>
		state = collect;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
		counter = 0;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	24000168 	.word	0x24000168
 8001454:	240002e8 	.word	0x240002e8
 8001458:	24000200 	.word	0x24000200
 800145c:	240002f4 	.word	0x240002f4

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_MspInit+0x30>)
 8001474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001478:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x30>)
 800147a:	f043 0302 	orr.w	r3, r3, #2
 800147e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x30>)
 8001484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	58024400 	.word	0x58024400

080014a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0bc      	sub	sp, #240	; 0xf0
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0318 	add.w	r3, r7, #24
 80014bc:	22c0      	movs	r2, #192	; 0xc0
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 ffb9 	bl	8008438 <memset>
  if(hspi->Instance==SPI2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_SPI_MspInit+0x158>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f040 808e 	bne.w	80015ee <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014de:	2300      	movs	r3, #0
 80014e0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 ff3e 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80014f2:	f7ff ffb5 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f6:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fc:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001502:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a30      	ldr	r2, [pc, #192]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_SPI_MspInit+0x15c>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800156e:	2308      	movs	r3, #8
 8001570:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001586:	2305      	movs	r3, #5
 8001588:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001590:	4619      	mov	r1, r3
 8001592:	481b      	ldr	r0, [pc, #108]	; (8001600 <HAL_SPI_MspInit+0x160>)
 8001594:	f000 fcaa 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001598:	2304      	movs	r3, #4
 800159a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b0:	2305      	movs	r3, #5
 80015b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ba:	4619      	mov	r1, r3
 80015bc:	4811      	ldr	r0, [pc, #68]	; (8001604 <HAL_SPI_MspInit+0x164>)
 80015be:	f000 fc95 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <HAL_SPI_MspInit+0x168>)
 80015ea:	f000 fc7f 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	37f0      	adds	r7, #240	; 0xf0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40003800 	.word	0x40003800
 80015fc:	58024400 	.word	0x58024400
 8001600:	58020c00 	.word	0x58020c00
 8001604:	58022000 	.word	0x58022000
 8001608:	58020400 	.word	0x58020400

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a27      	ldr	r2, [pc, #156]	; (80016b8 <HAL_TIM_Base_MspInit+0xac>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d10f      	bne.n	800163e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001624:	4a25      	ldr	r2, [pc, #148]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800163c:	e038      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001646:	d117      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 800165a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	201c      	movs	r0, #28
 800166c:	f000 fc09 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001670:	201c      	movs	r0, #28
 8001672:	f000 fc20 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
}
 8001676:	e01b      	b.n	80016b0 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_TIM_Base_MspInit+0xb4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d116      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_TIM_Base_MspInit+0xb0>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2075      	movs	r0, #117	; 0x75
 80016a6:	f000 fbec 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80016aa:	2075      	movs	r0, #117	; 0x75
 80016ac:	f000 fc03 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010000 	.word	0x40010000
 80016bc:	58024400 	.word	0x58024400
 80016c0:	40014400 	.word	0x40014400

080016c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_TIM_PWM_MspInit+0x48>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d116      	bne.n	8001704 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <HAL_TIM_PWM_MspInit+0x4c>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016dc:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <HAL_TIM_PWM_MspInit+0x4c>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_TIM_PWM_MspInit+0x4c>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	201e      	movs	r0, #30
 80016fa:	f000 fbc2 	bl	8001e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016fe:	201e      	movs	r0, #30
 8001700:	f000 fbd9 	bl	8001eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40000800 	.word	0x40000800
 8001710:	58024400 	.word	0x58024400

08001714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a26      	ldr	r2, [pc, #152]	; (80017cc <HAL_TIM_MspPostInit+0xb8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d120      	bne.n	8001778 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001766:	2301      	movs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4818      	ldr	r0, [pc, #96]	; (80017d4 <HAL_TIM_MspPostInit+0xc0>)
 8001772:	f000 fbbb 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001776:	e024      	b.n	80017c2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a16      	ldr	r2, [pc, #88]	; (80017d8 <HAL_TIM_MspPostInit+0xc4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11f      	bne.n	80017c2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 8001784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_TIM_MspPostInit+0xbc>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017b2:	2302      	movs	r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <HAL_TIM_MspPostInit+0xc8>)
 80017be:	f000 fb95 	bl	8001eec <HAL_GPIO_Init>
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40010000 	.word	0x40010000
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58020000 	.word	0x58020000
 80017d8:	40000800 	.word	0x40000800
 80017dc:	58020c00 	.word	0x58020c00

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0ba      	sub	sp, #232	; 0xe8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	22c0      	movs	r2, #192	; 0xc0
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f006 fe19 	bl	8008438 <memset>
  if(huart->Instance==USART3)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <HAL_UART_MspInit+0xc8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d146      	bne.n	800189e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001810:	f04f 0202 	mov.w	r2, #2
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fd9e 	bl	8003368 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001832:	f7ff fe15 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_UART_MspInit+0xcc>)
 8001838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800183c:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_UART_MspInit+0xcc>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001846:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_UART_MspInit+0xcc>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_UART_MspInit+0xcc>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_UART_MspInit+0xcc>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0xcc>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001872:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0xd0>)
 800189a:	f000 fb27 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	37e8      	adds	r7, #232	; 0xe8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40004800 	.word	0x40004800
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58020400 	.word	0x58020400

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001900:	f000 f994 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800190c:	2040      	movs	r0, #64	; 0x40
 800190e:	f000 fcd0 	bl	80022b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001912:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001916:	f000 fccc 	bl	80022b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM2_IRQHandler+0x10>)
 8001926:	f004 fb47 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24000168 	.word	0x24000168

08001934 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM4_IRQHandler+0x10>)
 800193a:	f004 fb3d 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	240001b4 	.word	0x240001b4

08001948 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <TIM16_IRQHandler+0x10>)
 800194e:	f004 fb33 	bl	8005fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	24000200 	.word	0x24000200

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f006 fd2a 	bl	80083e4 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	24080000 	.word	0x24080000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	240002f8 	.word	0x240002f8
 80019c4:	24000310 	.word	0x24000310

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019cc:	f000 f826 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	; (8001a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	; (8001a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f006 fcfb 	bl	80083f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7fe fe43 	bl	8000684 <main>
  bx  lr
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a08:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001a0c:	08008dc0 	.word	0x08008dc0
  ldr r2, =_sbss
 8001a10:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001a14:	24000310 	.word	0x24000310

08001a18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC3_IRQHandler>
	...

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a20:	4b3d      	ldr	r3, [pc, #244]	; (8001b18 <SystemInit+0xfc>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a3c      	ldr	r2, [pc, #240]	; (8001b18 <SystemInit+0xfc>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001a30:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <SystemInit+0xfc>)
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <SystemInit+0xfc>)
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <SystemInit+0x100>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	2b06      	cmp	r3, #6
 8001a46:	d807      	bhi.n	8001a58 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <SystemInit+0x100>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f023 030f 	bic.w	r3, r3, #15
 8001a50:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <SystemInit+0x100>)
 8001a52:	f043 0307 	orr.w	r3, r3, #7
 8001a56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <SystemInit+0x104>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <SystemInit+0x104>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <SystemInit+0x104>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <SystemInit+0x104>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	492c      	ldr	r1, [pc, #176]	; (8001b20 <SystemInit+0x104>)
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <SystemInit+0x108>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a76:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <SystemInit+0x100>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <SystemInit+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 030f 	bic.w	r3, r3, #15
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <SystemInit+0x100>)
 8001a8c:	f043 0307 	orr.w	r3, r3, #7
 8001a90:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <SystemInit+0x104>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <SystemInit+0x104>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <SystemInit+0x104>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <SystemInit+0x104>)
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <SystemInit+0x10c>)
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <SystemInit+0x104>)
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <SystemInit+0x110>)
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <SystemInit+0x104>)
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <SystemInit+0x114>)
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <SystemInit+0x104>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <SystemInit+0x104>)
 8001abe:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <SystemInit+0x114>)
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <SystemInit+0x104>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <SystemInit+0x104>)
 8001aca:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <SystemInit+0x114>)
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <SystemInit+0x104>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <SystemInit+0x104>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <SystemInit+0x104>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <SystemInit+0x104>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <SystemInit+0x118>)
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	4a12      	ldr	r2, [pc, #72]	; (8001b34 <SystemInit+0x118>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <SystemInit+0x11c>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <SystemInit+0x120>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001afe:	d202      	bcs.n	8001b06 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <SystemInit+0x124>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <SystemInit+0x128>)
 8001b08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b0c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	52002000 	.word	0x52002000
 8001b20:	58024400 	.word	0x58024400
 8001b24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b28:	02020200 	.word	0x02020200
 8001b2c:	01ff0000 	.word	0x01ff0000
 8001b30:	01010280 	.word	0x01010280
 8001b34:	580000c0 	.word	0x580000c0
 8001b38:	5c001000 	.word	0x5c001000
 8001b3c:	ffff0000 	.word	0xffff0000
 8001b40:	51008108 	.word	0x51008108
 8001b44:	52004000 	.word	0x52004000

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f000 f98c 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b54:	f001 fa32 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_Init+0x68>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	4913      	ldr	r1, [pc, #76]	; (8001bb4 <HAL_Init+0x6c>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_Init+0x68>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_Init+0x6c>)
 8001b7c:	5cd3      	ldrb	r3, [r2, r3]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_Init+0x70>)
 8001b8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_Init+0x74>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b92:	2000      	movs	r0, #0
 8001b94:	f000 f814 	bl	8001bc0 <HAL_InitTick>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e002      	b.n	8001ba8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba2:	f7ff fc63 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	58024400 	.word	0x58024400
 8001bb4:	08008d44 	.word	0x08008d44
 8001bb8:	24000008 	.word	0x24000008
 8001bbc:	24000004 	.word	0x24000004

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_InitTick+0x60>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e021      	b.n	8001c18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_InitTick+0x64>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_InitTick+0x60>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f971 	bl	8001ed2 <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f93b 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <HAL_InitTick+0x68>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	24000010 	.word	0x24000010
 8001c24:	24000004 	.word	0x24000004
 8001c28:	2400000c 	.word	0x2400000c

08001c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x20>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x24>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_IncTick+0x24>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	24000010 	.word	0x24000010
 8001c50:	240002fc 	.word	0x240002fc

08001c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_GetTick+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	240002fc 	.word	0x240002fc

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffee 	bl	8001c54 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffde 	bl	8001c54 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	24000010 	.word	0x24000010

08001cb4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetREVID+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	5c001000 	.word	0x5c001000

08001ccc <__NVIC_SetPriorityGrouping>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x40>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	05fa0000 	.word	0x05fa0000

08001d14 <__NVIC_GetPriorityGrouping>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_EnableIRQ>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db0b      	blt.n	8001d5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <__NVIC_EnableIRQ+0x38>)
 8001d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	2001      	movs	r0, #1
 8001d52:	fa00 f202 	lsl.w	r2, r0, r2
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <__NVIC_SetPriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff29 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e90:	f7ff ff40 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	6978      	ldr	r0, [r7, #20]
 8001e9c:	f7ff ff90 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff5f 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eae:	bf00      	nop
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff33 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ffa4 	bl	8001e28 <SysTick_Config>
 8001ee0:	4603      	mov	r3, r0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001efa:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_GPIO_Init+0x234>)
 8001efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001efe:	e194      	b.n	800222a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8186 	beq.w	8002224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d005      	beq.n	8001f30 <HAL_GPIO_Init+0x44>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d130      	bne.n	8001f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f66:	2201      	movs	r2, #1
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f003 0201 	and.w	r2, r3, #1
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d017      	beq.n	8001fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d123      	bne.n	8002022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	69b9      	ldr	r1, [r7, #24]
 800201e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0203 	and.w	r2, r3, #3
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80e0 	beq.w	8002224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <HAL_GPIO_Init+0x238>)
 8002066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800206a:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <HAL_GPIO_Init+0x238>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_GPIO_Init+0x238>)
 8002076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x23c>)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_GPIO_Init+0x240>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d052      	beq.n	8002154 <HAL_GPIO_Init+0x268>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <HAL_GPIO_Init+0x244>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_GPIO_Init+0x248>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x22a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x24c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x226>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_GPIO_Init+0x250>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x222>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_GPIO_Init+0x254>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x21e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <HAL_GPIO_Init+0x258>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_GPIO_Init+0x25c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x216>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_GPIO_Init+0x260>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x212>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_GPIO_Init+0x264>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x20e>
 80020f6:	2309      	movs	r3, #9
 80020f8:	e02d      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 80020fa:	230a      	movs	r3, #10
 80020fc:	e02b      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 80020fe:	2308      	movs	r3, #8
 8002100:	e029      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002102:	2307      	movs	r3, #7
 8002104:	e027      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002106:	2306      	movs	r3, #6
 8002108:	e025      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800210a:	2305      	movs	r3, #5
 800210c:	e023      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800210e:	2304      	movs	r3, #4
 8002110:	e021      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002112:	2303      	movs	r3, #3
 8002114:	e01f      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 8002116:	2302      	movs	r3, #2
 8002118:	e01d      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800211a:	2301      	movs	r3, #1
 800211c:	e01b      	b.n	8002156 <HAL_GPIO_Init+0x26a>
 800211e:	bf00      	nop
 8002120:	58000080 	.word	0x58000080
 8002124:	58024400 	.word	0x58024400
 8002128:	58000400 	.word	0x58000400
 800212c:	58020000 	.word	0x58020000
 8002130:	58020400 	.word	0x58020400
 8002134:	58020800 	.word	0x58020800
 8002138:	58020c00 	.word	0x58020c00
 800213c:	58021000 	.word	0x58021000
 8002140:	58021400 	.word	0x58021400
 8002144:	58021800 	.word	0x58021800
 8002148:	58021c00 	.word	0x58021c00
 800214c:	58022000 	.word	0x58022000
 8002150:	58022400 	.word	0x58022400
 8002154:	2300      	movs	r3, #0
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002166:	4938      	ldr	r1, [pc, #224]	; (8002248 <HAL_GPIO_Init+0x35c>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800219a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f ae63 	bne.w	8001f00 <HAL_GPIO_Init+0x14>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3724      	adds	r7, #36	; 0x24
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	58000400 	.word	0x58000400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002290:	887a      	ldrh	r2, [r7, #2]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	041a      	lsls	r2, r3, #16
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43d9      	mvns	r1, r3
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	400b      	ands	r3, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80022bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f88f 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022f0:	4b29      	ldr	r3, [pc, #164]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d00a      	beq.n	8002312 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e040      	b.n	8002390 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e03e      	b.n	8002390 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800231a:	491f      	ldr	r1, [pc, #124]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002322:	f7ff fc97 	bl	8001c54 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002328:	e009      	b.n	800233e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800232a:	f7ff fc93 	bl	8001c54 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002338:	d901      	bls.n	800233e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e028      	b.n	8002390 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234a:	d1ee      	bne.n	800232a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b1e      	cmp	r3, #30
 8002350:	d008      	beq.n	8002364 <HAL_PWREx_ConfigSupply+0x7c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b2e      	cmp	r3, #46	; 0x2e
 8002356:	d005      	beq.n	8002364 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b1d      	cmp	r3, #29
 800235c:	d002      	beq.n	8002364 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b2d      	cmp	r3, #45	; 0x2d
 8002362:	d114      	bne.n	800238e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002364:	f7ff fc76 	bl	8001c54 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800236a:	e009      	b.n	8002380 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800236c:	f7ff fc72 	bl	8001c54 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800237a:	d901      	bls.n	8002380 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e007      	b.n	8002390 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_PWREx_ConfigSupply+0xb0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d1ee      	bne.n	800236c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	58024800 	.word	0x58024800

0800239c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	f000 bc48 	b.w	8002c40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8088 	beq.w	80024ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023be:	4b99      	ldr	r3, [pc, #612]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023c8:	4b96      	ldr	r3, [pc, #600]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d007      	beq.n	80023e4 <HAL_RCC_OscConfig+0x48>
 80023d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d6:	2b18      	cmp	r3, #24
 80023d8:	d111      	bne.n	80023fe <HAL_RCC_OscConfig+0x62>
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d06d      	beq.n	80024cc <HAL_RCC_OscConfig+0x130>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d169      	bne.n	80024cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f000 bc21 	b.w	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x7a>
 8002408:	4b86      	ldr	r3, [pc, #536]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a85      	ldr	r2, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x9c>
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a80      	ldr	r2, [pc, #512]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a7d      	ldr	r2, [pc, #500]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xc0>
 8002442:	4b78      	ldr	r3, [pc, #480]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a77      	ldr	r2, [pc, #476]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xd8>
 800245c:	4b71      	ldr	r3, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a70      	ldr	r2, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a6d      	ldr	r2, [pc, #436]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fbea 	bl	8001c54 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fbe6 	bl	8001c54 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e3d4      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xe8>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fbd6 	bl	8001c54 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fbd2 	bl	8001c54 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	; 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e3c0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024be:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x110>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80ca 	beq.w	8002670 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024dc:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e6:	4b4f      	ldr	r3, [pc, #316]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_RCC_OscConfig+0x166>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b18      	cmp	r3, #24
 80024f6:	d156      	bne.n	80025a6 <HAL_RCC_OscConfig+0x20a>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d151      	bne.n	80025a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	4b48      	ldr	r3, [pc, #288]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x17e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e392      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251a:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0219 	bic.w	r2, r3, #25
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	493f      	ldr	r1, [pc, #252]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fb92 	bl	8001c54 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fb8e 	bl	8001c54 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e37c      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	f7ff fbaf 	bl	8001cb4 <HAL_GetREVID>
 8002556:	4603      	mov	r3, r0
 8002558:	f241 0203 	movw	r2, #4099	; 0x1003
 800255c:	4293      	cmp	r3, r2
 800255e:	d817      	bhi.n	8002590 <HAL_RCC_OscConfig+0x1f4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d108      	bne.n	800257a <HAL_RCC_OscConfig+0x1de>
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002570:	4a2c      	ldr	r2, [pc, #176]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	e07a      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	031b      	lsls	r3, r3, #12
 8002588:	4926      	ldr	r1, [pc, #152]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258e:	e06f      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e064      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d047      	beq.n	800263e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 0219 	bic.w	r2, r3, #25
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	491a      	ldr	r1, [pc, #104]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7ff fb48 	bl	8001c54 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7ff fb44 	bl	8001c54 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e332      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025da:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	f7ff fb65 	bl	8001cb4 <HAL_GetREVID>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d819      	bhi.n	8002628 <HAL_RCC_OscConfig+0x28c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d108      	bne.n	800260e <HAL_RCC_OscConfig+0x272>
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002604:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	6053      	str	r3, [r2, #4]
 800260c:	e030      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	031b      	lsls	r3, r3, #12
 800261c:	4901      	ldr	r1, [pc, #4]	; (8002624 <HAL_RCC_OscConfig+0x288>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
 8002622:	e025      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
 8002624:	58024400 	.word	0x58024400
 8002628:	4b9a      	ldr	r3, [pc, #616]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4997      	ldr	r1, [pc, #604]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
 800263c:	e018      	b.n	8002670 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b95      	ldr	r3, [pc, #596]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a94      	ldr	r2, [pc, #592]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7ff fb03 	bl	8001c54 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7ff faff 	bl	8001c54 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e2ed      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002664:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a9 	beq.w	80027d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267e:	4b85      	ldr	r3, [pc, #532]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002686:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002688:	4b82      	ldr	r3, [pc, #520]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_OscConfig+0x308>
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b18      	cmp	r3, #24
 8002698:	d13a      	bne.n	8002710 <HAL_RCC_OscConfig+0x374>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d135      	bne.n	8002710 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_OscConfig+0x320>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e2c1      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026bc:	f7ff fafa 	bl	8001cb4 <HAL_GetREVID>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d817      	bhi.n	80026fa <HAL_RCC_OscConfig+0x35e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x348>
 80026d2:	4b70      	ldr	r3, [pc, #448]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026e2:	e075      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026e4:	4b6b      	ldr	r3, [pc, #428]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	069b      	lsls	r3, r3, #26
 80026f2:	4968      	ldr	r1, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f8:	e06a      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026fa:	4b66      	ldr	r3, [pc, #408]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4962      	ldr	r1, [pc, #392]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270e:	e05f      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d042      	beq.n	800279e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5d      	ldr	r2, [pc, #372]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7ff fa96 	bl	8001c54 <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800272c:	f7ff fa92 	bl	8001c54 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e280      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800274a:	f7ff fab3 	bl	8001cb4 <HAL_GetREVID>
 800274e:	4603      	mov	r3, r0
 8002750:	f241 0203 	movw	r2, #4099	; 0x1003
 8002754:	4293      	cmp	r3, r2
 8002756:	d817      	bhi.n	8002788 <HAL_RCC_OscConfig+0x3ec>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	2b20      	cmp	r3, #32
 800275e:	d108      	bne.n	8002772 <HAL_RCC_OscConfig+0x3d6>
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002768:	4a4a      	ldr	r2, [pc, #296]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800276a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800276e:	6053      	str	r3, [r2, #4]
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
 8002772:	4b48      	ldr	r3, [pc, #288]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	069b      	lsls	r3, r3, #26
 8002780:	4944      	ldr	r1, [pc, #272]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
 8002786:	e023      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
 8002788:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	493f      	ldr	r1, [pc, #252]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e018      	b.n	80027d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a3c      	ldr	r2, [pc, #240]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff fa53 	bl	8001c54 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027b2:	f7ff fa4f 	bl	8001c54 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e23d      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f0      	bne.n	80027b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d036      	beq.n	800284a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d019      	beq.n	8002818 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7ff fa30 	bl	8001c54 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7ff fa2c 	bl	8001c54 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e21a      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280a:	4b22      	ldr	r3, [pc, #136]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x45c>
 8002816:	e018      	b.n	800284a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	f023 0301 	bic.w	r3, r3, #1
 8002822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7ff fa16 	bl	8001c54 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7ff fa12 	bl	8001c54 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e200      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d039      	beq.n	80028ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d01c      	beq.n	8002898 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002868:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286a:	f7ff f9f3 	bl	8001c54 <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002872:	f7ff f9ef 	bl	8001c54 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e1dd      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x4d6>
 8002890:	e01b      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
 8002892:	bf00      	nop
 8002894:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002898:	4b9b      	ldr	r3, [pc, #620]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9a      	ldr	r2, [pc, #616]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800289e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a4:	f7ff f9d6 	bl	8001c54 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ac:	f7ff f9d2 	bl	8001c54 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1c0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028be:	4b92      	ldr	r3, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8081 	beq.w	80029da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028d8:	4b8c      	ldr	r3, [pc, #560]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a8b      	ldr	r2, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e4:	f7ff f9b6 	bl	8001c54 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7ff f9b2 	bl	8001c54 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1a0      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fe:	4b83      	ldr	r3, [pc, #524]	; (8002b0c <HAL_RCC_OscConfig+0x770>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <HAL_RCC_OscConfig+0x584>
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a7c      	ldr	r2, [pc, #496]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
 800291e:	e02d      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10c      	bne.n	8002942 <HAL_RCC_OscConfig+0x5a6>
 8002928:	4b77      	ldr	r3, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a76      	ldr	r2, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b74      	ldr	r3, [pc, #464]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a73      	ldr	r2, [pc, #460]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b05      	cmp	r3, #5
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c8>
 800294a:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a6e      	ldr	r2, [pc, #440]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a6b      	ldr	r2, [pc, #428]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x5e0>
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a64      	ldr	r2, [pc, #400]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff f966 	bl	8001c54 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7ff f962 	bl	8001c54 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e14e      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029a2:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0ee      	beq.n	800298c <HAL_RCC_OscConfig+0x5f0>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7ff f950 	bl	8001c54 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff f94c 	bl	8001c54 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e138      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ce:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ee      	bne.n	80029b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 812d 	beq.w	8002c3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029e4:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	f000 80bd 	beq.w	8002b6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	f040 809e 	bne.w	8002b38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7ff f924 	bl	8001c54 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7ff f920 	bl	8001c54 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e10e      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a32:	4b37      	ldr	r3, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0x774>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	430a      	orrs	r2, r1
 8002a42:	4931      	ldr	r1, [pc, #196]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	628b      	str	r3, [r1, #40]	; 0x28
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	3b01      	subs	r3, #1
 8002a58:	025b      	lsls	r3, r3, #9
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a70:	3b01      	subs	r3, #1
 8002a72:	061b      	lsls	r3, r3, #24
 8002a74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a78:	4923      	ldr	r1, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x778>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a96:	00d2      	lsls	r2, r2, #3
 8002a98:	491b      	ldr	r1, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	f023 020c 	bic.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4917      	ldr	r1, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	f023 0202 	bic.w	r2, r3, #2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	4912      	ldr	r1, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ae6:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4a07      	ldr	r2, [pc, #28]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff f8a9 	bl	8001c54 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b04:	e011      	b.n	8002b2a <HAL_RCC_OscConfig+0x78e>
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58024800 	.word	0x58024800
 8002b10:	fffffc0c 	.word	0xfffffc0c
 8002b14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff f89c 	bl	8001c54 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e08a      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x77c>
 8002b36:	e082      	b.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff f886 	bl	8001c54 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff f882 	bl	8001c54 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e070      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x7b0>
 8002b6a:	e068      	b.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b72:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d031      	beq.n	8002be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0203 	and.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d12a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d122      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d11a      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	0a5b      	lsrs	r3, r3, #9
 8002bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e02b      	b.n	8002c40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002be8:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bf2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d01f      	beq.n	8002c3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c0a:	f7ff f823 	bl	8001c54 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c10:	bf00      	nop
 8002c12:	f7ff f81f 	bl	8001c54 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d0f9      	beq.n	8002c12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x8b0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c2a:	00d2      	lsls	r2, r2, #3
 8002c2c:	4906      	ldr	r1, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3730      	adds	r7, #48	; 0x30
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	ffff0007 	.word	0xffff0007

08002c50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e19c      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b8a      	ldr	r3, [pc, #552]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	4985      	ldr	r1, [pc, #532]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b83      	ldr	r3, [pc, #524]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e184      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	4b7b      	ldr	r3, [pc, #492]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d908      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb0:	4b78      	ldr	r3, [pc, #480]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	4975      	ldr	r1, [pc, #468]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b70      	ldr	r3, [pc, #448]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d908      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cde:	4b6d      	ldr	r3, [pc, #436]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	496a      	ldr	r1, [pc, #424]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	495e      	ldr	r1, [pc, #376]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d908      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d3a:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4953      	ldr	r1, [pc, #332]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d908      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f023 020f 	bic.w	r2, r3, #15
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4947      	ldr	r1, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d055      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d86:	4b43      	ldr	r3, [pc, #268]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4940      	ldr	r1, [pc, #256]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da0:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d121      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0f6      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db8:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d115      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0ea      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0de      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0d6      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f023 0207 	bic.w	r2, r3, #7
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4925      	ldr	r1, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe ff27 	bl	8001c54 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0a:	f7fe ff23 	bl	8001c54 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e0be      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d1eb      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d208      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f023 020f 	bic.w	r2, r3, #15
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	490e      	ldr	r1, [pc, #56]	; (8002e94 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d214      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 020f 	bic.w	r2, r3, #15
 8002e76:	4906      	ldr	r1, [pc, #24]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_ClockConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e086      	b.n	8002f9e <HAL_RCC_ClockConfig+0x34e>
 8002e90:	52002000 	.word	0x52002000
 8002e94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d208      	bcs.n	8002ec6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4939      	ldr	r1, [pc, #228]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d208      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	492e      	ldr	r1, [pc, #184]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4922      	ldr	r1, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f3e:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4917      	ldr	r1, [pc, #92]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f50:	f000 f834 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	4912      	ldr	r1, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x35c>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <HAL_RCC_ClockConfig+0x35c>)
 8002f78:	5cd3      	ldrb	r3, [r2, r3]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x360>)
 8002f86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f88:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <HAL_RCC_ClockConfig+0x364>)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x368>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe fe14 	bl	8001bc0 <HAL_InitTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	08008d44 	.word	0x08008d44
 8002fb0:	24000008 	.word	0x24000008
 8002fb4:	24000004 	.word	0x24000004
 8002fb8:	2400000c 	.word	0x2400000c

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc2:	4bb3      	ldr	r3, [pc, #716]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fca:	2b18      	cmp	r3, #24
 8002fcc:	f200 8155 	bhi.w	800327a <HAL_RCC_GetSysClockFreq+0x2be>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	0800303d 	.word	0x0800303d
 8002fdc:	0800327b 	.word	0x0800327b
 8002fe0:	0800327b 	.word	0x0800327b
 8002fe4:	0800327b 	.word	0x0800327b
 8002fe8:	0800327b 	.word	0x0800327b
 8002fec:	0800327b 	.word	0x0800327b
 8002ff0:	0800327b 	.word	0x0800327b
 8002ff4:	0800327b 	.word	0x0800327b
 8002ff8:	08003063 	.word	0x08003063
 8002ffc:	0800327b 	.word	0x0800327b
 8003000:	0800327b 	.word	0x0800327b
 8003004:	0800327b 	.word	0x0800327b
 8003008:	0800327b 	.word	0x0800327b
 800300c:	0800327b 	.word	0x0800327b
 8003010:	0800327b 	.word	0x0800327b
 8003014:	0800327b 	.word	0x0800327b
 8003018:	08003069 	.word	0x08003069
 800301c:	0800327b 	.word	0x0800327b
 8003020:	0800327b 	.word	0x0800327b
 8003024:	0800327b 	.word	0x0800327b
 8003028:	0800327b 	.word	0x0800327b
 800302c:	0800327b 	.word	0x0800327b
 8003030:	0800327b 	.word	0x0800327b
 8003034:	0800327b 	.word	0x0800327b
 8003038:	0800306f 	.word	0x0800306f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800303c:	4b94      	ldr	r3, [pc, #592]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003048:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	4a90      	ldr	r2, [pc, #576]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800305a:	e111      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800305c:	4b8d      	ldr	r3, [pc, #564]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800305e:	61bb      	str	r3, [r7, #24]
      break;
 8003060:	e10e      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003062:	4b8d      	ldr	r3, [pc, #564]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003064:	61bb      	str	r3, [r7, #24]
      break;
 8003066:	e10b      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003068:	4b8c      	ldr	r3, [pc, #560]	; (800329c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800306a:	61bb      	str	r3, [r7, #24]
      break;
 800306c:	e108      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003078:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	091b      	lsrs	r3, r3, #4
 800307e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003082:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003084:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800308e:	4b80      	ldr	r3, [pc, #512]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003092:	08db      	lsrs	r3, r3, #3
 8003094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80e1 	beq.w	8003274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	f000 8083 	beq.w	80031c0 <HAL_RCC_GetSysClockFreq+0x204>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	f200 80a1 	bhi.w	8003204 <HAL_RCC_GetSysClockFreq+0x248>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x114>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d056      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ce:	e099      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02d      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	08db      	lsrs	r3, r3, #3
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	4a6b      	ldr	r2, [pc, #428]	; (8003294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003106:	4b62      	ldr	r3, [pc, #392]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003116:	ed97 6a02 	vldr	s12, [r7, #8]
 800311a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800311e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800312a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003136:	e087      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315a:	ed97 6a02 	vldr	s12, [r7, #8]
 800315e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800316e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800317a:	e065      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800318a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319e:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031be:	e043      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003202:	e021      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003226:	ed97 6a02 	vldr	s12, [r7, #8]
 800322a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800322e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003246:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	0a5b      	lsrs	r3, r3, #9
 800324e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003252:	3301      	adds	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003260:	edd7 6a07 	vldr	s13, [r7, #28]
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800326c:	ee17 3a90 	vmov	r3, s15
 8003270:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003272:	e005      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e002      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
      break;
 800327e:	bf00      	nop
  }

  return sysclockfreq;
 8003280:	69bb      	ldr	r3, [r7, #24]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	58024400 	.word	0x58024400
 8003294:	03d09000 	.word	0x03d09000
 8003298:	003d0900 	.word	0x003d0900
 800329c:	017d7840 	.word	0x017d7840
 80032a0:	46000000 	.word	0x46000000
 80032a4:	4c742400 	.word	0x4c742400
 80032a8:	4a742400 	.word	0x4a742400
 80032ac:	4bbebc20 	.word	0x4bbebc20

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032b6:	f7ff fe81 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_GetHCLKFreq+0x50>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490f      	ldr	r1, [pc, #60]	; (8003304 <HAL_RCC_GetHCLKFreq+0x54>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_GetHCLKFreq+0x50>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_GetHCLKFreq+0x54>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <HAL_RCC_GetHCLKFreq+0x58>)
 80032ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <HAL_RCC_GetHCLKFreq+0x5c>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_GetHCLKFreq+0x58>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	08008d44 	.word	0x08008d44
 8003308:	24000008 	.word	0x24000008
 800330c:	24000004 	.word	0x24000004

08003310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003314:	f7ff ffcc 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	58024400 	.word	0x58024400
 8003338:	08008d44 	.word	0x08008d44

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003340:	f7ff ffb6 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	08008d44 	.word	0x08008d44

08003368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b0ca      	sub	sp, #296	; 0x128
 800336e:	af00      	add	r7, sp, #0
 8003370:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800338c:	2500      	movs	r5, #0
 800338e:	ea54 0305 	orrs.w	r3, r4, r5
 8003392:	d049      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800339e:	d02f      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a4:	d828      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033aa:	d01a      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b0:	d822      	bhi.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d007      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033bc:	e01c      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033be:	4bb8      	ldr	r3, [pc, #736]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4ab7      	ldr	r2, [pc, #732]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ca:	e01a      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	3308      	adds	r3, #8
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 fc8f 	bl	8004cf8 <RCCEx_PLL2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e0:	e00f      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	3328      	adds	r3, #40	; 0x28
 80033e8:	2102      	movs	r1, #2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f001 fd36 	bl	8004e5c <RCCEx_PLL3_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f6:	e004      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033fe:	e000      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800340a:	4ba5      	ldr	r3, [pc, #660]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003418:	4aa1      	ldr	r2, [pc, #644]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800341a:	430b      	orrs	r3, r1
 800341c:	6513      	str	r3, [r2, #80]	; 0x50
 800341e:	e003      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003424:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003434:	f04f 0900 	mov.w	r9, #0
 8003438:	ea58 0309 	orrs.w	r3, r8, r9
 800343c:	d047      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	2b04      	cmp	r3, #4
 8003446:	d82a      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003465 	.word	0x08003465
 8003454:	08003473 	.word	0x08003473
 8003458:	08003489 	.word	0x08003489
 800345c:	080034a7 	.word	0x080034a7
 8003460:	080034a7 	.word	0x080034a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003464:	4b8e      	ldr	r3, [pc, #568]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	4a8d      	ldr	r2, [pc, #564]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003470:	e01a      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003476:	3308      	adds	r3, #8
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fc3c 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003486:	e00f      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348c:	3328      	adds	r3, #40	; 0x28
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fce3 	bl	8004e5c <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349c:	e004      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034a4:	e000      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b0:	4b7b      	ldr	r3, [pc, #492]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	f023 0107 	bic.w	r1, r3, #7
 80034b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6513      	str	r3, [r2, #80]	; 0x50
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80034da:	f04f 0b00 	mov.w	fp, #0
 80034de:	ea5a 030b 	orrs.w	r3, sl, fp
 80034e2:	d04c      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d030      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f4:	d829      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034f6:	2bc0      	cmp	r3, #192	; 0xc0
 80034f8:	d02d      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034fa:	2bc0      	cmp	r3, #192	; 0xc0
 80034fc:	d825      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d018      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d821      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d007      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800350e:	e01c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003510:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	4a62      	ldr	r2, [pc, #392]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800351c:	e01c      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003522:	3308      	adds	r3, #8
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fbe6 	bl	8004cf8 <RCCEx_PLL2_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003532:	e011      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003538:	3328      	adds	r3, #40	; 0x28
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f001 fc8d 	bl	8004e5c <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003548:	e006      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003550:	e002      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	4a4c      	ldr	r2, [pc, #304]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003570:	430b      	orrs	r3, r1
 8003572:	6513      	str	r3, [r2, #80]	; 0x50
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800357a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800358a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003594:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d053      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035aa:	d035      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035b0:	d82e      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035b6:	d031      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d01a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035d4:	e01c      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e2:	e01c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e8:	3308      	adds	r3, #8
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fb83 	bl	8004cf8 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fe:	3328      	adds	r3, #40	; 0x28
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fc2a 	bl	8004e5c <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800360e:	e006      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003616:	e002      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800361c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003626:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003636:	4a1a      	ldr	r2, [pc, #104]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6593      	str	r3, [r2, #88]	; 0x58
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003652:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800365c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d056      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003672:	d038      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d831      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800367a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367e:	d034      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003680:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003684:	d82b      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368a:	d01d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800368c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003690:	d825      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d006      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800369c:	e01f      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4ba2      	ldr	r3, [pc, #648]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4aa1      	ldr	r2, [pc, #644]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b0:	e01c      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b6:	3308      	adds	r3, #8
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fb1c 	bl	8004cf8 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036cc:	3328      	adds	r3, #40	; 0x28
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fbc3 	bl	8004e5c <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036f4:	4b8e      	ldr	r3, [pc, #568]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003704:	4a8a      	ldr	r2, [pc, #552]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	e003      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800372a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800372e:	460b      	mov	r3, r1
 8003730:	4313      	orrs	r3, r2
 8003732:	d03a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800373a:	2b30      	cmp	r3, #48	; 0x30
 800373c:	d01f      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800373e:	2b30      	cmp	r3, #48	; 0x30
 8003740:	d819      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003742:	2b20      	cmp	r3, #32
 8003744:	d00c      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003746:	2b20      	cmp	r3, #32
 8003748:	d815      	bhi.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d019      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800374e:	2b10      	cmp	r3, #16
 8003750:	d111      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003752:	4b77      	ldr	r3, [pc, #476]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800375e:	e011      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003764:	3308      	adds	r3, #8
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fac5 	bl	8004cf8 <RCCEx_PLL2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800377e:	bf00      	nop
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379a:	4a65      	ldr	r2, [pc, #404]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379c:	430b      	orrs	r3, r1
 800379e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80037b6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4313      	orrs	r3, r2
 80037c8:	d051      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d4:	d035      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d82e      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e0:	d031      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037e6:	d828      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ec:	d01a      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d822      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d007      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037fe:	e01c      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800380c:	e01c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003812:	3308      	adds	r3, #8
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fa6e 	bl	8004cf8 <RCCEx_PLL2_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003822:	e011      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	3328      	adds	r3, #40	; 0x28
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fb15 	bl	8004e5c <RCCEx_PLL3_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	4a34      	ldr	r2, [pc, #208]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003860:	430b      	orrs	r3, r1
 8003862:	6513      	str	r3, [r2, #80]	; 0x50
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800387a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003884:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003888:	460b      	mov	r3, r1
 800388a:	4313      	orrs	r3, r2
 800388c:	d056      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003892:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003898:	d033      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800389a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389e:	d82c      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a4:	d02f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038aa:	d826      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b0:	d02b      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b6:	d820      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038bc:	d012      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c2:	d81a      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d115      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	3308      	adds	r3, #8
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fa0e 	bl	8004cf8 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038e2:	e015      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	3328      	adds	r3, #40	; 0x28
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fab5 	bl	8004e5c <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038f8:	e00a      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003900:	e006      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003902:	bf00      	nop
 8003904:	e004      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003906:	bf00      	nop
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800390e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003926:	4a02      	ldr	r2, [pc, #8]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6513      	str	r3, [r2, #80]	; 0x50
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003952:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d055      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003968:	d033      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800396a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396e:	d82c      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d02f      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d826      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800397c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003980:	d02b      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003986:	d820      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398c:	d012      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800398e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003992:	d81a      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d022      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399c:	d115      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	3308      	adds	r3, #8
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f9a6 	bl	8004cf8 <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039b2:	e015      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b8:	3328      	adds	r3, #40	; 0x28
 80039ba:	2101      	movs	r1, #1
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fa4d 	bl	8004e5c <RCCEx_PLL3_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d0:	e006      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039e8:	4ba3      	ldr	r3, [pc, #652]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039f8:	4a9f      	ldr	r2, [pc, #636]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fa:	430b      	orrs	r3, r1
 80039fc:	6593      	str	r3, [r2, #88]	; 0x58
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a22:	460b      	mov	r3, r1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	d037      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a32:	d00e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a38:	d816      	bhi.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a42:	d111      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b8c      	ldr	r3, [pc, #560]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a8b      	ldr	r2, [pc, #556]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a50:	e00f      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	3308      	adds	r3, #8
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f94c 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a66:	e004      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a6e:	e000      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a7b      	ldr	r2, [pc, #492]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003a8e:	e003      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003aae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d039      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d81c      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003ad9 	.word	0x08003ad9
 8003ad0:	08003ae7 	.word	0x08003ae7
 8003ad4:	08003b05 	.word	0x08003b05
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a66      	ldr	r2, [pc, #408]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ae4:	e00f      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aea:	3308      	adds	r3, #8
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 f902 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003afa:	e004      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b0e:	4b5a      	ldr	r3, [pc, #360]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f023 0103 	bic.w	r1, r3, #3
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1c:	4a56      	ldr	r2, [pc, #344]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b22:	e003      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f000 809f 	beq.w	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a4a      	ldr	r2, [pc, #296]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b5a:	f7fe f87b 	bl	8001c54 <HAL_GetTick>
 8003b5e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b62:	e00b      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b64:	f7fe f876 	bl	8001c54 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d903      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7a:	e005      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b7c:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ed      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d179      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b9c:	4053      	eors	r3, r2
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d015      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ba6:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb2:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4a30      	ldr	r2, [pc, #192]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a2d      	ldr	r2, [pc, #180]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bca:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe f838 	bl	8001c54 <HAL_GetTick>
 8003be4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be8:	e00d      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe f833 	bl	8001c54 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bf4:	1ad2      	subs	r2, r2, r3
 8003bf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003c04:	e005      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0eb      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d129      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c2a:	d10e      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c3c:	091a      	lsrs	r2, r3, #4
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6113      	str	r3, [r2, #16]
 8003c48:	e005      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c54:	6113      	str	r3, [r2, #16]
 8003c56:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	e00e      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003c76:	e009      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c78:	58024400 	.word	0x58024400
 8003c7c:	58024800 	.word	0x58024800
 8003c80:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f002 0301 	and.w	r3, r2, #1
 8003c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ca2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f000 8089 	beq.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb4:	2b28      	cmp	r3, #40	; 0x28
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003d99 	.word	0x08003d99
 8003cc4:	08003d91 	.word	0x08003d91
 8003cc8:	08003d91 	.word	0x08003d91
 8003ccc:	08003d91 	.word	0x08003d91
 8003cd0:	08003d91 	.word	0x08003d91
 8003cd4:	08003d91 	.word	0x08003d91
 8003cd8:	08003d91 	.word	0x08003d91
 8003cdc:	08003d91 	.word	0x08003d91
 8003ce0:	08003d65 	.word	0x08003d65
 8003ce4:	08003d91 	.word	0x08003d91
 8003ce8:	08003d91 	.word	0x08003d91
 8003cec:	08003d91 	.word	0x08003d91
 8003cf0:	08003d91 	.word	0x08003d91
 8003cf4:	08003d91 	.word	0x08003d91
 8003cf8:	08003d91 	.word	0x08003d91
 8003cfc:	08003d91 	.word	0x08003d91
 8003d00:	08003d7b 	.word	0x08003d7b
 8003d04:	08003d91 	.word	0x08003d91
 8003d08:	08003d91 	.word	0x08003d91
 8003d0c:	08003d91 	.word	0x08003d91
 8003d10:	08003d91 	.word	0x08003d91
 8003d14:	08003d91 	.word	0x08003d91
 8003d18:	08003d91 	.word	0x08003d91
 8003d1c:	08003d91 	.word	0x08003d91
 8003d20:	08003d99 	.word	0x08003d99
 8003d24:	08003d91 	.word	0x08003d91
 8003d28:	08003d91 	.word	0x08003d91
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003d91 	.word	0x08003d91
 8003d34:	08003d91 	.word	0x08003d91
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003d91 	.word	0x08003d91
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d91 	.word	0x08003d91
 8003d4c:	08003d91 	.word	0x08003d91
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003d99 	.word	0x08003d99
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d68:	3308      	adds	r3, #8
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 ffc3 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d78:	e00f      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7e:	3328      	adds	r3, #40	; 0x28
 8003d80:	2101      	movs	r1, #1
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 f86a 	bl	8004e5c <RCCEx_PLL3_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d8e:	e004      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d96:	e000      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003da2:	4bbf      	ldr	r3, [pc, #764]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003db0:	4abb      	ldr	r2, [pc, #748]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6553      	str	r3, [r2, #84]	; 0x54
 8003db6:	e003      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f002 0302 	and.w	r3, r2, #2
 8003dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d041      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d824      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e09 	.word	0x08003e09
 8003df8:	08003e1f 	.word	0x08003e1f
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e3d 	.word	0x08003e3d
 8003e04:	08003e3d 	.word	0x08003e3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 ff71 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e22:	3328      	adds	r3, #40	; 0x28
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f818 	bl	8004e5c <RCCEx_PLL3_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e32:	e004      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e3a:	e000      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e46:	4b96      	ldr	r3, [pc, #600]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	f023 0107 	bic.w	r1, r3, #7
 8003e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e54:	4a92      	ldr	r2, [pc, #584]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	6553      	str	r3, [r2, #84]	; 0x54
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 0304 	and.w	r3, r2, #4
 8003e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d044      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d825      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003eb1 	.word	0x08003eb1
 8003ea0:	08003ec7 	.word	0x08003ec7
 8003ea4:	08003ee5 	.word	0x08003ee5
 8003ea8:	08003ee5 	.word	0x08003ee5
 8003eac:	08003ee5 	.word	0x08003ee5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 ff1d 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ec4:	e00f      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	3328      	adds	r3, #40	; 0x28
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 ffc4 	bl	8004e5c <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eee:	4b6c      	ldr	r3, [pc, #432]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f023 0107 	bic.w	r1, r3, #7
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	4a68      	ldr	r2, [pc, #416]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58
 8003f04:	e003      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f002 0320 	and.w	r3, r2, #32
 8003f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d055      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3a:	d033      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f40:	d82c      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d826      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f52:	d02b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f58:	d820      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f64:	d81a      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d022      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 febd 	bl	8004cf8 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f84:	e015      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	3328      	adds	r3, #40	; 0x28
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ff64 	bl	8004e5c <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fa2:	e006      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fa8:	bf00      	nop
 8003faa:	e002      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6553      	str	r3, [r2, #84]	; 0x54
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ff0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d058      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004002:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004006:	d033      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004008:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800400c:	d82c      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d02f      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004018:	d826      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401e:	d02b      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004024:	d820      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d012      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d81a      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d022      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d115      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004040:	3308      	adds	r3, #8
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fe57 	bl	8004cf8 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004050:	e015      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fefe 	bl	8004e5c <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004066:	e00a      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800406e:	e006      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004070:	bf00      	nop
 8004072:	e004      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004074:	bf00      	nop
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004096:	4a02      	ldr	r2, [pc, #8]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
 800409c:	e006      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800409e:	bf00      	nop
 80040a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d055      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040d8:	d033      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040de:	d82c      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d02f      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ea:	d826      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f0:	d02b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f6:	d820      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fc:	d012      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004102:	d81a      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d022      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410c:	d115      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	3308      	adds	r3, #8
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fdee 	bl	8004cf8 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004122:	e015      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004128:	3328      	adds	r3, #40	; 0x28
 800412a:	2102      	movs	r1, #2
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fe95 	bl	8004e5c <RCCEx_PLL3_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004140:	e006      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004142:	bf00      	nop
 8004144:	e004      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800414e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004158:	4ba1      	ldr	r3, [pc, #644]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004164:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004168:	4a9d      	ldr	r2, [pc, #628]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416a:	430b      	orrs	r3, r1
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	e003      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f002 0308 	and.w	r3, r2, #8
 8004184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004188:	2300      	movs	r3, #0
 800418a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800418e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004192:	460b      	mov	r3, r1
 8004194:	4313      	orrs	r3, r2
 8004196:	d01e      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	3328      	adds	r3, #40	; 0x28
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fe54 	bl	8004e5c <RCCEx_PLL3_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041c0:	4b87      	ldr	r3, [pc, #540]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	4a83      	ldr	r2, [pc, #524]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f002 0310 	and.w	r3, r2, #16
 80041e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80041ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80041f0:	460b      	mov	r3, r1
 80041f2:	4313      	orrs	r3, r2
 80041f4:	d01e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d10c      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fe25 	bl	8004e5c <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800421e:	4b70      	ldr	r3, [pc, #448]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422e:	4a6c      	ldr	r2, [pc, #432]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004230:	430b      	orrs	r3, r1
 8004232:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800424a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800424e:	460b      	mov	r3, r1
 8004250:	4313      	orrs	r3, r2
 8004252:	d03e      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800425c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004260:	d022      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004266:	d81b      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d00b      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004272:	e015      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	3308      	adds	r3, #8
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fd3b 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004288:	e00f      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	3328      	adds	r3, #40	; 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fde2 	bl	8004e5c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042c2:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80042de:	67bb      	str	r3, [r7, #120]	; 0x78
 80042e0:	2300      	movs	r3, #0
 80042e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d03b      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fa:	d01f      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004300:	d818      	bhi.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800430c:	d007      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a32      	ldr	r2, [pc, #200]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800431c:	e00f      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	3328      	adds	r3, #40	; 0x28
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fd98 	bl	8004e5c <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10b      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6553      	str	r3, [r2, #84]	; 0x54
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004372:	673b      	str	r3, [r7, #112]	; 0x70
 8004374:	2300      	movs	r3, #0
 8004376:	677b      	str	r3, [r7, #116]	; 0x74
 8004378:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d034      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d007      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	4a11      	ldr	r2, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800439a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043a0:	e00e      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	3308      	adds	r3, #8
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fca4 	bl	8004cf8 <RCCEx_PLL2_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	4a02      	ldr	r2, [pc, #8]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d8:	430b      	orrs	r3, r1
 80043da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80043f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fa:	2300      	movs	r3, #0
 80043fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d00c      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	3328      	adds	r3, #40	; 0x28
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fd23 	bl	8004e5c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800442e:	663b      	str	r3, [r7, #96]	; 0x60
 8004430:	2300      	movs	r3, #0
 8004432:	667b      	str	r3, [r7, #100]	; 0x64
 8004434:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d038      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444a:	d018      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800444c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004450:	d811      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004456:	d014      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445c:	d80b      	bhi.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004466:	d106      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4bc3      	ldr	r3, [pc, #780]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4ac2      	ldr	r2, [pc, #776]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004490:	4bb9      	ldr	r3, [pc, #740]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a0:	4ab5      	ldr	r2, [pc, #724]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6553      	str	r3, [r2, #84]	; 0x54
 80044a6:	e003      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044be:	2300      	movs	r3, #0
 80044c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044c6:	460b      	mov	r3, r1
 80044c8:	4313      	orrs	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044cc:	4baa      	ldr	r3, [pc, #680]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044da:	4aa7      	ldr	r2, [pc, #668]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
 80044ee:	2300      	movs	r3, #0
 80044f0:	657b      	str	r3, [r7, #84]	; 0x54
 80044f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80044f6:	460b      	mov	r3, r1
 80044f8:	4313      	orrs	r3, r2
 80044fa:	d00a      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044fc:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004508:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800450c:	4a9a      	ldr	r2, [pc, #616]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	430b      	orrs	r3, r1
 8004510:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	2300      	movs	r3, #0
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004528:	460b      	mov	r3, r1
 800452a:	4313      	orrs	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800452e:	4b92      	ldr	r3, [pc, #584]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453c:	4a8e      	ldr	r2, [pc, #568]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800454e:	643b      	str	r3, [r7, #64]	; 0x40
 8004550:	2300      	movs	r3, #0
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
 8004554:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d00e      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455e:	4b86      	ldr	r3, [pc, #536]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	4a85      	ldr	r2, [pc, #532]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004568:	6113      	str	r3, [r2, #16]
 800456a:	4b83      	ldr	r3, [pc, #524]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004576:	4a80      	ldr	r2, [pc, #512]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004578:	430b      	orrs	r3, r1
 800457a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
 800458a:	2300      	movs	r3, #0
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800458e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004598:	4b77      	ldr	r3, [pc, #476]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	4a74      	ldr	r2, [pc, #464]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ba:	2300      	movs	r3, #0
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
 80045be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045c8:	4b6b      	ldr	r3, [pc, #428]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045cc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d8:	4a67      	ldr	r2, [pc, #412]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	2100      	movs	r1, #0
 80045e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045fe:	3308      	adds	r3, #8
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fb78 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	6239      	str	r1, [r7, #32]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463e:	3308      	adds	r3, #8
 8004640:	2101      	movs	r1, #1
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb58 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	2100      	movs	r1, #0
 8004668:	61b9      	str	r1, [r7, #24]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	3308      	adds	r3, #8
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fb38 	bl	8004cf8 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	2100      	movs	r1, #0
 80046a8:	6139      	str	r1, [r7, #16]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	3328      	adds	r3, #40	; 0x28
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fbca 	bl	8004e5c <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	2100      	movs	r1, #0
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d011      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fe:	3328      	adds	r3, #40	; 0x28
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fbaa 	bl	8004e5c <RCCEx_PLL3_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	2100      	movs	r1, #0
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d011      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800473e:	3328      	adds	r3, #40	; 0x28
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb8a 	bl	8004e5c <RCCEx_PLL3_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800475a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800475e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
}
 800476c:	4618      	mov	r0, r3
 800476e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004772:	46bd      	mov	sp, r7
 8004774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004778:	58024400 	.word	0x58024400

0800477c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004780:	f7fe fd96 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	; (80047a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58024400 	.word	0x58024400
 80047a4:	08008d44 	.word	0x08008d44

080047a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b089      	sub	sp, #36	; 0x24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b0:	4ba1      	ldr	r3, [pc, #644]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ba:	4b9f      	ldr	r3, [pc, #636]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	0b1b      	lsrs	r3, r3, #12
 80047c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047c6:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047d2:	4b99      	ldr	r3, [pc, #612]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	08db      	lsrs	r3, r3, #3
 80047d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	fb02 f303 	mul.w	r3, r2, r3
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8111 	beq.w	8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	f000 8083 	beq.w	8004904 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f200 80a1 	bhi.w	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d056      	beq.n	80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004812:	e099      	b.n	8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004814:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d02d      	beq.n	800487c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004820:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	08db      	lsrs	r3, r3, #3
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	4a84      	ldr	r2, [pc, #528]	; (8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
 8004830:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800487a:	e087      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048be:	e065      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004902:	e043      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b48      	ldr	r3, [pc, #288]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004946:	e021      	b.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	0a5b      	lsrs	r3, r3, #9
 8004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b2:	ee17 2a90 	vmov	r2, s15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e0:	ee17 2a90 	vmov	r2, s15
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	0e1b      	lsrs	r3, r3, #24
 80049ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a0e:	ee17 2a90 	vmov	r2, s15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a16:	e008      	b.n	8004a2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	609a      	str	r2, [r3, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	3724      	adds	r7, #36	; 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	58024400 	.word	0x58024400
 8004a3c:	03d09000 	.word	0x03d09000
 8004a40:	46000000 	.word	0x46000000
 8004a44:	4c742400 	.word	0x4c742400
 8004a48:	4a742400 	.word	0x4a742400
 8004a4c:	4bbebc20 	.word	0x4bbebc20

08004a50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a58:	4ba1      	ldr	r3, [pc, #644]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a62:	4b9f      	ldr	r3, [pc, #636]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	0d1b      	lsrs	r3, r3, #20
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a6e:	4b9c      	ldr	r3, [pc, #624]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a7a:	4b99      	ldr	r3, [pc, #612]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	08db      	lsrs	r3, r3, #3
 8004a80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8111 	beq.w	8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f000 8083 	beq.w	8004bac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f200 80a1 	bhi.w	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d056      	beq.n	8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aba:	e099      	b.n	8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004abc:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02d      	beq.n	8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac8:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	08db      	lsrs	r3, r3, #3
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	4a84      	ldr	r2, [pc, #528]	; (8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af2:	4b7b      	ldr	r3, [pc, #492]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b22:	e087      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b36:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b66:	e065      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7a:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004baa:	e043      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bbe:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bee:	e021      	b.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c34:	4b2a      	ldr	r3, [pc, #168]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	0a5b      	lsrs	r3, r3, #9
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c5a:	ee17 2a90 	vmov	r2, s15
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c62:	4b1f      	ldr	r3, [pc, #124]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c88:	ee17 2a90 	vmov	r2, s15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c90:	4b13      	ldr	r3, [pc, #76]	; (8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	bf00      	nop
 8004cd4:	3724      	adds	r7, #36	; 0x24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	03d09000 	.word	0x03d09000
 8004ce8:	46000000 	.word	0x46000000
 8004cec:	4c742400 	.word	0x4c742400
 8004cf0:	4a742400 	.word	0x4a742400
 8004cf4:	4bbebc20 	.word	0x4bbebc20

08004cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d101      	bne.n	8004d16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e099      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4e      	ldr	r2, [pc, #312]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc ff97 	bl	8001c54 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2a:	f7fc ff93 	bl	8001c54 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e086      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d48:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	031b      	lsls	r3, r3, #12
 8004d56:	493f      	ldr	r1, [pc, #252]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d8c:	4931      	ldr	r1, [pc, #196]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	492d      	ldr	r1, [pc, #180]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	f023 0220 	bic.w	r2, r3, #32
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4928      	ldr	r1, [pc, #160]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004db6:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <RCCEx_PLL2_Config+0x160>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	69d2      	ldr	r2, [r2, #28]
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	4920      	ldr	r1, [pc, #128]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004de8:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a19      	ldr	r2, [pc, #100]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004df4:	e00f      	b.n	8004e16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dfc:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e08:	e005      	b.n	8004e16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a11      	ldr	r2, [pc, #68]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e16:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e22:	f7fc ff17 	bl	8001c54 <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e2a:	f7fc ff13 	bl	8001c54 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <RCCEx_PLL2_Config+0x15c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
 8004e58:	ffff0007 	.word	0xffff0007

08004e5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e6a:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d101      	bne.n	8004e7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e099      	b.n	8004fae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a4e      	ldr	r2, [pc, #312]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc fee5 	bl	8001c54 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e8e:	f7fc fee1 	bl	8001c54 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e086      	b.n	8004fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea0:	4b45      	ldr	r3, [pc, #276]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004eac:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	051b      	lsls	r3, r3, #20
 8004eba:	493f      	ldr	r1, [pc, #252]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	628b      	str	r3, [r1, #40]	; 0x28
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	025b      	lsls	r3, r3, #9
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	061b      	lsls	r3, r3, #24
 8004eec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ef0:	4931      	ldr	r1, [pc, #196]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ef6:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	492d      	ldr	r1, [pc, #180]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4928      	ldr	r1, [pc, #160]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f1a:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <RCCEx_PLL3_Config+0x160>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	69d2      	ldr	r2, [r2, #28]
 8004f32:	00d2      	lsls	r2, r2, #3
 8004f34:	4920      	ldr	r1, [pc, #128]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f58:	e00f      	b.n	8004f7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f60:	4b15      	ldr	r3, [pc, #84]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f6c:	e005      	b.n	8004f7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fc fe65 	bl	8001c54 <HAL_GetTick>
 8004f8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f8c:	e008      	b.n	8004fa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f8e:	f7fc fe61 	bl	8001c54 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e006      	b.n	8004fae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <RCCEx_PLL3_Config+0x15c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	ffff0007 	.word	0xffff0007

08004fc0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e10f      	b.n	80051f2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a87      	ldr	r2, [pc, #540]	; (80051fc <HAL_SPI_Init+0x23c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00f      	beq.n	8005002 <HAL_SPI_Init+0x42>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a86      	ldr	r2, [pc, #536]	; (8005200 <HAL_SPI_Init+0x240>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00a      	beq.n	8005002 <HAL_SPI_Init+0x42>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a84      	ldr	r2, [pc, #528]	; (8005204 <HAL_SPI_Init+0x244>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d005      	beq.n	8005002 <HAL_SPI_Init+0x42>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b0f      	cmp	r3, #15
 8004ffc:	d901      	bls.n	8005002 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0f7      	b.n	80051f2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fd5a 	bl	8005abc <SPI_GetPacketSize>
 8005008:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <HAL_SPI_Init+0x23c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00c      	beq.n	800502e <HAL_SPI_Init+0x6e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a79      	ldr	r2, [pc, #484]	; (8005200 <HAL_SPI_Init+0x240>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <HAL_SPI_Init+0x6e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a78      	ldr	r2, [pc, #480]	; (8005204 <HAL_SPI_Init+0x244>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d002      	beq.n	800502e <HAL_SPI_Init+0x6e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d811      	bhi.n	8005052 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005032:	4a72      	ldr	r2, [pc, #456]	; (80051fc <HAL_SPI_Init+0x23c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a70      	ldr	r2, [pc, #448]	; (8005200 <HAL_SPI_Init+0x240>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_SPI_Init+0x8c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a6f      	ldr	r2, [pc, #444]	; (8005204 <HAL_SPI_Init+0x244>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d104      	bne.n	8005056 <HAL_SPI_Init+0x96>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d901      	bls.n	8005056 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0cd      	b.n	80051f2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fa18 	bl	80014a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0201 	bic.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005092:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800509c:	d119      	bne.n	80050d2 <HAL_SPI_Init+0x112>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a6:	d103      	bne.n	80050b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10c      	bne.n	80050d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c0:	d107      	bne.n	80050d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00f      	beq.n	80050fe <HAL_SPI_Init+0x13e>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b06      	cmp	r3, #6
 80050e4:	d90b      	bls.n	80050fe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e007      	b.n	800510e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800510c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	431a      	orrs	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005120:	ea42 0103 	orr.w	r1, r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	ea42 0103 	orr.w	r1, r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d113      	bne.n	80051ae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005198:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40013000 	.word	0x40013000
 8005200:	40003800 	.word	0x40003800
 8005204:	40003c00 	.word	0x40003c00

08005208 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3320      	adds	r3, #32
 800521e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_SPI_Transmit+0x2a>
 800522e:	2302      	movs	r3, #2
 8005230:	e1e1      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523a:	f7fc fd0b 	bl	8001c54 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d007      	beq.n	800525c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800524c:	2302      	movs	r3, #2
 800524e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005258:	7efb      	ldrb	r3, [r7, #27]
 800525a:	e1cc      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x60>
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005274:	7efb      	ldrb	r3, [r7, #27]
 8005276:	e1be      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2203      	movs	r2, #3
 800527c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80052c8:	d108      	bne.n	80052dc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e009      	b.n	80052f0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052ee:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_SPI_Transmit+0x348>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	88f9      	ldrh	r1, [r7, #6]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	430b      	orrs	r3, r1
 8005302:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800531c:	d107      	bne.n	800532e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b0f      	cmp	r3, #15
 8005334:	d947      	bls.n	80053c6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005336:	e03f      	b.n	80053b8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d114      	bne.n	8005370 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800536e:	e023      	b.n	80053b8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005370:	f7fc fc70 	bl	8001c54 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d803      	bhi.n	8005388 <HAL_SPI_Transmit+0x180>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d102      	bne.n	800538e <HAL_SPI_Transmit+0x186>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d114      	bne.n	80053b8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fac6 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e11e      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1b9      	bne.n	8005338 <HAL_SPI_Transmit+0x130>
 80053c4:	e0f1      	b.n	80055aa <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	f240 80e6 	bls.w	800559c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80053d0:	e05d      	b.n	800548e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d132      	bne.n	8005446 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d918      	bls.n	800541e <HAL_SPI_Transmit+0x216>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d014      	beq.n	800541e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005404:	1d1a      	adds	r2, r3, #4
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b02      	subs	r3, #2
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800541c:	e037      	b.n	800548e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	881a      	ldrh	r2, [r3, #0]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005444:	e023      	b.n	800548e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005446:	f7fc fc05 	bl	8001c54 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d803      	bhi.n	800545e <HAL_SPI_Transmit+0x256>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d102      	bne.n	8005464 <HAL_SPI_Transmit+0x25c>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d114      	bne.n	800548e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fa5b 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005478:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e0b3      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d19b      	bne.n	80053d2 <HAL_SPI_Transmit+0x1ca>
 800549a:	e086      	b.n	80055aa <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d154      	bne.n	8005554 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d918      	bls.n	80054e8 <HAL_SPI_Transmit+0x2e0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d914      	bls.n	80054e8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	1d1a      	adds	r2, r3, #4
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b04      	subs	r3, #4
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80054e6:	e059      	b.n	800559c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d917      	bls.n	8005524 <HAL_SPI_Transmit+0x31c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b02      	subs	r3, #2
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005522:	e03b      	b.n	800559c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3320      	adds	r3, #32
 800552e:	7812      	ldrb	r2, [r2, #0]
 8005530:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800554e:	e025      	b.n	800559c <HAL_SPI_Transmit+0x394>
 8005550:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005554:	f7fc fb7e 	bl	8001c54 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d803      	bhi.n	800556c <HAL_SPI_Transmit+0x364>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d102      	bne.n	8005572 <HAL_SPI_Transmit+0x36a>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d114      	bne.n	800559c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f9d4 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e02c      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f47f af79 	bne.w	800549c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2108      	movs	r1, #8
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fa53 	bl	8005a60 <SPI_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f9a5 	bl	8005920 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80055f4:	7efb      	ldrb	r3, [r7, #27]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop

08005600 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3330      	adds	r3, #48	; 0x30
 800561a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005622:	2b01      	cmp	r3, #1
 8005624:	d101      	bne.n	800562a <HAL_SPI_Receive+0x2a>
 8005626:	2302      	movs	r3, #2
 8005628:	e173      	b.n	8005912 <HAL_SPI_Receive+0x312>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005632:	f7fc fb0f 	bl	8001c54 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d007      	beq.n	8005654 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005644:	2302      	movs	r3, #2
 8005646:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005650:	7ffb      	ldrb	r3, [r7, #31]
 8005652:	e15e      	b.n	8005912 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Receive+0x60>
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800566c:	7ffb      	ldrb	r3, [r7, #31]
 800566e:	e150      	b.n	8005912 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2204      	movs	r2, #4
 8005674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	88fa      	ldrh	r2, [r7, #6]
 800568a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80056c0:	d108      	bne.n	80056d4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e009      	b.n	80056e8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80056e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4b8b      	ldr	r3, [pc, #556]	; (800591c <HAL_SPI_Receive+0x31c>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	88f9      	ldrh	r1, [r7, #6]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0201 	orr.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005714:	d107      	bne.n	8005726 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2b0f      	cmp	r3, #15
 800572c:	d948      	bls.n	80057c0 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800572e:	e040      	b.n	80057b2 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695a      	ldr	r2, [r3, #20]
 8005736:	f248 0308 	movw	r3, #32776	; 0x8008
 800573a:	4013      	ands	r3, r2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005748:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800574a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005768:	e023      	b.n	80057b2 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576a:	f7fc fa73 	bl	8001c54 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d803      	bhi.n	8005782 <HAL_SPI_Receive+0x182>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d102      	bne.n	8005788 <HAL_SPI_Receive+0x188>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d114      	bne.n	80057b2 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f8c9 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800579c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0af      	b.n	8005912 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1b8      	bne.n	8005730 <HAL_SPI_Receive+0x130>
 80057be:	e095      	b.n	80058ec <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b07      	cmp	r3, #7
 80057c6:	f240 808b 	bls.w	80058e0 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80057ca:	e03f      	b.n	800584c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d114      	bne.n	8005804 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	8812      	ldrh	r2, [r2, #0]
 80057e2:	b292      	uxth	r2, r2
 80057e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ea:	1c9a      	adds	r2, r3, #2
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005802:	e023      	b.n	800584c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005804:	f7fc fa26 	bl	8001c54 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d803      	bhi.n	800581c <HAL_SPI_Receive+0x21c>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d102      	bne.n	8005822 <HAL_SPI_Receive+0x222>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d114      	bne.n	800584c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f87c 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e062      	b.n	8005912 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1b9      	bne.n	80057cc <HAL_SPI_Receive+0x1cc>
 8005858:	e048      	b.n	80058ec <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d117      	bne.n	8005898 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005896:	e023      	b.n	80058e0 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005898:	f7fc f9dc 	bl	8001c54 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d803      	bhi.n	80058b0 <HAL_SPI_Receive+0x2b0>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ae:	d102      	bne.n	80058b6 <HAL_SPI_Receive+0x2b6>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d114      	bne.n	80058e0 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f832 	bl	8005920 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e018      	b.n	8005912 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1b6      	bne.n	800585a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f817 	bl	8005920 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005910:	7ffb      	ldrb	r3, [r7, #31]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3720      	adds	r7, #32
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	ffff0000 	.word	0xffff0000

08005920 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0208 	orr.w	r2, r2, #8
 800593e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0210 	orr.w	r2, r2, #16
 800594e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6919      	ldr	r1, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b3c      	ldr	r3, [pc, #240]	; (8005a5c <SPI_CloseTransfer+0x13c>)
 800596c:	400b      	ands	r3, r1
 800596e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800597e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b04      	cmp	r3, #4
 800598a:	d014      	beq.n	80059b6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00f      	beq.n	80059b6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0220 	orr.w	r2, r2, #32
 80059b4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d014      	beq.n	80059ec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00f      	beq.n	80059ec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00f      	beq.n	8005a16 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fc:	f043 0201 	orr.w	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a14:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00f      	beq.n	8005a40 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	f043 0208 	orr.w	r2, r3, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005a50:	bf00      	nop
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	fffffc90 	.word	0xfffffc90

08005a60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a70:	e010      	b.n	8005a94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a72:	f7fc f8ef 	bl	8001c54 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d803      	bhi.n	8005a8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d102      	bne.n	8005a90 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e00f      	b.n	8005ab4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695a      	ldr	r2, [r3, #20]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	bf0c      	ite	eq
 8005aa4:	2301      	moveq	r3, #1
 8005aa6:	2300      	movne	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d0df      	beq.n	8005a72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	3301      	adds	r3, #1
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3307      	adds	r3, #7
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e049      	b.n	8005b98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7fb fd77 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	4610      	mov	r0, r2
 8005b32:	f000 fd95 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d001      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e054      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d022      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be2:	d01d      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a22      	ldr	r2, [pc, #136]	; (8005c74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d018      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	; (8005c7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00e      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d009      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d004      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d115      	bne.n	8005c4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <HAL_TIM_Base_Start_IT+0xec>)
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d015      	beq.n	8005c5e <HAL_TIM_Base_Start_IT+0xbe>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c38:	d011      	beq.n	8005c5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	e008      	b.n	8005c5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e000      	b.n	8005c60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40010400 	.word	0x40010400
 8005c84:	40001800 	.word	0x40001800
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	00010007 	.word	0x00010007

08005c90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6a1a      	ldr	r2, [r3, #32]
 8005cae:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10f      	bne.n	8005cd8 <HAL_TIM_Base_Stop_IT+0x48>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a1a      	ldr	r2, [r3, #32]
 8005cbe:	f240 4344 	movw	r3, #1092	; 0x444
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d107      	bne.n	8005cd8 <HAL_TIM_Base_Stop_IT+0x48>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e049      	b.n	8005d94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7fb fcd5 	bl	80016c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f000 fc97 	bl	8006660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d109      	bne.n	8005dc0 <HAL_TIM_PWM_Start+0x24>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	e03c      	b.n	8005e3a <HAL_TIM_PWM_Start+0x9e>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d109      	bne.n	8005dda <HAL_TIM_PWM_Start+0x3e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	bf14      	ite	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	2300      	moveq	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	e02f      	b.n	8005e3a <HAL_TIM_PWM_Start+0x9e>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x58>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e022      	b.n	8005e3a <HAL_TIM_PWM_Start+0x9e>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b0c      	cmp	r3, #12
 8005df8:	d109      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x72>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e015      	b.n	8005e3a <HAL_TIM_PWM_Start+0x9e>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d109      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x8c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e008      	b.n	8005e3a <HAL_TIM_PWM_Start+0x9e>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e0a1      	b.n	8005f86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xb6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e50:	e023      	b.n	8005e9a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0xc6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e60:	e01b      	b.n	8005e9a <HAL_TIM_PWM_Start+0xfe>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xd6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	e013      	b.n	8005e9a <HAL_TIM_PWM_Start+0xfe>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b0c      	cmp	r3, #12
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xe6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e80:	e00b      	b.n	8005e9a <HAL_TIM_PWM_Start+0xfe>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d104      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xf6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e90:	e003      	b.n	8005e9a <HAL_TIM_PWM_Start+0xfe>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 ffea 	bl	8006e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a38      	ldr	r2, [pc, #224]	; (8005f90 <HAL_TIM_PWM_Start+0x1f4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <HAL_TIM_PWM_Start+0x13e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <HAL_TIM_PWM_Start+0x1f8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_TIM_PWM_Start+0x13e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	; (8005f98 <HAL_TIM_PWM_Start+0x1fc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d009      	beq.n	8005eda <HAL_TIM_PWM_Start+0x13e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a34      	ldr	r2, [pc, #208]	; (8005f9c <HAL_TIM_PWM_Start+0x200>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_TIM_PWM_Start+0x13e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <HAL_TIM_PWM_Start+0x204>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PWM_Start+0x142>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e000      	b.n	8005ee0 <HAL_TIM_PWM_Start+0x144>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <HAL_TIM_PWM_Start+0x1f4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <HAL_TIM_PWM_Start+0x208>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <HAL_TIM_PWM_Start+0x20c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a22      	ldr	r2, [pc, #136]	; (8005fac <HAL_TIM_PWM_Start+0x210>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_TIM_PWM_Start+0x1f8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <HAL_TIM_PWM_Start+0x214>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIM_PWM_Start+0x1a8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a16      	ldr	r2, [pc, #88]	; (8005f98 <HAL_TIM_PWM_Start+0x1fc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d115      	bne.n	8005f70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689a      	ldr	r2, [r3, #8]
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_TIM_PWM_Start+0x218>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d015      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x1e6>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5c:	d011      	beq.n	8005f82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f6e:	e008      	b.n	8005f82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40014400 	.word	0x40014400
 8005fa0:	40014800 	.word	0x40014800
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40001800 	.word	0x40001800
 8005fb4:	00010007 	.word	0x00010007

08005fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0202 	mvn.w	r2, #2
 8005fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb12 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb04 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fb15 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0204 	mvn.w	r2, #4
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fae8 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fada 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 faeb 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b08      	cmp	r3, #8
 8006074:	d122      	bne.n	80060bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d11b      	bne.n	80060bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0208 	mvn.w	r2, #8
 800608c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2204      	movs	r2, #4
 8006092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fabe 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fab0 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fac1 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d122      	bne.n	8006110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d11b      	bne.n	8006110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0210 	mvn.w	r2, #16
 80060e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2208      	movs	r2, #8
 80060e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa94 	bl	8006624 <HAL_TIM_IC_CaptureCallback>
 80060fc:	e005      	b.n	800610a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa86 	bl	8006610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa97 	bl	8006638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0201 	mvn.w	r2, #1
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fb f96c 	bl	8001414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 ffc6 	bl	80070f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006176:	d10e      	bne.n	8006196 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d107      	bne.n	8006196 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800618e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 ffb9 	bl	8007108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d10e      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d107      	bne.n	80061c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa45 	bl	800664c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d10e      	bne.n	80061ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d107      	bne.n	80061ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f06f 0220 	mvn.w	r2, #32
 80061e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 ff79 	bl	80070e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e0ff      	b.n	8006416 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b14      	cmp	r3, #20
 8006222:	f200 80f0 	bhi.w	8006406 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006281 	.word	0x08006281
 8006230:	08006407 	.word	0x08006407
 8006234:	08006407 	.word	0x08006407
 8006238:	08006407 	.word	0x08006407
 800623c:	080062c1 	.word	0x080062c1
 8006240:	08006407 	.word	0x08006407
 8006244:	08006407 	.word	0x08006407
 8006248:	08006407 	.word	0x08006407
 800624c:	08006303 	.word	0x08006303
 8006250:	08006407 	.word	0x08006407
 8006254:	08006407 	.word	0x08006407
 8006258:	08006407 	.word	0x08006407
 800625c:	08006343 	.word	0x08006343
 8006260:	08006407 	.word	0x08006407
 8006264:	08006407 	.word	0x08006407
 8006268:	08006407 	.word	0x08006407
 800626c:	08006385 	.word	0x08006385
 8006270:	08006407 	.word	0x08006407
 8006274:	08006407 	.word	0x08006407
 8006278:	08006407 	.word	0x08006407
 800627c:	080063c5 	.word	0x080063c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa84 	bl	8006794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0208 	orr.w	r2, r2, #8
 800629a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0204 	bic.w	r2, r2, #4
 80062aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691a      	ldr	r2, [r3, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	619a      	str	r2, [r3, #24]
      break;
 80062be:	e0a5      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 faf4 	bl	80068b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6999      	ldr	r1, [r3, #24]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	021a      	lsls	r2, r3, #8
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	619a      	str	r2, [r3, #24]
      break;
 8006300:	e084      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fb5d 	bl	80069c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0208 	orr.w	r2, r2, #8
 800631c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0204 	bic.w	r2, r2, #4
 800632c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	61da      	str	r2, [r3, #28]
      break;
 8006340:	e064      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fbc5 	bl	8006ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800635c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800636c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69d9      	ldr	r1, [r3, #28]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	021a      	lsls	r2, r3, #8
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	61da      	str	r2, [r3, #28]
      break;
 8006382:	e043      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fc0e 	bl	8006bac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0208 	orr.w	r2, r2, #8
 800639e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063c2:	e023      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fc52 	bl	8006c74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006404:	e002      	b.n	800640c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	75fb      	strb	r3, [r7, #23]
      break;
 800640a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop

08006420 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIM_ConfigClockSource+0x1c>
 8006438:	2302      	movs	r3, #2
 800643a:	e0dc      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4b6a      	ldr	r3, [pc, #424]	; (8006600 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006458:	4013      	ands	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006462:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a64      	ldr	r2, [pc, #400]	; (8006604 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f000 80a9 	beq.w	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006478:	4a62      	ldr	r2, [pc, #392]	; (8006604 <HAL_TIM_ConfigClockSource+0x1e4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f200 80ae 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006480:	4a61      	ldr	r2, [pc, #388]	; (8006608 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f000 80a1 	beq.w	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006488:	4a5f      	ldr	r2, [pc, #380]	; (8006608 <HAL_TIM_ConfigClockSource+0x1e8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f200 80a6 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006490:	4a5e      	ldr	r2, [pc, #376]	; (800660c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	f000 8099 	beq.w	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006498:	4a5c      	ldr	r2, [pc, #368]	; (800660c <HAL_TIM_ConfigClockSource+0x1ec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	f200 809e 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064a4:	f000 8091 	beq.w	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 80064a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064ac:	f200 8096 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064b4:	f000 8089 	beq.w	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 80064b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064bc:	f200 808e 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c4:	d03e      	beq.n	8006544 <HAL_TIM_ConfigClockSource+0x124>
 80064c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ca:	f200 8087 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_TIM_ConfigClockSource+0x1c2>
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064da:	d87f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d01a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0xf6>
 80064e0:	2b70      	cmp	r3, #112	; 0x70
 80064e2:	d87b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d050      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x16a>
 80064e8:	2b60      	cmp	r3, #96	; 0x60
 80064ea:	d877      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d03c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x14a>
 80064f0:	2b50      	cmp	r3, #80	; 0x50
 80064f2:	d873      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d058      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0x18a>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d86f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d064      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d86b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d060      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d867      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05c      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d05a      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x1aa>
 8006514:	e062      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6899      	ldr	r1, [r3, #8]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f000 fc89 	bl	8006e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
      break;
 8006542:	e04f      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f000 fc72 	bl	8006e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006566:	609a      	str	r2, [r3, #8]
      break;
 8006568:	e03c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f000 fbe2 	bl	8006d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2150      	movs	r1, #80	; 0x50
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc3c 	bl	8006e00 <TIM_ITRx_SetConfig>
      break;
 8006588:	e02c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6859      	ldr	r1, [r3, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	461a      	mov	r2, r3
 8006598:	f000 fc01 	bl	8006d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2160      	movs	r1, #96	; 0x60
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fc2c 	bl	8006e00 <TIM_ITRx_SetConfig>
      break;
 80065a8:	e01c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 fbc2 	bl	8006d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2140      	movs	r1, #64	; 0x40
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fc1c 	bl	8006e00 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 fc13 	bl	8006e00 <TIM_ITRx_SetConfig>
      break;
 80065da:	e003      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80065e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	ffceff88 	.word	0xffceff88
 8006604:	00100040 	.word	0x00100040
 8006608:	00100030 	.word	0x00100030
 800660c:	00100020 	.word	0x00100020

08006610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a40      	ldr	r2, [pc, #256]	; (8006774 <TIM_Base_SetConfig+0x114>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a3d      	ldr	r2, [pc, #244]	; (8006778 <TIM_Base_SetConfig+0x118>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a3c      	ldr	r2, [pc, #240]	; (800677c <TIM_Base_SetConfig+0x11c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3b      	ldr	r2, [pc, #236]	; (8006780 <TIM_Base_SetConfig+0x120>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x40>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a3a      	ldr	r2, [pc, #232]	; (8006784 <TIM_Base_SetConfig+0x124>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2f      	ldr	r2, [pc, #188]	; (8006774 <TIM_Base_SetConfig+0x114>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d01b      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <TIM_Base_SetConfig+0x118>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d017      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2b      	ldr	r2, [pc, #172]	; (800677c <TIM_Base_SetConfig+0x11c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <TIM_Base_SetConfig+0x120>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a29      	ldr	r2, [pc, #164]	; (8006784 <TIM_Base_SetConfig+0x124>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a28      	ldr	r2, [pc, #160]	; (8006788 <TIM_Base_SetConfig+0x128>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a27      	ldr	r2, [pc, #156]	; (800678c <TIM_Base_SetConfig+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0x9a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a26      	ldr	r2, [pc, #152]	; (8006790 <TIM_Base_SetConfig+0x130>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <TIM_Base_SetConfig+0x114>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_Base_SetConfig+0xf8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a12      	ldr	r2, [pc, #72]	; (8006784 <TIM_Base_SetConfig+0x124>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_Base_SetConfig+0xf8>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a11      	ldr	r2, [pc, #68]	; (8006788 <TIM_Base_SetConfig+0x128>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_Base_SetConfig+0xf8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a10      	ldr	r2, [pc, #64]	; (800678c <TIM_Base_SetConfig+0x12c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0xf8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a0f      	ldr	r2, [pc, #60]	; (8006790 <TIM_Base_SetConfig+0x130>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d103      	bne.n	8006760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	615a      	str	r2, [r3, #20]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40010400 	.word	0x40010400
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800

08006794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4b37      	ldr	r3, [pc, #220]	; (800689c <TIM_OC1_SetConfig+0x108>)
 80067c0:	4013      	ands	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0302 	bic.w	r3, r3, #2
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a2d      	ldr	r2, [pc, #180]	; (80068a0 <TIM_OC1_SetConfig+0x10c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00f      	beq.n	8006810 <TIM_OC1_SetConfig+0x7c>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a2c      	ldr	r2, [pc, #176]	; (80068a4 <TIM_OC1_SetConfig+0x110>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00b      	beq.n	8006810 <TIM_OC1_SetConfig+0x7c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a2b      	ldr	r2, [pc, #172]	; (80068a8 <TIM_OC1_SetConfig+0x114>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <TIM_OC1_SetConfig+0x7c>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a2a      	ldr	r2, [pc, #168]	; (80068ac <TIM_OC1_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC1_SetConfig+0x7c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a29      	ldr	r2, [pc, #164]	; (80068b0 <TIM_OC1_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <TIM_OC1_SetConfig+0x10c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_OC1_SetConfig+0xbe>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a1b      	ldr	r2, [pc, #108]	; (80068a4 <TIM_OC1_SetConfig+0x110>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_OC1_SetConfig+0xbe>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a1a      	ldr	r2, [pc, #104]	; (80068a8 <TIM_OC1_SetConfig+0x114>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_OC1_SetConfig+0xbe>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a19      	ldr	r2, [pc, #100]	; (80068ac <TIM_OC1_SetConfig+0x118>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_OC1_SetConfig+0xbe>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a18      	ldr	r2, [pc, #96]	; (80068b0 <TIM_OC1_SetConfig+0x11c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d111      	bne.n	8006876 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	621a      	str	r2, [r3, #32]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	fffeff8f 	.word	0xfffeff8f
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40014400 	.word	0x40014400
 80068b0:	40014800 	.word	0x40014800

080068b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0210 	bic.w	r2, r3, #16
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <TIM_OC2_SetConfig+0xfc>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a29      	ldr	r2, [pc, #164]	; (80069b4 <TIM_OC2_SetConfig+0x100>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d003      	beq.n	800691c <TIM_OC2_SetConfig+0x68>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a28      	ldr	r2, [pc, #160]	; (80069b8 <TIM_OC2_SetConfig+0x104>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d10d      	bne.n	8006938 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006936:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <TIM_OC2_SetConfig+0x100>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00f      	beq.n	8006960 <TIM_OC2_SetConfig+0xac>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <TIM_OC2_SetConfig+0x104>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00b      	beq.n	8006960 <TIM_OC2_SetConfig+0xac>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <TIM_OC2_SetConfig+0x108>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_OC2_SetConfig+0xac>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <TIM_OC2_SetConfig+0x10c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC2_SetConfig+0xac>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <TIM_OC2_SetConfig+0x110>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d113      	bne.n	8006988 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	feff8fff 	.word	0xfeff8fff
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4b33      	ldr	r3, [pc, #204]	; (8006ac0 <TIM_OC3_SetConfig+0xf8>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a28      	ldr	r2, [pc, #160]	; (8006ac4 <TIM_OC3_SetConfig+0xfc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d003      	beq.n	8006a2e <TIM_OC3_SetConfig+0x66>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a27      	ldr	r2, [pc, #156]	; (8006ac8 <TIM_OC3_SetConfig+0x100>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d10d      	bne.n	8006a4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ac4 <TIM_OC3_SetConfig+0xfc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00f      	beq.n	8006a72 <TIM_OC3_SetConfig+0xaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1c      	ldr	r2, [pc, #112]	; (8006ac8 <TIM_OC3_SetConfig+0x100>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00b      	beq.n	8006a72 <TIM_OC3_SetConfig+0xaa>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <TIM_OC3_SetConfig+0x104>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d007      	beq.n	8006a72 <TIM_OC3_SetConfig+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1a      	ldr	r2, [pc, #104]	; (8006ad0 <TIM_OC3_SetConfig+0x108>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_OC3_SetConfig+0xaa>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a19      	ldr	r2, [pc, #100]	; (8006ad4 <TIM_OC3_SetConfig+0x10c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d113      	bne.n	8006a9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	011b      	lsls	r3, r3, #4
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	fffeff8f 	.word	0xfffeff8f
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <TIM_OC4_SetConfig+0xbc>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a19      	ldr	r2, [pc, #100]	; (8006b98 <TIM_OC4_SetConfig+0xc0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00f      	beq.n	8006b58 <TIM_OC4_SetConfig+0x80>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a18      	ldr	r2, [pc, #96]	; (8006b9c <TIM_OC4_SetConfig+0xc4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <TIM_OC4_SetConfig+0x80>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a17      	ldr	r2, [pc, #92]	; (8006ba0 <TIM_OC4_SetConfig+0xc8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d007      	beq.n	8006b58 <TIM_OC4_SetConfig+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <TIM_OC4_SetConfig+0xcc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC4_SetConfig+0x80>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <TIM_OC4_SetConfig+0xd0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d109      	bne.n	8006b6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	019b      	lsls	r3, r3, #6
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	621a      	str	r2, [r3, #32]
}
 8006b86:	bf00      	nop
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	feff8fff 	.word	0xfeff8fff
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40010400 	.word	0x40010400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800

08006bac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4b21      	ldr	r3, [pc, #132]	; (8006c5c <TIM_OC5_SetConfig+0xb0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <TIM_OC5_SetConfig+0xb4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00f      	beq.n	8006c22 <TIM_OC5_SetConfig+0x76>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <TIM_OC5_SetConfig+0xb8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <TIM_OC5_SetConfig+0x76>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a16      	ldr	r2, [pc, #88]	; (8006c68 <TIM_OC5_SetConfig+0xbc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d007      	beq.n	8006c22 <TIM_OC5_SetConfig+0x76>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <TIM_OC5_SetConfig+0xc0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d003      	beq.n	8006c22 <TIM_OC5_SetConfig+0x76>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <TIM_OC5_SetConfig+0xc4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d109      	bne.n	8006c36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	021b      	lsls	r3, r3, #8
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	621a      	str	r2, [r3, #32]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	fffeff8f 	.word	0xfffeff8f
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40010400 	.word	0x40010400
 8006c68:	40014000 	.word	0x40014000
 8006c6c:	40014400 	.word	0x40014400
 8006c70:	40014800 	.word	0x40014800

08006c74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	4b22      	ldr	r3, [pc, #136]	; (8006d28 <TIM_OC6_SetConfig+0xb4>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	021b      	lsls	r3, r3, #8
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	051b      	lsls	r3, r3, #20
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <TIM_OC6_SetConfig+0xb8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00f      	beq.n	8006cec <TIM_OC6_SetConfig+0x78>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <TIM_OC6_SetConfig+0xbc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <TIM_OC6_SetConfig+0x78>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC6_SetConfig+0xc0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <TIM_OC6_SetConfig+0x78>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <TIM_OC6_SetConfig+0xc4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_OC6_SetConfig+0x78>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <TIM_OC6_SetConfig+0xc8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d109      	bne.n	8006d00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	029b      	lsls	r3, r3, #10
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	feff8fff 	.word	0xfeff8fff
 8006d2c:	40010000 	.word	0x40010000
 8006d30:	40010400 	.word	0x40010400
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40014400 	.word	0x40014400
 8006d3c:	40014800 	.word	0x40014800

08006d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f023 030a 	bic.w	r3, r3, #10
 8006d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b087      	sub	sp, #28
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f023 0210 	bic.w	r2, r3, #16
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	031b      	lsls	r3, r3, #12
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <TIM_ITRx_SetConfig+0x38>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f043 0307 	orr.w	r3, r3, #7
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	609a      	str	r2, [r3, #8]
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	ffcfff8f 	.word	0xffcfff8f

08006e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	021a      	lsls	r2, r3, #8
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	609a      	str	r2, [r3, #8]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2201      	movs	r2, #1
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1a      	ldr	r2, [r3, #32]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	401a      	ands	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1a      	ldr	r2, [r3, #32]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e06d      	b.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a30      	ldr	r2, [pc, #192]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a2f      	ldr	r2, [pc, #188]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d108      	bne.n	8006f26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a20      	ldr	r2, [pc, #128]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d022      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d01d      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d018      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d013      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1a      	ldr	r2, [pc, #104]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00e      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d009      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10c      	bne.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40001800 	.word	0x40001800
 8006fe0:	40014000 	.word	0x40014000

08006fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e065      	b.n	80070cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	041b      	lsls	r3, r3, #16
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a16      	ldr	r2, [pc, #88]	; (80070d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a14      	ldr	r2, [pc, #80]	; (80070dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d115      	bne.n	80070ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	051b      	lsls	r3, r3, #20
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40010400 	.word	0x40010400

080070e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e042      	b.n	80071b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7fa fb4d 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2224      	movs	r2, #36	; 0x24
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8ba 	bl	80072d8 <UART_SetConfig>
 8007164:	4603      	mov	r3, r0
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e022      	b.n	80071b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fe16 	bl	8007da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800718a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800719a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fe9d 	bl	8007eec <UART_CheckIdleState>
 80071b2:	4603      	mov	r3, r0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d17b      	bne.n	80072ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_UART_Transmit+0x26>
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e074      	b.n	80072d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2221      	movs	r2, #33	; 0x21
 80071f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071f6:	f7fa fd2d 	bl	8001c54 <HAL_GetTick>
 80071fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	88fa      	ldrh	r2, [r7, #6]
 8007200:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007214:	d108      	bne.n	8007228 <HAL_UART_Transmit+0x6c>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d104      	bne.n	8007228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e003      	b.n	8007230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007230:	e030      	b.n	8007294 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2200      	movs	r2, #0
 800723a:	2180      	movs	r1, #128	; 0x80
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 feff 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d005      	beq.n	8007254 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e03d      	b.n	80072d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10b      	bne.n	8007272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	3302      	adds	r3, #2
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e007      	b.n	8007282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3301      	adds	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007288:	b29b      	uxth	r3, r3
 800728a:	3b01      	subs	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1c8      	bne.n	8007232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2200      	movs	r2, #0
 80072a8:	2140      	movs	r1, #64	; 0x40
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fec8 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e006      	b.n	80072d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e000      	b.n	80072d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072ce:	2302      	movs	r3, #2
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3720      	adds	r7, #32
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072dc:	b092      	sub	sp, #72	; 0x48
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	431a      	orrs	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	431a      	orrs	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4bbe      	ldr	r3, [pc, #760]	; (8007600 <UART_SetConfig+0x328>)
 8007308:	4013      	ands	r3, r2
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007310:	430b      	orrs	r3, r1
 8007312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4ab3      	ldr	r2, [pc, #716]	; (8007604 <UART_SetConfig+0x32c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d004      	beq.n	8007344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007340:	4313      	orrs	r3, r2
 8007342:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689a      	ldr	r2, [r3, #8]
 800734a:	4baf      	ldr	r3, [pc, #700]	; (8007608 <UART_SetConfig+0x330>)
 800734c:	4013      	ands	r3, r2
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007354:	430b      	orrs	r3, r1
 8007356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735e:	f023 010f 	bic.w	r1, r3, #15
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4aa6      	ldr	r2, [pc, #664]	; (800760c <UART_SetConfig+0x334>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d177      	bne.n	8007468 <UART_SetConfig+0x190>
 8007378:	4ba5      	ldr	r3, [pc, #660]	; (8007610 <UART_SetConfig+0x338>)
 800737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007380:	2b28      	cmp	r3, #40	; 0x28
 8007382:	d86d      	bhi.n	8007460 <UART_SetConfig+0x188>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0xb4>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	08007431 	.word	0x08007431
 8007390:	08007461 	.word	0x08007461
 8007394:	08007461 	.word	0x08007461
 8007398:	08007461 	.word	0x08007461
 800739c:	08007461 	.word	0x08007461
 80073a0:	08007461 	.word	0x08007461
 80073a4:	08007461 	.word	0x08007461
 80073a8:	08007461 	.word	0x08007461
 80073ac:	08007439 	.word	0x08007439
 80073b0:	08007461 	.word	0x08007461
 80073b4:	08007461 	.word	0x08007461
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007461 	.word	0x08007461
 80073c4:	08007461 	.word	0x08007461
 80073c8:	08007461 	.word	0x08007461
 80073cc:	08007441 	.word	0x08007441
 80073d0:	08007461 	.word	0x08007461
 80073d4:	08007461 	.word	0x08007461
 80073d8:	08007461 	.word	0x08007461
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007461 	.word	0x08007461
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007449 	.word	0x08007449
 80073f0:	08007461 	.word	0x08007461
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	08007461 	.word	0x08007461
 8007408:	08007461 	.word	0x08007461
 800740c:	08007451 	.word	0x08007451
 8007410:	08007461 	.word	0x08007461
 8007414:	08007461 	.word	0x08007461
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	08007461 	.word	0x08007461
 8007428:	08007461 	.word	0x08007461
 800742c:	08007459 	.word	0x08007459
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e222      	b.n	800787e <UART_SetConfig+0x5a6>
 8007438:	2304      	movs	r3, #4
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743e:	e21e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007440:	2308      	movs	r3, #8
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007446:	e21a      	b.n	800787e <UART_SetConfig+0x5a6>
 8007448:	2310      	movs	r3, #16
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744e:	e216      	b.n	800787e <UART_SetConfig+0x5a6>
 8007450:	2320      	movs	r3, #32
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007456:	e212      	b.n	800787e <UART_SetConfig+0x5a6>
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e20e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007466:	e20a      	b.n	800787e <UART_SetConfig+0x5a6>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a69      	ldr	r2, [pc, #420]	; (8007614 <UART_SetConfig+0x33c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d130      	bne.n	80074d4 <UART_SetConfig+0x1fc>
 8007472:	4b67      	ldr	r3, [pc, #412]	; (8007610 <UART_SetConfig+0x338>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b05      	cmp	r3, #5
 800747c:	d826      	bhi.n	80074cc <UART_SetConfig+0x1f4>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x1ac>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	0800749d 	.word	0x0800749d
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074c5 	.word	0x080074c5
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e1ec      	b.n	800787e <UART_SetConfig+0x5a6>
 80074a4:	2304      	movs	r3, #4
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074aa:	e1e8      	b.n	800787e <UART_SetConfig+0x5a6>
 80074ac:	2308      	movs	r3, #8
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b2:	e1e4      	b.n	800787e <UART_SetConfig+0x5a6>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e1e0      	b.n	800787e <UART_SetConfig+0x5a6>
 80074bc:	2320      	movs	r3, #32
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e1dc      	b.n	800787e <UART_SetConfig+0x5a6>
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e1d8      	b.n	800787e <UART_SetConfig+0x5a6>
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d2:	e1d4      	b.n	800787e <UART_SetConfig+0x5a6>
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a4f      	ldr	r2, [pc, #316]	; (8007618 <UART_SetConfig+0x340>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d130      	bne.n	8007540 <UART_SetConfig+0x268>
 80074de:	4b4c      	ldr	r3, [pc, #304]	; (8007610 <UART_SetConfig+0x338>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d826      	bhi.n	8007538 <UART_SetConfig+0x260>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x218>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007509 	.word	0x08007509
 80074f4:	08007511 	.word	0x08007511
 80074f8:	08007519 	.word	0x08007519
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e1b6      	b.n	800787e <UART_SetConfig+0x5a6>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e1b2      	b.n	800787e <UART_SetConfig+0x5a6>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e1ae      	b.n	800787e <UART_SetConfig+0x5a6>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e1aa      	b.n	800787e <UART_SetConfig+0x5a6>
 8007528:	2320      	movs	r3, #32
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e1a6      	b.n	800787e <UART_SetConfig+0x5a6>
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e1a2      	b.n	800787e <UART_SetConfig+0x5a6>
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753e:	e19e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a35      	ldr	r2, [pc, #212]	; (800761c <UART_SetConfig+0x344>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d130      	bne.n	80075ac <UART_SetConfig+0x2d4>
 800754a:	4b31      	ldr	r3, [pc, #196]	; (8007610 <UART_SetConfig+0x338>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b05      	cmp	r3, #5
 8007554:	d826      	bhi.n	80075a4 <UART_SetConfig+0x2cc>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x284>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007575 	.word	0x08007575
 8007560:	0800757d 	.word	0x0800757d
 8007564:	08007585 	.word	0x08007585
 8007568:	0800758d 	.word	0x0800758d
 800756c:	08007595 	.word	0x08007595
 8007570:	0800759d 	.word	0x0800759d
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e180      	b.n	800787e <UART_SetConfig+0x5a6>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e17c      	b.n	800787e <UART_SetConfig+0x5a6>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e178      	b.n	800787e <UART_SetConfig+0x5a6>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e174      	b.n	800787e <UART_SetConfig+0x5a6>
 8007594:	2320      	movs	r3, #32
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e170      	b.n	800787e <UART_SetConfig+0x5a6>
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e16c      	b.n	800787e <UART_SetConfig+0x5a6>
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075aa:	e168      	b.n	800787e <UART_SetConfig+0x5a6>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <UART_SetConfig+0x348>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d142      	bne.n	800763c <UART_SetConfig+0x364>
 80075b6:	4b16      	ldr	r3, [pc, #88]	; (8007610 <UART_SetConfig+0x338>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d838      	bhi.n	8007634 <UART_SetConfig+0x35c>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x2f0>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	080075f1 	.word	0x080075f1
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007625 	.word	0x08007625
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e14a      	b.n	800787e <UART_SetConfig+0x5a6>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e146      	b.n	800787e <UART_SetConfig+0x5a6>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e142      	b.n	800787e <UART_SetConfig+0x5a6>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fe:	e13e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007600:	cfff69f3 	.word	0xcfff69f3
 8007604:	58000c00 	.word	0x58000c00
 8007608:	11fff4ff 	.word	0x11fff4ff
 800760c:	40011000 	.word	0x40011000
 8007610:	58024400 	.word	0x58024400
 8007614:	40004400 	.word	0x40004400
 8007618:	40004800 	.word	0x40004800
 800761c:	40004c00 	.word	0x40004c00
 8007620:	40005000 	.word	0x40005000
 8007624:	2320      	movs	r3, #32
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e128      	b.n	800787e <UART_SetConfig+0x5a6>
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e124      	b.n	800787e <UART_SetConfig+0x5a6>
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800763a:	e120      	b.n	800787e <UART_SetConfig+0x5a6>
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4acb      	ldr	r2, [pc, #812]	; (8007970 <UART_SetConfig+0x698>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d176      	bne.n	8007734 <UART_SetConfig+0x45c>
 8007646:	4bcb      	ldr	r3, [pc, #812]	; (8007974 <UART_SetConfig+0x69c>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764e:	2b28      	cmp	r3, #40	; 0x28
 8007650:	d86c      	bhi.n	800772c <UART_SetConfig+0x454>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x380>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076fd 	.word	0x080076fd
 800765c:	0800772d 	.word	0x0800772d
 8007660:	0800772d 	.word	0x0800772d
 8007664:	0800772d 	.word	0x0800772d
 8007668:	0800772d 	.word	0x0800772d
 800766c:	0800772d 	.word	0x0800772d
 8007670:	0800772d 	.word	0x0800772d
 8007674:	0800772d 	.word	0x0800772d
 8007678:	08007705 	.word	0x08007705
 800767c:	0800772d 	.word	0x0800772d
 8007680:	0800772d 	.word	0x0800772d
 8007684:	0800772d 	.word	0x0800772d
 8007688:	0800772d 	.word	0x0800772d
 800768c:	0800772d 	.word	0x0800772d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	0800772d 	.word	0x0800772d
 8007698:	0800770d 	.word	0x0800770d
 800769c:	0800772d 	.word	0x0800772d
 80076a0:	0800772d 	.word	0x0800772d
 80076a4:	0800772d 	.word	0x0800772d
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	08007715 	.word	0x08007715
 80076bc:	0800772d 	.word	0x0800772d
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	0800772d 	.word	0x0800772d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	0800772d 	.word	0x0800772d
 80076e8:	0800772d 	.word	0x0800772d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	08007725 	.word	0x08007725
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e0bc      	b.n	800787e <UART_SetConfig+0x5a6>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e0b8      	b.n	800787e <UART_SetConfig+0x5a6>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e0b4      	b.n	800787e <UART_SetConfig+0x5a6>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e0b0      	b.n	800787e <UART_SetConfig+0x5a6>
 800771c:	2320      	movs	r3, #32
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e0ac      	b.n	800787e <UART_SetConfig+0x5a6>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e0a8      	b.n	800787e <UART_SetConfig+0x5a6>
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007732:	e0a4      	b.n	800787e <UART_SetConfig+0x5a6>
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a8f      	ldr	r2, [pc, #572]	; (8007978 <UART_SetConfig+0x6a0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d130      	bne.n	80077a0 <UART_SetConfig+0x4c8>
 800773e:	4b8d      	ldr	r3, [pc, #564]	; (8007974 <UART_SetConfig+0x69c>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b05      	cmp	r3, #5
 8007748:	d826      	bhi.n	8007798 <UART_SetConfig+0x4c0>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <UART_SetConfig+0x478>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007769 	.word	0x08007769
 8007754:	08007771 	.word	0x08007771
 8007758:	08007779 	.word	0x08007779
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e086      	b.n	800787e <UART_SetConfig+0x5a6>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e082      	b.n	800787e <UART_SetConfig+0x5a6>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e07e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e07a      	b.n	800787e <UART_SetConfig+0x5a6>
 8007788:	2320      	movs	r3, #32
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e076      	b.n	800787e <UART_SetConfig+0x5a6>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e072      	b.n	800787e <UART_SetConfig+0x5a6>
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800779e:	e06e      	b.n	800787e <UART_SetConfig+0x5a6>
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a75      	ldr	r2, [pc, #468]	; (800797c <UART_SetConfig+0x6a4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d130      	bne.n	800780c <UART_SetConfig+0x534>
 80077aa:	4b72      	ldr	r3, [pc, #456]	; (8007974 <UART_SetConfig+0x69c>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d826      	bhi.n	8007804 <UART_SetConfig+0x52c>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x4e4>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077d5 	.word	0x080077d5
 80077c0:	080077dd 	.word	0x080077dd
 80077c4:	080077e5 	.word	0x080077e5
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e050      	b.n	800787e <UART_SetConfig+0x5a6>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e04c      	b.n	800787e <UART_SetConfig+0x5a6>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e048      	b.n	800787e <UART_SetConfig+0x5a6>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e044      	b.n	800787e <UART_SetConfig+0x5a6>
 80077f4:	2320      	movs	r3, #32
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e040      	b.n	800787e <UART_SetConfig+0x5a6>
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e03c      	b.n	800787e <UART_SetConfig+0x5a6>
 8007804:	2380      	movs	r3, #128	; 0x80
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780a:	e038      	b.n	800787e <UART_SetConfig+0x5a6>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5b      	ldr	r2, [pc, #364]	; (8007980 <UART_SetConfig+0x6a8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d130      	bne.n	8007878 <UART_SetConfig+0x5a0>
 8007816:	4b57      	ldr	r3, [pc, #348]	; (8007974 <UART_SetConfig+0x69c>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b05      	cmp	r3, #5
 8007820:	d826      	bhi.n	8007870 <UART_SetConfig+0x598>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <UART_SetConfig+0x550>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007841 	.word	0x08007841
 800782c:	08007849 	.word	0x08007849
 8007830:	08007851 	.word	0x08007851
 8007834:	08007859 	.word	0x08007859
 8007838:	08007861 	.word	0x08007861
 800783c:	08007869 	.word	0x08007869
 8007840:	2302      	movs	r3, #2
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007846:	e01a      	b.n	800787e <UART_SetConfig+0x5a6>
 8007848:	2304      	movs	r3, #4
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800784e:	e016      	b.n	800787e <UART_SetConfig+0x5a6>
 8007850:	2308      	movs	r3, #8
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007856:	e012      	b.n	800787e <UART_SetConfig+0x5a6>
 8007858:	2310      	movs	r3, #16
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785e:	e00e      	b.n	800787e <UART_SetConfig+0x5a6>
 8007860:	2320      	movs	r3, #32
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007866:	e00a      	b.n	800787e <UART_SetConfig+0x5a6>
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786e:	e006      	b.n	800787e <UART_SetConfig+0x5a6>
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007876:	e002      	b.n	800787e <UART_SetConfig+0x5a6>
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a3f      	ldr	r2, [pc, #252]	; (8007980 <UART_SetConfig+0x6a8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	f040 80f8 	bne.w	8007a7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800788a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800788e:	2b20      	cmp	r3, #32
 8007890:	dc46      	bgt.n	8007920 <UART_SetConfig+0x648>
 8007892:	2b02      	cmp	r3, #2
 8007894:	f2c0 8082 	blt.w	800799c <UART_SetConfig+0x6c4>
 8007898:	3b02      	subs	r3, #2
 800789a:	2b1e      	cmp	r3, #30
 800789c:	d87e      	bhi.n	800799c <UART_SetConfig+0x6c4>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <UART_SetConfig+0x5cc>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	08007927 	.word	0x08007927
 80078a8:	0800799d 	.word	0x0800799d
 80078ac:	0800792f 	.word	0x0800792f
 80078b0:	0800799d 	.word	0x0800799d
 80078b4:	0800799d 	.word	0x0800799d
 80078b8:	0800799d 	.word	0x0800799d
 80078bc:	0800793f 	.word	0x0800793f
 80078c0:	0800799d 	.word	0x0800799d
 80078c4:	0800799d 	.word	0x0800799d
 80078c8:	0800799d 	.word	0x0800799d
 80078cc:	0800799d 	.word	0x0800799d
 80078d0:	0800799d 	.word	0x0800799d
 80078d4:	0800799d 	.word	0x0800799d
 80078d8:	0800799d 	.word	0x0800799d
 80078dc:	0800794f 	.word	0x0800794f
 80078e0:	0800799d 	.word	0x0800799d
 80078e4:	0800799d 	.word	0x0800799d
 80078e8:	0800799d 	.word	0x0800799d
 80078ec:	0800799d 	.word	0x0800799d
 80078f0:	0800799d 	.word	0x0800799d
 80078f4:	0800799d 	.word	0x0800799d
 80078f8:	0800799d 	.word	0x0800799d
 80078fc:	0800799d 	.word	0x0800799d
 8007900:	0800799d 	.word	0x0800799d
 8007904:	0800799d 	.word	0x0800799d
 8007908:	0800799d 	.word	0x0800799d
 800790c:	0800799d 	.word	0x0800799d
 8007910:	0800799d 	.word	0x0800799d
 8007914:	0800799d 	.word	0x0800799d
 8007918:	0800799d 	.word	0x0800799d
 800791c:	0800798f 	.word	0x0800798f
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d037      	beq.n	8007994 <UART_SetConfig+0x6bc>
 8007924:	e03a      	b.n	800799c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007926:	f7fc ff29 	bl	800477c <HAL_RCCEx_GetD3PCLK1Freq>
 800792a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800792c:	e03c      	b.n	80079a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800792e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007932:	4618      	mov	r0, r3
 8007934:	f7fc ff38 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800793c:	e034      	b.n	80079a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800793e:	f107 0318 	add.w	r3, r7, #24
 8007942:	4618      	mov	r0, r3
 8007944:	f7fd f884 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800794c:	e02c      	b.n	80079a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800794e:	4b09      	ldr	r3, [pc, #36]	; (8007974 <UART_SetConfig+0x69c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d016      	beq.n	8007988 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <UART_SetConfig+0x69c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	4a07      	ldr	r2, [pc, #28]	; (8007984 <UART_SetConfig+0x6ac>)
 8007966:	fa22 f303 	lsr.w	r3, r2, r3
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800796c:	e01c      	b.n	80079a8 <UART_SetConfig+0x6d0>
 800796e:	bf00      	nop
 8007970:	40011400 	.word	0x40011400
 8007974:	58024400 	.word	0x58024400
 8007978:	40007800 	.word	0x40007800
 800797c:	40007c00 	.word	0x40007c00
 8007980:	58000c00 	.word	0x58000c00
 8007984:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007988:	4b9d      	ldr	r3, [pc, #628]	; (8007c00 <UART_SetConfig+0x928>)
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800798c:	e00c      	b.n	80079a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800798e:	4b9d      	ldr	r3, [pc, #628]	; (8007c04 <UART_SetConfig+0x92c>)
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007992:	e009      	b.n	80079a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799a:	e005      	b.n	80079a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 81de 	beq.w	8007d6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	4a94      	ldr	r2, [pc, #592]	; (8007c08 <UART_SetConfig+0x930>)
 80079b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ba:	461a      	mov	r2, r3
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	fbb3 f3f2 	udiv	r3, r3, r2
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d305      	bcc.n	80079e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	429a      	cmp	r2, r3
 80079de:	d903      	bls.n	80079e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80079e6:	e1c1      	b.n	8007d6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ea:	2200      	movs	r2, #0
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	60fa      	str	r2, [r7, #12]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	4a84      	ldr	r2, [pc, #528]	; (8007c08 <UART_SetConfig+0x930>)
 80079f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2200      	movs	r2, #0
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a0a:	f7f8 fcb9 	bl	8000380 <__aeabi_uldivmod>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4610      	mov	r0, r2
 8007a14:	4619      	mov	r1, r3
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	020b      	lsls	r3, r1, #8
 8007a20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a24:	0202      	lsls	r2, r0, #8
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	6849      	ldr	r1, [r1, #4]
 8007a2a:	0849      	lsrs	r1, r1, #1
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4605      	mov	r5, r0
 8007a32:	eb12 0804 	adds.w	r8, r2, r4
 8007a36:	eb43 0905 	adc.w	r9, r3, r5
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	469a      	mov	sl, r3
 8007a42:	4693      	mov	fp, r2
 8007a44:	4652      	mov	r2, sl
 8007a46:	465b      	mov	r3, fp
 8007a48:	4640      	mov	r0, r8
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	f7f8 fc98 	bl	8000380 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4613      	mov	r3, r2
 8007a56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5e:	d308      	bcc.n	8007a72 <UART_SetConfig+0x79a>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a66:	d204      	bcs.n	8007a72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	e17c      	b.n	8007d6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a78:	e178      	b.n	8007d6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a82:	f040 80c5 	bne.w	8007c10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	dc48      	bgt.n	8007b20 <UART_SetConfig+0x848>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db7b      	blt.n	8007b8a <UART_SetConfig+0x8b2>
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d879      	bhi.n	8007b8a <UART_SetConfig+0x8b2>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0x7c4>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007b27 	.word	0x08007b27
 8007aa0:	08007b2f 	.word	0x08007b2f
 8007aa4:	08007b8b 	.word	0x08007b8b
 8007aa8:	08007b8b 	.word	0x08007b8b
 8007aac:	08007b37 	.word	0x08007b37
 8007ab0:	08007b8b 	.word	0x08007b8b
 8007ab4:	08007b8b 	.word	0x08007b8b
 8007ab8:	08007b8b 	.word	0x08007b8b
 8007abc:	08007b47 	.word	0x08007b47
 8007ac0:	08007b8b 	.word	0x08007b8b
 8007ac4:	08007b8b 	.word	0x08007b8b
 8007ac8:	08007b8b 	.word	0x08007b8b
 8007acc:	08007b8b 	.word	0x08007b8b
 8007ad0:	08007b8b 	.word	0x08007b8b
 8007ad4:	08007b8b 	.word	0x08007b8b
 8007ad8:	08007b8b 	.word	0x08007b8b
 8007adc:	08007b57 	.word	0x08007b57
 8007ae0:	08007b8b 	.word	0x08007b8b
 8007ae4:	08007b8b 	.word	0x08007b8b
 8007ae8:	08007b8b 	.word	0x08007b8b
 8007aec:	08007b8b 	.word	0x08007b8b
 8007af0:	08007b8b 	.word	0x08007b8b
 8007af4:	08007b8b 	.word	0x08007b8b
 8007af8:	08007b8b 	.word	0x08007b8b
 8007afc:	08007b8b 	.word	0x08007b8b
 8007b00:	08007b8b 	.word	0x08007b8b
 8007b04:	08007b8b 	.word	0x08007b8b
 8007b08:	08007b8b 	.word	0x08007b8b
 8007b0c:	08007b8b 	.word	0x08007b8b
 8007b10:	08007b8b 	.word	0x08007b8b
 8007b14:	08007b8b 	.word	0x08007b8b
 8007b18:	08007b8b 	.word	0x08007b8b
 8007b1c:	08007b7d 	.word	0x08007b7d
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d02e      	beq.n	8007b82 <UART_SetConfig+0x8aa>
 8007b24:	e031      	b.n	8007b8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b26:	f7fb fbf3 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8007b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b2c:	e033      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b2e:	f7fb fc05 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8007b32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b34:	e02f      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fc fe34 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b44:	e027      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b46:	f107 0318 	add.w	r3, r7, #24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fc ff80 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b54:	e01f      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b56:	4b2d      	ldr	r3, [pc, #180]	; (8007c0c <UART_SetConfig+0x934>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b62:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <UART_SetConfig+0x934>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	08db      	lsrs	r3, r3, #3
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	4a24      	ldr	r2, [pc, #144]	; (8007c00 <UART_SetConfig+0x928>)
 8007b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b74:	e00f      	b.n	8007b96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b76:	4b22      	ldr	r3, [pc, #136]	; (8007c00 <UART_SetConfig+0x928>)
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7a:	e00c      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b7c:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <UART_SetConfig+0x92c>)
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80e7 	beq.w	8007d6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	4a19      	ldr	r2, [pc, #100]	; (8007c08 <UART_SetConfig+0x930>)
 8007ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb0:	005a      	lsls	r2, r3, #1
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	085b      	lsrs	r3, r3, #1
 8007bb8:	441a      	add	r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d916      	bls.n	8007bf8 <UART_SetConfig+0x920>
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd0:	d212      	bcs.n	8007bf8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	f023 030f 	bic.w	r3, r3, #15
 8007bda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007bea:	4313      	orrs	r3, r2
 8007bec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007bf4:	60da      	str	r2, [r3, #12]
 8007bf6:	e0b9      	b.n	8007d6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bfe:	e0b5      	b.n	8007d6c <UART_SetConfig+0xa94>
 8007c00:	03d09000 	.word	0x03d09000
 8007c04:	003d0900 	.word	0x003d0900
 8007c08:	08008d54 	.word	0x08008d54
 8007c0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	dc49      	bgt.n	8007cac <UART_SetConfig+0x9d4>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	db7c      	blt.n	8007d16 <UART_SetConfig+0xa3e>
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d87a      	bhi.n	8007d16 <UART_SetConfig+0xa3e>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <UART_SetConfig+0x950>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007cb3 	.word	0x08007cb3
 8007c2c:	08007cbb 	.word	0x08007cbb
 8007c30:	08007d17 	.word	0x08007d17
 8007c34:	08007d17 	.word	0x08007d17
 8007c38:	08007cc3 	.word	0x08007cc3
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007d17 	.word	0x08007d17
 8007c44:	08007d17 	.word	0x08007d17
 8007c48:	08007cd3 	.word	0x08007cd3
 8007c4c:	08007d17 	.word	0x08007d17
 8007c50:	08007d17 	.word	0x08007d17
 8007c54:	08007d17 	.word	0x08007d17
 8007c58:	08007d17 	.word	0x08007d17
 8007c5c:	08007d17 	.word	0x08007d17
 8007c60:	08007d17 	.word	0x08007d17
 8007c64:	08007d17 	.word	0x08007d17
 8007c68:	08007ce3 	.word	0x08007ce3
 8007c6c:	08007d17 	.word	0x08007d17
 8007c70:	08007d17 	.word	0x08007d17
 8007c74:	08007d17 	.word	0x08007d17
 8007c78:	08007d17 	.word	0x08007d17
 8007c7c:	08007d17 	.word	0x08007d17
 8007c80:	08007d17 	.word	0x08007d17
 8007c84:	08007d17 	.word	0x08007d17
 8007c88:	08007d17 	.word	0x08007d17
 8007c8c:	08007d17 	.word	0x08007d17
 8007c90:	08007d17 	.word	0x08007d17
 8007c94:	08007d17 	.word	0x08007d17
 8007c98:	08007d17 	.word	0x08007d17
 8007c9c:	08007d17 	.word	0x08007d17
 8007ca0:	08007d17 	.word	0x08007d17
 8007ca4:	08007d17 	.word	0x08007d17
 8007ca8:	08007d09 	.word	0x08007d09
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d02e      	beq.n	8007d0e <UART_SetConfig+0xa36>
 8007cb0:	e031      	b.n	8007d16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cb2:	f7fb fb2d 	bl	8003310 <HAL_RCC_GetPCLK1Freq>
 8007cb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cb8:	e033      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cba:	f7fb fb3f 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8007cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cc0:	e02f      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fc fd6e 	bl	80047a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cd0:	e027      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd2:	f107 0318 	add.w	r3, r7, #24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fc feba 	bl	8004a50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce0:	e01f      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ce2:	4b2d      	ldr	r3, [pc, #180]	; (8007d98 <UART_SetConfig+0xac0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <UART_SetConfig+0xac0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	08db      	lsrs	r3, r3, #3
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <UART_SetConfig+0xac4>)
 8007cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007d02:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <UART_SetConfig+0xac4>)
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d06:	e00c      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d08:	4b25      	ldr	r3, [pc, #148]	; (8007da0 <UART_SetConfig+0xac8>)
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0c:	e009      	b.n	8007d22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d14:	e005      	b.n	8007d22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d20:	bf00      	nop
    }

    if (pclk != 0U)
 8007d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d021      	beq.n	8007d6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	; (8007da4 <UART_SetConfig+0xacc>)
 8007d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d36:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	441a      	add	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4e:	2b0f      	cmp	r3, #15
 8007d50:	d909      	bls.n	8007d66 <UART_SetConfig+0xa8e>
 8007d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d58:	d205      	bcs.n	8007d66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60da      	str	r2, [r3, #12]
 8007d64:	e002      	b.n	8007d6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2200      	movs	r2, #0
 8007d86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007d88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3748      	adds	r7, #72	; 0x48
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d96:	bf00      	nop
 8007d98:	58024400 	.word	0x58024400
 8007d9c:	03d09000 	.word	0x03d09000
 8007da0:	003d0900 	.word	0x003d0900
 8007da4:	08008d54 	.word	0x08008d54

08007da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f003 0304 	and.w	r3, r3, #4
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00a      	beq.n	8007e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01a      	beq.n	8007ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea6:	d10a      	bne.n	8007ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b098      	sub	sp, #96	; 0x60
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007efc:	f7f9 feaa 	bl	8001c54 <HAL_GetTick>
 8007f00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d12f      	bne.n	8007f70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f88e 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d022      	beq.n	8007f70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
 8007f4a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e6      	bne.n	8007f2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e063      	b.n	8008038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d149      	bne.n	8008012 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f86:	2200      	movs	r2, #0
 8007f88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f857 	bl	8008040 <UART_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d03c      	beq.n	8008012 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8007fb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbe:	e841 2300 	strex	r3, r2, [r1]
 8007fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1e6      	bne.n	8007f98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	e853 3f00 	ldrex	r3, [r3]
 8007fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fea:	61fa      	str	r2, [r7, #28]
 8007fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fee:	69b9      	ldr	r1, [r7, #24]
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	e841 2300 	strex	r3, r2, [r1]
 8007ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1e5      	bne.n	8007fca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e012      	b.n	8008038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3758      	adds	r7, #88	; 0x58
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008050:	e049      	b.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d045      	beq.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800805a:	f7f9 fdfb 	bl	8001c54 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	429a      	cmp	r2, r3
 8008068:	d302      	bcc.n	8008070 <UART_WaitOnFlagUntilTimeout+0x30>
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e048      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b00      	cmp	r3, #0
 8008080:	d031      	beq.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b08      	cmp	r3, #8
 800808e:	d110      	bne.n	80080b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2208      	movs	r2, #8
 8008096:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f839 	bl	8008110 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2208      	movs	r2, #8
 80080a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e029      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c0:	d111      	bne.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f81f 	bl	8008110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e00f      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	69da      	ldr	r2, [r3, #28]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4013      	ands	r3, r2
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	bf0c      	ite	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	2300      	movne	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	429a      	cmp	r2, r3
 8008102:	d0a6      	beq.n	8008052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b095      	sub	sp, #84	; 0x54
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800812c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008136:	643b      	str	r3, [r7, #64]	; 0x40
 8008138:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800813c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e6      	bne.n	8008118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3308      	adds	r3, #8
 8008150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	e853 3f00 	ldrex	r3, [r3]
 8008158:	61fb      	str	r3, [r7, #28]
   return(result);
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	4b1e      	ldr	r3, [pc, #120]	; (80081d8 <UART_EndRxTransfer+0xc8>)
 800815e:	4013      	ands	r3, r2
 8008160:	64bb      	str	r3, [r7, #72]	; 0x48
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800816a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e5      	bne.n	800814a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d118      	bne.n	80081b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	60bb      	str	r3, [r7, #8]
   return(result);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f023 0310 	bic.w	r3, r3, #16
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6979      	ldr	r1, [r7, #20]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	613b      	str	r3, [r7, #16]
   return(result);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e6      	bne.n	8008186 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80081cc:	bf00      	nop
 80081ce:	3754      	adds	r7, #84	; 0x54
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	effffffe 	.word	0xeffffffe

080081dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d101      	bne.n	80081f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e027      	b.n	8008242 <HAL_UARTEx_DisableFifoMode+0x66>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2224      	movs	r2, #36	; 0x24
 80081fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0201 	bic.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008262:	2302      	movs	r3, #2
 8008264:	e02d      	b.n	80082c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2224      	movs	r2, #36	; 0x24
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f850 	bl	8008348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082de:	2302      	movs	r3, #2
 80082e0:	e02d      	b.n	800833e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2224      	movs	r2, #36	; 0x24
 80082ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0201 	bic.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f812 	bl	8008348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008354:	2b00      	cmp	r3, #0
 8008356:	d108      	bne.n	800836a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008368:	e031      	b.n	80083ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800836a:	2310      	movs	r3, #16
 800836c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800836e:	2310      	movs	r3, #16
 8008370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	0e5b      	lsrs	r3, r3, #25
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	0f5b      	lsrs	r3, r3, #29
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	7b3a      	ldrb	r2, [r7, #12]
 8008396:	4911      	ldr	r1, [pc, #68]	; (80083dc <UARTEx_SetNbDataToProcess+0x94>)
 8008398:	5c8a      	ldrb	r2, [r1, r2]
 800839a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800839e:	7b3a      	ldrb	r2, [r7, #12]
 80083a0:	490f      	ldr	r1, [pc, #60]	; (80083e0 <UARTEx_SetNbDataToProcess+0x98>)
 80083a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	7b7a      	ldrb	r2, [r7, #13]
 80083b4:	4909      	ldr	r1, [pc, #36]	; (80083dc <UARTEx_SetNbDataToProcess+0x94>)
 80083b6:	5c8a      	ldrb	r2, [r1, r2]
 80083b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083bc:	7b7a      	ldrb	r2, [r7, #13]
 80083be:	4908      	ldr	r1, [pc, #32]	; (80083e0 <UARTEx_SetNbDataToProcess+0x98>)
 80083c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	08008d6c 	.word	0x08008d6c
 80083e0:	08008d74 	.word	0x08008d74

080083e4 <__errno>:
 80083e4:	4b01      	ldr	r3, [pc, #4]	; (80083ec <__errno+0x8>)
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	24000014 	.word	0x24000014

080083f0 <__libc_init_array>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4d0d      	ldr	r5, [pc, #52]	; (8008428 <__libc_init_array+0x38>)
 80083f4:	4c0d      	ldr	r4, [pc, #52]	; (800842c <__libc_init_array+0x3c>)
 80083f6:	1b64      	subs	r4, r4, r5
 80083f8:	10a4      	asrs	r4, r4, #2
 80083fa:	2600      	movs	r6, #0
 80083fc:	42a6      	cmp	r6, r4
 80083fe:	d109      	bne.n	8008414 <__libc_init_array+0x24>
 8008400:	4d0b      	ldr	r5, [pc, #44]	; (8008430 <__libc_init_array+0x40>)
 8008402:	4c0c      	ldr	r4, [pc, #48]	; (8008434 <__libc_init_array+0x44>)
 8008404:	f000 fc8e 	bl	8008d24 <_init>
 8008408:	1b64      	subs	r4, r4, r5
 800840a:	10a4      	asrs	r4, r4, #2
 800840c:	2600      	movs	r6, #0
 800840e:	42a6      	cmp	r6, r4
 8008410:	d105      	bne.n	800841e <__libc_init_array+0x2e>
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	f855 3b04 	ldr.w	r3, [r5], #4
 8008418:	4798      	blx	r3
 800841a:	3601      	adds	r6, #1
 800841c:	e7ee      	b.n	80083fc <__libc_init_array+0xc>
 800841e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008422:	4798      	blx	r3
 8008424:	3601      	adds	r6, #1
 8008426:	e7f2      	b.n	800840e <__libc_init_array+0x1e>
 8008428:	08008db8 	.word	0x08008db8
 800842c:	08008db8 	.word	0x08008db8
 8008430:	08008db8 	.word	0x08008db8
 8008434:	08008dbc 	.word	0x08008dbc

08008438 <memset>:
 8008438:	4402      	add	r2, r0
 800843a:	4603      	mov	r3, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <siprintf>:
 8008448:	b40e      	push	{r1, r2, r3}
 800844a:	b500      	push	{lr}
 800844c:	b09c      	sub	sp, #112	; 0x70
 800844e:	ab1d      	add	r3, sp, #116	; 0x74
 8008450:	9002      	str	r0, [sp, #8]
 8008452:	9006      	str	r0, [sp, #24]
 8008454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <siprintf+0x38>)
 800845a:	9107      	str	r1, [sp, #28]
 800845c:	9104      	str	r1, [sp, #16]
 800845e:	4909      	ldr	r1, [pc, #36]	; (8008484 <siprintf+0x3c>)
 8008460:	f853 2b04 	ldr.w	r2, [r3], #4
 8008464:	9105      	str	r1, [sp, #20]
 8008466:	6800      	ldr	r0, [r0, #0]
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	a902      	add	r1, sp, #8
 800846c:	f000 f868 	bl	8008540 <_svfiprintf_r>
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	b01c      	add	sp, #112	; 0x70
 8008478:	f85d eb04 	ldr.w	lr, [sp], #4
 800847c:	b003      	add	sp, #12
 800847e:	4770      	bx	lr
 8008480:	24000014 	.word	0x24000014
 8008484:	ffff0208 	.word	0xffff0208

08008488 <__ssputs_r>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	688e      	ldr	r6, [r1, #8]
 800848e:	429e      	cmp	r6, r3
 8008490:	4682      	mov	sl, r0
 8008492:	460c      	mov	r4, r1
 8008494:	4690      	mov	r8, r2
 8008496:	461f      	mov	r7, r3
 8008498:	d838      	bhi.n	800850c <__ssputs_r+0x84>
 800849a:	898a      	ldrh	r2, [r1, #12]
 800849c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084a0:	d032      	beq.n	8008508 <__ssputs_r+0x80>
 80084a2:	6825      	ldr	r5, [r4, #0]
 80084a4:	6909      	ldr	r1, [r1, #16]
 80084a6:	eba5 0901 	sub.w	r9, r5, r1
 80084aa:	6965      	ldr	r5, [r4, #20]
 80084ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084b4:	3301      	adds	r3, #1
 80084b6:	444b      	add	r3, r9
 80084b8:	106d      	asrs	r5, r5, #1
 80084ba:	429d      	cmp	r5, r3
 80084bc:	bf38      	it	cc
 80084be:	461d      	movcc	r5, r3
 80084c0:	0553      	lsls	r3, r2, #21
 80084c2:	d531      	bpl.n	8008528 <__ssputs_r+0xa0>
 80084c4:	4629      	mov	r1, r5
 80084c6:	f000 fb63 	bl	8008b90 <_malloc_r>
 80084ca:	4606      	mov	r6, r0
 80084cc:	b950      	cbnz	r0, 80084e4 <__ssputs_r+0x5c>
 80084ce:	230c      	movs	r3, #12
 80084d0:	f8ca 3000 	str.w	r3, [sl]
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e4:	6921      	ldr	r1, [r4, #16]
 80084e6:	464a      	mov	r2, r9
 80084e8:	f000 fabe 	bl	8008a68 <memcpy>
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	6126      	str	r6, [r4, #16]
 80084fa:	6165      	str	r5, [r4, #20]
 80084fc:	444e      	add	r6, r9
 80084fe:	eba5 0509 	sub.w	r5, r5, r9
 8008502:	6026      	str	r6, [r4, #0]
 8008504:	60a5      	str	r5, [r4, #8]
 8008506:	463e      	mov	r6, r7
 8008508:	42be      	cmp	r6, r7
 800850a:	d900      	bls.n	800850e <__ssputs_r+0x86>
 800850c:	463e      	mov	r6, r7
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	4632      	mov	r2, r6
 8008512:	4641      	mov	r1, r8
 8008514:	f000 fab6 	bl	8008a84 <memmove>
 8008518:	68a3      	ldr	r3, [r4, #8]
 800851a:	1b9b      	subs	r3, r3, r6
 800851c:	60a3      	str	r3, [r4, #8]
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	4433      	add	r3, r6
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	2000      	movs	r0, #0
 8008526:	e7db      	b.n	80084e0 <__ssputs_r+0x58>
 8008528:	462a      	mov	r2, r5
 800852a:	f000 fba5 	bl	8008c78 <_realloc_r>
 800852e:	4606      	mov	r6, r0
 8008530:	2800      	cmp	r0, #0
 8008532:	d1e1      	bne.n	80084f8 <__ssputs_r+0x70>
 8008534:	6921      	ldr	r1, [r4, #16]
 8008536:	4650      	mov	r0, sl
 8008538:	f000 fabe 	bl	8008ab8 <_free_r>
 800853c:	e7c7      	b.n	80084ce <__ssputs_r+0x46>
	...

08008540 <_svfiprintf_r>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	4698      	mov	r8, r3
 8008546:	898b      	ldrh	r3, [r1, #12]
 8008548:	061b      	lsls	r3, r3, #24
 800854a:	b09d      	sub	sp, #116	; 0x74
 800854c:	4607      	mov	r7, r0
 800854e:	460d      	mov	r5, r1
 8008550:	4614      	mov	r4, r2
 8008552:	d50e      	bpl.n	8008572 <_svfiprintf_r+0x32>
 8008554:	690b      	ldr	r3, [r1, #16]
 8008556:	b963      	cbnz	r3, 8008572 <_svfiprintf_r+0x32>
 8008558:	2140      	movs	r1, #64	; 0x40
 800855a:	f000 fb19 	bl	8008b90 <_malloc_r>
 800855e:	6028      	str	r0, [r5, #0]
 8008560:	6128      	str	r0, [r5, #16]
 8008562:	b920      	cbnz	r0, 800856e <_svfiprintf_r+0x2e>
 8008564:	230c      	movs	r3, #12
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	f04f 30ff 	mov.w	r0, #4294967295
 800856c:	e0d1      	b.n	8008712 <_svfiprintf_r+0x1d2>
 800856e:	2340      	movs	r3, #64	; 0x40
 8008570:	616b      	str	r3, [r5, #20]
 8008572:	2300      	movs	r3, #0
 8008574:	9309      	str	r3, [sp, #36]	; 0x24
 8008576:	2320      	movs	r3, #32
 8008578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800857c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008580:	2330      	movs	r3, #48	; 0x30
 8008582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800872c <_svfiprintf_r+0x1ec>
 8008586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800858a:	f04f 0901 	mov.w	r9, #1
 800858e:	4623      	mov	r3, r4
 8008590:	469a      	mov	sl, r3
 8008592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008596:	b10a      	cbz	r2, 800859c <_svfiprintf_r+0x5c>
 8008598:	2a25      	cmp	r2, #37	; 0x25
 800859a:	d1f9      	bne.n	8008590 <_svfiprintf_r+0x50>
 800859c:	ebba 0b04 	subs.w	fp, sl, r4
 80085a0:	d00b      	beq.n	80085ba <_svfiprintf_r+0x7a>
 80085a2:	465b      	mov	r3, fp
 80085a4:	4622      	mov	r2, r4
 80085a6:	4629      	mov	r1, r5
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff ff6d 	bl	8008488 <__ssputs_r>
 80085ae:	3001      	adds	r0, #1
 80085b0:	f000 80aa 	beq.w	8008708 <_svfiprintf_r+0x1c8>
 80085b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085b6:	445a      	add	r2, fp
 80085b8:	9209      	str	r2, [sp, #36]	; 0x24
 80085ba:	f89a 3000 	ldrb.w	r3, [sl]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80a2 	beq.w	8008708 <_svfiprintf_r+0x1c8>
 80085c4:	2300      	movs	r3, #0
 80085c6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ce:	f10a 0a01 	add.w	sl, sl, #1
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	9307      	str	r3, [sp, #28]
 80085d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085da:	931a      	str	r3, [sp, #104]	; 0x68
 80085dc:	4654      	mov	r4, sl
 80085de:	2205      	movs	r2, #5
 80085e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e4:	4851      	ldr	r0, [pc, #324]	; (800872c <_svfiprintf_r+0x1ec>)
 80085e6:	f7f7 fe7b 	bl	80002e0 <memchr>
 80085ea:	9a04      	ldr	r2, [sp, #16]
 80085ec:	b9d8      	cbnz	r0, 8008626 <_svfiprintf_r+0xe6>
 80085ee:	06d0      	lsls	r0, r2, #27
 80085f0:	bf44      	itt	mi
 80085f2:	2320      	movmi	r3, #32
 80085f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085f8:	0711      	lsls	r1, r2, #28
 80085fa:	bf44      	itt	mi
 80085fc:	232b      	movmi	r3, #43	; 0x2b
 80085fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008602:	f89a 3000 	ldrb.w	r3, [sl]
 8008606:	2b2a      	cmp	r3, #42	; 0x2a
 8008608:	d015      	beq.n	8008636 <_svfiprintf_r+0xf6>
 800860a:	9a07      	ldr	r2, [sp, #28]
 800860c:	4654      	mov	r4, sl
 800860e:	2000      	movs	r0, #0
 8008610:	f04f 0c0a 	mov.w	ip, #10
 8008614:	4621      	mov	r1, r4
 8008616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800861a:	3b30      	subs	r3, #48	; 0x30
 800861c:	2b09      	cmp	r3, #9
 800861e:	d94e      	bls.n	80086be <_svfiprintf_r+0x17e>
 8008620:	b1b0      	cbz	r0, 8008650 <_svfiprintf_r+0x110>
 8008622:	9207      	str	r2, [sp, #28]
 8008624:	e014      	b.n	8008650 <_svfiprintf_r+0x110>
 8008626:	eba0 0308 	sub.w	r3, r0, r8
 800862a:	fa09 f303 	lsl.w	r3, r9, r3
 800862e:	4313      	orrs	r3, r2
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	46a2      	mov	sl, r4
 8008634:	e7d2      	b.n	80085dc <_svfiprintf_r+0x9c>
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	1d19      	adds	r1, r3, #4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	9103      	str	r1, [sp, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	bfbb      	ittet	lt
 8008642:	425b      	neglt	r3, r3
 8008644:	f042 0202 	orrlt.w	r2, r2, #2
 8008648:	9307      	strge	r3, [sp, #28]
 800864a:	9307      	strlt	r3, [sp, #28]
 800864c:	bfb8      	it	lt
 800864e:	9204      	strlt	r2, [sp, #16]
 8008650:	7823      	ldrb	r3, [r4, #0]
 8008652:	2b2e      	cmp	r3, #46	; 0x2e
 8008654:	d10c      	bne.n	8008670 <_svfiprintf_r+0x130>
 8008656:	7863      	ldrb	r3, [r4, #1]
 8008658:	2b2a      	cmp	r3, #42	; 0x2a
 800865a:	d135      	bne.n	80086c8 <_svfiprintf_r+0x188>
 800865c:	9b03      	ldr	r3, [sp, #12]
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	9203      	str	r2, [sp, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	bfb8      	it	lt
 8008668:	f04f 33ff 	movlt.w	r3, #4294967295
 800866c:	3402      	adds	r4, #2
 800866e:	9305      	str	r3, [sp, #20]
 8008670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800873c <_svfiprintf_r+0x1fc>
 8008674:	7821      	ldrb	r1, [r4, #0]
 8008676:	2203      	movs	r2, #3
 8008678:	4650      	mov	r0, sl
 800867a:	f7f7 fe31 	bl	80002e0 <memchr>
 800867e:	b140      	cbz	r0, 8008692 <_svfiprintf_r+0x152>
 8008680:	2340      	movs	r3, #64	; 0x40
 8008682:	eba0 000a 	sub.w	r0, r0, sl
 8008686:	fa03 f000 	lsl.w	r0, r3, r0
 800868a:	9b04      	ldr	r3, [sp, #16]
 800868c:	4303      	orrs	r3, r0
 800868e:	3401      	adds	r4, #1
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008696:	4826      	ldr	r0, [pc, #152]	; (8008730 <_svfiprintf_r+0x1f0>)
 8008698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800869c:	2206      	movs	r2, #6
 800869e:	f7f7 fe1f 	bl	80002e0 <memchr>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d038      	beq.n	8008718 <_svfiprintf_r+0x1d8>
 80086a6:	4b23      	ldr	r3, [pc, #140]	; (8008734 <_svfiprintf_r+0x1f4>)
 80086a8:	bb1b      	cbnz	r3, 80086f2 <_svfiprintf_r+0x1b2>
 80086aa:	9b03      	ldr	r3, [sp, #12]
 80086ac:	3307      	adds	r3, #7
 80086ae:	f023 0307 	bic.w	r3, r3, #7
 80086b2:	3308      	adds	r3, #8
 80086b4:	9303      	str	r3, [sp, #12]
 80086b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b8:	4433      	add	r3, r6
 80086ba:	9309      	str	r3, [sp, #36]	; 0x24
 80086bc:	e767      	b.n	800858e <_svfiprintf_r+0x4e>
 80086be:	fb0c 3202 	mla	r2, ip, r2, r3
 80086c2:	460c      	mov	r4, r1
 80086c4:	2001      	movs	r0, #1
 80086c6:	e7a5      	b.n	8008614 <_svfiprintf_r+0xd4>
 80086c8:	2300      	movs	r3, #0
 80086ca:	3401      	adds	r4, #1
 80086cc:	9305      	str	r3, [sp, #20]
 80086ce:	4619      	mov	r1, r3
 80086d0:	f04f 0c0a 	mov.w	ip, #10
 80086d4:	4620      	mov	r0, r4
 80086d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086da:	3a30      	subs	r2, #48	; 0x30
 80086dc:	2a09      	cmp	r2, #9
 80086de:	d903      	bls.n	80086e8 <_svfiprintf_r+0x1a8>
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d0c5      	beq.n	8008670 <_svfiprintf_r+0x130>
 80086e4:	9105      	str	r1, [sp, #20]
 80086e6:	e7c3      	b.n	8008670 <_svfiprintf_r+0x130>
 80086e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ec:	4604      	mov	r4, r0
 80086ee:	2301      	movs	r3, #1
 80086f0:	e7f0      	b.n	80086d4 <_svfiprintf_r+0x194>
 80086f2:	ab03      	add	r3, sp, #12
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	462a      	mov	r2, r5
 80086f8:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <_svfiprintf_r+0x1f8>)
 80086fa:	a904      	add	r1, sp, #16
 80086fc:	4638      	mov	r0, r7
 80086fe:	f3af 8000 	nop.w
 8008702:	1c42      	adds	r2, r0, #1
 8008704:	4606      	mov	r6, r0
 8008706:	d1d6      	bne.n	80086b6 <_svfiprintf_r+0x176>
 8008708:	89ab      	ldrh	r3, [r5, #12]
 800870a:	065b      	lsls	r3, r3, #25
 800870c:	f53f af2c 	bmi.w	8008568 <_svfiprintf_r+0x28>
 8008710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008712:	b01d      	add	sp, #116	; 0x74
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	ab03      	add	r3, sp, #12
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	462a      	mov	r2, r5
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <_svfiprintf_r+0x1f8>)
 8008720:	a904      	add	r1, sp, #16
 8008722:	4638      	mov	r0, r7
 8008724:	f000 f87a 	bl	800881c <_printf_i>
 8008728:	e7eb      	b.n	8008702 <_svfiprintf_r+0x1c2>
 800872a:	bf00      	nop
 800872c:	08008d7c 	.word	0x08008d7c
 8008730:	08008d86 	.word	0x08008d86
 8008734:	00000000 	.word	0x00000000
 8008738:	08008489 	.word	0x08008489
 800873c:	08008d82 	.word	0x08008d82

08008740 <_printf_common>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4616      	mov	r6, r2
 8008746:	4699      	mov	r9, r3
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	bfb8      	it	lt
 8008754:	4613      	movlt	r3, r2
 8008756:	6033      	str	r3, [r6, #0]
 8008758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800875c:	4607      	mov	r7, r0
 800875e:	460c      	mov	r4, r1
 8008760:	b10a      	cbz	r2, 8008766 <_printf_common+0x26>
 8008762:	3301      	adds	r3, #1
 8008764:	6033      	str	r3, [r6, #0]
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	0699      	lsls	r1, r3, #26
 800876a:	bf42      	ittt	mi
 800876c:	6833      	ldrmi	r3, [r6, #0]
 800876e:	3302      	addmi	r3, #2
 8008770:	6033      	strmi	r3, [r6, #0]
 8008772:	6825      	ldr	r5, [r4, #0]
 8008774:	f015 0506 	ands.w	r5, r5, #6
 8008778:	d106      	bne.n	8008788 <_printf_common+0x48>
 800877a:	f104 0a19 	add.w	sl, r4, #25
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	6832      	ldr	r2, [r6, #0]
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	42ab      	cmp	r3, r5
 8008786:	dc26      	bgt.n	80087d6 <_printf_common+0x96>
 8008788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800878c:	1e13      	subs	r3, r2, #0
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	bf18      	it	ne
 8008792:	2301      	movne	r3, #1
 8008794:	0692      	lsls	r2, r2, #26
 8008796:	d42b      	bmi.n	80087f0 <_printf_common+0xb0>
 8008798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800879c:	4649      	mov	r1, r9
 800879e:	4638      	mov	r0, r7
 80087a0:	47c0      	blx	r8
 80087a2:	3001      	adds	r0, #1
 80087a4:	d01e      	beq.n	80087e4 <_printf_common+0xa4>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	68e5      	ldr	r5, [r4, #12]
 80087aa:	6832      	ldr	r2, [r6, #0]
 80087ac:	f003 0306 	and.w	r3, r3, #6
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	bf08      	it	eq
 80087b4:	1aad      	subeq	r5, r5, r2
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	6922      	ldr	r2, [r4, #16]
 80087ba:	bf0c      	ite	eq
 80087bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087c0:	2500      	movne	r5, #0
 80087c2:	4293      	cmp	r3, r2
 80087c4:	bfc4      	itt	gt
 80087c6:	1a9b      	subgt	r3, r3, r2
 80087c8:	18ed      	addgt	r5, r5, r3
 80087ca:	2600      	movs	r6, #0
 80087cc:	341a      	adds	r4, #26
 80087ce:	42b5      	cmp	r5, r6
 80087d0:	d11a      	bne.n	8008808 <_printf_common+0xc8>
 80087d2:	2000      	movs	r0, #0
 80087d4:	e008      	b.n	80087e8 <_printf_common+0xa8>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4649      	mov	r1, r9
 80087dc:	4638      	mov	r0, r7
 80087de:	47c0      	blx	r8
 80087e0:	3001      	adds	r0, #1
 80087e2:	d103      	bne.n	80087ec <_printf_common+0xac>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ec:	3501      	adds	r5, #1
 80087ee:	e7c6      	b.n	800877e <_printf_common+0x3e>
 80087f0:	18e1      	adds	r1, r4, r3
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	2030      	movs	r0, #48	; 0x30
 80087f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087fa:	4422      	add	r2, r4
 80087fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008804:	3302      	adds	r3, #2
 8008806:	e7c7      	b.n	8008798 <_printf_common+0x58>
 8008808:	2301      	movs	r3, #1
 800880a:	4622      	mov	r2, r4
 800880c:	4649      	mov	r1, r9
 800880e:	4638      	mov	r0, r7
 8008810:	47c0      	blx	r8
 8008812:	3001      	adds	r0, #1
 8008814:	d0e6      	beq.n	80087e4 <_printf_common+0xa4>
 8008816:	3601      	adds	r6, #1
 8008818:	e7d9      	b.n	80087ce <_printf_common+0x8e>
	...

0800881c <_printf_i>:
 800881c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	7e0f      	ldrb	r7, [r1, #24]
 8008822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008824:	2f78      	cmp	r7, #120	; 0x78
 8008826:	4691      	mov	r9, r2
 8008828:	4680      	mov	r8, r0
 800882a:	460c      	mov	r4, r1
 800882c:	469a      	mov	sl, r3
 800882e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008832:	d807      	bhi.n	8008844 <_printf_i+0x28>
 8008834:	2f62      	cmp	r7, #98	; 0x62
 8008836:	d80a      	bhi.n	800884e <_printf_i+0x32>
 8008838:	2f00      	cmp	r7, #0
 800883a:	f000 80d8 	beq.w	80089ee <_printf_i+0x1d2>
 800883e:	2f58      	cmp	r7, #88	; 0x58
 8008840:	f000 80a3 	beq.w	800898a <_printf_i+0x16e>
 8008844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800884c:	e03a      	b.n	80088c4 <_printf_i+0xa8>
 800884e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008852:	2b15      	cmp	r3, #21
 8008854:	d8f6      	bhi.n	8008844 <_printf_i+0x28>
 8008856:	a101      	add	r1, pc, #4	; (adr r1, 800885c <_printf_i+0x40>)
 8008858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800885c:	080088b5 	.word	0x080088b5
 8008860:	080088c9 	.word	0x080088c9
 8008864:	08008845 	.word	0x08008845
 8008868:	08008845 	.word	0x08008845
 800886c:	08008845 	.word	0x08008845
 8008870:	08008845 	.word	0x08008845
 8008874:	080088c9 	.word	0x080088c9
 8008878:	08008845 	.word	0x08008845
 800887c:	08008845 	.word	0x08008845
 8008880:	08008845 	.word	0x08008845
 8008884:	08008845 	.word	0x08008845
 8008888:	080089d5 	.word	0x080089d5
 800888c:	080088f9 	.word	0x080088f9
 8008890:	080089b7 	.word	0x080089b7
 8008894:	08008845 	.word	0x08008845
 8008898:	08008845 	.word	0x08008845
 800889c:	080089f7 	.word	0x080089f7
 80088a0:	08008845 	.word	0x08008845
 80088a4:	080088f9 	.word	0x080088f9
 80088a8:	08008845 	.word	0x08008845
 80088ac:	08008845 	.word	0x08008845
 80088b0:	080089bf 	.word	0x080089bf
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	1d1a      	adds	r2, r3, #4
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	602a      	str	r2, [r5, #0]
 80088bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088c4:	2301      	movs	r3, #1
 80088c6:	e0a3      	b.n	8008a10 <_printf_i+0x1f4>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	6829      	ldr	r1, [r5, #0]
 80088cc:	0606      	lsls	r6, r0, #24
 80088ce:	f101 0304 	add.w	r3, r1, #4
 80088d2:	d50a      	bpl.n	80088ea <_printf_i+0xce>
 80088d4:	680e      	ldr	r6, [r1, #0]
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	2e00      	cmp	r6, #0
 80088da:	da03      	bge.n	80088e4 <_printf_i+0xc8>
 80088dc:	232d      	movs	r3, #45	; 0x2d
 80088de:	4276      	negs	r6, r6
 80088e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e4:	485e      	ldr	r0, [pc, #376]	; (8008a60 <_printf_i+0x244>)
 80088e6:	230a      	movs	r3, #10
 80088e8:	e019      	b.n	800891e <_printf_i+0x102>
 80088ea:	680e      	ldr	r6, [r1, #0]
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088f2:	bf18      	it	ne
 80088f4:	b236      	sxthne	r6, r6
 80088f6:	e7ef      	b.n	80088d8 <_printf_i+0xbc>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	6820      	ldr	r0, [r4, #0]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	6029      	str	r1, [r5, #0]
 8008900:	0601      	lsls	r1, r0, #24
 8008902:	d501      	bpl.n	8008908 <_printf_i+0xec>
 8008904:	681e      	ldr	r6, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0xf2>
 8008908:	0646      	lsls	r6, r0, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0xe8>
 800890c:	881e      	ldrh	r6, [r3, #0]
 800890e:	4854      	ldr	r0, [pc, #336]	; (8008a60 <_printf_i+0x244>)
 8008910:	2f6f      	cmp	r7, #111	; 0x6f
 8008912:	bf0c      	ite	eq
 8008914:	2308      	moveq	r3, #8
 8008916:	230a      	movne	r3, #10
 8008918:	2100      	movs	r1, #0
 800891a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800891e:	6865      	ldr	r5, [r4, #4]
 8008920:	60a5      	str	r5, [r4, #8]
 8008922:	2d00      	cmp	r5, #0
 8008924:	bfa2      	ittt	ge
 8008926:	6821      	ldrge	r1, [r4, #0]
 8008928:	f021 0104 	bicge.w	r1, r1, #4
 800892c:	6021      	strge	r1, [r4, #0]
 800892e:	b90e      	cbnz	r6, 8008934 <_printf_i+0x118>
 8008930:	2d00      	cmp	r5, #0
 8008932:	d04d      	beq.n	80089d0 <_printf_i+0x1b4>
 8008934:	4615      	mov	r5, r2
 8008936:	fbb6 f1f3 	udiv	r1, r6, r3
 800893a:	fb03 6711 	mls	r7, r3, r1, r6
 800893e:	5dc7      	ldrb	r7, [r0, r7]
 8008940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008944:	4637      	mov	r7, r6
 8008946:	42bb      	cmp	r3, r7
 8008948:	460e      	mov	r6, r1
 800894a:	d9f4      	bls.n	8008936 <_printf_i+0x11a>
 800894c:	2b08      	cmp	r3, #8
 800894e:	d10b      	bne.n	8008968 <_printf_i+0x14c>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	07de      	lsls	r6, r3, #31
 8008954:	d508      	bpl.n	8008968 <_printf_i+0x14c>
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	6861      	ldr	r1, [r4, #4]
 800895a:	4299      	cmp	r1, r3
 800895c:	bfde      	ittt	le
 800895e:	2330      	movle	r3, #48	; 0x30
 8008960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008968:	1b52      	subs	r2, r2, r5
 800896a:	6122      	str	r2, [r4, #16]
 800896c:	f8cd a000 	str.w	sl, [sp]
 8008970:	464b      	mov	r3, r9
 8008972:	aa03      	add	r2, sp, #12
 8008974:	4621      	mov	r1, r4
 8008976:	4640      	mov	r0, r8
 8008978:	f7ff fee2 	bl	8008740 <_printf_common>
 800897c:	3001      	adds	r0, #1
 800897e:	d14c      	bne.n	8008a1a <_printf_i+0x1fe>
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	b004      	add	sp, #16
 8008986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898a:	4835      	ldr	r0, [pc, #212]	; (8008a60 <_printf_i+0x244>)
 800898c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008990:	6829      	ldr	r1, [r5, #0]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f851 6b04 	ldr.w	r6, [r1], #4
 8008998:	6029      	str	r1, [r5, #0]
 800899a:	061d      	lsls	r5, r3, #24
 800899c:	d514      	bpl.n	80089c8 <_printf_i+0x1ac>
 800899e:	07df      	lsls	r7, r3, #31
 80089a0:	bf44      	itt	mi
 80089a2:	f043 0320 	orrmi.w	r3, r3, #32
 80089a6:	6023      	strmi	r3, [r4, #0]
 80089a8:	b91e      	cbnz	r6, 80089b2 <_printf_i+0x196>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	f023 0320 	bic.w	r3, r3, #32
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2310      	movs	r3, #16
 80089b4:	e7b0      	b.n	8008918 <_printf_i+0xfc>
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	f043 0320 	orr.w	r3, r3, #32
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	2378      	movs	r3, #120	; 0x78
 80089c0:	4828      	ldr	r0, [pc, #160]	; (8008a64 <_printf_i+0x248>)
 80089c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089c6:	e7e3      	b.n	8008990 <_printf_i+0x174>
 80089c8:	0659      	lsls	r1, r3, #25
 80089ca:	bf48      	it	mi
 80089cc:	b2b6      	uxthmi	r6, r6
 80089ce:	e7e6      	b.n	800899e <_printf_i+0x182>
 80089d0:	4615      	mov	r5, r2
 80089d2:	e7bb      	b.n	800894c <_printf_i+0x130>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	6826      	ldr	r6, [r4, #0]
 80089d8:	6961      	ldr	r1, [r4, #20]
 80089da:	1d18      	adds	r0, r3, #4
 80089dc:	6028      	str	r0, [r5, #0]
 80089de:	0635      	lsls	r5, r6, #24
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	d501      	bpl.n	80089e8 <_printf_i+0x1cc>
 80089e4:	6019      	str	r1, [r3, #0]
 80089e6:	e002      	b.n	80089ee <_printf_i+0x1d2>
 80089e8:	0670      	lsls	r0, r6, #25
 80089ea:	d5fb      	bpl.n	80089e4 <_printf_i+0x1c8>
 80089ec:	8019      	strh	r1, [r3, #0]
 80089ee:	2300      	movs	r3, #0
 80089f0:	6123      	str	r3, [r4, #16]
 80089f2:	4615      	mov	r5, r2
 80089f4:	e7ba      	b.n	800896c <_printf_i+0x150>
 80089f6:	682b      	ldr	r3, [r5, #0]
 80089f8:	1d1a      	adds	r2, r3, #4
 80089fa:	602a      	str	r2, [r5, #0]
 80089fc:	681d      	ldr	r5, [r3, #0]
 80089fe:	6862      	ldr	r2, [r4, #4]
 8008a00:	2100      	movs	r1, #0
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f7 fc6c 	bl	80002e0 <memchr>
 8008a08:	b108      	cbz	r0, 8008a0e <_printf_i+0x1f2>
 8008a0a:	1b40      	subs	r0, r0, r5
 8008a0c:	6060      	str	r0, [r4, #4]
 8008a0e:	6863      	ldr	r3, [r4, #4]
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	2300      	movs	r3, #0
 8008a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a18:	e7a8      	b.n	800896c <_printf_i+0x150>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	4649      	mov	r1, r9
 8008a20:	4640      	mov	r0, r8
 8008a22:	47d0      	blx	sl
 8008a24:	3001      	adds	r0, #1
 8008a26:	d0ab      	beq.n	8008980 <_printf_i+0x164>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	079b      	lsls	r3, r3, #30
 8008a2c:	d413      	bmi.n	8008a56 <_printf_i+0x23a>
 8008a2e:	68e0      	ldr	r0, [r4, #12]
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	4298      	cmp	r0, r3
 8008a34:	bfb8      	it	lt
 8008a36:	4618      	movlt	r0, r3
 8008a38:	e7a4      	b.n	8008984 <_printf_i+0x168>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	47d0      	blx	sl
 8008a44:	3001      	adds	r0, #1
 8008a46:	d09b      	beq.n	8008980 <_printf_i+0x164>
 8008a48:	3501      	adds	r5, #1
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	9903      	ldr	r1, [sp, #12]
 8008a4e:	1a5b      	subs	r3, r3, r1
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dcf2      	bgt.n	8008a3a <_printf_i+0x21e>
 8008a54:	e7eb      	b.n	8008a2e <_printf_i+0x212>
 8008a56:	2500      	movs	r5, #0
 8008a58:	f104 0619 	add.w	r6, r4, #25
 8008a5c:	e7f5      	b.n	8008a4a <_printf_i+0x22e>
 8008a5e:	bf00      	nop
 8008a60:	08008d8d 	.word	0x08008d8d
 8008a64:	08008d9e 	.word	0x08008d9e

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <memmove>:
 8008a84:	4288      	cmp	r0, r1
 8008a86:	b510      	push	{r4, lr}
 8008a88:	eb01 0402 	add.w	r4, r1, r2
 8008a8c:	d902      	bls.n	8008a94 <memmove+0x10>
 8008a8e:	4284      	cmp	r4, r0
 8008a90:	4623      	mov	r3, r4
 8008a92:	d807      	bhi.n	8008aa4 <memmove+0x20>
 8008a94:	1e43      	subs	r3, r0, #1
 8008a96:	42a1      	cmp	r1, r4
 8008a98:	d008      	beq.n	8008aac <memmove+0x28>
 8008a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aa2:	e7f8      	b.n	8008a96 <memmove+0x12>
 8008aa4:	4402      	add	r2, r0
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	428a      	cmp	r2, r1
 8008aaa:	d100      	bne.n	8008aae <memmove+0x2a>
 8008aac:	bd10      	pop	{r4, pc}
 8008aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ab6:	e7f7      	b.n	8008aa8 <memmove+0x24>

08008ab8 <_free_r>:
 8008ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aba:	2900      	cmp	r1, #0
 8008abc:	d044      	beq.n	8008b48 <_free_r+0x90>
 8008abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac2:	9001      	str	r0, [sp, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8008aca:	bfb8      	it	lt
 8008acc:	18e4      	addlt	r4, r4, r3
 8008ace:	f000 f913 	bl	8008cf8 <__malloc_lock>
 8008ad2:	4a1e      	ldr	r2, [pc, #120]	; (8008b4c <_free_r+0x94>)
 8008ad4:	9801      	ldr	r0, [sp, #4]
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	b933      	cbnz	r3, 8008ae8 <_free_r+0x30>
 8008ada:	6063      	str	r3, [r4, #4]
 8008adc:	6014      	str	r4, [r2, #0]
 8008ade:	b003      	add	sp, #12
 8008ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ae4:	f000 b90e 	b.w	8008d04 <__malloc_unlock>
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	d908      	bls.n	8008afe <_free_r+0x46>
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	1961      	adds	r1, r4, r5
 8008af0:	428b      	cmp	r3, r1
 8008af2:	bf01      	itttt	eq
 8008af4:	6819      	ldreq	r1, [r3, #0]
 8008af6:	685b      	ldreq	r3, [r3, #4]
 8008af8:	1949      	addeq	r1, r1, r5
 8008afa:	6021      	streq	r1, [r4, #0]
 8008afc:	e7ed      	b.n	8008ada <_free_r+0x22>
 8008afe:	461a      	mov	r2, r3
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	b10b      	cbz	r3, 8008b08 <_free_r+0x50>
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	d9fa      	bls.n	8008afe <_free_r+0x46>
 8008b08:	6811      	ldr	r1, [r2, #0]
 8008b0a:	1855      	adds	r5, r2, r1
 8008b0c:	42a5      	cmp	r5, r4
 8008b0e:	d10b      	bne.n	8008b28 <_free_r+0x70>
 8008b10:	6824      	ldr	r4, [r4, #0]
 8008b12:	4421      	add	r1, r4
 8008b14:	1854      	adds	r4, r2, r1
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	6011      	str	r1, [r2, #0]
 8008b1a:	d1e0      	bne.n	8008ade <_free_r+0x26>
 8008b1c:	681c      	ldr	r4, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	6053      	str	r3, [r2, #4]
 8008b22:	4421      	add	r1, r4
 8008b24:	6011      	str	r1, [r2, #0]
 8008b26:	e7da      	b.n	8008ade <_free_r+0x26>
 8008b28:	d902      	bls.n	8008b30 <_free_r+0x78>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	e7d6      	b.n	8008ade <_free_r+0x26>
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	1961      	adds	r1, r4, r5
 8008b34:	428b      	cmp	r3, r1
 8008b36:	bf04      	itt	eq
 8008b38:	6819      	ldreq	r1, [r3, #0]
 8008b3a:	685b      	ldreq	r3, [r3, #4]
 8008b3c:	6063      	str	r3, [r4, #4]
 8008b3e:	bf04      	itt	eq
 8008b40:	1949      	addeq	r1, r1, r5
 8008b42:	6021      	streq	r1, [r4, #0]
 8008b44:	6054      	str	r4, [r2, #4]
 8008b46:	e7ca      	b.n	8008ade <_free_r+0x26>
 8008b48:	b003      	add	sp, #12
 8008b4a:	bd30      	pop	{r4, r5, pc}
 8008b4c:	24000300 	.word	0x24000300

08008b50 <sbrk_aligned>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	4e0e      	ldr	r6, [pc, #56]	; (8008b8c <sbrk_aligned+0x3c>)
 8008b54:	460c      	mov	r4, r1
 8008b56:	6831      	ldr	r1, [r6, #0]
 8008b58:	4605      	mov	r5, r0
 8008b5a:	b911      	cbnz	r1, 8008b62 <sbrk_aligned+0x12>
 8008b5c:	f000 f8bc 	bl	8008cd8 <_sbrk_r>
 8008b60:	6030      	str	r0, [r6, #0]
 8008b62:	4621      	mov	r1, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 f8b7 	bl	8008cd8 <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d00a      	beq.n	8008b84 <sbrk_aligned+0x34>
 8008b6e:	1cc4      	adds	r4, r0, #3
 8008b70:	f024 0403 	bic.w	r4, r4, #3
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d007      	beq.n	8008b88 <sbrk_aligned+0x38>
 8008b78:	1a21      	subs	r1, r4, r0
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f8ac 	bl	8008cd8 <_sbrk_r>
 8008b80:	3001      	adds	r0, #1
 8008b82:	d101      	bne.n	8008b88 <sbrk_aligned+0x38>
 8008b84:	f04f 34ff 	mov.w	r4, #4294967295
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bd70      	pop	{r4, r5, r6, pc}
 8008b8c:	24000304 	.word	0x24000304

08008b90 <_malloc_r>:
 8008b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b94:	1ccd      	adds	r5, r1, #3
 8008b96:	f025 0503 	bic.w	r5, r5, #3
 8008b9a:	3508      	adds	r5, #8
 8008b9c:	2d0c      	cmp	r5, #12
 8008b9e:	bf38      	it	cc
 8008ba0:	250c      	movcc	r5, #12
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	db01      	blt.n	8008bac <_malloc_r+0x1c>
 8008ba8:	42a9      	cmp	r1, r5
 8008baa:	d905      	bls.n	8008bb8 <_malloc_r+0x28>
 8008bac:	230c      	movs	r3, #12
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb8:	4e2e      	ldr	r6, [pc, #184]	; (8008c74 <_malloc_r+0xe4>)
 8008bba:	f000 f89d 	bl	8008cf8 <__malloc_lock>
 8008bbe:	6833      	ldr	r3, [r6, #0]
 8008bc0:	461c      	mov	r4, r3
 8008bc2:	bb34      	cbnz	r4, 8008c12 <_malloc_r+0x82>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	f7ff ffc2 	bl	8008b50 <sbrk_aligned>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	4604      	mov	r4, r0
 8008bd0:	d14d      	bne.n	8008c6e <_malloc_r+0xde>
 8008bd2:	6834      	ldr	r4, [r6, #0]
 8008bd4:	4626      	mov	r6, r4
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d140      	bne.n	8008c5c <_malloc_r+0xcc>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4638      	mov	r0, r7
 8008be0:	eb04 0803 	add.w	r8, r4, r3
 8008be4:	f000 f878 	bl	8008cd8 <_sbrk_r>
 8008be8:	4580      	cmp	r8, r0
 8008bea:	d13a      	bne.n	8008c62 <_malloc_r+0xd2>
 8008bec:	6821      	ldr	r1, [r4, #0]
 8008bee:	3503      	adds	r5, #3
 8008bf0:	1a6d      	subs	r5, r5, r1
 8008bf2:	f025 0503 	bic.w	r5, r5, #3
 8008bf6:	3508      	adds	r5, #8
 8008bf8:	2d0c      	cmp	r5, #12
 8008bfa:	bf38      	it	cc
 8008bfc:	250c      	movcc	r5, #12
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff ffa5 	bl	8008b50 <sbrk_aligned>
 8008c06:	3001      	adds	r0, #1
 8008c08:	d02b      	beq.n	8008c62 <_malloc_r+0xd2>
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	442b      	add	r3, r5
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	e00e      	b.n	8008c30 <_malloc_r+0xa0>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	1b52      	subs	r2, r2, r5
 8008c16:	d41e      	bmi.n	8008c56 <_malloc_r+0xc6>
 8008c18:	2a0b      	cmp	r2, #11
 8008c1a:	d916      	bls.n	8008c4a <_malloc_r+0xba>
 8008c1c:	1961      	adds	r1, r4, r5
 8008c1e:	42a3      	cmp	r3, r4
 8008c20:	6025      	str	r5, [r4, #0]
 8008c22:	bf18      	it	ne
 8008c24:	6059      	strne	r1, [r3, #4]
 8008c26:	6863      	ldr	r3, [r4, #4]
 8008c28:	bf08      	it	eq
 8008c2a:	6031      	streq	r1, [r6, #0]
 8008c2c:	5162      	str	r2, [r4, r5]
 8008c2e:	604b      	str	r3, [r1, #4]
 8008c30:	4638      	mov	r0, r7
 8008c32:	f104 060b 	add.w	r6, r4, #11
 8008c36:	f000 f865 	bl	8008d04 <__malloc_unlock>
 8008c3a:	f026 0607 	bic.w	r6, r6, #7
 8008c3e:	1d23      	adds	r3, r4, #4
 8008c40:	1af2      	subs	r2, r6, r3
 8008c42:	d0b6      	beq.n	8008bb2 <_malloc_r+0x22>
 8008c44:	1b9b      	subs	r3, r3, r6
 8008c46:	50a3      	str	r3, [r4, r2]
 8008c48:	e7b3      	b.n	8008bb2 <_malloc_r+0x22>
 8008c4a:	6862      	ldr	r2, [r4, #4]
 8008c4c:	42a3      	cmp	r3, r4
 8008c4e:	bf0c      	ite	eq
 8008c50:	6032      	streq	r2, [r6, #0]
 8008c52:	605a      	strne	r2, [r3, #4]
 8008c54:	e7ec      	b.n	8008c30 <_malloc_r+0xa0>
 8008c56:	4623      	mov	r3, r4
 8008c58:	6864      	ldr	r4, [r4, #4]
 8008c5a:	e7b2      	b.n	8008bc2 <_malloc_r+0x32>
 8008c5c:	4634      	mov	r4, r6
 8008c5e:	6876      	ldr	r6, [r6, #4]
 8008c60:	e7b9      	b.n	8008bd6 <_malloc_r+0x46>
 8008c62:	230c      	movs	r3, #12
 8008c64:	603b      	str	r3, [r7, #0]
 8008c66:	4638      	mov	r0, r7
 8008c68:	f000 f84c 	bl	8008d04 <__malloc_unlock>
 8008c6c:	e7a1      	b.n	8008bb2 <_malloc_r+0x22>
 8008c6e:	6025      	str	r5, [r4, #0]
 8008c70:	e7de      	b.n	8008c30 <_malloc_r+0xa0>
 8008c72:	bf00      	nop
 8008c74:	24000300 	.word	0x24000300

08008c78 <_realloc_r>:
 8008c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	4614      	mov	r4, r2
 8008c80:	460e      	mov	r6, r1
 8008c82:	b921      	cbnz	r1, 8008c8e <_realloc_r+0x16>
 8008c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c88:	4611      	mov	r1, r2
 8008c8a:	f7ff bf81 	b.w	8008b90 <_malloc_r>
 8008c8e:	b92a      	cbnz	r2, 8008c9c <_realloc_r+0x24>
 8008c90:	f7ff ff12 	bl	8008ab8 <_free_r>
 8008c94:	4625      	mov	r5, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c9c:	f000 f838 	bl	8008d10 <_malloc_usable_size_r>
 8008ca0:	4284      	cmp	r4, r0
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	d802      	bhi.n	8008cac <_realloc_r+0x34>
 8008ca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008caa:	d812      	bhi.n	8008cd2 <_realloc_r+0x5a>
 8008cac:	4621      	mov	r1, r4
 8008cae:	4640      	mov	r0, r8
 8008cb0:	f7ff ff6e 	bl	8008b90 <_malloc_r>
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d0ed      	beq.n	8008c96 <_realloc_r+0x1e>
 8008cba:	42bc      	cmp	r4, r7
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	bf28      	it	cs
 8008cc2:	463a      	movcs	r2, r7
 8008cc4:	f7ff fed0 	bl	8008a68 <memcpy>
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4640      	mov	r0, r8
 8008ccc:	f7ff fef4 	bl	8008ab8 <_free_r>
 8008cd0:	e7e1      	b.n	8008c96 <_realloc_r+0x1e>
 8008cd2:	4635      	mov	r5, r6
 8008cd4:	e7df      	b.n	8008c96 <_realloc_r+0x1e>
	...

08008cd8 <_sbrk_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d06      	ldr	r5, [pc, #24]	; (8008cf4 <_sbrk_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	f7f8 fe3a 	bl	800195c <_sbrk>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_sbrk_r+0x1a>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_sbrk_r+0x1a>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	24000308 	.word	0x24000308

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	; (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f000 b811 	b.w	8008d20 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	2400030c 	.word	0x2400030c

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f000 b80c 	b.w	8008d22 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	2400030c 	.word	0x2400030c

08008d10 <_malloc_usable_size_r>:
 8008d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d14:	1f18      	subs	r0, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfbc      	itt	lt
 8008d1a:	580b      	ldrlt	r3, [r1, r0]
 8008d1c:	18c0      	addlt	r0, r0, r3
 8008d1e:	4770      	bx	lr

08008d20 <__retarget_lock_acquire_recursive>:
 8008d20:	4770      	bx	lr

08008d22 <__retarget_lock_release_recursive>:
 8008d22:	4770      	bx	lr

08008d24 <_init>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr

08008d30 <_fini>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr
