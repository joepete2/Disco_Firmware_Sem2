
JAN_19_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  081099cc  081099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109a50  08109a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109a58  08109a58  00019a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08109a5c  08109a5c  00019a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  08109a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000010  08109a70  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000070  08109ad0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c20  100000d0  08109b30  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10000cf0  08109b30  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260b3  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a9  00000000  00000000  000461b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  00049a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a60  00000000  00000000  0004b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e729  00000000  00000000  0004d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021457  00000000  00000000  0008b789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198109  00000000  00000000  000acbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00244ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007960  00000000  00000000  00244d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081099b4 	.word	0x081099b4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	081099b4 	.word	0x081099b4

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b974 	b.w	81005d8 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468e      	mov	lr, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	d14d      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100316:	428a      	cmp	r2, r1
 8100318:	4694      	mov	ip, r2
 810031a:	d969      	bls.n	81003f0 <__udivmoddi4+0xe8>
 810031c:	fab2 f282 	clz	r2, r2
 8100320:	b152      	cbz	r2, 8100338 <__udivmoddi4+0x30>
 8100322:	fa01 f302 	lsl.w	r3, r1, r2
 8100326:	f1c2 0120 	rsb	r1, r2, #32
 810032a:	fa20 f101 	lsr.w	r1, r0, r1
 810032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100332:	ea41 0e03 	orr.w	lr, r1, r3
 8100336:	4094      	lsls	r4, r2
 8100338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 810033c:	0c21      	lsrs	r1, r4, #16
 810033e:	fbbe f6f8 	udiv	r6, lr, r8
 8100342:	fa1f f78c 	uxth.w	r7, ip
 8100346:	fb08 e316 	mls	r3, r8, r6, lr
 810034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810034e:	fb06 f107 	mul.w	r1, r6, r7
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f106 30ff 	add.w	r0, r6, #4294967295
 810035e:	f080 811f 	bcs.w	81005a0 <__udivmoddi4+0x298>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 811c 	bls.w	81005a0 <__udivmoddi4+0x298>
 8100368:	3e02      	subs	r6, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a5b      	subs	r3, r3, r1
 810036e:	b2a4      	uxth	r4, r4
 8100370:	fbb3 f0f8 	udiv	r0, r3, r8
 8100374:	fb08 3310 	mls	r3, r8, r0, r3
 8100378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810037c:	fb00 f707 	mul.w	r7, r0, r7
 8100380:	42a7      	cmp	r7, r4
 8100382:	d90a      	bls.n	810039a <__udivmoddi4+0x92>
 8100384:	eb1c 0404 	adds.w	r4, ip, r4
 8100388:	f100 33ff 	add.w	r3, r0, #4294967295
 810038c:	f080 810a 	bcs.w	81005a4 <__udivmoddi4+0x29c>
 8100390:	42a7      	cmp	r7, r4
 8100392:	f240 8107 	bls.w	81005a4 <__udivmoddi4+0x29c>
 8100396:	4464      	add	r4, ip
 8100398:	3802      	subs	r0, #2
 810039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810039e:	1be4      	subs	r4, r4, r7
 81003a0:	2600      	movs	r6, #0
 81003a2:	b11d      	cbz	r5, 81003ac <__udivmoddi4+0xa4>
 81003a4:	40d4      	lsrs	r4, r2
 81003a6:	2300      	movs	r3, #0
 81003a8:	e9c5 4300 	strd	r4, r3, [r5]
 81003ac:	4631      	mov	r1, r6
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d909      	bls.n	81003ca <__udivmoddi4+0xc2>
 81003b6:	2d00      	cmp	r5, #0
 81003b8:	f000 80ef 	beq.w	810059a <__udivmoddi4+0x292>
 81003bc:	2600      	movs	r6, #0
 81003be:	e9c5 0100 	strd	r0, r1, [r5]
 81003c2:	4630      	mov	r0, r6
 81003c4:	4631      	mov	r1, r6
 81003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ca:	fab3 f683 	clz	r6, r3
 81003ce:	2e00      	cmp	r6, #0
 81003d0:	d14a      	bne.n	8100468 <__udivmoddi4+0x160>
 81003d2:	428b      	cmp	r3, r1
 81003d4:	d302      	bcc.n	81003dc <__udivmoddi4+0xd4>
 81003d6:	4282      	cmp	r2, r0
 81003d8:	f200 80f9 	bhi.w	81005ce <__udivmoddi4+0x2c6>
 81003dc:	1a84      	subs	r4, r0, r2
 81003de:	eb61 0303 	sbc.w	r3, r1, r3
 81003e2:	2001      	movs	r0, #1
 81003e4:	469e      	mov	lr, r3
 81003e6:	2d00      	cmp	r5, #0
 81003e8:	d0e0      	beq.n	81003ac <__udivmoddi4+0xa4>
 81003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 81003ee:	e7dd      	b.n	81003ac <__udivmoddi4+0xa4>
 81003f0:	b902      	cbnz	r2, 81003f4 <__udivmoddi4+0xec>
 81003f2:	deff      	udf	#255	; 0xff
 81003f4:	fab2 f282 	clz	r2, r2
 81003f8:	2a00      	cmp	r2, #0
 81003fa:	f040 8092 	bne.w	8100522 <__udivmoddi4+0x21a>
 81003fe:	eba1 010c 	sub.w	r1, r1, ip
 8100402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100406:	fa1f fe8c 	uxth.w	lr, ip
 810040a:	2601      	movs	r6, #1
 810040c:	0c20      	lsrs	r0, r4, #16
 810040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100412:	fb07 1113 	mls	r1, r7, r3, r1
 8100416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810041a:	fb0e f003 	mul.w	r0, lr, r3
 810041e:	4288      	cmp	r0, r1
 8100420:	d908      	bls.n	8100434 <__udivmoddi4+0x12c>
 8100422:	eb1c 0101 	adds.w	r1, ip, r1
 8100426:	f103 38ff 	add.w	r8, r3, #4294967295
 810042a:	d202      	bcs.n	8100432 <__udivmoddi4+0x12a>
 810042c:	4288      	cmp	r0, r1
 810042e:	f200 80cb 	bhi.w	81005c8 <__udivmoddi4+0x2c0>
 8100432:	4643      	mov	r3, r8
 8100434:	1a09      	subs	r1, r1, r0
 8100436:	b2a4      	uxth	r4, r4
 8100438:	fbb1 f0f7 	udiv	r0, r1, r7
 810043c:	fb07 1110 	mls	r1, r7, r0, r1
 8100440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100444:	fb0e fe00 	mul.w	lr, lr, r0
 8100448:	45a6      	cmp	lr, r4
 810044a:	d908      	bls.n	810045e <__udivmoddi4+0x156>
 810044c:	eb1c 0404 	adds.w	r4, ip, r4
 8100450:	f100 31ff 	add.w	r1, r0, #4294967295
 8100454:	d202      	bcs.n	810045c <__udivmoddi4+0x154>
 8100456:	45a6      	cmp	lr, r4
 8100458:	f200 80bb 	bhi.w	81005d2 <__udivmoddi4+0x2ca>
 810045c:	4608      	mov	r0, r1
 810045e:	eba4 040e 	sub.w	r4, r4, lr
 8100462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100466:	e79c      	b.n	81003a2 <__udivmoddi4+0x9a>
 8100468:	f1c6 0720 	rsb	r7, r6, #32
 810046c:	40b3      	lsls	r3, r6
 810046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100472:	ea4c 0c03 	orr.w	ip, ip, r3
 8100476:	fa20 f407 	lsr.w	r4, r0, r7
 810047a:	fa01 f306 	lsl.w	r3, r1, r6
 810047e:	431c      	orrs	r4, r3
 8100480:	40f9      	lsrs	r1, r7
 8100482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100486:	fa00 f306 	lsl.w	r3, r0, r6
 810048a:	fbb1 f8f9 	udiv	r8, r1, r9
 810048e:	0c20      	lsrs	r0, r4, #16
 8100490:	fa1f fe8c 	uxth.w	lr, ip
 8100494:	fb09 1118 	mls	r1, r9, r8, r1
 8100498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810049c:	fb08 f00e 	mul.w	r0, r8, lr
 81004a0:	4288      	cmp	r0, r1
 81004a2:	fa02 f206 	lsl.w	r2, r2, r6
 81004a6:	d90b      	bls.n	81004c0 <__udivmoddi4+0x1b8>
 81004a8:	eb1c 0101 	adds.w	r1, ip, r1
 81004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 81004b0:	f080 8088 	bcs.w	81005c4 <__udivmoddi4+0x2bc>
 81004b4:	4288      	cmp	r0, r1
 81004b6:	f240 8085 	bls.w	81005c4 <__udivmoddi4+0x2bc>
 81004ba:	f1a8 0802 	sub.w	r8, r8, #2
 81004be:	4461      	add	r1, ip
 81004c0:	1a09      	subs	r1, r1, r0
 81004c2:	b2a4      	uxth	r4, r4
 81004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 81004c8:	fb09 1110 	mls	r1, r9, r0, r1
 81004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 81004d4:	458e      	cmp	lr, r1
 81004d6:	d908      	bls.n	81004ea <__udivmoddi4+0x1e2>
 81004d8:	eb1c 0101 	adds.w	r1, ip, r1
 81004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 81004e0:	d26c      	bcs.n	81005bc <__udivmoddi4+0x2b4>
 81004e2:	458e      	cmp	lr, r1
 81004e4:	d96a      	bls.n	81005bc <__udivmoddi4+0x2b4>
 81004e6:	3802      	subs	r0, #2
 81004e8:	4461      	add	r1, ip
 81004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004ee:	fba0 9402 	umull	r9, r4, r0, r2
 81004f2:	eba1 010e 	sub.w	r1, r1, lr
 81004f6:	42a1      	cmp	r1, r4
 81004f8:	46c8      	mov	r8, r9
 81004fa:	46a6      	mov	lr, r4
 81004fc:	d356      	bcc.n	81005ac <__udivmoddi4+0x2a4>
 81004fe:	d053      	beq.n	81005a8 <__udivmoddi4+0x2a0>
 8100500:	b15d      	cbz	r5, 810051a <__udivmoddi4+0x212>
 8100502:	ebb3 0208 	subs.w	r2, r3, r8
 8100506:	eb61 010e 	sbc.w	r1, r1, lr
 810050a:	fa01 f707 	lsl.w	r7, r1, r7
 810050e:	fa22 f306 	lsr.w	r3, r2, r6
 8100512:	40f1      	lsrs	r1, r6
 8100514:	431f      	orrs	r7, r3
 8100516:	e9c5 7100 	strd	r7, r1, [r5]
 810051a:	2600      	movs	r6, #0
 810051c:	4631      	mov	r1, r6
 810051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100522:	f1c2 0320 	rsb	r3, r2, #32
 8100526:	40d8      	lsrs	r0, r3
 8100528:	fa0c fc02 	lsl.w	ip, ip, r2
 810052c:	fa21 f303 	lsr.w	r3, r1, r3
 8100530:	4091      	lsls	r1, r2
 8100532:	4301      	orrs	r1, r0
 8100534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100540:	fb07 3610 	mls	r6, r7, r0, r3
 8100544:	0c0b      	lsrs	r3, r1, #16
 8100546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810054a:	fb00 f60e 	mul.w	r6, r0, lr
 810054e:	429e      	cmp	r6, r3
 8100550:	fa04 f402 	lsl.w	r4, r4, r2
 8100554:	d908      	bls.n	8100568 <__udivmoddi4+0x260>
 8100556:	eb1c 0303 	adds.w	r3, ip, r3
 810055a:	f100 38ff 	add.w	r8, r0, #4294967295
 810055e:	d22f      	bcs.n	81005c0 <__udivmoddi4+0x2b8>
 8100560:	429e      	cmp	r6, r3
 8100562:	d92d      	bls.n	81005c0 <__udivmoddi4+0x2b8>
 8100564:	3802      	subs	r0, #2
 8100566:	4463      	add	r3, ip
 8100568:	1b9b      	subs	r3, r3, r6
 810056a:	b289      	uxth	r1, r1
 810056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100570:	fb07 3316 	mls	r3, r7, r6, r3
 8100574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100578:	fb06 f30e 	mul.w	r3, r6, lr
 810057c:	428b      	cmp	r3, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x28a>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f106 38ff 	add.w	r8, r6, #4294967295
 8100588:	d216      	bcs.n	81005b8 <__udivmoddi4+0x2b0>
 810058a:	428b      	cmp	r3, r1
 810058c:	d914      	bls.n	81005b8 <__udivmoddi4+0x2b0>
 810058e:	3e02      	subs	r6, #2
 8100590:	4461      	add	r1, ip
 8100592:	1ac9      	subs	r1, r1, r3
 8100594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100598:	e738      	b.n	810040c <__udivmoddi4+0x104>
 810059a:	462e      	mov	r6, r5
 810059c:	4628      	mov	r0, r5
 810059e:	e705      	b.n	81003ac <__udivmoddi4+0xa4>
 81005a0:	4606      	mov	r6, r0
 81005a2:	e6e3      	b.n	810036c <__udivmoddi4+0x64>
 81005a4:	4618      	mov	r0, r3
 81005a6:	e6f8      	b.n	810039a <__udivmoddi4+0x92>
 81005a8:	454b      	cmp	r3, r9
 81005aa:	d2a9      	bcs.n	8100500 <__udivmoddi4+0x1f8>
 81005ac:	ebb9 0802 	subs.w	r8, r9, r2
 81005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005b4:	3801      	subs	r0, #1
 81005b6:	e7a3      	b.n	8100500 <__udivmoddi4+0x1f8>
 81005b8:	4646      	mov	r6, r8
 81005ba:	e7ea      	b.n	8100592 <__udivmoddi4+0x28a>
 81005bc:	4620      	mov	r0, r4
 81005be:	e794      	b.n	81004ea <__udivmoddi4+0x1e2>
 81005c0:	4640      	mov	r0, r8
 81005c2:	e7d1      	b.n	8100568 <__udivmoddi4+0x260>
 81005c4:	46d0      	mov	r8, sl
 81005c6:	e77b      	b.n	81004c0 <__udivmoddi4+0x1b8>
 81005c8:	3b02      	subs	r3, #2
 81005ca:	4461      	add	r1, ip
 81005cc:	e732      	b.n	8100434 <__udivmoddi4+0x12c>
 81005ce:	4630      	mov	r0, r6
 81005d0:	e709      	b.n	81003e6 <__udivmoddi4+0xde>
 81005d2:	4464      	add	r4, ip
 81005d4:	3802      	subs	r0, #2
 81005d6:	e742      	b.n	810045e <__udivmoddi4+0x156>

081005d8 <__aeabi_idiv0>:
 81005d8:	4770      	bx	lr
 81005da:	bf00      	nop

081005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005dc:	b580      	push	{r7, lr}
 81005de:	b082      	sub	sp, #8
 81005e0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81005e2:	4b24      	ldr	r3, [pc, #144]	; (8100674 <main+0x98>)
 81005e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005e8:	4a22      	ldr	r2, [pc, #136]	; (8100674 <main+0x98>)
 81005ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81005ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005f2:	4b20      	ldr	r3, [pc, #128]	; (8100674 <main+0x98>)
 81005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81005fc:	607b      	str	r3, [r7, #4]
 81005fe:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100600:	2001      	movs	r0, #1
 8100602:	f002 fd65 	bl	81030d0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100606:	f003 fe61 	bl	81042cc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810060a:	2201      	movs	r2, #1
 810060c:	2102      	movs	r1, #2
 810060e:	2000      	movs	r0, #0
 8100610:	f003 fde2 	bl	81041d8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100614:	4b18      	ldr	r3, [pc, #96]	; (8100678 <main+0x9c>)
 8100616:	681b      	ldr	r3, [r3, #0]
 8100618:	091b      	lsrs	r3, r3, #4
 810061a:	f003 030f 	and.w	r3, r3, #15
 810061e:	2b07      	cmp	r3, #7
 8100620:	d108      	bne.n	8100634 <main+0x58>
 8100622:	4b16      	ldr	r3, [pc, #88]	; (810067c <main+0xa0>)
 8100624:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100628:	4a14      	ldr	r2, [pc, #80]	; (810067c <main+0xa0>)
 810062a:	f043 0301 	orr.w	r3, r3, #1
 810062e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100632:	e007      	b.n	8100644 <main+0x68>
 8100634:	4b11      	ldr	r3, [pc, #68]	; (810067c <main+0xa0>)
 8100636:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810063a:	4a10      	ldr	r2, [pc, #64]	; (810067c <main+0xa0>)
 810063c:	f043 0301 	orr.w	r3, r3, #1
 8100640:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100644:	f001 fa12 	bl	8101a6c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100648:	f000 fb08 	bl	8100c5c <MX_GPIO_Init>
  MX_ETH_Init();
 810064c:	f000 f818 	bl	8100680 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8100650:	f000 f862 	bl	8100718 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8100654:	f000 f8c4 	bl	81007e0 <MX_FDCAN2_Init>
  MX_FMC_Init();
 8100658:	f000 fab2 	bl	8100bc0 <MX_FMC_Init>
  MX_QUADSPI_Init();
 810065c:	f000 f924 	bl	81008a8 <MX_QUADSPI_Init>
  MX_SAI2_Init();
 8100660:	f000 f94e 	bl	8100900 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8100664:	f000 fa0a 	bl	8100a7c <MX_SDMMC1_MMC_Init>
  MX_USART3_UART_Init();
 8100668:	f000 fa2c 	bl	8100ac4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 810066c:	f000 fa76 	bl	8100b5c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100670:	e7fe      	b.n	8100670 <main+0x94>
 8100672:	bf00      	nop
 8100674:	58024400 	.word	0x58024400
 8100678:	e000ed00 	.word	0xe000ed00
 810067c:	58026400 	.word	0x58026400

08100680 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100680:	b580      	push	{r7, lr}
 8100682:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100684:	4b1e      	ldr	r3, [pc, #120]	; (8100700 <MX_ETH_Init+0x80>)
 8100686:	4a1f      	ldr	r2, [pc, #124]	; (8100704 <MX_ETH_Init+0x84>)
 8100688:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 810068a:	4b1f      	ldr	r3, [pc, #124]	; (8100708 <MX_ETH_Init+0x88>)
 810068c:	2200      	movs	r2, #0
 810068e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100690:	4b1d      	ldr	r3, [pc, #116]	; (8100708 <MX_ETH_Init+0x88>)
 8100692:	2280      	movs	r2, #128	; 0x80
 8100694:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100696:	4b1c      	ldr	r3, [pc, #112]	; (8100708 <MX_ETH_Init+0x88>)
 8100698:	22e1      	movs	r2, #225	; 0xe1
 810069a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 810069c:	4b1a      	ldr	r3, [pc, #104]	; (8100708 <MX_ETH_Init+0x88>)
 810069e:	2200      	movs	r2, #0
 81006a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 81006a2:	4b19      	ldr	r3, [pc, #100]	; (8100708 <MX_ETH_Init+0x88>)
 81006a4:	2200      	movs	r2, #0
 81006a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 81006a8:	4b17      	ldr	r3, [pc, #92]	; (8100708 <MX_ETH_Init+0x88>)
 81006aa:	2200      	movs	r2, #0
 81006ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 81006ae:	4b14      	ldr	r3, [pc, #80]	; (8100700 <MX_ETH_Init+0x80>)
 81006b0:	4a15      	ldr	r2, [pc, #84]	; (8100708 <MX_ETH_Init+0x88>)
 81006b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 81006b4:	4b12      	ldr	r3, [pc, #72]	; (8100700 <MX_ETH_Init+0x80>)
 81006b6:	2200      	movs	r2, #0
 81006b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81006ba:	4b11      	ldr	r3, [pc, #68]	; (8100700 <MX_ETH_Init+0x80>)
 81006bc:	4a13      	ldr	r2, [pc, #76]	; (810070c <MX_ETH_Init+0x8c>)
 81006be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81006c0:	4b0f      	ldr	r3, [pc, #60]	; (8100700 <MX_ETH_Init+0x80>)
 81006c2:	4a13      	ldr	r2, [pc, #76]	; (8100710 <MX_ETH_Init+0x90>)
 81006c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 81006c6:	4b0e      	ldr	r3, [pc, #56]	; (8100700 <MX_ETH_Init+0x80>)
 81006c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81006cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 81006ce:	480c      	ldr	r0, [pc, #48]	; (8100700 <MX_ETH_Init+0x80>)
 81006d0:	f001 fbbc 	bl	8101e4c <HAL_ETH_Init>
 81006d4:	4603      	mov	r3, r0
 81006d6:	2b00      	cmp	r3, #0
 81006d8:	d001      	beq.n	81006de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 81006da:	f000 fb69 	bl	8100db0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81006de:	2238      	movs	r2, #56	; 0x38
 81006e0:	2100      	movs	r1, #0
 81006e2:	480c      	ldr	r0, [pc, #48]	; (8100714 <MX_ETH_Init+0x94>)
 81006e4:	f009 f95e 	bl	81099a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81006e8:	4b0a      	ldr	r3, [pc, #40]	; (8100714 <MX_ETH_Init+0x94>)
 81006ea:	2221      	movs	r2, #33	; 0x21
 81006ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81006ee:	4b09      	ldr	r3, [pc, #36]	; (8100714 <MX_ETH_Init+0x94>)
 81006f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81006f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81006f6:	4b07      	ldr	r3, [pc, #28]	; (8100714 <MX_ETH_Init+0x94>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 81006fc:	bf00      	nop
 81006fe:	bd80      	pop	{r7, pc}
 8100700:	10000124 	.word	0x10000124
 8100704:	40028000 	.word	0x40028000
 8100708:	10000cd8 	.word	0x10000cd8
 810070c:	10000070 	.word	0x10000070
 8100710:	10000010 	.word	0x10000010
 8100714:	100000ec 	.word	0x100000ec

08100718 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8100718:	b580      	push	{r7, lr}
 810071a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 810071c:	4b2e      	ldr	r3, [pc, #184]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810071e:	4a2f      	ldr	r2, [pc, #188]	; (81007dc <MX_FDCAN1_Init+0xc4>)
 8100720:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100722:	4b2d      	ldr	r3, [pc, #180]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100724:	2200      	movs	r2, #0
 8100726:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100728:	4b2b      	ldr	r3, [pc, #172]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810072a:	2200      	movs	r2, #0
 810072c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 810072e:	4b2a      	ldr	r3, [pc, #168]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100730:	2200      	movs	r2, #0
 8100732:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100734:	4b28      	ldr	r3, [pc, #160]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100736:	2200      	movs	r2, #0
 8100738:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 810073a:	4b27      	ldr	r3, [pc, #156]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810073c:	2200      	movs	r2, #0
 810073e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8100740:	4b25      	ldr	r3, [pc, #148]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100742:	2210      	movs	r2, #16
 8100744:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100746:	4b24      	ldr	r3, [pc, #144]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100748:	2201      	movs	r2, #1
 810074a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 810074c:	4b22      	ldr	r3, [pc, #136]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810074e:	2202      	movs	r2, #2
 8100750:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8100752:	4b21      	ldr	r3, [pc, #132]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100754:	2202      	movs	r2, #2
 8100756:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100758:	4b1f      	ldr	r3, [pc, #124]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810075a:	2201      	movs	r2, #1
 810075c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 810075e:	4b1e      	ldr	r3, [pc, #120]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100760:	2201      	movs	r2, #1
 8100762:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100764:	4b1c      	ldr	r3, [pc, #112]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100766:	2201      	movs	r2, #1
 8100768:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 810076a:	4b1b      	ldr	r3, [pc, #108]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810076c:	2201      	movs	r2, #1
 810076e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100770:	4b19      	ldr	r3, [pc, #100]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100772:	2200      	movs	r2, #0
 8100774:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100776:	4b18      	ldr	r3, [pc, #96]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100778:	2200      	movs	r2, #0
 810077a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 810077c:	4b16      	ldr	r3, [pc, #88]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810077e:	2200      	movs	r2, #0
 8100780:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8100782:	4b15      	ldr	r3, [pc, #84]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100784:	2200      	movs	r2, #0
 8100786:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100788:	4b13      	ldr	r3, [pc, #76]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810078a:	2204      	movs	r2, #4
 810078c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 810078e:	4b12      	ldr	r3, [pc, #72]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100790:	2200      	movs	r2, #0
 8100792:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100794:	4b10      	ldr	r3, [pc, #64]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 8100796:	2204      	movs	r2, #4
 8100798:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 810079a:	4b0f      	ldr	r3, [pc, #60]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 810079c:	2200      	movs	r2, #0
 810079e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 81007a0:	4b0d      	ldr	r3, [pc, #52]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007a2:	2204      	movs	r2, #4
 81007a4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 81007a6:	4b0c      	ldr	r3, [pc, #48]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 81007ac:	4b0a      	ldr	r3, [pc, #40]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 81007b2:	4b09      	ldr	r3, [pc, #36]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007b4:	2200      	movs	r2, #0
 81007b6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 81007b8:	4b07      	ldr	r3, [pc, #28]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007ba:	2200      	movs	r2, #0
 81007bc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81007be:	4b06      	ldr	r3, [pc, #24]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007c0:	2204      	movs	r2, #4
 81007c2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 81007c4:	4804      	ldr	r0, [pc, #16]	; (81007d8 <MX_FDCAN1_Init+0xc0>)
 81007c6:	f001 ff65 	bl	8102694 <HAL_FDCAN_Init>
 81007ca:	4603      	mov	r3, r0
 81007cc:	2b00      	cmp	r3, #0
 81007ce:	d001      	beq.n	81007d4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 81007d0:	f000 faee 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 81007d4:	bf00      	nop
 81007d6:	bd80      	pop	{r7, pc}
 81007d8:	100001d4 	.word	0x100001d4
 81007dc:	4000a000 	.word	0x4000a000

081007e0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 81007e0:	b580      	push	{r7, lr}
 81007e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 81007e4:	4b2e      	ldr	r3, [pc, #184]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 81007e6:	4a2f      	ldr	r2, [pc, #188]	; (81008a4 <MX_FDCAN2_Init+0xc4>)
 81007e8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81007ea:	4b2d      	ldr	r3, [pc, #180]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 81007ec:	2200      	movs	r2, #0
 81007ee:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 81007f0:	4b2b      	ldr	r3, [pc, #172]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 81007f2:	2200      	movs	r2, #0
 81007f4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 81007f6:	4b2a      	ldr	r3, [pc, #168]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 81007f8:	2200      	movs	r2, #0
 81007fa:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 81007fc:	4b28      	ldr	r3, [pc, #160]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 81007fe:	2200      	movs	r2, #0
 8100800:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8100802:	4b27      	ldr	r3, [pc, #156]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100804:	2200      	movs	r2, #0
 8100806:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8100808:	4b25      	ldr	r3, [pc, #148]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810080a:	2210      	movs	r2, #16
 810080c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 810080e:	4b24      	ldr	r3, [pc, #144]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100810:	2201      	movs	r2, #1
 8100812:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8100814:	4b22      	ldr	r3, [pc, #136]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100816:	2202      	movs	r2, #2
 8100818:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 810081a:	4b21      	ldr	r3, [pc, #132]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810081c:	2202      	movs	r2, #2
 810081e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100820:	4b1f      	ldr	r3, [pc, #124]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100822:	2201      	movs	r2, #1
 8100824:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100826:	4b1e      	ldr	r3, [pc, #120]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100828:	2201      	movs	r2, #1
 810082a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 810082c:	4b1c      	ldr	r3, [pc, #112]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810082e:	2201      	movs	r2, #1
 8100830:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100832:	4b1b      	ldr	r3, [pc, #108]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100834:	2201      	movs	r2, #1
 8100836:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100838:	4b19      	ldr	r3, [pc, #100]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810083a:	2200      	movs	r2, #0
 810083c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 810083e:	4b18      	ldr	r3, [pc, #96]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100840:	2200      	movs	r2, #0
 8100842:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100844:	4b16      	ldr	r3, [pc, #88]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100846:	2200      	movs	r2, #0
 8100848:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 810084a:	4b15      	ldr	r3, [pc, #84]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810084c:	2200      	movs	r2, #0
 810084e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100850:	4b13      	ldr	r3, [pc, #76]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100852:	2204      	movs	r2, #4
 8100854:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100856:	4b12      	ldr	r3, [pc, #72]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100858:	2200      	movs	r2, #0
 810085a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810085c:	4b10      	ldr	r3, [pc, #64]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810085e:	2204      	movs	r2, #4
 8100860:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100862:	4b0f      	ldr	r3, [pc, #60]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100864:	2200      	movs	r2, #0
 8100866:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100868:	4b0d      	ldr	r3, [pc, #52]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810086a:	2204      	movs	r2, #4
 810086c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 810086e:	4b0c      	ldr	r3, [pc, #48]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100870:	2200      	movs	r2, #0
 8100872:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100874:	4b0a      	ldr	r3, [pc, #40]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100876:	2200      	movs	r2, #0
 8100878:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 810087a:	4b09      	ldr	r3, [pc, #36]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810087c:	2200      	movs	r2, #0
 810087e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100880:	4b07      	ldr	r3, [pc, #28]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100882:	2200      	movs	r2, #0
 8100884:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100886:	4b06      	ldr	r3, [pc, #24]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 8100888:	2204      	movs	r2, #4
 810088a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 810088c:	4804      	ldr	r0, [pc, #16]	; (81008a0 <MX_FDCAN2_Init+0xc0>)
 810088e:	f001 ff01 	bl	8102694 <HAL_FDCAN_Init>
 8100892:	4603      	mov	r3, r0
 8100894:	2b00      	cmp	r3, #0
 8100896:	d001      	beq.n	810089c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8100898:	f000 fa8a 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 810089c:	bf00      	nop
 810089e:	bd80      	pop	{r7, pc}
 81008a0:	10000274 	.word	0x10000274
 81008a4:	4000a400 	.word	0x4000a400

081008a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 81008a8:	b580      	push	{r7, lr}
 81008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 81008ac:	4b12      	ldr	r3, [pc, #72]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008ae:	4a13      	ldr	r2, [pc, #76]	; (81008fc <MX_QUADSPI_Init+0x54>)
 81008b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 81008b2:	4b11      	ldr	r3, [pc, #68]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008b4:	22ff      	movs	r2, #255	; 0xff
 81008b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 81008b8:	4b0f      	ldr	r3, [pc, #60]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008ba:	2201      	movs	r2, #1
 81008bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81008be:	4b0e      	ldr	r3, [pc, #56]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008c0:	2200      	movs	r2, #0
 81008c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 81008c4:	4b0c      	ldr	r3, [pc, #48]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008c6:	2201      	movs	r2, #1
 81008c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 81008ca:	4b0b      	ldr	r3, [pc, #44]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008cc:	2200      	movs	r2, #0
 81008ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 81008d0:	4b09      	ldr	r3, [pc, #36]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008d2:	2200      	movs	r2, #0
 81008d4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 81008d6:	4b08      	ldr	r3, [pc, #32]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008d8:	2200      	movs	r2, #0
 81008da:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 81008dc:	4b06      	ldr	r3, [pc, #24]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008de:	2200      	movs	r2, #0
 81008e0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 81008e2:	4805      	ldr	r0, [pc, #20]	; (81008f8 <MX_QUADSPI_Init+0x50>)
 81008e4:	f003 fd10 	bl	8104308 <HAL_QSPI_Init>
 81008e8:	4603      	mov	r3, r0
 81008ea:	2b00      	cmp	r3, #0
 81008ec:	d001      	beq.n	81008f2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 81008ee:	f000 fa5f 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 81008f2:	bf00      	nop
 81008f4:	bd80      	pop	{r7, pc}
 81008f6:	bf00      	nop
 81008f8:	10000314 	.word	0x10000314
 81008fc:	52005000 	.word	0x52005000

08100900 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8100900:	b580      	push	{r7, lr}
 8100902:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100904:	4b58      	ldr	r3, [pc, #352]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100906:	4a59      	ldr	r2, [pc, #356]	; (8100a6c <MX_SAI2_Init+0x16c>)
 8100908:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 810090a:	4b57      	ldr	r3, [pc, #348]	; (8100a68 <MX_SAI2_Init+0x168>)
 810090c:	2200      	movs	r2, #0
 810090e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8100910:	4b55      	ldr	r3, [pc, #340]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100912:	2200      	movs	r2, #0
 8100914:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8100916:	4b54      	ldr	r3, [pc, #336]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100918:	2240      	movs	r2, #64	; 0x40
 810091a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 810091c:	4b52      	ldr	r3, [pc, #328]	; (8100a68 <MX_SAI2_Init+0x168>)
 810091e:	2200      	movs	r2, #0
 8100920:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100922:	4b51      	ldr	r3, [pc, #324]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100924:	2200      	movs	r2, #0
 8100926:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8100928:	4b4f      	ldr	r3, [pc, #316]	; (8100a68 <MX_SAI2_Init+0x168>)
 810092a:	2200      	movs	r2, #0
 810092c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 810092e:	4b4e      	ldr	r3, [pc, #312]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100930:	2200      	movs	r2, #0
 8100932:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100934:	4b4c      	ldr	r3, [pc, #304]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100936:	2200      	movs	r2, #0
 8100938:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 810093a:	4b4b      	ldr	r3, [pc, #300]	; (8100a68 <MX_SAI2_Init+0x168>)
 810093c:	2200      	movs	r2, #0
 810093e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100940:	4b49      	ldr	r3, [pc, #292]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100942:	4a4b      	ldr	r2, [pc, #300]	; (8100a70 <MX_SAI2_Init+0x170>)
 8100944:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100946:	4b48      	ldr	r3, [pc, #288]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100948:	2200      	movs	r2, #0
 810094a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 810094c:	4b46      	ldr	r3, [pc, #280]	; (8100a68 <MX_SAI2_Init+0x168>)
 810094e:	2200      	movs	r2, #0
 8100950:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100952:	4b45      	ldr	r3, [pc, #276]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100954:	2200      	movs	r2, #0
 8100956:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100958:	4b43      	ldr	r3, [pc, #268]	; (8100a68 <MX_SAI2_Init+0x168>)
 810095a:	2200      	movs	r2, #0
 810095c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 810095e:	4b42      	ldr	r3, [pc, #264]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100960:	2200      	movs	r2, #0
 8100962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8100966:	4b40      	ldr	r3, [pc, #256]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100968:	2201      	movs	r2, #1
 810096a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 810096c:	4b3e      	ldr	r3, [pc, #248]	; (8100a68 <MX_SAI2_Init+0x168>)
 810096e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100972:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8100974:	4b3c      	ldr	r3, [pc, #240]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100976:	2208      	movs	r2, #8
 8100978:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 810097a:	4b3b      	ldr	r3, [pc, #236]	; (8100a68 <MX_SAI2_Init+0x168>)
 810097c:	2201      	movs	r2, #1
 810097e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100980:	4b39      	ldr	r3, [pc, #228]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100982:	2200      	movs	r2, #0
 8100984:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100986:	4b38      	ldr	r3, [pc, #224]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100988:	2200      	movs	r2, #0
 810098a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 810098c:	4b36      	ldr	r3, [pc, #216]	; (8100a68 <MX_SAI2_Init+0x168>)
 810098e:	2200      	movs	r2, #0
 8100990:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8100992:	4b35      	ldr	r3, [pc, #212]	; (8100a68 <MX_SAI2_Init+0x168>)
 8100994:	2200      	movs	r2, #0
 8100996:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100998:	4b33      	ldr	r3, [pc, #204]	; (8100a68 <MX_SAI2_Init+0x168>)
 810099a:	2200      	movs	r2, #0
 810099c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 810099e:	4b32      	ldr	r3, [pc, #200]	; (8100a68 <MX_SAI2_Init+0x168>)
 81009a0:	2201      	movs	r2, #1
 81009a2:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 81009a4:	4b30      	ldr	r3, [pc, #192]	; (8100a68 <MX_SAI2_Init+0x168>)
 81009a6:	2200      	movs	r2, #0
 81009a8:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 81009aa:	482f      	ldr	r0, [pc, #188]	; (8100a68 <MX_SAI2_Init+0x168>)
 81009ac:	f006 fc3c 	bl	8107228 <HAL_SAI_Init>
 81009b0:	4603      	mov	r3, r0
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	d001      	beq.n	81009ba <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 81009b6:	f000 f9fb 	bl	8100db0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 81009ba:	4b2e      	ldr	r3, [pc, #184]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009bc:	4a2e      	ldr	r2, [pc, #184]	; (8100a78 <MX_SAI2_Init+0x178>)
 81009be:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 81009c0:	4b2c      	ldr	r3, [pc, #176]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009c2:	2200      	movs	r2, #0
 81009c4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 81009c6:	4b2b      	ldr	r3, [pc, #172]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009c8:	2203      	movs	r2, #3
 81009ca:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 81009cc:	4b29      	ldr	r3, [pc, #164]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009ce:	2240      	movs	r2, #64	; 0x40
 81009d0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81009d2:	4b28      	ldr	r3, [pc, #160]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009d4:	2200      	movs	r2, #0
 81009d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81009d8:	4b26      	ldr	r3, [pc, #152]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009da:	2200      	movs	r2, #0
 81009dc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 81009de:	4b25      	ldr	r3, [pc, #148]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009e0:	2201      	movs	r2, #1
 81009e2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81009e4:	4b23      	ldr	r3, [pc, #140]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009e6:	2200      	movs	r2, #0
 81009e8:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81009ea:	4b22      	ldr	r3, [pc, #136]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009ec:	2200      	movs	r2, #0
 81009ee:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81009f0:	4b20      	ldr	r3, [pc, #128]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009f2:	2200      	movs	r2, #0
 81009f4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 81009f6:	4b1f      	ldr	r3, [pc, #124]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009f8:	2200      	movs	r2, #0
 81009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 81009fc:	4b1d      	ldr	r3, [pc, #116]	; (8100a74 <MX_SAI2_Init+0x174>)
 81009fe:	2200      	movs	r2, #0
 8100a00:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100a02:	4b1c      	ldr	r3, [pc, #112]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a04:	2200      	movs	r2, #0
 8100a06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8100a08:	4b1a      	ldr	r3, [pc, #104]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a0a:	2200      	movs	r2, #0
 8100a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8100a10:	4b18      	ldr	r3, [pc, #96]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a12:	2201      	movs	r2, #1
 8100a14:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100a16:	4b17      	ldr	r3, [pc, #92]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8100a1e:	4b15      	ldr	r3, [pc, #84]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a20:	2208      	movs	r2, #8
 8100a22:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8100a24:	4b13      	ldr	r3, [pc, #76]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a26:	2201      	movs	r2, #1
 8100a28:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100a2a:	4b12      	ldr	r3, [pc, #72]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a2c:	2200      	movs	r2, #0
 8100a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100a30:	4b10      	ldr	r3, [pc, #64]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a32:	2200      	movs	r2, #0
 8100a34:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100a36:	4b0f      	ldr	r3, [pc, #60]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a38:	2200      	movs	r2, #0
 8100a3a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8100a3c:	4b0d      	ldr	r3, [pc, #52]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a3e:	2200      	movs	r2, #0
 8100a40:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100a42:	4b0c      	ldr	r3, [pc, #48]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a44:	2200      	movs	r2, #0
 8100a46:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8100a48:	4b0a      	ldr	r3, [pc, #40]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a4a:	2201      	movs	r2, #1
 8100a4c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8100a4e:	4b09      	ldr	r3, [pc, #36]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a50:	2200      	movs	r2, #0
 8100a52:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8100a54:	4807      	ldr	r0, [pc, #28]	; (8100a74 <MX_SAI2_Init+0x174>)
 8100a56:	f006 fbe7 	bl	8107228 <HAL_SAI_Init>
 8100a5a:	4603      	mov	r3, r0
 8100a5c:	2b00      	cmp	r3, #0
 8100a5e:	d001      	beq.n	8100a64 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8100a60:	f000 f9a6 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8100a64:	bf00      	nop
 8100a66:	bd80      	pop	{r7, pc}
 8100a68:	10000360 	.word	0x10000360
 8100a6c:	40015c04 	.word	0x40015c04
 8100a70:	0002ee00 	.word	0x0002ee00
 8100a74:	100003f8 	.word	0x100003f8
 8100a78:	40015c24 	.word	0x40015c24

08100a7c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8100a7c:	b580      	push	{r7, lr}
 8100a7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8100a80:	4b0e      	ldr	r3, [pc, #56]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100a82:	4a0f      	ldr	r2, [pc, #60]	; (8100ac0 <MX_SDMMC1_MMC_Init+0x44>)
 8100a84:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100a86:	4b0d      	ldr	r3, [pc, #52]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100a88:	2200      	movs	r2, #0
 8100a8a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100a8c:	4b0b      	ldr	r3, [pc, #44]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100a8e:	2200      	movs	r2, #0
 8100a90:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8100a92:	4b0a      	ldr	r3, [pc, #40]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100a94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100a98:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100a9a:	4b08      	ldr	r3, [pc, #32]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100a9c:	2200      	movs	r2, #0
 8100a9e:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8100aa0:	4b06      	ldr	r3, [pc, #24]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100aa2:	2200      	movs	r2, #0
 8100aa4:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8100aa6:	4805      	ldr	r0, [pc, #20]	; (8100abc <MX_SDMMC1_MMC_Init+0x40>)
 8100aa8:	f002 fb24 	bl	81030f4 <HAL_MMC_Init>
 8100aac:	4603      	mov	r3, r0
 8100aae:	2b00      	cmp	r3, #0
 8100ab0:	d001      	beq.n	8100ab6 <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8100ab2:	f000 f97d 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100ab6:	bf00      	nop
 8100ab8:	bd80      	pop	{r7, pc}
 8100aba:	bf00      	nop
 8100abc:	10000490 	.word	0x10000490
 8100ac0:	52007000 	.word	0x52007000

08100ac4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100ac4:	b580      	push	{r7, lr}
 8100ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100ac8:	4b22      	ldr	r3, [pc, #136]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100aca:	4a23      	ldr	r2, [pc, #140]	; (8100b58 <MX_USART3_UART_Init+0x94>)
 8100acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100ace:	4b21      	ldr	r3, [pc, #132]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100ad6:	4b1f      	ldr	r3, [pc, #124]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100ad8:	2200      	movs	r2, #0
 8100ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100adc:	4b1d      	ldr	r3, [pc, #116]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100ade:	2200      	movs	r2, #0
 8100ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100ae2:	4b1c      	ldr	r3, [pc, #112]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100ae4:	2200      	movs	r2, #0
 8100ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100ae8:	4b1a      	ldr	r3, [pc, #104]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100aea:	220c      	movs	r2, #12
 8100aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100aee:	4b19      	ldr	r3, [pc, #100]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100af0:	2200      	movs	r2, #0
 8100af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100af4:	4b17      	ldr	r3, [pc, #92]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100af6:	2200      	movs	r2, #0
 8100af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100afa:	4b16      	ldr	r3, [pc, #88]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100afc:	2200      	movs	r2, #0
 8100afe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b00:	4b14      	ldr	r3, [pc, #80]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b02:	2200      	movs	r2, #0
 8100b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b06:	4b13      	ldr	r3, [pc, #76]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b08:	2200      	movs	r2, #0
 8100b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100b0c:	4811      	ldr	r0, [pc, #68]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b0e:	f006 feab 	bl	8107868 <HAL_UART_Init>
 8100b12:	4603      	mov	r3, r0
 8100b14:	2b00      	cmp	r3, #0
 8100b16:	d001      	beq.n	8100b1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100b18:	f000 f94a 	bl	8100db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b1c:	2100      	movs	r1, #0
 8100b1e:	480d      	ldr	r0, [pc, #52]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b20:	f007 feac 	bl	810887c <HAL_UARTEx_SetTxFifoThreshold>
 8100b24:	4603      	mov	r3, r0
 8100b26:	2b00      	cmp	r3, #0
 8100b28:	d001      	beq.n	8100b2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100b2a:	f000 f941 	bl	8100db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b2e:	2100      	movs	r1, #0
 8100b30:	4808      	ldr	r0, [pc, #32]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b32:	f007 fee1 	bl	81088f8 <HAL_UARTEx_SetRxFifoThreshold>
 8100b36:	4603      	mov	r3, r0
 8100b38:	2b00      	cmp	r3, #0
 8100b3a:	d001      	beq.n	8100b40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100b3c:	f000 f938 	bl	8100db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100b40:	4804      	ldr	r0, [pc, #16]	; (8100b54 <MX_USART3_UART_Init+0x90>)
 8100b42:	f007 fe62 	bl	810880a <HAL_UARTEx_DisableFifoMode>
 8100b46:	4603      	mov	r3, r0
 8100b48:	2b00      	cmp	r3, #0
 8100b4a:	d001      	beq.n	8100b50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100b4c:	f000 f930 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100b50:	bf00      	nop
 8100b52:	bd80      	pop	{r7, pc}
 8100b54:	10000704 	.word	0x10000704
 8100b58:	40004800 	.word	0x40004800

08100b5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8100b5c:	b580      	push	{r7, lr}
 8100b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8100b60:	4b15      	ldr	r3, [pc, #84]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b62:	4a16      	ldr	r2, [pc, #88]	; (8100bbc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8100b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8100b66:	4b14      	ldr	r3, [pc, #80]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b68:	2209      	movs	r2, #9
 8100b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8100b6c:	4b12      	ldr	r3, [pc, #72]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b6e:	2202      	movs	r2, #2
 8100b70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8100b72:	4b11      	ldr	r3, [pc, #68]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8100b78:	4b0f      	ldr	r3, [pc, #60]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b7a:	2202      	movs	r2, #2
 8100b7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8100b7e:	4b0e      	ldr	r3, [pc, #56]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b80:	2200      	movs	r2, #0
 8100b82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8100b84:	4b0c      	ldr	r3, [pc, #48]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b86:	2200      	movs	r2, #0
 8100b88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8100b8a:	4b0b      	ldr	r3, [pc, #44]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b8c:	2200      	movs	r2, #0
 8100b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8100b90:	4b09      	ldr	r3, [pc, #36]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b92:	2201      	movs	r2, #1
 8100b94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8100b96:	4b08      	ldr	r3, [pc, #32]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b98:	2201      	movs	r2, #1
 8100b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8100b9c:	4b06      	ldr	r3, [pc, #24]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100b9e:	2200      	movs	r2, #0
 8100ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8100ba2:	4805      	ldr	r0, [pc, #20]	; (8100bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8100ba4:	f003 f9d0 	bl	8103f48 <HAL_PCD_Init>
 8100ba8:	4603      	mov	r3, r0
 8100baa:	2b00      	cmp	r3, #0
 8100bac:	d001      	beq.n	8100bb2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8100bae:	f000 f8ff 	bl	8100db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8100bb2:	bf00      	nop
 8100bb4:	bd80      	pop	{r7, pc}
 8100bb6:	bf00      	nop
 8100bb8:	10000798 	.word	0x10000798
 8100bbc:	40080000 	.word	0x40080000

08100bc0 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100bc0:	b580      	push	{r7, lr}
 8100bc2:	b088      	sub	sp, #32
 8100bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100bc6:	1d3b      	adds	r3, r7, #4
 8100bc8:	2200      	movs	r2, #0
 8100bca:	601a      	str	r2, [r3, #0]
 8100bcc:	605a      	str	r2, [r3, #4]
 8100bce:	609a      	str	r2, [r3, #8]
 8100bd0:	60da      	str	r2, [r3, #12]
 8100bd2:	611a      	str	r2, [r3, #16]
 8100bd4:	615a      	str	r2, [r3, #20]
 8100bd6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100bd8:	4b1e      	ldr	r3, [pc, #120]	; (8100c54 <MX_FMC_Init+0x94>)
 8100bda:	4a1f      	ldr	r2, [pc, #124]	; (8100c58 <MX_FMC_Init+0x98>)
 8100bdc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100bde:	4b1d      	ldr	r3, [pc, #116]	; (8100c54 <MX_FMC_Init+0x94>)
 8100be0:	2201      	movs	r2, #1
 8100be2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100be4:	4b1b      	ldr	r3, [pc, #108]	; (8100c54 <MX_FMC_Init+0x94>)
 8100be6:	2200      	movs	r2, #0
 8100be8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100bea:	4b1a      	ldr	r3, [pc, #104]	; (8100c54 <MX_FMC_Init+0x94>)
 8100bec:	2204      	movs	r2, #4
 8100bee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100bf0:	4b18      	ldr	r3, [pc, #96]	; (8100c54 <MX_FMC_Init+0x94>)
 8100bf2:	2210      	movs	r2, #16
 8100bf4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8100bf6:	4b17      	ldr	r3, [pc, #92]	; (8100c54 <MX_FMC_Init+0x94>)
 8100bf8:	2240      	movs	r2, #64	; 0x40
 8100bfa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100bfc:	4b15      	ldr	r3, [pc, #84]	; (8100c54 <MX_FMC_Init+0x94>)
 8100bfe:	2280      	movs	r2, #128	; 0x80
 8100c00:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100c02:	4b14      	ldr	r3, [pc, #80]	; (8100c54 <MX_FMC_Init+0x94>)
 8100c04:	2200      	movs	r2, #0
 8100c06:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100c08:	4b12      	ldr	r3, [pc, #72]	; (8100c54 <MX_FMC_Init+0x94>)
 8100c0a:	2200      	movs	r2, #0
 8100c0c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100c0e:	4b11      	ldr	r3, [pc, #68]	; (8100c54 <MX_FMC_Init+0x94>)
 8100c10:	2200      	movs	r2, #0
 8100c12:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100c14:	4b0f      	ldr	r3, [pc, #60]	; (8100c54 <MX_FMC_Init+0x94>)
 8100c16:	2200      	movs	r2, #0
 8100c18:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100c1a:	2310      	movs	r3, #16
 8100c1c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100c1e:	2310      	movs	r3, #16
 8100c20:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100c22:	2310      	movs	r3, #16
 8100c24:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100c26:	2310      	movs	r3, #16
 8100c28:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100c2a:	2310      	movs	r3, #16
 8100c2c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100c2e:	2310      	movs	r3, #16
 8100c30:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100c32:	2310      	movs	r3, #16
 8100c34:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100c36:	1d3b      	adds	r3, r7, #4
 8100c38:	4619      	mov	r1, r3
 8100c3a:	4806      	ldr	r0, [pc, #24]	; (8100c54 <MX_FMC_Init+0x94>)
 8100c3c:	f006 fdd8 	bl	81077f0 <HAL_SDRAM_Init>
 8100c40:	4603      	mov	r3, r0
 8100c42:	2b00      	cmp	r3, #0
 8100c44:	d001      	beq.n	8100c4a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100c46:	f000 f8b3 	bl	8100db0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100c4a:	bf00      	nop
 8100c4c:	3720      	adds	r7, #32
 8100c4e:	46bd      	mov	sp, r7
 8100c50:	bd80      	pop	{r7, pc}
 8100c52:	bf00      	nop
 8100c54:	10000ca4 	.word	0x10000ca4
 8100c58:	52004140 	.word	0x52004140

08100c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c5c:	b580      	push	{r7, lr}
 8100c5e:	b08e      	sub	sp, #56	; 0x38
 8100c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100c66:	2200      	movs	r2, #0
 8100c68:	601a      	str	r2, [r3, #0]
 8100c6a:	605a      	str	r2, [r3, #4]
 8100c6c:	609a      	str	r2, [r3, #8]
 8100c6e:	60da      	str	r2, [r3, #12]
 8100c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100c72:	4b4d      	ldr	r3, [pc, #308]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c78:	4a4b      	ldr	r2, [pc, #300]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c82:	4b49      	ldr	r3, [pc, #292]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100c8c:	623b      	str	r3, [r7, #32]
 8100c8e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c90:	4b45      	ldr	r3, [pc, #276]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c96:	4a44      	ldr	r2, [pc, #272]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100c98:	f043 0302 	orr.w	r3, r3, #2
 8100c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ca0:	4b41      	ldr	r3, [pc, #260]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ca6:	f003 0302 	and.w	r3, r3, #2
 8100caa:	61fb      	str	r3, [r7, #28]
 8100cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100cae:	4b3e      	ldr	r3, [pc, #248]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cb4:	4a3c      	ldr	r2, [pc, #240]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cbe:	4b3a      	ldr	r3, [pc, #232]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100cc8:	61bb      	str	r3, [r7, #24]
 8100cca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ccc:	4b36      	ldr	r3, [pc, #216]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd2:	4a35      	ldr	r2, [pc, #212]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cd4:	f043 0304 	orr.w	r3, r3, #4
 8100cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cdc:	4b32      	ldr	r3, [pc, #200]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce2:	f003 0304 	and.w	r3, r3, #4
 8100ce6:	617b      	str	r3, [r7, #20]
 8100ce8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100cea:	4b2f      	ldr	r3, [pc, #188]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf0:	4a2d      	ldr	r2, [pc, #180]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cf2:	f043 0310 	orr.w	r3, r3, #16
 8100cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cfa:	4b2b      	ldr	r3, [pc, #172]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d00:	f003 0310 	and.w	r3, r3, #16
 8100d04:	613b      	str	r3, [r7, #16]
 8100d06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100d08:	4b27      	ldr	r3, [pc, #156]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d0e:	4a26      	ldr	r2, [pc, #152]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d18:	4b23      	ldr	r3, [pc, #140]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100d22:	60fb      	str	r3, [r7, #12]
 8100d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100d26:	4b20      	ldr	r3, [pc, #128]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d2c:	4a1e      	ldr	r2, [pc, #120]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d2e:	f043 0308 	orr.w	r3, r3, #8
 8100d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d36:	4b1c      	ldr	r3, [pc, #112]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d3c:	f003 0308 	and.w	r3, r3, #8
 8100d40:	60bb      	str	r3, [r7, #8]
 8100d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100d44:	4b18      	ldr	r3, [pc, #96]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d4a:	4a17      	ldr	r2, [pc, #92]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d4c:	f043 0301 	orr.w	r3, r3, #1
 8100d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d54:	4b14      	ldr	r3, [pc, #80]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d5a:	f003 0301 	and.w	r3, r3, #1
 8100d5e:	607b      	str	r3, [r7, #4]
 8100d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100d62:	4b11      	ldr	r3, [pc, #68]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d68:	4a0f      	ldr	r2, [pc, #60]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d6a:	f043 0320 	orr.w	r3, r3, #32
 8100d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d72:	4b0d      	ldr	r3, [pc, #52]	; (8100da8 <MX_GPIO_Init+0x14c>)
 8100d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d78:	f003 0320 	and.w	r3, r3, #32
 8100d7c:	603b      	str	r3, [r7, #0]
 8100d7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8100d80:	2330      	movs	r3, #48	; 0x30
 8100d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d84:	2302      	movs	r3, #2
 8100d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d88:	2300      	movs	r3, #0
 8100d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d8c:	2300      	movs	r3, #0
 8100d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8100d90:	230a      	movs	r3, #10
 8100d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100d98:	4619      	mov	r1, r3
 8100d9a:	4804      	ldr	r0, [pc, #16]	; (8100dac <MX_GPIO_Init+0x150>)
 8100d9c:	f001 ffe8 	bl	8102d70 <HAL_GPIO_Init>

}
 8100da0:	bf00      	nop
 8100da2:	3738      	adds	r7, #56	; 0x38
 8100da4:	46bd      	mov	sp, r7
 8100da6:	bd80      	pop	{r7, pc}
 8100da8:	58024400 	.word	0x58024400
 8100dac:	58021000 	.word	0x58021000

08100db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100db0:	b480      	push	{r7}
 8100db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100db4:	b672      	cpsid	i
}
 8100db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100db8:	e7fe      	b.n	8100db8 <Error_Handler+0x8>
	...

08100dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100dbc:	b480      	push	{r7}
 8100dbe:	b083      	sub	sp, #12
 8100dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100dc2:	4b0a      	ldr	r3, [pc, #40]	; (8100dec <HAL_MspInit+0x30>)
 8100dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100dc8:	4a08      	ldr	r2, [pc, #32]	; (8100dec <HAL_MspInit+0x30>)
 8100dca:	f043 0302 	orr.w	r3, r3, #2
 8100dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100dd2:	4b06      	ldr	r3, [pc, #24]	; (8100dec <HAL_MspInit+0x30>)
 8100dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100dd8:	f003 0302 	and.w	r3, r3, #2
 8100ddc:	607b      	str	r3, [r7, #4]
 8100dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100de0:	bf00      	nop
 8100de2:	370c      	adds	r7, #12
 8100de4:	46bd      	mov	sp, r7
 8100de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dea:	4770      	bx	lr
 8100dec:	58024400 	.word	0x58024400

08100df0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100df0:	b580      	push	{r7, lr}
 8100df2:	b092      	sub	sp, #72	; 0x48
 8100df4:	af00      	add	r7, sp, #0
 8100df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100df8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	601a      	str	r2, [r3, #0]
 8100e00:	605a      	str	r2, [r3, #4]
 8100e02:	609a      	str	r2, [r3, #8]
 8100e04:	60da      	str	r2, [r3, #12]
 8100e06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8100e08:	687b      	ldr	r3, [r7, #4]
 8100e0a:	681b      	ldr	r3, [r3, #0]
 8100e0c:	4a87      	ldr	r2, [pc, #540]	; (810102c <HAL_ETH_MspInit+0x23c>)
 8100e0e:	4293      	cmp	r3, r2
 8100e10:	f040 8108 	bne.w	8101024 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8100e14:	4b86      	ldr	r3, [pc, #536]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e1a:	4a85      	ldr	r2, [pc, #532]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e24:	4b82      	ldr	r3, [pc, #520]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8100e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8100e32:	4b7f      	ldr	r3, [pc, #508]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e38:	4a7d      	ldr	r2, [pc, #500]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e42:	4b7b      	ldr	r3, [pc, #492]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8100e50:	4b77      	ldr	r3, [pc, #476]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e56:	4a76      	ldr	r2, [pc, #472]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100e5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e60:	4b73      	ldr	r3, [pc, #460]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8100e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100e6e:	4b70      	ldr	r3, [pc, #448]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e74:	4a6e      	ldr	r2, [pc, #440]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e7e:	4b6c      	ldr	r3, [pc, #432]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100e88:	627b      	str	r3, [r7, #36]	; 0x24
 8100e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100e8c:	4b68      	ldr	r3, [pc, #416]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e92:	4a67      	ldr	r2, [pc, #412]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e94:	f043 0310 	orr.w	r3, r3, #16
 8100e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e9c:	4b64      	ldr	r3, [pc, #400]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ea2:	f003 0310 	and.w	r3, r3, #16
 8100ea6:	623b      	str	r3, [r7, #32]
 8100ea8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8100eaa:	4b61      	ldr	r3, [pc, #388]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eb0:	4a5f      	ldr	r2, [pc, #380]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eba:	4b5d      	ldr	r3, [pc, #372]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100ec4:	61fb      	str	r3, [r7, #28]
 8100ec6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ec8:	4b59      	ldr	r3, [pc, #356]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ece:	4a58      	ldr	r2, [pc, #352]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100ed0:	f043 0304 	orr.w	r3, r3, #4
 8100ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ed8:	4b55      	ldr	r3, [pc, #340]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ede:	f003 0304 	and.w	r3, r3, #4
 8100ee2:	61bb      	str	r3, [r7, #24]
 8100ee4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100ee6:	4b52      	ldr	r3, [pc, #328]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eec:	4a50      	ldr	r2, [pc, #320]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ef6:	4b4e      	ldr	r3, [pc, #312]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f00:	617b      	str	r3, [r7, #20]
 8100f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100f04:	4b4a      	ldr	r3, [pc, #296]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f0a:	4a49      	ldr	r2, [pc, #292]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f0c:	f043 0301 	orr.w	r3, r3, #1
 8100f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f14:	4b46      	ldr	r3, [pc, #280]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f1a:	f003 0301 	and.w	r3, r3, #1
 8100f1e:	613b      	str	r3, [r7, #16]
 8100f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f22:	4b43      	ldr	r3, [pc, #268]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f28:	4a41      	ldr	r2, [pc, #260]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f2a:	f043 0302 	orr.w	r3, r3, #2
 8100f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f32:	4b3f      	ldr	r3, [pc, #252]	; (8101030 <HAL_ETH_MspInit+0x240>)
 8100f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f38:	f003 0302 	and.w	r3, r3, #2
 8100f3c:	60fb      	str	r3, [r7, #12]
 8100f3e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8100f40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8100f44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f46:	2302      	movs	r3, #2
 8100f48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f4a:	2300      	movs	r3, #0
 8100f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f4e:	2300      	movs	r3, #0
 8100f50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100f52:	230b      	movs	r3, #11
 8100f54:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100f5a:	4619      	mov	r1, r3
 8100f5c:	4835      	ldr	r0, [pc, #212]	; (8101034 <HAL_ETH_MspInit+0x244>)
 8100f5e:	f001 ff07 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8100f62:	2304      	movs	r3, #4
 8100f64:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f66:	2302      	movs	r3, #2
 8100f68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f6a:	2300      	movs	r3, #0
 8100f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f6e:	2300      	movs	r3, #0
 8100f70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100f72:	230b      	movs	r3, #11
 8100f74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8100f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100f7a:	4619      	mov	r1, r3
 8100f7c:	482e      	ldr	r0, [pc, #184]	; (8101038 <HAL_ETH_MspInit+0x248>)
 8100f7e:	f001 fef7 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8100f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100f86:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f88:	2302      	movs	r3, #2
 8100f8a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f8c:	2300      	movs	r3, #0
 8100f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f90:	2300      	movs	r3, #0
 8100f92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100f94:	230b      	movs	r3, #11
 8100f96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8100f98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100f9c:	4619      	mov	r1, r3
 8100f9e:	4827      	ldr	r0, [pc, #156]	; (810103c <HAL_ETH_MspInit+0x24c>)
 8100fa0:	f001 fee6 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8100fa4:	233e      	movs	r3, #62	; 0x3e
 8100fa6:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fa8:	2302      	movs	r3, #2
 8100faa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fac:	2300      	movs	r3, #0
 8100fae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fb0:	2300      	movs	r3, #0
 8100fb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100fb4:	230b      	movs	r3, #11
 8100fb6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100fbc:	4619      	mov	r1, r3
 8100fbe:	4820      	ldr	r0, [pc, #128]	; (8101040 <HAL_ETH_MspInit+0x250>)
 8100fc0:	f001 fed6 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8100fc4:	230c      	movs	r3, #12
 8100fc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fc8:	2302      	movs	r3, #2
 8100fca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fcc:	2300      	movs	r3, #0
 8100fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fd0:	2300      	movs	r3, #0
 8100fd2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100fd4:	230b      	movs	r3, #11
 8100fd6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100fdc:	4619      	mov	r1, r3
 8100fde:	4819      	ldr	r0, [pc, #100]	; (8101044 <HAL_ETH_MspInit+0x254>)
 8100fe0:	f001 fec6 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8100fe4:	2386      	movs	r3, #134	; 0x86
 8100fe6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fe8:	2302      	movs	r3, #2
 8100fea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fec:	2300      	movs	r3, #0
 8100fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ff0:	2300      	movs	r3, #0
 8100ff2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100ff4:	230b      	movs	r3, #11
 8100ff6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100ffc:	4619      	mov	r1, r3
 8100ffe:	4812      	ldr	r0, [pc, #72]	; (8101048 <HAL_ETH_MspInit+0x258>)
 8101000:	f001 feb6 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8101004:	2303      	movs	r3, #3
 8101006:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101008:	2302      	movs	r3, #2
 810100a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810100c:	2300      	movs	r3, #0
 810100e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101010:	2300      	movs	r3, #0
 8101012:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101014:	230b      	movs	r3, #11
 8101016:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101018:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810101c:	4619      	mov	r1, r3
 810101e:	480b      	ldr	r0, [pc, #44]	; (810104c <HAL_ETH_MspInit+0x25c>)
 8101020:	f001 fea6 	bl	8102d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8101024:	bf00      	nop
 8101026:	3748      	adds	r7, #72	; 0x48
 8101028:	46bd      	mov	sp, r7
 810102a:	bd80      	pop	{r7, pc}
 810102c:	40028000 	.word	0x40028000
 8101030:	58024400 	.word	0x58024400
 8101034:	58021800 	.word	0x58021800
 8101038:	58021000 	.word	0x58021000
 810103c:	58022000 	.word	0x58022000
 8101040:	58020800 	.word	0x58020800
 8101044:	58021c00 	.word	0x58021c00
 8101048:	58020000 	.word	0x58020000
 810104c:	58020400 	.word	0x58020400

08101050 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8101050:	b580      	push	{r7, lr}
 8101052:	b0bc      	sub	sp, #240	; 0xf0
 8101054:	af00      	add	r7, sp, #0
 8101056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101058:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810105c:	2200      	movs	r2, #0
 810105e:	601a      	str	r2, [r3, #0]
 8101060:	605a      	str	r2, [r3, #4]
 8101062:	609a      	str	r2, [r3, #8]
 8101064:	60da      	str	r2, [r3, #12]
 8101066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101068:	f107 0318 	add.w	r3, r7, #24
 810106c:	22c0      	movs	r2, #192	; 0xc0
 810106e:	2100      	movs	r1, #0
 8101070:	4618      	mov	r0, r3
 8101072:	f008 fc97 	bl	81099a4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	4a57      	ldr	r2, [pc, #348]	; (81011d8 <HAL_FDCAN_MspInit+0x188>)
 810107c:	4293      	cmp	r3, r2
 810107e:	d151      	bne.n	8101124 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8101080:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8101084:	f04f 0300 	mov.w	r3, #0
 8101088:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 810108c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8101090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101094:	f107 0318 	add.w	r3, r7, #24
 8101098:	4618      	mov	r0, r3
 810109a:	f003 fbc7 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 810109e:	4603      	mov	r3, r0
 81010a0:	2b00      	cmp	r3, #0
 81010a2:	d001      	beq.n	81010a8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 81010a4:	f7ff fe84 	bl	8100db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 81010a8:	4b4c      	ldr	r3, [pc, #304]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 81010aa:	681b      	ldr	r3, [r3, #0]
 81010ac:	3301      	adds	r3, #1
 81010ae:	4a4b      	ldr	r2, [pc, #300]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 81010b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 81010b2:	4b4a      	ldr	r3, [pc, #296]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 81010b4:	681b      	ldr	r3, [r3, #0]
 81010b6:	2b01      	cmp	r3, #1
 81010b8:	d10e      	bne.n	81010d8 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 81010ba:	4b49      	ldr	r3, [pc, #292]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81010c0:	4a47      	ldr	r2, [pc, #284]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81010c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 81010ca:	4b45      	ldr	r3, [pc, #276]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 81010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81010d4:	617b      	str	r3, [r7, #20]
 81010d6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 81010d8:	4b41      	ldr	r3, [pc, #260]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010de:	4a40      	ldr	r2, [pc, #256]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010e8:	4b3d      	ldr	r3, [pc, #244]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 81010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81010f2:	613b      	str	r3, [r7, #16]
 81010f4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 81010f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 81010fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010fe:	2302      	movs	r3, #2
 8101100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101104:	2300      	movs	r3, #0
 8101106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810110a:	2300      	movs	r3, #0
 810110c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8101110:	2309      	movs	r3, #9
 8101112:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101116:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810111a:	4619      	mov	r1, r3
 810111c:	4831      	ldr	r0, [pc, #196]	; (81011e4 <HAL_FDCAN_MspInit+0x194>)
 810111e:	f001 fe27 	bl	8102d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8101122:	e055      	b.n	81011d0 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	681b      	ldr	r3, [r3, #0]
 8101128:	4a2f      	ldr	r2, [pc, #188]	; (81011e8 <HAL_FDCAN_MspInit+0x198>)
 810112a:	4293      	cmp	r3, r2
 810112c:	d150      	bne.n	81011d0 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 810112e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8101132:	f04f 0300 	mov.w	r3, #0
 8101136:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 810113a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810113e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101142:	f107 0318 	add.w	r3, r7, #24
 8101146:	4618      	mov	r0, r3
 8101148:	f003 fb70 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 810114c:	4603      	mov	r3, r0
 810114e:	2b00      	cmp	r3, #0
 8101150:	d001      	beq.n	8101156 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8101152:	f7ff fe2d 	bl	8100db0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8101156:	4b21      	ldr	r3, [pc, #132]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 8101158:	681b      	ldr	r3, [r3, #0]
 810115a:	3301      	adds	r3, #1
 810115c:	4a1f      	ldr	r2, [pc, #124]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 810115e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8101160:	4b1e      	ldr	r3, [pc, #120]	; (81011dc <HAL_FDCAN_MspInit+0x18c>)
 8101162:	681b      	ldr	r3, [r3, #0]
 8101164:	2b01      	cmp	r3, #1
 8101166:	d10e      	bne.n	8101186 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8101168:	4b1d      	ldr	r3, [pc, #116]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 810116a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810116e:	4a1c      	ldr	r2, [pc, #112]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 8101170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101174:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8101178:	4b19      	ldr	r3, [pc, #100]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 810117a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 810117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101182:	60fb      	str	r3, [r7, #12]
 8101184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101186:	4b16      	ldr	r3, [pc, #88]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 8101188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810118c:	4a14      	ldr	r2, [pc, #80]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 810118e:	f043 0302 	orr.w	r3, r3, #2
 8101192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101196:	4b12      	ldr	r3, [pc, #72]	; (81011e0 <HAL_FDCAN_MspInit+0x190>)
 8101198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119c:	f003 0302 	and.w	r3, r3, #2
 81011a0:	60bb      	str	r3, [r7, #8]
 81011a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 81011a4:	f242 0320 	movw	r3, #8224	; 0x2020
 81011a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ac:	2302      	movs	r3, #2
 81011ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011b2:	2300      	movs	r3, #0
 81011b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011b8:	2300      	movs	r3, #0
 81011ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 81011be:	2309      	movs	r3, #9
 81011c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81011c8:	4619      	mov	r1, r3
 81011ca:	4808      	ldr	r0, [pc, #32]	; (81011ec <HAL_FDCAN_MspInit+0x19c>)
 81011cc:	f001 fdd0 	bl	8102d70 <HAL_GPIO_Init>
}
 81011d0:	bf00      	nop
 81011d2:	37f0      	adds	r7, #240	; 0xf0
 81011d4:	46bd      	mov	sp, r7
 81011d6:	bd80      	pop	{r7, pc}
 81011d8:	4000a000 	.word	0x4000a000
 81011dc:	10000ce0 	.word	0x10000ce0
 81011e0:	58024400 	.word	0x58024400
 81011e4:	58021c00 	.word	0x58021c00
 81011e8:	4000a400 	.word	0x4000a400
 81011ec:	58020400 	.word	0x58020400

081011f0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 81011f0:	b580      	push	{r7, lr}
 81011f2:	b0bc      	sub	sp, #240	; 0xf0
 81011f4:	af00      	add	r7, sp, #0
 81011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81011fc:	2200      	movs	r2, #0
 81011fe:	601a      	str	r2, [r3, #0]
 8101200:	605a      	str	r2, [r3, #4]
 8101202:	609a      	str	r2, [r3, #8]
 8101204:	60da      	str	r2, [r3, #12]
 8101206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101208:	f107 0318 	add.w	r3, r7, #24
 810120c:	22c0      	movs	r2, #192	; 0xc0
 810120e:	2100      	movs	r1, #0
 8101210:	4618      	mov	r0, r3
 8101212:	f008 fbc7 	bl	81099a4 <memset>
  if(hqspi->Instance==QUADSPI)
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	4a56      	ldr	r2, [pc, #344]	; (8101374 <HAL_QSPI_MspInit+0x184>)
 810121c:	4293      	cmp	r3, r2
 810121e:	f040 80a5 	bne.w	810136c <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8101222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8101226:	f04f 0300 	mov.w	r3, #0
 810122a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 810122e:	2300      	movs	r3, #0
 8101230:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101232:	f107 0318 	add.w	r3, r7, #24
 8101236:	4618      	mov	r0, r3
 8101238:	f003 faf8 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 810123c:	4603      	mov	r3, r0
 810123e:	2b00      	cmp	r3, #0
 8101240:	d001      	beq.n	8101246 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8101242:	f7ff fdb5 	bl	8100db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101246:	4b4c      	ldr	r3, [pc, #304]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101248:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810124c:	4a4a      	ldr	r2, [pc, #296]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 810124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101252:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101256:	4b48      	ldr	r3, [pc, #288]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101258:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810125c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101260:	617b      	str	r3, [r7, #20]
 8101262:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101264:	4b44      	ldr	r3, [pc, #272]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126a:	4a43      	ldr	r2, [pc, #268]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 810126c:	f043 0302 	orr.w	r3, r3, #2
 8101270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101274:	4b40      	ldr	r3, [pc, #256]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127a:	f003 0302 	and.w	r3, r3, #2
 810127e:	613b      	str	r3, [r7, #16]
 8101280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101282:	4b3d      	ldr	r3, [pc, #244]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	4a3b      	ldr	r2, [pc, #236]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 810128a:	f043 0320 	orr.w	r3, r3, #32
 810128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101292:	4b39      	ldr	r3, [pc, #228]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 8101294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101298:	f003 0320 	and.w	r3, r3, #32
 810129c:	60fb      	str	r3, [r7, #12]
 810129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 81012a0:	4b35      	ldr	r3, [pc, #212]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	4a34      	ldr	r2, [pc, #208]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 81012a8:	f043 0308 	orr.w	r3, r3, #8
 81012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b0:	4b31      	ldr	r3, [pc, #196]	; (8101378 <HAL_QSPI_MspInit+0x188>)
 81012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b6:	f003 0308 	and.w	r3, r3, #8
 81012ba:	60bb      	str	r3, [r7, #8]
 81012bc:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81012be:	2340      	movs	r3, #64	; 0x40
 81012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012c4:	2302      	movs	r3, #2
 81012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012ca:	2300      	movs	r3, #0
 81012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012d0:	2300      	movs	r3, #0
 81012d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81012d6:	230a      	movs	r3, #10
 81012d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81012e0:	4619      	mov	r1, r3
 81012e2:	4826      	ldr	r0, [pc, #152]	; (810137c <HAL_QSPI_MspInit+0x18c>)
 81012e4:	f001 fd44 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81012e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 81012ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012f0:	2302      	movs	r3, #2
 81012f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012f6:	2300      	movs	r3, #0
 81012f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012fc:	2300      	movs	r3, #0
 81012fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101302:	2309      	movs	r3, #9
 8101304:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810130c:	4619      	mov	r1, r3
 810130e:	481c      	ldr	r0, [pc, #112]	; (8101380 <HAL_QSPI_MspInit+0x190>)
 8101310:	f001 fd2e 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101318:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810131c:	2302      	movs	r3, #2
 810131e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101322:	2300      	movs	r3, #0
 8101324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101328:	2300      	movs	r3, #0
 810132a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 810132e:	230a      	movs	r3, #10
 8101330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101334:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101338:	4619      	mov	r1, r3
 810133a:	4811      	ldr	r0, [pc, #68]	; (8101380 <HAL_QSPI_MspInit+0x190>)
 810133c:	f001 fd18 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101344:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101348:	2302      	movs	r3, #2
 810134a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810134e:	2300      	movs	r3, #0
 8101350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101354:	2300      	movs	r3, #0
 8101356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810135a:	2309      	movs	r3, #9
 810135c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101360:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101364:	4619      	mov	r1, r3
 8101366:	4807      	ldr	r0, [pc, #28]	; (8101384 <HAL_QSPI_MspInit+0x194>)
 8101368:	f001 fd02 	bl	8102d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 810136c:	bf00      	nop
 810136e:	37f0      	adds	r7, #240	; 0xf0
 8101370:	46bd      	mov	sp, r7
 8101372:	bd80      	pop	{r7, pc}
 8101374:	52005000 	.word	0x52005000
 8101378:	58024400 	.word	0x58024400
 810137c:	58020400 	.word	0x58020400
 8101380:	58021400 	.word	0x58021400
 8101384:	58020c00 	.word	0x58020c00

08101388 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8101388:	b580      	push	{r7, lr}
 810138a:	b0bc      	sub	sp, #240	; 0xf0
 810138c:	af00      	add	r7, sp, #0
 810138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101390:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101394:	2200      	movs	r2, #0
 8101396:	601a      	str	r2, [r3, #0]
 8101398:	605a      	str	r2, [r3, #4]
 810139a:	609a      	str	r2, [r3, #8]
 810139c:	60da      	str	r2, [r3, #12]
 810139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81013a0:	f107 0318 	add.w	r3, r7, #24
 81013a4:	22c0      	movs	r2, #192	; 0xc0
 81013a6:	2100      	movs	r1, #0
 81013a8:	4618      	mov	r0, r3
 81013aa:	f008 fafb 	bl	81099a4 <memset>
  if(hmmc->Instance==SDMMC1)
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	681b      	ldr	r3, [r3, #0]
 81013b2:	4a4b      	ldr	r2, [pc, #300]	; (81014e0 <HAL_MMC_MspInit+0x158>)
 81013b4:	4293      	cmp	r3, r2
 81013b6:	f040 808f 	bne.w	81014d8 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 81013ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81013be:	f04f 0300 	mov.w	r3, #0
 81013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 81013c6:	2300      	movs	r3, #0
 81013c8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81013ca:	f107 0318 	add.w	r3, r7, #24
 81013ce:	4618      	mov	r0, r3
 81013d0:	f003 fa2c 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 81013d4:	4603      	mov	r3, r0
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d001      	beq.n	81013de <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 81013da:	f7ff fce9 	bl	8100db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 81013de:	4b41      	ldr	r3, [pc, #260]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 81013e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81013e4:	4a3f      	ldr	r2, [pc, #252]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 81013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81013ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81013ee:	4b3d      	ldr	r3, [pc, #244]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 81013f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81013f8:	617b      	str	r3, [r7, #20]
 81013fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81013fc:	4b39      	ldr	r3, [pc, #228]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 81013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101402:	4a38      	ldr	r2, [pc, #224]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 8101404:	f043 0304 	orr.w	r3, r3, #4
 8101408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810140c:	4b35      	ldr	r3, [pc, #212]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 810140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101412:	f003 0304 	and.w	r3, r3, #4
 8101416:	613b      	str	r3, [r7, #16]
 8101418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810141a:	4b32      	ldr	r3, [pc, #200]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 810141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101420:	4a30      	ldr	r2, [pc, #192]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 8101422:	f043 0302 	orr.w	r3, r3, #2
 8101426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810142a:	4b2e      	ldr	r3, [pc, #184]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 810142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101430:	f003 0302 	and.w	r3, r3, #2
 8101434:	60fb      	str	r3, [r7, #12]
 8101436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101438:	4b2a      	ldr	r3, [pc, #168]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 810143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810143e:	4a29      	ldr	r2, [pc, #164]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 8101440:	f043 0308 	orr.w	r3, r3, #8
 8101444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101448:	4b26      	ldr	r3, [pc, #152]	; (81014e4 <HAL_MMC_MspInit+0x15c>)
 810144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810144e:	f003 0308 	and.w	r3, r3, #8
 8101452:	60bb      	str	r3, [r7, #8]
 8101454:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101456:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 810145a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810145e:	2302      	movs	r3, #2
 8101460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101464:	2300      	movs	r3, #0
 8101466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810146a:	2303      	movs	r3, #3
 810146c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101470:	230c      	movs	r3, #12
 8101472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101476:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810147a:	4619      	mov	r1, r3
 810147c:	481a      	ldr	r0, [pc, #104]	; (81014e8 <HAL_MMC_MspInit+0x160>)
 810147e:	f001 fc77 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8101482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810148a:	2302      	movs	r3, #2
 810148c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101490:	2300      	movs	r3, #0
 8101492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101496:	2303      	movs	r3, #3
 8101498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810149c:	230c      	movs	r3, #12
 810149e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81014a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81014a6:	4619      	mov	r1, r3
 81014a8:	4810      	ldr	r0, [pc, #64]	; (81014ec <HAL_MMC_MspInit+0x164>)
 81014aa:	f001 fc61 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 81014ae:	2304      	movs	r3, #4
 81014b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81014b4:	2302      	movs	r3, #2
 81014b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ba:	2300      	movs	r3, #0
 81014bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81014c0:	2303      	movs	r3, #3
 81014c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 81014c6:	230c      	movs	r3, #12
 81014c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 81014cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81014d0:	4619      	mov	r1, r3
 81014d2:	4807      	ldr	r0, [pc, #28]	; (81014f0 <HAL_MMC_MspInit+0x168>)
 81014d4:	f001 fc4c 	bl	8102d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 81014d8:	bf00      	nop
 81014da:	37f0      	adds	r7, #240	; 0xf0
 81014dc:	46bd      	mov	sp, r7
 81014de:	bd80      	pop	{r7, pc}
 81014e0:	52007000 	.word	0x52007000
 81014e4:	58024400 	.word	0x58024400
 81014e8:	58020800 	.word	0x58020800
 81014ec:	58020400 	.word	0x58020400
 81014f0:	58020c00 	.word	0x58020c00

081014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81014f4:	b580      	push	{r7, lr}
 81014f6:	b0ba      	sub	sp, #232	; 0xe8
 81014f8:	af00      	add	r7, sp, #0
 81014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101500:	2200      	movs	r2, #0
 8101502:	601a      	str	r2, [r3, #0]
 8101504:	605a      	str	r2, [r3, #4]
 8101506:	609a      	str	r2, [r3, #8]
 8101508:	60da      	str	r2, [r3, #12]
 810150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810150c:	f107 0310 	add.w	r3, r7, #16
 8101510:	22c0      	movs	r2, #192	; 0xc0
 8101512:	2100      	movs	r1, #0
 8101514:	4618      	mov	r0, r3
 8101516:	f008 fa45 	bl	81099a4 <memset>
  if(huart->Instance==USART3)
 810151a:	687b      	ldr	r3, [r7, #4]
 810151c:	681b      	ldr	r3, [r3, #0]
 810151e:	4a27      	ldr	r2, [pc, #156]	; (81015bc <HAL_UART_MspInit+0xc8>)
 8101520:	4293      	cmp	r3, r2
 8101522:	d146      	bne.n	81015b2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101524:	f04f 0202 	mov.w	r2, #2
 8101528:	f04f 0300 	mov.w	r3, #0
 810152c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101530:	2300      	movs	r3, #0
 8101532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101536:	f107 0310 	add.w	r3, r7, #16
 810153a:	4618      	mov	r0, r3
 810153c:	f003 f976 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 8101540:	4603      	mov	r3, r0
 8101542:	2b00      	cmp	r3, #0
 8101544:	d001      	beq.n	810154a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101546:	f7ff fc33 	bl	8100db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810154a:	4b1d      	ldr	r3, [pc, #116]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 810154c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101550:	4a1b      	ldr	r2, [pc, #108]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 8101552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810155a:	4b19      	ldr	r3, [pc, #100]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 810155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101564:	60fb      	str	r3, [r7, #12]
 8101566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101568:	4b15      	ldr	r3, [pc, #84]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 810156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810156e:	4a14      	ldr	r2, [pc, #80]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 8101570:	f043 0302 	orr.w	r3, r3, #2
 8101574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101578:	4b11      	ldr	r3, [pc, #68]	; (81015c0 <HAL_UART_MspInit+0xcc>)
 810157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810157e:	f003 0302 	and.w	r3, r3, #2
 8101582:	60bb      	str	r3, [r7, #8]
 8101584:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8101586:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810158a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810158e:	2302      	movs	r3, #2
 8101590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101594:	2300      	movs	r3, #0
 8101596:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810159a:	2300      	movs	r3, #0
 810159c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81015a0:	2307      	movs	r3, #7
 81015a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81015a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015aa:	4619      	mov	r1, r3
 81015ac:	4805      	ldr	r0, [pc, #20]	; (81015c4 <HAL_UART_MspInit+0xd0>)
 81015ae:	f001 fbdf 	bl	8102d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81015b2:	bf00      	nop
 81015b4:	37e8      	adds	r7, #232	; 0xe8
 81015b6:	46bd      	mov	sp, r7
 81015b8:	bd80      	pop	{r7, pc}
 81015ba:	bf00      	nop
 81015bc:	40004800 	.word	0x40004800
 81015c0:	58024400 	.word	0x58024400
 81015c4:	58020400 	.word	0x58020400

081015c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81015c8:	b580      	push	{r7, lr}
 81015ca:	b0ba      	sub	sp, #232	; 0xe8
 81015cc:	af00      	add	r7, sp, #0
 81015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81015d4:	2200      	movs	r2, #0
 81015d6:	601a      	str	r2, [r3, #0]
 81015d8:	605a      	str	r2, [r3, #4]
 81015da:	609a      	str	r2, [r3, #8]
 81015dc:	60da      	str	r2, [r3, #12]
 81015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015e0:	f107 0310 	add.w	r3, r7, #16
 81015e4:	22c0      	movs	r2, #192	; 0xc0
 81015e6:	2100      	movs	r1, #0
 81015e8:	4618      	mov	r0, r3
 81015ea:	f008 f9db 	bl	81099a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	681b      	ldr	r3, [r3, #0]
 81015f2:	4a30      	ldr	r2, [pc, #192]	; (81016b4 <HAL_PCD_MspInit+0xec>)
 81015f4:	4293      	cmp	r3, r2
 81015f6:	d159      	bne.n	81016ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81015f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 81015fc:	f04f 0300 	mov.w	r3, #0
 8101600:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8101604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8101608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810160c:	f107 0310 	add.w	r3, r7, #16
 8101610:	4618      	mov	r0, r3
 8101612:	f003 f90b 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 8101616:	4603      	mov	r3, r0
 8101618:	2b00      	cmp	r3, #0
 810161a:	d001      	beq.n	8101620 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 810161c:	f7ff fbc8 	bl	8100db0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8101620:	f002 fe62 	bl	81042e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101624:	4b24      	ldr	r3, [pc, #144]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 8101626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810162a:	4a23      	ldr	r2, [pc, #140]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 810162c:	f043 0301 	orr.w	r3, r3, #1
 8101630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101634:	4b20      	ldr	r3, [pc, #128]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 8101636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810163a:	f003 0301 	and.w	r3, r3, #1
 810163e:	60fb      	str	r3, [r7, #12]
 8101640:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8101642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 810164a:	2300      	movs	r3, #0
 810164c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101650:	2300      	movs	r3, #0
 8101652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8101656:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810165a:	4619      	mov	r1, r3
 810165c:	4817      	ldr	r0, [pc, #92]	; (81016bc <HAL_PCD_MspInit+0xf4>)
 810165e:	f001 fb87 	bl	8102d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8101662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810166a:	2302      	movs	r3, #2
 810166c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101670:	2300      	movs	r3, #0
 8101672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101676:	2300      	movs	r3, #0
 8101678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 810167c:	230a      	movs	r3, #10
 810167e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101686:	4619      	mov	r1, r3
 8101688:	480c      	ldr	r0, [pc, #48]	; (81016bc <HAL_PCD_MspInit+0xf4>)
 810168a:	f001 fb71 	bl	8102d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810168e:	4b0a      	ldr	r3, [pc, #40]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 8101690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101694:	4a08      	ldr	r2, [pc, #32]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 8101696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810169a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810169e:	4b06      	ldr	r3, [pc, #24]	; (81016b8 <HAL_PCD_MspInit+0xf0>)
 81016a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81016a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81016a8:	60bb      	str	r3, [r7, #8]
 81016aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 81016ac:	bf00      	nop
 81016ae:	37e8      	adds	r7, #232	; 0xe8
 81016b0:	46bd      	mov	sp, r7
 81016b2:	bd80      	pop	{r7, pc}
 81016b4:	40080000 	.word	0x40080000
 81016b8:	58024400 	.word	0x58024400
 81016bc:	58020000 	.word	0x58020000

081016c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 81016c0:	b580      	push	{r7, lr}
 81016c2:	b0b8      	sub	sp, #224	; 0xe0
 81016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 81016c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81016ca:	2200      	movs	r2, #0
 81016cc:	601a      	str	r2, [r3, #0]
 81016ce:	605a      	str	r2, [r3, #4]
 81016d0:	609a      	str	r2, [r3, #8]
 81016d2:	60da      	str	r2, [r3, #12]
 81016d4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81016d6:	4b51      	ldr	r3, [pc, #324]	; (810181c <HAL_FMC_MspInit+0x15c>)
 81016d8:	681b      	ldr	r3, [r3, #0]
 81016da:	2b00      	cmp	r3, #0
 81016dc:	f040 8099 	bne.w	8101812 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 81016e0:	4b4e      	ldr	r3, [pc, #312]	; (810181c <HAL_FMC_MspInit+0x15c>)
 81016e2:	2201      	movs	r2, #1
 81016e4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016e6:	f107 0308 	add.w	r3, r7, #8
 81016ea:	22c0      	movs	r2, #192	; 0xc0
 81016ec:	2100      	movs	r1, #0
 81016ee:	4618      	mov	r0, r3
 81016f0:	f008 f958 	bl	81099a4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81016f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81016f8:	f04f 0300 	mov.w	r3, #0
 81016fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8101700:	2300      	movs	r3, #0
 8101702:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101704:	f107 0308 	add.w	r3, r7, #8
 8101708:	4618      	mov	r0, r3
 810170a:	f003 f88f 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 810170e:	4603      	mov	r3, r0
 8101710:	2b00      	cmp	r3, #0
 8101712:	d001      	beq.n	8101718 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8101714:	f7ff fb4c 	bl	8100db0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8101718:	4b41      	ldr	r3, [pc, #260]	; (8101820 <HAL_FMC_MspInit+0x160>)
 810171a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810171e:	4a40      	ldr	r2, [pc, #256]	; (8101820 <HAL_FMC_MspInit+0x160>)
 8101720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101724:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101728:	4b3d      	ldr	r3, [pc, #244]	; (8101820 <HAL_FMC_MspInit+0x160>)
 810172a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101732:	607b      	str	r3, [r7, #4]
 8101734:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101736:	f64f 7383 	movw	r3, #65411	; 0xff83
 810173a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810173e:	2302      	movs	r3, #2
 8101740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101744:	2300      	movs	r3, #0
 8101746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810174a:	2303      	movs	r3, #3
 810174c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101750:	230c      	movs	r3, #12
 8101752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101756:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810175a:	4619      	mov	r1, r3
 810175c:	4831      	ldr	r0, [pc, #196]	; (8101824 <HAL_FMC_MspInit+0x164>)
 810175e:	f001 fb07 	bl	8102d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8101762:	f248 1333 	movw	r3, #33075	; 0x8133
 8101766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810176a:	2302      	movs	r3, #2
 810176c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101770:	2300      	movs	r3, #0
 8101772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101776:	2303      	movs	r3, #3
 8101778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810177c:	230c      	movs	r3, #12
 810177e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101782:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101786:	4619      	mov	r1, r3
 8101788:	4827      	ldr	r0, [pc, #156]	; (8101828 <HAL_FMC_MspInit+0x168>)
 810178a:	f001 faf1 	bl	8102d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 810178e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8101792:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101796:	2302      	movs	r3, #2
 8101798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810179c:	2300      	movs	r3, #0
 810179e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017a2:	2303      	movs	r3, #3
 81017a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81017a8:	230c      	movs	r3, #12
 81017aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81017ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81017b2:	4619      	mov	r1, r3
 81017b4:	481d      	ldr	r0, [pc, #116]	; (810182c <HAL_FMC_MspInit+0x16c>)
 81017b6:	f001 fadb 	bl	8102d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 81017ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 81017be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017c2:	2302      	movs	r3, #2
 81017c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017c8:	2300      	movs	r3, #0
 81017ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017ce:	2303      	movs	r3, #3
 81017d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81017d4:	230c      	movs	r3, #12
 81017d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81017da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81017de:	4619      	mov	r1, r3
 81017e0:	4813      	ldr	r0, [pc, #76]	; (8101830 <HAL_FMC_MspInit+0x170>)
 81017e2:	f001 fac5 	bl	8102d70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81017e6:	23e0      	movs	r3, #224	; 0xe0
 81017e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017ec:	2302      	movs	r3, #2
 81017ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017f2:	2300      	movs	r3, #0
 81017f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81017f8:	2303      	movs	r3, #3
 81017fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81017fe:	230c      	movs	r3, #12
 8101800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101804:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101808:	4619      	mov	r1, r3
 810180a:	480a      	ldr	r0, [pc, #40]	; (8101834 <HAL_FMC_MspInit+0x174>)
 810180c:	f001 fab0 	bl	8102d70 <HAL_GPIO_Init>
 8101810:	e000      	b.n	8101814 <HAL_FMC_MspInit+0x154>
    return;
 8101812:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8101814:	37e0      	adds	r7, #224	; 0xe0
 8101816:	46bd      	mov	sp, r7
 8101818:	bd80      	pop	{r7, pc}
 810181a:	bf00      	nop
 810181c:	10000ce4 	.word	0x10000ce4
 8101820:	58024400 	.word	0x58024400
 8101824:	58021000 	.word	0x58021000
 8101828:	58021800 	.word	0x58021800
 810182c:	58020c00 	.word	0x58020c00
 8101830:	58021400 	.word	0x58021400
 8101834:	58021c00 	.word	0x58021c00

08101838 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8101838:	b580      	push	{r7, lr}
 810183a:	b082      	sub	sp, #8
 810183c:	af00      	add	r7, sp, #0
 810183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8101840:	f7ff ff3e 	bl	81016c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101844:	bf00      	nop
 8101846:	3708      	adds	r7, #8
 8101848:	46bd      	mov	sp, r7
 810184a:	bd80      	pop	{r7, pc}

0810184c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 810184c:	b580      	push	{r7, lr}
 810184e:	b0ba      	sub	sp, #232	; 0xe8
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101854:	f107 0310 	add.w	r3, r7, #16
 8101858:	22c0      	movs	r2, #192	; 0xc0
 810185a:	2100      	movs	r1, #0
 810185c:	4618      	mov	r0, r3
 810185e:	f008 f8a1 	bl	81099a4 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	681b      	ldr	r3, [r3, #0]
 8101866:	4a45      	ldr	r2, [pc, #276]	; (810197c <HAL_SAI_MspInit+0x130>)
 8101868:	4293      	cmp	r3, r2
 810186a:	d13e      	bne.n	81018ea <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 810186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101870:	f04f 0300 	mov.w	r3, #0
 8101874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101878:	2300      	movs	r3, #0
 810187a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810187c:	f107 0310 	add.w	r3, r7, #16
 8101880:	4618      	mov	r0, r3
 8101882:	f002 ffd3 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 8101886:	4603      	mov	r3, r0
 8101888:	2b00      	cmp	r3, #0
 810188a:	d001      	beq.n	8101890 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 810188c:	f7ff fa90 	bl	8100db0 <Error_Handler>
    }

    if (SAI2_client == 0)
 8101890:	4b3b      	ldr	r3, [pc, #236]	; (8101980 <HAL_SAI_MspInit+0x134>)
 8101892:	681b      	ldr	r3, [r3, #0]
 8101894:	2b00      	cmp	r3, #0
 8101896:	d10e      	bne.n	81018b6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101898:	4b3a      	ldr	r3, [pc, #232]	; (8101984 <HAL_SAI_MspInit+0x138>)
 810189a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810189e:	4a39      	ldr	r2, [pc, #228]	; (8101984 <HAL_SAI_MspInit+0x138>)
 81018a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81018a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81018a8:	4b36      	ldr	r3, [pc, #216]	; (8101984 <HAL_SAI_MspInit+0x138>)
 81018aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81018ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81018b2:	60fb      	str	r3, [r7, #12]
 81018b4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 81018b6:	4b32      	ldr	r3, [pc, #200]	; (8101980 <HAL_SAI_MspInit+0x134>)
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	3301      	adds	r3, #1
 81018bc:	4a30      	ldr	r2, [pc, #192]	; (8101980 <HAL_SAI_MspInit+0x134>)
 81018be:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 81018c0:	23f0      	movs	r3, #240	; 0xf0
 81018c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018c6:	2302      	movs	r3, #2
 81018c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018cc:	2300      	movs	r3, #0
 81018ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018d2:	2300      	movs	r3, #0
 81018d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 81018d8:	230a      	movs	r3, #10
 81018da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81018de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81018e2:	4619      	mov	r1, r3
 81018e4:	4828      	ldr	r0, [pc, #160]	; (8101988 <HAL_SAI_MspInit+0x13c>)
 81018e6:	f001 fa43 	bl	8102d70 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	4a27      	ldr	r2, [pc, #156]	; (810198c <HAL_SAI_MspInit+0x140>)
 81018f0:	4293      	cmp	r3, r2
 81018f2:	d13f      	bne.n	8101974 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 81018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 81018f8:	f04f 0300 	mov.w	r3, #0
 81018fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101900:	2300      	movs	r3, #0
 8101902:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101904:	f107 0310 	add.w	r3, r7, #16
 8101908:	4618      	mov	r0, r3
 810190a:	f002 ff8f 	bl	810482c <HAL_RCCEx_PeriphCLKConfig>
 810190e:	4603      	mov	r3, r0
 8101910:	2b00      	cmp	r3, #0
 8101912:	d001      	beq.n	8101918 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8101914:	f7ff fa4c 	bl	8100db0 <Error_Handler>
    }

      if (SAI2_client == 0)
 8101918:	4b19      	ldr	r3, [pc, #100]	; (8101980 <HAL_SAI_MspInit+0x134>)
 810191a:	681b      	ldr	r3, [r3, #0]
 810191c:	2b00      	cmp	r3, #0
 810191e:	d10e      	bne.n	810193e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101920:	4b18      	ldr	r3, [pc, #96]	; (8101984 <HAL_SAI_MspInit+0x138>)
 8101922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101926:	4a17      	ldr	r2, [pc, #92]	; (8101984 <HAL_SAI_MspInit+0x138>)
 8101928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810192c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101930:	4b14      	ldr	r3, [pc, #80]	; (8101984 <HAL_SAI_MspInit+0x138>)
 8101932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810193a:	60bb      	str	r3, [r7, #8]
 810193c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 810193e:	4b10      	ldr	r3, [pc, #64]	; (8101980 <HAL_SAI_MspInit+0x134>)
 8101940:	681b      	ldr	r3, [r3, #0]
 8101942:	3301      	adds	r3, #1
 8101944:	4a0e      	ldr	r2, [pc, #56]	; (8101980 <HAL_SAI_MspInit+0x134>)
 8101946:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810194c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101950:	2302      	movs	r3, #2
 8101952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101956:	2300      	movs	r3, #0
 8101958:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810195c:	2300      	movs	r3, #0
 810195e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101962:	230a      	movs	r3, #10
 8101964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101968:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810196c:	4619      	mov	r1, r3
 810196e:	4808      	ldr	r0, [pc, #32]	; (8101990 <HAL_SAI_MspInit+0x144>)
 8101970:	f001 f9fe 	bl	8102d70 <HAL_GPIO_Init>

    }
}
 8101974:	bf00      	nop
 8101976:	37e8      	adds	r7, #232	; 0xe8
 8101978:	46bd      	mov	sp, r7
 810197a:	bd80      	pop	{r7, pc}
 810197c:	40015c04 	.word	0x40015c04
 8101980:	10000ce8 	.word	0x10000ce8
 8101984:	58024400 	.word	0x58024400
 8101988:	58022000 	.word	0x58022000
 810198c:	40015c24 	.word	0x40015c24
 8101990:	58021800 	.word	0x58021800

08101994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101994:	b480      	push	{r7}
 8101996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101998:	e7fe      	b.n	8101998 <NMI_Handler+0x4>

0810199a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810199a:	b480      	push	{r7}
 810199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810199e:	e7fe      	b.n	810199e <HardFault_Handler+0x4>

081019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81019a0:	b480      	push	{r7}
 81019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81019a4:	e7fe      	b.n	81019a4 <MemManage_Handler+0x4>

081019a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81019a6:	b480      	push	{r7}
 81019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81019aa:	e7fe      	b.n	81019aa <BusFault_Handler+0x4>

081019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81019ac:	b480      	push	{r7}
 81019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81019b0:	e7fe      	b.n	81019b0 <UsageFault_Handler+0x4>

081019b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81019b2:	b480      	push	{r7}
 81019b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81019b6:	bf00      	nop
 81019b8:	46bd      	mov	sp, r7
 81019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019be:	4770      	bx	lr

081019c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81019c0:	b480      	push	{r7}
 81019c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81019c4:	bf00      	nop
 81019c6:	46bd      	mov	sp, r7
 81019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019cc:	4770      	bx	lr

081019ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81019ce:	b480      	push	{r7}
 81019d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81019d2:	bf00      	nop
 81019d4:	46bd      	mov	sp, r7
 81019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019da:	4770      	bx	lr

081019dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81019e0:	f000 f8d8 	bl	8101b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81019e4:	bf00      	nop
 81019e6:	bd80      	pop	{r7, pc}

081019e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81019e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101a20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81019ec:	f000 f826 	bl	8101a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81019f0:	480c      	ldr	r0, [pc, #48]	; (8101a24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81019f2:	490d      	ldr	r1, [pc, #52]	; (8101a28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81019f4:	4a0d      	ldr	r2, [pc, #52]	; (8101a2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81019f8:	e002      	b.n	8101a00 <LoopCopyDataInit>

081019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81019fe:	3304      	adds	r3, #4

08101a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101a04:	d3f9      	bcc.n	81019fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101a06:	4a0a      	ldr	r2, [pc, #40]	; (8101a30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101a08:	4c0a      	ldr	r4, [pc, #40]	; (8101a34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101a0c:	e001      	b.n	8101a12 <LoopFillZerobss>

08101a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101a10:	3204      	adds	r2, #4

08101a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101a14:	d3fb      	bcc.n	8101a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101a16:	f007 ff93 	bl	8109940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101a1a:	f7fe fddf 	bl	81005dc <main>
  bx  lr
 8101a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101a20:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101a24:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101a28:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101a2c:	08109a60 	.word	0x08109a60
  ldr r2, =_sbss
 8101a30:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8101a34:	10000cf0 	.word	0x10000cf0

08101a38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101a38:	e7fe      	b.n	8101a38 <ADC3_IRQHandler>
	...

08101a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101a3c:	b480      	push	{r7}
 8101a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101a40:	4b09      	ldr	r3, [pc, #36]	; (8101a68 <SystemInit+0x2c>)
 8101a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101a46:	4a08      	ldr	r2, [pc, #32]	; (8101a68 <SystemInit+0x2c>)
 8101a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101a50:	4b05      	ldr	r3, [pc, #20]	; (8101a68 <SystemInit+0x2c>)
 8101a52:	691b      	ldr	r3, [r3, #16]
 8101a54:	4a04      	ldr	r2, [pc, #16]	; (8101a68 <SystemInit+0x2c>)
 8101a56:	f043 0310 	orr.w	r3, r3, #16
 8101a5a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101a5c:	bf00      	nop
 8101a5e:	46bd      	mov	sp, r7
 8101a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a64:	4770      	bx	lr
 8101a66:	bf00      	nop
 8101a68:	e000ed00 	.word	0xe000ed00

08101a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101a6c:	b580      	push	{r7, lr}
 8101a6e:	b082      	sub	sp, #8
 8101a70:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101a72:	4b28      	ldr	r3, [pc, #160]	; (8101b14 <HAL_Init+0xa8>)
 8101a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a78:	4a26      	ldr	r2, [pc, #152]	; (8101b14 <HAL_Init+0xa8>)
 8101a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101a7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101a82:	4b24      	ldr	r3, [pc, #144]	; (8101b14 <HAL_Init+0xa8>)
 8101a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101a8c:	603b      	str	r3, [r7, #0]
 8101a8e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101a90:	4b21      	ldr	r3, [pc, #132]	; (8101b18 <HAL_Init+0xac>)
 8101a92:	681b      	ldr	r3, [r3, #0]
 8101a94:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101a98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101a9c:	4a1e      	ldr	r2, [pc, #120]	; (8101b18 <HAL_Init+0xac>)
 8101a9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101aa2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101aa4:	4b1c      	ldr	r3, [pc, #112]	; (8101b18 <HAL_Init+0xac>)
 8101aa6:	681b      	ldr	r3, [r3, #0]
 8101aa8:	4a1b      	ldr	r2, [pc, #108]	; (8101b18 <HAL_Init+0xac>)
 8101aaa:	f043 0301 	orr.w	r3, r3, #1
 8101aae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101ab0:	2003      	movs	r0, #3
 8101ab2:	f000 f985 	bl	8101dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101ab6:	f002 fce1 	bl	810447c <HAL_RCC_GetSysClockFreq>
 8101aba:	4602      	mov	r2, r0
 8101abc:	4b15      	ldr	r3, [pc, #84]	; (8101b14 <HAL_Init+0xa8>)
 8101abe:	699b      	ldr	r3, [r3, #24]
 8101ac0:	0a1b      	lsrs	r3, r3, #8
 8101ac2:	f003 030f 	and.w	r3, r3, #15
 8101ac6:	4915      	ldr	r1, [pc, #84]	; (8101b1c <HAL_Init+0xb0>)
 8101ac8:	5ccb      	ldrb	r3, [r1, r3]
 8101aca:	f003 031f 	and.w	r3, r3, #31
 8101ace:	fa22 f303 	lsr.w	r3, r2, r3
 8101ad2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ad4:	4b0f      	ldr	r3, [pc, #60]	; (8101b14 <HAL_Init+0xa8>)
 8101ad6:	699b      	ldr	r3, [r3, #24]
 8101ad8:	f003 030f 	and.w	r3, r3, #15
 8101adc:	4a0f      	ldr	r2, [pc, #60]	; (8101b1c <HAL_Init+0xb0>)
 8101ade:	5cd3      	ldrb	r3, [r2, r3]
 8101ae0:	f003 031f 	and.w	r3, r3, #31
 8101ae4:	687a      	ldr	r2, [r7, #4]
 8101ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8101aea:	4a0d      	ldr	r2, [pc, #52]	; (8101b20 <HAL_Init+0xb4>)
 8101aec:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101aee:	4b0c      	ldr	r3, [pc, #48]	; (8101b20 <HAL_Init+0xb4>)
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	4a0c      	ldr	r2, [pc, #48]	; (8101b24 <HAL_Init+0xb8>)
 8101af4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101af6:	2000      	movs	r0, #0
 8101af8:	f000 f816 	bl	8101b28 <HAL_InitTick>
 8101afc:	4603      	mov	r3, r0
 8101afe:	2b00      	cmp	r3, #0
 8101b00:	d001      	beq.n	8101b06 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101b02:	2301      	movs	r3, #1
 8101b04:	e002      	b.n	8101b0c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101b06:	f7ff f959 	bl	8100dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101b0a:	2300      	movs	r3, #0
}
 8101b0c:	4618      	mov	r0, r3
 8101b0e:	3708      	adds	r7, #8
 8101b10:	46bd      	mov	sp, r7
 8101b12:	bd80      	pop	{r7, pc}
 8101b14:	58024400 	.word	0x58024400
 8101b18:	40024400 	.word	0x40024400
 8101b1c:	08109a18 	.word	0x08109a18
 8101b20:	10000004 	.word	0x10000004
 8101b24:	10000000 	.word	0x10000000

08101b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b28:	b580      	push	{r7, lr}
 8101b2a:	b082      	sub	sp, #8
 8101b2c:	af00      	add	r7, sp, #0
 8101b2e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101b30:	4b15      	ldr	r3, [pc, #84]	; (8101b88 <HAL_InitTick+0x60>)
 8101b32:	781b      	ldrb	r3, [r3, #0]
 8101b34:	2b00      	cmp	r3, #0
 8101b36:	d101      	bne.n	8101b3c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101b38:	2301      	movs	r3, #1
 8101b3a:	e021      	b.n	8101b80 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101b3c:	4b13      	ldr	r3, [pc, #76]	; (8101b8c <HAL_InitTick+0x64>)
 8101b3e:	681a      	ldr	r2, [r3, #0]
 8101b40:	4b11      	ldr	r3, [pc, #68]	; (8101b88 <HAL_InitTick+0x60>)
 8101b42:	781b      	ldrb	r3, [r3, #0]
 8101b44:	4619      	mov	r1, r3
 8101b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8101b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101b52:	4618      	mov	r0, r3
 8101b54:	f000 f959 	bl	8101e0a <HAL_SYSTICK_Config>
 8101b58:	4603      	mov	r3, r0
 8101b5a:	2b00      	cmp	r3, #0
 8101b5c:	d001      	beq.n	8101b62 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101b5e:	2301      	movs	r3, #1
 8101b60:	e00e      	b.n	8101b80 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	2b0f      	cmp	r3, #15
 8101b66:	d80a      	bhi.n	8101b7e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101b68:	2200      	movs	r2, #0
 8101b6a:	6879      	ldr	r1, [r7, #4]
 8101b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8101b70:	f000 f931 	bl	8101dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101b74:	4a06      	ldr	r2, [pc, #24]	; (8101b90 <HAL_InitTick+0x68>)
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	e000      	b.n	8101b80 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101b7e:	2301      	movs	r3, #1
}
 8101b80:	4618      	mov	r0, r3
 8101b82:	3708      	adds	r7, #8
 8101b84:	46bd      	mov	sp, r7
 8101b86:	bd80      	pop	{r7, pc}
 8101b88:	1000000c 	.word	0x1000000c
 8101b8c:	10000000 	.word	0x10000000
 8101b90:	10000008 	.word	0x10000008

08101b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101b94:	b480      	push	{r7}
 8101b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101b98:	4b06      	ldr	r3, [pc, #24]	; (8101bb4 <HAL_IncTick+0x20>)
 8101b9a:	781b      	ldrb	r3, [r3, #0]
 8101b9c:	461a      	mov	r2, r3
 8101b9e:	4b06      	ldr	r3, [pc, #24]	; (8101bb8 <HAL_IncTick+0x24>)
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	4413      	add	r3, r2
 8101ba4:	4a04      	ldr	r2, [pc, #16]	; (8101bb8 <HAL_IncTick+0x24>)
 8101ba6:	6013      	str	r3, [r2, #0]
}
 8101ba8:	bf00      	nop
 8101baa:	46bd      	mov	sp, r7
 8101bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb0:	4770      	bx	lr
 8101bb2:	bf00      	nop
 8101bb4:	1000000c 	.word	0x1000000c
 8101bb8:	10000cec 	.word	0x10000cec

08101bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101bbc:	b480      	push	{r7}
 8101bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8101bc0:	4b03      	ldr	r3, [pc, #12]	; (8101bd0 <HAL_GetTick+0x14>)
 8101bc2:	681b      	ldr	r3, [r3, #0]
}
 8101bc4:	4618      	mov	r0, r3
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bcc:	4770      	bx	lr
 8101bce:	bf00      	nop
 8101bd0:	10000cec 	.word	0x10000cec

08101bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b084      	sub	sp, #16
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101bdc:	f7ff ffee 	bl	8101bbc <HAL_GetTick>
 8101be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101be6:	68fb      	ldr	r3, [r7, #12]
 8101be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101bec:	d005      	beq.n	8101bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101bee:	4b0a      	ldr	r3, [pc, #40]	; (8101c18 <HAL_Delay+0x44>)
 8101bf0:	781b      	ldrb	r3, [r3, #0]
 8101bf2:	461a      	mov	r2, r3
 8101bf4:	68fb      	ldr	r3, [r7, #12]
 8101bf6:	4413      	add	r3, r2
 8101bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101bfa:	bf00      	nop
 8101bfc:	f7ff ffde 	bl	8101bbc <HAL_GetTick>
 8101c00:	4602      	mov	r2, r0
 8101c02:	68bb      	ldr	r3, [r7, #8]
 8101c04:	1ad3      	subs	r3, r2, r3
 8101c06:	68fa      	ldr	r2, [r7, #12]
 8101c08:	429a      	cmp	r2, r3
 8101c0a:	d8f7      	bhi.n	8101bfc <HAL_Delay+0x28>
  {
  }
}
 8101c0c:	bf00      	nop
 8101c0e:	bf00      	nop
 8101c10:	3710      	adds	r7, #16
 8101c12:	46bd      	mov	sp, r7
 8101c14:	bd80      	pop	{r7, pc}
 8101c16:	bf00      	nop
 8101c18:	1000000c 	.word	0x1000000c

08101c1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101c1c:	b480      	push	{r7}
 8101c1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101c20:	4b03      	ldr	r3, [pc, #12]	; (8101c30 <HAL_GetREVID+0x14>)
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	0c1b      	lsrs	r3, r3, #16
}
 8101c26:	4618      	mov	r0, r3
 8101c28:	46bd      	mov	sp, r7
 8101c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c2e:	4770      	bx	lr
 8101c30:	5c001000 	.word	0x5c001000

08101c34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101c34:	b480      	push	{r7}
 8101c36:	b083      	sub	sp, #12
 8101c38:	af00      	add	r7, sp, #0
 8101c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8101c3c:	4b06      	ldr	r3, [pc, #24]	; (8101c58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101c3e:	685b      	ldr	r3, [r3, #4]
 8101c40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101c44:	4904      	ldr	r1, [pc, #16]	; (8101c58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	4313      	orrs	r3, r2
 8101c4a:	604b      	str	r3, [r1, #4]
}
 8101c4c:	bf00      	nop
 8101c4e:	370c      	adds	r7, #12
 8101c50:	46bd      	mov	sp, r7
 8101c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c56:	4770      	bx	lr
 8101c58:	58000400 	.word	0x58000400

08101c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101c5c:	b480      	push	{r7}
 8101c5e:	b085      	sub	sp, #20
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	f003 0307 	and.w	r3, r3, #7
 8101c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101c6c:	4b0c      	ldr	r3, [pc, #48]	; (8101ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8101c6e:	68db      	ldr	r3, [r3, #12]
 8101c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101c72:	68ba      	ldr	r2, [r7, #8]
 8101c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101c78:	4013      	ands	r3, r2
 8101c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101c7c:	68fb      	ldr	r3, [r7, #12]
 8101c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101c80:	68bb      	ldr	r3, [r7, #8]
 8101c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101c8e:	4a04      	ldr	r2, [pc, #16]	; (8101ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8101c90:	68bb      	ldr	r3, [r7, #8]
 8101c92:	60d3      	str	r3, [r2, #12]
}
 8101c94:	bf00      	nop
 8101c96:	3714      	adds	r7, #20
 8101c98:	46bd      	mov	sp, r7
 8101c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c9e:	4770      	bx	lr
 8101ca0:	e000ed00 	.word	0xe000ed00

08101ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101ca4:	b480      	push	{r7}
 8101ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101ca8:	4b04      	ldr	r3, [pc, #16]	; (8101cbc <__NVIC_GetPriorityGrouping+0x18>)
 8101caa:	68db      	ldr	r3, [r3, #12]
 8101cac:	0a1b      	lsrs	r3, r3, #8
 8101cae:	f003 0307 	and.w	r3, r3, #7
}
 8101cb2:	4618      	mov	r0, r3
 8101cb4:	46bd      	mov	sp, r7
 8101cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cba:	4770      	bx	lr
 8101cbc:	e000ed00 	.word	0xe000ed00

08101cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101cc0:	b480      	push	{r7}
 8101cc2:	b083      	sub	sp, #12
 8101cc4:	af00      	add	r7, sp, #0
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	6039      	str	r1, [r7, #0]
 8101cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	db0a      	blt.n	8101cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cd4:	683b      	ldr	r3, [r7, #0]
 8101cd6:	b2da      	uxtb	r2, r3
 8101cd8:	490c      	ldr	r1, [pc, #48]	; (8101d0c <__NVIC_SetPriority+0x4c>)
 8101cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101cde:	0112      	lsls	r2, r2, #4
 8101ce0:	b2d2      	uxtb	r2, r2
 8101ce2:	440b      	add	r3, r1
 8101ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ce8:	e00a      	b.n	8101d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101cea:	683b      	ldr	r3, [r7, #0]
 8101cec:	b2da      	uxtb	r2, r3
 8101cee:	4908      	ldr	r1, [pc, #32]	; (8101d10 <__NVIC_SetPriority+0x50>)
 8101cf0:	88fb      	ldrh	r3, [r7, #6]
 8101cf2:	f003 030f 	and.w	r3, r3, #15
 8101cf6:	3b04      	subs	r3, #4
 8101cf8:	0112      	lsls	r2, r2, #4
 8101cfa:	b2d2      	uxtb	r2, r2
 8101cfc:	440b      	add	r3, r1
 8101cfe:	761a      	strb	r2, [r3, #24]
}
 8101d00:	bf00      	nop
 8101d02:	370c      	adds	r7, #12
 8101d04:	46bd      	mov	sp, r7
 8101d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0a:	4770      	bx	lr
 8101d0c:	e000e100 	.word	0xe000e100
 8101d10:	e000ed00 	.word	0xe000ed00

08101d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101d14:	b480      	push	{r7}
 8101d16:	b089      	sub	sp, #36	; 0x24
 8101d18:	af00      	add	r7, sp, #0
 8101d1a:	60f8      	str	r0, [r7, #12]
 8101d1c:	60b9      	str	r1, [r7, #8]
 8101d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101d20:	68fb      	ldr	r3, [r7, #12]
 8101d22:	f003 0307 	and.w	r3, r3, #7
 8101d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101d28:	69fb      	ldr	r3, [r7, #28]
 8101d2a:	f1c3 0307 	rsb	r3, r3, #7
 8101d2e:	2b04      	cmp	r3, #4
 8101d30:	bf28      	it	cs
 8101d32:	2304      	movcs	r3, #4
 8101d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101d36:	69fb      	ldr	r3, [r7, #28]
 8101d38:	3304      	adds	r3, #4
 8101d3a:	2b06      	cmp	r3, #6
 8101d3c:	d902      	bls.n	8101d44 <NVIC_EncodePriority+0x30>
 8101d3e:	69fb      	ldr	r3, [r7, #28]
 8101d40:	3b03      	subs	r3, #3
 8101d42:	e000      	b.n	8101d46 <NVIC_EncodePriority+0x32>
 8101d44:	2300      	movs	r3, #0
 8101d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d48:	f04f 32ff 	mov.w	r2, #4294967295
 8101d4c:	69bb      	ldr	r3, [r7, #24]
 8101d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d52:	43da      	mvns	r2, r3
 8101d54:	68bb      	ldr	r3, [r7, #8]
 8101d56:	401a      	ands	r2, r3
 8101d58:	697b      	ldr	r3, [r7, #20]
 8101d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8101d60:	697b      	ldr	r3, [r7, #20]
 8101d62:	fa01 f303 	lsl.w	r3, r1, r3
 8101d66:	43d9      	mvns	r1, r3
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101d6c:	4313      	orrs	r3, r2
         );
}
 8101d6e:	4618      	mov	r0, r3
 8101d70:	3724      	adds	r7, #36	; 0x24
 8101d72:	46bd      	mov	sp, r7
 8101d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d78:	4770      	bx	lr
	...

08101d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101d7c:	b580      	push	{r7, lr}
 8101d7e:	b082      	sub	sp, #8
 8101d80:	af00      	add	r7, sp, #0
 8101d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	3b01      	subs	r3, #1
 8101d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101d8c:	d301      	bcc.n	8101d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101d8e:	2301      	movs	r3, #1
 8101d90:	e00f      	b.n	8101db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101d92:	4a0a      	ldr	r2, [pc, #40]	; (8101dbc <SysTick_Config+0x40>)
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	3b01      	subs	r3, #1
 8101d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101d9a:	210f      	movs	r1, #15
 8101d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8101da0:	f7ff ff8e 	bl	8101cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101da4:	4b05      	ldr	r3, [pc, #20]	; (8101dbc <SysTick_Config+0x40>)
 8101da6:	2200      	movs	r2, #0
 8101da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101daa:	4b04      	ldr	r3, [pc, #16]	; (8101dbc <SysTick_Config+0x40>)
 8101dac:	2207      	movs	r2, #7
 8101dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101db0:	2300      	movs	r3, #0
}
 8101db2:	4618      	mov	r0, r3
 8101db4:	3708      	adds	r7, #8
 8101db6:	46bd      	mov	sp, r7
 8101db8:	bd80      	pop	{r7, pc}
 8101dba:	bf00      	nop
 8101dbc:	e000e010 	.word	0xe000e010

08101dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101dc0:	b580      	push	{r7, lr}
 8101dc2:	b082      	sub	sp, #8
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101dc8:	6878      	ldr	r0, [r7, #4]
 8101dca:	f7ff ff47 	bl	8101c5c <__NVIC_SetPriorityGrouping>
}
 8101dce:	bf00      	nop
 8101dd0:	3708      	adds	r7, #8
 8101dd2:	46bd      	mov	sp, r7
 8101dd4:	bd80      	pop	{r7, pc}

08101dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101dd6:	b580      	push	{r7, lr}
 8101dd8:	b086      	sub	sp, #24
 8101dda:	af00      	add	r7, sp, #0
 8101ddc:	4603      	mov	r3, r0
 8101dde:	60b9      	str	r1, [r7, #8]
 8101de0:	607a      	str	r2, [r7, #4]
 8101de2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101de4:	f7ff ff5e 	bl	8101ca4 <__NVIC_GetPriorityGrouping>
 8101de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101dea:	687a      	ldr	r2, [r7, #4]
 8101dec:	68b9      	ldr	r1, [r7, #8]
 8101dee:	6978      	ldr	r0, [r7, #20]
 8101df0:	f7ff ff90 	bl	8101d14 <NVIC_EncodePriority>
 8101df4:	4602      	mov	r2, r0
 8101df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101dfa:	4611      	mov	r1, r2
 8101dfc:	4618      	mov	r0, r3
 8101dfe:	f7ff ff5f 	bl	8101cc0 <__NVIC_SetPriority>
}
 8101e02:	bf00      	nop
 8101e04:	3718      	adds	r7, #24
 8101e06:	46bd      	mov	sp, r7
 8101e08:	bd80      	pop	{r7, pc}

08101e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101e0a:	b580      	push	{r7, lr}
 8101e0c:	b082      	sub	sp, #8
 8101e0e:	af00      	add	r7, sp, #0
 8101e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101e12:	6878      	ldr	r0, [r7, #4]
 8101e14:	f7ff ffb2 	bl	8101d7c <SysTick_Config>
 8101e18:	4603      	mov	r3, r0
}
 8101e1a:	4618      	mov	r0, r3
 8101e1c:	3708      	adds	r7, #8
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	bd80      	pop	{r7, pc}
	...

08101e24 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101e24:	b480      	push	{r7}
 8101e26:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101e28:	4b07      	ldr	r3, [pc, #28]	; (8101e48 <HAL_GetCurrentCPUID+0x24>)
 8101e2a:	681b      	ldr	r3, [r3, #0]
 8101e2c:	091b      	lsrs	r3, r3, #4
 8101e2e:	f003 030f 	and.w	r3, r3, #15
 8101e32:	2b07      	cmp	r3, #7
 8101e34:	d101      	bne.n	8101e3a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101e36:	2303      	movs	r3, #3
 8101e38:	e000      	b.n	8101e3c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101e3a:	2301      	movs	r3, #1
  }
}
 8101e3c:	4618      	mov	r0, r3
 8101e3e:	46bd      	mov	sp, r7
 8101e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e44:	4770      	bx	lr
 8101e46:	bf00      	nop
 8101e48:	e000ed00 	.word	0xe000ed00

08101e4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8101e4c:	b580      	push	{r7, lr}
 8101e4e:	b084      	sub	sp, #16
 8101e50:	af00      	add	r7, sp, #0
 8101e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	2b00      	cmp	r3, #0
 8101e58:	d101      	bne.n	8101e5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8101e5a:	2301      	movs	r3, #1
 8101e5c:	e0d1      	b.n	8102002 <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101e64:	2b00      	cmp	r3, #0
 8101e66:	d106      	bne.n	8101e76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	2223      	movs	r2, #35	; 0x23
 8101e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101e70:	6878      	ldr	r0, [r7, #4]
 8101e72:	f7fe ffbd 	bl	8100df0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101e76:	4b65      	ldr	r3, [pc, #404]	; (810200c <HAL_ETH_Init+0x1c0>)
 8101e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e7c:	4a63      	ldr	r2, [pc, #396]	; (810200c <HAL_ETH_Init+0x1c0>)
 8101e7e:	f043 0302 	orr.w	r3, r3, #2
 8101e82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101e86:	4b61      	ldr	r3, [pc, #388]	; (810200c <HAL_ETH_Init+0x1c0>)
 8101e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101e8c:	f003 0302 	and.w	r3, r3, #2
 8101e90:	60bb      	str	r3, [r7, #8]
 8101e92:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	7a1b      	ldrb	r3, [r3, #8]
 8101e98:	2b00      	cmp	r3, #0
 8101e9a:	d103      	bne.n	8101ea4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8101e9c:	2000      	movs	r0, #0
 8101e9e:	f7ff fec9 	bl	8101c34 <HAL_SYSCFG_ETHInterfaceSelect>
 8101ea2:	e003      	b.n	8101eac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8101ea4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8101ea8:	f7ff fec4 	bl	8101c34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8101eac:	4b58      	ldr	r3, [pc, #352]	; (8102010 <HAL_ETH_Init+0x1c4>)
 8101eae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	687a      	ldr	r2, [r7, #4]
 8101ebc:	6812      	ldr	r2, [r2, #0]
 8101ebe:	f043 0301 	orr.w	r3, r3, #1
 8101ec2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101ec6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101ec8:	f7ff fe78 	bl	8101bbc <HAL_GetTick>
 8101ecc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101ece:	e011      	b.n	8101ef4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8101ed0:	f7ff fe74 	bl	8101bbc <HAL_GetTick>
 8101ed4:	4602      	mov	r2, r0
 8101ed6:	68fb      	ldr	r3, [r7, #12]
 8101ed8:	1ad3      	subs	r3, r2, r3
 8101eda:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8101ede:	d909      	bls.n	8101ef4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	2204      	movs	r2, #4
 8101ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8101ee8:	687b      	ldr	r3, [r7, #4]
 8101eea:	22e0      	movs	r2, #224	; 0xe0
 8101eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8101ef0:	2301      	movs	r3, #1
 8101ef2:	e086      	b.n	8102002 <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8101ef4:	687b      	ldr	r3, [r7, #4]
 8101ef6:	681b      	ldr	r3, [r3, #0]
 8101ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	f003 0301 	and.w	r3, r3, #1
 8101f02:	2b00      	cmp	r3, #0
 8101f04:	d1e4      	bne.n	8101ed0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8101f06:	6878      	ldr	r0, [r7, #4]
 8101f08:	f000 f886 	bl	8102018 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8101f0c:	f002 fc30 	bl	8104770 <HAL_RCC_GetHCLKFreq>
 8101f10:	4603      	mov	r3, r0
 8101f12:	4a40      	ldr	r2, [pc, #256]	; (8102014 <HAL_ETH_Init+0x1c8>)
 8101f14:	fba2 2303 	umull	r2, r3, r2, r3
 8101f18:	0c9a      	lsrs	r2, r3, #18
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	681b      	ldr	r3, [r3, #0]
 8101f1e:	3a01      	subs	r2, #1
 8101f20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8101f24:	6878      	ldr	r0, [r7, #4]
 8101f26:	f000 fa71 	bl	810240c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101f32:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8101f36:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8101f3a:	687a      	ldr	r2, [r7, #4]
 8101f3c:	6812      	ldr	r2, [r2, #0]
 8101f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8101f42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101f46:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	695b      	ldr	r3, [r3, #20]
 8101f4e:	f003 0303 	and.w	r3, r3, #3
 8101f52:	2b00      	cmp	r3, #0
 8101f54:	d009      	beq.n	8101f6a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	2201      	movs	r2, #1
 8101f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8101f5e:	687b      	ldr	r3, [r7, #4]
 8101f60:	22e0      	movs	r2, #224	; 0xe0
 8101f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8101f66:	2301      	movs	r3, #1
 8101f68:	e04b      	b.n	8102002 <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8101f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8101f7a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8101f7e:	687a      	ldr	r2, [r7, #4]
 8101f80:	6952      	ldr	r2, [r2, #20]
 8101f82:	0051      	lsls	r1, r2, #1
 8101f84:	687a      	ldr	r2, [r7, #4]
 8101f86:	6812      	ldr	r2, [r2, #0]
 8101f88:	430b      	orrs	r3, r1
 8101f8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101f8e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8101f92:	6878      	ldr	r0, [r7, #4]
 8101f94:	f000 fad7 	bl	8102546 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8101f98:	6878      	ldr	r0, [r7, #4]
 8101f9a:	f000 fb1d 	bl	81025d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	685b      	ldr	r3, [r3, #4]
 8101fa2:	3305      	adds	r3, #5
 8101fa4:	781b      	ldrb	r3, [r3, #0]
 8101fa6:	021a      	lsls	r2, r3, #8
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	685b      	ldr	r3, [r3, #4]
 8101fac:	3304      	adds	r3, #4
 8101fae:	781b      	ldrb	r3, [r3, #0]
 8101fb0:	4619      	mov	r1, r3
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	681b      	ldr	r3, [r3, #0]
 8101fb6:	430a      	orrs	r2, r1
 8101fb8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	685b      	ldr	r3, [r3, #4]
 8101fc0:	3303      	adds	r3, #3
 8101fc2:	781b      	ldrb	r3, [r3, #0]
 8101fc4:	061a      	lsls	r2, r3, #24
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	685b      	ldr	r3, [r3, #4]
 8101fca:	3302      	adds	r3, #2
 8101fcc:	781b      	ldrb	r3, [r3, #0]
 8101fce:	041b      	lsls	r3, r3, #16
 8101fd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	685b      	ldr	r3, [r3, #4]
 8101fd6:	3301      	adds	r3, #1
 8101fd8:	781b      	ldrb	r3, [r3, #0]
 8101fda:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101fdc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	685b      	ldr	r3, [r3, #4]
 8101fe2:	781b      	ldrb	r3, [r3, #0]
 8101fe4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8101fea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8101fec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	2200      	movs	r2, #0
 8101ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	2210      	movs	r2, #16
 8101ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8102000:	2300      	movs	r3, #0
}
 8102002:	4618      	mov	r0, r3
 8102004:	3710      	adds	r7, #16
 8102006:	46bd      	mov	sp, r7
 8102008:	bd80      	pop	{r7, pc}
 810200a:	bf00      	nop
 810200c:	58024400 	.word	0x58024400
 8102010:	58000400 	.word	0x58000400
 8102014:	431bde83 	.word	0x431bde83

08102018 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8102018:	b580      	push	{r7, lr}
 810201a:	b084      	sub	sp, #16
 810201c:	af00      	add	r7, sp, #0
 810201e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	681b      	ldr	r3, [r3, #0]
 8102024:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8102028:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810202a:	68fb      	ldr	r3, [r7, #12]
 810202c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102030:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8102032:	f002 fb9d 	bl	8104770 <HAL_RCC_GetHCLKFreq>
 8102036:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8102038:	68bb      	ldr	r3, [r7, #8]
 810203a:	4a1e      	ldr	r2, [pc, #120]	; (81020b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810203c:	4293      	cmp	r3, r2
 810203e:	d908      	bls.n	8102052 <HAL_ETH_SetMDIOClockRange+0x3a>
 8102040:	68bb      	ldr	r3, [r7, #8]
 8102042:	4a1d      	ldr	r2, [pc, #116]	; (81020b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8102044:	4293      	cmp	r3, r2
 8102046:	d804      	bhi.n	8102052 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8102048:	68fb      	ldr	r3, [r7, #12]
 810204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810204e:	60fb      	str	r3, [r7, #12]
 8102050:	e027      	b.n	81020a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8102052:	68bb      	ldr	r3, [r7, #8]
 8102054:	4a18      	ldr	r2, [pc, #96]	; (81020b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8102056:	4293      	cmp	r3, r2
 8102058:	d908      	bls.n	810206c <HAL_ETH_SetMDIOClockRange+0x54>
 810205a:	68bb      	ldr	r3, [r7, #8]
 810205c:	4a17      	ldr	r2, [pc, #92]	; (81020bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 810205e:	4293      	cmp	r3, r2
 8102060:	d204      	bcs.n	810206c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8102062:	68fb      	ldr	r3, [r7, #12]
 8102064:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8102068:	60fb      	str	r3, [r7, #12]
 810206a:	e01a      	b.n	81020a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 810206c:	68bb      	ldr	r3, [r7, #8]
 810206e:	4a13      	ldr	r2, [pc, #76]	; (81020bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8102070:	4293      	cmp	r3, r2
 8102072:	d303      	bcc.n	810207c <HAL_ETH_SetMDIOClockRange+0x64>
 8102074:	68bb      	ldr	r3, [r7, #8]
 8102076:	4a12      	ldr	r2, [pc, #72]	; (81020c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8102078:	4293      	cmp	r3, r2
 810207a:	d911      	bls.n	81020a0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 810207c:	68bb      	ldr	r3, [r7, #8]
 810207e:	4a10      	ldr	r2, [pc, #64]	; (81020c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8102080:	4293      	cmp	r3, r2
 8102082:	d908      	bls.n	8102096 <HAL_ETH_SetMDIOClockRange+0x7e>
 8102084:	68bb      	ldr	r3, [r7, #8]
 8102086:	4a0f      	ldr	r2, [pc, #60]	; (81020c4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8102088:	4293      	cmp	r3, r2
 810208a:	d804      	bhi.n	8102096 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810208c:	68fb      	ldr	r3, [r7, #12]
 810208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102092:	60fb      	str	r3, [r7, #12]
 8102094:	e005      	b.n	81020a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8102096:	68fb      	ldr	r3, [r7, #12]
 8102098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810209c:	60fb      	str	r3, [r7, #12]
 810209e:	e000      	b.n	81020a2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 81020a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	68fa      	ldr	r2, [r7, #12]
 81020a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 81020ac:	bf00      	nop
 81020ae:	3710      	adds	r7, #16
 81020b0:	46bd      	mov	sp, r7
 81020b2:	bd80      	pop	{r7, pc}
 81020b4:	01312cff 	.word	0x01312cff
 81020b8:	02160ebf 	.word	0x02160ebf
 81020bc:	03938700 	.word	0x03938700
 81020c0:	05f5e0ff 	.word	0x05f5e0ff
 81020c4:	08f0d17f 	.word	0x08f0d17f

081020c8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81020c8:	b480      	push	{r7}
 81020ca:	b085      	sub	sp, #20
 81020cc:	af00      	add	r7, sp, #0
 81020ce:	6078      	str	r0, [r7, #4]
 81020d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81020d2:	683b      	ldr	r3, [r7, #0]
 81020d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81020d6:	683b      	ldr	r3, [r7, #0]
 81020d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81020da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81020dc:	683b      	ldr	r3, [r7, #0]
 81020de:	791b      	ldrb	r3, [r3, #4]
 81020e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81020e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81020e4:	683b      	ldr	r3, [r7, #0]
 81020e6:	7b1b      	ldrb	r3, [r3, #12]
 81020e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81020ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81020ec:	683b      	ldr	r3, [r7, #0]
 81020ee:	7b5b      	ldrb	r3, [r3, #13]
 81020f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81020f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81020f4:	683b      	ldr	r3, [r7, #0]
 81020f6:	7b9b      	ldrb	r3, [r3, #14]
 81020f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81020fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81020fc:	683b      	ldr	r3, [r7, #0]
 81020fe:	7bdb      	ldrb	r3, [r3, #15]
 8102100:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8102102:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8102104:	683a      	ldr	r2, [r7, #0]
 8102106:	7c12      	ldrb	r2, [r2, #16]
 8102108:	2a00      	cmp	r2, #0
 810210a:	d102      	bne.n	8102112 <ETH_SetMACConfig+0x4a>
 810210c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8102110:	e000      	b.n	8102114 <ETH_SetMACConfig+0x4c>
 8102112:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8102114:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8102116:	683a      	ldr	r2, [r7, #0]
 8102118:	7c52      	ldrb	r2, [r2, #17]
 810211a:	2a00      	cmp	r2, #0
 810211c:	d102      	bne.n	8102124 <ETH_SetMACConfig+0x5c>
 810211e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102122:	e000      	b.n	8102126 <ETH_SetMACConfig+0x5e>
 8102124:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8102126:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8102128:	683b      	ldr	r3, [r7, #0]
 810212a:	7c9b      	ldrb	r3, [r3, #18]
 810212c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810212e:	431a      	orrs	r2, r3
               macconf->Speed |
 8102130:	683b      	ldr	r3, [r7, #0]
 8102132:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8102134:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8102136:	683b      	ldr	r3, [r7, #0]
 8102138:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810213a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 810213c:	683b      	ldr	r3, [r7, #0]
 810213e:	7f1b      	ldrb	r3, [r3, #28]
 8102140:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8102142:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8102144:	683b      	ldr	r3, [r7, #0]
 8102146:	7f5b      	ldrb	r3, [r3, #29]
 8102148:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810214a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810214c:	683a      	ldr	r2, [r7, #0]
 810214e:	7f92      	ldrb	r2, [r2, #30]
 8102150:	2a00      	cmp	r2, #0
 8102152:	d102      	bne.n	810215a <ETH_SetMACConfig+0x92>
 8102154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102158:	e000      	b.n	810215c <ETH_SetMACConfig+0x94>
 810215a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810215c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810215e:	683b      	ldr	r3, [r7, #0]
 8102160:	7fdb      	ldrb	r3, [r3, #31]
 8102162:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8102164:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8102166:	683a      	ldr	r2, [r7, #0]
 8102168:	f892 2020 	ldrb.w	r2, [r2, #32]
 810216c:	2a00      	cmp	r2, #0
 810216e:	d102      	bne.n	8102176 <ETH_SetMACConfig+0xae>
 8102170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102174:	e000      	b.n	8102178 <ETH_SetMACConfig+0xb0>
 8102176:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8102178:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810217a:	683b      	ldr	r3, [r7, #0]
 810217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810217e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8102180:	683b      	ldr	r3, [r7, #0]
 8102182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8102186:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8102188:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810218a:	683b      	ldr	r3, [r7, #0]
 810218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 810218e:	4313      	orrs	r3, r2
 8102190:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	681b      	ldr	r3, [r3, #0]
 8102196:	681a      	ldr	r2, [r3, #0]
 8102198:	4b57      	ldr	r3, [pc, #348]	; (81022f8 <ETH_SetMACConfig+0x230>)
 810219a:	4013      	ands	r3, r2
 810219c:	687a      	ldr	r2, [r7, #4]
 810219e:	6812      	ldr	r2, [r2, #0]
 81021a0:	68f9      	ldr	r1, [r7, #12]
 81021a2:	430b      	orrs	r3, r1
 81021a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81021a6:	683b      	ldr	r3, [r7, #0]
 81021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81021aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81021ac:	683b      	ldr	r3, [r7, #0]
 81021ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81021b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81021b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81021b6:	683b      	ldr	r3, [r7, #0]
 81021b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81021bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81021be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81021c0:	683b      	ldr	r3, [r7, #0]
 81021c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 81021c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81021c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81021ca:	683a      	ldr	r2, [r7, #0]
 81021cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 81021d0:	2a00      	cmp	r2, #0
 81021d2:	d102      	bne.n	81021da <ETH_SetMACConfig+0x112>
 81021d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81021d8:	e000      	b.n	81021dc <ETH_SetMACConfig+0x114>
 81021da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81021dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81021de:	683b      	ldr	r3, [r7, #0]
 81021e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81021e2:	4313      	orrs	r3, r2
 81021e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	685a      	ldr	r2, [r3, #4]
 81021ec:	4b43      	ldr	r3, [pc, #268]	; (81022fc <ETH_SetMACConfig+0x234>)
 81021ee:	4013      	ands	r3, r2
 81021f0:	687a      	ldr	r2, [r7, #4]
 81021f2:	6812      	ldr	r2, [r2, #0]
 81021f4:	68f9      	ldr	r1, [r7, #12]
 81021f6:	430b      	orrs	r3, r1
 81021f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81021fa:	683b      	ldr	r3, [r7, #0]
 81021fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102200:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8102202:	683b      	ldr	r3, [r7, #0]
 8102204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8102206:	4313      	orrs	r3, r2
 8102208:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	68db      	ldr	r3, [r3, #12]
 8102210:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8102214:	f023 0301 	bic.w	r3, r3, #1
 8102218:	687a      	ldr	r2, [r7, #4]
 810221a:	6812      	ldr	r2, [r2, #0]
 810221c:	68f9      	ldr	r1, [r7, #12]
 810221e:	430b      	orrs	r3, r1
 8102220:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102222:	683b      	ldr	r3, [r7, #0]
 8102224:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8102228:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810222a:	683b      	ldr	r3, [r7, #0]
 810222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810222e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8102230:	683a      	ldr	r2, [r7, #0]
 8102232:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8102236:	2a00      	cmp	r2, #0
 8102238:	d101      	bne.n	810223e <ETH_SetMACConfig+0x176>
 810223a:	2280      	movs	r2, #128	; 0x80
 810223c:	e000      	b.n	8102240 <ETH_SetMACConfig+0x178>
 810223e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8102240:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8102242:	683b      	ldr	r3, [r7, #0]
 8102244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102246:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8102248:	4313      	orrs	r3, r2
 810224a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102252:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8102256:	4013      	ands	r3, r2
 8102258:	687a      	ldr	r2, [r7, #4]
 810225a:	6812      	ldr	r2, [r2, #0]
 810225c:	68f9      	ldr	r1, [r7, #12]
 810225e:	430b      	orrs	r3, r1
 8102260:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102262:	683b      	ldr	r3, [r7, #0]
 8102264:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8102268:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810226a:	683b      	ldr	r3, [r7, #0]
 810226c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8102270:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8102272:	4313      	orrs	r3, r2
 8102274:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810227e:	f023 0103 	bic.w	r1, r3, #3
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	681b      	ldr	r3, [r3, #0]
 8102286:	68fa      	ldr	r2, [r7, #12]
 8102288:	430a      	orrs	r2, r1
 810228a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	681b      	ldr	r3, [r3, #0]
 8102292:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8102296:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 810229a:	683b      	ldr	r3, [r7, #0]
 810229c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	430a      	orrs	r2, r1
 81022a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81022a8:	683b      	ldr	r3, [r7, #0]
 81022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81022ac:	683a      	ldr	r2, [r7, #0]
 81022ae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 81022b2:	2a00      	cmp	r2, #0
 81022b4:	d101      	bne.n	81022ba <ETH_SetMACConfig+0x1f2>
 81022b6:	2240      	movs	r2, #64	; 0x40
 81022b8:	e000      	b.n	81022bc <ETH_SetMACConfig+0x1f4>
 81022ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81022bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81022be:	683b      	ldr	r3, [r7, #0]
 81022c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 81022c4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81022c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81022c8:	683b      	ldr	r3, [r7, #0]
 81022ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 81022ce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81022d0:	4313      	orrs	r3, r2
 81022d2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 81022dc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	68fa      	ldr	r2, [r7, #12]
 81022e6:	430a      	orrs	r2, r1
 81022e8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 81022ec:	bf00      	nop
 81022ee:	3714      	adds	r7, #20
 81022f0:	46bd      	mov	sp, r7
 81022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f6:	4770      	bx	lr
 81022f8:	00048083 	.word	0x00048083
 81022fc:	c0f88000 	.word	0xc0f88000

08102300 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8102300:	b480      	push	{r7}
 8102302:	b085      	sub	sp, #20
 8102304:	af00      	add	r7, sp, #0
 8102306:	6078      	str	r0, [r7, #4]
 8102308:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810230a:	687b      	ldr	r3, [r7, #4]
 810230c:	681b      	ldr	r3, [r3, #0]
 810230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8102318:	f023 0302 	bic.w	r3, r3, #2
 810231c:	683a      	ldr	r2, [r7, #0]
 810231e:	6811      	ldr	r1, [r2, #0]
 8102320:	687a      	ldr	r2, [r7, #4]
 8102322:	6812      	ldr	r2, [r2, #0]
 8102324:	430b      	orrs	r3, r1
 8102326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810232a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	791b      	ldrb	r3, [r3, #4]
 8102330:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8102332:	683b      	ldr	r3, [r7, #0]
 8102334:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8102336:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8102338:	683b      	ldr	r3, [r7, #0]
 810233a:	7b1b      	ldrb	r3, [r3, #12]
 810233c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810233e:	4313      	orrs	r3, r2
 8102340:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810234a:	685b      	ldr	r3, [r3, #4]
 810234c:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8102350:	f023 0301 	bic.w	r3, r3, #1
 8102354:	687a      	ldr	r2, [r7, #4]
 8102356:	6812      	ldr	r2, [r2, #0]
 8102358:	68f9      	ldr	r1, [r7, #12]
 810235a:	430b      	orrs	r3, r1
 810235c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8102360:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8102362:	683b      	ldr	r3, [r7, #0]
 8102364:	7b5b      	ldrb	r3, [r3, #13]
 8102366:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8102368:	683b      	ldr	r3, [r7, #0]
 810236a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810236c:	4313      	orrs	r3, r2
 810236e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102378:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 810237c:	4b21      	ldr	r3, [pc, #132]	; (8102404 <ETH_SetDMAConfig+0x104>)
 810237e:	4013      	ands	r3, r2
 8102380:	687a      	ldr	r2, [r7, #4]
 8102382:	6812      	ldr	r2, [r2, #0]
 8102384:	68f9      	ldr	r1, [r7, #12]
 8102386:	430b      	orrs	r3, r1
 8102388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810238c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8102390:	683b      	ldr	r3, [r7, #0]
 8102392:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8102394:	683b      	ldr	r3, [r7, #0]
 8102396:	7d1b      	ldrb	r3, [r3, #20]
 8102398:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810239a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 810239c:	683b      	ldr	r3, [r7, #0]
 810239e:	7f5b      	ldrb	r3, [r3, #29]
 81023a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81023a2:	4313      	orrs	r3, r2
 81023a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81023ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 81023b2:	4b15      	ldr	r3, [pc, #84]	; (8102408 <ETH_SetDMAConfig+0x108>)
 81023b4:	4013      	ands	r3, r2
 81023b6:	687a      	ldr	r2, [r7, #4]
 81023b8:	6812      	ldr	r2, [r2, #0]
 81023ba:	68f9      	ldr	r1, [r7, #12]
 81023bc:	430b      	orrs	r3, r1
 81023be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81023c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81023c6:	683b      	ldr	r3, [r7, #0]
 81023c8:	7f1b      	ldrb	r3, [r3, #28]
 81023ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 81023cc:	683b      	ldr	r3, [r7, #0]
 81023ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 81023d0:	4313      	orrs	r3, r2
 81023d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 81023d4:	687b      	ldr	r3, [r7, #4]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81023dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 81023e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81023e4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 81023e8:	687a      	ldr	r2, [r7, #4]
 81023ea:	6812      	ldr	r2, [r2, #0]
 81023ec:	68f9      	ldr	r1, [r7, #12]
 81023ee:	430b      	orrs	r3, r1
 81023f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81023f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 81023f8:	bf00      	nop
 81023fa:	3714      	adds	r7, #20
 81023fc:	46bd      	mov	sp, r7
 81023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102402:	4770      	bx	lr
 8102404:	fffec000 	.word	0xfffec000
 8102408:	ffc0efef 	.word	0xffc0efef

0810240c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 810240c:	b580      	push	{r7, lr}
 810240e:	b0a4      	sub	sp, #144	; 0x90
 8102410:	af00      	add	r7, sp, #0
 8102412:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8102414:	2301      	movs	r3, #1
 8102416:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810241a:	2300      	movs	r3, #0
 810241c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810241e:	2300      	movs	r3, #0
 8102420:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8102424:	2300      	movs	r3, #0
 8102426:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810242a:	2301      	movs	r3, #1
 810242c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8102430:	2301      	movs	r3, #1
 8102432:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8102436:	2301      	movs	r3, #1
 8102438:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 810243c:	2300      	movs	r3, #0
 810243e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8102442:	2301      	movs	r3, #1
 8102444:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8102448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810244c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810244e:	2300      	movs	r3, #0
 8102450:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8102454:	2300      	movs	r3, #0
 8102456:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8102458:	2300      	movs	r3, #0
 810245a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810245e:	2300      	movs	r3, #0
 8102460:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8102464:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8102468:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810246a:	2300      	movs	r3, #0
 810246c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8102470:	2300      	movs	r3, #0
 8102472:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8102474:	2301      	movs	r3, #1
 8102476:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810247a:	2300      	movs	r3, #0
 810247c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8102480:	2300      	movs	r3, #0
 8102482:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8102486:	2300      	movs	r3, #0
 8102488:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 810248a:	2300      	movs	r3, #0
 810248c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810248e:	2300      	movs	r3, #0
 8102490:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8102492:	2300      	movs	r3, #0
 8102494:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8102498:	2300      	movs	r3, #0
 810249a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810249e:	2301      	movs	r3, #1
 81024a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81024a4:	2320      	movs	r3, #32
 81024a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81024aa:	2301      	movs	r3, #1
 81024ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 81024b0:	2300      	movs	r3, #0
 81024b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 81024b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 81024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 81024bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81024c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 81024c2:	2300      	movs	r3, #0
 81024c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 81024c8:	2302      	movs	r3, #2
 81024ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 81024ce:	2300      	movs	r3, #0
 81024d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 81024d4:	2300      	movs	r3, #0
 81024d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 81024da:	2300      	movs	r3, #0
 81024dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81024e0:	2301      	movs	r3, #1
 81024e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81024e6:	2300      	movs	r3, #0
 81024e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81024ea:	2301      	movs	r3, #1
 81024ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81024f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81024f4:	4619      	mov	r1, r3
 81024f6:	6878      	ldr	r0, [r7, #4]
 81024f8:	f7ff fde6 	bl	81020c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81024fc:	2301      	movs	r3, #1
 81024fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8102500:	2301      	movs	r3, #1
 8102502:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8102504:	2300      	movs	r3, #0
 8102506:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8102508:	2300      	movs	r3, #0
 810250a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810250e:	2300      	movs	r3, #0
 8102510:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8102512:	2300      	movs	r3, #0
 8102514:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8102516:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810251a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 810251c:	2300      	movs	r3, #0
 810251e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8102520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8102524:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8102526:	2300      	movs	r3, #0
 8102528:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 810252c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8102530:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8102532:	f107 0308 	add.w	r3, r7, #8
 8102536:	4619      	mov	r1, r3
 8102538:	6878      	ldr	r0, [r7, #4]
 810253a:	f7ff fee1 	bl	8102300 <ETH_SetDMAConfig>
}
 810253e:	bf00      	nop
 8102540:	3790      	adds	r7, #144	; 0x90
 8102542:	46bd      	mov	sp, r7
 8102544:	bd80      	pop	{r7, pc}

08102546 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8102546:	b480      	push	{r7}
 8102548:	b085      	sub	sp, #20
 810254a:	af00      	add	r7, sp, #0
 810254c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810254e:	2300      	movs	r3, #0
 8102550:	60fb      	str	r3, [r7, #12]
 8102552:	e01d      	b.n	8102590 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	68d9      	ldr	r1, [r3, #12]
 8102558:	68fa      	ldr	r2, [r7, #12]
 810255a:	4613      	mov	r3, r2
 810255c:	005b      	lsls	r3, r3, #1
 810255e:	4413      	add	r3, r2
 8102560:	00db      	lsls	r3, r3, #3
 8102562:	440b      	add	r3, r1
 8102564:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8102566:	68bb      	ldr	r3, [r7, #8]
 8102568:	2200      	movs	r2, #0
 810256a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 810256c:	68bb      	ldr	r3, [r7, #8]
 810256e:	2200      	movs	r2, #0
 8102570:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8102572:	68bb      	ldr	r3, [r7, #8]
 8102574:	2200      	movs	r2, #0
 8102576:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8102578:	68bb      	ldr	r3, [r7, #8]
 810257a:	2200      	movs	r2, #0
 810257c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810257e:	68b9      	ldr	r1, [r7, #8]
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	68fa      	ldr	r2, [r7, #12]
 8102584:	3206      	adds	r2, #6
 8102586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810258a:	68fb      	ldr	r3, [r7, #12]
 810258c:	3301      	adds	r3, #1
 810258e:	60fb      	str	r3, [r7, #12]
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	2b03      	cmp	r3, #3
 8102594:	d9de      	bls.n	8102554 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	2200      	movs	r2, #0
 810259a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81025a4:	461a      	mov	r2, r3
 81025a6:	2303      	movs	r3, #3
 81025a8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 81025ac:	687b      	ldr	r3, [r7, #4]
 81025ae:	68da      	ldr	r2, [r3, #12]
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81025b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	68da      	ldr	r2, [r3, #12]
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81025c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 81025cc:	bf00      	nop
 81025ce:	3714      	adds	r7, #20
 81025d0:	46bd      	mov	sp, r7
 81025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d6:	4770      	bx	lr

081025d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 81025d8:	b480      	push	{r7}
 81025da:	b085      	sub	sp, #20
 81025dc:	af00      	add	r7, sp, #0
 81025de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81025e0:	2300      	movs	r3, #0
 81025e2:	60fb      	str	r3, [r7, #12]
 81025e4:	e023      	b.n	810262e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	6919      	ldr	r1, [r3, #16]
 81025ea:	68fa      	ldr	r2, [r7, #12]
 81025ec:	4613      	mov	r3, r2
 81025ee:	005b      	lsls	r3, r3, #1
 81025f0:	4413      	add	r3, r2
 81025f2:	00db      	lsls	r3, r3, #3
 81025f4:	440b      	add	r3, r1
 81025f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81025f8:	68bb      	ldr	r3, [r7, #8]
 81025fa:	2200      	movs	r2, #0
 81025fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81025fe:	68bb      	ldr	r3, [r7, #8]
 8102600:	2200      	movs	r2, #0
 8102602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8102604:	68bb      	ldr	r3, [r7, #8]
 8102606:	2200      	movs	r2, #0
 8102608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 810260a:	68bb      	ldr	r3, [r7, #8]
 810260c:	2200      	movs	r2, #0
 810260e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8102610:	68bb      	ldr	r3, [r7, #8]
 8102612:	2200      	movs	r2, #0
 8102614:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8102616:	68bb      	ldr	r3, [r7, #8]
 8102618:	2200      	movs	r2, #0
 810261a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 810261c:	68b9      	ldr	r1, [r7, #8]
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	68fa      	ldr	r2, [r7, #12]
 8102622:	3212      	adds	r2, #18
 8102624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	3301      	adds	r3, #1
 810262c:	60fb      	str	r3, [r7, #12]
 810262e:	68fb      	ldr	r3, [r7, #12]
 8102630:	2b03      	cmp	r3, #3
 8102632:	d9d8      	bls.n	81025e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	2200      	movs	r2, #0
 8102638:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	2200      	movs	r2, #0
 810263e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	2200      	movs	r2, #0
 8102644:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	2200      	movs	r2, #0
 810264a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	2200      	movs	r2, #0
 8102650:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810265a:	461a      	mov	r2, r3
 810265c:	2303      	movs	r3, #3
 810265e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	691a      	ldr	r2, [r3, #16]
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	681b      	ldr	r3, [r3, #0]
 810266a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810266e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	691b      	ldr	r3, [r3, #16]
 8102676:	f103 0248 	add.w	r2, r3, #72	; 0x48
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102682:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8102686:	bf00      	nop
 8102688:	3714      	adds	r7, #20
 810268a:	46bd      	mov	sp, r7
 810268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102690:	4770      	bx	lr
	...

08102694 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8102694:	b580      	push	{r7, lr}
 8102696:	b098      	sub	sp, #96	; 0x60
 8102698:	af00      	add	r7, sp, #0
 810269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 810269c:	4a84      	ldr	r2, [pc, #528]	; (81028b0 <HAL_FDCAN_Init+0x21c>)
 810269e:	f107 030c 	add.w	r3, r7, #12
 81026a2:	4611      	mov	r1, r2
 81026a4:	224c      	movs	r2, #76	; 0x4c
 81026a6:	4618      	mov	r0, r3
 81026a8:	f007 f96e 	bl	8109988 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	d101      	bne.n	81026b6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 81026b2:	2301      	movs	r3, #1
 81026b4:	e1c6      	b.n	8102a44 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	681b      	ldr	r3, [r3, #0]
 81026ba:	4a7e      	ldr	r2, [pc, #504]	; (81028b4 <HAL_FDCAN_Init+0x220>)
 81026bc:	4293      	cmp	r3, r2
 81026be:	d106      	bne.n	81026ce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 81026c0:	687b      	ldr	r3, [r7, #4]
 81026c2:	681b      	ldr	r3, [r3, #0]
 81026c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 81026c8:	461a      	mov	r2, r3
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 81026d4:	b2db      	uxtb	r3, r3
 81026d6:	2b00      	cmp	r3, #0
 81026d8:	d106      	bne.n	81026e8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	2200      	movs	r2, #0
 81026de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 81026e2:	6878      	ldr	r0, [r7, #4]
 81026e4:	f7fe fcb4 	bl	8101050 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	699a      	ldr	r2, [r3, #24]
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	f022 0210 	bic.w	r2, r2, #16
 81026f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 81026f8:	f7ff fa60 	bl	8101bbc <HAL_GetTick>
 81026fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 81026fe:	e014      	b.n	810272a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102700:	f7ff fa5c 	bl	8101bbc <HAL_GetTick>
 8102704:	4602      	mov	r2, r0
 8102706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102708:	1ad3      	subs	r3, r2, r3
 810270a:	2b0a      	cmp	r3, #10
 810270c:	d90d      	bls.n	810272a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102714:	f043 0201 	orr.w	r2, r3, #1
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	2203      	movs	r2, #3
 8102722:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8102726:	2301      	movs	r3, #1
 8102728:	e18c      	b.n	8102a44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	681b      	ldr	r3, [r3, #0]
 810272e:	699b      	ldr	r3, [r3, #24]
 8102730:	f003 0308 	and.w	r3, r3, #8
 8102734:	2b08      	cmp	r3, #8
 8102736:	d0e3      	beq.n	8102700 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102738:	687b      	ldr	r3, [r7, #4]
 810273a:	681b      	ldr	r3, [r3, #0]
 810273c:	699a      	ldr	r2, [r3, #24]
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	f042 0201 	orr.w	r2, r2, #1
 8102746:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8102748:	f7ff fa38 	bl	8101bbc <HAL_GetTick>
 810274c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810274e:	e014      	b.n	810277a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102750:	f7ff fa34 	bl	8101bbc <HAL_GetTick>
 8102754:	4602      	mov	r2, r0
 8102756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102758:	1ad3      	subs	r3, r2, r3
 810275a:	2b0a      	cmp	r3, #10
 810275c:	d90d      	bls.n	810277a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102764:	f043 0201 	orr.w	r2, r3, #1
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	2203      	movs	r2, #3
 8102772:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8102776:	2301      	movs	r3, #1
 8102778:	e164      	b.n	8102a44 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	681b      	ldr	r3, [r3, #0]
 810277e:	699b      	ldr	r3, [r3, #24]
 8102780:	f003 0301 	and.w	r3, r3, #1
 8102784:	2b00      	cmp	r3, #0
 8102786:	d0e3      	beq.n	8102750 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	681b      	ldr	r3, [r3, #0]
 810278c:	699a      	ldr	r2, [r3, #24]
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	f042 0202 	orr.w	r2, r2, #2
 8102796:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	7c1b      	ldrb	r3, [r3, #16]
 810279c:	2b01      	cmp	r3, #1
 810279e:	d108      	bne.n	81027b2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	699a      	ldr	r2, [r3, #24]
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81027ae:	619a      	str	r2, [r3, #24]
 81027b0:	e007      	b.n	81027c2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	699a      	ldr	r2, [r3, #24]
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	681b      	ldr	r3, [r3, #0]
 81027bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81027c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	7c5b      	ldrb	r3, [r3, #17]
 81027c6:	2b01      	cmp	r3, #1
 81027c8:	d108      	bne.n	81027dc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	699a      	ldr	r2, [r3, #24]
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81027d8:	619a      	str	r2, [r3, #24]
 81027da:	e007      	b.n	81027ec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	699a      	ldr	r2, [r3, #24]
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	681b      	ldr	r3, [r3, #0]
 81027e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 81027ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	7c9b      	ldrb	r3, [r3, #18]
 81027f0:	2b01      	cmp	r3, #1
 81027f2:	d108      	bne.n	8102806 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	699a      	ldr	r2, [r3, #24]
 81027fa:	687b      	ldr	r3, [r7, #4]
 81027fc:	681b      	ldr	r3, [r3, #0]
 81027fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102802:	619a      	str	r2, [r3, #24]
 8102804:	e007      	b.n	8102816 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	699a      	ldr	r2, [r3, #24]
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8102814:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	699b      	ldr	r3, [r3, #24]
 810281c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	689a      	ldr	r2, [r3, #8]
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	430a      	orrs	r2, r1
 810282a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	699a      	ldr	r2, [r3, #24]
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 810283a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	691a      	ldr	r2, [r3, #16]
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	f022 0210 	bic.w	r2, r2, #16
 810284a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	68db      	ldr	r3, [r3, #12]
 8102850:	2b01      	cmp	r3, #1
 8102852:	d108      	bne.n	8102866 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	699a      	ldr	r2, [r3, #24]
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	681b      	ldr	r3, [r3, #0]
 810285e:	f042 0204 	orr.w	r2, r2, #4
 8102862:	619a      	str	r2, [r3, #24]
 8102864:	e030      	b.n	81028c8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	68db      	ldr	r3, [r3, #12]
 810286a:	2b00      	cmp	r3, #0
 810286c:	d02c      	beq.n	81028c8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	68db      	ldr	r3, [r3, #12]
 8102872:	2b02      	cmp	r3, #2
 8102874:	d020      	beq.n	81028b8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	681b      	ldr	r3, [r3, #0]
 810287a:	699a      	ldr	r2, [r3, #24]
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8102884:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	691a      	ldr	r2, [r3, #16]
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	f042 0210 	orr.w	r2, r2, #16
 8102894:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	68db      	ldr	r3, [r3, #12]
 810289a:	2b03      	cmp	r3, #3
 810289c:	d114      	bne.n	81028c8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	681b      	ldr	r3, [r3, #0]
 81028a2:	699a      	ldr	r2, [r3, #24]
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	f042 0220 	orr.w	r2, r2, #32
 81028ac:	619a      	str	r2, [r3, #24]
 81028ae:	e00b      	b.n	81028c8 <HAL_FDCAN_Init+0x234>
 81028b0:	081099cc 	.word	0x081099cc
 81028b4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	699a      	ldr	r2, [r3, #24]
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	f042 0220 	orr.w	r2, r2, #32
 81028c6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	699b      	ldr	r3, [r3, #24]
 81028cc:	3b01      	subs	r3, #1
 81028ce:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	69db      	ldr	r3, [r3, #28]
 81028d4:	3b01      	subs	r3, #1
 81028d6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81028d8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	6a1b      	ldr	r3, [r3, #32]
 81028de:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 81028e0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	695b      	ldr	r3, [r3, #20]
 81028e8:	3b01      	subs	r3, #1
 81028ea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81028f0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81028f2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	689b      	ldr	r3, [r3, #8]
 81028f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81028fc:	d115      	bne.n	810292a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81028fe:	687b      	ldr	r3, [r7, #4]
 8102900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102902:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102908:	3b01      	subs	r3, #1
 810290a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 810290c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102912:	3b01      	subs	r3, #1
 8102914:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8102916:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810291e:	3b01      	subs	r3, #1
 8102920:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8102922:	687b      	ldr	r3, [r7, #4]
 8102924:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8102926:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8102928:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810292e:	2b00      	cmp	r3, #0
 8102930:	d00a      	beq.n	8102948 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 810293a:	687b      	ldr	r3, [r7, #4]
 810293c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	430a      	orrs	r2, r1
 8102944:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102950:	4413      	add	r3, r2
 8102952:	2b00      	cmp	r3, #0
 8102954:	d011      	beq.n	810297a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	681b      	ldr	r3, [r3, #0]
 810295a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 810295e:	f023 0107 	bic.w	r1, r3, #7
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102966:	009b      	lsls	r3, r3, #2
 8102968:	3360      	adds	r3, #96	; 0x60
 810296a:	443b      	add	r3, r7
 810296c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	430a      	orrs	r2, r1
 8102976:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810297e:	2b00      	cmp	r3, #0
 8102980:	d011      	beq.n	81029a6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810298a:	f023 0107 	bic.w	r1, r3, #7
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102992:	009b      	lsls	r3, r3, #2
 8102994:	3360      	adds	r3, #96	; 0x60
 8102996:	443b      	add	r3, r7
 8102998:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	681b      	ldr	r3, [r3, #0]
 81029a0:	430a      	orrs	r2, r1
 81029a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d012      	beq.n	81029d4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81029b6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 81029ba:	687b      	ldr	r3, [r7, #4]
 81029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81029be:	009b      	lsls	r3, r3, #2
 81029c0:	3360      	adds	r3, #96	; 0x60
 81029c2:	443b      	add	r3, r7
 81029c4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81029c8:	011a      	lsls	r2, r3, #4
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	430a      	orrs	r2, r1
 81029d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81029d8:	2b00      	cmp	r3, #0
 81029da:	d012      	beq.n	8102a02 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81029e4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029ec:	009b      	lsls	r3, r3, #2
 81029ee:	3360      	adds	r3, #96	; 0x60
 81029f0:	443b      	add	r3, r7
 81029f2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81029f6:	021a      	lsls	r2, r3, #8
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	430a      	orrs	r2, r1
 81029fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	4a11      	ldr	r2, [pc, #68]	; (8102a4c <HAL_FDCAN_Init+0x3b8>)
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d107      	bne.n	8102a1c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8102a0c:	687b      	ldr	r3, [r7, #4]
 8102a0e:	685b      	ldr	r3, [r3, #4]
 8102a10:	689a      	ldr	r2, [r3, #8]
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	685b      	ldr	r3, [r3, #4]
 8102a16:	f022 0203 	bic.w	r2, r2, #3
 8102a1a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	2200      	movs	r2, #0
 8102a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	2200      	movs	r2, #0
 8102a28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	2201      	movs	r2, #1
 8102a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102a34:	6878      	ldr	r0, [r7, #4]
 8102a36:	f000 f80b 	bl	8102a50 <FDCAN_CalcultateRamBlockAddresses>
 8102a3a:	4603      	mov	r3, r0
 8102a3c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8102a40:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8102a44:	4618      	mov	r0, r3
 8102a46:	3760      	adds	r7, #96	; 0x60
 8102a48:	46bd      	mov	sp, r7
 8102a4a:	bd80      	pop	{r7, pc}
 8102a4c:	4000a000 	.word	0x4000a000

08102a50 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102a50:	b480      	push	{r7}
 8102a52:	b085      	sub	sp, #20
 8102a54:	af00      	add	r7, sp, #0
 8102a56:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102a5c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102a6a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102a6e:	68ba      	ldr	r2, [r7, #8]
 8102a70:	0091      	lsls	r1, r2, #2
 8102a72:	687a      	ldr	r2, [r7, #4]
 8102a74:	6812      	ldr	r2, [r2, #0]
 8102a76:	430b      	orrs	r3, r1
 8102a78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102a84:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a8c:	041a      	lsls	r2, r3, #16
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	430a      	orrs	r2, r1
 8102a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a9c:	68ba      	ldr	r2, [r7, #8]
 8102a9e:	4413      	add	r3, r2
 8102aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102aae:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102ab2:	68ba      	ldr	r2, [r7, #8]
 8102ab4:	0091      	lsls	r1, r2, #2
 8102ab6:	687a      	ldr	r2, [r7, #4]
 8102ab8:	6812      	ldr	r2, [r2, #0]
 8102aba:	430b      	orrs	r3, r1
 8102abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102ac8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ad0:	041a      	lsls	r2, r3, #16
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	430a      	orrs	r2, r1
 8102ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102ae0:	005b      	lsls	r3, r3, #1
 8102ae2:	68ba      	ldr	r2, [r7, #8]
 8102ae4:	4413      	add	r3, r2
 8102ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102af0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102af4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102af8:	68ba      	ldr	r2, [r7, #8]
 8102afa:	0091      	lsls	r1, r2, #2
 8102afc:	687a      	ldr	r2, [r7, #4]
 8102afe:	6812      	ldr	r2, [r2, #0]
 8102b00:	430b      	orrs	r3, r1
 8102b02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102b0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b16:	041a      	lsls	r2, r3, #16
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	430a      	orrs	r2, r1
 8102b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102b26:	687a      	ldr	r2, [r7, #4]
 8102b28:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102b2a:	fb02 f303 	mul.w	r3, r2, r3
 8102b2e:	68ba      	ldr	r2, [r7, #8]
 8102b30:	4413      	add	r3, r2
 8102b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b40:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102b44:	68ba      	ldr	r2, [r7, #8]
 8102b46:	0091      	lsls	r1, r2, #2
 8102b48:	687a      	ldr	r2, [r7, #4]
 8102b4a:	6812      	ldr	r2, [r2, #0]
 8102b4c:	430b      	orrs	r3, r1
 8102b4e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102b5a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102b62:	041a      	lsls	r2, r3, #16
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	430a      	orrs	r2, r1
 8102b6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102b72:	687a      	ldr	r2, [r7, #4]
 8102b74:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8102b76:	fb02 f303 	mul.w	r3, r2, r3
 8102b7a:	68ba      	ldr	r2, [r7, #8]
 8102b7c:	4413      	add	r3, r2
 8102b7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b8c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102b90:	68ba      	ldr	r2, [r7, #8]
 8102b92:	0091      	lsls	r1, r2, #2
 8102b94:	687a      	ldr	r2, [r7, #4]
 8102b96:	6812      	ldr	r2, [r2, #0]
 8102b98:	430b      	orrs	r3, r1
 8102b9a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ba2:	687a      	ldr	r2, [r7, #4]
 8102ba4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8102ba6:	fb02 f303 	mul.w	r3, r2, r3
 8102baa:	68ba      	ldr	r2, [r7, #8]
 8102bac:	4413      	add	r3, r2
 8102bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102bbc:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102bc0:	68ba      	ldr	r2, [r7, #8]
 8102bc2:	0091      	lsls	r1, r2, #2
 8102bc4:	687a      	ldr	r2, [r7, #4]
 8102bc6:	6812      	ldr	r2, [r2, #0]
 8102bc8:	430b      	orrs	r3, r1
 8102bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	681b      	ldr	r3, [r3, #0]
 8102bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102bd6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bde:	041a      	lsls	r2, r3, #16
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	430a      	orrs	r2, r1
 8102be6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bee:	005b      	lsls	r3, r3, #1
 8102bf0:	68ba      	ldr	r2, [r7, #8]
 8102bf2:	4413      	add	r3, r2
 8102bf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c02:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102c06:	68ba      	ldr	r2, [r7, #8]
 8102c08:	0091      	lsls	r1, r2, #2
 8102c0a:	687a      	ldr	r2, [r7, #4]
 8102c0c:	6812      	ldr	r2, [r2, #0]
 8102c0e:	430b      	orrs	r3, r1
 8102c10:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102c1c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c24:	041a      	lsls	r2, r3, #16
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	430a      	orrs	r2, r1
 8102c2c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102c38:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c40:	061a      	lsls	r2, r3, #24
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	430a      	orrs	r2, r1
 8102c48:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102c50:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102c54:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8102c58:	009a      	lsls	r2, r3, #2
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c66:	009b      	lsls	r3, r3, #2
 8102c68:	441a      	add	r2, r3
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102c76:	00db      	lsls	r3, r3, #3
 8102c78:	441a      	add	r2, r3
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102c86:	6879      	ldr	r1, [r7, #4]
 8102c88:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8102c8a:	fb01 f303 	mul.w	r3, r1, r3
 8102c8e:	009b      	lsls	r3, r3, #2
 8102c90:	441a      	add	r2, r3
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102c9e:	6879      	ldr	r1, [r7, #4]
 8102ca0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8102ca2:	fb01 f303 	mul.w	r3, r1, r3
 8102ca6:	009b      	lsls	r3, r3, #2
 8102ca8:	441a      	add	r2, r3
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102cb6:	6879      	ldr	r1, [r7, #4]
 8102cb8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8102cba:	fb01 f303 	mul.w	r3, r1, r3
 8102cbe:	009b      	lsls	r3, r3, #2
 8102cc0:	441a      	add	r2, r3
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8102cce:	687b      	ldr	r3, [r7, #4]
 8102cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cd2:	00db      	lsls	r3, r3, #3
 8102cd4:	441a      	add	r2, r3
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ce6:	6879      	ldr	r1, [r7, #4]
 8102ce8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102cea:	fb01 f303 	mul.w	r3, r1, r3
 8102cee:	009b      	lsls	r3, r3, #2
 8102cf0:	441a      	add	r2, r3
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102d02:	6879      	ldr	r1, [r7, #4]
 8102d04:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8102d06:	fb01 f303 	mul.w	r3, r1, r3
 8102d0a:	009b      	lsls	r3, r3, #2
 8102d0c:	441a      	add	r2, r3
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102d1a:	4a14      	ldr	r2, [pc, #80]	; (8102d6c <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8102d1c:	4293      	cmp	r3, r2
 8102d1e:	d90d      	bls.n	8102d3c <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102d26:	f043 0220 	orr.w	r2, r3, #32
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	2203      	movs	r2, #3
 8102d34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8102d38:	2301      	movs	r3, #1
 8102d3a:	e010      	b.n	8102d5e <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102d40:	60fb      	str	r3, [r7, #12]
 8102d42:	e005      	b.n	8102d50 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102d44:	68fb      	ldr	r3, [r7, #12]
 8102d46:	2200      	movs	r2, #0
 8102d48:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	3304      	adds	r3, #4
 8102d4e:	60fb      	str	r3, [r7, #12]
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102d56:	68fa      	ldr	r2, [r7, #12]
 8102d58:	429a      	cmp	r2, r3
 8102d5a:	d3f3      	bcc.n	8102d44 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8102d5c:	2300      	movs	r3, #0
}
 8102d5e:	4618      	mov	r0, r3
 8102d60:	3714      	adds	r7, #20
 8102d62:	46bd      	mov	sp, r7
 8102d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d68:	4770      	bx	lr
 8102d6a:	bf00      	nop
 8102d6c:	4000d3fc 	.word	0x4000d3fc

08102d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102d70:	b480      	push	{r7}
 8102d72:	b089      	sub	sp, #36	; 0x24
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	6078      	str	r0, [r7, #4]
 8102d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102d7a:	2300      	movs	r3, #0
 8102d7c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102d7e:	4b89      	ldr	r3, [pc, #548]	; (8102fa4 <HAL_GPIO_Init+0x234>)
 8102d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102d82:	e194      	b.n	81030ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102d84:	683b      	ldr	r3, [r7, #0]
 8102d86:	681a      	ldr	r2, [r3, #0]
 8102d88:	2101      	movs	r1, #1
 8102d8a:	69fb      	ldr	r3, [r7, #28]
 8102d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8102d90:	4013      	ands	r3, r2
 8102d92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102d94:	693b      	ldr	r3, [r7, #16]
 8102d96:	2b00      	cmp	r3, #0
 8102d98:	f000 8186 	beq.w	81030a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102d9c:	683b      	ldr	r3, [r7, #0]
 8102d9e:	685b      	ldr	r3, [r3, #4]
 8102da0:	f003 0303 	and.w	r3, r3, #3
 8102da4:	2b01      	cmp	r3, #1
 8102da6:	d005      	beq.n	8102db4 <HAL_GPIO_Init+0x44>
 8102da8:	683b      	ldr	r3, [r7, #0]
 8102daa:	685b      	ldr	r3, [r3, #4]
 8102dac:	f003 0303 	and.w	r3, r3, #3
 8102db0:	2b02      	cmp	r3, #2
 8102db2:	d130      	bne.n	8102e16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	689b      	ldr	r3, [r3, #8]
 8102db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102dba:	69fb      	ldr	r3, [r7, #28]
 8102dbc:	005b      	lsls	r3, r3, #1
 8102dbe:	2203      	movs	r2, #3
 8102dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8102dc4:	43db      	mvns	r3, r3
 8102dc6:	69ba      	ldr	r2, [r7, #24]
 8102dc8:	4013      	ands	r3, r2
 8102dca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102dcc:	683b      	ldr	r3, [r7, #0]
 8102dce:	68da      	ldr	r2, [r3, #12]
 8102dd0:	69fb      	ldr	r3, [r7, #28]
 8102dd2:	005b      	lsls	r3, r3, #1
 8102dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8102dd8:	69ba      	ldr	r2, [r7, #24]
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	69ba      	ldr	r2, [r7, #24]
 8102de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	685b      	ldr	r3, [r3, #4]
 8102de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102dea:	2201      	movs	r2, #1
 8102dec:	69fb      	ldr	r3, [r7, #28]
 8102dee:	fa02 f303 	lsl.w	r3, r2, r3
 8102df2:	43db      	mvns	r3, r3
 8102df4:	69ba      	ldr	r2, [r7, #24]
 8102df6:	4013      	ands	r3, r2
 8102df8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102dfa:	683b      	ldr	r3, [r7, #0]
 8102dfc:	685b      	ldr	r3, [r3, #4]
 8102dfe:	091b      	lsrs	r3, r3, #4
 8102e00:	f003 0201 	and.w	r2, r3, #1
 8102e04:	69fb      	ldr	r3, [r7, #28]
 8102e06:	fa02 f303 	lsl.w	r3, r2, r3
 8102e0a:	69ba      	ldr	r2, [r7, #24]
 8102e0c:	4313      	orrs	r3, r2
 8102e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	69ba      	ldr	r2, [r7, #24]
 8102e14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102e16:	683b      	ldr	r3, [r7, #0]
 8102e18:	685b      	ldr	r3, [r3, #4]
 8102e1a:	f003 0303 	and.w	r3, r3, #3
 8102e1e:	2b03      	cmp	r3, #3
 8102e20:	d017      	beq.n	8102e52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	68db      	ldr	r3, [r3, #12]
 8102e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102e28:	69fb      	ldr	r3, [r7, #28]
 8102e2a:	005b      	lsls	r3, r3, #1
 8102e2c:	2203      	movs	r2, #3
 8102e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e32:	43db      	mvns	r3, r3
 8102e34:	69ba      	ldr	r2, [r7, #24]
 8102e36:	4013      	ands	r3, r2
 8102e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102e3a:	683b      	ldr	r3, [r7, #0]
 8102e3c:	689a      	ldr	r2, [r3, #8]
 8102e3e:	69fb      	ldr	r3, [r7, #28]
 8102e40:	005b      	lsls	r3, r3, #1
 8102e42:	fa02 f303 	lsl.w	r3, r2, r3
 8102e46:	69ba      	ldr	r2, [r7, #24]
 8102e48:	4313      	orrs	r3, r2
 8102e4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	69ba      	ldr	r2, [r7, #24]
 8102e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102e52:	683b      	ldr	r3, [r7, #0]
 8102e54:	685b      	ldr	r3, [r3, #4]
 8102e56:	f003 0303 	and.w	r3, r3, #3
 8102e5a:	2b02      	cmp	r3, #2
 8102e5c:	d123      	bne.n	8102ea6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102e5e:	69fb      	ldr	r3, [r7, #28]
 8102e60:	08da      	lsrs	r2, r3, #3
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	3208      	adds	r2, #8
 8102e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102e6c:	69fb      	ldr	r3, [r7, #28]
 8102e6e:	f003 0307 	and.w	r3, r3, #7
 8102e72:	009b      	lsls	r3, r3, #2
 8102e74:	220f      	movs	r2, #15
 8102e76:	fa02 f303 	lsl.w	r3, r2, r3
 8102e7a:	43db      	mvns	r3, r3
 8102e7c:	69ba      	ldr	r2, [r7, #24]
 8102e7e:	4013      	ands	r3, r2
 8102e80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102e82:	683b      	ldr	r3, [r7, #0]
 8102e84:	691a      	ldr	r2, [r3, #16]
 8102e86:	69fb      	ldr	r3, [r7, #28]
 8102e88:	f003 0307 	and.w	r3, r3, #7
 8102e8c:	009b      	lsls	r3, r3, #2
 8102e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e92:	69ba      	ldr	r2, [r7, #24]
 8102e94:	4313      	orrs	r3, r2
 8102e96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102e98:	69fb      	ldr	r3, [r7, #28]
 8102e9a:	08da      	lsrs	r2, r3, #3
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	3208      	adds	r2, #8
 8102ea0:	69b9      	ldr	r1, [r7, #24]
 8102ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102eac:	69fb      	ldr	r3, [r7, #28]
 8102eae:	005b      	lsls	r3, r3, #1
 8102eb0:	2203      	movs	r2, #3
 8102eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8102eb6:	43db      	mvns	r3, r3
 8102eb8:	69ba      	ldr	r2, [r7, #24]
 8102eba:	4013      	ands	r3, r2
 8102ebc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102ebe:	683b      	ldr	r3, [r7, #0]
 8102ec0:	685b      	ldr	r3, [r3, #4]
 8102ec2:	f003 0203 	and.w	r2, r3, #3
 8102ec6:	69fb      	ldr	r3, [r7, #28]
 8102ec8:	005b      	lsls	r3, r3, #1
 8102eca:	fa02 f303 	lsl.w	r3, r2, r3
 8102ece:	69ba      	ldr	r2, [r7, #24]
 8102ed0:	4313      	orrs	r3, r2
 8102ed2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	69ba      	ldr	r2, [r7, #24]
 8102ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102eda:	683b      	ldr	r3, [r7, #0]
 8102edc:	685b      	ldr	r3, [r3, #4]
 8102ede:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	f000 80e0 	beq.w	81030a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102ee8:	4b2f      	ldr	r3, [pc, #188]	; (8102fa8 <HAL_GPIO_Init+0x238>)
 8102eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102eee:	4a2e      	ldr	r2, [pc, #184]	; (8102fa8 <HAL_GPIO_Init+0x238>)
 8102ef0:	f043 0302 	orr.w	r3, r3, #2
 8102ef4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102ef8:	4b2b      	ldr	r3, [pc, #172]	; (8102fa8 <HAL_GPIO_Init+0x238>)
 8102efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102efe:	f003 0302 	and.w	r3, r3, #2
 8102f02:	60fb      	str	r3, [r7, #12]
 8102f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102f06:	4a29      	ldr	r2, [pc, #164]	; (8102fac <HAL_GPIO_Init+0x23c>)
 8102f08:	69fb      	ldr	r3, [r7, #28]
 8102f0a:	089b      	lsrs	r3, r3, #2
 8102f0c:	3302      	adds	r3, #2
 8102f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102f14:	69fb      	ldr	r3, [r7, #28]
 8102f16:	f003 0303 	and.w	r3, r3, #3
 8102f1a:	009b      	lsls	r3, r3, #2
 8102f1c:	220f      	movs	r2, #15
 8102f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f22:	43db      	mvns	r3, r3
 8102f24:	69ba      	ldr	r2, [r7, #24]
 8102f26:	4013      	ands	r3, r2
 8102f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	4a20      	ldr	r2, [pc, #128]	; (8102fb0 <HAL_GPIO_Init+0x240>)
 8102f2e:	4293      	cmp	r3, r2
 8102f30:	d052      	beq.n	8102fd8 <HAL_GPIO_Init+0x268>
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	4a1f      	ldr	r2, [pc, #124]	; (8102fb4 <HAL_GPIO_Init+0x244>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d031      	beq.n	8102f9e <HAL_GPIO_Init+0x22e>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	4a1e      	ldr	r2, [pc, #120]	; (8102fb8 <HAL_GPIO_Init+0x248>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d02b      	beq.n	8102f9a <HAL_GPIO_Init+0x22a>
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	4a1d      	ldr	r2, [pc, #116]	; (8102fbc <HAL_GPIO_Init+0x24c>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d025      	beq.n	8102f96 <HAL_GPIO_Init+0x226>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	4a1c      	ldr	r2, [pc, #112]	; (8102fc0 <HAL_GPIO_Init+0x250>)
 8102f4e:	4293      	cmp	r3, r2
 8102f50:	d01f      	beq.n	8102f92 <HAL_GPIO_Init+0x222>
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	4a1b      	ldr	r2, [pc, #108]	; (8102fc4 <HAL_GPIO_Init+0x254>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d019      	beq.n	8102f8e <HAL_GPIO_Init+0x21e>
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	4a1a      	ldr	r2, [pc, #104]	; (8102fc8 <HAL_GPIO_Init+0x258>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d013      	beq.n	8102f8a <HAL_GPIO_Init+0x21a>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	4a19      	ldr	r2, [pc, #100]	; (8102fcc <HAL_GPIO_Init+0x25c>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d00d      	beq.n	8102f86 <HAL_GPIO_Init+0x216>
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	4a18      	ldr	r2, [pc, #96]	; (8102fd0 <HAL_GPIO_Init+0x260>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d007      	beq.n	8102f82 <HAL_GPIO_Init+0x212>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	4a17      	ldr	r2, [pc, #92]	; (8102fd4 <HAL_GPIO_Init+0x264>)
 8102f76:	4293      	cmp	r3, r2
 8102f78:	d101      	bne.n	8102f7e <HAL_GPIO_Init+0x20e>
 8102f7a:	2309      	movs	r3, #9
 8102f7c:	e02d      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f7e:	230a      	movs	r3, #10
 8102f80:	e02b      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f82:	2308      	movs	r3, #8
 8102f84:	e029      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f86:	2307      	movs	r3, #7
 8102f88:	e027      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f8a:	2306      	movs	r3, #6
 8102f8c:	e025      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f8e:	2305      	movs	r3, #5
 8102f90:	e023      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f92:	2304      	movs	r3, #4
 8102f94:	e021      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f96:	2303      	movs	r3, #3
 8102f98:	e01f      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f9a:	2302      	movs	r3, #2
 8102f9c:	e01d      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102f9e:	2301      	movs	r3, #1
 8102fa0:	e01b      	b.n	8102fda <HAL_GPIO_Init+0x26a>
 8102fa2:	bf00      	nop
 8102fa4:	580000c0 	.word	0x580000c0
 8102fa8:	58024400 	.word	0x58024400
 8102fac:	58000400 	.word	0x58000400
 8102fb0:	58020000 	.word	0x58020000
 8102fb4:	58020400 	.word	0x58020400
 8102fb8:	58020800 	.word	0x58020800
 8102fbc:	58020c00 	.word	0x58020c00
 8102fc0:	58021000 	.word	0x58021000
 8102fc4:	58021400 	.word	0x58021400
 8102fc8:	58021800 	.word	0x58021800
 8102fcc:	58021c00 	.word	0x58021c00
 8102fd0:	58022000 	.word	0x58022000
 8102fd4:	58022400 	.word	0x58022400
 8102fd8:	2300      	movs	r3, #0
 8102fda:	69fa      	ldr	r2, [r7, #28]
 8102fdc:	f002 0203 	and.w	r2, r2, #3
 8102fe0:	0092      	lsls	r2, r2, #2
 8102fe2:	4093      	lsls	r3, r2
 8102fe4:	69ba      	ldr	r2, [r7, #24]
 8102fe6:	4313      	orrs	r3, r2
 8102fe8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102fea:	4938      	ldr	r1, [pc, #224]	; (81030cc <HAL_GPIO_Init+0x35c>)
 8102fec:	69fb      	ldr	r3, [r7, #28]
 8102fee:	089b      	lsrs	r3, r3, #2
 8102ff0:	3302      	adds	r3, #2
 8102ff2:	69ba      	ldr	r2, [r7, #24]
 8102ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102ffc:	681b      	ldr	r3, [r3, #0]
 8102ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103000:	693b      	ldr	r3, [r7, #16]
 8103002:	43db      	mvns	r3, r3
 8103004:	69ba      	ldr	r2, [r7, #24]
 8103006:	4013      	ands	r3, r2
 8103008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810300a:	683b      	ldr	r3, [r7, #0]
 810300c:	685b      	ldr	r3, [r3, #4]
 810300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103012:	2b00      	cmp	r3, #0
 8103014:	d003      	beq.n	810301e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103016:	69ba      	ldr	r2, [r7, #24]
 8103018:	693b      	ldr	r3, [r7, #16]
 810301a:	4313      	orrs	r3, r2
 810301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810301e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103022:	69bb      	ldr	r3, [r7, #24]
 8103024:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810302a:	685b      	ldr	r3, [r3, #4]
 810302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810302e:	693b      	ldr	r3, [r7, #16]
 8103030:	43db      	mvns	r3, r3
 8103032:	69ba      	ldr	r2, [r7, #24]
 8103034:	4013      	ands	r3, r2
 8103036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103038:	683b      	ldr	r3, [r7, #0]
 810303a:	685b      	ldr	r3, [r3, #4]
 810303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103040:	2b00      	cmp	r3, #0
 8103042:	d003      	beq.n	810304c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103044:	69ba      	ldr	r2, [r7, #24]
 8103046:	693b      	ldr	r3, [r7, #16]
 8103048:	4313      	orrs	r3, r2
 810304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810304c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103050:	69bb      	ldr	r3, [r7, #24]
 8103052:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103054:	697b      	ldr	r3, [r7, #20]
 8103056:	685b      	ldr	r3, [r3, #4]
 8103058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810305a:	693b      	ldr	r3, [r7, #16]
 810305c:	43db      	mvns	r3, r3
 810305e:	69ba      	ldr	r2, [r7, #24]
 8103060:	4013      	ands	r3, r2
 8103062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103064:	683b      	ldr	r3, [r7, #0]
 8103066:	685b      	ldr	r3, [r3, #4]
 8103068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810306c:	2b00      	cmp	r3, #0
 810306e:	d003      	beq.n	8103078 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103070:	69ba      	ldr	r2, [r7, #24]
 8103072:	693b      	ldr	r3, [r7, #16]
 8103074:	4313      	orrs	r3, r2
 8103076:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103078:	697b      	ldr	r3, [r7, #20]
 810307a:	69ba      	ldr	r2, [r7, #24]
 810307c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810307e:	697b      	ldr	r3, [r7, #20]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103084:	693b      	ldr	r3, [r7, #16]
 8103086:	43db      	mvns	r3, r3
 8103088:	69ba      	ldr	r2, [r7, #24]
 810308a:	4013      	ands	r3, r2
 810308c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810308e:	683b      	ldr	r3, [r7, #0]
 8103090:	685b      	ldr	r3, [r3, #4]
 8103092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103096:	2b00      	cmp	r3, #0
 8103098:	d003      	beq.n	81030a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810309a:	69ba      	ldr	r2, [r7, #24]
 810309c:	693b      	ldr	r3, [r7, #16]
 810309e:	4313      	orrs	r3, r2
 81030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81030a2:	697b      	ldr	r3, [r7, #20]
 81030a4:	69ba      	ldr	r2, [r7, #24]
 81030a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81030a8:	69fb      	ldr	r3, [r7, #28]
 81030aa:	3301      	adds	r3, #1
 81030ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81030ae:	683b      	ldr	r3, [r7, #0]
 81030b0:	681a      	ldr	r2, [r3, #0]
 81030b2:	69fb      	ldr	r3, [r7, #28]
 81030b4:	fa22 f303 	lsr.w	r3, r2, r3
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	f47f ae63 	bne.w	8102d84 <HAL_GPIO_Init+0x14>
  }
}
 81030be:	bf00      	nop
 81030c0:	bf00      	nop
 81030c2:	3724      	adds	r7, #36	; 0x24
 81030c4:	46bd      	mov	sp, r7
 81030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ca:	4770      	bx	lr
 81030cc:	58000400 	.word	0x58000400

081030d0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81030d0:	b480      	push	{r7}
 81030d2:	b083      	sub	sp, #12
 81030d4:	af00      	add	r7, sp, #0
 81030d6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81030d8:	4b05      	ldr	r3, [pc, #20]	; (81030f0 <HAL_HSEM_ActivateNotification+0x20>)
 81030da:	681a      	ldr	r2, [r3, #0]
 81030dc:	4904      	ldr	r1, [pc, #16]	; (81030f0 <HAL_HSEM_ActivateNotification+0x20>)
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	4313      	orrs	r3, r2
 81030e2:	600b      	str	r3, [r1, #0]
#endif
}
 81030e4:	bf00      	nop
 81030e6:	370c      	adds	r7, #12
 81030e8:	46bd      	mov	sp, r7
 81030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ee:	4770      	bx	lr
 81030f0:	58026510 	.word	0x58026510

081030f4 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 81030f4:	b580      	push	{r7, lr}
 81030f6:	b082      	sub	sp, #8
 81030f8:	af00      	add	r7, sp, #0
 81030fa:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	2b00      	cmp	r3, #0
 8103100:	d101      	bne.n	8103106 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8103102:	2301      	movs	r3, #1
 8103104:	e031      	b.n	810316a <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810310c:	b2db      	uxtb	r3, r3
 810310e:	2b00      	cmp	r3, #0
 8103110:	d105      	bne.n	810311e <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	2200      	movs	r2, #0
 8103116:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8103118:	6878      	ldr	r0, [r7, #4]
 810311a:	f7fe f935 	bl	8101388 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	2203      	movs	r2, #3
 8103122:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8103126:	6878      	ldr	r0, [r7, #4]
 8103128:	f000 f824 	bl	8103174 <HAL_MMC_InitCard>
 810312c:	4603      	mov	r3, r0
 810312e:	2b01      	cmp	r3, #1
 8103130:	d101      	bne.n	8103136 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8103132:	2301      	movs	r3, #1
 8103134:	e019      	b.n	810316a <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	2200      	movs	r2, #0
 810313a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	2200      	movs	r2, #0
 8103140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	2201      	movs	r2, #1
 8103146:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	68db      	ldr	r3, [r3, #12]
 810314e:	2b00      	cmp	r3, #0
 8103150:	d00a      	beq.n	8103168 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	68db      	ldr	r3, [r3, #12]
 8103156:	4619      	mov	r1, r3
 8103158:	6878      	ldr	r0, [r7, #4]
 810315a:	f000 fb47 	bl	81037ec <HAL_MMC_ConfigWideBusOperation>
 810315e:	4603      	mov	r3, r0
 8103160:	2b00      	cmp	r3, #0
 8103162:	d001      	beq.n	8103168 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8103164:	2301      	movs	r3, #1
 8103166:	e000      	b.n	810316a <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8103168:	2300      	movs	r3, #0
}
 810316a:	4618      	mov	r0, r3
 810316c:	3708      	adds	r7, #8
 810316e:	46bd      	mov	sp, r7
 8103170:	bd80      	pop	{r7, pc}
	...

08103174 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103174:	b590      	push	{r4, r7, lr}
 8103176:	b08d      	sub	sp, #52	; 0x34
 8103178:	af02      	add	r7, sp, #8
 810317a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810317c:	2300      	movs	r3, #0
 810317e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8103180:	2300      	movs	r3, #0
 8103182:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8103184:	2300      	movs	r3, #0
 8103186:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8103188:	2300      	movs	r3, #0
 810318a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810318c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8103190:	f04f 0100 	mov.w	r1, #0
 8103194:	f002 fd54 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8103198:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810319c:	2b00      	cmp	r3, #0
 810319e:	d109      	bne.n	81031b4 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	2201      	movs	r2, #1
 81031a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 81031ae:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81031b0:	2301      	movs	r3, #1
 81031b2:	e070      	b.n	8103296 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 81031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031b6:	0a1b      	lsrs	r3, r3, #8
 81031b8:	4a39      	ldr	r2, [pc, #228]	; (81032a0 <HAL_MMC_InitCard+0x12c>)
 81031ba:	fba2 2303 	umull	r2, r3, r2, r3
 81031be:	091b      	lsrs	r3, r3, #4
 81031c0:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	681c      	ldr	r4, [r3, #0]
 81031c6:	466a      	mov	r2, sp
 81031c8:	f107 0318 	add.w	r3, r7, #24
 81031cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 81031d0:	e882 0003 	stmia.w	r2, {r0, r1}
 81031d4:	f107 030c 	add.w	r3, r7, #12
 81031d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 81031da:	4620      	mov	r0, r4
 81031dc:	f005 fcde 	bl	8108b9c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	4618      	mov	r0, r3
 81031e6:	f005 fd10 	bl	8108c0a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 81031ea:	69fb      	ldr	r3, [r7, #28]
 81031ec:	2b00      	cmp	r3, #0
 81031ee:	d005      	beq.n	81031fc <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81031f0:	69fb      	ldr	r3, [r7, #28]
 81031f2:	005b      	lsls	r3, r3, #1
 81031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 81031fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 81031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81031fe:	2b00      	cmp	r3, #0
 8103200:	d007      	beq.n	8103212 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8103202:	4a28      	ldr	r2, [pc, #160]	; (81032a4 <HAL_MMC_InitCard+0x130>)
 8103204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103206:	fbb2 f3f3 	udiv	r3, r2, r3
 810320a:	3301      	adds	r3, #1
 810320c:	4618      	mov	r0, r3
 810320e:	f7fe fce1 	bl	8101bd4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8103212:	6878      	ldr	r0, [r7, #4]
 8103214:	f000 fcb4 	bl	8103b80 <MMC_PowerON>
 8103218:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 810321a:	6a3b      	ldr	r3, [r7, #32]
 810321c:	2b00      	cmp	r3, #0
 810321e:	d00b      	beq.n	8103238 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103220:	687b      	ldr	r3, [r7, #4]
 8103222:	2201      	movs	r2, #1
 8103224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810322c:	6a3b      	ldr	r3, [r7, #32]
 810322e:	431a      	orrs	r2, r3
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8103234:	2301      	movs	r3, #1
 8103236:	e02e      	b.n	8103296 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8103238:	6878      	ldr	r0, [r7, #4]
 810323a:	f000 fba3 	bl	8103984 <MMC_InitCard>
 810323e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103240:	6a3b      	ldr	r3, [r7, #32]
 8103242:	2b00      	cmp	r3, #0
 8103244:	d00b      	beq.n	810325e <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	2201      	movs	r2, #1
 810324a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103252:	6a3b      	ldr	r3, [r7, #32]
 8103254:	431a      	orrs	r2, r3
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810325a:	2301      	movs	r3, #1
 810325c:	e01b      	b.n	8103296 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8103266:	4618      	mov	r0, r3
 8103268:	f005 fd64 	bl	8108d34 <SDMMC_CmdBlockLength>
 810326c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 810326e:	6a3b      	ldr	r3, [r7, #32]
 8103270:	2b00      	cmp	r3, #0
 8103272:	d00f      	beq.n	8103294 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4a0b      	ldr	r2, [pc, #44]	; (81032a8 <HAL_MMC_InitCard+0x134>)
 810327a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 810327c:	687b      	ldr	r3, [r7, #4]
 810327e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103280:	6a3b      	ldr	r3, [r7, #32]
 8103282:	431a      	orrs	r2, r3
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	2201      	movs	r2, #1
 810328c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103290:	2301      	movs	r3, #1
 8103292:	e000      	b.n	8103296 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8103294:	2300      	movs	r3, #0
}
 8103296:	4618      	mov	r0, r3
 8103298:	372c      	adds	r7, #44	; 0x2c
 810329a:	46bd      	mov	sp, r7
 810329c:	bd90      	pop	{r4, r7, pc}
 810329e:	bf00      	nop
 81032a0:	014f8b59 	.word	0x014f8b59
 81032a4:	00012110 	.word	0x00012110
 81032a8:	1fe00fff 	.word	0x1fe00fff

081032ac <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 81032ac:	b580      	push	{r7, lr}
 81032ae:	b084      	sub	sp, #16
 81032b0:	af00      	add	r7, sp, #0
 81032b2:	6078      	str	r0, [r7, #4]
 81032b4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 81032b6:	2300      	movs	r3, #0
 81032b8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032be:	0f9b      	lsrs	r3, r3, #30
 81032c0:	b2da      	uxtb	r2, r3
 81032c2:	683b      	ldr	r3, [r7, #0]
 81032c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ca:	0e9b      	lsrs	r3, r3, #26
 81032cc:	b2db      	uxtb	r3, r3
 81032ce:	f003 030f 	and.w	r3, r3, #15
 81032d2:	b2da      	uxtb	r2, r3
 81032d4:	683b      	ldr	r3, [r7, #0]
 81032d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032dc:	0e1b      	lsrs	r3, r3, #24
 81032de:	b2db      	uxtb	r3, r3
 81032e0:	f003 0303 	and.w	r3, r3, #3
 81032e4:	b2da      	uxtb	r2, r3
 81032e6:	683b      	ldr	r3, [r7, #0]
 81032e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032ee:	0c1b      	lsrs	r3, r3, #16
 81032f0:	b2da      	uxtb	r2, r3
 81032f2:	683b      	ldr	r3, [r7, #0]
 81032f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032fa:	0a1b      	lsrs	r3, r3, #8
 81032fc:	b2da      	uxtb	r2, r3
 81032fe:	683b      	ldr	r3, [r7, #0]
 8103300:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103306:	b2da      	uxtb	r2, r3
 8103308:	683b      	ldr	r3, [r7, #0]
 810330a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103310:	0d1b      	lsrs	r3, r3, #20
 8103312:	b29a      	uxth	r2, r3
 8103314:	683b      	ldr	r3, [r7, #0]
 8103316:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810331c:	0c1b      	lsrs	r3, r3, #16
 810331e:	b2db      	uxtb	r3, r3
 8103320:	f003 030f 	and.w	r3, r3, #15
 8103324:	b2da      	uxtb	r2, r3
 8103326:	683b      	ldr	r3, [r7, #0]
 8103328:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810332e:	0bdb      	lsrs	r3, r3, #15
 8103330:	b2db      	uxtb	r3, r3
 8103332:	f003 0301 	and.w	r3, r3, #1
 8103336:	b2da      	uxtb	r2, r3
 8103338:	683b      	ldr	r3, [r7, #0]
 810333a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103340:	0b9b      	lsrs	r3, r3, #14
 8103342:	b2db      	uxtb	r3, r3
 8103344:	f003 0301 	and.w	r3, r3, #1
 8103348:	b2da      	uxtb	r2, r3
 810334a:	683b      	ldr	r3, [r7, #0]
 810334c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 810334e:	687b      	ldr	r3, [r7, #4]
 8103350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103352:	0b5b      	lsrs	r3, r3, #13
 8103354:	b2db      	uxtb	r3, r3
 8103356:	f003 0301 	and.w	r3, r3, #1
 810335a:	b2da      	uxtb	r2, r3
 810335c:	683b      	ldr	r3, [r7, #0]
 810335e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103364:	0b1b      	lsrs	r3, r3, #12
 8103366:	b2db      	uxtb	r3, r3
 8103368:	f003 0301 	and.w	r3, r3, #1
 810336c:	b2da      	uxtb	r2, r3
 810336e:	683b      	ldr	r3, [r7, #0]
 8103370:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8103372:	683b      	ldr	r3, [r7, #0]
 8103374:	2200      	movs	r2, #0
 8103376:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8103378:	f107 010c 	add.w	r1, r7, #12
 810337c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8103380:	22d4      	movs	r2, #212	; 0xd4
 8103382:	6878      	ldr	r0, [r7, #4]
 8103384:	f000 fc4c 	bl	8103c20 <MMC_ReadExtCSD>
 8103388:	4603      	mov	r3, r0
 810338a:	2b00      	cmp	r3, #0
 810338c:	d001      	beq.n	8103392 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 810338e:	2301      	movs	r3, #1
 8103390:	e129      	b.n	81035e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103396:	2b00      	cmp	r3, #0
 8103398:	d163      	bne.n	8103462 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810339e:	009a      	lsls	r2, r3, #2
 81033a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 81033a4:	4013      	ands	r3, r2
 81033a6:	687a      	ldr	r2, [r7, #4]
 81033a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 81033aa:	0f92      	lsrs	r2, r2, #30
 81033ac:	431a      	orrs	r2, r3
 81033ae:	683b      	ldr	r3, [r7, #0]
 81033b0:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033b6:	0edb      	lsrs	r3, r3, #27
 81033b8:	b2db      	uxtb	r3, r3
 81033ba:	f003 0307 	and.w	r3, r3, #7
 81033be:	b2da      	uxtb	r2, r3
 81033c0:	683b      	ldr	r3, [r7, #0]
 81033c2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033c8:	0e1b      	lsrs	r3, r3, #24
 81033ca:	b2db      	uxtb	r3, r3
 81033cc:	f003 0307 	and.w	r3, r3, #7
 81033d0:	b2da      	uxtb	r2, r3
 81033d2:	683b      	ldr	r3, [r7, #0]
 81033d4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033da:	0d5b      	lsrs	r3, r3, #21
 81033dc:	b2db      	uxtb	r3, r3
 81033de:	f003 0307 	and.w	r3, r3, #7
 81033e2:	b2da      	uxtb	r2, r3
 81033e4:	683b      	ldr	r3, [r7, #0]
 81033e6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033ec:	0c9b      	lsrs	r3, r3, #18
 81033ee:	b2db      	uxtb	r3, r3
 81033f0:	f003 0307 	and.w	r3, r3, #7
 81033f4:	b2da      	uxtb	r2, r3
 81033f6:	683b      	ldr	r3, [r7, #0]
 81033f8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033fe:	0bdb      	lsrs	r3, r3, #15
 8103400:	b2db      	uxtb	r3, r3
 8103402:	f003 0307 	and.w	r3, r3, #7
 8103406:	b2da      	uxtb	r2, r3
 8103408:	683b      	ldr	r3, [r7, #0]
 810340a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810340c:	683b      	ldr	r3, [r7, #0]
 810340e:	691b      	ldr	r3, [r3, #16]
 8103410:	1c5a      	adds	r2, r3, #1
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8103416:	683b      	ldr	r3, [r7, #0]
 8103418:	7e1b      	ldrb	r3, [r3, #24]
 810341a:	b2db      	uxtb	r3, r3
 810341c:	f003 0307 	and.w	r3, r3, #7
 8103420:	3302      	adds	r3, #2
 8103422:	2201      	movs	r2, #1
 8103424:	fa02 f303 	lsl.w	r3, r2, r3
 8103428:	687a      	ldr	r2, [r7, #4]
 810342a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810342c:	fb03 f202 	mul.w	r2, r3, r2
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8103434:	683b      	ldr	r3, [r7, #0]
 8103436:	7a1b      	ldrb	r3, [r3, #8]
 8103438:	b2db      	uxtb	r3, r3
 810343a:	f003 030f 	and.w	r3, r3, #15
 810343e:	2201      	movs	r2, #1
 8103440:	409a      	lsls	r2, r3
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810344a:	687a      	ldr	r2, [r7, #4]
 810344c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810344e:	0a52      	lsrs	r2, r2, #9
 8103450:	fb03 f202 	mul.w	r2, r3, r2
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810345e:	651a      	str	r2, [r3, #80]	; 0x50
 8103460:	e023      	b.n	81034aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103466:	2b01      	cmp	r3, #1
 8103468:	d10f      	bne.n	810348a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 810346a:	68fa      	ldr	r2, [r7, #12]
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103474:	687b      	ldr	r3, [r7, #4]
 8103476:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810347e:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	651a      	str	r2, [r3, #80]	; 0x50
 8103488:	e00f      	b.n	81034aa <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	681b      	ldr	r3, [r3, #0]
 810348e:	4a58      	ldr	r2, [pc, #352]	; (81035f0 <HAL_MMC_GetCardCSD+0x344>)
 8103490:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103496:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	2201      	movs	r2, #1
 81034a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 81034a6:	2301      	movs	r3, #1
 81034a8:	e09d      	b.n	81035e6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034ae:	0b9b      	lsrs	r3, r3, #14
 81034b0:	b2db      	uxtb	r3, r3
 81034b2:	f003 0301 	and.w	r3, r3, #1
 81034b6:	b2da      	uxtb	r2, r3
 81034b8:	683b      	ldr	r3, [r7, #0]
 81034ba:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034c0:	09db      	lsrs	r3, r3, #7
 81034c2:	b2db      	uxtb	r3, r3
 81034c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81034c8:	b2da      	uxtb	r2, r3
 81034ca:	683b      	ldr	r3, [r7, #0]
 81034cc:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 81034ce:	687b      	ldr	r3, [r7, #4]
 81034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034d2:	b2db      	uxtb	r3, r3
 81034d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81034d8:	b2da      	uxtb	r2, r3
 81034da:	683b      	ldr	r3, [r7, #0]
 81034dc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81034e2:	0fdb      	lsrs	r3, r3, #31
 81034e4:	b2da      	uxtb	r2, r3
 81034e6:	683b      	ldr	r3, [r7, #0]
 81034e8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81034ee:	0f5b      	lsrs	r3, r3, #29
 81034f0:	b2db      	uxtb	r3, r3
 81034f2:	f003 0303 	and.w	r3, r3, #3
 81034f6:	b2da      	uxtb	r2, r3
 81034f8:	683b      	ldr	r3, [r7, #0]
 81034fa:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103500:	0e9b      	lsrs	r3, r3, #26
 8103502:	b2db      	uxtb	r3, r3
 8103504:	f003 0307 	and.w	r3, r3, #7
 8103508:	b2da      	uxtb	r2, r3
 810350a:	683b      	ldr	r3, [r7, #0]
 810350c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103512:	0d9b      	lsrs	r3, r3, #22
 8103514:	b2db      	uxtb	r3, r3
 8103516:	f003 030f 	and.w	r3, r3, #15
 810351a:	b2da      	uxtb	r2, r3
 810351c:	683b      	ldr	r3, [r7, #0]
 810351e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103524:	0d5b      	lsrs	r3, r3, #21
 8103526:	b2db      	uxtb	r3, r3
 8103528:	f003 0301 	and.w	r3, r3, #1
 810352c:	b2da      	uxtb	r2, r3
 810352e:	683b      	ldr	r3, [r7, #0]
 8103530:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8103534:	683b      	ldr	r3, [r7, #0]
 8103536:	2200      	movs	r2, #0
 8103538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103540:	0c1b      	lsrs	r3, r3, #16
 8103542:	b2db      	uxtb	r3, r3
 8103544:	f003 0301 	and.w	r3, r3, #1
 8103548:	b2da      	uxtb	r2, r3
 810354a:	683b      	ldr	r3, [r7, #0]
 810354c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103554:	0bdb      	lsrs	r3, r3, #15
 8103556:	b2db      	uxtb	r3, r3
 8103558:	f003 0301 	and.w	r3, r3, #1
 810355c:	b2da      	uxtb	r2, r3
 810355e:	683b      	ldr	r3, [r7, #0]
 8103560:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103568:	0b9b      	lsrs	r3, r3, #14
 810356a:	b2db      	uxtb	r3, r3
 810356c:	f003 0301 	and.w	r3, r3, #1
 8103570:	b2da      	uxtb	r2, r3
 8103572:	683b      	ldr	r3, [r7, #0]
 8103574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810357c:	0b5b      	lsrs	r3, r3, #13
 810357e:	b2db      	uxtb	r3, r3
 8103580:	f003 0301 	and.w	r3, r3, #1
 8103584:	b2da      	uxtb	r2, r3
 8103586:	683b      	ldr	r3, [r7, #0]
 8103588:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103590:	0b1b      	lsrs	r3, r3, #12
 8103592:	b2db      	uxtb	r3, r3
 8103594:	f003 0301 	and.w	r3, r3, #1
 8103598:	b2da      	uxtb	r2, r3
 810359a:	683b      	ldr	r3, [r7, #0]
 810359c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81035a4:	0a9b      	lsrs	r3, r3, #10
 81035a6:	b2db      	uxtb	r3, r3
 81035a8:	f003 0303 	and.w	r3, r3, #3
 81035ac:	b2da      	uxtb	r2, r3
 81035ae:	683b      	ldr	r3, [r7, #0]
 81035b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81035b8:	0a1b      	lsrs	r3, r3, #8
 81035ba:	b2db      	uxtb	r3, r3
 81035bc:	f003 0303 	and.w	r3, r3, #3
 81035c0:	b2da      	uxtb	r2, r3
 81035c2:	683b      	ldr	r3, [r7, #0]
 81035c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81035cc:	085b      	lsrs	r3, r3, #1
 81035ce:	b2db      	uxtb	r3, r3
 81035d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035d4:	b2da      	uxtb	r2, r3
 81035d6:	683b      	ldr	r3, [r7, #0]
 81035d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 81035dc:	683b      	ldr	r3, [r7, #0]
 81035de:	2201      	movs	r2, #1
 81035e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 81035e4:	2300      	movs	r3, #0
}
 81035e6:	4618      	mov	r0, r3
 81035e8:	3710      	adds	r7, #16
 81035ea:	46bd      	mov	sp, r7
 81035ec:	bd80      	pop	{r7, pc}
 81035ee:	bf00      	nop
 81035f0:	1fe00fff 	.word	0x1fe00fff

081035f4 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 81035f4:	b580      	push	{r7, lr}
 81035f6:	b08e      	sub	sp, #56	; 0x38
 81035f8:	af00      	add	r7, sp, #0
 81035fa:	60f8      	str	r0, [r7, #12]
 81035fc:	60b9      	str	r1, [r7, #8]
 81035fe:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103600:	f7fe fadc 	bl	8101bbc <HAL_GetTick>
 8103604:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8103606:	68bb      	ldr	r3, [r7, #8]
 8103608:	2b00      	cmp	r3, #0
 810360a:	d107      	bne.n	810361c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 810360c:	68fb      	ldr	r3, [r7, #12]
 810360e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103610:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8103618:	2301      	movs	r3, #1
 810361a:	e0de      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 810361c:	68fb      	ldr	r3, [r7, #12]
 810361e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8103622:	b2db      	uxtb	r3, r3
 8103624:	2b01      	cmp	r3, #1
 8103626:	f040 80d7 	bne.w	81037d8 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 810362a:	68fb      	ldr	r3, [r7, #12]
 810362c:	2200      	movs	r2, #0
 810362e:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8103630:	68fb      	ldr	r3, [r7, #12]
 8103632:	2203      	movs	r2, #3
 8103634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8103638:	68fb      	ldr	r3, [r7, #12]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	2200      	movs	r2, #0
 810363e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8103640:	68bb      	ldr	r3, [r7, #8]
 8103642:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103644:	f04f 33ff 	mov.w	r3, #4294967295
 8103648:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 810364a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810364e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103650:	2390      	movs	r3, #144	; 0x90
 8103652:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103654:	2302      	movs	r3, #2
 8103656:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103658:	2300      	movs	r3, #0
 810365a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 810365c:	2300      	movs	r3, #0
 810365e:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103660:	68fb      	ldr	r3, [r7, #12]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	f107 0210 	add.w	r2, r7, #16
 8103668:	4611      	mov	r1, r2
 810366a:	4618      	mov	r0, r3
 810366c:	f005 fb36 	bl	8108cdc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8103670:	68fb      	ldr	r3, [r7, #12]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	68da      	ldr	r2, [r3, #12]
 8103676:	68fb      	ldr	r3, [r7, #12]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810367e:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103680:	68fb      	ldr	r3, [r7, #12]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	2100      	movs	r1, #0
 8103686:	4618      	mov	r0, r3
 8103688:	f005 fc82 	bl	8108f90 <SDMMC_CmdSendEXTCSD>
 810368c:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 810368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103690:	2b00      	cmp	r3, #0
 8103692:	d045      	beq.n	8103720 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103694:	68fb      	ldr	r3, [r7, #12]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a52      	ldr	r2, [pc, #328]	; (81037e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 810369a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 810369c:	68fb      	ldr	r3, [r7, #12]
 810369e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036a2:	431a      	orrs	r2, r3
 81036a4:	68fb      	ldr	r3, [r7, #12]
 81036a6:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81036a8:	68fb      	ldr	r3, [r7, #12]
 81036aa:	2201      	movs	r2, #1
 81036ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 81036b0:	2301      	movs	r3, #1
 81036b2:	e092      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 81036b4:	68fb      	ldr	r3, [r7, #12]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81036ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d013      	beq.n	81036ea <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 81036c2:	2300      	movs	r3, #0
 81036c4:	637b      	str	r3, [r7, #52]	; 0x34
 81036c6:	e00d      	b.n	81036e4 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 81036c8:	68fb      	ldr	r3, [r7, #12]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	4618      	mov	r0, r3
 81036ce:	f005 fa8f 	bl	8108bf0 <SDMMC_ReadFIFO>
 81036d2:	4602      	mov	r2, r0
 81036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81036d6:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 81036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81036da:	3304      	adds	r3, #4
 81036dc:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 81036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81036e0:	3301      	adds	r3, #1
 81036e2:	637b      	str	r3, [r7, #52]	; 0x34
 81036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81036e6:	2b07      	cmp	r3, #7
 81036e8:	d9ee      	bls.n	81036c8 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81036ea:	f7fe fa67 	bl	8101bbc <HAL_GetTick>
 81036ee:	4602      	mov	r2, r0
 81036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81036f2:	1ad3      	subs	r3, r2, r3
 81036f4:	687a      	ldr	r2, [r7, #4]
 81036f6:	429a      	cmp	r2, r3
 81036f8:	d902      	bls.n	8103700 <HAL_MMC_GetCardExtCSD+0x10c>
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	2b00      	cmp	r3, #0
 81036fe:	d10f      	bne.n	8103720 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103700:	68fb      	ldr	r3, [r7, #12]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	4a37      	ldr	r2, [pc, #220]	; (81037e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103706:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103708:	68fb      	ldr	r3, [r7, #12]
 810370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810370c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8103714:	68fb      	ldr	r3, [r7, #12]
 8103716:	2201      	movs	r2, #1
 8103718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 810371c:	2303      	movs	r3, #3
 810371e:	e05c      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	681b      	ldr	r3, [r3, #0]
 8103724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103726:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810372a:	2b00      	cmp	r3, #0
 810372c:	d0c2      	beq.n	81036b4 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 810372e:	68fb      	ldr	r3, [r7, #12]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	68da      	ldr	r2, [r3, #12]
 8103734:	68fb      	ldr	r3, [r7, #12]
 8103736:	681b      	ldr	r3, [r3, #0]
 8103738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810373c:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103744:	f003 0308 	and.w	r3, r3, #8
 8103748:	2b00      	cmp	r3, #0
 810374a:	d00f      	beq.n	810376c <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810374c:	68fb      	ldr	r3, [r7, #12]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a24      	ldr	r2, [pc, #144]	; (81037e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103752:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103754:	68fb      	ldr	r3, [r7, #12]
 8103756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103758:	f043 0208 	orr.w	r2, r3, #8
 810375c:	68fb      	ldr	r3, [r7, #12]
 810375e:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103760:	68fb      	ldr	r3, [r7, #12]
 8103762:	2201      	movs	r2, #1
 8103764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8103768:	2301      	movs	r3, #1
 810376a:	e036      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103772:	f003 0302 	and.w	r3, r3, #2
 8103776:	2b00      	cmp	r3, #0
 8103778:	d00f      	beq.n	810379a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810377a:	68fb      	ldr	r3, [r7, #12]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	4a19      	ldr	r2, [pc, #100]	; (81037e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103780:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103782:	68fb      	ldr	r3, [r7, #12]
 8103784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103786:	f043 0202 	orr.w	r2, r3, #2
 810378a:	68fb      	ldr	r3, [r7, #12]
 810378c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	2201      	movs	r2, #1
 8103792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8103796:	2301      	movs	r3, #1
 8103798:	e01f      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 810379a:	68fb      	ldr	r3, [r7, #12]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81037a0:	f003 0320 	and.w	r3, r3, #32
 81037a4:	2b00      	cmp	r3, #0
 81037a6:	d00f      	beq.n	81037c8 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81037a8:	68fb      	ldr	r3, [r7, #12]
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	4a0d      	ldr	r2, [pc, #52]	; (81037e4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81037ae:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81037b4:	f043 0220 	orr.w	r2, r3, #32
 81037b8:	68fb      	ldr	r3, [r7, #12]
 81037ba:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81037bc:	68fb      	ldr	r3, [r7, #12]
 81037be:	2201      	movs	r2, #1
 81037c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 81037c4:	2301      	movs	r3, #1
 81037c6:	e008      	b.n	81037da <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81037c8:	68fb      	ldr	r3, [r7, #12]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a06      	ldr	r2, [pc, #24]	; (81037e8 <HAL_MMC_GetCardExtCSD+0x1f4>)
 81037ce:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 81037d0:	68fb      	ldr	r3, [r7, #12]
 81037d2:	2201      	movs	r2, #1
 81037d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 81037d8:	2300      	movs	r3, #0
}
 81037da:	4618      	mov	r0, r3
 81037dc:	3738      	adds	r7, #56	; 0x38
 81037de:	46bd      	mov	sp, r7
 81037e0:	bd80      	pop	{r7, pc}
 81037e2:	bf00      	nop
 81037e4:	1fe00fff 	.word	0x1fe00fff
 81037e8:	18000f3a 	.word	0x18000f3a

081037ec <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 81037ec:	b5b0      	push	{r4, r5, r7, lr}
 81037ee:	b08c      	sub	sp, #48	; 0x30
 81037f0:	af02      	add	r7, sp, #8
 81037f2:	6078      	str	r0, [r7, #4]
 81037f4:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 81037f6:	2300      	movs	r3, #0
 81037f8:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	2203      	movs	r2, #3
 81037fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	685b      	ldr	r3, [r3, #4]
 8103808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810380c:	2b00      	cmp	r3, #0
 810380e:	d014      	beq.n	810383a <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	685b      	ldr	r3, [r3, #4]
 8103816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810381a:	2b00      	cmp	r3, #0
 810381c:	d006      	beq.n	810382c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 810381e:	2204      	movs	r2, #4
 8103820:	6839      	ldr	r1, [r7, #0]
 8103822:	6878      	ldr	r0, [r7, #4]
 8103824:	f000 faf0 	bl	8103e08 <MMC_PwrClassUpdate>
 8103828:	6238      	str	r0, [r7, #32]
 810382a:	e00c      	b.n	8103846 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 810382c:	2202      	movs	r2, #2
 810382e:	6839      	ldr	r1, [r7, #0]
 8103830:	6878      	ldr	r0, [r7, #4]
 8103832:	f000 fae9 	bl	8103e08 <MMC_PwrClassUpdate>
 8103836:	6238      	str	r0, [r7, #32]
 8103838:	e005      	b.n	8103846 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 810383a:	2201      	movs	r2, #1
 810383c:	6839      	ldr	r1, [r7, #0]
 810383e:	6878      	ldr	r0, [r7, #4]
 8103840:	f000 fae2 	bl	8103e08 <MMC_PwrClassUpdate>
 8103844:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8103846:	6a3b      	ldr	r3, [r7, #32]
 8103848:	2b00      	cmp	r3, #0
 810384a:	d17b      	bne.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810384c:	683b      	ldr	r3, [r7, #0]
 810384e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103852:	d107      	bne.n	8103864 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	4946      	ldr	r1, [pc, #280]	; (8103974 <HAL_MMC_ConfigWideBusOperation+0x188>)
 810385a:	4618      	mov	r0, r3
 810385c:	f005 fb75 	bl	8108f4a <SDMMC_CmdSwitch>
 8103860:	6238      	str	r0, [r7, #32]
 8103862:	e019      	b.n	8103898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8103864:	683b      	ldr	r3, [r7, #0]
 8103866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810386a:	d107      	bne.n	810387c <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	4941      	ldr	r1, [pc, #260]	; (8103978 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8103872:	4618      	mov	r0, r3
 8103874:	f005 fb69 	bl	8108f4a <SDMMC_CmdSwitch>
 8103878:	6238      	str	r0, [r7, #32]
 810387a:	e00d      	b.n	8103898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810387c:	683b      	ldr	r3, [r7, #0]
 810387e:	2b00      	cmp	r3, #0
 8103880:	d107      	bne.n	8103892 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	681b      	ldr	r3, [r3, #0]
 8103886:	493d      	ldr	r1, [pc, #244]	; (810397c <HAL_MMC_ConfigWideBusOperation+0x190>)
 8103888:	4618      	mov	r0, r3
 810388a:	f005 fb5e 	bl	8108f4a <SDMMC_CmdSwitch>
 810388e:	6238      	str	r0, [r7, #32]
 8103890:	e002      	b.n	8103898 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8103892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8103896:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8103898:	6a3b      	ldr	r3, [r7, #32]
 810389a:	2b00      	cmp	r3, #0
 810389c:	d152      	bne.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 810389e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81038a2:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681a      	ldr	r2, [r3, #0]
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038ac:	041b      	lsls	r3, r3, #16
 81038ae:	4619      	mov	r1, r3
 81038b0:	4610      	mov	r0, r2
 81038b2:	f005 fb07 	bl	8108ec4 <SDMMC_CmdSendStatus>
 81038b6:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 81038b8:	6a3b      	ldr	r3, [r7, #32]
 81038ba:	2b00      	cmp	r3, #0
 81038bc:	d112      	bne.n	81038e4 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	2100      	movs	r1, #0
 81038c4:	4618      	mov	r0, r3
 81038c6:	f005 f9f6 	bl	8108cb6 <SDMMC_GetResponse>
 81038ca:	61f8      	str	r0, [r7, #28]
        count--;
 81038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038ce:	3b01      	subs	r3, #1
 81038d0:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 81038d2:	69fb      	ldr	r3, [r7, #28]
 81038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81038d8:	2b00      	cmp	r3, #0
 81038da:	d104      	bne.n	81038e6 <HAL_MMC_ConfigWideBusOperation+0xfa>
 81038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d1e0      	bne.n	81038a4 <HAL_MMC_ConfigWideBusOperation+0xb8>
 81038e2:	e000      	b.n	81038e6 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 81038e4:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 81038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038e8:	2b00      	cmp	r3, #0
 81038ea:	d025      	beq.n	8103938 <HAL_MMC_ConfigWideBusOperation+0x14c>
 81038ec:	6a3b      	ldr	r3, [r7, #32]
 81038ee:	2b00      	cmp	r3, #0
 81038f0:	d122      	bne.n	8103938 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 81038f2:	69fb      	ldr	r3, [r7, #28]
 81038f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d003      	beq.n	8103904 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81038fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8103900:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8103902:	e01f      	b.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	f107 0408 	add.w	r4, r7, #8
 810390a:	1d1d      	adds	r5, r3, #4
 810390c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810390e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103910:	682b      	ldr	r3, [r5, #0]
 8103912:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8103914:	683b      	ldr	r3, [r7, #0]
 8103916:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	681c      	ldr	r4, [r3, #0]
 810391c:	466a      	mov	r2, sp
 810391e:	f107 0314 	add.w	r3, r7, #20
 8103922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103926:	e882 0003 	stmia.w	r2, {r0, r1}
 810392a:	f107 0308 	add.w	r3, r7, #8
 810392e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103930:	4620      	mov	r0, r4
 8103932:	f005 f933 	bl	8108b9c <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8103936:	e005      	b.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8103938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810393a:	2b00      	cmp	r3, #0
 810393c:	d102      	bne.n	8103944 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 810393e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103942:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	2201      	movs	r2, #1
 8103948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 810394c:	6a3b      	ldr	r3, [r7, #32]
 810394e:	2b00      	cmp	r3, #0
 8103950:	d00b      	beq.n	810396a <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	681b      	ldr	r3, [r3, #0]
 8103956:	4a0a      	ldr	r2, [pc, #40]	; (8103980 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8103958:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810395e:	6a3b      	ldr	r3, [r7, #32]
 8103960:	431a      	orrs	r2, r3
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8103966:	2301      	movs	r3, #1
 8103968:	e000      	b.n	810396c <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 810396a:	2300      	movs	r3, #0
}
 810396c:	4618      	mov	r0, r3
 810396e:	3728      	adds	r7, #40	; 0x28
 8103970:	46bd      	mov	sp, r7
 8103972:	bdb0      	pop	{r4, r5, r7, pc}
 8103974:	03b70200 	.word	0x03b70200
 8103978:	03b70100 	.word	0x03b70100
 810397c:	03b70000 	.word	0x03b70000
 8103980:	1fe00fff 	.word	0x1fe00fff

08103984 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103984:	b5b0      	push	{r4, r5, r7, lr}
 8103986:	b096      	sub	sp, #88	; 0x58
 8103988:	af02      	add	r7, sp, #8
 810398a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 810398c:	2302      	movs	r3, #2
 810398e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103992:	687b      	ldr	r3, [r7, #4]
 8103994:	681b      	ldr	r3, [r3, #0]
 8103996:	4618      	mov	r0, r3
 8103998:	f005 f948 	bl	8108c2c <SDMMC_GetPowerState>
 810399c:	4603      	mov	r3, r0
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d102      	bne.n	81039a8 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 81039a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 81039a6:	e0e6      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	4618      	mov	r0, r3
 81039ae:	f005 fa25 	bl	8108dfc <SDMMC_CmdSendCID>
 81039b2:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 81039b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d001      	beq.n	81039be <MMC_InitCard+0x3a>
  {
    return errorstate;
 81039ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81039bc:	e0db      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	2100      	movs	r1, #0
 81039c4:	4618      	mov	r0, r3
 81039c6:	f005 f976 	bl	8108cb6 <SDMMC_GetResponse>
 81039ca:	4602      	mov	r2, r0
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	2104      	movs	r1, #4
 81039d6:	4618      	mov	r0, r3
 81039d8:	f005 f96d 	bl	8108cb6 <SDMMC_GetResponse>
 81039dc:	4602      	mov	r2, r0
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	2108      	movs	r1, #8
 81039e8:	4618      	mov	r0, r3
 81039ea:	f005 f964 	bl	8108cb6 <SDMMC_GetResponse>
 81039ee:	4602      	mov	r2, r0
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	210c      	movs	r1, #12
 81039fa:	4618      	mov	r0, r3
 81039fc:	f005 f95b 	bl	8108cb6 <SDMMC_GetResponse>
 8103a00:	4602      	mov	r2, r0
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8103a0e:	4611      	mov	r1, r2
 8103a10:	4618      	mov	r0, r3
 8103a12:	f005 fa32 	bl	8108e7a <SDMMC_CmdSetRelAddMmc>
 8103a16:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a1a:	2b00      	cmp	r3, #0
 8103a1c:	d001      	beq.n	8103a22 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8103a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a20:	e0a9      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681a      	ldr	r2, [r3, #0]
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a32:	041b      	lsls	r3, r3, #16
 8103a34:	4619      	mov	r1, r3
 8103a36:	4610      	mov	r0, r2
 8103a38:	f005 f9ff 	bl	8108e3a <SDMMC_CmdSendCSD>
 8103a3c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d001      	beq.n	8103a48 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8103a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103a46:	e096      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	2100      	movs	r1, #0
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f005 f931 	bl	8108cb6 <SDMMC_GetResponse>
 8103a54:	4602      	mov	r2, r0
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	2104      	movs	r1, #4
 8103a60:	4618      	mov	r0, r3
 8103a62:	f005 f928 	bl	8108cb6 <SDMMC_GetResponse>
 8103a66:	4602      	mov	r2, r0
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	2108      	movs	r1, #8
 8103a72:	4618      	mov	r0, r3
 8103a74:	f005 f91f 	bl	8108cb6 <SDMMC_GetResponse>
 8103a78:	4602      	mov	r2, r0
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	681b      	ldr	r3, [r3, #0]
 8103a82:	210c      	movs	r1, #12
 8103a84:	4618      	mov	r0, r3
 8103a86:	f005 f916 	bl	8108cb6 <SDMMC_GetResponse>
 8103a8a:	4602      	mov	r2, r0
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	2104      	movs	r1, #4
 8103a96:	4618      	mov	r0, r3
 8103a98:	f005 f90d 	bl	8108cb6 <SDMMC_GetResponse>
 8103a9c:	4603      	mov	r3, r0
 8103a9e:	0d1a      	lsrs	r2, r3, #20
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	681a      	ldr	r2, [r3, #0]
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103aac:	041b      	lsls	r3, r3, #16
 8103aae:	4619      	mov	r1, r3
 8103ab0:	4610      	mov	r0, r2
 8103ab2:	f005 f962 	bl	8108d7a <SDMMC_CmdSelDesel>
 8103ab6:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d001      	beq.n	8103ac2 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8103abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103ac0:	e059      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8103ac2:	f107 031c 	add.w	r3, r7, #28
 8103ac6:	4619      	mov	r1, r3
 8103ac8:	6878      	ldr	r0, [r7, #4]
 8103aca:	f7ff fbef 	bl	81032ac <HAL_MMC_GetCardCSD>
 8103ace:	4603      	mov	r3, r0
 8103ad0:	2b00      	cmp	r3, #0
 8103ad2:	d002      	beq.n	8103ada <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103ad8:	e04d      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	681a      	ldr	r2, [r3, #0]
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ae2:	041b      	lsls	r3, r3, #16
 8103ae4:	4619      	mov	r1, r3
 8103ae6:	4610      	mov	r0, r2
 8103ae8:	f005 f9ec 	bl	8108ec4 <SDMMC_CmdSendStatus>
 8103aec:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d005      	beq.n	8103b00 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103afa:	431a      	orrs	r2, r3
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	3374      	adds	r3, #116	; 0x74
 8103b04:	f04f 32ff 	mov.w	r2, #4294967295
 8103b08:	4619      	mov	r1, r3
 8103b0a:	6878      	ldr	r0, [r7, #4]
 8103b0c:	f7ff fd72 	bl	81035f4 <HAL_MMC_GetCardExtCSD>
 8103b10:	4603      	mov	r3, r0
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d002      	beq.n	8103b1c <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103b1a:	e02c      	b.n	8103b76 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	681a      	ldr	r2, [r3, #0]
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b24:	041b      	lsls	r3, r3, #16
 8103b26:	4619      	mov	r1, r3
 8103b28:	4610      	mov	r0, r2
 8103b2a:	f005 f9cb 	bl	8108ec4 <SDMMC_CmdSendStatus>
 8103b2e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d005      	beq.n	8103b42 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103b3c:	431a      	orrs	r2, r3
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	f107 0408 	add.w	r4, r7, #8
 8103b48:	1d1d      	adds	r5, r3, #4
 8103b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b4e:	682b      	ldr	r3, [r5, #0]
 8103b50:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8103b52:	2300      	movs	r3, #0
 8103b54:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681c      	ldr	r4, [r3, #0]
 8103b5a:	466a      	mov	r2, sp
 8103b5c:	f107 0314 	add.w	r3, r7, #20
 8103b60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103b64:	e882 0003 	stmia.w	r2, {r0, r1}
 8103b68:	f107 0308 	add.w	r3, r7, #8
 8103b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103b6e:	4620      	mov	r0, r4
 8103b70:	f005 f814 	bl	8108b9c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8103b74:	2300      	movs	r3, #0
}
 8103b76:	4618      	mov	r0, r3
 8103b78:	3750      	adds	r7, #80	; 0x50
 8103b7a:	46bd      	mov	sp, r7
 8103b7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103b80 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8103b80:	b580      	push	{r7, lr}
 8103b82:	b086      	sub	sp, #24
 8103b84:	af00      	add	r7, sp, #0
 8103b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103b88:	2300      	movs	r3, #0
 8103b8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8103b8c:	2300      	movs	r3, #0
 8103b8e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8103b90:	2300      	movs	r3, #0
 8103b92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	681b      	ldr	r3, [r3, #0]
 8103b98:	4618      	mov	r0, r3
 8103b9a:	f005 f911 	bl	8108dc0 <SDMMC_CmdGoIdleState>
 8103b9e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103ba0:	68fb      	ldr	r3, [r7, #12]
 8103ba2:	2b00      	cmp	r3, #0
 8103ba4:	d027      	beq.n	8103bf6 <MMC_PowerON+0x76>
  {
    return errorstate;
 8103ba6:	68fb      	ldr	r3, [r7, #12]
 8103ba8:	e034      	b.n	8103c14 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8103baa:	68bb      	ldr	r3, [r7, #8]
 8103bac:	1c5a      	adds	r2, r3, #1
 8103bae:	60ba      	str	r2, [r7, #8]
 8103bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103bb4:	4293      	cmp	r3, r2
 8103bb6:	d102      	bne.n	8103bbe <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8103bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103bbc:	e02a      	b.n	8103c14 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	4916      	ldr	r1, [pc, #88]	; (8103c1c <MMC_PowerON+0x9c>)
 8103bc4:	4618      	mov	r0, r3
 8103bc6:	f005 f9a0 	bl	8108f0a <SDMMC_CmdOpCondition>
 8103bca:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103bcc:	68fb      	ldr	r3, [r7, #12]
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d002      	beq.n	8103bd8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8103bd6:	e01d      	b.n	8103c14 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	2100      	movs	r1, #0
 8103bde:	4618      	mov	r0, r3
 8103be0:	f005 f869 	bl	8108cb6 <SDMMC_GetResponse>
 8103be4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8103be6:	697b      	ldr	r3, [r7, #20]
 8103be8:	0fdb      	lsrs	r3, r3, #31
 8103bea:	2b01      	cmp	r3, #1
 8103bec:	d101      	bne.n	8103bf2 <MMC_PowerON+0x72>
 8103bee:	2301      	movs	r3, #1
 8103bf0:	e000      	b.n	8103bf4 <MMC_PowerON+0x74>
 8103bf2:	2300      	movs	r3, #0
 8103bf4:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8103bf6:	693b      	ldr	r3, [r7, #16]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d0d6      	beq.n	8103baa <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8103bfc:	697b      	ldr	r3, [r7, #20]
 8103bfe:	0e1b      	lsrs	r3, r3, #24
 8103c00:	2bc0      	cmp	r3, #192	; 0xc0
 8103c02:	d103      	bne.n	8103c0c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	2201      	movs	r2, #1
 8103c08:	639a      	str	r2, [r3, #56]	; 0x38
 8103c0a:	e002      	b.n	8103c12 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	2200      	movs	r2, #0
 8103c10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8103c12:	2300      	movs	r3, #0
}
 8103c14:	4618      	mov	r0, r3
 8103c16:	3718      	adds	r7, #24
 8103c18:	46bd      	mov	sp, r7
 8103c1a:	bd80      	pop	{r7, pc}
 8103c1c:	c0ff8000 	.word	0xc0ff8000

08103c20 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8103c20:	b580      	push	{r7, lr}
 8103c22:	b090      	sub	sp, #64	; 0x40
 8103c24:	af00      	add	r7, sp, #0
 8103c26:	60f8      	str	r0, [r7, #12]
 8103c28:	60b9      	str	r1, [r7, #8]
 8103c2a:	603b      	str	r3, [r7, #0]
 8103c2c:	4613      	mov	r3, r2
 8103c2e:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103c30:	f7fd ffc4 	bl	8101bbc <HAL_GetTick>
 8103c34:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8103c36:	2300      	movs	r3, #0
 8103c38:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	2200      	movs	r2, #0
 8103c3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103c40:	68fb      	ldr	r3, [r7, #12]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	2200      	movs	r2, #0
 8103c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103c48:	f04f 33ff 	mov.w	r3, #4294967295
 8103c4c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8103c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103c52:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103c54:	2390      	movs	r3, #144	; 0x90
 8103c56:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103c58:	2302      	movs	r3, #2
 8103c5a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103c5c:	2300      	movs	r3, #0
 8103c5e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103c60:	2301      	movs	r3, #1
 8103c62:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	f107 0214 	add.w	r2, r7, #20
 8103c6c:	4611      	mov	r1, r2
 8103c6e:	4618      	mov	r0, r3
 8103c70:	f005 f834 	bl	8108cdc <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103c74:	68fb      	ldr	r3, [r7, #12]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	2100      	movs	r1, #0
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f005 f988 	bl	8108f90 <SDMMC_CmdSendEXTCSD>
 8103c80:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103c84:	2b00      	cmp	r3, #0
 8103c86:	d04e      	beq.n	8103d26 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103c88:	68fb      	ldr	r3, [r7, #12]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	4a5c      	ldr	r2, [pc, #368]	; (8103e00 <MMC_ReadExtCSD+0x1e0>)
 8103c8e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8103c90:	68fb      	ldr	r3, [r7, #12]
 8103c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103c96:	431a      	orrs	r2, r3
 8103c98:	68fb      	ldr	r3, [r7, #12]
 8103c9a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103c9c:	68fb      	ldr	r3, [r7, #12]
 8103c9e:	2201      	movs	r2, #1
 8103ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103ca4:	2301      	movs	r3, #1
 8103ca6:	e0a6      	b.n	8103df6 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	d01c      	beq.n	8103cf0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8103cb6:	2300      	movs	r3, #0
 8103cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103cba:	e013      	b.n	8103ce4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8103cbc:	68fb      	ldr	r3, [r7, #12]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	4618      	mov	r0, r3
 8103cc2:	f004 ff95 	bl	8108bf0 <SDMMC_ReadFIFO>
 8103cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8103cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8103cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103ccc:	4413      	add	r3, r2
 8103cce:	88fa      	ldrh	r2, [r7, #6]
 8103cd0:	0892      	lsrs	r2, r2, #2
 8103cd2:	b292      	uxth	r2, r2
 8103cd4:	4293      	cmp	r3, r2
 8103cd6:	d102      	bne.n	8103cde <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8103cd8:	68bb      	ldr	r3, [r7, #8]
 8103cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103cdc:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8103cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103ce0:	3301      	adds	r3, #1
 8103ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103ce6:	2b07      	cmp	r3, #7
 8103ce8:	d9e8      	bls.n	8103cbc <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8103cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103cec:	3308      	adds	r3, #8
 8103cee:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8103cf0:	f7fd ff64 	bl	8101bbc <HAL_GetTick>
 8103cf4:	4602      	mov	r2, r0
 8103cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103cf8:	1ad3      	subs	r3, r2, r3
 8103cfa:	683a      	ldr	r2, [r7, #0]
 8103cfc:	429a      	cmp	r2, r3
 8103cfe:	d902      	bls.n	8103d06 <MMC_ReadExtCSD+0xe6>
 8103d00:	683b      	ldr	r3, [r7, #0]
 8103d02:	2b00      	cmp	r3, #0
 8103d04:	d10f      	bne.n	8103d26 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103d06:	68fb      	ldr	r3, [r7, #12]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	4a3d      	ldr	r2, [pc, #244]	; (8103e00 <MMC_ReadExtCSD+0x1e0>)
 8103d0c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103d0e:	68fb      	ldr	r3, [r7, #12]
 8103d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8103d16:	68fb      	ldr	r3, [r7, #12]
 8103d18:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103d1a:	68fb      	ldr	r3, [r7, #12]
 8103d1c:	2201      	movs	r2, #1
 8103d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8103d22:	2303      	movs	r3, #3
 8103d24:	e067      	b.n	8103df6 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8103d26:	68fb      	ldr	r3, [r7, #12]
 8103d28:	681b      	ldr	r3, [r3, #0]
 8103d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d2c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d0b9      	beq.n	8103ca8 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103d34:	68fb      	ldr	r3, [r7, #12]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d3a:	f003 0308 	and.w	r3, r3, #8
 8103d3e:	2b00      	cmp	r3, #0
 8103d40:	d00f      	beq.n	8103d62 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103d42:	68fb      	ldr	r3, [r7, #12]
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	4a2e      	ldr	r2, [pc, #184]	; (8103e00 <MMC_ReadExtCSD+0x1e0>)
 8103d48:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d4e:	f043 0208 	orr.w	r2, r3, #8
 8103d52:	68fb      	ldr	r3, [r7, #12]
 8103d54:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103d56:	68fb      	ldr	r3, [r7, #12]
 8103d58:	2201      	movs	r2, #1
 8103d5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103d5e:	2301      	movs	r3, #1
 8103d60:	e049      	b.n	8103df6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103d62:	68fb      	ldr	r3, [r7, #12]
 8103d64:	681b      	ldr	r3, [r3, #0]
 8103d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d68:	f003 0302 	and.w	r3, r3, #2
 8103d6c:	2b00      	cmp	r3, #0
 8103d6e:	d00f      	beq.n	8103d90 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a22      	ldr	r2, [pc, #136]	; (8103e00 <MMC_ReadExtCSD+0x1e0>)
 8103d76:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103d78:	68fb      	ldr	r3, [r7, #12]
 8103d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d7c:	f043 0202 	orr.w	r2, r3, #2
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103d84:	68fb      	ldr	r3, [r7, #12]
 8103d86:	2201      	movs	r2, #1
 8103d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103d8c:	2301      	movs	r3, #1
 8103d8e:	e032      	b.n	8103df6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103d90:	68fb      	ldr	r3, [r7, #12]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103d96:	f003 0320 	and.w	r3, r3, #32
 8103d9a:	2b00      	cmp	r3, #0
 8103d9c:	d00f      	beq.n	8103dbe <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103d9e:	68fb      	ldr	r3, [r7, #12]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	4a17      	ldr	r2, [pc, #92]	; (8103e00 <MMC_ReadExtCSD+0x1e0>)
 8103da4:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103da6:	68fb      	ldr	r3, [r7, #12]
 8103da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103daa:	f043 0220 	orr.w	r2, r3, #32
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103db2:	68fb      	ldr	r3, [r7, #12]
 8103db4:	2201      	movs	r2, #1
 8103db6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103dba:	2301      	movs	r3, #1
 8103dbc:	e01b      	b.n	8103df6 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8103dbe:	68fb      	ldr	r3, [r7, #12]
 8103dc0:	681a      	ldr	r2, [r3, #0]
 8103dc2:	68fb      	ldr	r3, [r7, #12]
 8103dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103dc6:	041b      	lsls	r3, r3, #16
 8103dc8:	4619      	mov	r1, r3
 8103dca:	4610      	mov	r0, r2
 8103dcc:	f005 f87a 	bl	8108ec4 <SDMMC_CmdSendStatus>
 8103dd0:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103dd4:	2b00      	cmp	r3, #0
 8103dd6:	d005      	beq.n	8103de4 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8103dd8:	68fb      	ldr	r3, [r7, #12]
 8103dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103dde:	431a      	orrs	r2, r3
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103de4:	68fb      	ldr	r3, [r7, #12]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	4a06      	ldr	r2, [pc, #24]	; (8103e04 <MMC_ReadExtCSD+0x1e4>)
 8103dea:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8103dec:	68fb      	ldr	r3, [r7, #12]
 8103dee:	2201      	movs	r2, #1
 8103df0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8103df4:	2300      	movs	r3, #0
}
 8103df6:	4618      	mov	r0, r3
 8103df8:	3740      	adds	r7, #64	; 0x40
 8103dfa:	46bd      	mov	sp, r7
 8103dfc:	bd80      	pop	{r7, pc}
 8103dfe:	bf00      	nop
 8103e00:	1fe00fff 	.word	0x1fe00fff
 8103e04:	18000f3a 	.word	0x18000f3a

08103e08 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8103e08:	b580      	push	{r7, lr}
 8103e0a:	b08a      	sub	sp, #40	; 0x28
 8103e0c:	af00      	add	r7, sp, #0
 8103e0e:	60f8      	str	r0, [r7, #12]
 8103e10:	60b9      	str	r1, [r7, #8]
 8103e12:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8103e14:	2300      	movs	r3, #0
 8103e16:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8103e18:	2300      	movs	r3, #0
 8103e1a:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8103e1c:	68bb      	ldr	r3, [r7, #8]
 8103e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e22:	d004      	beq.n	8103e2e <MMC_PwrClassUpdate+0x26>
 8103e24:	68bb      	ldr	r3, [r7, #8]
 8103e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103e2a:	f040 8088 	bne.w	8103f3e <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8103e2e:	2300      	movs	r3, #0
 8103e30:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8103e32:	f107 0114 	add.w	r1, r7, #20
 8103e36:	f04f 33ff 	mov.w	r3, #4294967295
 8103e3a:	22bb      	movs	r2, #187	; 0xbb
 8103e3c:	68f8      	ldr	r0, [r7, #12]
 8103e3e:	f7ff feef 	bl	8103c20 <MMC_ReadExtCSD>
 8103e42:	4603      	mov	r3, r0
 8103e44:	2b00      	cmp	r3, #0
 8103e46:	d003      	beq.n	8103e50 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8103e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8103e4c:	61fb      	str	r3, [r7, #28]
 8103e4e:	e002      	b.n	8103e56 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8103e50:	697b      	ldr	r3, [r7, #20]
 8103e52:	0e1b      	lsrs	r3, r3, #24
 8103e54:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	2b04      	cmp	r3, #4
 8103e5a:	d105      	bne.n	8103e68 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8103e62:	0e1b      	lsrs	r3, r3, #24
 8103e64:	61bb      	str	r3, [r7, #24]
 8103e66:	e00e      	b.n	8103e86 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	2b02      	cmp	r3, #2
 8103e6c:	d106      	bne.n	8103e7c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8103e74:	0c1b      	lsrs	r3, r3, #16
 8103e76:	b2db      	uxtb	r3, r3
 8103e78:	61bb      	str	r3, [r7, #24]
 8103e7a:	e004      	b.n	8103e86 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8103e82:	0e1b      	lsrs	r3, r3, #24
 8103e84:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8103e86:	69fb      	ldr	r3, [r7, #28]
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d158      	bne.n	8103f3e <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8103e8c:	68bb      	ldr	r3, [r7, #8]
 8103e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e92:	d102      	bne.n	8103e9a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8103e94:	69bb      	ldr	r3, [r7, #24]
 8103e96:	091b      	lsrs	r3, r3, #4
 8103e98:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8103e9a:	697a      	ldr	r2, [r7, #20]
 8103e9c:	69bb      	ldr	r3, [r7, #24]
 8103e9e:	4053      	eors	r3, r2
 8103ea0:	f003 030f 	and.w	r3, r3, #15
 8103ea4:	2b00      	cmp	r3, #0
 8103ea6:	d04a      	beq.n	8103f3e <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8103ea8:	68fb      	ldr	r3, [r7, #12]
 8103eaa:	681a      	ldr	r2, [r3, #0]
 8103eac:	69bb      	ldr	r3, [r7, #24]
 8103eae:	021b      	lsls	r3, r3, #8
 8103eb0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8103eb4:	f043 736e 	orr.w	r3, r3, #62390272	; 0x3b80000
 8103eb8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8103ebc:	4619      	mov	r1, r3
 8103ebe:	4610      	mov	r0, r2
 8103ec0:	f005 f843 	bl	8108f4a <SDMMC_CmdSwitch>
 8103ec4:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8103ec6:	69fb      	ldr	r3, [r7, #28]
 8103ec8:	2b00      	cmp	r3, #0
 8103eca:	d138      	bne.n	8103f3e <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8103ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8103ed0:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103ed2:	68fb      	ldr	r3, [r7, #12]
 8103ed4:	681a      	ldr	r2, [r3, #0]
 8103ed6:	68fb      	ldr	r3, [r7, #12]
 8103ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103eda:	041b      	lsls	r3, r3, #16
 8103edc:	4619      	mov	r1, r3
 8103ede:	4610      	mov	r0, r2
 8103ee0:	f004 fff0 	bl	8108ec4 <SDMMC_CmdSendStatus>
 8103ee4:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8103ee6:	69fb      	ldr	r3, [r7, #28]
 8103ee8:	2b00      	cmp	r3, #0
 8103eea:	d112      	bne.n	8103f12 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103eec:	68fb      	ldr	r3, [r7, #12]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	2100      	movs	r1, #0
 8103ef2:	4618      	mov	r0, r3
 8103ef4:	f004 fedf 	bl	8108cb6 <SDMMC_GetResponse>
 8103ef8:	6238      	str	r0, [r7, #32]
            count--;
 8103efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103efc:	3b01      	subs	r3, #1
 8103efe:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8103f00:	6a3b      	ldr	r3, [r7, #32]
 8103f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f06:	2b00      	cmp	r3, #0
 8103f08:	d104      	bne.n	8103f14 <MMC_PwrClassUpdate+0x10c>
 8103f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103f0c:	2b00      	cmp	r3, #0
 8103f0e:	d1e0      	bne.n	8103ed2 <MMC_PwrClassUpdate+0xca>
 8103f10:	e000      	b.n	8103f14 <MMC_PwrClassUpdate+0x10c>
              break;
 8103f12:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8103f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d00b      	beq.n	8103f32 <MMC_PwrClassUpdate+0x12a>
 8103f1a:	69fb      	ldr	r3, [r7, #28]
 8103f1c:	2b00      	cmp	r3, #0
 8103f1e:	d108      	bne.n	8103f32 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8103f20:	6a3b      	ldr	r3, [r7, #32]
 8103f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	d009      	beq.n	8103f3e <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8103f2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8103f2e:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8103f30:	e005      	b.n	8103f3e <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8103f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d102      	bne.n	8103f3e <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8103f38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103f3c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8103f3e:	69fb      	ldr	r3, [r7, #28]
}
 8103f40:	4618      	mov	r0, r3
 8103f42:	3728      	adds	r7, #40	; 0x28
 8103f44:	46bd      	mov	sp, r7
 8103f46:	bd80      	pop	{r7, pc}

08103f48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8103f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103f4a:	b08f      	sub	sp, #60	; 0x3c
 8103f4c:	af0a      	add	r7, sp, #40	; 0x28
 8103f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d101      	bne.n	8103f5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8103f56:	2301      	movs	r3, #1
 8103f58:	e116      	b.n	8104188 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8103f66:	b2db      	uxtb	r3, r3
 8103f68:	2b00      	cmp	r3, #0
 8103f6a:	d106      	bne.n	8103f7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2200      	movs	r2, #0
 8103f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8103f74:	6878      	ldr	r0, [r7, #4]
 8103f76:	f7fd fb27 	bl	81015c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	2203      	movs	r2, #3
 8103f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8103f82:	68bb      	ldr	r3, [r7, #8]
 8103f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d102      	bne.n	8103f94 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	2200      	movs	r2, #0
 8103f92:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	681b      	ldr	r3, [r3, #0]
 8103f98:	4618      	mov	r0, r3
 8103f9a:	f005 fa35 	bl	8109408 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	603b      	str	r3, [r7, #0]
 8103fa4:	687e      	ldr	r6, [r7, #4]
 8103fa6:	466d      	mov	r5, sp
 8103fa8:	f106 0410 	add.w	r4, r6, #16
 8103fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8103fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8103fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8103fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8103fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8103fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8103fbc:	1d33      	adds	r3, r6, #4
 8103fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103fc0:	6838      	ldr	r0, [r7, #0]
 8103fc2:	f005 f9b3 	bl	810932c <USB_CoreInit>
 8103fc6:	4603      	mov	r3, r0
 8103fc8:	2b00      	cmp	r3, #0
 8103fca:	d005      	beq.n	8103fd8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	2202      	movs	r2, #2
 8103fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8103fd4:	2301      	movs	r3, #1
 8103fd6:	e0d7      	b.n	8104188 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	2100      	movs	r1, #0
 8103fde:	4618      	mov	r0, r3
 8103fe0:	f005 fa23 	bl	810942a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8103fe4:	2300      	movs	r3, #0
 8103fe6:	73fb      	strb	r3, [r7, #15]
 8103fe8:	e04a      	b.n	8104080 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8103fea:	7bfa      	ldrb	r2, [r7, #15]
 8103fec:	6879      	ldr	r1, [r7, #4]
 8103fee:	4613      	mov	r3, r2
 8103ff0:	00db      	lsls	r3, r3, #3
 8103ff2:	4413      	add	r3, r2
 8103ff4:	009b      	lsls	r3, r3, #2
 8103ff6:	440b      	add	r3, r1
 8103ff8:	333d      	adds	r3, #61	; 0x3d
 8103ffa:	2201      	movs	r2, #1
 8103ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8103ffe:	7bfa      	ldrb	r2, [r7, #15]
 8104000:	6879      	ldr	r1, [r7, #4]
 8104002:	4613      	mov	r3, r2
 8104004:	00db      	lsls	r3, r3, #3
 8104006:	4413      	add	r3, r2
 8104008:	009b      	lsls	r3, r3, #2
 810400a:	440b      	add	r3, r1
 810400c:	333c      	adds	r3, #60	; 0x3c
 810400e:	7bfa      	ldrb	r2, [r7, #15]
 8104010:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8104012:	7bfa      	ldrb	r2, [r7, #15]
 8104014:	7bfb      	ldrb	r3, [r7, #15]
 8104016:	b298      	uxth	r0, r3
 8104018:	6879      	ldr	r1, [r7, #4]
 810401a:	4613      	mov	r3, r2
 810401c:	00db      	lsls	r3, r3, #3
 810401e:	4413      	add	r3, r2
 8104020:	009b      	lsls	r3, r3, #2
 8104022:	440b      	add	r3, r1
 8104024:	3356      	adds	r3, #86	; 0x56
 8104026:	4602      	mov	r2, r0
 8104028:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 810402a:	7bfa      	ldrb	r2, [r7, #15]
 810402c:	6879      	ldr	r1, [r7, #4]
 810402e:	4613      	mov	r3, r2
 8104030:	00db      	lsls	r3, r3, #3
 8104032:	4413      	add	r3, r2
 8104034:	009b      	lsls	r3, r3, #2
 8104036:	440b      	add	r3, r1
 8104038:	3340      	adds	r3, #64	; 0x40
 810403a:	2200      	movs	r2, #0
 810403c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 810403e:	7bfa      	ldrb	r2, [r7, #15]
 8104040:	6879      	ldr	r1, [r7, #4]
 8104042:	4613      	mov	r3, r2
 8104044:	00db      	lsls	r3, r3, #3
 8104046:	4413      	add	r3, r2
 8104048:	009b      	lsls	r3, r3, #2
 810404a:	440b      	add	r3, r1
 810404c:	3344      	adds	r3, #68	; 0x44
 810404e:	2200      	movs	r2, #0
 8104050:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8104052:	7bfa      	ldrb	r2, [r7, #15]
 8104054:	6879      	ldr	r1, [r7, #4]
 8104056:	4613      	mov	r3, r2
 8104058:	00db      	lsls	r3, r3, #3
 810405a:	4413      	add	r3, r2
 810405c:	009b      	lsls	r3, r3, #2
 810405e:	440b      	add	r3, r1
 8104060:	3348      	adds	r3, #72	; 0x48
 8104062:	2200      	movs	r2, #0
 8104064:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8104066:	7bfa      	ldrb	r2, [r7, #15]
 8104068:	6879      	ldr	r1, [r7, #4]
 810406a:	4613      	mov	r3, r2
 810406c:	00db      	lsls	r3, r3, #3
 810406e:	4413      	add	r3, r2
 8104070:	009b      	lsls	r3, r3, #2
 8104072:	440b      	add	r3, r1
 8104074:	334c      	adds	r3, #76	; 0x4c
 8104076:	2200      	movs	r2, #0
 8104078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810407a:	7bfb      	ldrb	r3, [r7, #15]
 810407c:	3301      	adds	r3, #1
 810407e:	73fb      	strb	r3, [r7, #15]
 8104080:	7bfa      	ldrb	r2, [r7, #15]
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	685b      	ldr	r3, [r3, #4]
 8104086:	429a      	cmp	r2, r3
 8104088:	d3af      	bcc.n	8103fea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810408a:	2300      	movs	r3, #0
 810408c:	73fb      	strb	r3, [r7, #15]
 810408e:	e044      	b.n	810411a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8104090:	7bfa      	ldrb	r2, [r7, #15]
 8104092:	6879      	ldr	r1, [r7, #4]
 8104094:	4613      	mov	r3, r2
 8104096:	00db      	lsls	r3, r3, #3
 8104098:	4413      	add	r3, r2
 810409a:	009b      	lsls	r3, r3, #2
 810409c:	440b      	add	r3, r1
 810409e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 81040a2:	2200      	movs	r2, #0
 81040a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 81040a6:	7bfa      	ldrb	r2, [r7, #15]
 81040a8:	6879      	ldr	r1, [r7, #4]
 81040aa:	4613      	mov	r3, r2
 81040ac:	00db      	lsls	r3, r3, #3
 81040ae:	4413      	add	r3, r2
 81040b0:	009b      	lsls	r3, r3, #2
 81040b2:	440b      	add	r3, r1
 81040b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 81040b8:	7bfa      	ldrb	r2, [r7, #15]
 81040ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 81040bc:	7bfa      	ldrb	r2, [r7, #15]
 81040be:	6879      	ldr	r1, [r7, #4]
 81040c0:	4613      	mov	r3, r2
 81040c2:	00db      	lsls	r3, r3, #3
 81040c4:	4413      	add	r3, r2
 81040c6:	009b      	lsls	r3, r3, #2
 81040c8:	440b      	add	r3, r1
 81040ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 81040ce:	2200      	movs	r2, #0
 81040d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 81040d2:	7bfa      	ldrb	r2, [r7, #15]
 81040d4:	6879      	ldr	r1, [r7, #4]
 81040d6:	4613      	mov	r3, r2
 81040d8:	00db      	lsls	r3, r3, #3
 81040da:	4413      	add	r3, r2
 81040dc:	009b      	lsls	r3, r3, #2
 81040de:	440b      	add	r3, r1
 81040e0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 81040e4:	2200      	movs	r2, #0
 81040e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 81040e8:	7bfa      	ldrb	r2, [r7, #15]
 81040ea:	6879      	ldr	r1, [r7, #4]
 81040ec:	4613      	mov	r3, r2
 81040ee:	00db      	lsls	r3, r3, #3
 81040f0:	4413      	add	r3, r2
 81040f2:	009b      	lsls	r3, r3, #2
 81040f4:	440b      	add	r3, r1
 81040f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 81040fa:	2200      	movs	r2, #0
 81040fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81040fe:	7bfa      	ldrb	r2, [r7, #15]
 8104100:	6879      	ldr	r1, [r7, #4]
 8104102:	4613      	mov	r3, r2
 8104104:	00db      	lsls	r3, r3, #3
 8104106:	4413      	add	r3, r2
 8104108:	009b      	lsls	r3, r3, #2
 810410a:	440b      	add	r3, r1
 810410c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8104110:	2200      	movs	r2, #0
 8104112:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104114:	7bfb      	ldrb	r3, [r7, #15]
 8104116:	3301      	adds	r3, #1
 8104118:	73fb      	strb	r3, [r7, #15]
 810411a:	7bfa      	ldrb	r2, [r7, #15]
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	685b      	ldr	r3, [r3, #4]
 8104120:	429a      	cmp	r2, r3
 8104122:	d3b5      	bcc.n	8104090 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	603b      	str	r3, [r7, #0]
 810412a:	687e      	ldr	r6, [r7, #4]
 810412c:	466d      	mov	r5, sp
 810412e:	f106 0410 	add.w	r4, r6, #16
 8104132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8104136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8104138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 810413a:	e894 0003 	ldmia.w	r4, {r0, r1}
 810413e:	e885 0003 	stmia.w	r5, {r0, r1}
 8104142:	1d33      	adds	r3, r6, #4
 8104144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8104146:	6838      	ldr	r0, [r7, #0]
 8104148:	f005 f9bc 	bl	81094c4 <USB_DevInit>
 810414c:	4603      	mov	r3, r0
 810414e:	2b00      	cmp	r3, #0
 8104150:	d005      	beq.n	810415e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	2202      	movs	r2, #2
 8104156:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 810415a:	2301      	movs	r3, #1
 810415c:	e014      	b.n	8104188 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	2200      	movs	r2, #0
 8104162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	2201      	movs	r2, #1
 810416a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104172:	2b01      	cmp	r3, #1
 8104174:	d102      	bne.n	810417c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8104176:	6878      	ldr	r0, [r7, #4]
 8104178:	f000 f80a 	bl	8104190 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4618      	mov	r0, r3
 8104182:	f005 fb7a 	bl	810987a <USB_DevDisconnect>

  return HAL_OK;
 8104186:	2300      	movs	r3, #0
}
 8104188:	4618      	mov	r0, r3
 810418a:	3714      	adds	r7, #20
 810418c:	46bd      	mov	sp, r7
 810418e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08104190 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8104190:	b480      	push	{r7}
 8104192:	b085      	sub	sp, #20
 8104194:	af00      	add	r7, sp, #0
 8104196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	2201      	movs	r2, #1
 81041a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	2200      	movs	r2, #0
 81041aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	699b      	ldr	r3, [r3, #24]
 81041b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81041c2:	f043 0303 	orr.w	r3, r3, #3
 81041c6:	68fa      	ldr	r2, [r7, #12]
 81041c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 81041ca:	2300      	movs	r3, #0
}
 81041cc:	4618      	mov	r0, r3
 81041ce:	3714      	adds	r7, #20
 81041d0:	46bd      	mov	sp, r7
 81041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041d6:	4770      	bx	lr

081041d8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81041d8:	b580      	push	{r7, lr}
 81041da:	b084      	sub	sp, #16
 81041dc:	af00      	add	r7, sp, #0
 81041de:	60f8      	str	r0, [r7, #12]
 81041e0:	460b      	mov	r3, r1
 81041e2:	607a      	str	r2, [r7, #4]
 81041e4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81041e6:	4b37      	ldr	r3, [pc, #220]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	f023 0201 	bic.w	r2, r3, #1
 81041ee:	4935      	ldr	r1, [pc, #212]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	4313      	orrs	r3, r2
 81041f4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d123      	bne.n	8104244 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81041fc:	f7fd fe12 	bl	8101e24 <HAL_GetCurrentCPUID>
 8104200:	4603      	mov	r3, r0
 8104202:	2b03      	cmp	r3, #3
 8104204:	d158      	bne.n	81042b8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104206:	4b2f      	ldr	r3, [pc, #188]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104208:	691b      	ldr	r3, [r3, #16]
 810420a:	4a2e      	ldr	r2, [pc, #184]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810420c:	f023 0301 	bic.w	r3, r3, #1
 8104210:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104212:	4b2d      	ldr	r3, [pc, #180]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104214:	691b      	ldr	r3, [r3, #16]
 8104216:	4a2c      	ldr	r2, [pc, #176]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104218:	f043 0304 	orr.w	r3, r3, #4
 810421c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810421e:	f3bf 8f4f 	dsb	sy
}
 8104222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104224:	f3bf 8f6f 	isb	sy
}
 8104228:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810422a:	7afb      	ldrb	r3, [r7, #11]
 810422c:	2b01      	cmp	r3, #1
 810422e:	d101      	bne.n	8104234 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104230:	bf30      	wfi
 8104232:	e000      	b.n	8104236 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104234:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104236:	4b24      	ldr	r3, [pc, #144]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104238:	691b      	ldr	r3, [r3, #16]
 810423a:	4a23      	ldr	r2, [pc, #140]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810423c:	f023 0304 	bic.w	r3, r3, #4
 8104240:	6113      	str	r3, [r2, #16]
 8104242:	e03c      	b.n	81042be <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	2b01      	cmp	r3, #1
 8104248:	d123      	bne.n	8104292 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810424a:	f7fd fdeb 	bl	8101e24 <HAL_GetCurrentCPUID>
 810424e:	4603      	mov	r3, r0
 8104250:	2b01      	cmp	r3, #1
 8104252:	d133      	bne.n	81042bc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104254:	4b1b      	ldr	r3, [pc, #108]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104256:	695b      	ldr	r3, [r3, #20]
 8104258:	4a1a      	ldr	r2, [pc, #104]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810425a:	f023 0302 	bic.w	r3, r3, #2
 810425e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104260:	4b19      	ldr	r3, [pc, #100]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104262:	691b      	ldr	r3, [r3, #16]
 8104264:	4a18      	ldr	r2, [pc, #96]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104266:	f043 0304 	orr.w	r3, r3, #4
 810426a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810426c:	f3bf 8f4f 	dsb	sy
}
 8104270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104272:	f3bf 8f6f 	isb	sy
}
 8104276:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104278:	7afb      	ldrb	r3, [r7, #11]
 810427a:	2b01      	cmp	r3, #1
 810427c:	d101      	bne.n	8104282 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810427e:	bf30      	wfi
 8104280:	e000      	b.n	8104284 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104282:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104284:	4b10      	ldr	r3, [pc, #64]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104286:	691b      	ldr	r3, [r3, #16]
 8104288:	4a0f      	ldr	r2, [pc, #60]	; (81042c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810428a:	f023 0304 	bic.w	r3, r3, #4
 810428e:	6113      	str	r3, [r2, #16]
 8104290:	e015      	b.n	81042be <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104292:	f7fd fdc7 	bl	8101e24 <HAL_GetCurrentCPUID>
 8104296:	4603      	mov	r3, r0
 8104298:	2b03      	cmp	r3, #3
 810429a:	d106      	bne.n	81042aa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810429c:	4b09      	ldr	r3, [pc, #36]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810429e:	691b      	ldr	r3, [r3, #16]
 81042a0:	4a08      	ldr	r2, [pc, #32]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81042a2:	f023 0304 	bic.w	r3, r3, #4
 81042a6:	6113      	str	r3, [r2, #16]
 81042a8:	e009      	b.n	81042be <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81042aa:	4b06      	ldr	r3, [pc, #24]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81042ac:	695b      	ldr	r3, [r3, #20]
 81042ae:	4a05      	ldr	r2, [pc, #20]	; (81042c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81042b0:	f023 0304 	bic.w	r3, r3, #4
 81042b4:	6153      	str	r3, [r2, #20]
 81042b6:	e002      	b.n	81042be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81042b8:	bf00      	nop
 81042ba:	e000      	b.n	81042be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81042bc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81042be:	3710      	adds	r7, #16
 81042c0:	46bd      	mov	sp, r7
 81042c2:	bd80      	pop	{r7, pc}
 81042c4:	58024800 	.word	0x58024800
 81042c8:	e000ed00 	.word	0xe000ed00

081042cc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81042cc:	b580      	push	{r7, lr}
 81042ce:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81042d0:	f7fd fda8 	bl	8101e24 <HAL_GetCurrentCPUID>
 81042d4:	4603      	mov	r3, r0
 81042d6:	2b03      	cmp	r3, #3
 81042d8:	d101      	bne.n	81042de <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81042da:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81042dc:	e001      	b.n	81042e2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81042de:	bf40      	sev
    __WFE ();
 81042e0:	bf20      	wfe
}
 81042e2:	bf00      	nop
 81042e4:	bd80      	pop	{r7, pc}
	...

081042e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81042e8:	b480      	push	{r7}
 81042ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81042ec:	4b05      	ldr	r3, [pc, #20]	; (8104304 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81042ee:	68db      	ldr	r3, [r3, #12]
 81042f0:	4a04      	ldr	r2, [pc, #16]	; (8104304 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81042f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81042f6:	60d3      	str	r3, [r2, #12]
}
 81042f8:	bf00      	nop
 81042fa:	46bd      	mov	sp, r7
 81042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104300:	4770      	bx	lr
 8104302:	bf00      	nop
 8104304:	58024800 	.word	0x58024800

08104308 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8104308:	b580      	push	{r7, lr}
 810430a:	b086      	sub	sp, #24
 810430c:	af02      	add	r7, sp, #8
 810430e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8104310:	f7fd fc54 	bl	8101bbc <HAL_GetTick>
 8104314:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	2b00      	cmp	r3, #0
 810431a:	d101      	bne.n	8104320 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 810431c:	2301      	movs	r3, #1
 810431e:	e061      	b.n	81043e4 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104326:	b2db      	uxtb	r3, r3
 8104328:	2b00      	cmp	r3, #0
 810432a:	d107      	bne.n	810433c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 810432c:	6878      	ldr	r0, [r7, #4]
 810432e:	f7fc ff5f 	bl	81011f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8104332:	f241 3188 	movw	r1, #5000	; 0x1388
 8104336:	6878      	ldr	r0, [r7, #4]
 8104338:	f000 f85a 	bl	81043f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	681b      	ldr	r3, [r3, #0]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	689b      	ldr	r3, [r3, #8]
 810434a:	3b01      	subs	r3, #1
 810434c:	021a      	lsls	r2, r3, #8
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	681b      	ldr	r3, [r3, #0]
 8104352:	430a      	orrs	r2, r1
 8104354:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810435a:	9300      	str	r3, [sp, #0]
 810435c:	68fb      	ldr	r3, [r7, #12]
 810435e:	2200      	movs	r2, #0
 8104360:	2120      	movs	r1, #32
 8104362:	6878      	ldr	r0, [r7, #4]
 8104364:	f000 f852 	bl	810440c <QSPI_WaitFlagStateUntilTimeout>
 8104368:	4603      	mov	r3, r0
 810436a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 810436c:	7afb      	ldrb	r3, [r7, #11]
 810436e:	2b00      	cmp	r3, #0
 8104370:	d137      	bne.n	81043e2 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810437c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8104380:	687a      	ldr	r2, [r7, #4]
 8104382:	6852      	ldr	r2, [r2, #4]
 8104384:	0611      	lsls	r1, r2, #24
 8104386:	687a      	ldr	r2, [r7, #4]
 8104388:	68d2      	ldr	r2, [r2, #12]
 810438a:	4311      	orrs	r1, r2
 810438c:	687a      	ldr	r2, [r7, #4]
 810438e:	69d2      	ldr	r2, [r2, #28]
 8104390:	4311      	orrs	r1, r2
 8104392:	687a      	ldr	r2, [r7, #4]
 8104394:	6a12      	ldr	r2, [r2, #32]
 8104396:	4311      	orrs	r1, r2
 8104398:	687a      	ldr	r2, [r7, #4]
 810439a:	6812      	ldr	r2, [r2, #0]
 810439c:	430b      	orrs	r3, r1
 810439e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	685a      	ldr	r2, [r3, #4]
 81043a6:	4b11      	ldr	r3, [pc, #68]	; (81043ec <HAL_QSPI_Init+0xe4>)
 81043a8:	4013      	ands	r3, r2
 81043aa:	687a      	ldr	r2, [r7, #4]
 81043ac:	6912      	ldr	r2, [r2, #16]
 81043ae:	0411      	lsls	r1, r2, #16
 81043b0:	687a      	ldr	r2, [r7, #4]
 81043b2:	6952      	ldr	r2, [r2, #20]
 81043b4:	4311      	orrs	r1, r2
 81043b6:	687a      	ldr	r2, [r7, #4]
 81043b8:	6992      	ldr	r2, [r2, #24]
 81043ba:	4311      	orrs	r1, r2
 81043bc:	687a      	ldr	r2, [r7, #4]
 81043be:	6812      	ldr	r2, [r2, #0]
 81043c0:	430b      	orrs	r3, r1
 81043c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	681a      	ldr	r2, [r3, #0]
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f042 0201 	orr.w	r2, r2, #1
 81043d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	2200      	movs	r2, #0
 81043d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	2201      	movs	r2, #1
 81043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 81043e2:	7afb      	ldrb	r3, [r7, #11]
}
 81043e4:	4618      	mov	r0, r3
 81043e6:	3710      	adds	r7, #16
 81043e8:	46bd      	mov	sp, r7
 81043ea:	bd80      	pop	{r7, pc}
 81043ec:	ffe0f8fe 	.word	0xffe0f8fe

081043f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 81043f0:	b480      	push	{r7}
 81043f2:	b083      	sub	sp, #12
 81043f4:	af00      	add	r7, sp, #0
 81043f6:	6078      	str	r0, [r7, #4]
 81043f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	683a      	ldr	r2, [r7, #0]
 81043fe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8104400:	bf00      	nop
 8104402:	370c      	adds	r7, #12
 8104404:	46bd      	mov	sp, r7
 8104406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810440a:	4770      	bx	lr

0810440c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 810440c:	b580      	push	{r7, lr}
 810440e:	b084      	sub	sp, #16
 8104410:	af00      	add	r7, sp, #0
 8104412:	60f8      	str	r0, [r7, #12]
 8104414:	60b9      	str	r1, [r7, #8]
 8104416:	603b      	str	r3, [r7, #0]
 8104418:	4613      	mov	r3, r2
 810441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 810441c:	e01a      	b.n	8104454 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810441e:	69bb      	ldr	r3, [r7, #24]
 8104420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104424:	d016      	beq.n	8104454 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104426:	f7fd fbc9 	bl	8101bbc <HAL_GetTick>
 810442a:	4602      	mov	r2, r0
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	1ad3      	subs	r3, r2, r3
 8104430:	69ba      	ldr	r2, [r7, #24]
 8104432:	429a      	cmp	r2, r3
 8104434:	d302      	bcc.n	810443c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8104436:	69bb      	ldr	r3, [r7, #24]
 8104438:	2b00      	cmp	r3, #0
 810443a:	d10b      	bne.n	8104454 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	2204      	movs	r2, #4
 8104440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104448:	f043 0201 	orr.w	r2, r3, #1
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8104450:	2301      	movs	r3, #1
 8104452:	e00e      	b.n	8104472 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8104454:	68fb      	ldr	r3, [r7, #12]
 8104456:	681b      	ldr	r3, [r3, #0]
 8104458:	689a      	ldr	r2, [r3, #8]
 810445a:	68bb      	ldr	r3, [r7, #8]
 810445c:	4013      	ands	r3, r2
 810445e:	2b00      	cmp	r3, #0
 8104460:	bf14      	ite	ne
 8104462:	2301      	movne	r3, #1
 8104464:	2300      	moveq	r3, #0
 8104466:	b2db      	uxtb	r3, r3
 8104468:	461a      	mov	r2, r3
 810446a:	79fb      	ldrb	r3, [r7, #7]
 810446c:	429a      	cmp	r2, r3
 810446e:	d1d6      	bne.n	810441e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104470:	2300      	movs	r3, #0
}
 8104472:	4618      	mov	r0, r3
 8104474:	3710      	adds	r7, #16
 8104476:	46bd      	mov	sp, r7
 8104478:	bd80      	pop	{r7, pc}
	...

0810447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810447c:	b480      	push	{r7}
 810447e:	b089      	sub	sp, #36	; 0x24
 8104480:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104482:	4bb3      	ldr	r3, [pc, #716]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104484:	691b      	ldr	r3, [r3, #16]
 8104486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810448a:	2b18      	cmp	r3, #24
 810448c:	f200 8155 	bhi.w	810473a <HAL_RCC_GetSysClockFreq+0x2be>
 8104490:	a201      	add	r2, pc, #4	; (adr r2, 8104498 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104496:	bf00      	nop
 8104498:	081044fd 	.word	0x081044fd
 810449c:	0810473b 	.word	0x0810473b
 81044a0:	0810473b 	.word	0x0810473b
 81044a4:	0810473b 	.word	0x0810473b
 81044a8:	0810473b 	.word	0x0810473b
 81044ac:	0810473b 	.word	0x0810473b
 81044b0:	0810473b 	.word	0x0810473b
 81044b4:	0810473b 	.word	0x0810473b
 81044b8:	08104523 	.word	0x08104523
 81044bc:	0810473b 	.word	0x0810473b
 81044c0:	0810473b 	.word	0x0810473b
 81044c4:	0810473b 	.word	0x0810473b
 81044c8:	0810473b 	.word	0x0810473b
 81044cc:	0810473b 	.word	0x0810473b
 81044d0:	0810473b 	.word	0x0810473b
 81044d4:	0810473b 	.word	0x0810473b
 81044d8:	08104529 	.word	0x08104529
 81044dc:	0810473b 	.word	0x0810473b
 81044e0:	0810473b 	.word	0x0810473b
 81044e4:	0810473b 	.word	0x0810473b
 81044e8:	0810473b 	.word	0x0810473b
 81044ec:	0810473b 	.word	0x0810473b
 81044f0:	0810473b 	.word	0x0810473b
 81044f4:	0810473b 	.word	0x0810473b
 81044f8:	0810452f 	.word	0x0810452f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81044fc:	4b94      	ldr	r3, [pc, #592]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	f003 0320 	and.w	r3, r3, #32
 8104504:	2b00      	cmp	r3, #0
 8104506:	d009      	beq.n	810451c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104508:	4b91      	ldr	r3, [pc, #580]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	08db      	lsrs	r3, r3, #3
 810450e:	f003 0303 	and.w	r3, r3, #3
 8104512:	4a90      	ldr	r2, [pc, #576]	; (8104754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104514:	fa22 f303 	lsr.w	r3, r2, r3
 8104518:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810451a:	e111      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810451c:	4b8d      	ldr	r3, [pc, #564]	; (8104754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810451e:	61bb      	str	r3, [r7, #24]
      break;
 8104520:	e10e      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104522:	4b8d      	ldr	r3, [pc, #564]	; (8104758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104524:	61bb      	str	r3, [r7, #24]
      break;
 8104526:	e10b      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104528:	4b8c      	ldr	r3, [pc, #560]	; (810475c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810452a:	61bb      	str	r3, [r7, #24]
      break;
 810452c:	e108      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810452e:	4b88      	ldr	r3, [pc, #544]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104532:	f003 0303 	and.w	r3, r3, #3
 8104536:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104538:	4b85      	ldr	r3, [pc, #532]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810453c:	091b      	lsrs	r3, r3, #4
 810453e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104542:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104544:	4b82      	ldr	r3, [pc, #520]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104548:	f003 0301 	and.w	r3, r3, #1
 810454c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810454e:	4b80      	ldr	r3, [pc, #512]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104552:	08db      	lsrs	r3, r3, #3
 8104554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104558:	68fa      	ldr	r2, [r7, #12]
 810455a:	fb02 f303 	mul.w	r3, r2, r3
 810455e:	ee07 3a90 	vmov	s15, r3
 8104562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104566:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810456a:	693b      	ldr	r3, [r7, #16]
 810456c:	2b00      	cmp	r3, #0
 810456e:	f000 80e1 	beq.w	8104734 <HAL_RCC_GetSysClockFreq+0x2b8>
 8104572:	697b      	ldr	r3, [r7, #20]
 8104574:	2b02      	cmp	r3, #2
 8104576:	f000 8083 	beq.w	8104680 <HAL_RCC_GetSysClockFreq+0x204>
 810457a:	697b      	ldr	r3, [r7, #20]
 810457c:	2b02      	cmp	r3, #2
 810457e:	f200 80a1 	bhi.w	81046c4 <HAL_RCC_GetSysClockFreq+0x248>
 8104582:	697b      	ldr	r3, [r7, #20]
 8104584:	2b00      	cmp	r3, #0
 8104586:	d003      	beq.n	8104590 <HAL_RCC_GetSysClockFreq+0x114>
 8104588:	697b      	ldr	r3, [r7, #20]
 810458a:	2b01      	cmp	r3, #1
 810458c:	d056      	beq.n	810463c <HAL_RCC_GetSysClockFreq+0x1c0>
 810458e:	e099      	b.n	81046c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104590:	4b6f      	ldr	r3, [pc, #444]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f003 0320 	and.w	r3, r3, #32
 8104598:	2b00      	cmp	r3, #0
 810459a:	d02d      	beq.n	81045f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810459c:	4b6c      	ldr	r3, [pc, #432]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	08db      	lsrs	r3, r3, #3
 81045a2:	f003 0303 	and.w	r3, r3, #3
 81045a6:	4a6b      	ldr	r2, [pc, #428]	; (8104754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045a8:	fa22 f303 	lsr.w	r3, r2, r3
 81045ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	ee07 3a90 	vmov	s15, r3
 81045b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045b8:	693b      	ldr	r3, [r7, #16]
 81045ba:	ee07 3a90 	vmov	s15, r3
 81045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81045c6:	4b62      	ldr	r3, [pc, #392]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81045ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81045ce:	ee07 3a90 	vmov	s15, r3
 81045d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81045da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104760 <HAL_RCC_GetSysClockFreq+0x2e4>
 81045de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81045e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81045e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81045ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81045ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81045f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81045f6:	e087      	b.n	8104708 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81045f8:	693b      	ldr	r3, [r7, #16]
 81045fa:	ee07 3a90 	vmov	s15, r3
 81045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104602:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104764 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810460a:	4b51      	ldr	r3, [pc, #324]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104612:	ee07 3a90 	vmov	s15, r3
 8104616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810461a:	ed97 6a02 	vldr	s12, [r7, #8]
 810461e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104760 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810463a:	e065      	b.n	8104708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810463c:	693b      	ldr	r3, [r7, #16]
 810463e:	ee07 3a90 	vmov	s15, r3
 8104642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104646:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104768 <HAL_RCC_GetSysClockFreq+0x2ec>
 810464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810464e:	4b40      	ldr	r3, [pc, #256]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104656:	ee07 3a90 	vmov	s15, r3
 810465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810465e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104662:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104760 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104676:	ee67 7a27 	vmul.f32	s15, s14, s15
 810467a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810467e:	e043      	b.n	8104708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104680:	693b      	ldr	r3, [r7, #16]
 8104682:	ee07 3a90 	vmov	s15, r3
 8104686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810468a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810476c <HAL_RCC_GetSysClockFreq+0x2f0>
 810468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104692:	4b2f      	ldr	r3, [pc, #188]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810469a:	ee07 3a90 	vmov	s15, r3
 810469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81046a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104760 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81046c2:	e021      	b.n	8104708 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81046c4:	693b      	ldr	r3, [r7, #16]
 81046c6:	ee07 3a90 	vmov	s15, r3
 81046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104768 <HAL_RCC_GetSysClockFreq+0x2ec>
 81046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046d6:	4b1e      	ldr	r3, [pc, #120]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046de:	ee07 3a90 	vmov	s15, r3
 81046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81046ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104760 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104706:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104708:	4b11      	ldr	r3, [pc, #68]	; (8104750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810470c:	0a5b      	lsrs	r3, r3, #9
 810470e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104712:	3301      	adds	r3, #1
 8104714:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104716:	683b      	ldr	r3, [r7, #0]
 8104718:	ee07 3a90 	vmov	s15, r3
 810471c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104720:	edd7 6a07 	vldr	s13, [r7, #28]
 8104724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810472c:	ee17 3a90 	vmov	r3, s15
 8104730:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104732:	e005      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104734:	2300      	movs	r3, #0
 8104736:	61bb      	str	r3, [r7, #24]
      break;
 8104738:	e002      	b.n	8104740 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810473a:	4b07      	ldr	r3, [pc, #28]	; (8104758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810473c:	61bb      	str	r3, [r7, #24]
      break;
 810473e:	bf00      	nop
  }

  return sysclockfreq;
 8104740:	69bb      	ldr	r3, [r7, #24]
}
 8104742:	4618      	mov	r0, r3
 8104744:	3724      	adds	r7, #36	; 0x24
 8104746:	46bd      	mov	sp, r7
 8104748:	f85d 7b04 	ldr.w	r7, [sp], #4
 810474c:	4770      	bx	lr
 810474e:	bf00      	nop
 8104750:	58024400 	.word	0x58024400
 8104754:	03d09000 	.word	0x03d09000
 8104758:	003d0900 	.word	0x003d0900
 810475c:	017d7840 	.word	0x017d7840
 8104760:	46000000 	.word	0x46000000
 8104764:	4c742400 	.word	0x4c742400
 8104768:	4a742400 	.word	0x4a742400
 810476c:	4bbebc20 	.word	0x4bbebc20

08104770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104770:	b580      	push	{r7, lr}
 8104772:	b082      	sub	sp, #8
 8104774:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104776:	f7ff fe81 	bl	810447c <HAL_RCC_GetSysClockFreq>
 810477a:	4602      	mov	r2, r0
 810477c:	4b11      	ldr	r3, [pc, #68]	; (81047c4 <HAL_RCC_GetHCLKFreq+0x54>)
 810477e:	699b      	ldr	r3, [r3, #24]
 8104780:	0a1b      	lsrs	r3, r3, #8
 8104782:	f003 030f 	and.w	r3, r3, #15
 8104786:	4910      	ldr	r1, [pc, #64]	; (81047c8 <HAL_RCC_GetHCLKFreq+0x58>)
 8104788:	5ccb      	ldrb	r3, [r1, r3]
 810478a:	f003 031f 	and.w	r3, r3, #31
 810478e:	fa22 f303 	lsr.w	r3, r2, r3
 8104792:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104794:	4b0b      	ldr	r3, [pc, #44]	; (81047c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8104796:	699b      	ldr	r3, [r3, #24]
 8104798:	f003 030f 	and.w	r3, r3, #15
 810479c:	4a0a      	ldr	r2, [pc, #40]	; (81047c8 <HAL_RCC_GetHCLKFreq+0x58>)
 810479e:	5cd3      	ldrb	r3, [r2, r3]
 81047a0:	f003 031f 	and.w	r3, r3, #31
 81047a4:	687a      	ldr	r2, [r7, #4]
 81047a6:	fa22 f303 	lsr.w	r3, r2, r3
 81047aa:	4a08      	ldr	r2, [pc, #32]	; (81047cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81047ac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81047ae:	4b07      	ldr	r3, [pc, #28]	; (81047cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	4a07      	ldr	r2, [pc, #28]	; (81047d0 <HAL_RCC_GetHCLKFreq+0x60>)
 81047b4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81047b6:	4b05      	ldr	r3, [pc, #20]	; (81047cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81047b8:	681b      	ldr	r3, [r3, #0]
}
 81047ba:	4618      	mov	r0, r3
 81047bc:	3708      	adds	r7, #8
 81047be:	46bd      	mov	sp, r7
 81047c0:	bd80      	pop	{r7, pc}
 81047c2:	bf00      	nop
 81047c4:	58024400 	.word	0x58024400
 81047c8:	08109a18 	.word	0x08109a18
 81047cc:	10000004 	.word	0x10000004
 81047d0:	10000000 	.word	0x10000000

081047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81047d4:	b580      	push	{r7, lr}
 81047d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81047d8:	f7ff ffca 	bl	8104770 <HAL_RCC_GetHCLKFreq>
 81047dc:	4602      	mov	r2, r0
 81047de:	4b06      	ldr	r3, [pc, #24]	; (81047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81047e0:	69db      	ldr	r3, [r3, #28]
 81047e2:	091b      	lsrs	r3, r3, #4
 81047e4:	f003 0307 	and.w	r3, r3, #7
 81047e8:	4904      	ldr	r1, [pc, #16]	; (81047fc <HAL_RCC_GetPCLK1Freq+0x28>)
 81047ea:	5ccb      	ldrb	r3, [r1, r3]
 81047ec:	f003 031f 	and.w	r3, r3, #31
 81047f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81047f4:	4618      	mov	r0, r3
 81047f6:	bd80      	pop	{r7, pc}
 81047f8:	58024400 	.word	0x58024400
 81047fc:	08109a18 	.word	0x08109a18

08104800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104800:	b580      	push	{r7, lr}
 8104802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104804:	f7ff ffb4 	bl	8104770 <HAL_RCC_GetHCLKFreq>
 8104808:	4602      	mov	r2, r0
 810480a:	4b06      	ldr	r3, [pc, #24]	; (8104824 <HAL_RCC_GetPCLK2Freq+0x24>)
 810480c:	69db      	ldr	r3, [r3, #28]
 810480e:	0a1b      	lsrs	r3, r3, #8
 8104810:	f003 0307 	and.w	r3, r3, #7
 8104814:	4904      	ldr	r1, [pc, #16]	; (8104828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104816:	5ccb      	ldrb	r3, [r1, r3]
 8104818:	f003 031f 	and.w	r3, r3, #31
 810481c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104820:	4618      	mov	r0, r3
 8104822:	bd80      	pop	{r7, pc}
 8104824:	58024400 	.word	0x58024400
 8104828:	08109a18 	.word	0x08109a18

0810482c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810482c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104830:	b0ca      	sub	sp, #296	; 0x128
 8104832:	af00      	add	r7, sp, #0
 8104834:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104838:	2300      	movs	r3, #0
 810483a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810483e:	2300      	movs	r3, #0
 8104840:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104848:	e9d3 2300 	ldrd	r2, r3, [r3]
 810484c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104850:	2500      	movs	r5, #0
 8104852:	ea54 0305 	orrs.w	r3, r4, r5
 8104856:	d049      	beq.n	81048ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810485c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810485e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104862:	d02f      	beq.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104868:	d828      	bhi.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810486a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810486e:	d01a      	beq.n	81048a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104874:	d822      	bhi.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104876:	2b00      	cmp	r3, #0
 8104878:	d003      	beq.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810487a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810487e:	d007      	beq.n	8104890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104880:	e01c      	b.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104882:	4bb8      	ldr	r3, [pc, #736]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104886:	4ab7      	ldr	r2, [pc, #732]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810488c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810488e:	e01a      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104894:	3308      	adds	r3, #8
 8104896:	2102      	movs	r1, #2
 8104898:	4618      	mov	r0, r3
 810489a:	f002 fb61 	bl	8106f60 <RCCEx_PLL2_Config>
 810489e:	4603      	mov	r3, r0
 81048a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81048a4:	e00f      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048aa:	3328      	adds	r3, #40	; 0x28
 81048ac:	2102      	movs	r1, #2
 81048ae:	4618      	mov	r0, r3
 81048b0:	f002 fc08 	bl	81070c4 <RCCEx_PLL3_Config>
 81048b4:	4603      	mov	r3, r0
 81048b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81048ba:	e004      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81048bc:	2301      	movs	r3, #1
 81048be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81048c2:	e000      	b.n	81048c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81048ca:	2b00      	cmp	r3, #0
 81048cc:	d10a      	bne.n	81048e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81048ce:	4ba5      	ldr	r3, [pc, #660]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81048dc:	4aa1      	ldr	r2, [pc, #644]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81048de:	430b      	orrs	r3, r1
 81048e0:	6513      	str	r3, [r2, #80]	; 0x50
 81048e2:	e003      	b.n	81048ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81048e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81048f8:	f04f 0900 	mov.w	r9, #0
 81048fc:	ea58 0309 	orrs.w	r3, r8, r9
 8104900:	d047      	beq.n	8104992 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104908:	2b04      	cmp	r3, #4
 810490a:	d82a      	bhi.n	8104962 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810490c:	a201      	add	r2, pc, #4	; (adr r2, 8104914 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104912:	bf00      	nop
 8104914:	08104929 	.word	0x08104929
 8104918:	08104937 	.word	0x08104937
 810491c:	0810494d 	.word	0x0810494d
 8104920:	0810496b 	.word	0x0810496b
 8104924:	0810496b 	.word	0x0810496b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104928:	4b8e      	ldr	r3, [pc, #568]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810492c:	4a8d      	ldr	r2, [pc, #564]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810492e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104934:	e01a      	b.n	810496c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810493a:	3308      	adds	r3, #8
 810493c:	2100      	movs	r1, #0
 810493e:	4618      	mov	r0, r3
 8104940:	f002 fb0e 	bl	8106f60 <RCCEx_PLL2_Config>
 8104944:	4603      	mov	r3, r0
 8104946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810494a:	e00f      	b.n	810496c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104950:	3328      	adds	r3, #40	; 0x28
 8104952:	2100      	movs	r1, #0
 8104954:	4618      	mov	r0, r3
 8104956:	f002 fbb5 	bl	81070c4 <RCCEx_PLL3_Config>
 810495a:	4603      	mov	r3, r0
 810495c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104960:	e004      	b.n	810496c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104962:	2301      	movs	r3, #1
 8104964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104968:	e000      	b.n	810496c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810496a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810496c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104970:	2b00      	cmp	r3, #0
 8104972:	d10a      	bne.n	810498a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104974:	4b7b      	ldr	r3, [pc, #492]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104978:	f023 0107 	bic.w	r1, r3, #7
 810497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104982:	4a78      	ldr	r2, [pc, #480]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104984:	430b      	orrs	r3, r1
 8104986:	6513      	str	r3, [r2, #80]	; 0x50
 8104988:	e003      	b.n	8104992 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810498a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810498e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104996:	e9d3 2300 	ldrd	r2, r3, [r3]
 810499a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 810499e:	f04f 0b00 	mov.w	fp, #0
 81049a2:	ea5a 030b 	orrs.w	r3, sl, fp
 81049a6:	d04c      	beq.n	8104a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81049ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81049b2:	d030      	beq.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81049b8:	d829      	bhi.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81049ba:	2bc0      	cmp	r3, #192	; 0xc0
 81049bc:	d02d      	beq.n	8104a1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81049be:	2bc0      	cmp	r3, #192	; 0xc0
 81049c0:	d825      	bhi.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81049c2:	2b80      	cmp	r3, #128	; 0x80
 81049c4:	d018      	beq.n	81049f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81049c6:	2b80      	cmp	r3, #128	; 0x80
 81049c8:	d821      	bhi.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81049ca:	2b00      	cmp	r3, #0
 81049cc:	d002      	beq.n	81049d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81049ce:	2b40      	cmp	r3, #64	; 0x40
 81049d0:	d007      	beq.n	81049e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81049d2:	e01c      	b.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049d4:	4b63      	ldr	r3, [pc, #396]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049d8:	4a62      	ldr	r2, [pc, #392]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81049e0:	e01c      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049e6:	3308      	adds	r3, #8
 81049e8:	2100      	movs	r1, #0
 81049ea:	4618      	mov	r0, r3
 81049ec:	f002 fab8 	bl	8106f60 <RCCEx_PLL2_Config>
 81049f0:	4603      	mov	r3, r0
 81049f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81049f6:	e011      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049fc:	3328      	adds	r3, #40	; 0x28
 81049fe:	2100      	movs	r1, #0
 8104a00:	4618      	mov	r0, r3
 8104a02:	f002 fb5f 	bl	81070c4 <RCCEx_PLL3_Config>
 8104a06:	4603      	mov	r3, r0
 8104a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a0c:	e006      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a0e:	2301      	movs	r3, #1
 8104a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104a14:	e002      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104a16:	bf00      	nop
 8104a18:	e000      	b.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a20:	2b00      	cmp	r3, #0
 8104a22:	d10a      	bne.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104a24:	4b4f      	ldr	r3, [pc, #316]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8104a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a32:	4a4c      	ldr	r2, [pc, #304]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a34:	430b      	orrs	r3, r1
 8104a36:	6513      	str	r3, [r2, #80]	; 0x50
 8104a38:	e003      	b.n	8104a42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8104a4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8104a52:	2300      	movs	r3, #0
 8104a54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8104a58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8104a5c:	460b      	mov	r3, r1
 8104a5e:	4313      	orrs	r3, r2
 8104a60:	d053      	beq.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104a6e:	d035      	beq.n	8104adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104a70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104a74:	d82e      	bhi.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104a76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104a7a:	d031      	beq.n	8104ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104a80:	d828      	bhi.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104a86:	d01a      	beq.n	8104abe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104a8c:	d822      	bhi.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d003      	beq.n	8104a9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104a96:	d007      	beq.n	8104aa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104a98:	e01c      	b.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a9a:	4b32      	ldr	r3, [pc, #200]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a9e:	4a31      	ldr	r2, [pc, #196]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104aa6:	e01c      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104aac:	3308      	adds	r3, #8
 8104aae:	2100      	movs	r1, #0
 8104ab0:	4618      	mov	r0, r3
 8104ab2:	f002 fa55 	bl	8106f60 <RCCEx_PLL2_Config>
 8104ab6:	4603      	mov	r3, r0
 8104ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104abc:	e011      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ac2:	3328      	adds	r3, #40	; 0x28
 8104ac4:	2100      	movs	r1, #0
 8104ac6:	4618      	mov	r0, r3
 8104ac8:	f002 fafc 	bl	81070c4 <RCCEx_PLL3_Config>
 8104acc:	4603      	mov	r3, r0
 8104ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104ad2:	e006      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104ad4:	2301      	movs	r3, #1
 8104ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ada:	e002      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104adc:	bf00      	nop
 8104ade:	e000      	b.n	8104ae2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d10b      	bne.n	8104b02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104aea:	4b1e      	ldr	r3, [pc, #120]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104aee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8104af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104afa:	4a1a      	ldr	r2, [pc, #104]	; (8104b64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104afc:	430b      	orrs	r3, r1
 8104afe:	6593      	str	r3, [r2, #88]	; 0x58
 8104b00:	e003      	b.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8104b16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8104b1a:	2300      	movs	r3, #0
 8104b1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8104b20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8104b24:	460b      	mov	r3, r1
 8104b26:	4313      	orrs	r3, r2
 8104b28:	d056      	beq.n	8104bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b36:	d038      	beq.n	8104baa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b3c:	d831      	bhi.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104b3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b42:	d034      	beq.n	8104bae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104b44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b48:	d82b      	bhi.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b4e:	d01d      	beq.n	8104b8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104b50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b54:	d825      	bhi.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104b56:	2b00      	cmp	r3, #0
 8104b58:	d006      	beq.n	8104b68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104b5e:	d00a      	beq.n	8104b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104b60:	e01f      	b.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104b62:	bf00      	nop
 8104b64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b68:	4ba2      	ldr	r3, [pc, #648]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b6c:	4aa1      	ldr	r2, [pc, #644]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b74:	e01c      	b.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b7a:	3308      	adds	r3, #8
 8104b7c:	2100      	movs	r1, #0
 8104b7e:	4618      	mov	r0, r3
 8104b80:	f002 f9ee 	bl	8106f60 <RCCEx_PLL2_Config>
 8104b84:	4603      	mov	r3, r0
 8104b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104b8a:	e011      	b.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b90:	3328      	adds	r3, #40	; 0x28
 8104b92:	2100      	movs	r1, #0
 8104b94:	4618      	mov	r0, r3
 8104b96:	f002 fa95 	bl	81070c4 <RCCEx_PLL3_Config>
 8104b9a:	4603      	mov	r3, r0
 8104b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104ba0:	e006      	b.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104ba2:	2301      	movs	r3, #1
 8104ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ba8:	e002      	b.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104baa:	bf00      	nop
 8104bac:	e000      	b.n	8104bb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104bb4:	2b00      	cmp	r3, #0
 8104bb6:	d10b      	bne.n	8104bd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104bb8:	4b8e      	ldr	r3, [pc, #568]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104bbc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8104bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104bc8:	4a8a      	ldr	r2, [pc, #552]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104bca:	430b      	orrs	r3, r1
 8104bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8104bce:	e003      	b.n	8104bd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104be0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8104be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8104be8:	2300      	movs	r3, #0
 8104bea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8104bee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8104bf2:	460b      	mov	r3, r1
 8104bf4:	4313      	orrs	r3, r2
 8104bf6:	d03a      	beq.n	8104c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104bfe:	2b30      	cmp	r3, #48	; 0x30
 8104c00:	d01f      	beq.n	8104c42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104c02:	2b30      	cmp	r3, #48	; 0x30
 8104c04:	d819      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c06:	2b20      	cmp	r3, #32
 8104c08:	d00c      	beq.n	8104c24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104c0a:	2b20      	cmp	r3, #32
 8104c0c:	d815      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c0e:	2b00      	cmp	r3, #0
 8104c10:	d019      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104c12:	2b10      	cmp	r3, #16
 8104c14:	d111      	bne.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c16:	4b77      	ldr	r3, [pc, #476]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c1a:	4a76      	ldr	r2, [pc, #472]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104c22:	e011      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c28:	3308      	adds	r3, #8
 8104c2a:	2102      	movs	r1, #2
 8104c2c:	4618      	mov	r0, r3
 8104c2e:	f002 f997 	bl	8106f60 <RCCEx_PLL2_Config>
 8104c32:	4603      	mov	r3, r0
 8104c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104c38:	e006      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104c3a:	2301      	movs	r3, #1
 8104c3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104c40:	e002      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104c42:	bf00      	nop
 8104c44:	e000      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d10a      	bne.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104c50:	4b68      	ldr	r3, [pc, #416]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8104c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c5e:	4a65      	ldr	r2, [pc, #404]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c60:	430b      	orrs	r3, r1
 8104c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104c64:	e003      	b.n	8104c6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8104c7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8104c7e:	2300      	movs	r3, #0
 8104c80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8104c84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8104c88:	460b      	mov	r3, r1
 8104c8a:	4313      	orrs	r3, r2
 8104c8c:	d051      	beq.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c98:	d035      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c9e:	d82e      	bhi.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104ca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104ca4:	d031      	beq.n	8104d0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104ca6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104caa:	d828      	bhi.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104cb0:	d01a      	beq.n	8104ce8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104cb6:	d822      	bhi.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104cb8:	2b00      	cmp	r3, #0
 8104cba:	d003      	beq.n	8104cc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104cc0:	d007      	beq.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104cc2:	e01c      	b.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cc4:	4b4b      	ldr	r3, [pc, #300]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cc8:	4a4a      	ldr	r2, [pc, #296]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104cd0:	e01c      	b.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cd6:	3308      	adds	r3, #8
 8104cd8:	2100      	movs	r1, #0
 8104cda:	4618      	mov	r0, r3
 8104cdc:	f002 f940 	bl	8106f60 <RCCEx_PLL2_Config>
 8104ce0:	4603      	mov	r3, r0
 8104ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104ce6:	e011      	b.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cec:	3328      	adds	r3, #40	; 0x28
 8104cee:	2100      	movs	r1, #0
 8104cf0:	4618      	mov	r0, r3
 8104cf2:	f002 f9e7 	bl	81070c4 <RCCEx_PLL3_Config>
 8104cf6:	4603      	mov	r3, r0
 8104cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104cfc:	e006      	b.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104cfe:	2301      	movs	r3, #1
 8104d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d04:	e002      	b.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d06:	bf00      	nop
 8104d08:	e000      	b.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d10:	2b00      	cmp	r3, #0
 8104d12:	d10a      	bne.n	8104d2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104d14:	4b37      	ldr	r3, [pc, #220]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8104d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104d22:	4a34      	ldr	r2, [pc, #208]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d24:	430b      	orrs	r3, r1
 8104d26:	6513      	str	r3, [r2, #80]	; 0x50
 8104d28:	e003      	b.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8104d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8104d42:	2300      	movs	r3, #0
 8104d44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8104d48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8104d4c:	460b      	mov	r3, r1
 8104d4e:	4313      	orrs	r3, r2
 8104d50:	d056      	beq.n	8104e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d5c:	d033      	beq.n	8104dc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104d5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d62:	d82c      	bhi.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d68:	d02f      	beq.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d6e:	d826      	bhi.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104d70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d74:	d02b      	beq.n	8104dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104d76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d7a:	d820      	bhi.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d80:	d012      	beq.n	8104da8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d86:	d81a      	bhi.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104d88:	2b00      	cmp	r3, #0
 8104d8a:	d022      	beq.n	8104dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d90:	d115      	bne.n	8104dbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d96:	3308      	adds	r3, #8
 8104d98:	2101      	movs	r1, #1
 8104d9a:	4618      	mov	r0, r3
 8104d9c:	f002 f8e0 	bl	8106f60 <RCCEx_PLL2_Config>
 8104da0:	4603      	mov	r3, r0
 8104da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104da6:	e015      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dac:	3328      	adds	r3, #40	; 0x28
 8104dae:	2101      	movs	r1, #1
 8104db0:	4618      	mov	r0, r3
 8104db2:	f002 f987 	bl	81070c4 <RCCEx_PLL3_Config>
 8104db6:	4603      	mov	r3, r0
 8104db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104dbc:	e00a      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104dbe:	2301      	movs	r3, #1
 8104dc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104dc4:	e006      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104dc6:	bf00      	nop
 8104dc8:	e004      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104dca:	bf00      	nop
 8104dcc:	e002      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104dce:	bf00      	nop
 8104dd0:	e000      	b.n	8104dd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dd8:	2b00      	cmp	r3, #0
 8104dda:	d10d      	bne.n	8104df8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104ddc:	4b05      	ldr	r3, [pc, #20]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104de0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8104de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104dea:	4a02      	ldr	r2, [pc, #8]	; (8104df4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dec:	430b      	orrs	r3, r1
 8104dee:	6513      	str	r3, [r2, #80]	; 0x50
 8104df0:	e006      	b.n	8104e00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104df2:	bf00      	nop
 8104df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8104e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8104e10:	2300      	movs	r3, #0
 8104e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8104e16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8104e1a:	460b      	mov	r3, r1
 8104e1c:	4313      	orrs	r3, r2
 8104e1e:	d055      	beq.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104e2c:	d033      	beq.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104e32:	d82c      	bhi.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104e38:	d02f      	beq.n	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104e3e:	d826      	bhi.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104e44:	d02b      	beq.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104e46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104e4a:	d820      	bhi.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e50:	d012      	beq.n	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e56:	d81a      	bhi.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e58:	2b00      	cmp	r3, #0
 8104e5a:	d022      	beq.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104e60:	d115      	bne.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e66:	3308      	adds	r3, #8
 8104e68:	2101      	movs	r1, #1
 8104e6a:	4618      	mov	r0, r3
 8104e6c:	f002 f878 	bl	8106f60 <RCCEx_PLL2_Config>
 8104e70:	4603      	mov	r3, r0
 8104e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104e76:	e015      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e7c:	3328      	adds	r3, #40	; 0x28
 8104e7e:	2101      	movs	r1, #1
 8104e80:	4618      	mov	r0, r3
 8104e82:	f002 f91f 	bl	81070c4 <RCCEx_PLL3_Config>
 8104e86:	4603      	mov	r3, r0
 8104e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104e8c:	e00a      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104e8e:	2301      	movs	r3, #1
 8104e90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104e94:	e006      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104e96:	bf00      	nop
 8104e98:	e004      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104e9a:	bf00      	nop
 8104e9c:	e002      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104e9e:	bf00      	nop
 8104ea0:	e000      	b.n	8104ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d10b      	bne.n	8104ec4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104eac:	4ba4      	ldr	r3, [pc, #656]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104eb0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104eb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104ebc:	4aa0      	ldr	r2, [pc, #640]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ebe:	430b      	orrs	r3, r1
 8104ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8104ec2:	e003      	b.n	8104ecc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ec8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ed4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8104ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8104edc:	2300      	movs	r3, #0
 8104ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8104ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8104ee6:	460b      	mov	r3, r1
 8104ee8:	4313      	orrs	r3, r2
 8104eea:	d037      	beq.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ef6:	d00e      	beq.n	8104f16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104efc:	d816      	bhi.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104efe:	2b00      	cmp	r3, #0
 8104f00:	d018      	beq.n	8104f34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f06:	d111      	bne.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f08:	4b8d      	ldr	r3, [pc, #564]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f0c:	4a8c      	ldr	r2, [pc, #560]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104f14:	e00f      	b.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f1a:	3308      	adds	r3, #8
 8104f1c:	2101      	movs	r1, #1
 8104f1e:	4618      	mov	r0, r3
 8104f20:	f002 f81e 	bl	8106f60 <RCCEx_PLL2_Config>
 8104f24:	4603      	mov	r3, r0
 8104f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104f2a:	e004      	b.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f2c:	2301      	movs	r3, #1
 8104f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f32:	e000      	b.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f3a:	2b00      	cmp	r3, #0
 8104f3c:	d10a      	bne.n	8104f54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104f3e:	4b80      	ldr	r3, [pc, #512]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104f4c:	4a7c      	ldr	r2, [pc, #496]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f4e:	430b      	orrs	r3, r1
 8104f50:	6513      	str	r3, [r2, #80]	; 0x50
 8104f52:	e003      	b.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8104f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104f6c:	2300      	movs	r3, #0
 8104f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8104f72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8104f76:	460b      	mov	r3, r1
 8104f78:	4313      	orrs	r3, r2
 8104f7a:	d039      	beq.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104f82:	2b03      	cmp	r3, #3
 8104f84:	d81c      	bhi.n	8104fc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8104f86:	a201      	add	r2, pc, #4	; (adr r2, 8104f8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f8c:	08104fc9 	.word	0x08104fc9
 8104f90:	08104f9d 	.word	0x08104f9d
 8104f94:	08104fab 	.word	0x08104fab
 8104f98:	08104fc9 	.word	0x08104fc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f9c:	4b68      	ldr	r3, [pc, #416]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fa0:	4a67      	ldr	r2, [pc, #412]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104fa8:	e00f      	b.n	8104fca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fae:	3308      	adds	r3, #8
 8104fb0:	2102      	movs	r1, #2
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	f001 ffd4 	bl	8106f60 <RCCEx_PLL2_Config>
 8104fb8:	4603      	mov	r3, r0
 8104fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104fbe:	e004      	b.n	8104fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104fc0:	2301      	movs	r3, #1
 8104fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104fc6:	e000      	b.n	8104fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8104fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fce:	2b00      	cmp	r3, #0
 8104fd0:	d10a      	bne.n	8104fe8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104fd2:	4b5b      	ldr	r3, [pc, #364]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104fd6:	f023 0103 	bic.w	r1, r3, #3
 8104fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104fe0:	4a57      	ldr	r2, [pc, #348]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fe2:	430b      	orrs	r3, r1
 8104fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104fe6:	e003      	b.n	8104ff0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ff8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8104ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8105000:	2300      	movs	r3, #0
 8105002:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8105006:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810500a:	460b      	mov	r3, r1
 810500c:	4313      	orrs	r3, r2
 810500e:	f000 809f 	beq.w	8105150 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105012:	4b4c      	ldr	r3, [pc, #304]	; (8105144 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	4a4b      	ldr	r2, [pc, #300]	; (8105144 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810501c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810501e:	f7fc fdcd 	bl	8101bbc <HAL_GetTick>
 8105022:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105026:	e00b      	b.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105028:	f7fc fdc8 	bl	8101bbc <HAL_GetTick>
 810502c:	4602      	mov	r2, r0
 810502e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105032:	1ad3      	subs	r3, r2, r3
 8105034:	2b64      	cmp	r3, #100	; 0x64
 8105036:	d903      	bls.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105038:	2303      	movs	r3, #3
 810503a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810503e:	e005      	b.n	810504c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105040:	4b40      	ldr	r3, [pc, #256]	; (8105144 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105048:	2b00      	cmp	r3, #0
 810504a:	d0ed      	beq.n	8105028 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810504c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105050:	2b00      	cmp	r3, #0
 8105052:	d179      	bne.n	8105148 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105054:	4b3a      	ldr	r3, [pc, #232]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810505c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105060:	4053      	eors	r3, r2
 8105062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105066:	2b00      	cmp	r3, #0
 8105068:	d015      	beq.n	8105096 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810506a:	4b35      	ldr	r3, [pc, #212]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810506c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810506e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105072:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105076:	4b32      	ldr	r3, [pc, #200]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810507a:	4a31      	ldr	r2, [pc, #196]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105080:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105082:	4b2f      	ldr	r3, [pc, #188]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105086:	4a2e      	ldr	r2, [pc, #184]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810508c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810508e:	4a2c      	ldr	r2, [pc, #176]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8105094:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810509a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810509e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050a2:	d118      	bne.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81050a4:	f7fc fd8a 	bl	8101bbc <HAL_GetTick>
 81050a8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81050ac:	e00d      	b.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81050ae:	f7fc fd85 	bl	8101bbc <HAL_GetTick>
 81050b2:	4602      	mov	r2, r0
 81050b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81050b8:	1ad2      	subs	r2, r2, r3
 81050ba:	f241 3388 	movw	r3, #5000	; 0x1388
 81050be:	429a      	cmp	r2, r3
 81050c0:	d903      	bls.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81050c2:	2303      	movs	r3, #3
 81050c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81050c8:	e005      	b.n	81050d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81050ca:	4b1d      	ldr	r3, [pc, #116]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81050ce:	f003 0302 	and.w	r3, r3, #2
 81050d2:	2b00      	cmp	r3, #0
 81050d4:	d0eb      	beq.n	81050ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81050d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81050da:	2b00      	cmp	r3, #0
 81050dc:	d12b      	bne.n	8105136 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81050de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81050ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81050ee:	d110      	bne.n	8105112 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81050f0:	4b13      	ldr	r3, [pc, #76]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050f2:	691b      	ldr	r3, [r3, #16]
 81050f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105100:	091b      	lsrs	r3, r3, #4
 8105102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105106:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810510a:	4a0d      	ldr	r2, [pc, #52]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810510c:	430b      	orrs	r3, r1
 810510e:	6113      	str	r3, [r2, #16]
 8105110:	e005      	b.n	810511e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8105112:	4b0b      	ldr	r3, [pc, #44]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105114:	691b      	ldr	r3, [r3, #16]
 8105116:	4a0a      	ldr	r2, [pc, #40]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810511c:	6113      	str	r3, [r2, #16]
 810511e:	4b08      	ldr	r3, [pc, #32]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105120:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8105122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810512e:	4a04      	ldr	r2, [pc, #16]	; (8105140 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105130:	430b      	orrs	r3, r1
 8105132:	6713      	str	r3, [r2, #112]	; 0x70
 8105134:	e00c      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810513a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810513e:	e007      	b.n	8105150 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105140:	58024400 	.word	0x58024400
 8105144:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810514c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105158:	f002 0301 	and.w	r3, r2, #1
 810515c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8105160:	2300      	movs	r3, #0
 8105162:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8105166:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 810516a:	460b      	mov	r3, r1
 810516c:	4313      	orrs	r3, r2
 810516e:	f000 8089 	beq.w	8105284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8105172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105178:	2b28      	cmp	r3, #40	; 0x28
 810517a:	d86b      	bhi.n	8105254 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810517c:	a201      	add	r2, pc, #4	; (adr r2, 8105184 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105182:	bf00      	nop
 8105184:	0810525d 	.word	0x0810525d
 8105188:	08105255 	.word	0x08105255
 810518c:	08105255 	.word	0x08105255
 8105190:	08105255 	.word	0x08105255
 8105194:	08105255 	.word	0x08105255
 8105198:	08105255 	.word	0x08105255
 810519c:	08105255 	.word	0x08105255
 81051a0:	08105255 	.word	0x08105255
 81051a4:	08105229 	.word	0x08105229
 81051a8:	08105255 	.word	0x08105255
 81051ac:	08105255 	.word	0x08105255
 81051b0:	08105255 	.word	0x08105255
 81051b4:	08105255 	.word	0x08105255
 81051b8:	08105255 	.word	0x08105255
 81051bc:	08105255 	.word	0x08105255
 81051c0:	08105255 	.word	0x08105255
 81051c4:	0810523f 	.word	0x0810523f
 81051c8:	08105255 	.word	0x08105255
 81051cc:	08105255 	.word	0x08105255
 81051d0:	08105255 	.word	0x08105255
 81051d4:	08105255 	.word	0x08105255
 81051d8:	08105255 	.word	0x08105255
 81051dc:	08105255 	.word	0x08105255
 81051e0:	08105255 	.word	0x08105255
 81051e4:	0810525d 	.word	0x0810525d
 81051e8:	08105255 	.word	0x08105255
 81051ec:	08105255 	.word	0x08105255
 81051f0:	08105255 	.word	0x08105255
 81051f4:	08105255 	.word	0x08105255
 81051f8:	08105255 	.word	0x08105255
 81051fc:	08105255 	.word	0x08105255
 8105200:	08105255 	.word	0x08105255
 8105204:	0810525d 	.word	0x0810525d
 8105208:	08105255 	.word	0x08105255
 810520c:	08105255 	.word	0x08105255
 8105210:	08105255 	.word	0x08105255
 8105214:	08105255 	.word	0x08105255
 8105218:	08105255 	.word	0x08105255
 810521c:	08105255 	.word	0x08105255
 8105220:	08105255 	.word	0x08105255
 8105224:	0810525d 	.word	0x0810525d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810522c:	3308      	adds	r3, #8
 810522e:	2101      	movs	r1, #1
 8105230:	4618      	mov	r0, r3
 8105232:	f001 fe95 	bl	8106f60 <RCCEx_PLL2_Config>
 8105236:	4603      	mov	r3, r0
 8105238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810523c:	e00f      	b.n	810525e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105242:	3328      	adds	r3, #40	; 0x28
 8105244:	2101      	movs	r1, #1
 8105246:	4618      	mov	r0, r3
 8105248:	f001 ff3c 	bl	81070c4 <RCCEx_PLL3_Config>
 810524c:	4603      	mov	r3, r0
 810524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105252:	e004      	b.n	810525e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105254:	2301      	movs	r3, #1
 8105256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810525a:	e000      	b.n	810525e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810525c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810525e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105262:	2b00      	cmp	r3, #0
 8105264:	d10a      	bne.n	810527c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105266:	4bbf      	ldr	r3, [pc, #764]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810526a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810526e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105274:	4abb      	ldr	r2, [pc, #748]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105276:	430b      	orrs	r3, r1
 8105278:	6553      	str	r3, [r2, #84]	; 0x54
 810527a:	e003      	b.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810527c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105280:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105288:	e9d3 2300 	ldrd	r2, r3, [r3]
 810528c:	f002 0302 	and.w	r3, r2, #2
 8105290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8105294:	2300      	movs	r3, #0
 8105296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810529a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810529e:	460b      	mov	r3, r1
 81052a0:	4313      	orrs	r3, r2
 81052a2:	d041      	beq.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81052aa:	2b05      	cmp	r3, #5
 81052ac:	d824      	bhi.n	81052f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81052ae:	a201      	add	r2, pc, #4	; (adr r2, 81052b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052b4:	08105301 	.word	0x08105301
 81052b8:	081052cd 	.word	0x081052cd
 81052bc:	081052e3 	.word	0x081052e3
 81052c0:	08105301 	.word	0x08105301
 81052c4:	08105301 	.word	0x08105301
 81052c8:	08105301 	.word	0x08105301
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052d0:	3308      	adds	r3, #8
 81052d2:	2101      	movs	r1, #1
 81052d4:	4618      	mov	r0, r3
 81052d6:	f001 fe43 	bl	8106f60 <RCCEx_PLL2_Config>
 81052da:	4603      	mov	r3, r0
 81052dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81052e0:	e00f      	b.n	8105302 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052e6:	3328      	adds	r3, #40	; 0x28
 81052e8:	2101      	movs	r1, #1
 81052ea:	4618      	mov	r0, r3
 81052ec:	f001 feea 	bl	81070c4 <RCCEx_PLL3_Config>
 81052f0:	4603      	mov	r3, r0
 81052f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81052f6:	e004      	b.n	8105302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052f8:	2301      	movs	r3, #1
 81052fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81052fe:	e000      	b.n	8105302 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105306:	2b00      	cmp	r3, #0
 8105308:	d10a      	bne.n	8105320 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810530a:	4b96      	ldr	r3, [pc, #600]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810530e:	f023 0107 	bic.w	r1, r3, #7
 8105312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105318:	4a92      	ldr	r2, [pc, #584]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810531a:	430b      	orrs	r3, r1
 810531c:	6553      	str	r3, [r2, #84]	; 0x54
 810531e:	e003      	b.n	8105328 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105320:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105324:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105330:	f002 0304 	and.w	r3, r2, #4
 8105334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8105338:	2300      	movs	r3, #0
 810533a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810533e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8105342:	460b      	mov	r3, r1
 8105344:	4313      	orrs	r3, r2
 8105346:	d044      	beq.n	81053d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810534c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105350:	2b05      	cmp	r3, #5
 8105352:	d825      	bhi.n	81053a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105354:	a201      	add	r2, pc, #4	; (adr r2, 810535c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810535a:	bf00      	nop
 810535c:	081053a9 	.word	0x081053a9
 8105360:	08105375 	.word	0x08105375
 8105364:	0810538b 	.word	0x0810538b
 8105368:	081053a9 	.word	0x081053a9
 810536c:	081053a9 	.word	0x081053a9
 8105370:	081053a9 	.word	0x081053a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105378:	3308      	adds	r3, #8
 810537a:	2101      	movs	r1, #1
 810537c:	4618      	mov	r0, r3
 810537e:	f001 fdef 	bl	8106f60 <RCCEx_PLL2_Config>
 8105382:	4603      	mov	r3, r0
 8105384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105388:	e00f      	b.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810538e:	3328      	adds	r3, #40	; 0x28
 8105390:	2101      	movs	r1, #1
 8105392:	4618      	mov	r0, r3
 8105394:	f001 fe96 	bl	81070c4 <RCCEx_PLL3_Config>
 8105398:	4603      	mov	r3, r0
 810539a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810539e:	e004      	b.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053a0:	2301      	movs	r3, #1
 81053a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81053a6:	e000      	b.n	81053aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81053a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053ae:	2b00      	cmp	r3, #0
 81053b0:	d10b      	bne.n	81053ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81053b2:	4b6c      	ldr	r3, [pc, #432]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81053b6:	f023 0107 	bic.w	r1, r3, #7
 81053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81053c2:	4a68      	ldr	r2, [pc, #416]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053c4:	430b      	orrs	r3, r1
 81053c6:	6593      	str	r3, [r2, #88]	; 0x58
 81053c8:	e003      	b.n	81053d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053da:	f002 0320 	and.w	r3, r2, #32
 81053de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81053e2:	2300      	movs	r3, #0
 81053e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81053e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81053ec:	460b      	mov	r3, r1
 81053ee:	4313      	orrs	r3, r2
 81053f0:	d055      	beq.n	810549e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81053fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81053fe:	d033      	beq.n	8105468 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105404:	d82c      	bhi.n	8105460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810540a:	d02f      	beq.n	810546c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105410:	d826      	bhi.n	8105460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105412:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105416:	d02b      	beq.n	8105470 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105418:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810541c:	d820      	bhi.n	8105460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105422:	d012      	beq.n	810544a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105428:	d81a      	bhi.n	8105460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810542a:	2b00      	cmp	r3, #0
 810542c:	d022      	beq.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810542e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105432:	d115      	bne.n	8105460 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105438:	3308      	adds	r3, #8
 810543a:	2100      	movs	r1, #0
 810543c:	4618      	mov	r0, r3
 810543e:	f001 fd8f 	bl	8106f60 <RCCEx_PLL2_Config>
 8105442:	4603      	mov	r3, r0
 8105444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105448:	e015      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810544e:	3328      	adds	r3, #40	; 0x28
 8105450:	2102      	movs	r1, #2
 8105452:	4618      	mov	r0, r3
 8105454:	f001 fe36 	bl	81070c4 <RCCEx_PLL3_Config>
 8105458:	4603      	mov	r3, r0
 810545a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810545e:	e00a      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105460:	2301      	movs	r3, #1
 8105462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105466:	e006      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105468:	bf00      	nop
 810546a:	e004      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810546c:	bf00      	nop
 810546e:	e002      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105470:	bf00      	nop
 8105472:	e000      	b.n	8105476 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810547a:	2b00      	cmp	r3, #0
 810547c:	d10b      	bne.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810547e:	4b39      	ldr	r3, [pc, #228]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105482:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8105486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810548a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810548e:	4a35      	ldr	r2, [pc, #212]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105490:	430b      	orrs	r3, r1
 8105492:	6553      	str	r3, [r2, #84]	; 0x54
 8105494:	e003      	b.n	810549e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810549a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81054aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81054ae:	2300      	movs	r3, #0
 81054b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81054b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81054b8:	460b      	mov	r3, r1
 81054ba:	4313      	orrs	r3, r2
 81054bc:	d058      	beq.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81054be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81054c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81054ca:	d033      	beq.n	8105534 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81054cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81054d0:	d82c      	bhi.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81054d6:	d02f      	beq.n	8105538 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81054dc:	d826      	bhi.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81054de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81054e2:	d02b      	beq.n	810553c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81054e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81054e8:	d820      	bhi.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81054ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81054ee:	d012      	beq.n	8105516 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81054f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81054f4:	d81a      	bhi.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81054f6:	2b00      	cmp	r3, #0
 81054f8:	d022      	beq.n	8105540 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81054fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81054fe:	d115      	bne.n	810552c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105504:	3308      	adds	r3, #8
 8105506:	2100      	movs	r1, #0
 8105508:	4618      	mov	r0, r3
 810550a:	f001 fd29 	bl	8106f60 <RCCEx_PLL2_Config>
 810550e:	4603      	mov	r3, r0
 8105510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105514:	e015      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810551a:	3328      	adds	r3, #40	; 0x28
 810551c:	2102      	movs	r1, #2
 810551e:	4618      	mov	r0, r3
 8105520:	f001 fdd0 	bl	81070c4 <RCCEx_PLL3_Config>
 8105524:	4603      	mov	r3, r0
 8105526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810552a:	e00a      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810552c:	2301      	movs	r3, #1
 810552e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105532:	e006      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105534:	bf00      	nop
 8105536:	e004      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105538:	bf00      	nop
 810553a:	e002      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810553c:	bf00      	nop
 810553e:	e000      	b.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105546:	2b00      	cmp	r3, #0
 8105548:	d10e      	bne.n	8105568 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810554a:	4b06      	ldr	r3, [pc, #24]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810554c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810554e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8105552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810555a:	4a02      	ldr	r2, [pc, #8]	; (8105564 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810555c:	430b      	orrs	r3, r1
 810555e:	6593      	str	r3, [r2, #88]	; 0x58
 8105560:	e006      	b.n	8105570 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105562:	bf00      	nop
 8105564:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105568:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810556c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105578:	f002 0380 	and.w	r3, r2, #128	; 0x80
 810557c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105580:	2300      	movs	r3, #0
 8105582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8105586:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810558a:	460b      	mov	r3, r1
 810558c:	4313      	orrs	r3, r2
 810558e:	d055      	beq.n	810563c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105594:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105598:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810559c:	d033      	beq.n	8105606 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810559e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81055a2:	d82c      	bhi.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81055a8:	d02f      	beq.n	810560a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81055aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81055ae:	d826      	bhi.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81055b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81055b4:	d02b      	beq.n	810560e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81055b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81055ba:	d820      	bhi.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81055bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81055c0:	d012      	beq.n	81055e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81055c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81055c6:	d81a      	bhi.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d022      	beq.n	8105612 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81055cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81055d0:	d115      	bne.n	81055fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055d6:	3308      	adds	r3, #8
 81055d8:	2100      	movs	r1, #0
 81055da:	4618      	mov	r0, r3
 81055dc:	f001 fcc0 	bl	8106f60 <RCCEx_PLL2_Config>
 81055e0:	4603      	mov	r3, r0
 81055e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81055e6:	e015      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055ec:	3328      	adds	r3, #40	; 0x28
 81055ee:	2102      	movs	r1, #2
 81055f0:	4618      	mov	r0, r3
 81055f2:	f001 fd67 	bl	81070c4 <RCCEx_PLL3_Config>
 81055f6:	4603      	mov	r3, r0
 81055f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81055fc:	e00a      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055fe:	2301      	movs	r3, #1
 8105600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105604:	e006      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105606:	bf00      	nop
 8105608:	e004      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810560a:	bf00      	nop
 810560c:	e002      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810560e:	bf00      	nop
 8105610:	e000      	b.n	8105614 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105618:	2b00      	cmp	r3, #0
 810561a:	d10b      	bne.n	8105634 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810561c:	4ba1      	ldr	r3, [pc, #644]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105620:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8105624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810562c:	4a9d      	ldr	r2, [pc, #628]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810562e:	430b      	orrs	r3, r1
 8105630:	6593      	str	r3, [r2, #88]	; 0x58
 8105632:	e003      	b.n	810563c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105638:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105644:	f002 0308 	and.w	r3, r2, #8
 8105648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810564c:	2300      	movs	r3, #0
 810564e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105652:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8105656:	460b      	mov	r3, r1
 8105658:	4313      	orrs	r3, r2
 810565a:	d01e      	beq.n	810569a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105660:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105668:	d10c      	bne.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810566e:	3328      	adds	r3, #40	; 0x28
 8105670:	2102      	movs	r1, #2
 8105672:	4618      	mov	r0, r3
 8105674:	f001 fd26 	bl	81070c4 <RCCEx_PLL3_Config>
 8105678:	4603      	mov	r3, r0
 810567a:	2b00      	cmp	r3, #0
 810567c:	d002      	beq.n	8105684 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810567e:	2301      	movs	r3, #1
 8105680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105684:	4b87      	ldr	r3, [pc, #540]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105688:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105694:	4a83      	ldr	r2, [pc, #524]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105696:	430b      	orrs	r3, r1
 8105698:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056a2:	f002 0310 	and.w	r3, r2, #16
 81056a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81056aa:	2300      	movs	r3, #0
 81056ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81056b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81056b4:	460b      	mov	r3, r1
 81056b6:	4313      	orrs	r3, r2
 81056b8:	d01e      	beq.n	81056f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81056ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81056c6:	d10c      	bne.n	81056e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056cc:	3328      	adds	r3, #40	; 0x28
 81056ce:	2102      	movs	r1, #2
 81056d0:	4618      	mov	r0, r3
 81056d2:	f001 fcf7 	bl	81070c4 <RCCEx_PLL3_Config>
 81056d6:	4603      	mov	r3, r0
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d002      	beq.n	81056e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81056dc:	2301      	movs	r3, #1
 81056de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81056e2:	4b70      	ldr	r3, [pc, #448]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81056e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81056f2:	4a6c      	ldr	r2, [pc, #432]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056f4:	430b      	orrs	r3, r1
 81056f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105700:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8105704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105708:	2300      	movs	r3, #0
 810570a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810570e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8105712:	460b      	mov	r3, r1
 8105714:	4313      	orrs	r3, r2
 8105716:	d03e      	beq.n	8105796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810571c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105724:	d022      	beq.n	810576c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810572a:	d81b      	bhi.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810572c:	2b00      	cmp	r3, #0
 810572e:	d003      	beq.n	8105738 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105734:	d00b      	beq.n	810574e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105736:	e015      	b.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810573c:	3308      	adds	r3, #8
 810573e:	2100      	movs	r1, #0
 8105740:	4618      	mov	r0, r3
 8105742:	f001 fc0d 	bl	8106f60 <RCCEx_PLL2_Config>
 8105746:	4603      	mov	r3, r0
 8105748:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810574c:	e00f      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105752:	3328      	adds	r3, #40	; 0x28
 8105754:	2102      	movs	r1, #2
 8105756:	4618      	mov	r0, r3
 8105758:	f001 fcb4 	bl	81070c4 <RCCEx_PLL3_Config>
 810575c:	4603      	mov	r3, r0
 810575e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105762:	e004      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105764:	2301      	movs	r3, #1
 8105766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810576a:	e000      	b.n	810576e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810576c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810576e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105772:	2b00      	cmp	r3, #0
 8105774:	d10b      	bne.n	810578e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105776:	4b4b      	ldr	r3, [pc, #300]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810577a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 810577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105782:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105786:	4a47      	ldr	r2, [pc, #284]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105788:	430b      	orrs	r3, r1
 810578a:	6593      	str	r3, [r2, #88]	; 0x58
 810578c:	e003      	b.n	8105796 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810578e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810579e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81057a2:	67bb      	str	r3, [r7, #120]	; 0x78
 81057a4:	2300      	movs	r3, #0
 81057a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 81057a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81057ac:	460b      	mov	r3, r1
 81057ae:	4313      	orrs	r3, r2
 81057b0:	d03b      	beq.n	810582a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81057b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81057ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81057be:	d01f      	beq.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81057c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81057c4:	d818      	bhi.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81057c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81057ca:	d003      	beq.n	81057d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81057cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81057d0:	d007      	beq.n	81057e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81057d2:	e011      	b.n	81057f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057d4:	4b33      	ldr	r3, [pc, #204]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057d8:	4a32      	ldr	r2, [pc, #200]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81057da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81057e0:	e00f      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057e6:	3328      	adds	r3, #40	; 0x28
 81057e8:	2101      	movs	r1, #1
 81057ea:	4618      	mov	r0, r3
 81057ec:	f001 fc6a 	bl	81070c4 <RCCEx_PLL3_Config>
 81057f0:	4603      	mov	r3, r0
 81057f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81057f6:	e004      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057f8:	2301      	movs	r3, #1
 81057fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81057fe:	e000      	b.n	8105802 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105806:	2b00      	cmp	r3, #0
 8105808:	d10b      	bne.n	8105822 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810580a:	4b26      	ldr	r3, [pc, #152]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810580e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810581a:	4a22      	ldr	r2, [pc, #136]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810581c:	430b      	orrs	r3, r1
 810581e:	6553      	str	r3, [r2, #84]	; 0x54
 8105820:	e003      	b.n	810582a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105832:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8105836:	673b      	str	r3, [r7, #112]	; 0x70
 8105838:	2300      	movs	r3, #0
 810583a:	677b      	str	r3, [r7, #116]	; 0x74
 810583c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105840:	460b      	mov	r3, r1
 8105842:	4313      	orrs	r3, r2
 8105844:	d034      	beq.n	81058b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810584c:	2b00      	cmp	r3, #0
 810584e:	d003      	beq.n	8105858 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105854:	d007      	beq.n	8105866 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8105856:	e011      	b.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105858:	4b12      	ldr	r3, [pc, #72]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810585c:	4a11      	ldr	r2, [pc, #68]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810585e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105864:	e00e      	b.n	8105884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810586a:	3308      	adds	r3, #8
 810586c:	2102      	movs	r1, #2
 810586e:	4618      	mov	r0, r3
 8105870:	f001 fb76 	bl	8106f60 <RCCEx_PLL2_Config>
 8105874:	4603      	mov	r3, r0
 8105876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810587a:	e003      	b.n	8105884 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810587c:	2301      	movs	r3, #1
 810587e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105888:	2b00      	cmp	r3, #0
 810588a:	d10d      	bne.n	81058a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810588c:	4b05      	ldr	r3, [pc, #20]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810588e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810589a:	4a02      	ldr	r2, [pc, #8]	; (81058a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810589c:	430b      	orrs	r3, r1
 810589e:	64d3      	str	r3, [r2, #76]	; 0x4c
 81058a0:	e006      	b.n	81058b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81058a2:	bf00      	nop
 81058a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81058ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81058bc:	66bb      	str	r3, [r7, #104]	; 0x68
 81058be:	2300      	movs	r3, #0
 81058c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 81058c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81058c6:	460b      	mov	r3, r1
 81058c8:	4313      	orrs	r3, r2
 81058ca:	d00c      	beq.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058d0:	3328      	adds	r3, #40	; 0x28
 81058d2:	2102      	movs	r1, #2
 81058d4:	4618      	mov	r0, r3
 81058d6:	f001 fbf5 	bl	81070c4 <RCCEx_PLL3_Config>
 81058da:	4603      	mov	r3, r0
 81058dc:	2b00      	cmp	r3, #0
 81058de:	d002      	beq.n	81058e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81058e0:	2301      	movs	r3, #1
 81058e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81058f2:	663b      	str	r3, [r7, #96]	; 0x60
 81058f4:	2300      	movs	r3, #0
 81058f6:	667b      	str	r3, [r7, #100]	; 0x64
 81058f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81058fc:	460b      	mov	r3, r1
 81058fe:	4313      	orrs	r3, r2
 8105900:	d038      	beq.n	8105974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810590a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810590e:	d018      	beq.n	8105942 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105914:	d811      	bhi.n	810593a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810591a:	d014      	beq.n	8105946 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810591c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105920:	d80b      	bhi.n	810593a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105922:	2b00      	cmp	r3, #0
 8105924:	d011      	beq.n	810594a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8105926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810592a:	d106      	bne.n	810593a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810592c:	4bc3      	ldr	r3, [pc, #780]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105930:	4ac2      	ldr	r2, [pc, #776]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105938:	e008      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810593a:	2301      	movs	r3, #1
 810593c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105940:	e004      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105942:	bf00      	nop
 8105944:	e002      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105946:	bf00      	nop
 8105948:	e000      	b.n	810594c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810594c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105950:	2b00      	cmp	r3, #0
 8105952:	d10b      	bne.n	810596c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105954:	4bb9      	ldr	r3, [pc, #740]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105958:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105964:	4ab5      	ldr	r2, [pc, #724]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105966:	430b      	orrs	r3, r1
 8105968:	6553      	str	r3, [r2, #84]	; 0x54
 810596a:	e003      	b.n	8105974 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810596c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105978:	e9d3 2300 	ldrd	r2, r3, [r3]
 810597c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8105980:	65bb      	str	r3, [r7, #88]	; 0x58
 8105982:	2300      	movs	r3, #0
 8105984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105986:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810598a:	460b      	mov	r3, r1
 810598c:	4313      	orrs	r3, r2
 810598e:	d009      	beq.n	81059a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105990:	4baa      	ldr	r3, [pc, #680]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105994:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810599c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810599e:	4aa7      	ldr	r2, [pc, #668]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059a0:	430b      	orrs	r3, r1
 81059a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81059b0:	653b      	str	r3, [r7, #80]	; 0x50
 81059b2:	2300      	movs	r3, #0
 81059b4:	657b      	str	r3, [r7, #84]	; 0x54
 81059b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81059ba:	460b      	mov	r3, r1
 81059bc:	4313      	orrs	r3, r2
 81059be:	d00a      	beq.n	81059d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81059c0:	4b9e      	ldr	r3, [pc, #632]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059c2:	691b      	ldr	r3, [r3, #16]
 81059c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81059d0:	4a9a      	ldr	r2, [pc, #616]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059d2:	430b      	orrs	r3, r1
 81059d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 81059e2:	64bb      	str	r3, [r7, #72]	; 0x48
 81059e4:	2300      	movs	r3, #0
 81059e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 81059e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81059ec:	460b      	mov	r3, r1
 81059ee:	4313      	orrs	r3, r2
 81059f0:	d009      	beq.n	8105a06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81059f2:	4b92      	ldr	r3, [pc, #584]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81059f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105a00:	4a8e      	ldr	r2, [pc, #568]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a02:	430b      	orrs	r3, r1
 8105a04:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a0e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8105a12:	643b      	str	r3, [r7, #64]	; 0x40
 8105a14:	2300      	movs	r3, #0
 8105a16:	647b      	str	r3, [r7, #68]	; 0x44
 8105a18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8105a1c:	460b      	mov	r3, r1
 8105a1e:	4313      	orrs	r3, r2
 8105a20:	d00e      	beq.n	8105a40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105a22:	4b86      	ldr	r3, [pc, #536]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a24:	691b      	ldr	r3, [r3, #16]
 8105a26:	4a85      	ldr	r2, [pc, #532]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105a2c:	6113      	str	r3, [r2, #16]
 8105a2e:	4b83      	ldr	r3, [pc, #524]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a30:	6919      	ldr	r1, [r3, #16]
 8105a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105a3a:	4a80      	ldr	r2, [pc, #512]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a3c:	430b      	orrs	r3, r1
 8105a3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a48:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8105a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8105a4e:	2300      	movs	r3, #0
 8105a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105a52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8105a56:	460b      	mov	r3, r1
 8105a58:	4313      	orrs	r3, r2
 8105a5a:	d009      	beq.n	8105a70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105a5c:	4b77      	ldr	r3, [pc, #476]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105a60:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8105a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a6a:	4a74      	ldr	r2, [pc, #464]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a6c:	430b      	orrs	r3, r1
 8105a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a78:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8105a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8105a7e:	2300      	movs	r3, #0
 8105a80:	637b      	str	r3, [r7, #52]	; 0x34
 8105a82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8105a86:	460b      	mov	r3, r1
 8105a88:	4313      	orrs	r3, r2
 8105a8a:	d00a      	beq.n	8105aa2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105a8c:	4b6b      	ldr	r3, [pc, #428]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a90:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8105a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105a9c:	4a67      	ldr	r2, [pc, #412]	; (8105c3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a9e:	430b      	orrs	r3, r1
 8105aa0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aaa:	2100      	movs	r1, #0
 8105aac:	62b9      	str	r1, [r7, #40]	; 0x28
 8105aae:	f003 0301 	and.w	r3, r3, #1
 8105ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105ab4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8105ab8:	460b      	mov	r3, r1
 8105aba:	4313      	orrs	r3, r2
 8105abc:	d011      	beq.n	8105ae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ac2:	3308      	adds	r3, #8
 8105ac4:	2100      	movs	r1, #0
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	f001 fa4a 	bl	8106f60 <RCCEx_PLL2_Config>
 8105acc:	4603      	mov	r3, r0
 8105ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d003      	beq.n	8105ae2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aea:	2100      	movs	r1, #0
 8105aec:	6239      	str	r1, [r7, #32]
 8105aee:	f003 0302 	and.w	r3, r3, #2
 8105af2:	627b      	str	r3, [r7, #36]	; 0x24
 8105af4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105af8:	460b      	mov	r3, r1
 8105afa:	4313      	orrs	r3, r2
 8105afc:	d011      	beq.n	8105b22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b02:	3308      	adds	r3, #8
 8105b04:	2101      	movs	r1, #1
 8105b06:	4618      	mov	r0, r3
 8105b08:	f001 fa2a 	bl	8106f60 <RCCEx_PLL2_Config>
 8105b0c:	4603      	mov	r3, r0
 8105b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	d003      	beq.n	8105b22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b2a:	2100      	movs	r1, #0
 8105b2c:	61b9      	str	r1, [r7, #24]
 8105b2e:	f003 0304 	and.w	r3, r3, #4
 8105b32:	61fb      	str	r3, [r7, #28]
 8105b34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105b38:	460b      	mov	r3, r1
 8105b3a:	4313      	orrs	r3, r2
 8105b3c:	d011      	beq.n	8105b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b42:	3308      	adds	r3, #8
 8105b44:	2102      	movs	r1, #2
 8105b46:	4618      	mov	r0, r3
 8105b48:	f001 fa0a 	bl	8106f60 <RCCEx_PLL2_Config>
 8105b4c:	4603      	mov	r3, r0
 8105b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d003      	beq.n	8105b62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b6a:	2100      	movs	r1, #0
 8105b6c:	6139      	str	r1, [r7, #16]
 8105b6e:	f003 0308 	and.w	r3, r3, #8
 8105b72:	617b      	str	r3, [r7, #20]
 8105b74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105b78:	460b      	mov	r3, r1
 8105b7a:	4313      	orrs	r3, r2
 8105b7c:	d011      	beq.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b82:	3328      	adds	r3, #40	; 0x28
 8105b84:	2100      	movs	r1, #0
 8105b86:	4618      	mov	r0, r3
 8105b88:	f001 fa9c 	bl	81070c4 <RCCEx_PLL3_Config>
 8105b8c:	4603      	mov	r3, r0
 8105b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8105b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	d003      	beq.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105baa:	2100      	movs	r1, #0
 8105bac:	60b9      	str	r1, [r7, #8]
 8105bae:	f003 0310 	and.w	r3, r3, #16
 8105bb2:	60fb      	str	r3, [r7, #12]
 8105bb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105bb8:	460b      	mov	r3, r1
 8105bba:	4313      	orrs	r3, r2
 8105bbc:	d011      	beq.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bc2:	3328      	adds	r3, #40	; 0x28
 8105bc4:	2101      	movs	r1, #1
 8105bc6:	4618      	mov	r0, r3
 8105bc8:	f001 fa7c 	bl	81070c4 <RCCEx_PLL3_Config>
 8105bcc:	4603      	mov	r3, r0
 8105bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d003      	beq.n	8105be2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105bde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bea:	2100      	movs	r1, #0
 8105bec:	6039      	str	r1, [r7, #0]
 8105bee:	f003 0320 	and.w	r3, r3, #32
 8105bf2:	607b      	str	r3, [r7, #4]
 8105bf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105bf8:	460b      	mov	r3, r1
 8105bfa:	4313      	orrs	r3, r2
 8105bfc:	d011      	beq.n	8105c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c02:	3328      	adds	r3, #40	; 0x28
 8105c04:	2102      	movs	r1, #2
 8105c06:	4618      	mov	r0, r3
 8105c08:	f001 fa5c 	bl	81070c4 <RCCEx_PLL3_Config>
 8105c0c:	4603      	mov	r3, r0
 8105c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105c12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c16:	2b00      	cmp	r3, #0
 8105c18:	d003      	beq.n	8105c22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8105c22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8105c26:	2b00      	cmp	r3, #0
 8105c28:	d101      	bne.n	8105c2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105c2a:	2300      	movs	r3, #0
 8105c2c:	e000      	b.n	8105c30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105c2e:	2301      	movs	r3, #1
}
 8105c30:	4618      	mov	r0, r3
 8105c32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8105c36:	46bd      	mov	sp, r7
 8105c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105c3c:	58024400 	.word	0x58024400

08105c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8105c40:	b580      	push	{r7, lr}
 8105c42:	b090      	sub	sp, #64	; 0x40
 8105c44:	af00      	add	r7, sp, #0
 8105c46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105c4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8105c52:	430b      	orrs	r3, r1
 8105c54:	f040 8094 	bne.w	8105d80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105c58:	4b9e      	ldr	r3, [pc, #632]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c5c:	f003 0307 	and.w	r3, r3, #7
 8105c60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105c64:	2b04      	cmp	r3, #4
 8105c66:	f200 8087 	bhi.w	8105d78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8105c6a:	a201      	add	r2, pc, #4	; (adr r2, 8105c70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8105c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c70:	08105c85 	.word	0x08105c85
 8105c74:	08105cad 	.word	0x08105cad
 8105c78:	08105cd5 	.word	0x08105cd5
 8105c7c:	08105d71 	.word	0x08105d71
 8105c80:	08105cfd 	.word	0x08105cfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105c84:	4b93      	ldr	r3, [pc, #588]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105c86:	681b      	ldr	r3, [r3, #0]
 8105c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105c90:	d108      	bne.n	8105ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105c96:	4618      	mov	r0, r3
 8105c98:	f001 f810 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105ca0:	f000 bd45 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ca4:	2300      	movs	r3, #0
 8105ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ca8:	f000 bd41 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105cac:	4b89      	ldr	r3, [pc, #548]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105cae:	681b      	ldr	r3, [r3, #0]
 8105cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105cb8:	d108      	bne.n	8105ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105cba:	f107 0318 	add.w	r3, r7, #24
 8105cbe:	4618      	mov	r0, r3
 8105cc0:	f000 fd54 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105cc4:	69bb      	ldr	r3, [r7, #24]
 8105cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105cc8:	f000 bd31 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105ccc:	2300      	movs	r3, #0
 8105cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105cd0:	f000 bd2d 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105cd4:	4b7f      	ldr	r3, [pc, #508]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105cd6:	681b      	ldr	r3, [r3, #0]
 8105cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ce0:	d108      	bne.n	8105cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ce2:	f107 030c 	add.w	r3, r7, #12
 8105ce6:	4618      	mov	r0, r3
 8105ce8:	f000 fe94 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105cec:	68fb      	ldr	r3, [r7, #12]
 8105cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105cf0:	f000 bd1d 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105cf4:	2300      	movs	r3, #0
 8105cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105cf8:	f000 bd19 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105cfc:	4b75      	ldr	r3, [pc, #468]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105d04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105d06:	4b73      	ldr	r3, [pc, #460]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	f003 0304 	and.w	r3, r3, #4
 8105d0e:	2b04      	cmp	r3, #4
 8105d10:	d10c      	bne.n	8105d2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8105d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d14:	2b00      	cmp	r3, #0
 8105d16:	d109      	bne.n	8105d2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105d18:	4b6e      	ldr	r3, [pc, #440]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	08db      	lsrs	r3, r3, #3
 8105d1e:	f003 0303 	and.w	r3, r3, #3
 8105d22:	4a6d      	ldr	r2, [pc, #436]	; (8105ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105d24:	fa22 f303 	lsr.w	r3, r2, r3
 8105d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d2a:	e01f      	b.n	8105d6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105d2c:	4b69      	ldr	r3, [pc, #420]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105d38:	d106      	bne.n	8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8105d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105d40:	d102      	bne.n	8105d48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105d42:	4b66      	ldr	r3, [pc, #408]	; (8105edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d46:	e011      	b.n	8105d6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105d48:	4b62      	ldr	r3, [pc, #392]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105d54:	d106      	bne.n	8105d64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8105d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d5c:	d102      	bne.n	8105d64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105d5e:	4b60      	ldr	r3, [pc, #384]	; (8105ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105d62:	e003      	b.n	8105d6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105d64:	2300      	movs	r3, #0
 8105d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105d68:	f000 bce1 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105d6c:	f000 bcdf 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105d70:	4b5c      	ldr	r3, [pc, #368]	; (8105ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d74:	f000 bcdb 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105d78:	2300      	movs	r3, #0
 8105d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105d7c:	f000 bcd7 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105d84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8105d88:	430b      	orrs	r3, r1
 8105d8a:	f040 80ad 	bne.w	8105ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105d8e:	4b51      	ldr	r3, [pc, #324]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8105d96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105d9e:	d056      	beq.n	8105e4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105da2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105da6:	f200 8090 	bhi.w	8105eca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dac:	2bc0      	cmp	r3, #192	; 0xc0
 8105dae:	f000 8088 	beq.w	8105ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8105db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105db4:	2bc0      	cmp	r3, #192	; 0xc0
 8105db6:	f200 8088 	bhi.w	8105eca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dbc:	2b80      	cmp	r3, #128	; 0x80
 8105dbe:	d032      	beq.n	8105e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dc2:	2b80      	cmp	r3, #128	; 0x80
 8105dc4:	f200 8081 	bhi.w	8105eca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dca:	2b00      	cmp	r3, #0
 8105dcc:	d003      	beq.n	8105dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8105dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105dd0:	2b40      	cmp	r3, #64	; 0x40
 8105dd2:	d014      	beq.n	8105dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105dd4:	e079      	b.n	8105eca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105dd6:	4b3f      	ldr	r3, [pc, #252]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105de2:	d108      	bne.n	8105df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105de8:	4618      	mov	r0, r3
 8105dea:	f000 ff67 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105df2:	f000 bc9c 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105df6:	2300      	movs	r3, #0
 8105df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105dfa:	f000 bc98 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105dfe:	4b35      	ldr	r3, [pc, #212]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105e0a:	d108      	bne.n	8105e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e0c:	f107 0318 	add.w	r3, r7, #24
 8105e10:	4618      	mov	r0, r3
 8105e12:	f000 fcab 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105e16:	69bb      	ldr	r3, [r7, #24]
 8105e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e1a:	f000 bc88 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e1e:	2300      	movs	r3, #0
 8105e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e22:	f000 bc84 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105e26:	4b2b      	ldr	r3, [pc, #172]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e28:	681b      	ldr	r3, [r3, #0]
 8105e2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e32:	d108      	bne.n	8105e46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e34:	f107 030c 	add.w	r3, r7, #12
 8105e38:	4618      	mov	r0, r3
 8105e3a:	f000 fdeb 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105e3e:	68fb      	ldr	r3, [r7, #12]
 8105e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105e42:	f000 bc74 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105e46:	2300      	movs	r3, #0
 8105e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105e4a:	f000 bc70 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105e4e:	4b21      	ldr	r3, [pc, #132]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105e56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105e58:	4b1e      	ldr	r3, [pc, #120]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e5a:	681b      	ldr	r3, [r3, #0]
 8105e5c:	f003 0304 	and.w	r3, r3, #4
 8105e60:	2b04      	cmp	r3, #4
 8105e62:	d10c      	bne.n	8105e7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8105e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105e66:	2b00      	cmp	r3, #0
 8105e68:	d109      	bne.n	8105e7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105e6a:	4b1a      	ldr	r3, [pc, #104]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e6c:	681b      	ldr	r3, [r3, #0]
 8105e6e:	08db      	lsrs	r3, r3, #3
 8105e70:	f003 0303 	and.w	r3, r3, #3
 8105e74:	4a18      	ldr	r2, [pc, #96]	; (8105ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105e76:	fa22 f303 	lsr.w	r3, r2, r3
 8105e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105e7c:	e01f      	b.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105e7e:	4b15      	ldr	r3, [pc, #84]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e80:	681b      	ldr	r3, [r3, #0]
 8105e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105e8a:	d106      	bne.n	8105e9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8105e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e92:	d102      	bne.n	8105e9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105e94:	4b11      	ldr	r3, [pc, #68]	; (8105edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105e98:	e011      	b.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105e9a:	4b0e      	ldr	r3, [pc, #56]	; (8105ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ea6:	d106      	bne.n	8105eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8105ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105eae:	d102      	bne.n	8105eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105eb0:	4b0b      	ldr	r3, [pc, #44]	; (8105ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105eb4:	e003      	b.n	8105ebe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105eb6:	2300      	movs	r3, #0
 8105eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105eba:	f000 bc38 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105ebe:	f000 bc36 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105ec2:	4b08      	ldr	r3, [pc, #32]	; (8105ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ec6:	f000 bc32 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105eca:	2300      	movs	r3, #0
 8105ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ece:	f000 bc2e 	b.w	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105ed2:	bf00      	nop
 8105ed4:	58024400 	.word	0x58024400
 8105ed8:	03d09000 	.word	0x03d09000
 8105edc:	003d0900 	.word	0x003d0900
 8105ee0:	017d7840 	.word	0x017d7840
 8105ee4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105eec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8105ef0:	430b      	orrs	r3, r1
 8105ef2:	f040 809c 	bne.w	810602e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105ef6:	4b9e      	ldr	r3, [pc, #632]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105efa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8105efe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105f06:	d054      	beq.n	8105fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105f0e:	f200 808b 	bhi.w	8106028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105f18:	f000 8083 	beq.w	8106022 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8105f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105f22:	f200 8081 	bhi.w	8106028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105f2c:	d02f      	beq.n	8105f8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8105f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105f34:	d878      	bhi.n	8106028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f38:	2b00      	cmp	r3, #0
 8105f3a:	d004      	beq.n	8105f46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8105f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105f42:	d012      	beq.n	8105f6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8105f44:	e070      	b.n	8106028 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105f46:	4b8a      	ldr	r3, [pc, #552]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105f52:	d107      	bne.n	8105f64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105f58:	4618      	mov	r0, r3
 8105f5a:	f000 feaf 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f62:	e3e4      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f64:	2300      	movs	r3, #0
 8105f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f68:	e3e1      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105f6a:	4b81      	ldr	r3, [pc, #516]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105f76:	d107      	bne.n	8105f88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f78:	f107 0318 	add.w	r3, r7, #24
 8105f7c:	4618      	mov	r0, r3
 8105f7e:	f000 fbf5 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105f82:	69bb      	ldr	r3, [r7, #24]
 8105f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105f86:	e3d2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105f88:	2300      	movs	r3, #0
 8105f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f8c:	e3cf      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105f8e:	4b78      	ldr	r3, [pc, #480]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105f9a:	d107      	bne.n	8105fac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f9c:	f107 030c 	add.w	r3, r7, #12
 8105fa0:	4618      	mov	r0, r3
 8105fa2:	f000 fd37 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105fa6:	68fb      	ldr	r3, [r7, #12]
 8105fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105faa:	e3c0      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105fac:	2300      	movs	r3, #0
 8105fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105fb0:	e3bd      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105fb2:	4b6f      	ldr	r3, [pc, #444]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105fba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105fbc:	4b6c      	ldr	r3, [pc, #432]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105fbe:	681b      	ldr	r3, [r3, #0]
 8105fc0:	f003 0304 	and.w	r3, r3, #4
 8105fc4:	2b04      	cmp	r3, #4
 8105fc6:	d10c      	bne.n	8105fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8105fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105fca:	2b00      	cmp	r3, #0
 8105fcc:	d109      	bne.n	8105fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105fce:	4b68      	ldr	r3, [pc, #416]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105fd0:	681b      	ldr	r3, [r3, #0]
 8105fd2:	08db      	lsrs	r3, r3, #3
 8105fd4:	f003 0303 	and.w	r3, r3, #3
 8105fd8:	4a66      	ldr	r2, [pc, #408]	; (8106174 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105fda:	fa22 f303 	lsr.w	r3, r2, r3
 8105fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105fe0:	e01e      	b.n	8106020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105fe2:	4b63      	ldr	r3, [pc, #396]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105fee:	d106      	bne.n	8105ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8105ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105ff6:	d102      	bne.n	8105ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105ff8:	4b5f      	ldr	r3, [pc, #380]	; (8106178 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105ffc:	e010      	b.n	8106020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105ffe:	4b5c      	ldr	r3, [pc, #368]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106000:	681b      	ldr	r3, [r3, #0]
 8106002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810600a:	d106      	bne.n	810601a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810600e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106012:	d102      	bne.n	810601a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106014:	4b59      	ldr	r3, [pc, #356]	; (810617c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106018:	e002      	b.n	8106020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810601a:	2300      	movs	r3, #0
 810601c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810601e:	e386      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106020:	e385      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106022:	4b57      	ldr	r3, [pc, #348]	; (8106180 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106026:	e382      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106028:	2300      	movs	r3, #0
 810602a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810602c:	e37f      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810602e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106032:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8106036:	430b      	orrs	r3, r1
 8106038:	f040 80a7 	bne.w	810618a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810603c:	4b4c      	ldr	r3, [pc, #304]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106040:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106044:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810604c:	d055      	beq.n	81060fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106054:	f200 8096 	bhi.w	8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810605a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810605e:	f000 8084 	beq.w	810616a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8106062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106064:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106068:	f200 808c 	bhi.w	8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810606e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106072:	d030      	beq.n	81060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8106074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810607a:	f200 8083 	bhi.w	8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106080:	2b00      	cmp	r3, #0
 8106082:	d004      	beq.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8106084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810608a:	d012      	beq.n	81060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810608c:	e07a      	b.n	8106184 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810608e:	4b38      	ldr	r3, [pc, #224]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810609a:	d107      	bne.n	81060ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810609c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81060a0:	4618      	mov	r0, r3
 81060a2:	f000 fe0b 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060aa:	e340      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81060ac:	2300      	movs	r3, #0
 81060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81060b0:	e33d      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81060b2:	4b2f      	ldr	r3, [pc, #188]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81060ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81060be:	d107      	bne.n	81060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81060c0:	f107 0318 	add.w	r3, r7, #24
 81060c4:	4618      	mov	r0, r3
 81060c6:	f000 fb51 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81060ca:	69bb      	ldr	r3, [r7, #24]
 81060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060ce:	e32e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81060d0:	2300      	movs	r3, #0
 81060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81060d4:	e32b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81060d6:	4b26      	ldr	r3, [pc, #152]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81060d8:	681b      	ldr	r3, [r3, #0]
 81060da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81060de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81060e2:	d107      	bne.n	81060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81060e4:	f107 030c 	add.w	r3, r7, #12
 81060e8:	4618      	mov	r0, r3
 81060ea:	f000 fc93 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81060ee:	68fb      	ldr	r3, [r7, #12]
 81060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81060f2:	e31c      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81060f4:	2300      	movs	r3, #0
 81060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81060f8:	e319      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81060fa:	4b1d      	ldr	r3, [pc, #116]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81060fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106102:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106104:	4b1a      	ldr	r3, [pc, #104]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	f003 0304 	and.w	r3, r3, #4
 810610c:	2b04      	cmp	r3, #4
 810610e:	d10c      	bne.n	810612a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8106110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106112:	2b00      	cmp	r3, #0
 8106114:	d109      	bne.n	810612a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106116:	4b16      	ldr	r3, [pc, #88]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	08db      	lsrs	r3, r3, #3
 810611c:	f003 0303 	and.w	r3, r3, #3
 8106120:	4a14      	ldr	r2, [pc, #80]	; (8106174 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106122:	fa22 f303 	lsr.w	r3, r2, r3
 8106126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106128:	e01e      	b.n	8106168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810612a:	4b11      	ldr	r3, [pc, #68]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106136:	d106      	bne.n	8106146 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8106138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810613a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810613e:	d102      	bne.n	8106146 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106140:	4b0d      	ldr	r3, [pc, #52]	; (8106178 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106144:	e010      	b.n	8106168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106146:	4b0a      	ldr	r3, [pc, #40]	; (8106170 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810614e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106152:	d106      	bne.n	8106162 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8106154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810615a:	d102      	bne.n	8106162 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810615c:	4b07      	ldr	r3, [pc, #28]	; (810617c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106160:	e002      	b.n	8106168 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106162:	2300      	movs	r3, #0
 8106164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106166:	e2e2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106168:	e2e1      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810616a:	4b05      	ldr	r3, [pc, #20]	; (8106180 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810616c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810616e:	e2de      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106170:	58024400 	.word	0x58024400
 8106174:	03d09000 	.word	0x03d09000
 8106178:	003d0900 	.word	0x003d0900
 810617c:	017d7840 	.word	0x017d7840
 8106180:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8106184:	2300      	movs	r3, #0
 8106186:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106188:	e2d1      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810618a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810618e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8106192:	430b      	orrs	r3, r1
 8106194:	f040 809c 	bne.w	81062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106198:	4b93      	ldr	r3, [pc, #588]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810619a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810619c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81061a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81061a8:	d054      	beq.n	8106254 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81061b0:	f200 808b 	bhi.w	81062ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81061ba:	f000 8083 	beq.w	81062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81061c4:	f200 8081 	bhi.w	81062ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81061ce:	d02f      	beq.n	8106230 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81061d6:	d878      	bhi.n	81062ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061da:	2b00      	cmp	r3, #0
 81061dc:	d004      	beq.n	81061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81061e4:	d012      	beq.n	810620c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81061e6:	e070      	b.n	81062ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81061e8:	4b7f      	ldr	r3, [pc, #508]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81061f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81061f4:	d107      	bne.n	8106206 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81061f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81061fa:	4618      	mov	r0, r3
 81061fc:	f000 fd5e 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106204:	e293      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106206:	2300      	movs	r3, #0
 8106208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810620a:	e290      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810620c:	4b76      	ldr	r3, [pc, #472]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106218:	d107      	bne.n	810622a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810621a:	f107 0318 	add.w	r3, r7, #24
 810621e:	4618      	mov	r0, r3
 8106220:	f000 faa4 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106224:	69bb      	ldr	r3, [r7, #24]
 8106226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106228:	e281      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810622a:	2300      	movs	r3, #0
 810622c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810622e:	e27e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106230:	4b6d      	ldr	r3, [pc, #436]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810623c:	d107      	bne.n	810624e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810623e:	f107 030c 	add.w	r3, r7, #12
 8106242:	4618      	mov	r0, r3
 8106244:	f000 fbe6 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106248:	68fb      	ldr	r3, [r7, #12]
 810624a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810624c:	e26f      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810624e:	2300      	movs	r3, #0
 8106250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106252:	e26c      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106254:	4b64      	ldr	r3, [pc, #400]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810625c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810625e:	4b62      	ldr	r3, [pc, #392]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106260:	681b      	ldr	r3, [r3, #0]
 8106262:	f003 0304 	and.w	r3, r3, #4
 8106266:	2b04      	cmp	r3, #4
 8106268:	d10c      	bne.n	8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810626a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810626c:	2b00      	cmp	r3, #0
 810626e:	d109      	bne.n	8106284 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106270:	4b5d      	ldr	r3, [pc, #372]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	08db      	lsrs	r3, r3, #3
 8106276:	f003 0303 	and.w	r3, r3, #3
 810627a:	4a5c      	ldr	r2, [pc, #368]	; (81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810627c:	fa22 f303 	lsr.w	r3, r2, r3
 8106280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106282:	e01e      	b.n	81062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106284:	4b58      	ldr	r3, [pc, #352]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810628c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106290:	d106      	bne.n	81062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8106292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106298:	d102      	bne.n	81062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810629a:	4b55      	ldr	r3, [pc, #340]	; (81063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810629c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810629e:	e010      	b.n	81062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81062a0:	4b51      	ldr	r3, [pc, #324]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81062a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81062ac:	d106      	bne.n	81062bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81062ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81062b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81062b4:	d102      	bne.n	81062bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81062b6:	4b4f      	ldr	r3, [pc, #316]	; (81063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81062ba:	e002      	b.n	81062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81062bc:	2300      	movs	r3, #0
 81062be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81062c0:	e235      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81062c2:	e234      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81062c4:	4b4c      	ldr	r3, [pc, #304]	; (81063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81062c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81062c8:	e231      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81062ca:	2300      	movs	r3, #0
 81062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81062ce:	e22e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81062d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81062d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 81062d8:	430b      	orrs	r3, r1
 81062da:	f040 808f 	bne.w	81063fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81062de:	4b42      	ldr	r3, [pc, #264]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81062e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81062e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 81062e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 81062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81062ee:	d06b      	beq.n	81063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81062f6:	d874      	bhi.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81062fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81062fe:	d056      	beq.n	81063ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106306:	d86c      	bhi.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810630a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810630e:	d03b      	beq.n	8106388 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8106310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106316:	d864      	bhi.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810631a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810631e:	d021      	beq.n	8106364 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8106320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106326:	d85c      	bhi.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810632a:	2b00      	cmp	r3, #0
 810632c:	d004      	beq.n	8106338 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106334:	d004      	beq.n	8106340 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8106336:	e054      	b.n	81063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8106338:	f7fe fa4c 	bl	81047d4 <HAL_RCC_GetPCLK1Freq>
 810633c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810633e:	e1f6      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106340:	4b29      	ldr	r3, [pc, #164]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810634c:	d107      	bne.n	810635e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810634e:	f107 0318 	add.w	r3, r7, #24
 8106352:	4618      	mov	r0, r3
 8106354:	f000 fa0a 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106358:	69fb      	ldr	r3, [r7, #28]
 810635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810635c:	e1e7      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810635e:	2300      	movs	r3, #0
 8106360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106362:	e1e4      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106364:	4b20      	ldr	r3, [pc, #128]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106366:	681b      	ldr	r3, [r3, #0]
 8106368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810636c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106370:	d107      	bne.n	8106382 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106372:	f107 030c 	add.w	r3, r7, #12
 8106376:	4618      	mov	r0, r3
 8106378:	f000 fb4c 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810637c:	693b      	ldr	r3, [r7, #16]
 810637e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106380:	e1d5      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106382:	2300      	movs	r3, #0
 8106384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106386:	e1d2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106388:	4b17      	ldr	r3, [pc, #92]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810638a:	681b      	ldr	r3, [r3, #0]
 810638c:	f003 0304 	and.w	r3, r3, #4
 8106390:	2b04      	cmp	r3, #4
 8106392:	d109      	bne.n	81063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106394:	4b14      	ldr	r3, [pc, #80]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	08db      	lsrs	r3, r3, #3
 810639a:	f003 0303 	and.w	r3, r3, #3
 810639e:	4a13      	ldr	r2, [pc, #76]	; (81063ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81063a0:	fa22 f303 	lsr.w	r3, r2, r3
 81063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063a6:	e1c2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063a8:	2300      	movs	r3, #0
 81063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81063ac:	e1bf      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81063ae:	4b0e      	ldr	r3, [pc, #56]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81063b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81063ba:	d102      	bne.n	81063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81063bc:	4b0c      	ldr	r3, [pc, #48]	; (81063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81063be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063c0:	e1b5      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063c2:	2300      	movs	r3, #0
 81063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81063c6:	e1b2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81063c8:	4b07      	ldr	r3, [pc, #28]	; (81063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81063d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81063d4:	d102      	bne.n	81063dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81063d6:	4b07      	ldr	r3, [pc, #28]	; (81063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81063da:	e1a8      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81063dc:	2300      	movs	r3, #0
 81063de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81063e0:	e1a5      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81063e2:	2300      	movs	r3, #0
 81063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81063e6:	e1a2      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81063e8:	58024400 	.word	0x58024400
 81063ec:	03d09000 	.word	0x03d09000
 81063f0:	003d0900 	.word	0x003d0900
 81063f4:	017d7840 	.word	0x017d7840
 81063f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81063fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106400:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8106404:	430b      	orrs	r3, r1
 8106406:	d173      	bne.n	81064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8106408:	4b9c      	ldr	r3, [pc, #624]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810640c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106410:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106418:	d02f      	beq.n	810647a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810641c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106420:	d863      	bhi.n	81064ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8106422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106424:	2b00      	cmp	r3, #0
 8106426:	d004      	beq.n	8106432 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8106428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810642e:	d012      	beq.n	8106456 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8106430:	e05b      	b.n	81064ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106432:	4b92      	ldr	r3, [pc, #584]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106434:	681b      	ldr	r3, [r3, #0]
 8106436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810643a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810643e:	d107      	bne.n	8106450 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106440:	f107 0318 	add.w	r3, r7, #24
 8106444:	4618      	mov	r0, r3
 8106446:	f000 f991 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810644a:	69bb      	ldr	r3, [r7, #24]
 810644c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810644e:	e16e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106450:	2300      	movs	r3, #0
 8106452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106454:	e16b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106456:	4b89      	ldr	r3, [pc, #548]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810645e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106462:	d107      	bne.n	8106474 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106464:	f107 030c 	add.w	r3, r7, #12
 8106468:	4618      	mov	r0, r3
 810646a:	f000 fad3 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810646e:	697b      	ldr	r3, [r7, #20]
 8106470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106472:	e15c      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106474:	2300      	movs	r3, #0
 8106476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106478:	e159      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810647a:	4b80      	ldr	r3, [pc, #512]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810647c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810647e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106482:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106484:	4b7d      	ldr	r3, [pc, #500]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	f003 0304 	and.w	r3, r3, #4
 810648c:	2b04      	cmp	r3, #4
 810648e:	d10c      	bne.n	81064aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8106490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106492:	2b00      	cmp	r3, #0
 8106494:	d109      	bne.n	81064aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106496:	4b79      	ldr	r3, [pc, #484]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	08db      	lsrs	r3, r3, #3
 810649c:	f003 0303 	and.w	r3, r3, #3
 81064a0:	4a77      	ldr	r2, [pc, #476]	; (8106680 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81064a2:	fa22 f303 	lsr.w	r3, r2, r3
 81064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81064a8:	e01e      	b.n	81064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81064aa:	4b74      	ldr	r3, [pc, #464]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064ac:	681b      	ldr	r3, [r3, #0]
 81064ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81064b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81064b6:	d106      	bne.n	81064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81064be:	d102      	bne.n	81064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81064c0:	4b70      	ldr	r3, [pc, #448]	; (8106684 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81064c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81064c4:	e010      	b.n	81064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81064c6:	4b6d      	ldr	r3, [pc, #436]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81064ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81064d2:	d106      	bne.n	81064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81064d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81064da:	d102      	bne.n	81064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81064dc:	4b6a      	ldr	r3, [pc, #424]	; (8106688 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81064de:	63fb      	str	r3, [r7, #60]	; 0x3c
 81064e0:	e002      	b.n	81064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81064e2:	2300      	movs	r3, #0
 81064e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81064e6:	e122      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81064e8:	e121      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81064ea:	2300      	movs	r3, #0
 81064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81064ee:	e11e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81064f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81064f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 81064f8:	430b      	orrs	r3, r1
 81064fa:	d133      	bne.n	8106564 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81064fc:	4b5f      	ldr	r3, [pc, #380]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81064fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106504:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106508:	2b00      	cmp	r3, #0
 810650a:	d004      	beq.n	8106516 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810650e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106512:	d012      	beq.n	810653a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8106514:	e023      	b.n	810655e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106516:	4b59      	ldr	r3, [pc, #356]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106518:	681b      	ldr	r3, [r3, #0]
 810651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810651e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106522:	d107      	bne.n	8106534 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106528:	4618      	mov	r0, r3
 810652a:	f000 fbc7 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106530:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106532:	e0fc      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106534:	2300      	movs	r3, #0
 8106536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106538:	e0f9      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810653a:	4b50      	ldr	r3, [pc, #320]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106546:	d107      	bne.n	8106558 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106548:	f107 0318 	add.w	r3, r7, #24
 810654c:	4618      	mov	r0, r3
 810654e:	f000 f90d 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106552:	6a3b      	ldr	r3, [r7, #32]
 8106554:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106556:	e0ea      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106558:	2300      	movs	r3, #0
 810655a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810655c:	e0e7      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810655e:	2300      	movs	r3, #0
 8106560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106562:	e0e4      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106568:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 810656c:	430b      	orrs	r3, r1
 810656e:	f040 808d 	bne.w	810668c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8106572:	4b42      	ldr	r3, [pc, #264]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106576:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810657a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810657e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106582:	d06b      	beq.n	810665c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8106584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106586:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810658a:	d874      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106592:	d056      	beq.n	8106642 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8106594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810659a:	d86c      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810659e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81065a2:	d03b      	beq.n	810661c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81065aa:	d864      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81065b2:	d021      	beq.n	81065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81065ba:	d85c      	bhi.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065be:	2b00      	cmp	r3, #0
 81065c0:	d004      	beq.n	81065cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81065c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81065c8:	d004      	beq.n	81065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81065ca:	e054      	b.n	8106676 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81065cc:	f000 f8b8 	bl	8106740 <HAL_RCCEx_GetD3PCLK1Freq>
 81065d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81065d2:	e0ac      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81065d4:	4b29      	ldr	r3, [pc, #164]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81065dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81065e0:	d107      	bne.n	81065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065e2:	f107 0318 	add.w	r3, r7, #24
 81065e6:	4618      	mov	r0, r3
 81065e8:	f000 f8c0 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81065ec:	69fb      	ldr	r3, [r7, #28]
 81065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81065f0:	e09d      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81065f2:	2300      	movs	r3, #0
 81065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81065f6:	e09a      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81065f8:	4b20      	ldr	r3, [pc, #128]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81065fa:	681b      	ldr	r3, [r3, #0]
 81065fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106604:	d107      	bne.n	8106616 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106606:	f107 030c 	add.w	r3, r7, #12
 810660a:	4618      	mov	r0, r3
 810660c:	f000 fa02 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106610:	693b      	ldr	r3, [r7, #16]
 8106612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106614:	e08b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106616:	2300      	movs	r3, #0
 8106618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810661a:	e088      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810661c:	4b17      	ldr	r3, [pc, #92]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810661e:	681b      	ldr	r3, [r3, #0]
 8106620:	f003 0304 	and.w	r3, r3, #4
 8106624:	2b04      	cmp	r3, #4
 8106626:	d109      	bne.n	810663c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106628:	4b14      	ldr	r3, [pc, #80]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	08db      	lsrs	r3, r3, #3
 810662e:	f003 0303 	and.w	r3, r3, #3
 8106632:	4a13      	ldr	r2, [pc, #76]	; (8106680 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8106634:	fa22 f303 	lsr.w	r3, r2, r3
 8106638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810663a:	e078      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810663c:	2300      	movs	r3, #0
 810663e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106640:	e075      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106642:	4b0e      	ldr	r3, [pc, #56]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106644:	681b      	ldr	r3, [r3, #0]
 8106646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810664e:	d102      	bne.n	8106656 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8106650:	4b0c      	ldr	r3, [pc, #48]	; (8106684 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8106652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106654:	e06b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106656:	2300      	movs	r3, #0
 8106658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810665a:	e068      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810665c:	4b07      	ldr	r3, [pc, #28]	; (810667c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106668:	d102      	bne.n	8106670 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810666a:	4b07      	ldr	r3, [pc, #28]	; (8106688 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810666c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810666e:	e05e      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106670:	2300      	movs	r3, #0
 8106672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106674:	e05b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8106676:	2300      	movs	r3, #0
 8106678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810667a:	e058      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810667c:	58024400 	.word	0x58024400
 8106680:	03d09000 	.word	0x03d09000
 8106684:	003d0900 	.word	0x003d0900
 8106688:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810668c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106690:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8106694:	430b      	orrs	r3, r1
 8106696:	d148      	bne.n	810672a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8106698:	4b27      	ldr	r3, [pc, #156]	; (8106738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810669a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810669c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81066a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066a8:	d02a      	beq.n	8106700 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81066b0:	d838      	bhi.n	8106724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066b4:	2b00      	cmp	r3, #0
 81066b6:	d004      	beq.n	81066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81066ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81066be:	d00d      	beq.n	81066dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81066c0:	e030      	b.n	8106724 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81066c2:	4b1d      	ldr	r3, [pc, #116]	; (8106738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81066c4:	681b      	ldr	r3, [r3, #0]
 81066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81066ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81066ce:	d102      	bne.n	81066d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81066d0:	4b1a      	ldr	r3, [pc, #104]	; (810673c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81066d4:	e02b      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81066d6:	2300      	movs	r3, #0
 81066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81066da:	e028      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81066dc:	4b16      	ldr	r3, [pc, #88]	; (8106738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81066de:	681b      	ldr	r3, [r3, #0]
 81066e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81066e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81066e8:	d107      	bne.n	81066fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81066ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81066ee:	4618      	mov	r0, r3
 81066f0:	f000 fae4 	bl	8106cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81066f8:	e019      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81066fa:	2300      	movs	r3, #0
 81066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81066fe:	e016      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106700:	4b0d      	ldr	r3, [pc, #52]	; (8106738 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106702:	681b      	ldr	r3, [r3, #0]
 8106704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810670c:	d107      	bne.n	810671e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810670e:	f107 0318 	add.w	r3, r7, #24
 8106712:	4618      	mov	r0, r3
 8106714:	f000 f82a 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106718:	69fb      	ldr	r3, [r7, #28]
 810671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810671c:	e007      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810671e:	2300      	movs	r3, #0
 8106720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106722:	e004      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106724:	2300      	movs	r3, #0
 8106726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106728:	e001      	b.n	810672e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810672a:	2300      	movs	r3, #0
 810672c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 810672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8106730:	4618      	mov	r0, r3
 8106732:	3740      	adds	r7, #64	; 0x40
 8106734:	46bd      	mov	sp, r7
 8106736:	bd80      	pop	{r7, pc}
 8106738:	58024400 	.word	0x58024400
 810673c:	017d7840 	.word	0x017d7840

08106740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8106740:	b580      	push	{r7, lr}
 8106742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106744:	f7fe f814 	bl	8104770 <HAL_RCC_GetHCLKFreq>
 8106748:	4602      	mov	r2, r0
 810674a:	4b06      	ldr	r3, [pc, #24]	; (8106764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810674c:	6a1b      	ldr	r3, [r3, #32]
 810674e:	091b      	lsrs	r3, r3, #4
 8106750:	f003 0307 	and.w	r3, r3, #7
 8106754:	4904      	ldr	r1, [pc, #16]	; (8106768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106756:	5ccb      	ldrb	r3, [r1, r3]
 8106758:	f003 031f 	and.w	r3, r3, #31
 810675c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106760:	4618      	mov	r0, r3
 8106762:	bd80      	pop	{r7, pc}
 8106764:	58024400 	.word	0x58024400
 8106768:	08109a18 	.word	0x08109a18

0810676c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810676c:	b480      	push	{r7}
 810676e:	b089      	sub	sp, #36	; 0x24
 8106770:	af00      	add	r7, sp, #0
 8106772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106774:	4ba1      	ldr	r3, [pc, #644]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106778:	f003 0303 	and.w	r3, r3, #3
 810677c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810677e:	4b9f      	ldr	r3, [pc, #636]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106782:	0b1b      	lsrs	r3, r3, #12
 8106784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810678a:	4b9c      	ldr	r3, [pc, #624]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810678e:	091b      	lsrs	r3, r3, #4
 8106790:	f003 0301 	and.w	r3, r3, #1
 8106794:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8106796:	4b99      	ldr	r3, [pc, #612]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810679a:	08db      	lsrs	r3, r3, #3
 810679c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81067a0:	693a      	ldr	r2, [r7, #16]
 81067a2:	fb02 f303 	mul.w	r3, r2, r3
 81067a6:	ee07 3a90 	vmov	s15, r3
 81067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81067b2:	697b      	ldr	r3, [r7, #20]
 81067b4:	2b00      	cmp	r3, #0
 81067b6:	f000 8111 	beq.w	81069dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81067ba:	69bb      	ldr	r3, [r7, #24]
 81067bc:	2b02      	cmp	r3, #2
 81067be:	f000 8083 	beq.w	81068c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81067c2:	69bb      	ldr	r3, [r7, #24]
 81067c4:	2b02      	cmp	r3, #2
 81067c6:	f200 80a1 	bhi.w	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81067ca:	69bb      	ldr	r3, [r7, #24]
 81067cc:	2b00      	cmp	r3, #0
 81067ce:	d003      	beq.n	81067d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81067d0:	69bb      	ldr	r3, [r7, #24]
 81067d2:	2b01      	cmp	r3, #1
 81067d4:	d056      	beq.n	8106884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81067d6:	e099      	b.n	810690c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81067d8:	4b88      	ldr	r3, [pc, #544]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	f003 0320 	and.w	r3, r3, #32
 81067e0:	2b00      	cmp	r3, #0
 81067e2:	d02d      	beq.n	8106840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81067e4:	4b85      	ldr	r3, [pc, #532]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81067e6:	681b      	ldr	r3, [r3, #0]
 81067e8:	08db      	lsrs	r3, r3, #3
 81067ea:	f003 0303 	and.w	r3, r3, #3
 81067ee:	4a84      	ldr	r2, [pc, #528]	; (8106a00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81067f0:	fa22 f303 	lsr.w	r3, r2, r3
 81067f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81067f6:	68bb      	ldr	r3, [r7, #8]
 81067f8:	ee07 3a90 	vmov	s15, r3
 81067fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106800:	697b      	ldr	r3, [r7, #20]
 8106802:	ee07 3a90 	vmov	s15, r3
 8106806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810680a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810680e:	4b7b      	ldr	r3, [pc, #492]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106816:	ee07 3a90 	vmov	s15, r3
 810681a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810681e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106822:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810682a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810682e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106836:	ee67 7a27 	vmul.f32	s15, s14, s15
 810683a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810683e:	e087      	b.n	8106950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106840:	697b      	ldr	r3, [r7, #20]
 8106842:	ee07 3a90 	vmov	s15, r3
 8106846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810684a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106a08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810684e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106852:	4b6a      	ldr	r3, [pc, #424]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810685a:	ee07 3a90 	vmov	s15, r3
 810685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106862:	ed97 6a03 	vldr	s12, [r7, #12]
 8106866:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810686a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810686e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810687e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106882:	e065      	b.n	8106950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106884:	697b      	ldr	r3, [r7, #20]
 8106886:	ee07 3a90 	vmov	s15, r3
 810688a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810688e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8106892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106896:	4b59      	ldr	r3, [pc, #356]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810689a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810689e:	ee07 3a90 	vmov	s15, r3
 81068a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81068aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81068be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81068c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81068c6:	e043      	b.n	8106950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81068c8:	697b      	ldr	r3, [r7, #20]
 81068ca:	ee07 3a90 	vmov	s15, r3
 81068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81068d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81068da:	4b48      	ldr	r3, [pc, #288]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81068e2:	ee07 3a90 	vmov	s15, r3
 81068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81068ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81068ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81068fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810690a:	e021      	b.n	8106950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810690c:	697b      	ldr	r3, [r7, #20]
 810690e:	ee07 3a90 	vmov	s15, r3
 8106912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106916:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810691e:	4b37      	ldr	r3, [pc, #220]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106926:	ee07 3a90 	vmov	s15, r3
 810692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810692e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106932:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810693e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106946:	ee67 7a27 	vmul.f32	s15, s14, s15
 810694a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810694e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106950:	4b2a      	ldr	r3, [pc, #168]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106954:	0a5b      	lsrs	r3, r3, #9
 8106956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810695a:	ee07 3a90 	vmov	s15, r3
 810695e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106966:	ee37 7a87 	vadd.f32	s14, s15, s14
 810696a:	edd7 6a07 	vldr	s13, [r7, #28]
 810696e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106976:	ee17 2a90 	vmov	r2, s15
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810697e:	4b1f      	ldr	r3, [pc, #124]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106982:	0c1b      	lsrs	r3, r3, #16
 8106984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106988:	ee07 3a90 	vmov	s15, r3
 810698c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106998:	edd7 6a07 	vldr	s13, [r7, #28]
 810699c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069a4:	ee17 2a90 	vmov	r2, s15
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81069ac:	4b13      	ldr	r3, [pc, #76]	; (81069fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81069b0:	0e1b      	lsrs	r3, r3, #24
 81069b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81069b6:	ee07 3a90 	vmov	s15, r3
 81069ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81069be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81069c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81069c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81069ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81069ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81069d2:	ee17 2a90 	vmov	r2, s15
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81069da:	e008      	b.n	81069ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	2200      	movs	r2, #0
 81069e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	2200      	movs	r2, #0
 81069e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	2200      	movs	r2, #0
 81069ec:	609a      	str	r2, [r3, #8]
}
 81069ee:	bf00      	nop
 81069f0:	3724      	adds	r7, #36	; 0x24
 81069f2:	46bd      	mov	sp, r7
 81069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069f8:	4770      	bx	lr
 81069fa:	bf00      	nop
 81069fc:	58024400 	.word	0x58024400
 8106a00:	03d09000 	.word	0x03d09000
 8106a04:	46000000 	.word	0x46000000
 8106a08:	4c742400 	.word	0x4c742400
 8106a0c:	4a742400 	.word	0x4a742400
 8106a10:	4bbebc20 	.word	0x4bbebc20

08106a14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106a14:	b480      	push	{r7}
 8106a16:	b089      	sub	sp, #36	; 0x24
 8106a18:	af00      	add	r7, sp, #0
 8106a1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106a1c:	4ba1      	ldr	r3, [pc, #644]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a20:	f003 0303 	and.w	r3, r3, #3
 8106a24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106a26:	4b9f      	ldr	r3, [pc, #636]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a2a:	0d1b      	lsrs	r3, r3, #20
 8106a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106a30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106a32:	4b9c      	ldr	r3, [pc, #624]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a36:	0a1b      	lsrs	r3, r3, #8
 8106a38:	f003 0301 	and.w	r3, r3, #1
 8106a3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8106a3e:	4b99      	ldr	r3, [pc, #612]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106a42:	08db      	lsrs	r3, r3, #3
 8106a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106a48:	693a      	ldr	r2, [r7, #16]
 8106a4a:	fb02 f303 	mul.w	r3, r2, r3
 8106a4e:	ee07 3a90 	vmov	s15, r3
 8106a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106a5a:	697b      	ldr	r3, [r7, #20]
 8106a5c:	2b00      	cmp	r3, #0
 8106a5e:	f000 8111 	beq.w	8106c84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106a62:	69bb      	ldr	r3, [r7, #24]
 8106a64:	2b02      	cmp	r3, #2
 8106a66:	f000 8083 	beq.w	8106b70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106a6a:	69bb      	ldr	r3, [r7, #24]
 8106a6c:	2b02      	cmp	r3, #2
 8106a6e:	f200 80a1 	bhi.w	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8106a72:	69bb      	ldr	r3, [r7, #24]
 8106a74:	2b00      	cmp	r3, #0
 8106a76:	d003      	beq.n	8106a80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106a78:	69bb      	ldr	r3, [r7, #24]
 8106a7a:	2b01      	cmp	r3, #1
 8106a7c:	d056      	beq.n	8106b2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106a7e:	e099      	b.n	8106bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106a80:	4b88      	ldr	r3, [pc, #544]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	f003 0320 	and.w	r3, r3, #32
 8106a88:	2b00      	cmp	r3, #0
 8106a8a:	d02d      	beq.n	8106ae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106a8c:	4b85      	ldr	r3, [pc, #532]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106a8e:	681b      	ldr	r3, [r3, #0]
 8106a90:	08db      	lsrs	r3, r3, #3
 8106a92:	f003 0303 	and.w	r3, r3, #3
 8106a96:	4a84      	ldr	r2, [pc, #528]	; (8106ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106a98:	fa22 f303 	lsr.w	r3, r2, r3
 8106a9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106a9e:	68bb      	ldr	r3, [r7, #8]
 8106aa0:	ee07 3a90 	vmov	s15, r3
 8106aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106aa8:	697b      	ldr	r3, [r7, #20]
 8106aaa:	ee07 3a90 	vmov	s15, r3
 8106aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106ab6:	4b7b      	ldr	r3, [pc, #492]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106abe:	ee07 3a90 	vmov	s15, r3
 8106ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106ae6:	e087      	b.n	8106bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106ae8:	697b      	ldr	r3, [r7, #20]
 8106aea:	ee07 3a90 	vmov	s15, r3
 8106aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106af2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106afa:	4b6a      	ldr	r3, [pc, #424]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b02:	ee07 3a90 	vmov	s15, r3
 8106b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106b2a:	e065      	b.n	8106bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b2c:	697b      	ldr	r3, [r7, #20]
 8106b2e:	ee07 3a90 	vmov	s15, r3
 8106b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8106cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b3e:	4b59      	ldr	r3, [pc, #356]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b46:	ee07 3a90 	vmov	s15, r3
 8106b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106b6e:	e043      	b.n	8106bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106b70:	697b      	ldr	r3, [r7, #20]
 8106b72:	ee07 3a90 	vmov	s15, r3
 8106b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106b82:	4b48      	ldr	r3, [pc, #288]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106b8a:	ee07 3a90 	vmov	s15, r3
 8106b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8106b96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106bb2:	e021      	b.n	8106bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106bb4:	697b      	ldr	r3, [r7, #20]
 8106bb6:	ee07 3a90 	vmov	s15, r3
 8106bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8106cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106bc6:	4b37      	ldr	r3, [pc, #220]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106bce:	ee07 3a90 	vmov	s15, r3
 8106bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8106bda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106bf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106bf8:	4b2a      	ldr	r3, [pc, #168]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106bfc:	0a5b      	lsrs	r3, r3, #9
 8106bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c02:	ee07 3a90 	vmov	s15, r3
 8106c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c1e:	ee17 2a90 	vmov	r2, s15
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8106c26:	4b1f      	ldr	r3, [pc, #124]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c2a:	0c1b      	lsrs	r3, r3, #16
 8106c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c30:	ee07 3a90 	vmov	s15, r3
 8106c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c4c:	ee17 2a90 	vmov	r2, s15
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106c54:	4b13      	ldr	r3, [pc, #76]	; (8106ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c58:	0e1b      	lsrs	r3, r3, #24
 8106c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106c5e:	ee07 3a90 	vmov	s15, r3
 8106c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106c7a:	ee17 2a90 	vmov	r2, s15
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106c82:	e008      	b.n	8106c96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	2200      	movs	r2, #0
 8106c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106c8a:	687b      	ldr	r3, [r7, #4]
 8106c8c:	2200      	movs	r2, #0
 8106c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	2200      	movs	r2, #0
 8106c94:	609a      	str	r2, [r3, #8]
}
 8106c96:	bf00      	nop
 8106c98:	3724      	adds	r7, #36	; 0x24
 8106c9a:	46bd      	mov	sp, r7
 8106c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ca0:	4770      	bx	lr
 8106ca2:	bf00      	nop
 8106ca4:	58024400 	.word	0x58024400
 8106ca8:	03d09000 	.word	0x03d09000
 8106cac:	46000000 	.word	0x46000000
 8106cb0:	4c742400 	.word	0x4c742400
 8106cb4:	4a742400 	.word	0x4a742400
 8106cb8:	4bbebc20 	.word	0x4bbebc20

08106cbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8106cbc:	b480      	push	{r7}
 8106cbe:	b089      	sub	sp, #36	; 0x24
 8106cc0:	af00      	add	r7, sp, #0
 8106cc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106cc4:	4ba0      	ldr	r3, [pc, #640]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cc8:	f003 0303 	and.w	r3, r3, #3
 8106ccc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8106cce:	4b9e      	ldr	r3, [pc, #632]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106cd2:	091b      	lsrs	r3, r3, #4
 8106cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106cd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8106cda:	4b9b      	ldr	r3, [pc, #620]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cde:	f003 0301 	and.w	r3, r3, #1
 8106ce2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106ce4:	4b98      	ldr	r3, [pc, #608]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106ce8:	08db      	lsrs	r3, r3, #3
 8106cea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106cee:	693a      	ldr	r2, [r7, #16]
 8106cf0:	fb02 f303 	mul.w	r3, r2, r3
 8106cf4:	ee07 3a90 	vmov	s15, r3
 8106cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106cfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106d00:	697b      	ldr	r3, [r7, #20]
 8106d02:	2b00      	cmp	r3, #0
 8106d04:	f000 8111 	beq.w	8106f2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106d08:	69bb      	ldr	r3, [r7, #24]
 8106d0a:	2b02      	cmp	r3, #2
 8106d0c:	f000 8083 	beq.w	8106e16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106d10:	69bb      	ldr	r3, [r7, #24]
 8106d12:	2b02      	cmp	r3, #2
 8106d14:	f200 80a1 	bhi.w	8106e5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106d18:	69bb      	ldr	r3, [r7, #24]
 8106d1a:	2b00      	cmp	r3, #0
 8106d1c:	d003      	beq.n	8106d26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8106d1e:	69bb      	ldr	r3, [r7, #24]
 8106d20:	2b01      	cmp	r3, #1
 8106d22:	d056      	beq.n	8106dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106d24:	e099      	b.n	8106e5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d26:	4b88      	ldr	r3, [pc, #544]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d28:	681b      	ldr	r3, [r3, #0]
 8106d2a:	f003 0320 	and.w	r3, r3, #32
 8106d2e:	2b00      	cmp	r3, #0
 8106d30:	d02d      	beq.n	8106d8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106d32:	4b85      	ldr	r3, [pc, #532]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	08db      	lsrs	r3, r3, #3
 8106d38:	f003 0303 	and.w	r3, r3, #3
 8106d3c:	4a83      	ldr	r2, [pc, #524]	; (8106f4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8106d42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d44:	68bb      	ldr	r3, [r7, #8]
 8106d46:	ee07 3a90 	vmov	s15, r3
 8106d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d4e:	697b      	ldr	r3, [r7, #20]
 8106d50:	ee07 3a90 	vmov	s15, r3
 8106d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106d5c:	4b7a      	ldr	r3, [pc, #488]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106d64:	ee07 3a90 	vmov	s15, r3
 8106d68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106d6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106d70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106d78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106d7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106d88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106d8c:	e087      	b.n	8106e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106d8e:	697b      	ldr	r3, [r7, #20]
 8106d90:	ee07 3a90 	vmov	s15, r3
 8106d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106d98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106f54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106da0:	4b69      	ldr	r3, [pc, #420]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106da8:	ee07 3a90 	vmov	s15, r3
 8106dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106db0:	ed97 6a03 	vldr	s12, [r7, #12]
 8106db4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106dd0:	e065      	b.n	8106e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106dd2:	697b      	ldr	r3, [r7, #20]
 8106dd4:	ee07 3a90 	vmov	s15, r3
 8106dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ddc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106f58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106de4:	4b58      	ldr	r3, [pc, #352]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106dec:	ee07 3a90 	vmov	s15, r3
 8106df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106df4:	ed97 6a03 	vldr	s12, [r7, #12]
 8106df8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e14:	e043      	b.n	8106e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106e16:	697b      	ldr	r3, [r7, #20]
 8106e18:	ee07 3a90 	vmov	s15, r3
 8106e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8106f5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e28:	4b47      	ldr	r3, [pc, #284]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e30:	ee07 3a90 	vmov	s15, r3
 8106e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e58:	e021      	b.n	8106e9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106e5a:	697b      	ldr	r3, [r7, #20]
 8106e5c:	ee07 3a90 	vmov	s15, r3
 8106e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106e64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106f54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106e6c:	4b36      	ldr	r3, [pc, #216]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106e74:	ee07 3a90 	vmov	s15, r3
 8106e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106e80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106f50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106e98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106e9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8106e9e:	4b2a      	ldr	r3, [pc, #168]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ea2:	0a5b      	lsrs	r3, r3, #9
 8106ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ea8:	ee07 3a90 	vmov	s15, r3
 8106eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106eb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106eb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106eb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8106ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ec4:	ee17 2a90 	vmov	r2, s15
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8106ecc:	4b1e      	ldr	r3, [pc, #120]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106ed0:	0c1b      	lsrs	r3, r3, #16
 8106ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106ed6:	ee07 3a90 	vmov	s15, r3
 8106eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8106eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106ef2:	ee17 2a90 	vmov	r2, s15
 8106ef6:	687b      	ldr	r3, [r7, #4]
 8106ef8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8106efa:	4b13      	ldr	r3, [pc, #76]	; (8106f48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106efe:	0e1b      	lsrs	r3, r3, #24
 8106f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106f04:	ee07 3a90 	vmov	s15, r3
 8106f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8106f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106f20:	ee17 2a90 	vmov	r2, s15
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106f28:	e008      	b.n	8106f3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	2200      	movs	r2, #0
 8106f2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	2200      	movs	r2, #0
 8106f34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	2200      	movs	r2, #0
 8106f3a:	609a      	str	r2, [r3, #8]
}
 8106f3c:	bf00      	nop
 8106f3e:	3724      	adds	r7, #36	; 0x24
 8106f40:	46bd      	mov	sp, r7
 8106f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f46:	4770      	bx	lr
 8106f48:	58024400 	.word	0x58024400
 8106f4c:	03d09000 	.word	0x03d09000
 8106f50:	46000000 	.word	0x46000000
 8106f54:	4c742400 	.word	0x4c742400
 8106f58:	4a742400 	.word	0x4a742400
 8106f5c:	4bbebc20 	.word	0x4bbebc20

08106f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106f60:	b580      	push	{r7, lr}
 8106f62:	b084      	sub	sp, #16
 8106f64:	af00      	add	r7, sp, #0
 8106f66:	6078      	str	r0, [r7, #4]
 8106f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106f6a:	2300      	movs	r3, #0
 8106f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106f6e:	4b54      	ldr	r3, [pc, #336]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f72:	f003 0303 	and.w	r3, r3, #3
 8106f76:	2b03      	cmp	r3, #3
 8106f78:	d101      	bne.n	8106f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106f7a:	2301      	movs	r3, #1
 8106f7c:	e09b      	b.n	81070b6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106f7e:	4b50      	ldr	r3, [pc, #320]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	4a4f      	ldr	r2, [pc, #316]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106f8a:	f7fa fe17 	bl	8101bbc <HAL_GetTick>
 8106f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106f90:	e008      	b.n	8106fa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106f92:	f7fa fe13 	bl	8101bbc <HAL_GetTick>
 8106f96:	4602      	mov	r2, r0
 8106f98:	68bb      	ldr	r3, [r7, #8]
 8106f9a:	1ad3      	subs	r3, r2, r3
 8106f9c:	2b02      	cmp	r3, #2
 8106f9e:	d901      	bls.n	8106fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106fa0:	2303      	movs	r3, #3
 8106fa2:	e088      	b.n	81070b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106fa4:	4b46      	ldr	r3, [pc, #280]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d1f0      	bne.n	8106f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106fb0:	4b43      	ldr	r3, [pc, #268]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	681b      	ldr	r3, [r3, #0]
 8106fbc:	031b      	lsls	r3, r3, #12
 8106fbe:	4940      	ldr	r1, [pc, #256]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106fc0:	4313      	orrs	r3, r2
 8106fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	685b      	ldr	r3, [r3, #4]
 8106fc8:	3b01      	subs	r3, #1
 8106fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	689b      	ldr	r3, [r3, #8]
 8106fd2:	3b01      	subs	r3, #1
 8106fd4:	025b      	lsls	r3, r3, #9
 8106fd6:	b29b      	uxth	r3, r3
 8106fd8:	431a      	orrs	r2, r3
 8106fda:	687b      	ldr	r3, [r7, #4]
 8106fdc:	68db      	ldr	r3, [r3, #12]
 8106fde:	3b01      	subs	r3, #1
 8106fe0:	041b      	lsls	r3, r3, #16
 8106fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106fe6:	431a      	orrs	r2, r3
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	691b      	ldr	r3, [r3, #16]
 8106fec:	3b01      	subs	r3, #1
 8106fee:	061b      	lsls	r3, r3, #24
 8106ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106ff4:	4932      	ldr	r1, [pc, #200]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106ff6:	4313      	orrs	r3, r2
 8106ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106ffa:	4b31      	ldr	r3, [pc, #196]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8106ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	695b      	ldr	r3, [r3, #20]
 8107006:	492e      	ldr	r1, [pc, #184]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107008:	4313      	orrs	r3, r2
 810700a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810700c:	4b2c      	ldr	r3, [pc, #176]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107010:	f023 0220 	bic.w	r2, r3, #32
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	699b      	ldr	r3, [r3, #24]
 8107018:	4929      	ldr	r1, [pc, #164]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810701a:	4313      	orrs	r3, r2
 810701c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810701e:	4b28      	ldr	r3, [pc, #160]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107022:	4a27      	ldr	r2, [pc, #156]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107024:	f023 0310 	bic.w	r3, r3, #16
 8107028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810702a:	4b25      	ldr	r3, [pc, #148]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810702e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107032:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107036:	687a      	ldr	r2, [r7, #4]
 8107038:	69d2      	ldr	r2, [r2, #28]
 810703a:	00d2      	lsls	r2, r2, #3
 810703c:	4920      	ldr	r1, [pc, #128]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810703e:	4313      	orrs	r3, r2
 8107040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107042:	4b1f      	ldr	r3, [pc, #124]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107046:	4a1e      	ldr	r2, [pc, #120]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107048:	f043 0310 	orr.w	r3, r3, #16
 810704c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810704e:	683b      	ldr	r3, [r7, #0]
 8107050:	2b00      	cmp	r3, #0
 8107052:	d106      	bne.n	8107062 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107054:	4b1a      	ldr	r3, [pc, #104]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107058:	4a19      	ldr	r2, [pc, #100]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810705a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810705e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107060:	e00f      	b.n	8107082 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107062:	683b      	ldr	r3, [r7, #0]
 8107064:	2b01      	cmp	r3, #1
 8107066:	d106      	bne.n	8107076 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107068:	4b15      	ldr	r3, [pc, #84]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810706c:	4a14      	ldr	r2, [pc, #80]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810706e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107074:	e005      	b.n	8107082 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107076:	4b12      	ldr	r3, [pc, #72]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810707a:	4a11      	ldr	r2, [pc, #68]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 810707c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107082:	4b0f      	ldr	r3, [pc, #60]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107084:	681b      	ldr	r3, [r3, #0]
 8107086:	4a0e      	ldr	r2, [pc, #56]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 8107088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810708c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810708e:	f7fa fd95 	bl	8101bbc <HAL_GetTick>
 8107092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107094:	e008      	b.n	81070a8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107096:	f7fa fd91 	bl	8101bbc <HAL_GetTick>
 810709a:	4602      	mov	r2, r0
 810709c:	68bb      	ldr	r3, [r7, #8]
 810709e:	1ad3      	subs	r3, r2, r3
 81070a0:	2b02      	cmp	r3, #2
 81070a2:	d901      	bls.n	81070a8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81070a4:	2303      	movs	r3, #3
 81070a6:	e006      	b.n	81070b6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81070a8:	4b05      	ldr	r3, [pc, #20]	; (81070c0 <RCCEx_PLL2_Config+0x160>)
 81070aa:	681b      	ldr	r3, [r3, #0]
 81070ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81070b0:	2b00      	cmp	r3, #0
 81070b2:	d0f0      	beq.n	8107096 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81070b4:	7bfb      	ldrb	r3, [r7, #15]
}
 81070b6:	4618      	mov	r0, r3
 81070b8:	3710      	adds	r7, #16
 81070ba:	46bd      	mov	sp, r7
 81070bc:	bd80      	pop	{r7, pc}
 81070be:	bf00      	nop
 81070c0:	58024400 	.word	0x58024400

081070c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81070c4:	b580      	push	{r7, lr}
 81070c6:	b084      	sub	sp, #16
 81070c8:	af00      	add	r7, sp, #0
 81070ca:	6078      	str	r0, [r7, #4]
 81070cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81070ce:	2300      	movs	r3, #0
 81070d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81070d2:	4b54      	ldr	r3, [pc, #336]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070d6:	f003 0303 	and.w	r3, r3, #3
 81070da:	2b03      	cmp	r3, #3
 81070dc:	d101      	bne.n	81070e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81070de:	2301      	movs	r3, #1
 81070e0:	e09b      	b.n	810721a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81070e2:	4b50      	ldr	r3, [pc, #320]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	4a4f      	ldr	r2, [pc, #316]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81070e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81070ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81070ee:	f7fa fd65 	bl	8101bbc <HAL_GetTick>
 81070f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81070f4:	e008      	b.n	8107108 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81070f6:	f7fa fd61 	bl	8101bbc <HAL_GetTick>
 81070fa:	4602      	mov	r2, r0
 81070fc:	68bb      	ldr	r3, [r7, #8]
 81070fe:	1ad3      	subs	r3, r2, r3
 8107100:	2b02      	cmp	r3, #2
 8107102:	d901      	bls.n	8107108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107104:	2303      	movs	r3, #3
 8107106:	e088      	b.n	810721a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107108:	4b46      	ldr	r3, [pc, #280]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107110:	2b00      	cmp	r3, #0
 8107112:	d1f0      	bne.n	81070f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107114:	4b43      	ldr	r3, [pc, #268]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	051b      	lsls	r3, r3, #20
 8107122:	4940      	ldr	r1, [pc, #256]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107124:	4313      	orrs	r3, r2
 8107126:	628b      	str	r3, [r1, #40]	; 0x28
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	685b      	ldr	r3, [r3, #4]
 810712c:	3b01      	subs	r3, #1
 810712e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	689b      	ldr	r3, [r3, #8]
 8107136:	3b01      	subs	r3, #1
 8107138:	025b      	lsls	r3, r3, #9
 810713a:	b29b      	uxth	r3, r3
 810713c:	431a      	orrs	r2, r3
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	68db      	ldr	r3, [r3, #12]
 8107142:	3b01      	subs	r3, #1
 8107144:	041b      	lsls	r3, r3, #16
 8107146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810714a:	431a      	orrs	r2, r3
 810714c:	687b      	ldr	r3, [r7, #4]
 810714e:	691b      	ldr	r3, [r3, #16]
 8107150:	3b01      	subs	r3, #1
 8107152:	061b      	lsls	r3, r3, #24
 8107154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107158:	4932      	ldr	r1, [pc, #200]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 810715a:	4313      	orrs	r3, r2
 810715c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810715e:	4b31      	ldr	r3, [pc, #196]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107166:	687b      	ldr	r3, [r7, #4]
 8107168:	695b      	ldr	r3, [r3, #20]
 810716a:	492e      	ldr	r1, [pc, #184]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 810716c:	4313      	orrs	r3, r2
 810716e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107170:	4b2c      	ldr	r3, [pc, #176]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107178:	687b      	ldr	r3, [r7, #4]
 810717a:	699b      	ldr	r3, [r3, #24]
 810717c:	4929      	ldr	r1, [pc, #164]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 810717e:	4313      	orrs	r3, r2
 8107180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107182:	4b28      	ldr	r3, [pc, #160]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107186:	4a27      	ldr	r2, [pc, #156]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810718c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810718e:	4b25      	ldr	r3, [pc, #148]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 8107190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107196:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810719a:	687a      	ldr	r2, [r7, #4]
 810719c:	69d2      	ldr	r2, [r2, #28]
 810719e:	00d2      	lsls	r2, r2, #3
 81071a0:	4920      	ldr	r1, [pc, #128]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071a2:	4313      	orrs	r3, r2
 81071a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81071a6:	4b1f      	ldr	r3, [pc, #124]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071aa:	4a1e      	ldr	r2, [pc, #120]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81071b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81071b2:	683b      	ldr	r3, [r7, #0]
 81071b4:	2b00      	cmp	r3, #0
 81071b6:	d106      	bne.n	81071c6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81071b8:	4b1a      	ldr	r3, [pc, #104]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071bc:	4a19      	ldr	r2, [pc, #100]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81071c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81071c4:	e00f      	b.n	81071e6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81071c6:	683b      	ldr	r3, [r7, #0]
 81071c8:	2b01      	cmp	r3, #1
 81071ca:	d106      	bne.n	81071da <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81071cc:	4b15      	ldr	r3, [pc, #84]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071d0:	4a14      	ldr	r2, [pc, #80]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81071d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81071d8:	e005      	b.n	81071e6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81071da:	4b12      	ldr	r3, [pc, #72]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81071de:	4a11      	ldr	r2, [pc, #68]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81071e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81071e6:	4b0f      	ldr	r3, [pc, #60]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071e8:	681b      	ldr	r3, [r3, #0]
 81071ea:	4a0e      	ldr	r2, [pc, #56]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 81071ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81071f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81071f2:	f7fa fce3 	bl	8101bbc <HAL_GetTick>
 81071f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81071f8:	e008      	b.n	810720c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81071fa:	f7fa fcdf 	bl	8101bbc <HAL_GetTick>
 81071fe:	4602      	mov	r2, r0
 8107200:	68bb      	ldr	r3, [r7, #8]
 8107202:	1ad3      	subs	r3, r2, r3
 8107204:	2b02      	cmp	r3, #2
 8107206:	d901      	bls.n	810720c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107208:	2303      	movs	r3, #3
 810720a:	e006      	b.n	810721a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810720c:	4b05      	ldr	r3, [pc, #20]	; (8107224 <RCCEx_PLL3_Config+0x160>)
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107214:	2b00      	cmp	r3, #0
 8107216:	d0f0      	beq.n	81071fa <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107218:	7bfb      	ldrb	r3, [r7, #15]
}
 810721a:	4618      	mov	r0, r3
 810721c:	3710      	adds	r7, #16
 810721e:	46bd      	mov	sp, r7
 8107220:	bd80      	pop	{r7, pc}
 8107222:	bf00      	nop
 8107224:	58024400 	.word	0x58024400

08107228 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8107228:	b580      	push	{r7, lr}
 810722a:	b08a      	sub	sp, #40	; 0x28
 810722c:	af00      	add	r7, sp, #0
 810722e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	2b00      	cmp	r3, #0
 8107234:	d101      	bne.n	810723a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8107236:	2301      	movs	r3, #1
 8107238:	e290      	b.n	810775c <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810723a:	f7fa fcef 	bl	8101c1c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 810723e:	687b      	ldr	r3, [r7, #4]
 8107240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8107244:	2b01      	cmp	r3, #1
 8107246:	d113      	bne.n	8107270 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	681b      	ldr	r3, [r3, #0]
 810724c:	4a96      	ldr	r2, [pc, #600]	; (81074a8 <HAL_SAI_Init+0x280>)
 810724e:	4293      	cmp	r3, r2
 8107250:	d004      	beq.n	810725c <HAL_SAI_Init+0x34>
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	681b      	ldr	r3, [r3, #0]
 8107256:	4a95      	ldr	r2, [pc, #596]	; (81074ac <HAL_SAI_Init+0x284>)
 8107258:	4293      	cmp	r3, r2
 810725a:	d107      	bne.n	810726c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8107260:	2b01      	cmp	r3, #1
 8107262:	d103      	bne.n	810726c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8107268:	2b00      	cmp	r3, #0
 810726a:	d001      	beq.n	8107270 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 810726c:	2301      	movs	r3, #1
 810726e:	e275      	b.n	810775c <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	4a8c      	ldr	r2, [pc, #560]	; (81074a8 <HAL_SAI_Init+0x280>)
 8107276:	4293      	cmp	r3, r2
 8107278:	d004      	beq.n	8107284 <HAL_SAI_Init+0x5c>
 810727a:	687b      	ldr	r3, [r7, #4]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	4a8c      	ldr	r2, [pc, #560]	; (81074b0 <HAL_SAI_Init+0x288>)
 8107280:	4293      	cmp	r3, r2
 8107282:	d102      	bne.n	810728a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8107284:	4b8b      	ldr	r3, [pc, #556]	; (81074b4 <HAL_SAI_Init+0x28c>)
 8107286:	61bb      	str	r3, [r7, #24]
 8107288:	e028      	b.n	81072dc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	4a8a      	ldr	r2, [pc, #552]	; (81074b8 <HAL_SAI_Init+0x290>)
 8107290:	4293      	cmp	r3, r2
 8107292:	d004      	beq.n	810729e <HAL_SAI_Init+0x76>
 8107294:	687b      	ldr	r3, [r7, #4]
 8107296:	681b      	ldr	r3, [r3, #0]
 8107298:	4a88      	ldr	r2, [pc, #544]	; (81074bc <HAL_SAI_Init+0x294>)
 810729a:	4293      	cmp	r3, r2
 810729c:	d102      	bne.n	81072a4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810729e:	4b88      	ldr	r3, [pc, #544]	; (81074c0 <HAL_SAI_Init+0x298>)
 81072a0:	61bb      	str	r3, [r7, #24]
 81072a2:	e01b      	b.n	81072dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81072a4:	687b      	ldr	r3, [r7, #4]
 81072a6:	681b      	ldr	r3, [r3, #0]
 81072a8:	4a86      	ldr	r2, [pc, #536]	; (81074c4 <HAL_SAI_Init+0x29c>)
 81072aa:	4293      	cmp	r3, r2
 81072ac:	d004      	beq.n	81072b8 <HAL_SAI_Init+0x90>
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	4a85      	ldr	r2, [pc, #532]	; (81074c8 <HAL_SAI_Init+0x2a0>)
 81072b4:	4293      	cmp	r3, r2
 81072b6:	d102      	bne.n	81072be <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81072b8:	4b84      	ldr	r3, [pc, #528]	; (81074cc <HAL_SAI_Init+0x2a4>)
 81072ba:	61bb      	str	r3, [r7, #24]
 81072bc:	e00e      	b.n	81072dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	681b      	ldr	r3, [r3, #0]
 81072c2:	4a7a      	ldr	r2, [pc, #488]	; (81074ac <HAL_SAI_Init+0x284>)
 81072c4:	4293      	cmp	r3, r2
 81072c6:	d004      	beq.n	81072d2 <HAL_SAI_Init+0xaa>
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	681b      	ldr	r3, [r3, #0]
 81072cc:	4a80      	ldr	r2, [pc, #512]	; (81074d0 <HAL_SAI_Init+0x2a8>)
 81072ce:	4293      	cmp	r3, r2
 81072d0:	d102      	bne.n	81072d8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81072d2:	4b80      	ldr	r3, [pc, #512]	; (81074d4 <HAL_SAI_Init+0x2ac>)
 81072d4:	61bb      	str	r3, [r7, #24]
 81072d6:	e001      	b.n	81072dc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81072d8:	2301      	movs	r3, #1
 81072da:	e23f      	b.n	810775c <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 81072e2:	b2db      	uxtb	r3, r3
 81072e4:	2b00      	cmp	r3, #0
 81072e6:	d106      	bne.n	81072f6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	2200      	movs	r2, #0
 81072ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 81072f0:	6878      	ldr	r0, [r7, #4]
 81072f2:	f7fa faab 	bl	810184c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81072f6:	6878      	ldr	r0, [r7, #4]
 81072f8:	f000 fa40 	bl	810777c <SAI_Disable>
 81072fc:	4603      	mov	r3, r0
 81072fe:	2b00      	cmp	r3, #0
 8107300:	d001      	beq.n	8107306 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8107302:	2301      	movs	r3, #1
 8107304:	e22a      	b.n	810775c <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	2202      	movs	r2, #2
 810730a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	68db      	ldr	r3, [r3, #12]
 8107312:	2b02      	cmp	r3, #2
 8107314:	d00c      	beq.n	8107330 <HAL_SAI_Init+0x108>
 8107316:	2b02      	cmp	r3, #2
 8107318:	d80d      	bhi.n	8107336 <HAL_SAI_Init+0x10e>
 810731a:	2b00      	cmp	r3, #0
 810731c:	d002      	beq.n	8107324 <HAL_SAI_Init+0xfc>
 810731e:	2b01      	cmp	r3, #1
 8107320:	d003      	beq.n	810732a <HAL_SAI_Init+0x102>
 8107322:	e008      	b.n	8107336 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8107324:	2300      	movs	r3, #0
 8107326:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107328:	e008      	b.n	810733c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 810732a:	2310      	movs	r3, #16
 810732c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810732e:	e005      	b.n	810733c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8107330:	2320      	movs	r3, #32
 8107332:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107334:	e002      	b.n	810733c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8107336:	2300      	movs	r3, #0
 8107338:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810733a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 810733c:	687b      	ldr	r3, [r7, #4]
 810733e:	689b      	ldr	r3, [r3, #8]
 8107340:	2b05      	cmp	r3, #5
 8107342:	d832      	bhi.n	81073aa <HAL_SAI_Init+0x182>
 8107344:	a201      	add	r2, pc, #4	; (adr r2, 810734c <HAL_SAI_Init+0x124>)
 8107346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810734a:	bf00      	nop
 810734c:	08107365 	.word	0x08107365
 8107350:	0810736b 	.word	0x0810736b
 8107354:	08107373 	.word	0x08107373
 8107358:	0810737b 	.word	0x0810737b
 810735c:	0810738b 	.word	0x0810738b
 8107360:	0810739b 	.word	0x0810739b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8107364:	2300      	movs	r3, #0
 8107366:	61fb      	str	r3, [r7, #28]
      break;
 8107368:	e022      	b.n	81073b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810736e:	61fb      	str	r3, [r7, #28]
      break;
 8107370:	e01e      	b.n	81073b0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8107372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107376:	61fb      	str	r3, [r7, #28]
      break;
 8107378:	e01a      	b.n	81073b0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810737a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810737e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8107380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107382:	f043 0301 	orr.w	r3, r3, #1
 8107386:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107388:	e012      	b.n	81073b0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810738a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810738e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8107390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107392:	f043 0302 	orr.w	r3, r3, #2
 8107396:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8107398:	e00a      	b.n	81073b0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810739a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810739e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81073a2:	f043 0303 	orr.w	r3, r3, #3
 81073a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81073a8:	e002      	b.n	81073b0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81073aa:	2300      	movs	r3, #0
 81073ac:	61fb      	str	r3, [r7, #28]
      break;
 81073ae:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81073b0:	69bb      	ldr	r3, [r7, #24]
 81073b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81073b4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81073b6:	687b      	ldr	r3, [r7, #4]
 81073b8:	6a1b      	ldr	r3, [r3, #32]
 81073ba:	2b00      	cmp	r3, #0
 81073bc:	f000 80c5 	beq.w	810754a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 81073c0:	2300      	movs	r3, #0
 81073c2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	4a37      	ldr	r2, [pc, #220]	; (81074a8 <HAL_SAI_Init+0x280>)
 81073ca:	4293      	cmp	r3, r2
 81073cc:	d004      	beq.n	81073d8 <HAL_SAI_Init+0x1b0>
 81073ce:	687b      	ldr	r3, [r7, #4]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	4a37      	ldr	r2, [pc, #220]	; (81074b0 <HAL_SAI_Init+0x288>)
 81073d4:	4293      	cmp	r3, r2
 81073d6:	d106      	bne.n	81073e6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 81073d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 81073dc:	f04f 0100 	mov.w	r1, #0
 81073e0:	f7fe fc2e 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 81073e4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	681b      	ldr	r3, [r3, #0]
 81073ea:	4a33      	ldr	r2, [pc, #204]	; (81074b8 <HAL_SAI_Init+0x290>)
 81073ec:	4293      	cmp	r3, r2
 81073ee:	d004      	beq.n	81073fa <HAL_SAI_Init+0x1d2>
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	4a31      	ldr	r2, [pc, #196]	; (81074bc <HAL_SAI_Init+0x294>)
 81073f6:	4293      	cmp	r3, r2
 81073f8:	d106      	bne.n	8107408 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81073fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 81073fe:	f04f 0100 	mov.w	r1, #0
 8107402:	f7fe fc1d 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8107406:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	4a2d      	ldr	r2, [pc, #180]	; (81074c4 <HAL_SAI_Init+0x29c>)
 810740e:	4293      	cmp	r3, r2
 8107410:	d004      	beq.n	810741c <HAL_SAI_Init+0x1f4>
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	4a2c      	ldr	r2, [pc, #176]	; (81074c8 <HAL_SAI_Init+0x2a0>)
 8107418:	4293      	cmp	r3, r2
 810741a:	d106      	bne.n	810742a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 810741c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8107420:	f04f 0100 	mov.w	r1, #0
 8107424:	f7fe fc0c 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8107428:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 810742a:	687b      	ldr	r3, [r7, #4]
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	4a1f      	ldr	r2, [pc, #124]	; (81074ac <HAL_SAI_Init+0x284>)
 8107430:	4293      	cmp	r3, r2
 8107432:	d106      	bne.n	8107442 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8107434:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8107438:	f04f 0100 	mov.w	r1, #0
 810743c:	f7fe fc00 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8107440:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	4a22      	ldr	r2, [pc, #136]	; (81074d0 <HAL_SAI_Init+0x2a8>)
 8107448:	4293      	cmp	r3, r2
 810744a:	d106      	bne.n	810745a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 810744c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8107450:	f04f 0100 	mov.w	r1, #0
 8107454:	f7fe fbf4 	bl	8105c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8107458:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	699b      	ldr	r3, [r3, #24]
 810745e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8107462:	d139      	bne.n	81074d8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107464:	687b      	ldr	r3, [r7, #4]
 8107466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107468:	2b04      	cmp	r3, #4
 810746a:	d102      	bne.n	8107472 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 810746c:	2340      	movs	r3, #64	; 0x40
 810746e:	60fb      	str	r3, [r7, #12]
 8107470:	e00a      	b.n	8107488 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8107472:	687b      	ldr	r3, [r7, #4]
 8107474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107476:	2b08      	cmp	r3, #8
 8107478:	d103      	bne.n	8107482 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810747a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810747e:	60fb      	str	r3, [r7, #12]
 8107480:	e002      	b.n	8107488 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8107482:	687b      	ldr	r3, [r7, #4]
 8107484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107486:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8107488:	697a      	ldr	r2, [r7, #20]
 810748a:	4613      	mov	r3, r2
 810748c:	009b      	lsls	r3, r3, #2
 810748e:	4413      	add	r3, r2
 8107490:	005b      	lsls	r3, r3, #1
 8107492:	4619      	mov	r1, r3
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	6a1b      	ldr	r3, [r3, #32]
 8107498:	68fa      	ldr	r2, [r7, #12]
 810749a:	fb02 f303 	mul.w	r3, r2, r3
 810749e:	fbb1 f3f3 	udiv	r3, r1, r3
 81074a2:	613b      	str	r3, [r7, #16]
 81074a4:	e030      	b.n	8107508 <HAL_SAI_Init+0x2e0>
 81074a6:	bf00      	nop
 81074a8:	40015804 	.word	0x40015804
 81074ac:	58005404 	.word	0x58005404
 81074b0:	40015824 	.word	0x40015824
 81074b4:	40015800 	.word	0x40015800
 81074b8:	40015c04 	.word	0x40015c04
 81074bc:	40015c24 	.word	0x40015c24
 81074c0:	40015c00 	.word	0x40015c00
 81074c4:	40016004 	.word	0x40016004
 81074c8:	40016024 	.word	0x40016024
 81074cc:	40016000 	.word	0x40016000
 81074d0:	58005424 	.word	0x58005424
 81074d4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81074d8:	687b      	ldr	r3, [r7, #4]
 81074da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81074dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81074e0:	d101      	bne.n	81074e6 <HAL_SAI_Init+0x2be>
 81074e2:	2302      	movs	r3, #2
 81074e4:	e000      	b.n	81074e8 <HAL_SAI_Init+0x2c0>
 81074e6:	2301      	movs	r3, #1
 81074e8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 81074ea:	697a      	ldr	r2, [r7, #20]
 81074ec:	4613      	mov	r3, r2
 81074ee:	009b      	lsls	r3, r3, #2
 81074f0:	4413      	add	r3, r2
 81074f2:	005b      	lsls	r3, r3, #1
 81074f4:	4619      	mov	r1, r3
 81074f6:	687b      	ldr	r3, [r7, #4]
 81074f8:	6a1b      	ldr	r3, [r3, #32]
 81074fa:	68ba      	ldr	r2, [r7, #8]
 81074fc:	fb02 f303 	mul.w	r3, r2, r3
 8107500:	021b      	lsls	r3, r3, #8
 8107502:	fbb1 f3f3 	udiv	r3, r1, r3
 8107506:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8107508:	693b      	ldr	r3, [r7, #16]
 810750a:	4a96      	ldr	r2, [pc, #600]	; (8107764 <HAL_SAI_Init+0x53c>)
 810750c:	fba2 2303 	umull	r2, r3, r2, r3
 8107510:	08da      	lsrs	r2, r3, #3
 8107512:	687b      	ldr	r3, [r7, #4]
 8107514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8107516:	6939      	ldr	r1, [r7, #16]
 8107518:	4b92      	ldr	r3, [pc, #584]	; (8107764 <HAL_SAI_Init+0x53c>)
 810751a:	fba3 2301 	umull	r2, r3, r3, r1
 810751e:	08da      	lsrs	r2, r3, #3
 8107520:	4613      	mov	r3, r2
 8107522:	009b      	lsls	r3, r3, #2
 8107524:	4413      	add	r3, r2
 8107526:	005b      	lsls	r3, r3, #1
 8107528:	1aca      	subs	r2, r1, r3
 810752a:	2a08      	cmp	r2, #8
 810752c:	d904      	bls.n	8107538 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107532:	1c5a      	adds	r2, r3, #1
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810753c:	2b04      	cmp	r3, #4
 810753e:	d104      	bne.n	810754a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8107540:	687b      	ldr	r3, [r7, #4]
 8107542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107544:	085a      	lsrs	r2, r3, #1
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 810754a:	687b      	ldr	r3, [r7, #4]
 810754c:	685b      	ldr	r3, [r3, #4]
 810754e:	2b00      	cmp	r3, #0
 8107550:	d003      	beq.n	810755a <HAL_SAI_Init+0x332>
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	685b      	ldr	r3, [r3, #4]
 8107556:	2b02      	cmp	r3, #2
 8107558:	d109      	bne.n	810756e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810755e:	2b01      	cmp	r3, #1
 8107560:	d101      	bne.n	8107566 <HAL_SAI_Init+0x33e>
 8107562:	2300      	movs	r3, #0
 8107564:	e001      	b.n	810756a <HAL_SAI_Init+0x342>
 8107566:	f44f 7300 	mov.w	r3, #512	; 0x200
 810756a:	623b      	str	r3, [r7, #32]
 810756c:	e008      	b.n	8107580 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107572:	2b01      	cmp	r3, #1
 8107574:	d102      	bne.n	810757c <HAL_SAI_Init+0x354>
 8107576:	f44f 7300 	mov.w	r3, #512	; 0x200
 810757a:	e000      	b.n	810757e <HAL_SAI_Init+0x356>
 810757c:	2300      	movs	r3, #0
 810757e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8107580:	f7fa fb4c 	bl	8101c1c <HAL_GetREVID>
 8107584:	4603      	mov	r3, r0
 8107586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810758a:	d331      	bcc.n	81075f0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810758c:	687b      	ldr	r3, [r7, #4]
 810758e:	681b      	ldr	r3, [r3, #0]
 8107590:	6819      	ldr	r1, [r3, #0]
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	681a      	ldr	r2, [r3, #0]
 8107596:	4b74      	ldr	r3, [pc, #464]	; (8107768 <HAL_SAI_Init+0x540>)
 8107598:	400b      	ands	r3, r1
 810759a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	6819      	ldr	r1, [r3, #0]
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	685a      	ldr	r2, [r3, #4]
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075aa:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81075b0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81075b6:	431a      	orrs	r2, r3
 81075b8:	6a3b      	ldr	r3, [r7, #32]
 81075ba:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81075bc:	69fb      	ldr	r3, [r7, #28]
 81075be:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81075c0:	687b      	ldr	r3, [r7, #4]
 81075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81075c4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	695b      	ldr	r3, [r3, #20]
 81075ca:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81075d0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81075d2:	687b      	ldr	r3, [r7, #4]
 81075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81075d6:	051b      	lsls	r3, r3, #20
 81075d8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81075de:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81075e0:	687b      	ldr	r3, [r7, #4]
 81075e2:	691b      	ldr	r3, [r3, #16]
 81075e4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81075e6:	687b      	ldr	r3, [r7, #4]
 81075e8:	681b      	ldr	r3, [r3, #0]
 81075ea:	430a      	orrs	r2, r1
 81075ec:	601a      	str	r2, [r3, #0]
 81075ee:	e02d      	b.n	810764c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	681b      	ldr	r3, [r3, #0]
 81075f4:	6819      	ldr	r1, [r3, #0]
 81075f6:	687b      	ldr	r3, [r7, #4]
 81075f8:	681a      	ldr	r2, [r3, #0]
 81075fa:	4b5c      	ldr	r3, [pc, #368]	; (810776c <HAL_SAI_Init+0x544>)
 81075fc:	400b      	ands	r3, r1
 81075fe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	681b      	ldr	r3, [r3, #0]
 8107604:	6819      	ldr	r1, [r3, #0]
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	685a      	ldr	r2, [r3, #4]
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810760e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107614:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810761a:	431a      	orrs	r2, r3
 810761c:	6a3b      	ldr	r3, [r7, #32]
 810761e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8107620:	69fb      	ldr	r3, [r7, #28]
 8107622:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8107628:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810762a:	687b      	ldr	r3, [r7, #4]
 810762c:	695b      	ldr	r3, [r3, #20]
 810762e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107630:	687b      	ldr	r3, [r7, #4]
 8107632:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8107634:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810763a:	051b      	lsls	r3, r3, #20
 810763c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8107642:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8107644:	687b      	ldr	r3, [r7, #4]
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	430a      	orrs	r2, r1
 810764a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	681b      	ldr	r3, [r3, #0]
 8107650:	685b      	ldr	r3, [r3, #4]
 8107652:	687a      	ldr	r2, [r7, #4]
 8107654:	6812      	ldr	r2, [r2, #0]
 8107656:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 810765a:	f023 030f 	bic.w	r3, r3, #15
 810765e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	6859      	ldr	r1, [r3, #4]
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	69da      	ldr	r2, [r3, #28]
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810766e:	431a      	orrs	r2, r3
 8107670:	687b      	ldr	r3, [r7, #4]
 8107672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107674:	431a      	orrs	r2, r3
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	681b      	ldr	r3, [r3, #0]
 810767a:	430a      	orrs	r2, r1
 810767c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	6899      	ldr	r1, [r3, #8]
 8107684:	687b      	ldr	r3, [r7, #4]
 8107686:	681a      	ldr	r2, [r3, #0]
 8107688:	4b39      	ldr	r3, [pc, #228]	; (8107770 <HAL_SAI_Init+0x548>)
 810768a:	400b      	ands	r3, r1
 810768c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	6899      	ldr	r1, [r3, #8]
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107698:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810769e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81076a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81076aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81076b0:	3b01      	subs	r3, #1
 81076b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81076b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	430a      	orrs	r2, r1
 81076bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	68d9      	ldr	r1, [r3, #12]
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	681a      	ldr	r2, [r3, #0]
 81076c8:	f24f 0320 	movw	r3, #61472	; 0xf020
 81076cc:	400b      	ands	r3, r1
 81076ce:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	681b      	ldr	r3, [r3, #0]
 81076d4:	68d9      	ldr	r1, [r3, #12]
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81076de:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81076e0:	687b      	ldr	r3, [r7, #4]
 81076e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81076e4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81076e6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 81076e8:	687b      	ldr	r3, [r7, #4]
 81076ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81076ec:	3b01      	subs	r3, #1
 81076ee:	021b      	lsls	r3, r3, #8
 81076f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	430a      	orrs	r2, r1
 81076f8:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	681b      	ldr	r3, [r3, #0]
 81076fe:	4a1d      	ldr	r2, [pc, #116]	; (8107774 <HAL_SAI_Init+0x54c>)
 8107700:	4293      	cmp	r3, r2
 8107702:	d004      	beq.n	810770e <HAL_SAI_Init+0x4e6>
 8107704:	687b      	ldr	r3, [r7, #4]
 8107706:	681b      	ldr	r3, [r3, #0]
 8107708:	4a1b      	ldr	r2, [pc, #108]	; (8107778 <HAL_SAI_Init+0x550>)
 810770a:	4293      	cmp	r3, r2
 810770c:	d119      	bne.n	8107742 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810770e:	69bb      	ldr	r3, [r7, #24]
 8107710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107712:	f023 0201 	bic.w	r2, r3, #1
 8107716:	69bb      	ldr	r3, [r7, #24]
 8107718:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8107720:	2b01      	cmp	r3, #1
 8107722:	d10e      	bne.n	8107742 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8107728:	687b      	ldr	r3, [r7, #4]
 810772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810772c:	3b01      	subs	r3, #1
 810772e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8107730:	431a      	orrs	r2, r3
 8107732:	69bb      	ldr	r3, [r7, #24]
 8107734:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8107736:	69bb      	ldr	r3, [r7, #24]
 8107738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810773a:	f043 0201 	orr.w	r2, r3, #1
 810773e:	69bb      	ldr	r3, [r7, #24]
 8107740:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8107742:	687b      	ldr	r3, [r7, #4]
 8107744:	2200      	movs	r2, #0
 8107746:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810774a:	687b      	ldr	r3, [r7, #4]
 810774c:	2201      	movs	r2, #1
 810774e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	2200      	movs	r2, #0
 8107756:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 810775a:	2300      	movs	r3, #0
}
 810775c:	4618      	mov	r0, r3
 810775e:	3728      	adds	r7, #40	; 0x28
 8107760:	46bd      	mov	sp, r7
 8107762:	bd80      	pop	{r7, pc}
 8107764:	cccccccd 	.word	0xcccccccd
 8107768:	f005c010 	.word	0xf005c010
 810776c:	f805c010 	.word	0xf805c010
 8107770:	fff88000 	.word	0xfff88000
 8107774:	40015804 	.word	0x40015804
 8107778:	58005404 	.word	0x58005404

0810777c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810777c:	b480      	push	{r7}
 810777e:	b085      	sub	sp, #20
 8107780:	af00      	add	r7, sp, #0
 8107782:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8107784:	4b18      	ldr	r3, [pc, #96]	; (81077e8 <SAI_Disable+0x6c>)
 8107786:	681b      	ldr	r3, [r3, #0]
 8107788:	4a18      	ldr	r2, [pc, #96]	; (81077ec <SAI_Disable+0x70>)
 810778a:	fba2 2303 	umull	r2, r3, r2, r3
 810778e:	0b1b      	lsrs	r3, r3, #12
 8107790:	009b      	lsls	r3, r3, #2
 8107792:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8107794:	2300      	movs	r3, #0
 8107796:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	681b      	ldr	r3, [r3, #0]
 810779c:	681a      	ldr	r2, [r3, #0]
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81077a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81077a8:	68fb      	ldr	r3, [r7, #12]
 81077aa:	2b00      	cmp	r3, #0
 81077ac:	d10a      	bne.n	81077c4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81077b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81077b8:	687b      	ldr	r3, [r7, #4]
 81077ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81077be:	2303      	movs	r3, #3
 81077c0:	72fb      	strb	r3, [r7, #11]
      break;
 81077c2:	e009      	b.n	81077d8 <SAI_Disable+0x5c>
    }
    count--;
 81077c4:	68fb      	ldr	r3, [r7, #12]
 81077c6:	3b01      	subs	r3, #1
 81077c8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	681b      	ldr	r3, [r3, #0]
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81077d4:	2b00      	cmp	r3, #0
 81077d6:	d1e7      	bne.n	81077a8 <SAI_Disable+0x2c>

  return status;
 81077d8:	7afb      	ldrb	r3, [r7, #11]
}
 81077da:	4618      	mov	r0, r3
 81077dc:	3714      	adds	r7, #20
 81077de:	46bd      	mov	sp, r7
 81077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077e4:	4770      	bx	lr
 81077e6:	bf00      	nop
 81077e8:	10000000 	.word	0x10000000
 81077ec:	95cbec1b 	.word	0x95cbec1b

081077f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 81077f0:	b580      	push	{r7, lr}
 81077f2:	b082      	sub	sp, #8
 81077f4:	af00      	add	r7, sp, #0
 81077f6:	6078      	str	r0, [r7, #4]
 81077f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	2b00      	cmp	r3, #0
 81077fe:	d101      	bne.n	8107804 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8107800:	2301      	movs	r3, #1
 8107802:	e02b      	b.n	810785c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810780a:	b2db      	uxtb	r3, r3
 810780c:	2b00      	cmp	r3, #0
 810780e:	d106      	bne.n	810781e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	2200      	movs	r2, #0
 8107814:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8107818:	6878      	ldr	r0, [r7, #4]
 810781a:	f7fa f80d 	bl	8101838 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	2202      	movs	r2, #2
 8107822:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	681a      	ldr	r2, [r3, #0]
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	3304      	adds	r3, #4
 810782e:	4619      	mov	r1, r3
 8107830:	4610      	mov	r0, r2
 8107832:	f001 f8ed 	bl	8108a10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	6818      	ldr	r0, [r3, #0]
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	685b      	ldr	r3, [r3, #4]
 810783e:	461a      	mov	r2, r3
 8107840:	6839      	ldr	r1, [r7, #0]
 8107842:	f001 f942 	bl	8108aca <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8107846:	4b07      	ldr	r3, [pc, #28]	; (8107864 <HAL_SDRAM_Init+0x74>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	4a06      	ldr	r2, [pc, #24]	; (8107864 <HAL_SDRAM_Init+0x74>)
 810784c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8107850:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8107852:	687b      	ldr	r3, [r7, #4]
 8107854:	2201      	movs	r2, #1
 8107856:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810785a:	2300      	movs	r3, #0
}
 810785c:	4618      	mov	r0, r3
 810785e:	3708      	adds	r7, #8
 8107860:	46bd      	mov	sp, r7
 8107862:	bd80      	pop	{r7, pc}
 8107864:	52004000 	.word	0x52004000

08107868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107868:	b580      	push	{r7, lr}
 810786a:	b082      	sub	sp, #8
 810786c:	af00      	add	r7, sp, #0
 810786e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107870:	687b      	ldr	r3, [r7, #4]
 8107872:	2b00      	cmp	r3, #0
 8107874:	d101      	bne.n	810787a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107876:	2301      	movs	r3, #1
 8107878:	e042      	b.n	8107900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810787a:	687b      	ldr	r3, [r7, #4]
 810787c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107880:	2b00      	cmp	r3, #0
 8107882:	d106      	bne.n	8107892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107884:	687b      	ldr	r3, [r7, #4]
 8107886:	2200      	movs	r2, #0
 8107888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810788c:	6878      	ldr	r0, [r7, #4]
 810788e:	f7f9 fe31 	bl	81014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	2224      	movs	r2, #36	; 0x24
 8107896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	681b      	ldr	r3, [r3, #0]
 810789e:	681a      	ldr	r2, [r3, #0]
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	681b      	ldr	r3, [r3, #0]
 81078a4:	f022 0201 	bic.w	r2, r2, #1
 81078a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81078aa:	6878      	ldr	r0, [r7, #4]
 81078ac:	f000 f82c 	bl	8107908 <UART_SetConfig>
 81078b0:	4603      	mov	r3, r0
 81078b2:	2b01      	cmp	r3, #1
 81078b4:	d101      	bne.n	81078ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81078b6:	2301      	movs	r3, #1
 81078b8:	e022      	b.n	8107900 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81078be:	2b00      	cmp	r3, #0
 81078c0:	d002      	beq.n	81078c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81078c2:	6878      	ldr	r0, [r7, #4]
 81078c4:	f000 fd88 	bl	81083d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	681b      	ldr	r3, [r3, #0]
 81078cc:	685a      	ldr	r2, [r3, #4]
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81078d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	681b      	ldr	r3, [r3, #0]
 81078dc:	689a      	ldr	r2, [r3, #8]
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81078e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	681b      	ldr	r3, [r3, #0]
 81078ec:	681a      	ldr	r2, [r3, #0]
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	681b      	ldr	r3, [r3, #0]
 81078f2:	f042 0201 	orr.w	r2, r2, #1
 81078f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81078f8:	6878      	ldr	r0, [r7, #4]
 81078fa:	f000 fe0f 	bl	810851c <UART_CheckIdleState>
 81078fe:	4603      	mov	r3, r0
}
 8107900:	4618      	mov	r0, r3
 8107902:	3708      	adds	r7, #8
 8107904:	46bd      	mov	sp, r7
 8107906:	bd80      	pop	{r7, pc}

08107908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810790c:	b092      	sub	sp, #72	; 0x48
 810790e:	af00      	add	r7, sp, #0
 8107910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107912:	2300      	movs	r3, #0
 8107914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107918:	697b      	ldr	r3, [r7, #20]
 810791a:	689a      	ldr	r2, [r3, #8]
 810791c:	697b      	ldr	r3, [r7, #20]
 810791e:	691b      	ldr	r3, [r3, #16]
 8107920:	431a      	orrs	r2, r3
 8107922:	697b      	ldr	r3, [r7, #20]
 8107924:	695b      	ldr	r3, [r3, #20]
 8107926:	431a      	orrs	r2, r3
 8107928:	697b      	ldr	r3, [r7, #20]
 810792a:	69db      	ldr	r3, [r3, #28]
 810792c:	4313      	orrs	r3, r2
 810792e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107930:	697b      	ldr	r3, [r7, #20]
 8107932:	681b      	ldr	r3, [r3, #0]
 8107934:	681a      	ldr	r2, [r3, #0]
 8107936:	4bbd      	ldr	r3, [pc, #756]	; (8107c2c <UART_SetConfig+0x324>)
 8107938:	4013      	ands	r3, r2
 810793a:	697a      	ldr	r2, [r7, #20]
 810793c:	6812      	ldr	r2, [r2, #0]
 810793e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107940:	430b      	orrs	r3, r1
 8107942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107944:	697b      	ldr	r3, [r7, #20]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	685b      	ldr	r3, [r3, #4]
 810794a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810794e:	697b      	ldr	r3, [r7, #20]
 8107950:	68da      	ldr	r2, [r3, #12]
 8107952:	697b      	ldr	r3, [r7, #20]
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	430a      	orrs	r2, r1
 8107958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810795a:	697b      	ldr	r3, [r7, #20]
 810795c:	699b      	ldr	r3, [r3, #24]
 810795e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107960:	697b      	ldr	r3, [r7, #20]
 8107962:	681b      	ldr	r3, [r3, #0]
 8107964:	4ab2      	ldr	r2, [pc, #712]	; (8107c30 <UART_SetConfig+0x328>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d004      	beq.n	8107974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810796a:	697b      	ldr	r3, [r7, #20]
 810796c:	6a1b      	ldr	r3, [r3, #32]
 810796e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107970:	4313      	orrs	r3, r2
 8107972:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107974:	697b      	ldr	r3, [r7, #20]
 8107976:	681b      	ldr	r3, [r3, #0]
 8107978:	689b      	ldr	r3, [r3, #8]
 810797a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810797e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107982:	697a      	ldr	r2, [r7, #20]
 8107984:	6812      	ldr	r2, [r2, #0]
 8107986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107988:	430b      	orrs	r3, r1
 810798a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810798c:	697b      	ldr	r3, [r7, #20]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107992:	f023 010f 	bic.w	r1, r3, #15
 8107996:	697b      	ldr	r3, [r7, #20]
 8107998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810799a:	697b      	ldr	r3, [r7, #20]
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	430a      	orrs	r2, r1
 81079a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81079a2:	697b      	ldr	r3, [r7, #20]
 81079a4:	681b      	ldr	r3, [r3, #0]
 81079a6:	4aa3      	ldr	r2, [pc, #652]	; (8107c34 <UART_SetConfig+0x32c>)
 81079a8:	4293      	cmp	r3, r2
 81079aa:	d177      	bne.n	8107a9c <UART_SetConfig+0x194>
 81079ac:	4ba2      	ldr	r3, [pc, #648]	; (8107c38 <UART_SetConfig+0x330>)
 81079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81079b4:	2b28      	cmp	r3, #40	; 0x28
 81079b6:	d86d      	bhi.n	8107a94 <UART_SetConfig+0x18c>
 81079b8:	a201      	add	r2, pc, #4	; (adr r2, 81079c0 <UART_SetConfig+0xb8>)
 81079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079be:	bf00      	nop
 81079c0:	08107a65 	.word	0x08107a65
 81079c4:	08107a95 	.word	0x08107a95
 81079c8:	08107a95 	.word	0x08107a95
 81079cc:	08107a95 	.word	0x08107a95
 81079d0:	08107a95 	.word	0x08107a95
 81079d4:	08107a95 	.word	0x08107a95
 81079d8:	08107a95 	.word	0x08107a95
 81079dc:	08107a95 	.word	0x08107a95
 81079e0:	08107a6d 	.word	0x08107a6d
 81079e4:	08107a95 	.word	0x08107a95
 81079e8:	08107a95 	.word	0x08107a95
 81079ec:	08107a95 	.word	0x08107a95
 81079f0:	08107a95 	.word	0x08107a95
 81079f4:	08107a95 	.word	0x08107a95
 81079f8:	08107a95 	.word	0x08107a95
 81079fc:	08107a95 	.word	0x08107a95
 8107a00:	08107a75 	.word	0x08107a75
 8107a04:	08107a95 	.word	0x08107a95
 8107a08:	08107a95 	.word	0x08107a95
 8107a0c:	08107a95 	.word	0x08107a95
 8107a10:	08107a95 	.word	0x08107a95
 8107a14:	08107a95 	.word	0x08107a95
 8107a18:	08107a95 	.word	0x08107a95
 8107a1c:	08107a95 	.word	0x08107a95
 8107a20:	08107a7d 	.word	0x08107a7d
 8107a24:	08107a95 	.word	0x08107a95
 8107a28:	08107a95 	.word	0x08107a95
 8107a2c:	08107a95 	.word	0x08107a95
 8107a30:	08107a95 	.word	0x08107a95
 8107a34:	08107a95 	.word	0x08107a95
 8107a38:	08107a95 	.word	0x08107a95
 8107a3c:	08107a95 	.word	0x08107a95
 8107a40:	08107a85 	.word	0x08107a85
 8107a44:	08107a95 	.word	0x08107a95
 8107a48:	08107a95 	.word	0x08107a95
 8107a4c:	08107a95 	.word	0x08107a95
 8107a50:	08107a95 	.word	0x08107a95
 8107a54:	08107a95 	.word	0x08107a95
 8107a58:	08107a95 	.word	0x08107a95
 8107a5c:	08107a95 	.word	0x08107a95
 8107a60:	08107a8d 	.word	0x08107a8d
 8107a64:	2301      	movs	r3, #1
 8107a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a6a:	e220      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a6c:	2304      	movs	r3, #4
 8107a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a72:	e21c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a74:	2308      	movs	r3, #8
 8107a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a7a:	e218      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a7c:	2310      	movs	r3, #16
 8107a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a82:	e214      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a84:	2320      	movs	r3, #32
 8107a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a8a:	e210      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a8c:	2340      	movs	r3, #64	; 0x40
 8107a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a92:	e20c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a94:	2380      	movs	r3, #128	; 0x80
 8107a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107a9a:	e208      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107a9c:	697b      	ldr	r3, [r7, #20]
 8107a9e:	681b      	ldr	r3, [r3, #0]
 8107aa0:	4a66      	ldr	r2, [pc, #408]	; (8107c3c <UART_SetConfig+0x334>)
 8107aa2:	4293      	cmp	r3, r2
 8107aa4:	d130      	bne.n	8107b08 <UART_SetConfig+0x200>
 8107aa6:	4b64      	ldr	r3, [pc, #400]	; (8107c38 <UART_SetConfig+0x330>)
 8107aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107aaa:	f003 0307 	and.w	r3, r3, #7
 8107aae:	2b05      	cmp	r3, #5
 8107ab0:	d826      	bhi.n	8107b00 <UART_SetConfig+0x1f8>
 8107ab2:	a201      	add	r2, pc, #4	; (adr r2, 8107ab8 <UART_SetConfig+0x1b0>)
 8107ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ab8:	08107ad1 	.word	0x08107ad1
 8107abc:	08107ad9 	.word	0x08107ad9
 8107ac0:	08107ae1 	.word	0x08107ae1
 8107ac4:	08107ae9 	.word	0x08107ae9
 8107ac8:	08107af1 	.word	0x08107af1
 8107acc:	08107af9 	.word	0x08107af9
 8107ad0:	2300      	movs	r3, #0
 8107ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ad6:	e1ea      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107ad8:	2304      	movs	r3, #4
 8107ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ade:	e1e6      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107ae0:	2308      	movs	r3, #8
 8107ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ae6:	e1e2      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107ae8:	2310      	movs	r3, #16
 8107aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107aee:	e1de      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107af0:	2320      	movs	r3, #32
 8107af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107af6:	e1da      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107af8:	2340      	movs	r3, #64	; 0x40
 8107afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107afe:	e1d6      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b00:	2380      	movs	r3, #128	; 0x80
 8107b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b06:	e1d2      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b08:	697b      	ldr	r3, [r7, #20]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	4a4c      	ldr	r2, [pc, #304]	; (8107c40 <UART_SetConfig+0x338>)
 8107b0e:	4293      	cmp	r3, r2
 8107b10:	d130      	bne.n	8107b74 <UART_SetConfig+0x26c>
 8107b12:	4b49      	ldr	r3, [pc, #292]	; (8107c38 <UART_SetConfig+0x330>)
 8107b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b16:	f003 0307 	and.w	r3, r3, #7
 8107b1a:	2b05      	cmp	r3, #5
 8107b1c:	d826      	bhi.n	8107b6c <UART_SetConfig+0x264>
 8107b1e:	a201      	add	r2, pc, #4	; (adr r2, 8107b24 <UART_SetConfig+0x21c>)
 8107b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b24:	08107b3d 	.word	0x08107b3d
 8107b28:	08107b45 	.word	0x08107b45
 8107b2c:	08107b4d 	.word	0x08107b4d
 8107b30:	08107b55 	.word	0x08107b55
 8107b34:	08107b5d 	.word	0x08107b5d
 8107b38:	08107b65 	.word	0x08107b65
 8107b3c:	2300      	movs	r3, #0
 8107b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b42:	e1b4      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b44:	2304      	movs	r3, #4
 8107b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b4a:	e1b0      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b4c:	2308      	movs	r3, #8
 8107b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b52:	e1ac      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b54:	2310      	movs	r3, #16
 8107b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b5a:	e1a8      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b5c:	2320      	movs	r3, #32
 8107b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b62:	e1a4      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b64:	2340      	movs	r3, #64	; 0x40
 8107b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b6a:	e1a0      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b6c:	2380      	movs	r3, #128	; 0x80
 8107b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107b72:	e19c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107b74:	697b      	ldr	r3, [r7, #20]
 8107b76:	681b      	ldr	r3, [r3, #0]
 8107b78:	4a32      	ldr	r2, [pc, #200]	; (8107c44 <UART_SetConfig+0x33c>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d130      	bne.n	8107be0 <UART_SetConfig+0x2d8>
 8107b7e:	4b2e      	ldr	r3, [pc, #184]	; (8107c38 <UART_SetConfig+0x330>)
 8107b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107b82:	f003 0307 	and.w	r3, r3, #7
 8107b86:	2b05      	cmp	r3, #5
 8107b88:	d826      	bhi.n	8107bd8 <UART_SetConfig+0x2d0>
 8107b8a:	a201      	add	r2, pc, #4	; (adr r2, 8107b90 <UART_SetConfig+0x288>)
 8107b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b90:	08107ba9 	.word	0x08107ba9
 8107b94:	08107bb1 	.word	0x08107bb1
 8107b98:	08107bb9 	.word	0x08107bb9
 8107b9c:	08107bc1 	.word	0x08107bc1
 8107ba0:	08107bc9 	.word	0x08107bc9
 8107ba4:	08107bd1 	.word	0x08107bd1
 8107ba8:	2300      	movs	r3, #0
 8107baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bae:	e17e      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bb0:	2304      	movs	r3, #4
 8107bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bb6:	e17a      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bb8:	2308      	movs	r3, #8
 8107bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bbe:	e176      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bc0:	2310      	movs	r3, #16
 8107bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bc6:	e172      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bc8:	2320      	movs	r3, #32
 8107bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bce:	e16e      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bd0:	2340      	movs	r3, #64	; 0x40
 8107bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bd6:	e16a      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107bd8:	2380      	movs	r3, #128	; 0x80
 8107bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107bde:	e166      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107be0:	697b      	ldr	r3, [r7, #20]
 8107be2:	681b      	ldr	r3, [r3, #0]
 8107be4:	4a18      	ldr	r2, [pc, #96]	; (8107c48 <UART_SetConfig+0x340>)
 8107be6:	4293      	cmp	r3, r2
 8107be8:	d140      	bne.n	8107c6c <UART_SetConfig+0x364>
 8107bea:	4b13      	ldr	r3, [pc, #76]	; (8107c38 <UART_SetConfig+0x330>)
 8107bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107bee:	f003 0307 	and.w	r3, r3, #7
 8107bf2:	2b05      	cmp	r3, #5
 8107bf4:	d836      	bhi.n	8107c64 <UART_SetConfig+0x35c>
 8107bf6:	a201      	add	r2, pc, #4	; (adr r2, 8107bfc <UART_SetConfig+0x2f4>)
 8107bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107bfc:	08107c15 	.word	0x08107c15
 8107c00:	08107c1d 	.word	0x08107c1d
 8107c04:	08107c25 	.word	0x08107c25
 8107c08:	08107c4d 	.word	0x08107c4d
 8107c0c:	08107c55 	.word	0x08107c55
 8107c10:	08107c5d 	.word	0x08107c5d
 8107c14:	2300      	movs	r3, #0
 8107c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c1a:	e148      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c1c:	2304      	movs	r3, #4
 8107c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c22:	e144      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c24:	2308      	movs	r3, #8
 8107c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c2a:	e140      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c2c:	cfff69f3 	.word	0xcfff69f3
 8107c30:	58000c00 	.word	0x58000c00
 8107c34:	40011000 	.word	0x40011000
 8107c38:	58024400 	.word	0x58024400
 8107c3c:	40004400 	.word	0x40004400
 8107c40:	40004800 	.word	0x40004800
 8107c44:	40004c00 	.word	0x40004c00
 8107c48:	40005000 	.word	0x40005000
 8107c4c:	2310      	movs	r3, #16
 8107c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c52:	e12c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c54:	2320      	movs	r3, #32
 8107c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c5a:	e128      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c5c:	2340      	movs	r3, #64	; 0x40
 8107c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c62:	e124      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c64:	2380      	movs	r3, #128	; 0x80
 8107c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107c6a:	e120      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107c6c:	697b      	ldr	r3, [r7, #20]
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	4acb      	ldr	r2, [pc, #812]	; (8107fa0 <UART_SetConfig+0x698>)
 8107c72:	4293      	cmp	r3, r2
 8107c74:	d176      	bne.n	8107d64 <UART_SetConfig+0x45c>
 8107c76:	4bcb      	ldr	r3, [pc, #812]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107c7e:	2b28      	cmp	r3, #40	; 0x28
 8107c80:	d86c      	bhi.n	8107d5c <UART_SetConfig+0x454>
 8107c82:	a201      	add	r2, pc, #4	; (adr r2, 8107c88 <UART_SetConfig+0x380>)
 8107c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c88:	08107d2d 	.word	0x08107d2d
 8107c8c:	08107d5d 	.word	0x08107d5d
 8107c90:	08107d5d 	.word	0x08107d5d
 8107c94:	08107d5d 	.word	0x08107d5d
 8107c98:	08107d5d 	.word	0x08107d5d
 8107c9c:	08107d5d 	.word	0x08107d5d
 8107ca0:	08107d5d 	.word	0x08107d5d
 8107ca4:	08107d5d 	.word	0x08107d5d
 8107ca8:	08107d35 	.word	0x08107d35
 8107cac:	08107d5d 	.word	0x08107d5d
 8107cb0:	08107d5d 	.word	0x08107d5d
 8107cb4:	08107d5d 	.word	0x08107d5d
 8107cb8:	08107d5d 	.word	0x08107d5d
 8107cbc:	08107d5d 	.word	0x08107d5d
 8107cc0:	08107d5d 	.word	0x08107d5d
 8107cc4:	08107d5d 	.word	0x08107d5d
 8107cc8:	08107d3d 	.word	0x08107d3d
 8107ccc:	08107d5d 	.word	0x08107d5d
 8107cd0:	08107d5d 	.word	0x08107d5d
 8107cd4:	08107d5d 	.word	0x08107d5d
 8107cd8:	08107d5d 	.word	0x08107d5d
 8107cdc:	08107d5d 	.word	0x08107d5d
 8107ce0:	08107d5d 	.word	0x08107d5d
 8107ce4:	08107d5d 	.word	0x08107d5d
 8107ce8:	08107d45 	.word	0x08107d45
 8107cec:	08107d5d 	.word	0x08107d5d
 8107cf0:	08107d5d 	.word	0x08107d5d
 8107cf4:	08107d5d 	.word	0x08107d5d
 8107cf8:	08107d5d 	.word	0x08107d5d
 8107cfc:	08107d5d 	.word	0x08107d5d
 8107d00:	08107d5d 	.word	0x08107d5d
 8107d04:	08107d5d 	.word	0x08107d5d
 8107d08:	08107d4d 	.word	0x08107d4d
 8107d0c:	08107d5d 	.word	0x08107d5d
 8107d10:	08107d5d 	.word	0x08107d5d
 8107d14:	08107d5d 	.word	0x08107d5d
 8107d18:	08107d5d 	.word	0x08107d5d
 8107d1c:	08107d5d 	.word	0x08107d5d
 8107d20:	08107d5d 	.word	0x08107d5d
 8107d24:	08107d5d 	.word	0x08107d5d
 8107d28:	08107d55 	.word	0x08107d55
 8107d2c:	2301      	movs	r3, #1
 8107d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d32:	e0bc      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d34:	2304      	movs	r3, #4
 8107d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d3a:	e0b8      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d3c:	2308      	movs	r3, #8
 8107d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d42:	e0b4      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d44:	2310      	movs	r3, #16
 8107d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d4a:	e0b0      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d4c:	2320      	movs	r3, #32
 8107d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d52:	e0ac      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d54:	2340      	movs	r3, #64	; 0x40
 8107d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d5a:	e0a8      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d5c:	2380      	movs	r3, #128	; 0x80
 8107d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d62:	e0a4      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107d64:	697b      	ldr	r3, [r7, #20]
 8107d66:	681b      	ldr	r3, [r3, #0]
 8107d68:	4a8f      	ldr	r2, [pc, #572]	; (8107fa8 <UART_SetConfig+0x6a0>)
 8107d6a:	4293      	cmp	r3, r2
 8107d6c:	d130      	bne.n	8107dd0 <UART_SetConfig+0x4c8>
 8107d6e:	4b8d      	ldr	r3, [pc, #564]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d72:	f003 0307 	and.w	r3, r3, #7
 8107d76:	2b05      	cmp	r3, #5
 8107d78:	d826      	bhi.n	8107dc8 <UART_SetConfig+0x4c0>
 8107d7a:	a201      	add	r2, pc, #4	; (adr r2, 8107d80 <UART_SetConfig+0x478>)
 8107d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107d80:	08107d99 	.word	0x08107d99
 8107d84:	08107da1 	.word	0x08107da1
 8107d88:	08107da9 	.word	0x08107da9
 8107d8c:	08107db1 	.word	0x08107db1
 8107d90:	08107db9 	.word	0x08107db9
 8107d94:	08107dc1 	.word	0x08107dc1
 8107d98:	2300      	movs	r3, #0
 8107d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107d9e:	e086      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107da0:	2304      	movs	r3, #4
 8107da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107da6:	e082      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107da8:	2308      	movs	r3, #8
 8107daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107dae:	e07e      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107db0:	2310      	movs	r3, #16
 8107db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107db6:	e07a      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107db8:	2320      	movs	r3, #32
 8107dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107dbe:	e076      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107dc0:	2340      	movs	r3, #64	; 0x40
 8107dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107dc6:	e072      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107dc8:	2380      	movs	r3, #128	; 0x80
 8107dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107dce:	e06e      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107dd0:	697b      	ldr	r3, [r7, #20]
 8107dd2:	681b      	ldr	r3, [r3, #0]
 8107dd4:	4a75      	ldr	r2, [pc, #468]	; (8107fac <UART_SetConfig+0x6a4>)
 8107dd6:	4293      	cmp	r3, r2
 8107dd8:	d130      	bne.n	8107e3c <UART_SetConfig+0x534>
 8107dda:	4b72      	ldr	r3, [pc, #456]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107dde:	f003 0307 	and.w	r3, r3, #7
 8107de2:	2b05      	cmp	r3, #5
 8107de4:	d826      	bhi.n	8107e34 <UART_SetConfig+0x52c>
 8107de6:	a201      	add	r2, pc, #4	; (adr r2, 8107dec <UART_SetConfig+0x4e4>)
 8107de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107dec:	08107e05 	.word	0x08107e05
 8107df0:	08107e0d 	.word	0x08107e0d
 8107df4:	08107e15 	.word	0x08107e15
 8107df8:	08107e1d 	.word	0x08107e1d
 8107dfc:	08107e25 	.word	0x08107e25
 8107e00:	08107e2d 	.word	0x08107e2d
 8107e04:	2300      	movs	r3, #0
 8107e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e0a:	e050      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e0c:	2304      	movs	r3, #4
 8107e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e12:	e04c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e14:	2308      	movs	r3, #8
 8107e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e1a:	e048      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e1c:	2310      	movs	r3, #16
 8107e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e22:	e044      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e24:	2320      	movs	r3, #32
 8107e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e2a:	e040      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e2c:	2340      	movs	r3, #64	; 0x40
 8107e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e32:	e03c      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e34:	2380      	movs	r3, #128	; 0x80
 8107e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e3a:	e038      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e3c:	697b      	ldr	r3, [r7, #20]
 8107e3e:	681b      	ldr	r3, [r3, #0]
 8107e40:	4a5b      	ldr	r2, [pc, #364]	; (8107fb0 <UART_SetConfig+0x6a8>)
 8107e42:	4293      	cmp	r3, r2
 8107e44:	d130      	bne.n	8107ea8 <UART_SetConfig+0x5a0>
 8107e46:	4b57      	ldr	r3, [pc, #348]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107e4a:	f003 0307 	and.w	r3, r3, #7
 8107e4e:	2b05      	cmp	r3, #5
 8107e50:	d826      	bhi.n	8107ea0 <UART_SetConfig+0x598>
 8107e52:	a201      	add	r2, pc, #4	; (adr r2, 8107e58 <UART_SetConfig+0x550>)
 8107e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107e58:	08107e71 	.word	0x08107e71
 8107e5c:	08107e79 	.word	0x08107e79
 8107e60:	08107e81 	.word	0x08107e81
 8107e64:	08107e89 	.word	0x08107e89
 8107e68:	08107e91 	.word	0x08107e91
 8107e6c:	08107e99 	.word	0x08107e99
 8107e70:	2302      	movs	r3, #2
 8107e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e76:	e01a      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e78:	2304      	movs	r3, #4
 8107e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e7e:	e016      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e80:	2308      	movs	r3, #8
 8107e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e86:	e012      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e88:	2310      	movs	r3, #16
 8107e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e8e:	e00e      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e90:	2320      	movs	r3, #32
 8107e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e96:	e00a      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107e98:	2340      	movs	r3, #64	; 0x40
 8107e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107e9e:	e006      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107ea0:	2380      	movs	r3, #128	; 0x80
 8107ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107ea6:	e002      	b.n	8107eae <UART_SetConfig+0x5a6>
 8107ea8:	2380      	movs	r3, #128	; 0x80
 8107eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107eae:	697b      	ldr	r3, [r7, #20]
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	4a3f      	ldr	r2, [pc, #252]	; (8107fb0 <UART_SetConfig+0x6a8>)
 8107eb4:	4293      	cmp	r3, r2
 8107eb6:	f040 80f8 	bne.w	81080aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107eba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107ebe:	2b20      	cmp	r3, #32
 8107ec0:	dc46      	bgt.n	8107f50 <UART_SetConfig+0x648>
 8107ec2:	2b02      	cmp	r3, #2
 8107ec4:	f2c0 8082 	blt.w	8107fcc <UART_SetConfig+0x6c4>
 8107ec8:	3b02      	subs	r3, #2
 8107eca:	2b1e      	cmp	r3, #30
 8107ecc:	d87e      	bhi.n	8107fcc <UART_SetConfig+0x6c4>
 8107ece:	a201      	add	r2, pc, #4	; (adr r2, 8107ed4 <UART_SetConfig+0x5cc>)
 8107ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107ed4:	08107f57 	.word	0x08107f57
 8107ed8:	08107fcd 	.word	0x08107fcd
 8107edc:	08107f5f 	.word	0x08107f5f
 8107ee0:	08107fcd 	.word	0x08107fcd
 8107ee4:	08107fcd 	.word	0x08107fcd
 8107ee8:	08107fcd 	.word	0x08107fcd
 8107eec:	08107f6f 	.word	0x08107f6f
 8107ef0:	08107fcd 	.word	0x08107fcd
 8107ef4:	08107fcd 	.word	0x08107fcd
 8107ef8:	08107fcd 	.word	0x08107fcd
 8107efc:	08107fcd 	.word	0x08107fcd
 8107f00:	08107fcd 	.word	0x08107fcd
 8107f04:	08107fcd 	.word	0x08107fcd
 8107f08:	08107fcd 	.word	0x08107fcd
 8107f0c:	08107f7f 	.word	0x08107f7f
 8107f10:	08107fcd 	.word	0x08107fcd
 8107f14:	08107fcd 	.word	0x08107fcd
 8107f18:	08107fcd 	.word	0x08107fcd
 8107f1c:	08107fcd 	.word	0x08107fcd
 8107f20:	08107fcd 	.word	0x08107fcd
 8107f24:	08107fcd 	.word	0x08107fcd
 8107f28:	08107fcd 	.word	0x08107fcd
 8107f2c:	08107fcd 	.word	0x08107fcd
 8107f30:	08107fcd 	.word	0x08107fcd
 8107f34:	08107fcd 	.word	0x08107fcd
 8107f38:	08107fcd 	.word	0x08107fcd
 8107f3c:	08107fcd 	.word	0x08107fcd
 8107f40:	08107fcd 	.word	0x08107fcd
 8107f44:	08107fcd 	.word	0x08107fcd
 8107f48:	08107fcd 	.word	0x08107fcd
 8107f4c:	08107fbf 	.word	0x08107fbf
 8107f50:	2b40      	cmp	r3, #64	; 0x40
 8107f52:	d037      	beq.n	8107fc4 <UART_SetConfig+0x6bc>
 8107f54:	e03a      	b.n	8107fcc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8107f56:	f7fe fbf3 	bl	8106740 <HAL_RCCEx_GetD3PCLK1Freq>
 8107f5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107f5c:	e03c      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107f62:	4618      	mov	r0, r3
 8107f64:	f7fe fc02 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107f6c:	e034      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f6e:	f107 0318 	add.w	r3, r7, #24
 8107f72:	4618      	mov	r0, r3
 8107f74:	f7fe fd4e 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107f78:	69fb      	ldr	r3, [r7, #28]
 8107f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107f7c:	e02c      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f7e:	4b09      	ldr	r3, [pc, #36]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107f80:	681b      	ldr	r3, [r3, #0]
 8107f82:	f003 0320 	and.w	r3, r3, #32
 8107f86:	2b00      	cmp	r3, #0
 8107f88:	d016      	beq.n	8107fb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107f8a:	4b06      	ldr	r3, [pc, #24]	; (8107fa4 <UART_SetConfig+0x69c>)
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	08db      	lsrs	r3, r3, #3
 8107f90:	f003 0303 	and.w	r3, r3, #3
 8107f94:	4a07      	ldr	r2, [pc, #28]	; (8107fb4 <UART_SetConfig+0x6ac>)
 8107f96:	fa22 f303 	lsr.w	r3, r2, r3
 8107f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107f9c:	e01c      	b.n	8107fd8 <UART_SetConfig+0x6d0>
 8107f9e:	bf00      	nop
 8107fa0:	40011400 	.word	0x40011400
 8107fa4:	58024400 	.word	0x58024400
 8107fa8:	40007800 	.word	0x40007800
 8107fac:	40007c00 	.word	0x40007c00
 8107fb0:	58000c00 	.word	0x58000c00
 8107fb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107fb8:	4b9d      	ldr	r3, [pc, #628]	; (8108230 <UART_SetConfig+0x928>)
 8107fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107fbc:	e00c      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107fbe:	4b9d      	ldr	r3, [pc, #628]	; (8108234 <UART_SetConfig+0x92c>)
 8107fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107fc2:	e009      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107fca:	e005      	b.n	8107fd8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107fcc:	2300      	movs	r3, #0
 8107fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107fd0:	2301      	movs	r3, #1
 8107fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107fd6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107fda:	2b00      	cmp	r3, #0
 8107fdc:	f000 81de 	beq.w	810839c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107fe0:	697b      	ldr	r3, [r7, #20]
 8107fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107fe4:	4a94      	ldr	r2, [pc, #592]	; (8108238 <UART_SetConfig+0x930>)
 8107fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107fea:	461a      	mov	r2, r3
 8107fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107fee:	fbb3 f3f2 	udiv	r3, r3, r2
 8107ff2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107ff4:	697b      	ldr	r3, [r7, #20]
 8107ff6:	685a      	ldr	r2, [r3, #4]
 8107ff8:	4613      	mov	r3, r2
 8107ffa:	005b      	lsls	r3, r3, #1
 8107ffc:	4413      	add	r3, r2
 8107ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108000:	429a      	cmp	r2, r3
 8108002:	d305      	bcc.n	8108010 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108004:	697b      	ldr	r3, [r7, #20]
 8108006:	685b      	ldr	r3, [r3, #4]
 8108008:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810800a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810800c:	429a      	cmp	r2, r3
 810800e:	d903      	bls.n	8108018 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108010:	2301      	movs	r3, #1
 8108012:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108016:	e1c1      	b.n	810839c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810801a:	2200      	movs	r2, #0
 810801c:	60bb      	str	r3, [r7, #8]
 810801e:	60fa      	str	r2, [r7, #12]
 8108020:	697b      	ldr	r3, [r7, #20]
 8108022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108024:	4a84      	ldr	r2, [pc, #528]	; (8108238 <UART_SetConfig+0x930>)
 8108026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810802a:	b29b      	uxth	r3, r3
 810802c:	2200      	movs	r2, #0
 810802e:	603b      	str	r3, [r7, #0]
 8108030:	607a      	str	r2, [r7, #4]
 8108032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108036:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810803a:	f7f8 f94d 	bl	81002d8 <__aeabi_uldivmod>
 810803e:	4602      	mov	r2, r0
 8108040:	460b      	mov	r3, r1
 8108042:	4610      	mov	r0, r2
 8108044:	4619      	mov	r1, r3
 8108046:	f04f 0200 	mov.w	r2, #0
 810804a:	f04f 0300 	mov.w	r3, #0
 810804e:	020b      	lsls	r3, r1, #8
 8108050:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108054:	0202      	lsls	r2, r0, #8
 8108056:	6979      	ldr	r1, [r7, #20]
 8108058:	6849      	ldr	r1, [r1, #4]
 810805a:	0849      	lsrs	r1, r1, #1
 810805c:	2000      	movs	r0, #0
 810805e:	460c      	mov	r4, r1
 8108060:	4605      	mov	r5, r0
 8108062:	eb12 0804 	adds.w	r8, r2, r4
 8108066:	eb43 0905 	adc.w	r9, r3, r5
 810806a:	697b      	ldr	r3, [r7, #20]
 810806c:	685b      	ldr	r3, [r3, #4]
 810806e:	2200      	movs	r2, #0
 8108070:	469a      	mov	sl, r3
 8108072:	4693      	mov	fp, r2
 8108074:	4652      	mov	r2, sl
 8108076:	465b      	mov	r3, fp
 8108078:	4640      	mov	r0, r8
 810807a:	4649      	mov	r1, r9
 810807c:	f7f8 f92c 	bl	81002d8 <__aeabi_uldivmod>
 8108080:	4602      	mov	r2, r0
 8108082:	460b      	mov	r3, r1
 8108084:	4613      	mov	r3, r2
 8108086:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810808a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810808e:	d308      	bcc.n	81080a2 <UART_SetConfig+0x79a>
 8108090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108096:	d204      	bcs.n	81080a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108098:	697b      	ldr	r3, [r7, #20]
 810809a:	681b      	ldr	r3, [r3, #0]
 810809c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810809e:	60da      	str	r2, [r3, #12]
 81080a0:	e17c      	b.n	810839c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81080a2:	2301      	movs	r3, #1
 81080a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81080a8:	e178      	b.n	810839c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81080aa:	697b      	ldr	r3, [r7, #20]
 81080ac:	69db      	ldr	r3, [r3, #28]
 81080ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81080b2:	f040 80c5 	bne.w	8108240 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81080b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81080ba:	2b20      	cmp	r3, #32
 81080bc:	dc48      	bgt.n	8108150 <UART_SetConfig+0x848>
 81080be:	2b00      	cmp	r3, #0
 81080c0:	db7b      	blt.n	81081ba <UART_SetConfig+0x8b2>
 81080c2:	2b20      	cmp	r3, #32
 81080c4:	d879      	bhi.n	81081ba <UART_SetConfig+0x8b2>
 81080c6:	a201      	add	r2, pc, #4	; (adr r2, 81080cc <UART_SetConfig+0x7c4>)
 81080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81080cc:	08108157 	.word	0x08108157
 81080d0:	0810815f 	.word	0x0810815f
 81080d4:	081081bb 	.word	0x081081bb
 81080d8:	081081bb 	.word	0x081081bb
 81080dc:	08108167 	.word	0x08108167
 81080e0:	081081bb 	.word	0x081081bb
 81080e4:	081081bb 	.word	0x081081bb
 81080e8:	081081bb 	.word	0x081081bb
 81080ec:	08108177 	.word	0x08108177
 81080f0:	081081bb 	.word	0x081081bb
 81080f4:	081081bb 	.word	0x081081bb
 81080f8:	081081bb 	.word	0x081081bb
 81080fc:	081081bb 	.word	0x081081bb
 8108100:	081081bb 	.word	0x081081bb
 8108104:	081081bb 	.word	0x081081bb
 8108108:	081081bb 	.word	0x081081bb
 810810c:	08108187 	.word	0x08108187
 8108110:	081081bb 	.word	0x081081bb
 8108114:	081081bb 	.word	0x081081bb
 8108118:	081081bb 	.word	0x081081bb
 810811c:	081081bb 	.word	0x081081bb
 8108120:	081081bb 	.word	0x081081bb
 8108124:	081081bb 	.word	0x081081bb
 8108128:	081081bb 	.word	0x081081bb
 810812c:	081081bb 	.word	0x081081bb
 8108130:	081081bb 	.word	0x081081bb
 8108134:	081081bb 	.word	0x081081bb
 8108138:	081081bb 	.word	0x081081bb
 810813c:	081081bb 	.word	0x081081bb
 8108140:	081081bb 	.word	0x081081bb
 8108144:	081081bb 	.word	0x081081bb
 8108148:	081081bb 	.word	0x081081bb
 810814c:	081081ad 	.word	0x081081ad
 8108150:	2b40      	cmp	r3, #64	; 0x40
 8108152:	d02e      	beq.n	81081b2 <UART_SetConfig+0x8aa>
 8108154:	e031      	b.n	81081ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108156:	f7fc fb3d 	bl	81047d4 <HAL_RCC_GetPCLK1Freq>
 810815a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810815c:	e033      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810815e:	f7fc fb4f 	bl	8104800 <HAL_RCC_GetPCLK2Freq>
 8108162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108164:	e02f      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810816a:	4618      	mov	r0, r3
 810816c:	f7fe fafe 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108174:	e027      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108176:	f107 0318 	add.w	r3, r7, #24
 810817a:	4618      	mov	r0, r3
 810817c:	f7fe fc4a 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108180:	69fb      	ldr	r3, [r7, #28]
 8108182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108184:	e01f      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108186:	4b2d      	ldr	r3, [pc, #180]	; (810823c <UART_SetConfig+0x934>)
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	f003 0320 	and.w	r3, r3, #32
 810818e:	2b00      	cmp	r3, #0
 8108190:	d009      	beq.n	81081a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108192:	4b2a      	ldr	r3, [pc, #168]	; (810823c <UART_SetConfig+0x934>)
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	08db      	lsrs	r3, r3, #3
 8108198:	f003 0303 	and.w	r3, r3, #3
 810819c:	4a24      	ldr	r2, [pc, #144]	; (8108230 <UART_SetConfig+0x928>)
 810819e:	fa22 f303 	lsr.w	r3, r2, r3
 81081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81081a4:	e00f      	b.n	81081c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81081a6:	4b22      	ldr	r3, [pc, #136]	; (8108230 <UART_SetConfig+0x928>)
 81081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081aa:	e00c      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81081ac:	4b21      	ldr	r3, [pc, #132]	; (8108234 <UART_SetConfig+0x92c>)
 81081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081b0:	e009      	b.n	81081c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81081b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081b8:	e005      	b.n	81081c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81081ba:	2300      	movs	r3, #0
 81081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81081be:	2301      	movs	r3, #1
 81081c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81081c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81081c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81081c8:	2b00      	cmp	r3, #0
 81081ca:	f000 80e7 	beq.w	810839c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81081ce:	697b      	ldr	r3, [r7, #20]
 81081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81081d2:	4a19      	ldr	r2, [pc, #100]	; (8108238 <UART_SetConfig+0x930>)
 81081d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81081d8:	461a      	mov	r2, r3
 81081da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81081dc:	fbb3 f3f2 	udiv	r3, r3, r2
 81081e0:	005a      	lsls	r2, r3, #1
 81081e2:	697b      	ldr	r3, [r7, #20]
 81081e4:	685b      	ldr	r3, [r3, #4]
 81081e6:	085b      	lsrs	r3, r3, #1
 81081e8:	441a      	add	r2, r3
 81081ea:	697b      	ldr	r3, [r7, #20]
 81081ec:	685b      	ldr	r3, [r3, #4]
 81081ee:	fbb2 f3f3 	udiv	r3, r2, r3
 81081f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81081f6:	2b0f      	cmp	r3, #15
 81081f8:	d916      	bls.n	8108228 <UART_SetConfig+0x920>
 81081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81081fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108200:	d212      	bcs.n	8108228 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108204:	b29b      	uxth	r3, r3
 8108206:	f023 030f 	bic.w	r3, r3, #15
 810820a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810820e:	085b      	lsrs	r3, r3, #1
 8108210:	b29b      	uxth	r3, r3
 8108212:	f003 0307 	and.w	r3, r3, #7
 8108216:	b29a      	uxth	r2, r3
 8108218:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810821a:	4313      	orrs	r3, r2
 810821c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810821e:	697b      	ldr	r3, [r7, #20]
 8108220:	681b      	ldr	r3, [r3, #0]
 8108222:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108224:	60da      	str	r2, [r3, #12]
 8108226:	e0b9      	b.n	810839c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108228:	2301      	movs	r3, #1
 810822a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810822e:	e0b5      	b.n	810839c <UART_SetConfig+0xa94>
 8108230:	03d09000 	.word	0x03d09000
 8108234:	003d0900 	.word	0x003d0900
 8108238:	08109a28 	.word	0x08109a28
 810823c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8108240:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108244:	2b20      	cmp	r3, #32
 8108246:	dc49      	bgt.n	81082dc <UART_SetConfig+0x9d4>
 8108248:	2b00      	cmp	r3, #0
 810824a:	db7c      	blt.n	8108346 <UART_SetConfig+0xa3e>
 810824c:	2b20      	cmp	r3, #32
 810824e:	d87a      	bhi.n	8108346 <UART_SetConfig+0xa3e>
 8108250:	a201      	add	r2, pc, #4	; (adr r2, 8108258 <UART_SetConfig+0x950>)
 8108252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108256:	bf00      	nop
 8108258:	081082e3 	.word	0x081082e3
 810825c:	081082eb 	.word	0x081082eb
 8108260:	08108347 	.word	0x08108347
 8108264:	08108347 	.word	0x08108347
 8108268:	081082f3 	.word	0x081082f3
 810826c:	08108347 	.word	0x08108347
 8108270:	08108347 	.word	0x08108347
 8108274:	08108347 	.word	0x08108347
 8108278:	08108303 	.word	0x08108303
 810827c:	08108347 	.word	0x08108347
 8108280:	08108347 	.word	0x08108347
 8108284:	08108347 	.word	0x08108347
 8108288:	08108347 	.word	0x08108347
 810828c:	08108347 	.word	0x08108347
 8108290:	08108347 	.word	0x08108347
 8108294:	08108347 	.word	0x08108347
 8108298:	08108313 	.word	0x08108313
 810829c:	08108347 	.word	0x08108347
 81082a0:	08108347 	.word	0x08108347
 81082a4:	08108347 	.word	0x08108347
 81082a8:	08108347 	.word	0x08108347
 81082ac:	08108347 	.word	0x08108347
 81082b0:	08108347 	.word	0x08108347
 81082b4:	08108347 	.word	0x08108347
 81082b8:	08108347 	.word	0x08108347
 81082bc:	08108347 	.word	0x08108347
 81082c0:	08108347 	.word	0x08108347
 81082c4:	08108347 	.word	0x08108347
 81082c8:	08108347 	.word	0x08108347
 81082cc:	08108347 	.word	0x08108347
 81082d0:	08108347 	.word	0x08108347
 81082d4:	08108347 	.word	0x08108347
 81082d8:	08108339 	.word	0x08108339
 81082dc:	2b40      	cmp	r3, #64	; 0x40
 81082de:	d02e      	beq.n	810833e <UART_SetConfig+0xa36>
 81082e0:	e031      	b.n	8108346 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81082e2:	f7fc fa77 	bl	81047d4 <HAL_RCC_GetPCLK1Freq>
 81082e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81082e8:	e033      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81082ea:	f7fc fa89 	bl	8104800 <HAL_RCC_GetPCLK2Freq>
 81082ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81082f0:	e02f      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81082f6:	4618      	mov	r0, r3
 81082f8:	f7fe fa38 	bl	810676c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108300:	e027      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108302:	f107 0318 	add.w	r3, r7, #24
 8108306:	4618      	mov	r0, r3
 8108308:	f7fe fb84 	bl	8106a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810830c:	69fb      	ldr	r3, [r7, #28]
 810830e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108310:	e01f      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108312:	4b2d      	ldr	r3, [pc, #180]	; (81083c8 <UART_SetConfig+0xac0>)
 8108314:	681b      	ldr	r3, [r3, #0]
 8108316:	f003 0320 	and.w	r3, r3, #32
 810831a:	2b00      	cmp	r3, #0
 810831c:	d009      	beq.n	8108332 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810831e:	4b2a      	ldr	r3, [pc, #168]	; (81083c8 <UART_SetConfig+0xac0>)
 8108320:	681b      	ldr	r3, [r3, #0]
 8108322:	08db      	lsrs	r3, r3, #3
 8108324:	f003 0303 	and.w	r3, r3, #3
 8108328:	4a28      	ldr	r2, [pc, #160]	; (81083cc <UART_SetConfig+0xac4>)
 810832a:	fa22 f303 	lsr.w	r3, r2, r3
 810832e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108330:	e00f      	b.n	8108352 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108332:	4b26      	ldr	r3, [pc, #152]	; (81083cc <UART_SetConfig+0xac4>)
 8108334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108336:	e00c      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108338:	4b25      	ldr	r3, [pc, #148]	; (81083d0 <UART_SetConfig+0xac8>)
 810833a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810833c:	e009      	b.n	8108352 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810833e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108344:	e005      	b.n	8108352 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108346:	2300      	movs	r3, #0
 8108348:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810834a:	2301      	movs	r3, #1
 810834c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108350:	bf00      	nop
    }

    if (pclk != 0U)
 8108352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108354:	2b00      	cmp	r3, #0
 8108356:	d021      	beq.n	810839c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108358:	697b      	ldr	r3, [r7, #20]
 810835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810835c:	4a1d      	ldr	r2, [pc, #116]	; (81083d4 <UART_SetConfig+0xacc>)
 810835e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108362:	461a      	mov	r2, r3
 8108364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108366:	fbb3 f2f2 	udiv	r2, r3, r2
 810836a:	697b      	ldr	r3, [r7, #20]
 810836c:	685b      	ldr	r3, [r3, #4]
 810836e:	085b      	lsrs	r3, r3, #1
 8108370:	441a      	add	r2, r3
 8108372:	697b      	ldr	r3, [r7, #20]
 8108374:	685b      	ldr	r3, [r3, #4]
 8108376:	fbb2 f3f3 	udiv	r3, r2, r3
 810837a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810837e:	2b0f      	cmp	r3, #15
 8108380:	d909      	bls.n	8108396 <UART_SetConfig+0xa8e>
 8108382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108388:	d205      	bcs.n	8108396 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810838c:	b29a      	uxth	r2, r3
 810838e:	697b      	ldr	r3, [r7, #20]
 8108390:	681b      	ldr	r3, [r3, #0]
 8108392:	60da      	str	r2, [r3, #12]
 8108394:	e002      	b.n	810839c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108396:	2301      	movs	r3, #1
 8108398:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810839c:	697b      	ldr	r3, [r7, #20]
 810839e:	2201      	movs	r2, #1
 81083a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81083a4:	697b      	ldr	r3, [r7, #20]
 81083a6:	2201      	movs	r2, #1
 81083a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81083ac:	697b      	ldr	r3, [r7, #20]
 81083ae:	2200      	movs	r2, #0
 81083b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 81083b2:	697b      	ldr	r3, [r7, #20]
 81083b4:	2200      	movs	r2, #0
 81083b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 81083b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 81083bc:	4618      	mov	r0, r3
 81083be:	3748      	adds	r7, #72	; 0x48
 81083c0:	46bd      	mov	sp, r7
 81083c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81083c6:	bf00      	nop
 81083c8:	58024400 	.word	0x58024400
 81083cc:	03d09000 	.word	0x03d09000
 81083d0:	003d0900 	.word	0x003d0900
 81083d4:	08109a28 	.word	0x08109a28

081083d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81083d8:	b480      	push	{r7}
 81083da:	b083      	sub	sp, #12
 81083dc:	af00      	add	r7, sp, #0
 81083de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81083e0:	687b      	ldr	r3, [r7, #4]
 81083e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81083e4:	f003 0301 	and.w	r3, r3, #1
 81083e8:	2b00      	cmp	r3, #0
 81083ea:	d00a      	beq.n	8108402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	685b      	ldr	r3, [r3, #4]
 81083f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	681b      	ldr	r3, [r3, #0]
 81083fe:	430a      	orrs	r2, r1
 8108400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108402:	687b      	ldr	r3, [r7, #4]
 8108404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108406:	f003 0302 	and.w	r3, r3, #2
 810840a:	2b00      	cmp	r3, #0
 810840c:	d00a      	beq.n	8108424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	681b      	ldr	r3, [r3, #0]
 8108412:	685b      	ldr	r3, [r3, #4]
 8108414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810841c:	687b      	ldr	r3, [r7, #4]
 810841e:	681b      	ldr	r3, [r3, #0]
 8108420:	430a      	orrs	r2, r1
 8108422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108424:	687b      	ldr	r3, [r7, #4]
 8108426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108428:	f003 0304 	and.w	r3, r3, #4
 810842c:	2b00      	cmp	r3, #0
 810842e:	d00a      	beq.n	8108446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	681b      	ldr	r3, [r3, #0]
 8108434:	685b      	ldr	r3, [r3, #4]
 8108436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810843a:	687b      	ldr	r3, [r7, #4]
 810843c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	430a      	orrs	r2, r1
 8108444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108446:	687b      	ldr	r3, [r7, #4]
 8108448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810844a:	f003 0308 	and.w	r3, r3, #8
 810844e:	2b00      	cmp	r3, #0
 8108450:	d00a      	beq.n	8108468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108452:	687b      	ldr	r3, [r7, #4]
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	685b      	ldr	r3, [r3, #4]
 8108458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108460:	687b      	ldr	r3, [r7, #4]
 8108462:	681b      	ldr	r3, [r3, #0]
 8108464:	430a      	orrs	r2, r1
 8108466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810846c:	f003 0310 	and.w	r3, r3, #16
 8108470:	2b00      	cmp	r3, #0
 8108472:	d00a      	beq.n	810848a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	689b      	ldr	r3, [r3, #8]
 810847a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810847e:	687b      	ldr	r3, [r7, #4]
 8108480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108482:	687b      	ldr	r3, [r7, #4]
 8108484:	681b      	ldr	r3, [r3, #0]
 8108486:	430a      	orrs	r2, r1
 8108488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810848a:	687b      	ldr	r3, [r7, #4]
 810848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810848e:	f003 0320 	and.w	r3, r3, #32
 8108492:	2b00      	cmp	r3, #0
 8108494:	d00a      	beq.n	81084ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	689b      	ldr	r3, [r3, #8]
 810849c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81084a4:	687b      	ldr	r3, [r7, #4]
 81084a6:	681b      	ldr	r3, [r3, #0]
 81084a8:	430a      	orrs	r2, r1
 81084aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81084ac:	687b      	ldr	r3, [r7, #4]
 81084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81084b4:	2b00      	cmp	r3, #0
 81084b6:	d01a      	beq.n	81084ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	681b      	ldr	r3, [r3, #0]
 81084bc:	685b      	ldr	r3, [r3, #4]
 81084be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81084c6:	687b      	ldr	r3, [r7, #4]
 81084c8:	681b      	ldr	r3, [r3, #0]
 81084ca:	430a      	orrs	r2, r1
 81084cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81084ce:	687b      	ldr	r3, [r7, #4]
 81084d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81084d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81084d6:	d10a      	bne.n	81084ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81084d8:	687b      	ldr	r3, [r7, #4]
 81084da:	681b      	ldr	r3, [r3, #0]
 81084dc:	685b      	ldr	r3, [r3, #4]
 81084de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81084e2:	687b      	ldr	r3, [r7, #4]
 81084e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	681b      	ldr	r3, [r3, #0]
 81084ea:	430a      	orrs	r2, r1
 81084ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	d00a      	beq.n	8108510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81084fa:	687b      	ldr	r3, [r7, #4]
 81084fc:	681b      	ldr	r3, [r3, #0]
 81084fe:	685b      	ldr	r3, [r3, #4]
 8108500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	430a      	orrs	r2, r1
 810850e:	605a      	str	r2, [r3, #4]
  }
}
 8108510:	bf00      	nop
 8108512:	370c      	adds	r7, #12
 8108514:	46bd      	mov	sp, r7
 8108516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810851a:	4770      	bx	lr

0810851c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810851c:	b580      	push	{r7, lr}
 810851e:	b098      	sub	sp, #96	; 0x60
 8108520:	af02      	add	r7, sp, #8
 8108522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108524:	687b      	ldr	r3, [r7, #4]
 8108526:	2200      	movs	r2, #0
 8108528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810852c:	f7f9 fb46 	bl	8101bbc <HAL_GetTick>
 8108530:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108532:	687b      	ldr	r3, [r7, #4]
 8108534:	681b      	ldr	r3, [r3, #0]
 8108536:	681b      	ldr	r3, [r3, #0]
 8108538:	f003 0308 	and.w	r3, r3, #8
 810853c:	2b08      	cmp	r3, #8
 810853e:	d12f      	bne.n	81085a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108544:	9300      	str	r3, [sp, #0]
 8108546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108548:	2200      	movs	r2, #0
 810854a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810854e:	6878      	ldr	r0, [r7, #4]
 8108550:	f000 f88e 	bl	8108670 <UART_WaitOnFlagUntilTimeout>
 8108554:	4603      	mov	r3, r0
 8108556:	2b00      	cmp	r3, #0
 8108558:	d022      	beq.n	81085a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810855a:	687b      	ldr	r3, [r7, #4]
 810855c:	681b      	ldr	r3, [r3, #0]
 810855e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108562:	e853 3f00 	ldrex	r3, [r3]
 8108566:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810856a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810856e:	653b      	str	r3, [r7, #80]	; 0x50
 8108570:	687b      	ldr	r3, [r7, #4]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	461a      	mov	r2, r3
 8108576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108578:	647b      	str	r3, [r7, #68]	; 0x44
 810857a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810857c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810857e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108580:	e841 2300 	strex	r3, r2, [r1]
 8108584:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108588:	2b00      	cmp	r3, #0
 810858a:	d1e6      	bne.n	810855a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810858c:	687b      	ldr	r3, [r7, #4]
 810858e:	2220      	movs	r2, #32
 8108590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	2200      	movs	r2, #0
 8108598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810859c:	2303      	movs	r3, #3
 810859e:	e063      	b.n	8108668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	681b      	ldr	r3, [r3, #0]
 81085a6:	f003 0304 	and.w	r3, r3, #4
 81085aa:	2b04      	cmp	r3, #4
 81085ac:	d149      	bne.n	8108642 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81085ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81085b2:	9300      	str	r3, [sp, #0]
 81085b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81085b6:	2200      	movs	r2, #0
 81085b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81085bc:	6878      	ldr	r0, [r7, #4]
 81085be:	f000 f857 	bl	8108670 <UART_WaitOnFlagUntilTimeout>
 81085c2:	4603      	mov	r3, r0
 81085c4:	2b00      	cmp	r3, #0
 81085c6:	d03c      	beq.n	8108642 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	681b      	ldr	r3, [r3, #0]
 81085cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81085d0:	e853 3f00 	ldrex	r3, [r3]
 81085d4:	623b      	str	r3, [r7, #32]
   return(result);
 81085d6:	6a3b      	ldr	r3, [r7, #32]
 81085d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81085dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	681b      	ldr	r3, [r3, #0]
 81085e2:	461a      	mov	r2, r3
 81085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81085e6:	633b      	str	r3, [r7, #48]	; 0x30
 81085e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81085ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81085ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81085ee:	e841 2300 	strex	r3, r2, [r1]
 81085f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 81085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81085f6:	2b00      	cmp	r3, #0
 81085f8:	d1e6      	bne.n	81085c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81085fa:	687b      	ldr	r3, [r7, #4]
 81085fc:	681b      	ldr	r3, [r3, #0]
 81085fe:	3308      	adds	r3, #8
 8108600:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108602:	693b      	ldr	r3, [r7, #16]
 8108604:	e853 3f00 	ldrex	r3, [r3]
 8108608:	60fb      	str	r3, [r7, #12]
   return(result);
 810860a:	68fb      	ldr	r3, [r7, #12]
 810860c:	f023 0301 	bic.w	r3, r3, #1
 8108610:	64bb      	str	r3, [r7, #72]	; 0x48
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	3308      	adds	r3, #8
 8108618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810861a:	61fa      	str	r2, [r7, #28]
 810861c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810861e:	69b9      	ldr	r1, [r7, #24]
 8108620:	69fa      	ldr	r2, [r7, #28]
 8108622:	e841 2300 	strex	r3, r2, [r1]
 8108626:	617b      	str	r3, [r7, #20]
   return(result);
 8108628:	697b      	ldr	r3, [r7, #20]
 810862a:	2b00      	cmp	r3, #0
 810862c:	d1e5      	bne.n	81085fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	2220      	movs	r2, #32
 8108632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	2200      	movs	r2, #0
 810863a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810863e:	2303      	movs	r3, #3
 8108640:	e012      	b.n	8108668 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108642:	687b      	ldr	r3, [r7, #4]
 8108644:	2220      	movs	r2, #32
 8108646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810864a:	687b      	ldr	r3, [r7, #4]
 810864c:	2220      	movs	r2, #32
 810864e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	2200      	movs	r2, #0
 8108656:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	2200      	movs	r2, #0
 810865c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	2200      	movs	r2, #0
 8108662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108666:	2300      	movs	r3, #0
}
 8108668:	4618      	mov	r0, r3
 810866a:	3758      	adds	r7, #88	; 0x58
 810866c:	46bd      	mov	sp, r7
 810866e:	bd80      	pop	{r7, pc}

08108670 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108670:	b580      	push	{r7, lr}
 8108672:	b084      	sub	sp, #16
 8108674:	af00      	add	r7, sp, #0
 8108676:	60f8      	str	r0, [r7, #12]
 8108678:	60b9      	str	r1, [r7, #8]
 810867a:	603b      	str	r3, [r7, #0]
 810867c:	4613      	mov	r3, r2
 810867e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108680:	e049      	b.n	8108716 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108682:	69bb      	ldr	r3, [r7, #24]
 8108684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108688:	d045      	beq.n	8108716 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810868a:	f7f9 fa97 	bl	8101bbc <HAL_GetTick>
 810868e:	4602      	mov	r2, r0
 8108690:	683b      	ldr	r3, [r7, #0]
 8108692:	1ad3      	subs	r3, r2, r3
 8108694:	69ba      	ldr	r2, [r7, #24]
 8108696:	429a      	cmp	r2, r3
 8108698:	d302      	bcc.n	81086a0 <UART_WaitOnFlagUntilTimeout+0x30>
 810869a:	69bb      	ldr	r3, [r7, #24]
 810869c:	2b00      	cmp	r3, #0
 810869e:	d101      	bne.n	81086a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 81086a0:	2303      	movs	r3, #3
 81086a2:	e048      	b.n	8108736 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81086a4:	68fb      	ldr	r3, [r7, #12]
 81086a6:	681b      	ldr	r3, [r3, #0]
 81086a8:	681b      	ldr	r3, [r3, #0]
 81086aa:	f003 0304 	and.w	r3, r3, #4
 81086ae:	2b00      	cmp	r3, #0
 81086b0:	d031      	beq.n	8108716 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81086b2:	68fb      	ldr	r3, [r7, #12]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	69db      	ldr	r3, [r3, #28]
 81086b8:	f003 0308 	and.w	r3, r3, #8
 81086bc:	2b08      	cmp	r3, #8
 81086be:	d110      	bne.n	81086e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81086c0:	68fb      	ldr	r3, [r7, #12]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	2208      	movs	r2, #8
 81086c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 81086c8:	68f8      	ldr	r0, [r7, #12]
 81086ca:	f000 f838 	bl	810873e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 81086ce:	68fb      	ldr	r3, [r7, #12]
 81086d0:	2208      	movs	r2, #8
 81086d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 81086d6:	68fb      	ldr	r3, [r7, #12]
 81086d8:	2200      	movs	r2, #0
 81086da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 81086de:	2301      	movs	r3, #1
 81086e0:	e029      	b.n	8108736 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81086e2:	68fb      	ldr	r3, [r7, #12]
 81086e4:	681b      	ldr	r3, [r3, #0]
 81086e6:	69db      	ldr	r3, [r3, #28]
 81086e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81086ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81086f0:	d111      	bne.n	8108716 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81086f2:	68fb      	ldr	r3, [r7, #12]
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81086fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81086fc:	68f8      	ldr	r0, [r7, #12]
 81086fe:	f000 f81e 	bl	810873e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108702:	68fb      	ldr	r3, [r7, #12]
 8108704:	2220      	movs	r2, #32
 8108706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810870a:	68fb      	ldr	r3, [r7, #12]
 810870c:	2200      	movs	r2, #0
 810870e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8108712:	2303      	movs	r3, #3
 8108714:	e00f      	b.n	8108736 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108716:	68fb      	ldr	r3, [r7, #12]
 8108718:	681b      	ldr	r3, [r3, #0]
 810871a:	69da      	ldr	r2, [r3, #28]
 810871c:	68bb      	ldr	r3, [r7, #8]
 810871e:	4013      	ands	r3, r2
 8108720:	68ba      	ldr	r2, [r7, #8]
 8108722:	429a      	cmp	r2, r3
 8108724:	bf0c      	ite	eq
 8108726:	2301      	moveq	r3, #1
 8108728:	2300      	movne	r3, #0
 810872a:	b2db      	uxtb	r3, r3
 810872c:	461a      	mov	r2, r3
 810872e:	79fb      	ldrb	r3, [r7, #7]
 8108730:	429a      	cmp	r2, r3
 8108732:	d0a6      	beq.n	8108682 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108734:	2300      	movs	r3, #0
}
 8108736:	4618      	mov	r0, r3
 8108738:	3710      	adds	r7, #16
 810873a:	46bd      	mov	sp, r7
 810873c:	bd80      	pop	{r7, pc}

0810873e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810873e:	b480      	push	{r7}
 8108740:	b095      	sub	sp, #84	; 0x54
 8108742:	af00      	add	r7, sp, #0
 8108744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108746:	687b      	ldr	r3, [r7, #4]
 8108748:	681b      	ldr	r3, [r3, #0]
 810874a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810874c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810874e:	e853 3f00 	ldrex	r3, [r3]
 8108752:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810875a:	64fb      	str	r3, [r7, #76]	; 0x4c
 810875c:	687b      	ldr	r3, [r7, #4]
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	461a      	mov	r2, r3
 8108762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108764:	643b      	str	r3, [r7, #64]	; 0x40
 8108766:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810876a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810876c:	e841 2300 	strex	r3, r2, [r1]
 8108770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108774:	2b00      	cmp	r3, #0
 8108776:	d1e6      	bne.n	8108746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	681b      	ldr	r3, [r3, #0]
 810877c:	3308      	adds	r3, #8
 810877e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108780:	6a3b      	ldr	r3, [r7, #32]
 8108782:	e853 3f00 	ldrex	r3, [r3]
 8108786:	61fb      	str	r3, [r7, #28]
   return(result);
 8108788:	69fb      	ldr	r3, [r7, #28]
 810878a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810878e:	f023 0301 	bic.w	r3, r3, #1
 8108792:	64bb      	str	r3, [r7, #72]	; 0x48
 8108794:	687b      	ldr	r3, [r7, #4]
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	3308      	adds	r3, #8
 810879a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810879c:	62fa      	str	r2, [r7, #44]	; 0x2c
 810879e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81087a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81087a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81087a4:	e841 2300 	strex	r3, r2, [r1]
 81087a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087ac:	2b00      	cmp	r3, #0
 81087ae:	d1e3      	bne.n	8108778 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81087b4:	2b01      	cmp	r3, #1
 81087b6:	d118      	bne.n	81087ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	681b      	ldr	r3, [r3, #0]
 81087bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	e853 3f00 	ldrex	r3, [r3]
 81087c4:	60bb      	str	r3, [r7, #8]
   return(result);
 81087c6:	68bb      	ldr	r3, [r7, #8]
 81087c8:	f023 0310 	bic.w	r3, r3, #16
 81087cc:	647b      	str	r3, [r7, #68]	; 0x44
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	681b      	ldr	r3, [r3, #0]
 81087d2:	461a      	mov	r2, r3
 81087d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81087d6:	61bb      	str	r3, [r7, #24]
 81087d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81087da:	6979      	ldr	r1, [r7, #20]
 81087dc:	69ba      	ldr	r2, [r7, #24]
 81087de:	e841 2300 	strex	r3, r2, [r1]
 81087e2:	613b      	str	r3, [r7, #16]
   return(result);
 81087e4:	693b      	ldr	r3, [r7, #16]
 81087e6:	2b00      	cmp	r3, #0
 81087e8:	d1e6      	bne.n	81087b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	2220      	movs	r2, #32
 81087ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	2200      	movs	r2, #0
 81087f6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81087f8:	687b      	ldr	r3, [r7, #4]
 81087fa:	2200      	movs	r2, #0
 81087fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 81087fe:	bf00      	nop
 8108800:	3754      	adds	r7, #84	; 0x54
 8108802:	46bd      	mov	sp, r7
 8108804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108808:	4770      	bx	lr

0810880a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810880a:	b480      	push	{r7}
 810880c:	b085      	sub	sp, #20
 810880e:	af00      	add	r7, sp, #0
 8108810:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108812:	687b      	ldr	r3, [r7, #4]
 8108814:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108818:	2b01      	cmp	r3, #1
 810881a:	d101      	bne.n	8108820 <HAL_UARTEx_DisableFifoMode+0x16>
 810881c:	2302      	movs	r3, #2
 810881e:	e027      	b.n	8108870 <HAL_UARTEx_DisableFifoMode+0x66>
 8108820:	687b      	ldr	r3, [r7, #4]
 8108822:	2201      	movs	r2, #1
 8108824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	2224      	movs	r2, #36	; 0x24
 810882c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108830:	687b      	ldr	r3, [r7, #4]
 8108832:	681b      	ldr	r3, [r3, #0]
 8108834:	681b      	ldr	r3, [r3, #0]
 8108836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	681b      	ldr	r3, [r3, #0]
 810883c:	681a      	ldr	r2, [r3, #0]
 810883e:	687b      	ldr	r3, [r7, #4]
 8108840:	681b      	ldr	r3, [r3, #0]
 8108842:	f022 0201 	bic.w	r2, r2, #1
 8108846:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108848:	68fb      	ldr	r3, [r7, #12]
 810884a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810884e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108850:	687b      	ldr	r3, [r7, #4]
 8108852:	2200      	movs	r2, #0
 8108854:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	68fa      	ldr	r2, [r7, #12]
 810885c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	2220      	movs	r2, #32
 8108862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108866:	687b      	ldr	r3, [r7, #4]
 8108868:	2200      	movs	r2, #0
 810886a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810886e:	2300      	movs	r3, #0
}
 8108870:	4618      	mov	r0, r3
 8108872:	3714      	adds	r7, #20
 8108874:	46bd      	mov	sp, r7
 8108876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810887a:	4770      	bx	lr

0810887c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810887c:	b580      	push	{r7, lr}
 810887e:	b084      	sub	sp, #16
 8108880:	af00      	add	r7, sp, #0
 8108882:	6078      	str	r0, [r7, #4]
 8108884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810888c:	2b01      	cmp	r3, #1
 810888e:	d101      	bne.n	8108894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108890:	2302      	movs	r3, #2
 8108892:	e02d      	b.n	81088f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	2201      	movs	r2, #1
 8108898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	2224      	movs	r2, #36	; 0x24
 81088a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81088ac:	687b      	ldr	r3, [r7, #4]
 81088ae:	681b      	ldr	r3, [r3, #0]
 81088b0:	681a      	ldr	r2, [r3, #0]
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	f022 0201 	bic.w	r2, r2, #1
 81088ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81088bc:	687b      	ldr	r3, [r7, #4]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	689b      	ldr	r3, [r3, #8]
 81088c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	683a      	ldr	r2, [r7, #0]
 81088cc:	430a      	orrs	r2, r1
 81088ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81088d0:	6878      	ldr	r0, [r7, #4]
 81088d2:	f000 f84f 	bl	8108974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	68fa      	ldr	r2, [r7, #12]
 81088dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81088de:	687b      	ldr	r3, [r7, #4]
 81088e0:	2220      	movs	r2, #32
 81088e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81088e6:	687b      	ldr	r3, [r7, #4]
 81088e8:	2200      	movs	r2, #0
 81088ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81088ee:	2300      	movs	r3, #0
}
 81088f0:	4618      	mov	r0, r3
 81088f2:	3710      	adds	r7, #16
 81088f4:	46bd      	mov	sp, r7
 81088f6:	bd80      	pop	{r7, pc}

081088f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81088f8:	b580      	push	{r7, lr}
 81088fa:	b084      	sub	sp, #16
 81088fc:	af00      	add	r7, sp, #0
 81088fe:	6078      	str	r0, [r7, #4]
 8108900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108902:	687b      	ldr	r3, [r7, #4]
 8108904:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108908:	2b01      	cmp	r3, #1
 810890a:	d101      	bne.n	8108910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810890c:	2302      	movs	r3, #2
 810890e:	e02d      	b.n	810896c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	2201      	movs	r2, #1
 8108914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	2224      	movs	r2, #36	; 0x24
 810891c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108920:	687b      	ldr	r3, [r7, #4]
 8108922:	681b      	ldr	r3, [r3, #0]
 8108924:	681b      	ldr	r3, [r3, #0]
 8108926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108928:	687b      	ldr	r3, [r7, #4]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	681a      	ldr	r2, [r3, #0]
 810892e:	687b      	ldr	r3, [r7, #4]
 8108930:	681b      	ldr	r3, [r3, #0]
 8108932:	f022 0201 	bic.w	r2, r2, #1
 8108936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108938:	687b      	ldr	r3, [r7, #4]
 810893a:	681b      	ldr	r3, [r3, #0]
 810893c:	689b      	ldr	r3, [r3, #8]
 810893e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	681b      	ldr	r3, [r3, #0]
 8108946:	683a      	ldr	r2, [r7, #0]
 8108948:	430a      	orrs	r2, r1
 810894a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810894c:	6878      	ldr	r0, [r7, #4]
 810894e:	f000 f811 	bl	8108974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	681b      	ldr	r3, [r3, #0]
 8108956:	68fa      	ldr	r2, [r7, #12]
 8108958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	2220      	movs	r2, #32
 810895e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108962:	687b      	ldr	r3, [r7, #4]
 8108964:	2200      	movs	r2, #0
 8108966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810896a:	2300      	movs	r3, #0
}
 810896c:	4618      	mov	r0, r3
 810896e:	3710      	adds	r7, #16
 8108970:	46bd      	mov	sp, r7
 8108972:	bd80      	pop	{r7, pc}

08108974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108974:	b480      	push	{r7}
 8108976:	b085      	sub	sp, #20
 8108978:	af00      	add	r7, sp, #0
 810897a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108980:	2b00      	cmp	r3, #0
 8108982:	d108      	bne.n	8108996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	2201      	movs	r2, #1
 8108988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	2201      	movs	r2, #1
 8108990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108994:	e031      	b.n	81089fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108996:	2310      	movs	r3, #16
 8108998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810899a:	2310      	movs	r3, #16
 810899c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	681b      	ldr	r3, [r3, #0]
 81089a2:	689b      	ldr	r3, [r3, #8]
 81089a4:	0e5b      	lsrs	r3, r3, #25
 81089a6:	b2db      	uxtb	r3, r3
 81089a8:	f003 0307 	and.w	r3, r3, #7
 81089ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81089ae:	687b      	ldr	r3, [r7, #4]
 81089b0:	681b      	ldr	r3, [r3, #0]
 81089b2:	689b      	ldr	r3, [r3, #8]
 81089b4:	0f5b      	lsrs	r3, r3, #29
 81089b6:	b2db      	uxtb	r3, r3
 81089b8:	f003 0307 	and.w	r3, r3, #7
 81089bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81089be:	7bbb      	ldrb	r3, [r7, #14]
 81089c0:	7b3a      	ldrb	r2, [r7, #12]
 81089c2:	4911      	ldr	r1, [pc, #68]	; (8108a08 <UARTEx_SetNbDataToProcess+0x94>)
 81089c4:	5c8a      	ldrb	r2, [r1, r2]
 81089c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81089ca:	7b3a      	ldrb	r2, [r7, #12]
 81089cc:	490f      	ldr	r1, [pc, #60]	; (8108a0c <UARTEx_SetNbDataToProcess+0x98>)
 81089ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81089d0:	fb93 f3f2 	sdiv	r3, r3, r2
 81089d4:	b29a      	uxth	r2, r3
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81089dc:	7bfb      	ldrb	r3, [r7, #15]
 81089de:	7b7a      	ldrb	r2, [r7, #13]
 81089e0:	4909      	ldr	r1, [pc, #36]	; (8108a08 <UARTEx_SetNbDataToProcess+0x94>)
 81089e2:	5c8a      	ldrb	r2, [r1, r2]
 81089e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81089e8:	7b7a      	ldrb	r2, [r7, #13]
 81089ea:	4908      	ldr	r1, [pc, #32]	; (8108a0c <UARTEx_SetNbDataToProcess+0x98>)
 81089ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81089ee:	fb93 f3f2 	sdiv	r3, r3, r2
 81089f2:	b29a      	uxth	r2, r3
 81089f4:	687b      	ldr	r3, [r7, #4]
 81089f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81089fa:	bf00      	nop
 81089fc:	3714      	adds	r7, #20
 81089fe:	46bd      	mov	sp, r7
 8108a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a04:	4770      	bx	lr
 8108a06:	bf00      	nop
 8108a08:	08109a40 	.word	0x08109a40
 8108a0c:	08109a48 	.word	0x08109a48

08108a10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8108a10:	b480      	push	{r7}
 8108a12:	b083      	sub	sp, #12
 8108a14:	af00      	add	r7, sp, #0
 8108a16:	6078      	str	r0, [r7, #4]
 8108a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8108a1a:	683b      	ldr	r3, [r7, #0]
 8108a1c:	681b      	ldr	r3, [r3, #0]
 8108a1e:	2b00      	cmp	r3, #0
 8108a20:	d123      	bne.n	8108a6a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	681b      	ldr	r3, [r3, #0]
 8108a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8108a2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8108a2e:	683a      	ldr	r2, [r7, #0]
 8108a30:	6851      	ldr	r1, [r2, #4]
 8108a32:	683a      	ldr	r2, [r7, #0]
 8108a34:	6892      	ldr	r2, [r2, #8]
 8108a36:	4311      	orrs	r1, r2
 8108a38:	683a      	ldr	r2, [r7, #0]
 8108a3a:	68d2      	ldr	r2, [r2, #12]
 8108a3c:	4311      	orrs	r1, r2
 8108a3e:	683a      	ldr	r2, [r7, #0]
 8108a40:	6912      	ldr	r2, [r2, #16]
 8108a42:	4311      	orrs	r1, r2
 8108a44:	683a      	ldr	r2, [r7, #0]
 8108a46:	6952      	ldr	r2, [r2, #20]
 8108a48:	4311      	orrs	r1, r2
 8108a4a:	683a      	ldr	r2, [r7, #0]
 8108a4c:	6992      	ldr	r2, [r2, #24]
 8108a4e:	4311      	orrs	r1, r2
 8108a50:	683a      	ldr	r2, [r7, #0]
 8108a52:	69d2      	ldr	r2, [r2, #28]
 8108a54:	4311      	orrs	r1, r2
 8108a56:	683a      	ldr	r2, [r7, #0]
 8108a58:	6a12      	ldr	r2, [r2, #32]
 8108a5a:	4311      	orrs	r1, r2
 8108a5c:	683a      	ldr	r2, [r7, #0]
 8108a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8108a60:	430a      	orrs	r2, r1
 8108a62:	431a      	orrs	r2, r3
 8108a64:	687b      	ldr	r3, [r7, #4]
 8108a66:	601a      	str	r2, [r3, #0]
 8108a68:	e028      	b.n	8108abc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8108a72:	683b      	ldr	r3, [r7, #0]
 8108a74:	69d9      	ldr	r1, [r3, #28]
 8108a76:	683b      	ldr	r3, [r7, #0]
 8108a78:	6a1b      	ldr	r3, [r3, #32]
 8108a7a:	4319      	orrs	r1, r3
 8108a7c:	683b      	ldr	r3, [r7, #0]
 8108a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a80:	430b      	orrs	r3, r1
 8108a82:	431a      	orrs	r2, r3
 8108a84:	687b      	ldr	r3, [r7, #4]
 8108a86:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8108a88:	687b      	ldr	r3, [r7, #4]
 8108a8a:	685b      	ldr	r3, [r3, #4]
 8108a8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8108a90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8108a94:	683a      	ldr	r2, [r7, #0]
 8108a96:	6851      	ldr	r1, [r2, #4]
 8108a98:	683a      	ldr	r2, [r7, #0]
 8108a9a:	6892      	ldr	r2, [r2, #8]
 8108a9c:	4311      	orrs	r1, r2
 8108a9e:	683a      	ldr	r2, [r7, #0]
 8108aa0:	68d2      	ldr	r2, [r2, #12]
 8108aa2:	4311      	orrs	r1, r2
 8108aa4:	683a      	ldr	r2, [r7, #0]
 8108aa6:	6912      	ldr	r2, [r2, #16]
 8108aa8:	4311      	orrs	r1, r2
 8108aaa:	683a      	ldr	r2, [r7, #0]
 8108aac:	6952      	ldr	r2, [r2, #20]
 8108aae:	4311      	orrs	r1, r2
 8108ab0:	683a      	ldr	r2, [r7, #0]
 8108ab2:	6992      	ldr	r2, [r2, #24]
 8108ab4:	430a      	orrs	r2, r1
 8108ab6:	431a      	orrs	r2, r3
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8108abc:	2300      	movs	r3, #0
}
 8108abe:	4618      	mov	r0, r3
 8108ac0:	370c      	adds	r7, #12
 8108ac2:	46bd      	mov	sp, r7
 8108ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ac8:	4770      	bx	lr

08108aca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8108aca:	b480      	push	{r7}
 8108acc:	b085      	sub	sp, #20
 8108ace:	af00      	add	r7, sp, #0
 8108ad0:	60f8      	str	r0, [r7, #12]
 8108ad2:	60b9      	str	r1, [r7, #8]
 8108ad4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8108ad6:	687b      	ldr	r3, [r7, #4]
 8108ad8:	2b00      	cmp	r3, #0
 8108ada:	d128      	bne.n	8108b2e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8108adc:	68fb      	ldr	r3, [r7, #12]
 8108ade:	689b      	ldr	r3, [r3, #8]
 8108ae0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8108ae4:	68bb      	ldr	r3, [r7, #8]
 8108ae6:	681b      	ldr	r3, [r3, #0]
 8108ae8:	1e59      	subs	r1, r3, #1
 8108aea:	68bb      	ldr	r3, [r7, #8]
 8108aec:	685b      	ldr	r3, [r3, #4]
 8108aee:	3b01      	subs	r3, #1
 8108af0:	011b      	lsls	r3, r3, #4
 8108af2:	4319      	orrs	r1, r3
 8108af4:	68bb      	ldr	r3, [r7, #8]
 8108af6:	689b      	ldr	r3, [r3, #8]
 8108af8:	3b01      	subs	r3, #1
 8108afa:	021b      	lsls	r3, r3, #8
 8108afc:	4319      	orrs	r1, r3
 8108afe:	68bb      	ldr	r3, [r7, #8]
 8108b00:	68db      	ldr	r3, [r3, #12]
 8108b02:	3b01      	subs	r3, #1
 8108b04:	031b      	lsls	r3, r3, #12
 8108b06:	4319      	orrs	r1, r3
 8108b08:	68bb      	ldr	r3, [r7, #8]
 8108b0a:	691b      	ldr	r3, [r3, #16]
 8108b0c:	3b01      	subs	r3, #1
 8108b0e:	041b      	lsls	r3, r3, #16
 8108b10:	4319      	orrs	r1, r3
 8108b12:	68bb      	ldr	r3, [r7, #8]
 8108b14:	695b      	ldr	r3, [r3, #20]
 8108b16:	3b01      	subs	r3, #1
 8108b18:	051b      	lsls	r3, r3, #20
 8108b1a:	4319      	orrs	r1, r3
 8108b1c:	68bb      	ldr	r3, [r7, #8]
 8108b1e:	699b      	ldr	r3, [r3, #24]
 8108b20:	3b01      	subs	r3, #1
 8108b22:	061b      	lsls	r3, r3, #24
 8108b24:	430b      	orrs	r3, r1
 8108b26:	431a      	orrs	r2, r3
 8108b28:	68fb      	ldr	r3, [r7, #12]
 8108b2a:	609a      	str	r2, [r3, #8]
 8108b2c:	e02f      	b.n	8108b8e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8108b2e:	68fb      	ldr	r3, [r7, #12]
 8108b30:	689b      	ldr	r3, [r3, #8]
 8108b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8108b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108b3a:	68ba      	ldr	r2, [r7, #8]
 8108b3c:	68d2      	ldr	r2, [r2, #12]
 8108b3e:	3a01      	subs	r2, #1
 8108b40:	0311      	lsls	r1, r2, #12
 8108b42:	68ba      	ldr	r2, [r7, #8]
 8108b44:	6952      	ldr	r2, [r2, #20]
 8108b46:	3a01      	subs	r2, #1
 8108b48:	0512      	lsls	r2, r2, #20
 8108b4a:	430a      	orrs	r2, r1
 8108b4c:	431a      	orrs	r2, r3
 8108b4e:	68fb      	ldr	r3, [r7, #12]
 8108b50:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8108b52:	68fb      	ldr	r3, [r7, #12]
 8108b54:	68db      	ldr	r3, [r3, #12]
 8108b56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8108b5a:	68bb      	ldr	r3, [r7, #8]
 8108b5c:	681b      	ldr	r3, [r3, #0]
 8108b5e:	1e59      	subs	r1, r3, #1
 8108b60:	68bb      	ldr	r3, [r7, #8]
 8108b62:	685b      	ldr	r3, [r3, #4]
 8108b64:	3b01      	subs	r3, #1
 8108b66:	011b      	lsls	r3, r3, #4
 8108b68:	4319      	orrs	r1, r3
 8108b6a:	68bb      	ldr	r3, [r7, #8]
 8108b6c:	689b      	ldr	r3, [r3, #8]
 8108b6e:	3b01      	subs	r3, #1
 8108b70:	021b      	lsls	r3, r3, #8
 8108b72:	4319      	orrs	r1, r3
 8108b74:	68bb      	ldr	r3, [r7, #8]
 8108b76:	691b      	ldr	r3, [r3, #16]
 8108b78:	3b01      	subs	r3, #1
 8108b7a:	041b      	lsls	r3, r3, #16
 8108b7c:	4319      	orrs	r1, r3
 8108b7e:	68bb      	ldr	r3, [r7, #8]
 8108b80:	699b      	ldr	r3, [r3, #24]
 8108b82:	3b01      	subs	r3, #1
 8108b84:	061b      	lsls	r3, r3, #24
 8108b86:	430b      	orrs	r3, r1
 8108b88:	431a      	orrs	r2, r3
 8108b8a:	68fb      	ldr	r3, [r7, #12]
 8108b8c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8108b8e:	2300      	movs	r3, #0
}
 8108b90:	4618      	mov	r0, r3
 8108b92:	3714      	adds	r7, #20
 8108b94:	46bd      	mov	sp, r7
 8108b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b9a:	4770      	bx	lr

08108b9c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8108b9c:	b084      	sub	sp, #16
 8108b9e:	b480      	push	{r7}
 8108ba0:	b085      	sub	sp, #20
 8108ba2:	af00      	add	r7, sp, #0
 8108ba4:	6078      	str	r0, [r7, #4]
 8108ba6:	f107 001c 	add.w	r0, r7, #28
 8108baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8108bae:	2300      	movs	r3, #0
 8108bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8108bb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8108bb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8108bb6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8108bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8108bba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8108bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8108bbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8108bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8108bc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8108bc4:	68fa      	ldr	r2, [r7, #12]
 8108bc6:	4313      	orrs	r3, r2
 8108bc8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8108bca:	687b      	ldr	r3, [r7, #4]
 8108bcc:	685a      	ldr	r2, [r3, #4]
 8108bce:	4b07      	ldr	r3, [pc, #28]	; (8108bec <SDMMC_Init+0x50>)
 8108bd0:	4013      	ands	r3, r2
 8108bd2:	68fa      	ldr	r2, [r7, #12]
 8108bd4:	431a      	orrs	r2, r3
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8108bda:	2300      	movs	r3, #0
}
 8108bdc:	4618      	mov	r0, r3
 8108bde:	3714      	adds	r7, #20
 8108be0:	46bd      	mov	sp, r7
 8108be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108be6:	b004      	add	sp, #16
 8108be8:	4770      	bx	lr
 8108bea:	bf00      	nop
 8108bec:	ffc02c00 	.word	0xffc02c00

08108bf0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8108bf0:	b480      	push	{r7}
 8108bf2:	b083      	sub	sp, #12
 8108bf4:	af00      	add	r7, sp, #0
 8108bf6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8108bfe:	4618      	mov	r0, r3
 8108c00:	370c      	adds	r7, #12
 8108c02:	46bd      	mov	sp, r7
 8108c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c08:	4770      	bx	lr

08108c0a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8108c0a:	b480      	push	{r7}
 8108c0c:	b083      	sub	sp, #12
 8108c0e:	af00      	add	r7, sp, #0
 8108c10:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	f043 0203 	orr.w	r2, r3, #3
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8108c1e:	2300      	movs	r3, #0
}
 8108c20:	4618      	mov	r0, r3
 8108c22:	370c      	adds	r7, #12
 8108c24:	46bd      	mov	sp, r7
 8108c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c2a:	4770      	bx	lr

08108c2c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8108c2c:	b480      	push	{r7}
 8108c2e:	b083      	sub	sp, #12
 8108c30:	af00      	add	r7, sp, #0
 8108c32:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	681b      	ldr	r3, [r3, #0]
 8108c38:	f003 0303 	and.w	r3, r3, #3
}
 8108c3c:	4618      	mov	r0, r3
 8108c3e:	370c      	adds	r7, #12
 8108c40:	46bd      	mov	sp, r7
 8108c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c46:	4770      	bx	lr

08108c48 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8108c48:	b480      	push	{r7}
 8108c4a:	b085      	sub	sp, #20
 8108c4c:	af00      	add	r7, sp, #0
 8108c4e:	6078      	str	r0, [r7, #4]
 8108c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8108c52:	2300      	movs	r3, #0
 8108c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8108c56:	683b      	ldr	r3, [r7, #0]
 8108c58:	681a      	ldr	r2, [r3, #0]
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108c5e:	683b      	ldr	r3, [r7, #0]
 8108c60:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8108c62:	683b      	ldr	r3, [r7, #0]
 8108c64:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108c66:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8108c68:	683b      	ldr	r3, [r7, #0]
 8108c6a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8108c6c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8108c6e:	683b      	ldr	r3, [r7, #0]
 8108c70:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8108c72:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8108c74:	68fa      	ldr	r2, [r7, #12]
 8108c76:	4313      	orrs	r3, r2
 8108c78:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	68da      	ldr	r2, [r3, #12]
 8108c7e:	4b06      	ldr	r3, [pc, #24]	; (8108c98 <SDMMC_SendCommand+0x50>)
 8108c80:	4013      	ands	r3, r2
 8108c82:	68fa      	ldr	r2, [r7, #12]
 8108c84:	431a      	orrs	r2, r3
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8108c8a:	2300      	movs	r3, #0
}
 8108c8c:	4618      	mov	r0, r3
 8108c8e:	3714      	adds	r7, #20
 8108c90:	46bd      	mov	sp, r7
 8108c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c96:	4770      	bx	lr
 8108c98:	fffee0c0 	.word	0xfffee0c0

08108c9c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8108c9c:	b480      	push	{r7}
 8108c9e:	b083      	sub	sp, #12
 8108ca0:	af00      	add	r7, sp, #0
 8108ca2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	691b      	ldr	r3, [r3, #16]
 8108ca8:	b2db      	uxtb	r3, r3
}
 8108caa:	4618      	mov	r0, r3
 8108cac:	370c      	adds	r7, #12
 8108cae:	46bd      	mov	sp, r7
 8108cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cb4:	4770      	bx	lr

08108cb6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8108cb6:	b480      	push	{r7}
 8108cb8:	b085      	sub	sp, #20
 8108cba:	af00      	add	r7, sp, #0
 8108cbc:	6078      	str	r0, [r7, #4]
 8108cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	3314      	adds	r3, #20
 8108cc4:	461a      	mov	r2, r3
 8108cc6:	683b      	ldr	r3, [r7, #0]
 8108cc8:	4413      	add	r3, r2
 8108cca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8108ccc:	68fb      	ldr	r3, [r7, #12]
 8108cce:	681b      	ldr	r3, [r3, #0]
}
 8108cd0:	4618      	mov	r0, r3
 8108cd2:	3714      	adds	r7, #20
 8108cd4:	46bd      	mov	sp, r7
 8108cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cda:	4770      	bx	lr

08108cdc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8108cdc:	b480      	push	{r7}
 8108cde:	b085      	sub	sp, #20
 8108ce0:	af00      	add	r7, sp, #0
 8108ce2:	6078      	str	r0, [r7, #4]
 8108ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8108ce6:	2300      	movs	r3, #0
 8108ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8108cea:	683b      	ldr	r3, [r7, #0]
 8108cec:	681a      	ldr	r2, [r3, #0]
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8108cf2:	683b      	ldr	r3, [r7, #0]
 8108cf4:	685a      	ldr	r2, [r3, #4]
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108cfa:	683b      	ldr	r3, [r7, #0]
 8108cfc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8108cfe:	683b      	ldr	r3, [r7, #0]
 8108d00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108d02:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8108d04:	683b      	ldr	r3, [r7, #0]
 8108d06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8108d08:	431a      	orrs	r2, r3
                       Data->DPSM);
 8108d0a:	683b      	ldr	r3, [r7, #0]
 8108d0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8108d0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8108d10:	68fa      	ldr	r2, [r7, #12]
 8108d12:	4313      	orrs	r3, r2
 8108d14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8108d1e:	68fb      	ldr	r3, [r7, #12]
 8108d20:	431a      	orrs	r2, r3
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8108d26:	2300      	movs	r3, #0

}
 8108d28:	4618      	mov	r0, r3
 8108d2a:	3714      	adds	r7, #20
 8108d2c:	46bd      	mov	sp, r7
 8108d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d32:	4770      	bx	lr

08108d34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8108d34:	b580      	push	{r7, lr}
 8108d36:	b088      	sub	sp, #32
 8108d38:	af00      	add	r7, sp, #0
 8108d3a:	6078      	str	r0, [r7, #4]
 8108d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8108d3e:	683b      	ldr	r3, [r7, #0]
 8108d40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8108d42:	2310      	movs	r3, #16
 8108d44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108d4c:	2300      	movs	r3, #0
 8108d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108d54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108d56:	f107 0308 	add.w	r3, r7, #8
 8108d5a:	4619      	mov	r1, r3
 8108d5c:	6878      	ldr	r0, [r7, #4]
 8108d5e:	f7ff ff73 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8108d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8108d66:	2110      	movs	r1, #16
 8108d68:	6878      	ldr	r0, [r7, #4]
 8108d6a:	f000 f935 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108d70:	69fb      	ldr	r3, [r7, #28]
}
 8108d72:	4618      	mov	r0, r3
 8108d74:	3720      	adds	r7, #32
 8108d76:	46bd      	mov	sp, r7
 8108d78:	bd80      	pop	{r7, pc}

08108d7a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8108d7a:	b580      	push	{r7, lr}
 8108d7c:	b088      	sub	sp, #32
 8108d7e:	af00      	add	r7, sp, #0
 8108d80:	6078      	str	r0, [r7, #4]
 8108d82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8108d84:	683b      	ldr	r3, [r7, #0]
 8108d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8108d88:	2307      	movs	r3, #7
 8108d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108d92:	2300      	movs	r3, #0
 8108d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108d9c:	f107 0308 	add.w	r3, r7, #8
 8108da0:	4619      	mov	r1, r3
 8108da2:	6878      	ldr	r0, [r7, #4]
 8108da4:	f7ff ff50 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8108da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8108dac:	2107      	movs	r1, #7
 8108dae:	6878      	ldr	r0, [r7, #4]
 8108db0:	f000 f912 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108db6:	69fb      	ldr	r3, [r7, #28]
}
 8108db8:	4618      	mov	r0, r3
 8108dba:	3720      	adds	r7, #32
 8108dbc:	46bd      	mov	sp, r7
 8108dbe:	bd80      	pop	{r7, pc}

08108dc0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8108dc0:	b580      	push	{r7, lr}
 8108dc2:	b088      	sub	sp, #32
 8108dc4:	af00      	add	r7, sp, #0
 8108dc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8108dc8:	2300      	movs	r3, #0
 8108dca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8108dcc:	2300      	movs	r3, #0
 8108dce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8108dd0:	2300      	movs	r3, #0
 8108dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108dd4:	2300      	movs	r3, #0
 8108dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108dde:	f107 0308 	add.w	r3, r7, #8
 8108de2:	4619      	mov	r1, r3
 8108de4:	6878      	ldr	r0, [r7, #4]
 8108de6:	f7ff ff2f 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8108dea:	6878      	ldr	r0, [r7, #4]
 8108dec:	f000 fa70 	bl	81092d0 <SDMMC_GetCmdError>
 8108df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108df2:	69fb      	ldr	r3, [r7, #28]
}
 8108df4:	4618      	mov	r0, r3
 8108df6:	3720      	adds	r7, #32
 8108df8:	46bd      	mov	sp, r7
 8108dfa:	bd80      	pop	{r7, pc}

08108dfc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8108dfc:	b580      	push	{r7, lr}
 8108dfe:	b088      	sub	sp, #32
 8108e00:	af00      	add	r7, sp, #0
 8108e02:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8108e04:	2300      	movs	r3, #0
 8108e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8108e08:	2302      	movs	r3, #2
 8108e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8108e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8108e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108e12:	2300      	movs	r3, #0
 8108e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108e1c:	f107 0308 	add.w	r3, r7, #8
 8108e20:	4619      	mov	r1, r3
 8108e22:	6878      	ldr	r0, [r7, #4]
 8108e24:	f7ff ff10 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8108e28:	6878      	ldr	r0, [r7, #4]
 8108e2a:	f000 f9c7 	bl	81091bc <SDMMC_GetCmdResp2>
 8108e2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108e30:	69fb      	ldr	r3, [r7, #28]
}
 8108e32:	4618      	mov	r0, r3
 8108e34:	3720      	adds	r7, #32
 8108e36:	46bd      	mov	sp, r7
 8108e38:	bd80      	pop	{r7, pc}

08108e3a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108e3a:	b580      	push	{r7, lr}
 8108e3c:	b088      	sub	sp, #32
 8108e3e:	af00      	add	r7, sp, #0
 8108e40:	6078      	str	r0, [r7, #4]
 8108e42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8108e44:	683b      	ldr	r3, [r7, #0]
 8108e46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8108e48:	2309      	movs	r3, #9
 8108e4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8108e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8108e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108e52:	2300      	movs	r3, #0
 8108e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108e5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108e5c:	f107 0308 	add.w	r3, r7, #8
 8108e60:	4619      	mov	r1, r3
 8108e62:	6878      	ldr	r0, [r7, #4]
 8108e64:	f7ff fef0 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8108e68:	6878      	ldr	r0, [r7, #4]
 8108e6a:	f000 f9a7 	bl	81091bc <SDMMC_GetCmdResp2>
 8108e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108e70:	69fb      	ldr	r3, [r7, #28]
}
 8108e72:	4618      	mov	r0, r3
 8108e74:	3720      	adds	r7, #32
 8108e76:	46bd      	mov	sp, r7
 8108e78:	bd80      	pop	{r7, pc}

08108e7a <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8108e7a:	b580      	push	{r7, lr}
 8108e7c:	b088      	sub	sp, #32
 8108e7e:	af00      	add	r7, sp, #0
 8108e80:	6078      	str	r0, [r7, #4]
 8108e82:	460b      	mov	r3, r1
 8108e84:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8108e86:	887b      	ldrh	r3, [r7, #2]
 8108e88:	041b      	lsls	r3, r3, #16
 8108e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8108e8c:	2303      	movs	r3, #3
 8108e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108e96:	2300      	movs	r3, #0
 8108e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108e9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108ea0:	f107 0308 	add.w	r3, r7, #8
 8108ea4:	4619      	mov	r1, r3
 8108ea6:	6878      	ldr	r0, [r7, #4]
 8108ea8:	f7ff fece 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8108eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8108eb0:	2103      	movs	r1, #3
 8108eb2:	6878      	ldr	r0, [r7, #4]
 8108eb4:	f000 f890 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108eba:	69fb      	ldr	r3, [r7, #28]
}
 8108ebc:	4618      	mov	r0, r3
 8108ebe:	3720      	adds	r7, #32
 8108ec0:	46bd      	mov	sp, r7
 8108ec2:	bd80      	pop	{r7, pc}

08108ec4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108ec4:	b580      	push	{r7, lr}
 8108ec6:	b088      	sub	sp, #32
 8108ec8:	af00      	add	r7, sp, #0
 8108eca:	6078      	str	r0, [r7, #4]
 8108ecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8108ece:	683b      	ldr	r3, [r7, #0]
 8108ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8108ed2:	230d      	movs	r3, #13
 8108ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108edc:	2300      	movs	r3, #0
 8108ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108ee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108ee6:	f107 0308 	add.w	r3, r7, #8
 8108eea:	4619      	mov	r1, r3
 8108eec:	6878      	ldr	r0, [r7, #4]
 8108eee:	f7ff feab 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8108ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8108ef6:	210d      	movs	r1, #13
 8108ef8:	6878      	ldr	r0, [r7, #4]
 8108efa:	f000 f86d 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108f00:	69fb      	ldr	r3, [r7, #28]
}
 8108f02:	4618      	mov	r0, r3
 8108f04:	3720      	adds	r7, #32
 8108f06:	46bd      	mov	sp, r7
 8108f08:	bd80      	pop	{r7, pc}

08108f0a <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108f0a:	b580      	push	{r7, lr}
 8108f0c:	b088      	sub	sp, #32
 8108f0e:	af00      	add	r7, sp, #0
 8108f10:	6078      	str	r0, [r7, #4]
 8108f12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8108f14:	683b      	ldr	r3, [r7, #0]
 8108f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8108f18:	2301      	movs	r3, #1
 8108f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108f22:	2300      	movs	r3, #0
 8108f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108f2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108f2c:	f107 0308 	add.w	r3, r7, #8
 8108f30:	4619      	mov	r1, r3
 8108f32:	6878      	ldr	r0, [r7, #4]
 8108f34:	f7ff fe88 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8108f38:	6878      	ldr	r0, [r7, #4]
 8108f3a:	f000 f989 	bl	8109250 <SDMMC_GetCmdResp3>
 8108f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108f40:	69fb      	ldr	r3, [r7, #28]
}
 8108f42:	4618      	mov	r0, r3
 8108f44:	3720      	adds	r7, #32
 8108f46:	46bd      	mov	sp, r7
 8108f48:	bd80      	pop	{r7, pc}

08108f4a <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108f4a:	b580      	push	{r7, lr}
 8108f4c:	b088      	sub	sp, #32
 8108f4e:	af00      	add	r7, sp, #0
 8108f50:	6078      	str	r0, [r7, #4]
 8108f52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8108f54:	683b      	ldr	r3, [r7, #0]
 8108f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8108f58:	2306      	movs	r3, #6
 8108f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108f62:	2300      	movs	r3, #0
 8108f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108f6c:	f107 0308 	add.w	r3, r7, #8
 8108f70:	4619      	mov	r1, r3
 8108f72:	6878      	ldr	r0, [r7, #4]
 8108f74:	f7ff fe68 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8108f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8108f7c:	2106      	movs	r1, #6
 8108f7e:	6878      	ldr	r0, [r7, #4]
 8108f80:	f000 f82a 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108f86:	69fb      	ldr	r3, [r7, #28]
}
 8108f88:	4618      	mov	r0, r3
 8108f8a:	3720      	adds	r7, #32
 8108f8c:	46bd      	mov	sp, r7
 8108f8e:	bd80      	pop	{r7, pc}

08108f90 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8108f90:	b580      	push	{r7, lr}
 8108f92:	b088      	sub	sp, #32
 8108f94:	af00      	add	r7, sp, #0
 8108f96:	6078      	str	r0, [r7, #4]
 8108f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8108f9a:	683b      	ldr	r3, [r7, #0]
 8108f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8108f9e:	2308      	movs	r3, #8
 8108fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8108fa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108fa8:	2300      	movs	r3, #0
 8108faa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8108fb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108fb2:	f107 0308 	add.w	r3, r7, #8
 8108fb6:	4619      	mov	r1, r3
 8108fb8:	6878      	ldr	r0, [r7, #4]
 8108fba:	f7ff fe45 	bl	8108c48 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 8108fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8108fc2:	2108      	movs	r1, #8
 8108fc4:	6878      	ldr	r0, [r7, #4]
 8108fc6:	f000 f807 	bl	8108fd8 <SDMMC_GetCmdResp1>
 8108fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108fcc:	69fb      	ldr	r3, [r7, #28]
}
 8108fce:	4618      	mov	r0, r3
 8108fd0:	3720      	adds	r7, #32
 8108fd2:	46bd      	mov	sp, r7
 8108fd4:	bd80      	pop	{r7, pc}
	...

08108fd8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8108fd8:	b580      	push	{r7, lr}
 8108fda:	b088      	sub	sp, #32
 8108fdc:	af00      	add	r7, sp, #0
 8108fde:	60f8      	str	r0, [r7, #12]
 8108fe0:	460b      	mov	r3, r1
 8108fe2:	607a      	str	r2, [r7, #4]
 8108fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8108fe6:	4b70      	ldr	r3, [pc, #448]	; (81091a8 <SDMMC_GetCmdResp1+0x1d0>)
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	4a70      	ldr	r2, [pc, #448]	; (81091ac <SDMMC_GetCmdResp1+0x1d4>)
 8108fec:	fba2 2303 	umull	r2, r3, r2, r3
 8108ff0:	0a5a      	lsrs	r2, r3, #9
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	fb02 f303 	mul.w	r3, r2, r3
 8108ff8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8108ffa:	69fb      	ldr	r3, [r7, #28]
 8108ffc:	1e5a      	subs	r2, r3, #1
 8108ffe:	61fa      	str	r2, [r7, #28]
 8109000:	2b00      	cmp	r3, #0
 8109002:	d102      	bne.n	810900a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109008:	e0c9      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810900a:	68fb      	ldr	r3, [r7, #12]
 810900c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810900e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8109010:	69ba      	ldr	r2, [r7, #24]
 8109012:	4b67      	ldr	r3, [pc, #412]	; (81091b0 <SDMMC_GetCmdResp1+0x1d8>)
 8109014:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8109016:	2b00      	cmp	r3, #0
 8109018:	d0ef      	beq.n	8108ffa <SDMMC_GetCmdResp1+0x22>
 810901a:	69bb      	ldr	r3, [r7, #24]
 810901c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109020:	2b00      	cmp	r3, #0
 8109022:	d1ea      	bne.n	8108ffa <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109024:	68fb      	ldr	r3, [r7, #12]
 8109026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109028:	f003 0304 	and.w	r3, r3, #4
 810902c:	2b00      	cmp	r3, #0
 810902e:	d004      	beq.n	810903a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109030:	68fb      	ldr	r3, [r7, #12]
 8109032:	2204      	movs	r2, #4
 8109034:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8109036:	2304      	movs	r3, #4
 8109038:	e0b1      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810903a:	68fb      	ldr	r3, [r7, #12]
 810903c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810903e:	f003 0301 	and.w	r3, r3, #1
 8109042:	2b00      	cmp	r3, #0
 8109044:	d004      	beq.n	8109050 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8109046:	68fb      	ldr	r3, [r7, #12]
 8109048:	2201      	movs	r2, #1
 810904a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810904c:	2301      	movs	r3, #1
 810904e:	e0a6      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109050:	68fb      	ldr	r3, [r7, #12]
 8109052:	4a58      	ldr	r2, [pc, #352]	; (81091b4 <SDMMC_GetCmdResp1+0x1dc>)
 8109054:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8109056:	68f8      	ldr	r0, [r7, #12]
 8109058:	f7ff fe20 	bl	8108c9c <SDMMC_GetCommandResponse>
 810905c:	4603      	mov	r3, r0
 810905e:	461a      	mov	r2, r3
 8109060:	7afb      	ldrb	r3, [r7, #11]
 8109062:	4293      	cmp	r3, r2
 8109064:	d001      	beq.n	810906a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8109066:	2301      	movs	r3, #1
 8109068:	e099      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810906a:	2100      	movs	r1, #0
 810906c:	68f8      	ldr	r0, [r7, #12]
 810906e:	f7ff fe22 	bl	8108cb6 <SDMMC_GetResponse>
 8109072:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8109074:	697a      	ldr	r2, [r7, #20]
 8109076:	4b50      	ldr	r3, [pc, #320]	; (81091b8 <SDMMC_GetCmdResp1+0x1e0>)
 8109078:	4013      	ands	r3, r2
 810907a:	2b00      	cmp	r3, #0
 810907c:	d101      	bne.n	8109082 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810907e:	2300      	movs	r3, #0
 8109080:	e08d      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8109082:	697b      	ldr	r3, [r7, #20]
 8109084:	2b00      	cmp	r3, #0
 8109086:	da02      	bge.n	810908e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8109088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810908c:	e087      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810908e:	697b      	ldr	r3, [r7, #20]
 8109090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109094:	2b00      	cmp	r3, #0
 8109096:	d001      	beq.n	810909c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8109098:	2340      	movs	r3, #64	; 0x40
 810909a:	e080      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810909c:	697b      	ldr	r3, [r7, #20]
 810909e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81090a2:	2b00      	cmp	r3, #0
 81090a4:	d001      	beq.n	81090aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 81090a6:	2380      	movs	r3, #128	; 0x80
 81090a8:	e079      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 81090aa:	697b      	ldr	r3, [r7, #20]
 81090ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81090b0:	2b00      	cmp	r3, #0
 81090b2:	d002      	beq.n	81090ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 81090b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81090b8:	e071      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 81090ba:	697b      	ldr	r3, [r7, #20]
 81090bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81090c0:	2b00      	cmp	r3, #0
 81090c2:	d002      	beq.n	81090ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 81090c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81090c8:	e069      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 81090ca:	697b      	ldr	r3, [r7, #20]
 81090cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81090d0:	2b00      	cmp	r3, #0
 81090d2:	d002      	beq.n	81090da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 81090d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81090d8:	e061      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 81090da:	697b      	ldr	r3, [r7, #20]
 81090dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81090e0:	2b00      	cmp	r3, #0
 81090e2:	d002      	beq.n	81090ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 81090e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81090e8:	e059      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 81090ea:	697b      	ldr	r3, [r7, #20]
 81090ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81090f0:	2b00      	cmp	r3, #0
 81090f2:	d002      	beq.n	81090fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 81090f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81090f8:	e051      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 81090fa:	697b      	ldr	r3, [r7, #20]
 81090fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8109100:	2b00      	cmp	r3, #0
 8109102:	d002      	beq.n	810910a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8109104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8109108:	e049      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810910a:	697b      	ldr	r3, [r7, #20]
 810910c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109110:	2b00      	cmp	r3, #0
 8109112:	d002      	beq.n	810911a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8109114:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8109118:	e041      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810911a:	697b      	ldr	r3, [r7, #20]
 810911c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109120:	2b00      	cmp	r3, #0
 8109122:	d002      	beq.n	810912a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8109124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109128:	e039      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810912a:	697b      	ldr	r3, [r7, #20]
 810912c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109130:	2b00      	cmp	r3, #0
 8109132:	d002      	beq.n	810913a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8109134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8109138:	e031      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810913a:	697b      	ldr	r3, [r7, #20]
 810913c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109140:	2b00      	cmp	r3, #0
 8109142:	d002      	beq.n	810914a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8109144:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8109148:	e029      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810914a:	697b      	ldr	r3, [r7, #20]
 810914c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109150:	2b00      	cmp	r3, #0
 8109152:	d002      	beq.n	810915a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8109154:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8109158:	e021      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810915a:	697b      	ldr	r3, [r7, #20]
 810915c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109160:	2b00      	cmp	r3, #0
 8109162:	d002      	beq.n	810916a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8109164:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8109168:	e019      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810916a:	697b      	ldr	r3, [r7, #20]
 810916c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109170:	2b00      	cmp	r3, #0
 8109172:	d002      	beq.n	810917a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8109174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8109178:	e011      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810917a:	697b      	ldr	r3, [r7, #20]
 810917c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8109180:	2b00      	cmp	r3, #0
 8109182:	d002      	beq.n	810918a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8109184:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8109188:	e009      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810918a:	697b      	ldr	r3, [r7, #20]
 810918c:	f003 0308 	and.w	r3, r3, #8
 8109190:	2b00      	cmp	r3, #0
 8109192:	d002      	beq.n	810919a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8109194:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8109198:	e001      	b.n	810919e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810919a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810919e:	4618      	mov	r0, r3
 81091a0:	3720      	adds	r7, #32
 81091a2:	46bd      	mov	sp, r7
 81091a4:	bd80      	pop	{r7, pc}
 81091a6:	bf00      	nop
 81091a8:	10000000 	.word	0x10000000
 81091ac:	10624dd3 	.word	0x10624dd3
 81091b0:	00200045 	.word	0x00200045
 81091b4:	002000c5 	.word	0x002000c5
 81091b8:	fdffe008 	.word	0xfdffe008

081091bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 81091bc:	b480      	push	{r7}
 81091be:	b085      	sub	sp, #20
 81091c0:	af00      	add	r7, sp, #0
 81091c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81091c4:	4b1f      	ldr	r3, [pc, #124]	; (8109244 <SDMMC_GetCmdResp2+0x88>)
 81091c6:	681b      	ldr	r3, [r3, #0]
 81091c8:	4a1f      	ldr	r2, [pc, #124]	; (8109248 <SDMMC_GetCmdResp2+0x8c>)
 81091ca:	fba2 2303 	umull	r2, r3, r2, r3
 81091ce:	0a5b      	lsrs	r3, r3, #9
 81091d0:	f241 3288 	movw	r2, #5000	; 0x1388
 81091d4:	fb02 f303 	mul.w	r3, r2, r3
 81091d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81091da:	68fb      	ldr	r3, [r7, #12]
 81091dc:	1e5a      	subs	r2, r3, #1
 81091de:	60fa      	str	r2, [r7, #12]
 81091e0:	2b00      	cmp	r3, #0
 81091e2:	d102      	bne.n	81091ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81091e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81091e8:	e026      	b.n	8109238 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81091ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81091f0:	68bb      	ldr	r3, [r7, #8]
 81091f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81091f6:	2b00      	cmp	r3, #0
 81091f8:	d0ef      	beq.n	81091da <SDMMC_GetCmdResp2+0x1e>
 81091fa:	68bb      	ldr	r3, [r7, #8]
 81091fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109200:	2b00      	cmp	r3, #0
 8109202:	d1ea      	bne.n	81091da <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109208:	f003 0304 	and.w	r3, r3, #4
 810920c:	2b00      	cmp	r3, #0
 810920e:	d004      	beq.n	810921a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	2204      	movs	r2, #4
 8109214:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8109216:	2304      	movs	r3, #4
 8109218:	e00e      	b.n	8109238 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810921e:	f003 0301 	and.w	r3, r3, #1
 8109222:	2b00      	cmp	r3, #0
 8109224:	d004      	beq.n	8109230 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8109226:	687b      	ldr	r3, [r7, #4]
 8109228:	2201      	movs	r2, #1
 810922a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810922c:	2301      	movs	r3, #1
 810922e:	e003      	b.n	8109238 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	4a06      	ldr	r2, [pc, #24]	; (810924c <SDMMC_GetCmdResp2+0x90>)
 8109234:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8109236:	2300      	movs	r3, #0
}
 8109238:	4618      	mov	r0, r3
 810923a:	3714      	adds	r7, #20
 810923c:	46bd      	mov	sp, r7
 810923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109242:	4770      	bx	lr
 8109244:	10000000 	.word	0x10000000
 8109248:	10624dd3 	.word	0x10624dd3
 810924c:	002000c5 	.word	0x002000c5

08109250 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8109250:	b480      	push	{r7}
 8109252:	b085      	sub	sp, #20
 8109254:	af00      	add	r7, sp, #0
 8109256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8109258:	4b1a      	ldr	r3, [pc, #104]	; (81092c4 <SDMMC_GetCmdResp3+0x74>)
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	4a1a      	ldr	r2, [pc, #104]	; (81092c8 <SDMMC_GetCmdResp3+0x78>)
 810925e:	fba2 2303 	umull	r2, r3, r2, r3
 8109262:	0a5b      	lsrs	r3, r3, #9
 8109264:	f241 3288 	movw	r2, #5000	; 0x1388
 8109268:	fb02 f303 	mul.w	r3, r2, r3
 810926c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810926e:	68fb      	ldr	r3, [r7, #12]
 8109270:	1e5a      	subs	r2, r3, #1
 8109272:	60fa      	str	r2, [r7, #12]
 8109274:	2b00      	cmp	r3, #0
 8109276:	d102      	bne.n	810927e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8109278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810927c:	e01b      	b.n	81092b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810927e:	687b      	ldr	r3, [r7, #4]
 8109280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109282:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109284:	68bb      	ldr	r3, [r7, #8]
 8109286:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810928a:	2b00      	cmp	r3, #0
 810928c:	d0ef      	beq.n	810926e <SDMMC_GetCmdResp3+0x1e>
 810928e:	68bb      	ldr	r3, [r7, #8]
 8109290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8109294:	2b00      	cmp	r3, #0
 8109296:	d1ea      	bne.n	810926e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810929c:	f003 0304 	and.w	r3, r3, #4
 81092a0:	2b00      	cmp	r3, #0
 81092a2:	d004      	beq.n	81092ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	2204      	movs	r2, #4
 81092a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81092aa:	2304      	movs	r3, #4
 81092ac:	e003      	b.n	81092b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	4a06      	ldr	r2, [pc, #24]	; (81092cc <SDMMC_GetCmdResp3+0x7c>)
 81092b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 81092b4:	2300      	movs	r3, #0
}
 81092b6:	4618      	mov	r0, r3
 81092b8:	3714      	adds	r7, #20
 81092ba:	46bd      	mov	sp, r7
 81092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092c0:	4770      	bx	lr
 81092c2:	bf00      	nop
 81092c4:	10000000 	.word	0x10000000
 81092c8:	10624dd3 	.word	0x10624dd3
 81092cc:	002000c5 	.word	0x002000c5

081092d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 81092d0:	b480      	push	{r7}
 81092d2:	b085      	sub	sp, #20
 81092d4:	af00      	add	r7, sp, #0
 81092d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81092d8:	4b11      	ldr	r3, [pc, #68]	; (8109320 <SDMMC_GetCmdError+0x50>)
 81092da:	681b      	ldr	r3, [r3, #0]
 81092dc:	4a11      	ldr	r2, [pc, #68]	; (8109324 <SDMMC_GetCmdError+0x54>)
 81092de:	fba2 2303 	umull	r2, r3, r2, r3
 81092e2:	0a5b      	lsrs	r3, r3, #9
 81092e4:	f241 3288 	movw	r2, #5000	; 0x1388
 81092e8:	fb02 f303 	mul.w	r3, r2, r3
 81092ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81092ee:	68fb      	ldr	r3, [r7, #12]
 81092f0:	1e5a      	subs	r2, r3, #1
 81092f2:	60fa      	str	r2, [r7, #12]
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d102      	bne.n	81092fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81092f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81092fc:	e009      	b.n	8109312 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109306:	2b00      	cmp	r3, #0
 8109308:	d0f1      	beq.n	81092ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	4a06      	ldr	r2, [pc, #24]	; (8109328 <SDMMC_GetCmdError+0x58>)
 810930e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8109310:	2300      	movs	r3, #0
}
 8109312:	4618      	mov	r0, r3
 8109314:	3714      	adds	r7, #20
 8109316:	46bd      	mov	sp, r7
 8109318:	f85d 7b04 	ldr.w	r7, [sp], #4
 810931c:	4770      	bx	lr
 810931e:	bf00      	nop
 8109320:	10000000 	.word	0x10000000
 8109324:	10624dd3 	.word	0x10624dd3
 8109328:	002000c5 	.word	0x002000c5

0810932c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810932c:	b084      	sub	sp, #16
 810932e:	b580      	push	{r7, lr}
 8109330:	b084      	sub	sp, #16
 8109332:	af00      	add	r7, sp, #0
 8109334:	6078      	str	r0, [r7, #4]
 8109336:	f107 001c 	add.w	r0, r7, #28
 810933a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109340:	2b01      	cmp	r3, #1
 8109342:	d122      	bne.n	810938a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8109350:	687b      	ldr	r3, [r7, #4]
 8109352:	68db      	ldr	r3, [r3, #12]
 8109354:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8109358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810935c:	687a      	ldr	r2, [r7, #4]
 810935e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	68db      	ldr	r3, [r3, #12]
 8109364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810936c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810936e:	2b01      	cmp	r3, #1
 8109370:	d105      	bne.n	810937e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8109372:	687b      	ldr	r3, [r7, #4]
 8109374:	68db      	ldr	r3, [r3, #12]
 8109376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810937e:	6878      	ldr	r0, [r7, #4]
 8109380:	f000 faaa 	bl	81098d8 <USB_CoreReset>
 8109384:	4603      	mov	r3, r0
 8109386:	73fb      	strb	r3, [r7, #15]
 8109388:	e01a      	b.n	81093c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810938a:	687b      	ldr	r3, [r7, #4]
 810938c:	68db      	ldr	r3, [r3, #12]
 810938e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8109396:	6878      	ldr	r0, [r7, #4]
 8109398:	f000 fa9e 	bl	81098d8 <USB_CoreReset>
 810939c:	4603      	mov	r3, r0
 810939e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 81093a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81093a2:	2b00      	cmp	r3, #0
 81093a4:	d106      	bne.n	81093b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81093a6:	687b      	ldr	r3, [r7, #4]
 81093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	639a      	str	r2, [r3, #56]	; 0x38
 81093b2:	e005      	b.n	81093c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81093b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81093bc:	687b      	ldr	r3, [r7, #4]
 81093be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 81093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81093c2:	2b01      	cmp	r3, #1
 81093c4:	d118      	bne.n	81093f8 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81093ca:	b29a      	uxth	r2, r3
 81093cc:	687b      	ldr	r3, [r7, #4]
 81093ce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81093d4:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 81093d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81093dc:	687a      	ldr	r2, [r7, #4]
 81093de:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 81093e0:	687b      	ldr	r3, [r7, #4]
 81093e2:	689b      	ldr	r3, [r3, #8]
 81093e4:	f043 0206 	orr.w	r2, r3, #6
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	689b      	ldr	r3, [r3, #8]
 81093f0:	f043 0220 	orr.w	r2, r3, #32
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 81093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 81093fa:	4618      	mov	r0, r3
 81093fc:	3710      	adds	r7, #16
 81093fe:	46bd      	mov	sp, r7
 8109400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109404:	b004      	add	sp, #16
 8109406:	4770      	bx	lr

08109408 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8109408:	b480      	push	{r7}
 810940a:	b083      	sub	sp, #12
 810940c:	af00      	add	r7, sp, #0
 810940e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	689b      	ldr	r3, [r3, #8]
 8109414:	f023 0201 	bic.w	r2, r3, #1
 8109418:	687b      	ldr	r3, [r7, #4]
 810941a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810941c:	2300      	movs	r3, #0
}
 810941e:	4618      	mov	r0, r3
 8109420:	370c      	adds	r7, #12
 8109422:	46bd      	mov	sp, r7
 8109424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109428:	4770      	bx	lr

0810942a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810942a:	b580      	push	{r7, lr}
 810942c:	b084      	sub	sp, #16
 810942e:	af00      	add	r7, sp, #0
 8109430:	6078      	str	r0, [r7, #4]
 8109432:	460b      	mov	r3, r1
 8109434:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8109436:	2300      	movs	r3, #0
 8109438:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	68db      	ldr	r3, [r3, #12]
 810943e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8109446:	78fb      	ldrb	r3, [r7, #3]
 8109448:	2b01      	cmp	r3, #1
 810944a:	d115      	bne.n	8109478 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810944c:	687b      	ldr	r3, [r7, #4]
 810944e:	68db      	ldr	r3, [r3, #12]
 8109450:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8109454:	687b      	ldr	r3, [r7, #4]
 8109456:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8109458:	2001      	movs	r0, #1
 810945a:	f7f8 fbbb 	bl	8101bd4 <HAL_Delay>
      ms++;
 810945e:	68fb      	ldr	r3, [r7, #12]
 8109460:	3301      	adds	r3, #1
 8109462:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8109464:	6878      	ldr	r0, [r7, #4]
 8109466:	f000 fa29 	bl	81098bc <USB_GetMode>
 810946a:	4603      	mov	r3, r0
 810946c:	2b01      	cmp	r3, #1
 810946e:	d01e      	beq.n	81094ae <USB_SetCurrentMode+0x84>
 8109470:	68fb      	ldr	r3, [r7, #12]
 8109472:	2b31      	cmp	r3, #49	; 0x31
 8109474:	d9f0      	bls.n	8109458 <USB_SetCurrentMode+0x2e>
 8109476:	e01a      	b.n	81094ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8109478:	78fb      	ldrb	r3, [r7, #3]
 810947a:	2b00      	cmp	r3, #0
 810947c:	d115      	bne.n	81094aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	68db      	ldr	r3, [r3, #12]
 8109482:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8109486:	687b      	ldr	r3, [r7, #4]
 8109488:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810948a:	2001      	movs	r0, #1
 810948c:	f7f8 fba2 	bl	8101bd4 <HAL_Delay>
      ms++;
 8109490:	68fb      	ldr	r3, [r7, #12]
 8109492:	3301      	adds	r3, #1
 8109494:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8109496:	6878      	ldr	r0, [r7, #4]
 8109498:	f000 fa10 	bl	81098bc <USB_GetMode>
 810949c:	4603      	mov	r3, r0
 810949e:	2b00      	cmp	r3, #0
 81094a0:	d005      	beq.n	81094ae <USB_SetCurrentMode+0x84>
 81094a2:	68fb      	ldr	r3, [r7, #12]
 81094a4:	2b31      	cmp	r3, #49	; 0x31
 81094a6:	d9f0      	bls.n	810948a <USB_SetCurrentMode+0x60>
 81094a8:	e001      	b.n	81094ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 81094aa:	2301      	movs	r3, #1
 81094ac:	e005      	b.n	81094ba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 81094ae:	68fb      	ldr	r3, [r7, #12]
 81094b0:	2b32      	cmp	r3, #50	; 0x32
 81094b2:	d101      	bne.n	81094b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 81094b4:	2301      	movs	r3, #1
 81094b6:	e000      	b.n	81094ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 81094b8:	2300      	movs	r3, #0
}
 81094ba:	4618      	mov	r0, r3
 81094bc:	3710      	adds	r7, #16
 81094be:	46bd      	mov	sp, r7
 81094c0:	bd80      	pop	{r7, pc}
	...

081094c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81094c4:	b084      	sub	sp, #16
 81094c6:	b580      	push	{r7, lr}
 81094c8:	b086      	sub	sp, #24
 81094ca:	af00      	add	r7, sp, #0
 81094cc:	6078      	str	r0, [r7, #4]
 81094ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 81094d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 81094d6:	2300      	movs	r3, #0
 81094d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 81094de:	2300      	movs	r3, #0
 81094e0:	613b      	str	r3, [r7, #16]
 81094e2:	e009      	b.n	81094f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 81094e4:	687a      	ldr	r2, [r7, #4]
 81094e6:	693b      	ldr	r3, [r7, #16]
 81094e8:	3340      	adds	r3, #64	; 0x40
 81094ea:	009b      	lsls	r3, r3, #2
 81094ec:	4413      	add	r3, r2
 81094ee:	2200      	movs	r2, #0
 81094f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 81094f2:	693b      	ldr	r3, [r7, #16]
 81094f4:	3301      	adds	r3, #1
 81094f6:	613b      	str	r3, [r7, #16]
 81094f8:	693b      	ldr	r3, [r7, #16]
 81094fa:	2b0e      	cmp	r3, #14
 81094fc:	d9f2      	bls.n	81094e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 81094fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109500:	2b00      	cmp	r3, #0
 8109502:	d11c      	bne.n	810953e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8109504:	68fb      	ldr	r3, [r7, #12]
 8109506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810950a:	685b      	ldr	r3, [r3, #4]
 810950c:	68fa      	ldr	r2, [r7, #12]
 810950e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8109512:	f043 0302 	orr.w	r3, r3, #2
 8109516:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8109518:	687b      	ldr	r3, [r7, #4]
 810951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810951c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8109520:	687b      	ldr	r3, [r7, #4]
 8109522:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8109524:	687b      	ldr	r3, [r7, #4]
 8109526:	681b      	ldr	r3, [r3, #0]
 8109528:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810952c:	687b      	ldr	r3, [r7, #4]
 810952e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8109530:	687b      	ldr	r3, [r7, #4]
 8109532:	681b      	ldr	r3, [r3, #0]
 8109534:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8109538:	687b      	ldr	r3, [r7, #4]
 810953a:	601a      	str	r2, [r3, #0]
 810953c:	e005      	b.n	810954a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109542:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810954a:	68fb      	ldr	r3, [r7, #12]
 810954c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8109550:	461a      	mov	r2, r3
 8109552:	2300      	movs	r3, #0
 8109554:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8109556:	68fb      	ldr	r3, [r7, #12]
 8109558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810955c:	4619      	mov	r1, r3
 810955e:	68fb      	ldr	r3, [r7, #12]
 8109560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8109564:	461a      	mov	r2, r3
 8109566:	680b      	ldr	r3, [r1, #0]
 8109568:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810956c:	2b01      	cmp	r3, #1
 810956e:	d10c      	bne.n	810958a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8109570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109572:	2b00      	cmp	r3, #0
 8109574:	d104      	bne.n	8109580 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8109576:	2100      	movs	r1, #0
 8109578:	6878      	ldr	r0, [r7, #4]
 810957a:	f000 f965 	bl	8109848 <USB_SetDevSpeed>
 810957e:	e008      	b.n	8109592 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8109580:	2101      	movs	r1, #1
 8109582:	6878      	ldr	r0, [r7, #4]
 8109584:	f000 f960 	bl	8109848 <USB_SetDevSpeed>
 8109588:	e003      	b.n	8109592 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810958a:	2103      	movs	r1, #3
 810958c:	6878      	ldr	r0, [r7, #4]
 810958e:	f000 f95b 	bl	8109848 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8109592:	2110      	movs	r1, #16
 8109594:	6878      	ldr	r0, [r7, #4]
 8109596:	f000 f8f3 	bl	8109780 <USB_FlushTxFifo>
 810959a:	4603      	mov	r3, r0
 810959c:	2b00      	cmp	r3, #0
 810959e:	d001      	beq.n	81095a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 81095a0:	2301      	movs	r3, #1
 81095a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81095a4:	6878      	ldr	r0, [r7, #4]
 81095a6:	f000 f91f 	bl	81097e8 <USB_FlushRxFifo>
 81095aa:	4603      	mov	r3, r0
 81095ac:	2b00      	cmp	r3, #0
 81095ae:	d001      	beq.n	81095b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 81095b0:	2301      	movs	r3, #1
 81095b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81095b4:	68fb      	ldr	r3, [r7, #12]
 81095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81095ba:	461a      	mov	r2, r3
 81095bc:	2300      	movs	r3, #0
 81095be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81095c0:	68fb      	ldr	r3, [r7, #12]
 81095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81095c6:	461a      	mov	r2, r3
 81095c8:	2300      	movs	r3, #0
 81095ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 81095cc:	68fb      	ldr	r3, [r7, #12]
 81095ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81095d2:	461a      	mov	r2, r3
 81095d4:	2300      	movs	r3, #0
 81095d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81095d8:	2300      	movs	r3, #0
 81095da:	613b      	str	r3, [r7, #16]
 81095dc:	e043      	b.n	8109666 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81095de:	693b      	ldr	r3, [r7, #16]
 81095e0:	015a      	lsls	r2, r3, #5
 81095e2:	68fb      	ldr	r3, [r7, #12]
 81095e4:	4413      	add	r3, r2
 81095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 81095ea:	681b      	ldr	r3, [r3, #0]
 81095ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81095f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 81095f4:	d118      	bne.n	8109628 <USB_DevInit+0x164>
    {
      if (i == 0U)
 81095f6:	693b      	ldr	r3, [r7, #16]
 81095f8:	2b00      	cmp	r3, #0
 81095fa:	d10a      	bne.n	8109612 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 81095fc:	693b      	ldr	r3, [r7, #16]
 81095fe:	015a      	lsls	r2, r3, #5
 8109600:	68fb      	ldr	r3, [r7, #12]
 8109602:	4413      	add	r3, r2
 8109604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8109608:	461a      	mov	r2, r3
 810960a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810960e:	6013      	str	r3, [r2, #0]
 8109610:	e013      	b.n	810963a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8109612:	693b      	ldr	r3, [r7, #16]
 8109614:	015a      	lsls	r2, r3, #5
 8109616:	68fb      	ldr	r3, [r7, #12]
 8109618:	4413      	add	r3, r2
 810961a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810961e:	461a      	mov	r2, r3
 8109620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8109624:	6013      	str	r3, [r2, #0]
 8109626:	e008      	b.n	810963a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8109628:	693b      	ldr	r3, [r7, #16]
 810962a:	015a      	lsls	r2, r3, #5
 810962c:	68fb      	ldr	r3, [r7, #12]
 810962e:	4413      	add	r3, r2
 8109630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8109634:	461a      	mov	r2, r3
 8109636:	2300      	movs	r3, #0
 8109638:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810963a:	693b      	ldr	r3, [r7, #16]
 810963c:	015a      	lsls	r2, r3, #5
 810963e:	68fb      	ldr	r3, [r7, #12]
 8109640:	4413      	add	r3, r2
 8109642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8109646:	461a      	mov	r2, r3
 8109648:	2300      	movs	r3, #0
 810964a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810964c:	693b      	ldr	r3, [r7, #16]
 810964e:	015a      	lsls	r2, r3, #5
 8109650:	68fb      	ldr	r3, [r7, #12]
 8109652:	4413      	add	r3, r2
 8109654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8109658:	461a      	mov	r2, r3
 810965a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810965e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8109660:	693b      	ldr	r3, [r7, #16]
 8109662:	3301      	adds	r3, #1
 8109664:	613b      	str	r3, [r7, #16]
 8109666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109668:	693a      	ldr	r2, [r7, #16]
 810966a:	429a      	cmp	r2, r3
 810966c:	d3b7      	bcc.n	81095de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810966e:	2300      	movs	r3, #0
 8109670:	613b      	str	r3, [r7, #16]
 8109672:	e043      	b.n	81096fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8109674:	693b      	ldr	r3, [r7, #16]
 8109676:	015a      	lsls	r2, r3, #5
 8109678:	68fb      	ldr	r3, [r7, #12]
 810967a:	4413      	add	r3, r2
 810967c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8109680:	681b      	ldr	r3, [r3, #0]
 8109682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8109686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810968a:	d118      	bne.n	81096be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810968c:	693b      	ldr	r3, [r7, #16]
 810968e:	2b00      	cmp	r3, #0
 8109690:	d10a      	bne.n	81096a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8109692:	693b      	ldr	r3, [r7, #16]
 8109694:	015a      	lsls	r2, r3, #5
 8109696:	68fb      	ldr	r3, [r7, #12]
 8109698:	4413      	add	r3, r2
 810969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810969e:	461a      	mov	r2, r3
 81096a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81096a4:	6013      	str	r3, [r2, #0]
 81096a6:	e013      	b.n	81096d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 81096a8:	693b      	ldr	r3, [r7, #16]
 81096aa:	015a      	lsls	r2, r3, #5
 81096ac:	68fb      	ldr	r3, [r7, #12]
 81096ae:	4413      	add	r3, r2
 81096b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81096b4:	461a      	mov	r2, r3
 81096b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 81096ba:	6013      	str	r3, [r2, #0]
 81096bc:	e008      	b.n	81096d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 81096be:	693b      	ldr	r3, [r7, #16]
 81096c0:	015a      	lsls	r2, r3, #5
 81096c2:	68fb      	ldr	r3, [r7, #12]
 81096c4:	4413      	add	r3, r2
 81096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81096ca:	461a      	mov	r2, r3
 81096cc:	2300      	movs	r3, #0
 81096ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 81096d0:	693b      	ldr	r3, [r7, #16]
 81096d2:	015a      	lsls	r2, r3, #5
 81096d4:	68fb      	ldr	r3, [r7, #12]
 81096d6:	4413      	add	r3, r2
 81096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81096dc:	461a      	mov	r2, r3
 81096de:	2300      	movs	r3, #0
 81096e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 81096e2:	693b      	ldr	r3, [r7, #16]
 81096e4:	015a      	lsls	r2, r3, #5
 81096e6:	68fb      	ldr	r3, [r7, #12]
 81096e8:	4413      	add	r3, r2
 81096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 81096ee:	461a      	mov	r2, r3
 81096f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 81096f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 81096f6:	693b      	ldr	r3, [r7, #16]
 81096f8:	3301      	adds	r3, #1
 81096fa:	613b      	str	r3, [r7, #16]
 81096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81096fe:	693a      	ldr	r2, [r7, #16]
 8109700:	429a      	cmp	r2, r3
 8109702:	d3b7      	bcc.n	8109674 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8109704:	68fb      	ldr	r3, [r7, #12]
 8109706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810970a:	691b      	ldr	r3, [r3, #16]
 810970c:	68fa      	ldr	r2, [r7, #12]
 810970e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8109712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109716:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	2200      	movs	r2, #0
 810971c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8109724:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8109726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109728:	2b00      	cmp	r3, #0
 810972a:	d105      	bne.n	8109738 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810972c:	687b      	ldr	r3, [r7, #4]
 810972e:	699b      	ldr	r3, [r3, #24]
 8109730:	f043 0210 	orr.w	r2, r3, #16
 8109734:	687b      	ldr	r3, [r7, #4]
 8109736:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	699a      	ldr	r2, [r3, #24]
 810973c:	4b0f      	ldr	r3, [pc, #60]	; (810977c <USB_DevInit+0x2b8>)
 810973e:	4313      	orrs	r3, r2
 8109740:	687a      	ldr	r2, [r7, #4]
 8109742:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8109744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109746:	2b00      	cmp	r3, #0
 8109748:	d005      	beq.n	8109756 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	699b      	ldr	r3, [r3, #24]
 810974e:	f043 0208 	orr.w	r2, r3, #8
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8109756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109758:	2b01      	cmp	r3, #1
 810975a:	d107      	bne.n	810976c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810975c:	687b      	ldr	r3, [r7, #4]
 810975e:	699b      	ldr	r3, [r3, #24]
 8109760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8109764:	f043 0304 	orr.w	r3, r3, #4
 8109768:	687a      	ldr	r2, [r7, #4]
 810976a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810976c:	7dfb      	ldrb	r3, [r7, #23]
}
 810976e:	4618      	mov	r0, r3
 8109770:	3718      	adds	r7, #24
 8109772:	46bd      	mov	sp, r7
 8109774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8109778:	b004      	add	sp, #16
 810977a:	4770      	bx	lr
 810977c:	803c3800 	.word	0x803c3800

08109780 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8109780:	b480      	push	{r7}
 8109782:	b085      	sub	sp, #20
 8109784:	af00      	add	r7, sp, #0
 8109786:	6078      	str	r0, [r7, #4]
 8109788:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810978a:	2300      	movs	r3, #0
 810978c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810978e:	68fb      	ldr	r3, [r7, #12]
 8109790:	3301      	adds	r3, #1
 8109792:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8109794:	68fb      	ldr	r3, [r7, #12]
 8109796:	4a13      	ldr	r2, [pc, #76]	; (81097e4 <USB_FlushTxFifo+0x64>)
 8109798:	4293      	cmp	r3, r2
 810979a:	d901      	bls.n	81097a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810979c:	2303      	movs	r3, #3
 810979e:	e01b      	b.n	81097d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81097a0:	687b      	ldr	r3, [r7, #4]
 81097a2:	691b      	ldr	r3, [r3, #16]
 81097a4:	2b00      	cmp	r3, #0
 81097a6:	daf2      	bge.n	810978e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 81097a8:	2300      	movs	r3, #0
 81097aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 81097ac:	683b      	ldr	r3, [r7, #0]
 81097ae:	019b      	lsls	r3, r3, #6
 81097b0:	f043 0220 	orr.w	r2, r3, #32
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 81097b8:	68fb      	ldr	r3, [r7, #12]
 81097ba:	3301      	adds	r3, #1
 81097bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81097be:	68fb      	ldr	r3, [r7, #12]
 81097c0:	4a08      	ldr	r2, [pc, #32]	; (81097e4 <USB_FlushTxFifo+0x64>)
 81097c2:	4293      	cmp	r3, r2
 81097c4:	d901      	bls.n	81097ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 81097c6:	2303      	movs	r3, #3
 81097c8:	e006      	b.n	81097d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	691b      	ldr	r3, [r3, #16]
 81097ce:	f003 0320 	and.w	r3, r3, #32
 81097d2:	2b20      	cmp	r3, #32
 81097d4:	d0f0      	beq.n	81097b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 81097d6:	2300      	movs	r3, #0
}
 81097d8:	4618      	mov	r0, r3
 81097da:	3714      	adds	r7, #20
 81097dc:	46bd      	mov	sp, r7
 81097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097e2:	4770      	bx	lr
 81097e4:	00030d40 	.word	0x00030d40

081097e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 81097e8:	b480      	push	{r7}
 81097ea:	b085      	sub	sp, #20
 81097ec:	af00      	add	r7, sp, #0
 81097ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81097f0:	2300      	movs	r3, #0
 81097f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81097f4:	68fb      	ldr	r3, [r7, #12]
 81097f6:	3301      	adds	r3, #1
 81097f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81097fa:	68fb      	ldr	r3, [r7, #12]
 81097fc:	4a11      	ldr	r2, [pc, #68]	; (8109844 <USB_FlushRxFifo+0x5c>)
 81097fe:	4293      	cmp	r3, r2
 8109800:	d901      	bls.n	8109806 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8109802:	2303      	movs	r3, #3
 8109804:	e018      	b.n	8109838 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8109806:	687b      	ldr	r3, [r7, #4]
 8109808:	691b      	ldr	r3, [r3, #16]
 810980a:	2b00      	cmp	r3, #0
 810980c:	daf2      	bge.n	81097f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810980e:	2300      	movs	r3, #0
 8109810:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8109812:	687b      	ldr	r3, [r7, #4]
 8109814:	2210      	movs	r2, #16
 8109816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8109818:	68fb      	ldr	r3, [r7, #12]
 810981a:	3301      	adds	r3, #1
 810981c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810981e:	68fb      	ldr	r3, [r7, #12]
 8109820:	4a08      	ldr	r2, [pc, #32]	; (8109844 <USB_FlushRxFifo+0x5c>)
 8109822:	4293      	cmp	r3, r2
 8109824:	d901      	bls.n	810982a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8109826:	2303      	movs	r3, #3
 8109828:	e006      	b.n	8109838 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810982a:	687b      	ldr	r3, [r7, #4]
 810982c:	691b      	ldr	r3, [r3, #16]
 810982e:	f003 0310 	and.w	r3, r3, #16
 8109832:	2b10      	cmp	r3, #16
 8109834:	d0f0      	beq.n	8109818 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8109836:	2300      	movs	r3, #0
}
 8109838:	4618      	mov	r0, r3
 810983a:	3714      	adds	r7, #20
 810983c:	46bd      	mov	sp, r7
 810983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109842:	4770      	bx	lr
 8109844:	00030d40 	.word	0x00030d40

08109848 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8109848:	b480      	push	{r7}
 810984a:	b085      	sub	sp, #20
 810984c:	af00      	add	r7, sp, #0
 810984e:	6078      	str	r0, [r7, #4]
 8109850:	460b      	mov	r3, r1
 8109852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8109858:	68fb      	ldr	r3, [r7, #12]
 810985a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810985e:	681a      	ldr	r2, [r3, #0]
 8109860:	78fb      	ldrb	r3, [r7, #3]
 8109862:	68f9      	ldr	r1, [r7, #12]
 8109864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8109868:	4313      	orrs	r3, r2
 810986a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810986c:	2300      	movs	r3, #0
}
 810986e:	4618      	mov	r0, r3
 8109870:	3714      	adds	r7, #20
 8109872:	46bd      	mov	sp, r7
 8109874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109878:	4770      	bx	lr

0810987a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810987a:	b480      	push	{r7}
 810987c:	b085      	sub	sp, #20
 810987e:	af00      	add	r7, sp, #0
 8109880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8109886:	68fb      	ldr	r3, [r7, #12]
 8109888:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810988c:	681b      	ldr	r3, [r3, #0]
 810988e:	68fa      	ldr	r2, [r7, #12]
 8109890:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8109894:	f023 0303 	bic.w	r3, r3, #3
 8109898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810989a:	68fb      	ldr	r3, [r7, #12]
 810989c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81098a0:	685b      	ldr	r3, [r3, #4]
 81098a2:	68fa      	ldr	r2, [r7, #12]
 81098a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 81098a8:	f043 0302 	orr.w	r3, r3, #2
 81098ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 81098ae:	2300      	movs	r3, #0
}
 81098b0:	4618      	mov	r0, r3
 81098b2:	3714      	adds	r7, #20
 81098b4:	46bd      	mov	sp, r7
 81098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ba:	4770      	bx	lr

081098bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 81098bc:	b480      	push	{r7}
 81098be:	b083      	sub	sp, #12
 81098c0:	af00      	add	r7, sp, #0
 81098c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	695b      	ldr	r3, [r3, #20]
 81098c8:	f003 0301 	and.w	r3, r3, #1
}
 81098cc:	4618      	mov	r0, r3
 81098ce:	370c      	adds	r7, #12
 81098d0:	46bd      	mov	sp, r7
 81098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d6:	4770      	bx	lr

081098d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 81098d8:	b480      	push	{r7}
 81098da:	b085      	sub	sp, #20
 81098dc:	af00      	add	r7, sp, #0
 81098de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 81098e0:	2300      	movs	r3, #0
 81098e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 81098e4:	68fb      	ldr	r3, [r7, #12]
 81098e6:	3301      	adds	r3, #1
 81098e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 81098ea:	68fb      	ldr	r3, [r7, #12]
 81098ec:	4a13      	ldr	r2, [pc, #76]	; (810993c <USB_CoreReset+0x64>)
 81098ee:	4293      	cmp	r3, r2
 81098f0:	d901      	bls.n	81098f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 81098f2:	2303      	movs	r3, #3
 81098f4:	e01b      	b.n	810992e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	691b      	ldr	r3, [r3, #16]
 81098fa:	2b00      	cmp	r3, #0
 81098fc:	daf2      	bge.n	81098e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 81098fe:	2300      	movs	r3, #0
 8109900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8109902:	687b      	ldr	r3, [r7, #4]
 8109904:	691b      	ldr	r3, [r3, #16]
 8109906:	f043 0201 	orr.w	r2, r3, #1
 810990a:	687b      	ldr	r3, [r7, #4]
 810990c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810990e:	68fb      	ldr	r3, [r7, #12]
 8109910:	3301      	adds	r3, #1
 8109912:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8109914:	68fb      	ldr	r3, [r7, #12]
 8109916:	4a09      	ldr	r2, [pc, #36]	; (810993c <USB_CoreReset+0x64>)
 8109918:	4293      	cmp	r3, r2
 810991a:	d901      	bls.n	8109920 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810991c:	2303      	movs	r3, #3
 810991e:	e006      	b.n	810992e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8109920:	687b      	ldr	r3, [r7, #4]
 8109922:	691b      	ldr	r3, [r3, #16]
 8109924:	f003 0301 	and.w	r3, r3, #1
 8109928:	2b01      	cmp	r3, #1
 810992a:	d0f0      	beq.n	810990e <USB_CoreReset+0x36>

  return HAL_OK;
 810992c:	2300      	movs	r3, #0
}
 810992e:	4618      	mov	r0, r3
 8109930:	3714      	adds	r7, #20
 8109932:	46bd      	mov	sp, r7
 8109934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109938:	4770      	bx	lr
 810993a:	bf00      	nop
 810993c:	00030d40 	.word	0x00030d40

08109940 <__libc_init_array>:
 8109940:	b570      	push	{r4, r5, r6, lr}
 8109942:	4d0d      	ldr	r5, [pc, #52]	; (8109978 <__libc_init_array+0x38>)
 8109944:	4c0d      	ldr	r4, [pc, #52]	; (810997c <__libc_init_array+0x3c>)
 8109946:	1b64      	subs	r4, r4, r5
 8109948:	10a4      	asrs	r4, r4, #2
 810994a:	2600      	movs	r6, #0
 810994c:	42a6      	cmp	r6, r4
 810994e:	d109      	bne.n	8109964 <__libc_init_array+0x24>
 8109950:	4d0b      	ldr	r5, [pc, #44]	; (8109980 <__libc_init_array+0x40>)
 8109952:	4c0c      	ldr	r4, [pc, #48]	; (8109984 <__libc_init_array+0x44>)
 8109954:	f000 f82e 	bl	81099b4 <_init>
 8109958:	1b64      	subs	r4, r4, r5
 810995a:	10a4      	asrs	r4, r4, #2
 810995c:	2600      	movs	r6, #0
 810995e:	42a6      	cmp	r6, r4
 8109960:	d105      	bne.n	810996e <__libc_init_array+0x2e>
 8109962:	bd70      	pop	{r4, r5, r6, pc}
 8109964:	f855 3b04 	ldr.w	r3, [r5], #4
 8109968:	4798      	blx	r3
 810996a:	3601      	adds	r6, #1
 810996c:	e7ee      	b.n	810994c <__libc_init_array+0xc>
 810996e:	f855 3b04 	ldr.w	r3, [r5], #4
 8109972:	4798      	blx	r3
 8109974:	3601      	adds	r6, #1
 8109976:	e7f2      	b.n	810995e <__libc_init_array+0x1e>
 8109978:	08109a58 	.word	0x08109a58
 810997c:	08109a58 	.word	0x08109a58
 8109980:	08109a58 	.word	0x08109a58
 8109984:	08109a5c 	.word	0x08109a5c

08109988 <memcpy>:
 8109988:	440a      	add	r2, r1
 810998a:	4291      	cmp	r1, r2
 810998c:	f100 33ff 	add.w	r3, r0, #4294967295
 8109990:	d100      	bne.n	8109994 <memcpy+0xc>
 8109992:	4770      	bx	lr
 8109994:	b510      	push	{r4, lr}
 8109996:	f811 4b01 	ldrb.w	r4, [r1], #1
 810999a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810999e:	4291      	cmp	r1, r2
 81099a0:	d1f9      	bne.n	8109996 <memcpy+0xe>
 81099a2:	bd10      	pop	{r4, pc}

081099a4 <memset>:
 81099a4:	4402      	add	r2, r0
 81099a6:	4603      	mov	r3, r0
 81099a8:	4293      	cmp	r3, r2
 81099aa:	d100      	bne.n	81099ae <memset+0xa>
 81099ac:	4770      	bx	lr
 81099ae:	f803 1b01 	strb.w	r1, [r3], #1
 81099b2:	e7f9      	b.n	81099a8 <memset+0x4>

081099b4 <_init>:
 81099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81099b6:	bf00      	nop
 81099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81099ba:	bc08      	pop	{r3}
 81099bc:	469e      	mov	lr, r3
 81099be:	4770      	bx	lr

081099c0 <_fini>:
 81099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81099c2:	bf00      	nop
 81099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81099c6:	bc08      	pop	{r3}
 81099c8:	469e      	mov	lr, r3
 81099ca:	4770      	bx	lr
