
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002419c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee4  0802443c  0802443c  0003443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08026320  08026320  00036320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08026338  08026338  00064078  2**0
                  CONTENTS
  5 .ARM          00000000  08026338  08026338  00064078  2**0
                  CONTENTS
  6 .preinit_array 00000000  08026338  08026338  00064078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08026338  08026338  00036338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802634c  0802634c  0003634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  08026354  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000afec  2400012c  08026480  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b118  08026480  0004b118  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00064078  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00013ec0  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000ad378  00000000  00000000  000640a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00013ec0  00000000  00000000  0011141e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004448  00000000  00000000  001252e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003f30  00000000  00000000  00129728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00012f4b  00000000  00000000  0012d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004f72b  00000000  00000000  001405a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b32f8  00000000  00000000  0018fcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00342fc6  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000129c8  00000000  00000000  00343098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024424 	.word	0x08024424

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08024424 	.word	0x08024424

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fbaf 	bl	8000ae8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b64      	ldr	r3, [pc, #400]	; (800051c <main+0x19c>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5e      	ldr	r3, [pc, #376]	; (800051c <main+0x19c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x19c>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <main+0x19c>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x19c>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <main+0x19c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x19c>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4941      	ldr	r1, [pc, #260]	; (800051c <main+0x19c>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <main+0x19c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a38      	ldr	r2, [pc, #224]	; (800051c <main+0x19c>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <main+0x1a0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fb82 	bl	8000b7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f00c fa60 	bl	800c93c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f85e 	bl	800053c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b27      	ldr	r3, [pc, #156]	; (8000520 <main+0x1a0>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <main+0x1a0>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <main+0x1a0>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00d f98e 	bl	800d7c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f00d f9a4 	bl	800d7f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <main+0x1a0>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb54 	bl	8000b7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa08 	bl	80008e8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f982 	bl	80007e0 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9ae 	bl	800083c <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fa 	bl	80006d8 <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f8fb 	bl	80016e6 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f006 fa2e 	bl	8006950 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <main+0x1a4>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	f006 fa73 	bl	80069e4 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x1ac>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	2100      	movs	r1, #0
 8000508:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	f006 fa6b 	bl	80069e4 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <main+0x1b8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f006 fa40 	bl	8006998 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x198>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	58024400 	.word	0x58024400
 8000524:	080250bc 	.word	0x080250bc
 8000528:	08000ad9 	.word	0x08000ad9
 800052c:	240002fc 	.word	0x240002fc
 8000530:	080250e0 	.word	0x080250e0
 8000534:	080016f3 	.word	0x080016f3
 8000538:	24000300 	.word	0x24000300

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b09c      	sub	sp, #112	; 0x70
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	224c      	movs	r2, #76	; 0x4c
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f022 ff46 	bl	80233dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2220      	movs	r2, #32
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f022 ff40 	bl	80233dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800055c:	2004      	movs	r0, #4
 800055e:	f00e fcb3 	bl	800eec8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	4b39      	ldr	r3, [pc, #228]	; (800064c <SystemClock_Config+0x110>)
 8000568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056a:	4a38      	ldr	r2, [pc, #224]	; (800064c <SystemClock_Config+0x110>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000572:	4b36      	ldr	r3, [pc, #216]	; (800064c <SystemClock_Config+0x110>)
 8000574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <SystemClock_Config+0x114>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a33      	ldr	r2, [pc, #204]	; (8000650 <SystemClock_Config+0x114>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0x114>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000594:	bf00      	nop
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x114>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a2:	d1f8      	bne.n	8000596 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x118>)
 80005a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a8:	f023 0303 	bic.w	r3, r3, #3
 80005ac:	4a29      	ldr	r2, [pc, #164]	; (8000654 <SystemClock_Config+0x118>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d2:	23a0      	movs	r3, #160	; 0xa0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f00f fba4 	bl	800fd40 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fabd 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	; 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	; 0x40
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f00f ffb7 	bl	801059c <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000634:	f000 faa2 	bl	8000b7c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f010 f962 	bl	8010908 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	; 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800
 8000654:	58024400 	.word	0x58024400

08000658 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_CRC_Init+0x3c>)
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <MX_CRC_Init+0x40>)
 8000660:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_CRC_Init+0x3c>)
 8000664:	2200      	movs	r2, #0
 8000666:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_CRC_Init+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_CRC_Init+0x3c>)
 800067c:	2201      	movs	r2, #1
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_CRC_Init+0x3c>)
 8000682:	f00c fb51 	bl	800cd28 <HAL_CRC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800068c:	f000 fa76 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	24000148 	.word	0x24000148
 8000698:	58024c00 	.word	0x58024c00

0800069c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_DMA2D_Init+0x38>)
 80006a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006ac:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_DMA2D_Init+0x34>)
 80006bc:	f00c fc1e 	bl	800cefc <HAL_DMA2D_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006c6:	f000 fa59 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2400016c 	.word	0x2400016c
 80006d4:	52001000 	.word	0x52001000

080006d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006de:	f000 fa53 	bl	8000b88 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2234      	movs	r2, #52	; 0x34
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f022 fe77 	bl	80233dc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006ee:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <MX_LTDC_Init+0x104>)
 80006f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f4:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fa:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_LTDC_Init+0x100>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000700:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_LTDC_Init+0x100>)
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000714:	2209      	movs	r2, #9
 8000716:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_LTDC_Init+0x100>)
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000720:	220b      	movs	r2, #11
 8000722:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000726:	f240 2215 	movw	r2, #533	; 0x215
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_LTDC_Init+0x100>)
 800072e:	f240 121b 	movw	r2, #283	; 0x11b
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000736:	f240 2235 	movw	r2, #565	; 0x235
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_LTDC_Init+0x100>)
 800073e:	f240 121d 	movw	r2, #285	; 0x11d
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_LTDC_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LTDC_Init+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800075c:	481e      	ldr	r0, [pc, #120]	; (80007d8 <MX_LTDC_Init+0x100>)
 800075e:	f00d feb7 	bl	800e4d0 <HAL_LTDC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 fa08 	bl	8000b7c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000770:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000774:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800077e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000784:	23ff      	movs	r3, #255	; 0xff
 8000786:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800078c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000790:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000792:	2305      	movs	r3, #5
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000796:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800079c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LTDC_Init+0x100>)
 80007c2:	f00e f80d 	bl	800e7e0 <HAL_LTDC_ConfigLayer>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007cc:	f000 f9d6 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	240001d4 	.word	0x240001d4
 80007dc:	50001000 	.word	0x50001000

080007e0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_QUADSPI_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007f8:	2210      	movs	r2, #16
 80007fa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_QUADSPI_Init+0x50>)
 80007fe:	221a      	movs	r2, #26
 8000800:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_QUADSPI_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_QUADSPI_Init+0x50>)
 8000818:	f00e fbb0 	bl	800ef7c <HAL_QSPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f9ab 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_QUADSPI_Init+0x58>)
 8000828:	f000 fa22 	bl	8000c70 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2400027c 	.word	0x2400027c
 8000834:	52005000 	.word	0x52005000
 8000838:	08000b7d 	.word	0x08000b7d

0800083c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FMC_Init+0xa0>)
 8000856:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_FMC_Init+0xa4>)
 8000858:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FMC_Init+0xa0>)
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FMC_Init+0xa0>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_FMC_Init+0xa0>)
 8000868:	2204      	movs	r2, #4
 800086a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FMC_Init+0xa0>)
 800086e:	2210      	movs	r2, #16
 8000870:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FMC_Init+0xa0>)
 8000874:	2240      	movs	r2, #64	; 0x40
 8000876:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FMC_Init+0xa0>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FMC_Init+0xa0>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FMC_Init+0xa0>)
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FMC_Init+0xa0>)
 8000890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_FMC_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a4:	2304      	movs	r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <MX_FMC_Init+0xa0>)
 80008be:	f011 fb4f 	bl	8011f60 <HAL_SDRAM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008c8:	f000 f958 	bl	8000b7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_FMC_Init+0xa8>)
 80008ce:	f000 f9f0 	bl	8000cb2 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	240002c8 	.word	0x240002c8
 80008e0:	52004140 	.word	0x52004140
 80008e4:	08000b7d 	.word	0x08000b7d

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	; 0x40
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008fe:	4b72      	ldr	r3, [pc, #456]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000904:	4a70      	ldr	r2, [pc, #448]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090e:	4b6e      	ldr	r3, [pc, #440]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
 800091a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091c:	4b6a      	ldr	r3, [pc, #424]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000922:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092c:	4b66      	ldr	r3, [pc, #408]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093a:	4b63      	ldr	r3, [pc, #396]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	4a61      	ldr	r2, [pc, #388]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094a:	4b5f      	ldr	r3, [pc, #380]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000958:	4b5b      	ldr	r3, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	4a5a      	ldr	r2, [pc, #360]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000968:	4b57      	ldr	r3, [pc, #348]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a52      	ldr	r2, [pc, #328]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000994:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	4a4b      	ldr	r2, [pc, #300]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 800099c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a4:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b8:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c2:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	f003 0308 	and.w	r3, r3, #8
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	4a3c      	ldr	r2, [pc, #240]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e0:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x1e0>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	21c0      	movs	r1, #192	; 0xc0
 8000a2e:	4827      	ldr	r0, [pc, #156]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a30:	f00c fe92 	bl	800d758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2108      	movs	r1, #8
 8000a38:	4825      	ldr	r0, [pc, #148]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a3a:	f00c fe8d 	bl	800d758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000a44:	f00c fe88 	bl	800d758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 8000a48:	23c0      	movs	r3, #192	; 0xc0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <MX_GPIO_Init+0x1e4>)
 8000a60:	f00c fbc0 	bl	800d1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000a82:	f00c fbaf 	bl	800d1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000a86:	2308      	movs	r3, #8
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <MX_GPIO_Init+0x1e8>)
 8000a9e:	f00c fba1 	bl	800d1e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0x1ec>)
 8000aba:	f00c fb93 	bl	800d1e4 <HAL_GPIO_Init>

}
 8000abe:	bf00      	nop
 8000ac0:	3740      	adds	r7, #64	; 0x40
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020400 	.word	0x58020400
 8000ad0:	58021800 	.word	0x58021800
 8000ad4:	58020000 	.word	0x58020000

08000ad8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f006 f811 	bl	8006b08 <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <StartDefaultTask+0x8>

08000ae8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000afa:	f00c f899 	bl	800cc30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b06:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b0a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000b0c:	2313      	movs	r3, #19
 8000b0e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00c f8b6 	bl	800cca0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b38:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b3e:	231a      	movs	r3, #26
 8000b40:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b42:	463b      	mov	r3, r7
 8000b44:	4618      	mov	r0, r3
 8000b46:	f00c f8ab 	bl	800cca0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b4a:	2004      	movs	r0, #4
 8000b4c:	f00c f888 	bl	800cc60 <HAL_MPU_Enable>

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6a:	f00b ff23 	bl	800c9b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40001000 	.word	0x40001000

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <initLtdcClocks+0xe0>)
 8000b90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b94:	4a34      	ldr	r2, [pc, #208]	; (8000c68 <initLtdcClocks+0xe0>)
 8000b96:	f043 0308 	orr.w	r3, r3, #8
 8000b9a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000b9e:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <initLtdcClocks+0xe0>)
 8000ba0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bac:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	4a2d      	ldr	r2, [pc, #180]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bca:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <initLtdcClocks+0xe0>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <initLtdcClocks+0xe0>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <initLtdcClocks+0xe4>)
 8000c52:	f00c fac7 	bl	800d1e4 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <initLtdcClocks+0xe4>)
 8000c5c:	f00c fd7c 	bl	800d758 <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	3730      	adds	r7, #48	; 0x30
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020c00 	.word	0x58020c00

08000c70 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000c80:	2340      	movs	r3, #64	; 0x40
 8000c82:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f00a fe10 	bl	800b8b0 <BSP_QSPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f00a fee2 	bl	800ba64 <BSP_QSPI_EnableMemoryMappedMode>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4798      	blx	r3
   }
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f00b fa40 	bl	800c140 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f00b f9e1 	bl	800c088 <BSP_SDRAM_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <initBspSdRam+0x1e>
   {
      error_handler();
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4798      	blx	r3
   }
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x38>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_MspInit+0x38>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_MspInit+0x38>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f06f 0001 	mvn.w	r0, #1
 8000d04:	f00b ff5e 	bl	800cbc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400

08000d14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_CRC_MspInit+0x3c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10e      	bne.n	8000d44 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <HAL_CRC_MspInit+0x40>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	58024c00 	.word	0x58024c00
 8000d54:	58024400 	.word	0x58024400

08000d58 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_DMA2D_MspInit+0x48>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d116      	bne.n	8000d98 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_DMA2D_MspInit+0x4c>)
 8000d7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2105      	movs	r1, #5
 8000d8c:	205a      	movs	r0, #90	; 0x5a
 8000d8e:	f00b ff19 	bl	800cbc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d92:	205a      	movs	r0, #90	; 0x5a
 8000d94:	f00b ff30 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	52001000 	.word	0x52001000
 8000da4:	58024400 	.word	0x58024400

08000da8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0bc      	sub	sp, #240	; 0xf0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	22bc      	movs	r2, #188	; 0xbc
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f022 fb07 	bl	80233dc <memset>
  if(hltdc->Instance==LTDC)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a68      	ldr	r2, [pc, #416]	; (8000f74 <HAL_LTDC_MspInit+0x1cc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	f040 80c8 	bne.w	8000f6a <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dde:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000de0:	2305      	movs	r3, #5
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000de4:	23a0      	movs	r3, #160	; 0xa0
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000df0:	2353      	movs	r3, #83	; 0x53
 8000df2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000df8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	4618      	mov	r0, r3
 8000e08:	f010 f800 	bl	8010e0c <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000e12:	f7ff feb3 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e16:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e1c:	4a56      	ldr	r2, [pc, #344]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000e26:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e34:	4b50      	ldr	r3, [pc, #320]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e52:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a47      	ldr	r2, [pc, #284]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a38      	ldr	r2, [pc, #224]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <HAL_LTDC_MspInit+0x1d0>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000eac:	23fc      	movs	r3, #252	; 0xfc
 8000eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec4:	230e      	movs	r3, #14
 8000ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000eca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ece:	4619      	mov	r1, r3
 8000ed0:	482a      	ldr	r0, [pc, #168]	; (8000f7c <HAL_LTDC_MspInit+0x1d4>)
 8000ed2:	f00c f987 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000ed6:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef0:	230e      	movs	r3, #14
 8000ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ef6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000efa:	4619      	mov	r1, r3
 8000efc:	4820      	ldr	r0, [pc, #128]	; (8000f80 <HAL_LTDC_MspInit+0x1d8>)
 8000efe:	f00c f971 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000f02:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1c:	230e      	movs	r3, #14
 8000f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f26:	4619      	mov	r1, r3
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <HAL_LTDC_MspInit+0x1dc>)
 8000f2a:	f00c f95b 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f48:	230e      	movs	r3, #14
 8000f4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <HAL_LTDC_MspInit+0x1e0>)
 8000f56:	f00c f945 	bl	800d1e4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2058      	movs	r0, #88	; 0x58
 8000f60:	f00b fe30 	bl	800cbc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f64:	2058      	movs	r0, #88	; 0x58
 8000f66:	f00b fe47 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	37f0      	adds	r7, #240	; 0xf0
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	50001000 	.word	0x50001000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58022800 	.word	0x58022800
 8000f80:	58022000 	.word	0x58022000
 8000f84:	58022400 	.word	0x58022400
 8000f88:	58021c00 	.word	0x58021c00

08000f8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0bc      	sub	sp, #240	; 0xf0
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	22bc      	movs	r2, #188	; 0xbc
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f022 fa15 	bl	80233dc <memset>
  if(hqspi->Instance==QUADSPI)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a76      	ldr	r2, [pc, #472]	; (8001190 <HAL_QSPI_MspInit+0x204>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	f040 80e4 	bne.w	8001186 <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fc2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc8:	f107 0320 	add.w	r3, r7, #32
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00f ff1d 	bl	8010e0c <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000fd8:	f7ff fdd0 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fdc:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8000fde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fe2:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fec:	4b69      	ldr	r3, [pc, #420]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8000fee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffa:	4b66      	ldr	r3, [pc, #408]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a64      	ldr	r2, [pc, #400]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001018:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a5d      	ldr	r2, [pc, #372]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b5a      	ldr	r3, [pc, #360]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0320 	and.w	r3, r3, #32
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a55      	ldr	r2, [pc, #340]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_QSPI_MspInit+0x208>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001072:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800108c:	2309      	movs	r3, #9
 800108e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001092:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001096:	4619      	mov	r1, r3
 8001098:	483f      	ldr	r0, [pc, #252]	; (8001198 <HAL_QSPI_MspInit+0x20c>)
 800109a:	f00c f8a3 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800109e:	2340      	movs	r3, #64	; 0x40
 80010a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010b6:	230a      	movs	r3, #10
 80010b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010c0:	4619      	mov	r1, r3
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <HAL_QSPI_MspInit+0x20c>)
 80010c4:	f00c f88e 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80010c8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010e2:	2309      	movs	r3, #9
 80010e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ec:	4619      	mov	r1, r3
 80010ee:	482b      	ldr	r0, [pc, #172]	; (800119c <HAL_QSPI_MspInit+0x210>)
 80010f0:	f00c f878 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800110e:	230a      	movs	r3, #10
 8001110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001114:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001118:	4619      	mov	r1, r3
 800111a:	4820      	ldr	r0, [pc, #128]	; (800119c <HAL_QSPI_MspInit+0x210>)
 800111c:	f00c f862 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001120:	230c      	movs	r3, #12
 8001122:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001138:	2309      	movs	r3, #9
 800113a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800113e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001142:	4619      	mov	r1, r3
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <HAL_QSPI_MspInit+0x214>)
 8001146:	f00c f84d 	bl	800d1e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800114a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001164:	2309      	movs	r3, #9
 8001166:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <HAL_QSPI_MspInit+0x218>)
 8001172:	f00c f837 	bl	800d1e4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	205c      	movs	r0, #92	; 0x5c
 800117c:	f00b fd22 	bl	800cbc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001180:	205c      	movs	r0, #92	; 0x5c
 8001182:	f00b fd39 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	37f0      	adds	r7, #240	; 0xf0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	52005000 	.word	0x52005000
 8001194:	58024400 	.word	0x58024400
 8001198:	58021800 	.word	0x58021800
 800119c:	58021400 	.word	0x58021400
 80011a0:	58021c00 	.word	0x58021c00
 80011a4:	58020c00 	.word	0x58020c00

080011a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0b6      	sub	sp, #216	; 0xd8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011be:	4b4f      	ldr	r3, [pc, #316]	; (80012fc <HAL_FMC_MspInit+0x154>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 8096 	bne.w	80012f4 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_FMC_MspInit+0x154>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	22bc      	movs	r2, #188	; 0xbc
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f022 f900 	bl	80233dc <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80011dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00f fe0e 	bl	8010e0c <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80011f6:	f7ff fcc1 	bl	8000b7c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_FMC_MspInit+0x158>)
 80011fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <HAL_FMC_MspInit+0x158>)
 8001202:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001206:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800120a:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <HAL_FMC_MspInit+0x158>)
 800120c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001218:	f64f 7383 	movw	r3, #65411	; 0xff83
 800121c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001232:	230c      	movs	r3, #12
 8001234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001238:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800123c:	4619      	mov	r1, r3
 800123e:	4831      	ldr	r0, [pc, #196]	; (8001304 <HAL_FMC_MspInit+0x15c>)
 8001240:	f00b ffd0 	bl	800d1e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001244:	f248 1333 	movw	r3, #33075	; 0x8133
 8001248:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800125e:	230c      	movs	r3, #12
 8001260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001268:	4619      	mov	r1, r3
 800126a:	4827      	ldr	r0, [pc, #156]	; (8001308 <HAL_FMC_MspInit+0x160>)
 800126c:	f00b ffba 	bl	800d1e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001270:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800128a:	230c      	movs	r3, #12
 800128c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001294:	4619      	mov	r1, r3
 8001296:	481d      	ldr	r0, [pc, #116]	; (800130c <HAL_FMC_MspInit+0x164>)
 8001298:	f00b ffa4 	bl	800d1e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800129c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b6:	230c      	movs	r3, #12
 80012b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4813      	ldr	r0, [pc, #76]	; (8001310 <HAL_FMC_MspInit+0x168>)
 80012c4:	f00b ff8e 	bl	800d1e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012c8:	23e0      	movs	r3, #224	; 0xe0
 80012ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e0:	230c      	movs	r3, #12
 80012e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012ea:	4619      	mov	r1, r3
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <HAL_FMC_MspInit+0x16c>)
 80012ee:	f00b ff79 	bl	800d1e4 <HAL_GPIO_Init>
 80012f2:	e000      	b.n	80012f6 <HAL_FMC_MspInit+0x14e>
    return;
 80012f4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012f6:	37d8      	adds	r7, #216	; 0xd8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24000304 	.word	0x24000304
 8001300:	58024400 	.word	0x58024400
 8001304:	58021000 	.word	0x58021000
 8001308:	58021800 	.word	0x58021800
 800130c:	58020c00 	.word	0x58020c00
 8001310:	58021400 	.word	0x58021400
 8001314:	58021c00 	.word	0x58021c00

08001318 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001320:	f7ff ff42 	bl	80011a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_FMC_MspDeInit+0x58>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d123      	bne.n	8001380 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_FMC_MspDeInit+0x58>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_FMC_MspDeInit+0x5c>)
 8001340:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_FMC_MspDeInit+0x5c>)
 8001346:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800134a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800134e:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <HAL_FMC_MspDeInit+0x60>)
 8001354:	f00c f8f6 	bl	800d544 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001358:	f248 1133 	movw	r1, #33075	; 0x8133
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <HAL_FMC_MspDeInit+0x64>)
 800135e:	f00c f8f1 	bl	800d544 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001362:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001366:	480b      	ldr	r0, [pc, #44]	; (8001394 <HAL_FMC_MspDeInit+0x68>)
 8001368:	f00c f8ec 	bl	800d544 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800136c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_FMC_MspDeInit+0x6c>)
 8001372:	f00c f8e7 	bl	800d544 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001376:	21e0      	movs	r1, #224	; 0xe0
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <HAL_FMC_MspDeInit+0x70>)
 800137a:	f00c f8e3 	bl	800d544 <HAL_GPIO_DeInit>
 800137e:	e000      	b.n	8001382 <HAL_FMC_MspDeInit+0x56>
    return;
 8001380:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8001382:	bd80      	pop	{r7, pc}
 8001384:	24000308 	.word	0x24000308
 8001388:	58024400 	.word	0x58024400
 800138c:	58021000 	.word	0x58021000
 8001390:	58021800 	.word	0x58021800
 8001394:	58020c00 	.word	0x58020c00
 8001398:	58021400 	.word	0x58021400
 800139c:	58021c00 	.word	0x58021c00

080013a0 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80013a8:	f7ff ffc0 	bl	800132c <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b090      	sub	sp, #64	; 0x40
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d827      	bhi.n	8001412 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013c2:	2200      	movs	r2, #0
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	2036      	movs	r0, #54	; 0x36
 80013c8:	f00b fbfc 	bl	800cbc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013cc:	2036      	movs	r0, #54	; 0x36
 80013ce:	f00b fc13 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_InitTick+0xc4>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_InitTick+0xc8>)
 80013da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013de:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_InitTick+0xc8>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_InitTick+0xc8>)
 80013ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f6:	f107 0210 	add.w	r2, r7, #16
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f00f fcc1 	bl	8010d88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800140a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800140c:	2b00      	cmp	r3, #0
 800140e:	d106      	bne.n	800141e <HAL_InitTick+0x6a>
 8001410:	e001      	b.n	8001416 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e02b      	b.n	800146e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001416:	f00f fc8b 	bl	8010d30 <HAL_RCC_GetPCLK1Freq>
 800141a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800141c:	e004      	b.n	8001428 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800141e:	f00f fc87 	bl	8010d30 <HAL_RCC_GetPCLK1Freq>
 8001422:	4603      	mov	r3, r0
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_InitTick+0xcc>)
 800142c:	fba2 2303 	umull	r2, r3, r2, r3
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	3b01      	subs	r3, #1
 8001434:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_InitTick+0xd0>)
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <HAL_InitTick+0xd4>)
 800143a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_InitTick+0xd0>)
 800143e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001442:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_InitTick+0xd0>)
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0xd0>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <HAL_InitTick+0xd0>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <HAL_InitTick+0xd0>)
 8001458:	f010 fe37 	bl	80120ca <HAL_TIM_Base_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <HAL_InitTick+0xd0>)
 8001464:	f010 fe92 	bl	801218c <HAL_TIM_Base_Start_IT>
 8001468:	4603      	mov	r3, r0
 800146a:	e000      	b.n	800146e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000048 	.word	0x24000048
 800147c:	58024400 	.word	0x58024400
 8001480:	431bde83 	.word	0x431bde83
 8001484:	2400030c 	.word	0x2400030c
 8001488:	40001000 	.word	0x40001000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <TIM6_DAC_IRQHandler+0x10>)
 80014be:	f010 fedd 	bl	801227c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400030c 	.word	0x2400030c

080014cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <LTDC_IRQHandler+0x10>)
 80014d2:	f00d f8cd 	bl	800e670 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240001d4 	.word	0x240001d4

080014e0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA2D_IRQHandler+0x10>)
 80014e6:	f00b fd6d 	bl	800cfc4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2400016c 	.word	0x2400016c

080014f4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <QUADSPI_IRQHandler+0x10>)
 80014fa:	f00d fdb3 	bl	800f064 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2400027c 	.word	0x2400027c

08001508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_kill>:

int _kill(int pid, int sig)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001522:	f021 ff01 	bl	8023328 <__errno>
 8001526:	4603      	mov	r3, r0
 8001528:	2216      	movs	r2, #22
 800152a:	601a      	str	r2, [r3, #0]
	return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_exit>:

void _exit (int status)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe7 	bl	8001518 <_kill>
	while (1) {}		/* Make sure we hang here */
 800154a:	e7fe      	b.n	800154a <_exit+0x12>

0800154c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e00a      	b.n	8001574 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800155e:	f3af 8000 	nop.w
 8001562:	4601      	mov	r1, r0
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf0      	blt.n	800155e <_read+0x12>
	}

return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e009      	b.n	80015ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf1      	blt.n	8001598 <_write+0x12>
	}
	return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_close>:

int _close(int file)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
	return -1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_isatty>:

int _isatty(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	; (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	; (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	; (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f021 fe66 	bl	8023328 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	24080000 	.word	0x24080000
 8001688:	00001000 	.word	0x00001000
 800168c:	24000358 	.word	0x24000358
 8001690:	2400b118 	.word	0x2400b118

08001694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f008 fd1e 	bl	800a0d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	; (80016e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f021 fe49 	bl	8023358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c6:	f7fe fe5b 	bl	8000380 <main>
  bx  lr
 80016ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016d4:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80016d8:	08026354 	.word	0x08026354
  ldr r2, =_sbss
 80016dc:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80016e0:	2400b118 	.word	0x2400b118

080016e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC3_IRQHandler>

080016e6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80016ea:	f001 fd23 	bl	8003134 <touchgfx_init>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80016fa:	f001 fd45 	bl	8003188 <touchgfx_taskEntry>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    {
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
    }
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	08025124 	.word	0x08025124

08001728 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    }
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffe9 	bl	8001708 <_ZN8touchgfx15TouchControllerD1Ev>
 8001736:	2104      	movs	r1, #4
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f021 fd94 	bl	8023266 <_ZdlPvj>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001750:	f000 fb50 	bl	8001df4 <_ZN25STM32H745ITouchController4initEv>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	68b8      	ldr	r0, [r7, #8]
 800176c:	f000 fb66 	bl	8001e3c <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ffbb 	bl	8001708 <_ZN8touchgfx15TouchControllerD1Ev>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	0802510c 	.word	0x0802510c

080017a0 <_ZN20STM32TouchControllerD0Ev>:
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_ZN20STM32TouchControllerD1Ev>
 80017ae:	2104      	movs	r1, #4
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f021 fd58 	bl	8023266 <_ZdlPvj>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d847      	bhi.n	8001860 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	08001807 	.word	0x08001807
 80017e0:	08001825 	.word	0x08001825
 80017e4:	08001843 	.word	0x08001843
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	2140      	movs	r1, #64	; 0x40
 80017fe:	481b      	ldr	r0, [pc, #108]	; (800186c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8001800:	f00b ffaa 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 8001804:	e02c      	b.n	8001860 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 800181e:	f00b ff9b 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 8001822:	e01d      	b.n	8001860 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	2108      	movs	r1, #8
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 800183c:	f00b ff8c 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 8001840:	e00e      	b.n	8001860 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4a08      	ldr	r2, [pc, #32]	; (8001868 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	4806      	ldr	r0, [pc, #24]	; (8001874 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 800185a:	f00b ff7d 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 800185e:	bf00      	nop
    }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2400035c 	.word	0x2400035c
 800186c:	58020400 	.word	0x58020400
 8001870:	58021800 	.word	0x58021800
 8001874:	58020000 	.word	0x58020000

08001878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d847      	bhi.n	8001918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018bf 	.word	0x080018bf
 8001898:	080018dd 	.word	0x080018dd
 800189c:	080018fb 	.word	0x080018fb
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4a1f      	ldr	r2, [pc, #124]	; (8001920 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 80018b0:	2300      	movs	r3, #0
 80018b2:	461a      	mov	r2, r3
 80018b4:	2140      	movs	r1, #64	; 0x40
 80018b6:	481b      	ldr	r0, [pc, #108]	; (8001924 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80018b8:	f00b ff4e 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 80018bc:	e02c      	b.n	8001918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x56>
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 80018ce:	2300      	movs	r3, #0
 80018d0:	461a      	mov	r2, r3
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80018d6:	f00b ff3f 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 80018da:	e01d      	b.n	8001918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x76>
 80018ec:	2300      	movs	r3, #0
 80018ee:	461a      	mov	r2, r3
 80018f0:	2108      	movs	r1, #8
 80018f2:	480d      	ldr	r0, [pc, #52]	; (8001928 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 80018f4:	f00b ff30 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 80018f8:	e00e      	b.n	8001918 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x92>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x94>
 800190a:	2300      	movs	r3, #0
 800190c:	461a      	mov	r2, r3
 800190e:	2140      	movs	r1, #64	; 0x40
 8001910:	4806      	ldr	r0, [pc, #24]	; (800192c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8001912:	f00b ff21 	bl	800d758 <HAL_GPIO_WritePin>
#endif
        break;
 8001916:	bf00      	nop
    }
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	2400035c 	.word	0x2400035c
 8001924:	58020400 	.word	0x58020400
 8001928:	58021800 	.word	0x58021800
 800192c:	58020000 	.word	0x58020000

08001930 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d81f      	bhi.n	8001980 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	08001959 	.word	0x08001959
 800194c:	08001963 	.word	0x08001963
 8001950:	0800196d 	.word	0x0800196d
 8001954:	08001977 	.word	0x08001977
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001958:	2140      	movs	r1, #64	; 0x40
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800195c:	f00b ff15 	bl	800d78a <HAL_GPIO_TogglePin>
#endif
        break;
 8001960:	e00e      	b.n	8001980 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001962:	2180      	movs	r1, #128	; 0x80
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8001966:	f00b ff10 	bl	800d78a <HAL_GPIO_TogglePin>
#endif
        break;
 800196a:	e009      	b.n	8001980 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800196c:	2108      	movs	r1, #8
 800196e:	4807      	ldr	r0, [pc, #28]	; (800198c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 8001970:	f00b ff0b 	bl	800d78a <HAL_GPIO_TogglePin>
#endif
        break;
 8001974:	e004      	b.n	8001980 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001976:	2140      	movs	r1, #64	; 0x40
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800197a:	f00b ff06 	bl	800d78a <HAL_GPIO_TogglePin>
#endif
        break;
 800197e:	bf00      	nop
    }
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	58020400 	.word	0x58020400
 800198c:	58021800 	.word	0x58021800
 8001990:	58020000 	.word	0x58020000

08001994 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    {
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
    }
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	08025b5c 	.word	0x08025b5c

080019b4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    }
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe9 	bl	8001994 <_ZN8touchgfx3HALD1Ev>
 80019c2:	217c      	movs	r1, #124	; 0x7c
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f021 fc4e 	bl	8023266 <_ZdlPvj>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	807b      	strh	r3, [r7, #2]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d304      	bcc.n	8001a20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	883a      	ldrh	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d205      	bcs.n	8001a2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001a24:	219e      	movs	r1, #158	; 0x9e
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001a28:	f021 fc4c 	bl	80232c4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001a34:	883b      	ldrh	r3, [r7, #0]
 8001a36:	8013      	strh	r3, [r2, #0]
    }
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2400ae68 	.word	0x2400ae68
 8001a44:	2400ae6a 	.word	0x2400ae6a
 8001a48:	08024458 	.word	0x08024458
 8001a4c:	080244bc 	.word	0x080244bc
 8001a50:	08024500 	.word	0x08024500
 8001a54:	2400ae6e 	.word	0x2400ae6e
 8001a58:	2400ae70 	.word	0x2400ae70

08001a5c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4798      	blx	r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	e000      	b.n	8001a84 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001a82:	2300      	movs	r3, #0
    }
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f011 ff7f 	bl	8013998 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	33ac      	adds	r3, #172	; 0xac
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
    }
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001ab8:	2300      	movs	r3, #0
    }
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001ae0:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001ae6:	f021 fbed 	bl	80232c4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001b04:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	338c      	adds	r3, #140	; 0x8c
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	4798      	blx	r3
    }
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	08024554 	.word	0x08024554
 8001b20:	0802458c 	.word	0x0802458c
 8001b24:	08024500 	.word	0x08024500
 8001b28:	2400ae72 	.word	0x2400ae72

08001b2c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001b4a:	701a      	strb	r2, [r3, #0]
    }
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	2400ae73 	.word	0x2400ae73

08001b5c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b64:	2300      	movs	r3, #0
    }
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4798      	blx	r3
        }
    }
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4798      	blx	r3
 8001bca:	4603      	mov	r3, r0
    }
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d011      	beq.n	8001c10 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11e      	bne.n	8001c32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c00:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001c02:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c04:	89bb      	ldrh	r3, [r7, #12]
 8001c06:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001c0e:	e010      	b.n	8001c32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c24:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c28:	89fb      	ldrh	r3, [r7, #14]
 8001c2a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    }
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2400ae6c 	.word	0x2400ae6c
 8001c44:	2400ae6a 	.word	0x2400ae6a
 8001c48:	2400ae68 	.word	0x2400ae68

08001c4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f011 f904 	bl	8012e64 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe8d 	bl	8001994 <_ZN8touchgfx3HALD1Ev>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	080254ac 	.word	0x080254ac

08001c88 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001c96:	217c      	movs	r1, #124	; 0x7c
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f021 fae4 	bl	8023266 <_ZdlPvj>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ffca 	bl	8001c4c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fd44 	bl	8003758 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fdda 	bl	800389c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6839      	ldr	r1, [r7, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fdd9 	bl	80038b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fde1 	bl	80038e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	f001 fe28 	bl	8003994 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f001 fd21 	bl	80037a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fd25 	bl	80037c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fd27 	bl	80037dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 fd29 	bl	80037f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff4f 	bl	8001c64 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	0802513c 	.word	0x0802513c

08001dd4 <_ZN11TouchGFXHALD0Ev>:
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffe7 	bl	8001db0 <_ZN11TouchGFXHALD1Ev>
 8001de2:	217c      	movs	r1, #124	; 0x7c
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f021 fa3e 	bl	8023266 <_ZdlPvj>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001dfa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dfe:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001e00:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e04:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001e06:	2308      	movs	r3, #8
 8001e08:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4619      	mov	r1, r3
 8001e12:	2000      	movs	r0, #0
 8001e14:	f00a fb1a 	bl	800c44c <BSP_TS_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d103      	bne.n	8001e30 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001e30:	bf00      	nop
}
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2400036c 	.word	0x2400036c

08001e3c <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e014      	b.n	8001e82 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001e58:	490d      	ldr	r1, [pc, #52]	; (8001e90 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f00a fbb2 	bl	800c5c4 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e00a      	b.n	8001e82 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	601a      	str	r2, [r3, #0]
    return true;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2400036c 	.word	0x2400036c
 8001e90:	24000370 	.word	0x24000370

08001e94 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f004 fe4e 	bl	8006b3e <osSemaphoreNew>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ea6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001eb4:	2128      	movs	r1, #40	; 0x28
 8001eb6:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001eb8:	f021 fa04 	bl	80232c4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f004 ff5b 	bl	8006d7c <osMessageQueueNew>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001eca:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001edc:	f021 f9f2 	bl	80232c4 <__assert_func>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2400037c 	.word	0x2400037c
 8001ee8:	080245dc 	.word	0x080245dc
 8001eec:	08024628 	.word	0x08024628
 8001ef0:	08024658 	.word	0x08024658
 8001ef4:	24000380 	.word	0x24000380
 8001ef8:	080246bc 	.word	0x080246bc

08001efc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fea1 	bl	8006c50 <osSemaphoreAcquire>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2400037c 	.word	0x2400037c

08001f18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 fee7 	bl	8006cf4 <osSemaphoreRelease>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2400037c 	.word	0x2400037c

08001f30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fe88 	bl	8006c50 <osSemaphoreAcquire>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2400037c 	.word	0x2400037c

08001f48 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fecf 	bl	8006cf4 <osSemaphoreRelease>
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2400037c 	.word	0x2400037c

08001f60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4903      	ldr	r1, [pc, #12]	; (8001f7c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f6e:	f004 ff79 	bl	8006e64 <osMessageQueuePut>
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	24000380 	.word	0x24000380
 8001f7c:	24000004 	.word	0x24000004

08001f80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	1d39      	adds	r1, r7, #4
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f004 ffc8 	bl	8006f24 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	1d39      	adds	r1, r7, #4
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f004 ffc0 	bl	8006f24 <osMessageQueueGet>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24000380 	.word	0x24000380

08001fb0 <__NVIC_EnableIRQ>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <__NVIC_EnableIRQ+0x38>)
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_DisableIRQ>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db12      	blt.n	8002024 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	490a      	ldr	r1, [pc, #40]	; (8002030 <__NVIC_DisableIRQ+0x44>)
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	3320      	adds	r3, #32
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002018:	f3bf 8f4f 	dsb	sy
}
 800201c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800201e:	f3bf 8f6f 	isb	sy
}
 8002022:	bf00      	nop
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100

08002034 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        : color(0)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
    {
    }
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
    }
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    {
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
    }
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	08025264 	.word	0x08025264

08002088 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    }
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe9 	bl	8002068 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002096:	2104      	movs	r1, #4
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f021 f8e4 	bl	8023266 <_ZdlPvj>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3344      	adds	r3, #68	; 0x44
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
    }
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    {
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
    }
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	08025c34 	.word	0x08025c34

080020e4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    }
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffe9 	bl	80020c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80020f2:	210c      	movs	r1, #12
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f021 f8b6 	bl	8023266 <_ZdlPvj>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	721a      	strb	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	725a      	strb	r2, [r3, #9]
    {
    }
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	08025c34 	.word	0x08025c34

08002138 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002140:	2301      	movs	r3, #1
    }
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3328      	adds	r3, #40	; 0x28
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4610      	mov	r0, r2
 8002162:	4798      	blx	r3
    }
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
        return instance;
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
    }
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	2400ae74 	.word	0x2400ae74

08002184 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3314      	adds	r3, #20
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4610      	mov	r0, r2
 800219c:	4798      	blx	r3
    }
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80021ae:	f7ff ffdd 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ffe5 	bl	8002184 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330c      	adds	r3, #12
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff30 	bl	8002034 <_ZN8touchgfx9colortypeC1Ev>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	330c      	adds	r3, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f7ff ff87 	bl	8002104 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80021f6:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <_ZN8STM32DMAC1Ev+0x50>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f103 000c 	add.w	r0, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3320      	adds	r3, #32
 8002206:	2260      	movs	r2, #96	; 0x60
 8002208:	4619      	mov	r1, r3
 800220a:	f011 fcff 	bl	8013c0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3320      	adds	r3, #32
 8002212:	245f      	movs	r4, #95	; 0x5f
 8002214:	461d      	mov	r5, r3
 8002216:	2c00      	cmp	r4, #0
 8002218:	db05      	blt.n	8002226 <_ZN8STM32DMAC1Ev+0x46>
 800221a:	4628      	mov	r0, r5
 800221c:	f7ff ffd1 	bl	80021c2 <_ZN8touchgfx6BlitOpC1Ev>
 8002220:	3524      	adds	r5, #36	; 0x24
 8002222:	3c01      	subs	r4, #1
 8002224:	e7f7      	b.n	8002216 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	08025214 	.word	0x08025214

08002234 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <_ZN8STM32DMAD1Ev+0x30>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002242:	205a      	movs	r0, #90	; 0x5a
 8002244:	f7ff fed2 	bl	8001fec <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	330c      	adds	r3, #12
 800224c:	4618      	mov	r0, r3
 800224e:	f000 facb 	bl	80027e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff35 	bl	80020c4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	08025214 	.word	0x08025214

08002268 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
}
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffdf 	bl	8002234 <_ZN8STM32DMAD1Ev>
 8002276:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f020 fff3 	bl	8023266 <_ZdlPvj>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002296:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800229a:	4a11      	ldr	r2, [pc, #68]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 80022a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 80022b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 80022c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <_ZN8STM32DMA10initializeEv+0x54>)
 80022c4:	f023 0310 	bic.w	r3, r3, #16
 80022c8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <_ZN8STM32DMA10initializeEv+0x58>)
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <_ZN8STM32DMA10initializeEv+0x5c>)
 80022ce:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80022d0:	205a      	movs	r0, #90	; 0x5a
 80022d2:	f7ff fe6d 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58024400 	.word	0x58024400
 80022e4:	2400016c 	.word	0x2400016c
 80022e8:	080021a7 	.word	0x080021a7

080022ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]

    switch (format)
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b0b      	cmp	r3, #11
 8002300:	d826      	bhi.n	8002350 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002345 	.word	0x08002345
 800230c:	0800233f 	.word	0x0800233f
 8002310:	08002339 	.word	0x08002339
 8002314:	08002351 	.word	0x08002351
 8002318:	08002351 	.word	0x08002351
 800231c:	08002351 	.word	0x08002351
 8002320:	08002351 	.word	0x08002351
 8002324:	0800234b 	.word	0x0800234b
 8002328:	0800234b 	.word	0x0800234b
 800232c:	0800234b 	.word	0x0800234b
 8002330:	0800234b 	.word	0x0800234b
 8002334:	0800234b 	.word	0x0800234b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
        break;
 800233c:	e00e      	b.n	800235c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800233e:	2301      	movs	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
        break;
 8002342:	e00b      	b.n	800235c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002344:	2302      	movs	r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
        break;
 8002348:	e008      	b.n	800235c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800234a:	2305      	movs	r3, #5
 800234c:	60fb      	str	r3, [r7, #12]
        break;
 800234e:	e005      	b.n	800235c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002352:	4a06      	ldr	r2, [pc, #24]	; (800236c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002354:	2166      	movs	r1, #102	; 0x66
 8002356:	4806      	ldr	r0, [pc, #24]	; (8002370 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002358:	f020 ffb4 	bl	80232c4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	08024700 	.word	0x08024700
 800236c:	0802471c 	.word	0x0802471c
 8002370:	08024768 	.word	0x08024768

08002374 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d821      	bhi.n	80023ce <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800238a:	a201      	add	r2, pc, #4	; (adr r2, 8002390 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800238c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023c3 	.word	0x080023c3
 8002398:	080023bd 	.word	0x080023bd
 800239c:	080023cf 	.word	0x080023cf
 80023a0:	080023cf 	.word	0x080023cf
 80023a4:	080023cf 	.word	0x080023cf
 80023a8:	080023cf 	.word	0x080023cf
 80023ac:	080023c3 	.word	0x080023c3
 80023b0:	080023c3 	.word	0x080023c3
 80023b4:	080023c3 	.word	0x080023c3
 80023b8:	080023c3 	.word	0x080023c3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
        break;
 80023c0:	e00b      	b.n	80023da <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80023c2:	2301      	movs	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
        break;
 80023c6:	e008      	b.n	80023da <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80023c8:	2302      	movs	r3, #2
 80023ca:	60fb      	str	r3, [r7, #12]
        break;
 80023cc:	e005      	b.n	80023da <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80023d0:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80023d2:	2187      	movs	r1, #135	; 0x87
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80023d6:	f020 ff75 	bl	80232c4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80023da:	68fb      	ldr	r3, [r7, #12]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	08024700 	.word	0x08024700
 80023e8:	080247cc 	.word	0x080247cc
 80023ec:	08024768 	.word	0x08024768

080023f0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80023f8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7f5b      	ldrb	r3, [r3, #29]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff67 	bl	80022ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800241e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7f9b      	ldrb	r3, [r3, #30]
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff60 	bl	80022ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800242c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	7f9b      	ldrb	r3, [r3, #30]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff9d 	bl	8002374 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800243a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	8b5b      	ldrh	r3, [r3, #26]
 8002440:	461a      	mov	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	8a9b      	ldrh	r3, [r3, #20]
 8002446:	1ad2      	subs	r2, r2, r3
 8002448:	4b92      	ldr	r3, [pc, #584]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	8b5b      	ldrh	r3, [r3, #26]
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	8a9b      	ldrh	r3, [r3, #20]
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800245a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	8b1b      	ldrh	r3, [r3, #24]
 8002460:	461a      	mov	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	8a9b      	ldrh	r3, [r3, #20]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	4b8a      	ldr	r3, [pc, #552]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800246a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800246c:	4a89      	ldr	r2, [pc, #548]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	8adb      	ldrh	r3, [r3, #22]
 8002476:	461a      	mov	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	8a9b      	ldrh	r3, [r3, #20]
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	4b84      	ldr	r3, [pc, #528]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002482:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	4b82      	ldr	r3, [pc, #520]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800248a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	4b80      	ldr	r3, [pc, #512]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002492:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d036      	beq.n	800250c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800249e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a2:	f200 80e2 	bhi.w	800266a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024aa:	d014      	beq.n	80024d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b0:	f200 80db 	bhi.w	800266a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d059      	beq.n	800256c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	f200 80d6 	bhi.w	800266a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	f000 80be 	beq.w	8002640 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	f200 80d0 	bhi.w	800266a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d039      	beq.n	8002542 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	f000 80b6 	beq.w	8002640 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80024d4:	e0c9      	b.n	800266a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	7f1b      	ldrb	r3, [r3, #28]
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	4619      	mov	r1, r3
 80024de:	4a6d      	ldr	r2, [pc, #436]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80024e2:	430b      	orrs	r3, r1
 80024e4:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	4c6a      	ldr	r4, [pc, #424]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fdaf 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 80024f2:	4603      	mov	r3, r0
 80024f4:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80024f6:	4a67      	ldr	r2, [pc, #412]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b64      	ldr	r3, [pc, #400]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002502:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002504:	4b63      	ldr	r3, [pc, #396]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002506:	4a65      	ldr	r2, [pc, #404]	; (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002508:	601a      	str	r2, [r3, #0]
        break;
 800250a:	e0da      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	7f1b      	ldrb	r3, [r3, #28]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4619      	mov	r1, r3
 8002514:	4a5f      	ldr	r2, [pc, #380]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002516:	4b62      	ldr	r3, [pc, #392]	; (80026a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002518:	430b      	orrs	r3, r1
 800251a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	4c5c      	ldr	r4, [pc, #368]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fd94 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 8002528:	4603      	mov	r3, r0
 800252a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800252c:	4a59      	ldr	r2, [pc, #356]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	4b57      	ldr	r3, [pc, #348]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002538:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800253c:	4a57      	ldr	r2, [pc, #348]	; (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800253e:	601a      	str	r2, [r3, #0]
        break;
 8002540:	e0bf      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7f1b      	ldrb	r3, [r3, #28]
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	461a      	mov	r2, r3
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	4a51      	ldr	r2, [pc, #324]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002556:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002562:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002566:	4a4d      	ldr	r2, [pc, #308]	; (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002568:	601a      	str	r2, [r3, #0]
        break;
 800256a:	e0aa      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800256c:	2301      	movs	r3, #1
 800256e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1d1a      	adds	r2, r3, #4
 800257a:	4b46      	ldr	r3, [pc, #280]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	7f1b      	ldrb	r3, [r3, #28]
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	461a      	mov	r2, r3
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	4a42      	ldr	r2, [pc, #264]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002592:	4a40      	ldr	r2, [pc, #256]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	4b3d      	ldr	r3, [pc, #244]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800259e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d00d      	beq.n	80025ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80025ae:	e020      	b.n	80025f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025b2:	69da      	ldr	r2, [r3, #28]
 80025b4:	4b3b      	ldr	r3, [pc, #236]	; (80026a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	8852      	ldrh	r2, [r2, #2]
 80025bc:	3a01      	subs	r2, #1
 80025be:	0212      	lsls	r2, r2, #8
 80025c0:	4611      	mov	r1, r2
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c4:	430b      	orrs	r3, r1
 80025c6:	61d3      	str	r3, [r2, #28]
                break;
 80025c8:	e01a      	b.n	8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7f1b      	ldrb	r3, [r3, #28]
 80025ce:	2bff      	cmp	r3, #255	; 0xff
 80025d0:	d101      	bne.n	80025d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80025d2:	2300      	movs	r3, #0
 80025d4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025dc:	4013      	ands	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	8852      	ldrh	r2, [r2, #2]
 80025e2:	3a01      	subs	r2, #1
 80025e4:	0212      	lsls	r2, r2, #8
 80025e6:	4313      	orrs	r3, r2
 80025e8:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	61d3      	str	r3, [r2, #28]
                break;
 80025f0:	e006      	b.n	8002600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80025f4:	4a2d      	ldr	r2, [pc, #180]	; (80026ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80025f6:	f240 1111 	movw	r1, #273	; 0x111
 80025fa:	482d      	ldr	r0, [pc, #180]	; (80026b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80025fc:	f020 fe62 	bl	80232c4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d000      	beq.n	8002624 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8002622:	e7f3      	b.n	800260c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002626:	2210      	movs	r2, #16
 8002628:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002634:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002636:	e044      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800263a:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800263c:	601a      	str	r2, [r3, #0]
        break;
 800263e:	e040      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7f1b      	ldrb	r3, [r3, #28]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	461a      	mov	r2, r3
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800264e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002652:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	4b0d      	ldr	r3, [pc, #52]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002660:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002666:	601a      	str	r2, [r3, #0]
        break;
 8002668:	e02b      	b.n	80026c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7f1b      	ldrb	r3, [r3, #28]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	461a      	mov	r2, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	4a07      	ldr	r2, [pc, #28]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7f5a      	ldrb	r2, [r3, #29]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7f9b      	ldrb	r3, [r3, #30]
 8002686:	429a      	cmp	r2, r3
 8002688:	d016      	beq.n	80026b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800268a:	4b02      	ldr	r3, [pc, #8]	; (8002694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800268e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8002690:	e016      	b.n	80026c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 8002692:	bf00      	nop
 8002694:	52001000 	.word	0x52001000
 8002698:	0002000a 	.word	0x0002000a
 800269c:	00020201 	.word	0x00020201
 80026a0:	00020009 	.word	0x00020009
 80026a4:	ffff00ef 	.word	0xffff00ef
 80026a8:	08024818 	.word	0x08024818
 80026ac:	08024834 	.word	0x08024834
 80026b0:	08024768 	.word	0x08024768
 80026b4:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 80026ba:	f240 2201 	movw	r2, #513	; 0x201
 80026be:	601a      	str	r2, [r3, #0]
        break;
 80026c0:	bf00      	nop
    }
}
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	52001000 	.word	0x52001000

080026d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	7f9b      	ldrb	r3, [r3, #30]
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fe47 	bl	8002374 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80026e6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80026e8:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	8adb      	ldrh	r3, [r3, #22]
 80026f2:	461a      	mov	r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	8a9b      	ldrh	r3, [r3, #20]
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	8b5b      	ldrh	r3, [r3, #26]
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	8a9b      	ldrh	r3, [r3, #20]
 8002712:	1ad2      	subs	r2, r2, r3
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002716:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d12e      	bne.n	800277e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	8b5b      	ldrh	r3, [r3, #26]
 8002724:	461a      	mov	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	8a9b      	ldrh	r3, [r3, #20]
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800272e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	8b5b      	ldrh	r3, [r3, #26]
 8002734:	461a      	mov	r2, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	8a9b      	ldrh	r3, [r3, #20]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800273e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7f1b      	ldrb	r3, [r3, #28]
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	4619      	mov	r1, r3
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002750:	4b22      	ldr	r3, [pc, #136]	; (80027dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002752:	430b      	orrs	r3, r1
 8002754:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	4c1f      	ldr	r4, [pc, #124]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fc77 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 8002762:	4603      	mov	r3, r0
 8002764:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800276c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002774:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002778:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800277a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800277c:	e027      	b.n	80027ce <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fc5e 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 8002794:	4603      	mov	r3, r0
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc55 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 80027a6:	4603      	mov	r3, r0
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80027ae:	431c      	orrs	r4, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	330c      	adds	r3, #12
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc4b 	bl	8002050 <_ZNK8touchgfx9colortypecvmEv>
 80027ba:	4603      	mov	r3, r0
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027c4:	4323      	orrs	r3, r4
 80027c6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027ca:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	52001000 	.word	0x52001000
 80027dc:	00010009 	.word	0x00010009
 80027e0:	00020201 	.word	0x00020201
 80027e4:	00030201 	.word	0x00030201

080027e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fc35 	bl	8002068 <_ZN8touchgfx9DMA_QueueD1Ev>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08025c84 	.word	0x08025c84

0800280c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffe7 	bl	80027e8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800281a:	2114      	movs	r1, #20
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f020 fd22 	bl	8023266 <_ZdlPvj>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	805a      	strh	r2, [r3, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	809a      	strh	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	80da      	strh	r2, [r3, #6]
    {
    }
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
    }
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	2400aed0 	.word	0x2400aed0

0800287c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    {
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
    }
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	08025498 	.word	0x08025498

0800289c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    }
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ffe9 	bl	800287c <_ZN8touchgfx12FontProviderD1Ev>
 80028aa:	2104      	movs	r1, #4
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f020 fcda 	bl	8023266 <_ZdlPvj>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	611a      	str	r2, [r3, #16]
    {
    }
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	08025488 	.word	0x08025488

080028fc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
    {
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]
    }
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	08025488 	.word	0x08025488

0800291c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    }
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ffe9 	bl	80028fc <_ZN8touchgfx7MVPHeapD1Ev>
 800292a:	2114      	movs	r1, #20
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f020 fc9a 	bl	8023266 <_ZdlPvj>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
    {
    }
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
    {
    }
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    {
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
    }
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	08025460 	.word	0x08025460

080029e0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    }
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff ffe9 	bl	80029c0 <_ZN8touchgfx15UIEventListenerD1Ev>
 80029ee:	2104      	movs	r1, #4
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f020 fc38 	bl	8023266 <_ZdlPvj>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    {
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
    }
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	08025df4 	.word	0x08025df4

08002a20 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    }
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ffe9 	bl	8002a00 <_ZN8touchgfx3LCDD1Ev>
 8002a2e:	2108      	movs	r1, #8
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f020 fc18 	bl	8023266 <_ZdlPvj>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    {
    }
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a7e:	6810      	ldr	r0, [r2, #0]
 8002a80:	6851      	ldr	r1, [r2, #4]
 8002a82:	c303      	stmia	r3!, {r0, r1}
    }
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    {
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
    }
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	08025448 	.word	0x08025448

08002ab0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    }
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ffe9 	bl	8002a90 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002abe:	2104      	movs	r1, #4
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f020 fbd0 	bl	8023266 <_ZdlPvj>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	805a      	strh	r2, [r3, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	809a      	strh	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	80da      	strh	r2, [r3, #6]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	811a      	strh	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	815a      	strh	r2, [r3, #10]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	819a      	strh	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	739a      	strb	r2, [r3, #14]
        {
        }
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ffd5 	bl	8002ad0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	829a      	strh	r2, [r3, #20]
    {
    }
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002b4a:	4a55      	ldr	r2, [pc, #340]	; (8002ca0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	611a      	str	r2, [r3, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	331c      	adds	r3, #28
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffcc 	bl	8002b16 <_ZN8touchgfx8GesturesC1Ev>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3350      	adds	r3, #80	; 0x50
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe2f 	bl	800282c <_ZN8touchgfx4RectC1Ev>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	; 0x60
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	671a      	str	r2, [r3, #112]	; 0x70
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c5e:	8b3b      	ldrh	r3, [r7, #24]
 8002c60:	8013      	strh	r3, [r2, #0]
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	4b11      	ldr	r3, [pc, #68]	; (8002cac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002c68:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c6a:	4a11      	ldr	r2, [pc, #68]	; (8002cb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c6c:	8bbb      	ldrh	r3, [r7, #28]
 8002c6e:	8013      	strh	r3, [r2, #0]
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c76:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c7e:	8b3a      	ldrh	r2, [r7, #24]
 8002c80:	8bbb      	ldrh	r3, [r7, #28]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	bf34      	ite	cc
 8002c86:	2301      	movcc	r3, #1
 8002c88:	2300      	movcs	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08025b5c 	.word	0x08025b5c
 8002ca4:	2400ae74 	.word	0x2400ae74
 8002ca8:	2400ae68 	.word	0x2400ae68
 8002cac:	2400ae6e 	.word	0x2400ae6e
 8002cb0:	2400ae6a 	.word	0x2400ae6a
 8002cb4:	2400ae70 	.word	0x2400ae70
 8002cb8:	2400ae6c 	.word	0x2400ae6c

08002cbc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fe77 	bl	80029c0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	08025e4c 	.word	0x08025e4c

08002ce0 <_ZN8touchgfx11ApplicationD0Ev>:
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffe7 	bl	8002cbc <_ZN8touchgfx11ApplicationD1Ev>
 8002cee:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f020 fab7 	bl	8023266 <_ZdlPvj>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f804 	bl	8002d18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00f      	beq.n	8002d4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4610      	mov	r0, r2
 8002d64:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff97 	bl	8002cbc <_ZN8touchgfx11ApplicationD1Ev>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	080253fc 	.word	0x080253fc

08002d9c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe7 	bl	8002d78 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002daa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f020 fa59 	bl	8023266 <_ZdlPvj>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fb0b 	bl	80033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ffcb 	bl	8002d78 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08025398 	.word	0x08025398

08002df0 <_ZN23FrontendApplicationBaseD0Ev>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ffe1 	bl	8002dc0 <_ZN23FrontendApplicationBaseD1Ev>
 8002dfe:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f020 fa2f 	bl	8023266 <_ZdlPvj>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f001 f90a 	bl	8004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ffc1 	bl	8002dc0 <_ZN23FrontendApplicationBaseD1Ev>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	0802534c 	.word	0x0802534c

08002e4c <_ZN19FrontendApplicationD0Ev>:
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ffe7 	bl	8002e28 <_ZN19FrontendApplicationD1Ev>
 8002e5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f020 fa01 	bl	8023266 <_ZdlPvj>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fa85 	bl	800638c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f011 ff3b 	bl	8014d00 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f8c8 	bl	8004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	f7ff fcf9 	bl	80028bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]
    {

    }
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	08025338 	.word	0x08025338

08002ee0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4801      	ldr	r0, [pc, #4]	; (8002eec <__tcf_0+0xc>)
 8002ee6:	f000 f959 	bl	800319c <_ZN12FrontendHeapD1Ev>
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	24000384 	.word	0x24000384

08002ef0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	f3bf 8f5b 	dmb	ish
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f10:	480b      	ldr	r0, [pc, #44]	; (8002f40 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f12:	f020 f9aa 	bl	802326a <__cxa_guard_acquire>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f26:	4807      	ldr	r0, [pc, #28]	; (8002f44 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002f28:	f000 f868 	bl	8002ffc <_ZN12FrontendHeapC1Ev>
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002f2e:	f020 f9e7 	bl	8023300 <atexit>
 8002f32:	4803      	ldr	r0, [pc, #12]	; (8002f40 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f34:	f020 f9a5 	bl	8023282 <__cxa_guard_release>
        return instance;
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	240005d8 	.word	0x240005d8
 8002f44:	24000384 	.word	0x24000384
 8002f48:	08002ee1 	.word	0x08002ee1

08002f4c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fccd 	bl	80028fc <_ZN8touchgfx7MVPHeapD1Ev>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08025338 	.word	0x08025338

08002f70 <_ZN16FrontendHeapBaseD0Ev>:
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff ffe7 	bl	8002f4c <_ZN16FrontendHeapBaseD1Ev>
 8002f7e:	2114      	movs	r1, #20
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f020 f970 	bl	8023266 <_ZdlPvj>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00f fcb6 	bl	801290c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	08025304 	.word	0x08025304

08002fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f00f fca4 	bl	801290c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fc4:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	080252d0 	.word	0x080252d0

08002fd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f00f fc92 	bl	801290c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fe8:	4a03      	ldr	r2, [pc, #12]	; (8002ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0802529c 	.word	0x0802529c

08002ffc <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 0114 	add.w	r1, r3, #20
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	33fc      	adds	r3, #252	; 0xfc
                     app(model, *this)
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4623      	mov	r3, r4
 8003020:	f7ff ff44 	bl	8002eac <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003024:	4a15      	ldr	r2, [pc, #84]	; (800307c <_ZN12FrontendHeapC1Ev+0x80>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3314      	adds	r3, #20
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff ffae 	bl	8002f90 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	332c      	adds	r3, #44	; 0x2c
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ffbb 	bl	8002fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	33e4      	adds	r3, #228	; 0xe4
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffc8 	bl	8002fd8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	33f8      	adds	r3, #248	; 0xf8
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f98f 	bl	8006370 <_ZN5ModelC1Ev>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	33f8      	adds	r3, #248	; 0xf8
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4619      	mov	r1, r3
 8003060:	f003 f970 	bl	8006344 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	33fc      	adds	r3, #252	; 0xfc
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7ff ff10 	bl	8002e92 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	08025288 	.word	0x08025288

08003080 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	8bbb      	ldrh	r3, [r7, #28]
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	8b3b      	ldrh	r3, [r7, #24]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	f7ff fd4d 	bl	8002b3c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	601a      	str	r2, [r3, #0]
    }
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	080254ac 	.word	0x080254ac

080030b8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	8bbb      	ldrh	r3, [r7, #28]
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	8b3b      	ldrh	r3, [r7, #24]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	f7ff ffd3 	bl	8003080 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]
    }
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	0802513c 	.word	0x0802513c

080030f0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	08025124 	.word	0x08025124

08003110 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ffe8 	bl	80030f0 <_ZN8touchgfx15TouchControllerC1Ev>
 8003120:	4a03      	ldr	r2, [pc, #12]	; (8003130 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	0802510c 	.word	0x0802510c

08003134 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b085      	sub	sp, #20
 8003138:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800313a:	f000 fd55 	bl	8003be8 <_ZN14BitmapDatabase11getInstanceEv>
 800313e:	4604      	mov	r4, r0
 8003140:	f000 fd5c 	bl	8003bfc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003144:	4603      	mov	r3, r0
 8003146:	4619      	mov	r1, r3
 8003148:	2300      	movs	r3, #0
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	2200      	movs	r2, #0
 8003150:	4620      	mov	r0, r4
 8003152:	f014 fa9b 	bl	801768c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003156:	4809      	ldr	r0, [pc, #36]	; (800317c <touchgfx_init+0x48>)
 8003158:	f7ff fb80 	bl	800285c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800315c:	2000      	movs	r0, #0
 800315e:	f003 f85f 	bl	8006220 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003162:	4807      	ldr	r0, [pc, #28]	; (8003180 <touchgfx_init+0x4c>)
 8003164:	f014 f9fa 	bl	801755c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003168:	f7ff fec2 	bl	8002ef0 <_ZN12FrontendHeap11getInstanceEv>
 800316c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <touchgfx_init+0x50>)
 8003170:	f7fe fda6 	bl	8001cc0 <_ZN11TouchGFXHAL10initializeEv>
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	240013f8 	.word	0x240013f8
 8003180:	24000008 	.word	0x24000008
 8003184:	240013fc 	.word	0x240013fc

08003188 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800318c:	4802      	ldr	r0, [pc, #8]	; (8003198 <touchgfx_taskEntry+0x10>)
 800318e:	f00f fed0 	bl	8012f32 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	240013fc 	.word	0x240013fc

0800319c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <_ZN12FrontendHeapD1Ev+0x48>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	33fc      	adds	r3, #252	; 0xfc
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fe3a 	bl	8002e28 <_ZN19FrontendApplicationD1Ev>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	33e4      	adds	r3, #228	; 0xe4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f827 	bl	800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	332c      	adds	r3, #44	; 0x2c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f844 	bl	8003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3314      	adds	r3, #20
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f861 	bl	8003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff feb9 	bl	8002f4c <_ZN16FrontendHeapBaseD1Ev>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	08025288 	.word	0x08025288

080031e8 <_ZN12FrontendHeapD0Ev>:
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ffd3 	bl	800319c <_ZN12FrontendHeapD1Ev>
 80031f6:	f44f 7115 	mov.w	r1, #596	; 0x254
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f020 f833 	bl	8023266 <_ZdlPvj>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	4a05      	ldr	r2, [pc, #20]	; (800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f00f fb74 	bl	801290a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0802529c 	.word	0x0802529c

08003230 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffe7 	bl	800320c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800323e:	2114      	movs	r1, #20
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f020 f810 	bl	8023266 <_ZdlPvj>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4a05      	ldr	r2, [pc, #20]	; (8003270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f00f fb52 	bl	801290a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	080252d0 	.word	0x080252d0

08003274 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ffe7 	bl	8003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003282:	21b8      	movs	r1, #184	; 0xb8
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f01f ffee 	bl	8023266 <_ZdlPvj>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00f fb30 	bl	801290a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	08025304 	.word	0x08025304

080032b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ffe7 	bl	8003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032c6:	2118      	movs	r1, #24
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f01f ffcc 	bl	8023266 <_ZdlPvj>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fac7 	bl	800287c <_ZN8touchgfx12FontProviderD1Ev>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08025584 	.word	0x08025584

080032fc <_ZN23ApplicationFontProviderD0Ev>:
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ffe7 	bl	80032d8 <_ZN23ApplicationFontProviderD1Ev>
 800330a:	2104      	movs	r1, #4
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f01f ffaa 	bl	8023266 <_ZdlPvj>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	4a05      	ldr	r2, [pc, #20]	; (800333c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fb67 	bl	8002a00 <_ZN8touchgfx3LCDD1Ev>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	080261f8 	.word	0x080261f8

08003340 <_ZN8touchgfx8LCD16bppD0Ev>:
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ffe7 	bl	800331c <_ZN8touchgfx8LCD16bppD1Ev>
 800334e:	2178      	movs	r1, #120	; 0x78
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f01f ff88 	bl	8023266 <_ZdlPvj>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <_Z41__static_initialization_and_destruction_0ii>:
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af02      	add	r7, sp, #8
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d119      	bne.n	80033a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003376:	4293      	cmp	r3, r2
 8003378:	d114      	bne.n	80033a4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800337a:	4818      	ldr	r0, [pc, #96]	; (80033dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800337c:	f7ff fec8 	bl	8003110 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003380:	4817      	ldr	r0, [pc, #92]	; (80033e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003382:	f7fe ff2d 	bl	80021e0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8003386:	4817      	ldr	r0, [pc, #92]	; (80033e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003388:	f017 fa82 	bl	801a890 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800338c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800339e:	4812      	ldr	r0, [pc, #72]	; (80033e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80033a0:	f7ff fe8a 	bl	80030b8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d113      	bne.n	80033d2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10e      	bne.n	80033d2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80033b6:	f7fe fcfb 	bl	8001db0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80033ba:	480c      	ldr	r0, [pc, #48]	; (80033ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80033bc:	f7ff ff8c 	bl	80032d8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80033c0:	4808      	ldr	r0, [pc, #32]	; (80033e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033c2:	f7ff ffab 	bl	800331c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033c8:	f7fe ff34 	bl	8002234 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80033ce:	f7fe f9d5 	bl	800177c <_ZN20STM32TouchControllerD1Ev>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	240005dc 	.word	0x240005dc
 80033e0:	240005e0 	.word	0x240005e0
 80033e4:	24001380 	.word	0x24001380
 80033e8:	240013fc 	.word	0x240013fc
 80033ec:	24000008 	.word	0x24000008

080033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	4a05      	ldr	r2, [pc, #20]	; (8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fb45 	bl	8002a90 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	080253e4 	.word	0x080253e4

08003414 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ffe7 	bl	80033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003422:	2110      	movs	r1, #16
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f01f ff1e 	bl	8023266 <_ZdlPvj>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800343c:	2301      	movs	r3, #1
    }
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003452:	230c      	movs	r3, #12
    }
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800346c:	887a      	ldrh	r2, [r7, #2]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3308      	adds	r3, #8
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
    }
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3308      	adds	r3, #8
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
    }
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034b8:	2301      	movs	r3, #1
    }
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034ce:	23b0      	movs	r3, #176	; 0xb0
    }
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	22b0      	movs	r2, #176	; 0xb0
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	3308      	adds	r3, #8
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
    }
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	22b0      	movs	r2, #176	; 0xb0
 8003512:	fb02 f303 	mul.w	r3, r2, r3
 8003516:	3308      	adds	r3, #8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
    }
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003530:	2301      	movs	r3, #1
    }
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003546:	2310      	movs	r3, #16
    }
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003560:	887b      	ldrh	r3, [r7, #2]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	3308      	adds	r3, #8
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
    }
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3308      	adds	r3, #8
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
    }
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68d2      	ldr	r2, [r2, #12]
 80035a8:	1052      	asrs	r2, r2, #1
 80035aa:	1899      	adds	r1, r3, r2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	e00a      	b.n	80035d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	1052      	asrs	r2, r2, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4798      	blx	r3
    }
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003608:	2300      	movs	r3, #0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003612:	2300      	movs	r3, #0
    }
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_GLOBAL__sub_I_touchgfx_init>:
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
 8003624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003628:	2001      	movs	r0, #1
 800362a:	f7ff fe99 	bl	8003360 <_Z41__static_initialization_and_destruction_0ii>
 800362e:	bd80      	pop	{r7, pc}

08003630 <_GLOBAL__sub_D_touchgfx_init>:
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
 8003634:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003638:	2000      	movs	r0, #0
 800363a:	f7ff fe91 	bl	8003360 <_Z41__static_initialization_and_destruction_0ii>
 800363e:	bd80      	pop	{r7, pc}

08003640 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3320      	adds	r3, #32
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
    }
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <__NVIC_EnableIRQ>:
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800368a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db0b      	blt.n	80036aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <__NVIC_EnableIRQ+0x38>)
 800369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2001      	movs	r0, #1
 80036a2:	fa00 f202 	lsl.w	r2, r0, r2
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e100 	.word	0xe000e100

080036bc <__NVIC_DisableIRQ>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db12      	blt.n	80036f4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	88fb      	ldrh	r3, [r7, #6]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	490a      	ldr	r1, [pc, #40]	; (8003700 <__NVIC_DisableIRQ+0x44>)
 80036d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	3320      	adds	r3, #32
 80036e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80036e8:	f3bf 8f4f 	dsb	sy
}
 80036ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036ee:	f3bf 8f6f 	isb	sy
}
 80036f2:	bf00      	nop
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4618      	mov	r0, r3
 8003764:	f00f fbd3 	bl	8012f0e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003768:	687d      	ldr	r5, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3364      	adds	r3, #100	; 0x64
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	f011 fc0d 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8003776:	4603      	mov	r3, r0
 8003778:	4619      	mov	r1, r3
 800377a:	4628      	mov	r0, r5
 800377c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3388      	adds	r3, #136	; 0x88
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800378c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003790:	47a0      	blx	r4
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bdb0      	pop	{r4, r5, r7, pc}
 800379a:	bf00      	nop
 800379c:	d0200000 	.word	0xd0200000

080037a0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80037a8:	2109      	movs	r1, #9
 80037aa:	205a      	movs	r0, #90	; 0x5a
 80037ac:	f7ff ffaa 	bl	8003704 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80037b0:	2109      	movs	r1, #9
 80037b2:	2058      	movs	r0, #88	; 0x58
 80037b4:	f7ff ffa6 	bl	8003704 <__NVIC_SetPriority>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80037c8:	205a      	movs	r0, #90	; 0x5a
 80037ca:	f7ff ff59 	bl	8003680 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80037ce:	2058      	movs	r0, #88	; 0x58
 80037d0:	f7ff ff56 	bl	8003680 <__NVIC_EnableIRQ>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80037e4:	205a      	movs	r0, #90	; 0x5a
 80037e6:	f7ff ff69 	bl	80036bc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80037ea:	2058      	movs	r0, #88	; 0x58
 80037ec:	f7ff ff66 	bl	80036bc <__NVIC_DisableIRQ>
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003812:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	b29b      	uxth	r3, r3
 800381a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003826:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800382e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	50001000 	.word	0x50001000
 800384c:	2400147a 	.word	0x2400147a
 8003850:	2400147c 	.word	0x2400147c

08003854 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4618      	mov	r0, r3
 8003860:	f00f fb3c 	bl	8012edc <_ZN8touchgfx3HAL10beginFrameEv>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4618      	mov	r0, r3
 800388c:	f00f fb32 	bl	8012ef4 <_ZN8touchgfx3HAL8endFrameEv>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	24001478 	.word	0x24001478

0800389c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	50001084 	.word	0x50001084

080038b8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80038c2:	4a06      	ldr	r2, [pc, #24]	; (80038dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	50001084 	.word	0x50001084
 80038e0:	50001000 	.word	0x50001000

080038e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f00f fabc 	bl	8012e70 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03c      	beq.n	8003988 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003910:	2200      	movs	r2, #0
 8003912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003916:	f3bf 8f4f 	dsb	sy
}
 800391a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800391e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003922:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	0b5b      	lsrs	r3, r3, #13
 8003928:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800392c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003936:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003940:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003946:	4912      	ldr	r1, [pc, #72]	; (8003990 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e5a      	subs	r2, r3, #1
 8003952:	60fa      	str	r2, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d000      	beq.n	8003964 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003962:	e7e9      	b.n	8003938 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	613a      	str	r2, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d000      	beq.n	800397a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003978:	e7d9      	b.n	800392e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800397a:	f3bf 8f4f 	dsb	sy
}
 800397e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003980:	f3bf 8f6f 	isb	sy
}
 8003984:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003986:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	f00f fbca 	bl	8013142 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf14      	ite	ne
 80039cc:	2301      	movne	r3, #1
 80039ce:	2300      	moveq	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d03c      	beq.n	8003a50 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039d6:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039de:	f3bf 8f4f 	dsb	sy
}
 80039e2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80039e4:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ea:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	0b5b      	lsrs	r3, r3, #13
 80039f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80039f4:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fe:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a08:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a0e:	4913      	ldr	r1, [pc, #76]	; (8003a5c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	1e5a      	subs	r2, r3, #1
 8003a1a:	60fa      	str	r2, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d000      	beq.n	8003a2c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003a2a:	e7e9      	b.n	8003a00 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	613a      	str	r2, [r7, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bf14      	ite	ne
 8003a36:	2301      	movne	r3, #1
 8003a38:	2300      	moveq	r3, #0
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d000      	beq.n	8003a42 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003a40:	e7d9      	b.n	80039f6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a42:	f3bf 8f4f 	dsb	sy
}
 8003a46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a48:	f3bf 8f6f 	isb	sy
}
 8003a4c:	bf00      	nop
}
 8003a4e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a50:	bf00      	nop
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a68:	4b26      	ldr	r3, [pc, #152]	; (8003b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a7e:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a86:	f3bf 8f4f 	dsb	sy
}
 8003a8a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a92:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a9c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aa6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003ab0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ab6:	4913      	ldr	r1, [pc, #76]	; (8003b04 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	60fa      	str	r2, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8003ad2:	e7e9      	b.n	8003aa8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1e5a      	subs	r2, r3, #1
 8003ad8:	613a      	str	r2, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d000      	beq.n	8003aea <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8003ae8:	e7d9      	b.n	8003a9e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003aea:	f3bf 8f4f 	dsb	sy
}
 8003aee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003af0:	f3bf 8f6f 	isb	sy
}
 8003af4:	bf00      	nop
}
 8003af6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003b10:	f7fe fb2c 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d132      	bne.n	8003b8a <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_LTDC_LineEventCallback+0x8c>)
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_LTDC_LineEventCallback+0x90>)
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003b3a:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <HAL_LTDC_LineEventCallback+0x94>)
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f00a fe8b 	bl	800e85c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003b46:	f7fe fb11 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fd85 	bl	800365c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003b52:	f7fe fa05 	bl	8001f60 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003b56:	f7fe fb09 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f00f ff1b 	bl	8013998 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7fd fe2c 	bl	80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003b68:	e010      	b.n	8003b8c <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_LTDC_LineEventCallback+0x90>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f00a fe73 	bl	800e85c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8003b76:	f7fe faf9 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fd5f 	bl	8003640 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fd fe78 	bl	8001878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8003b88:	e000      	b.n	8003b8c <HAL_LTDC_LineEventCallback+0x84>
            return;
 8003b8a:	bf00      	nop
        }
    }
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	50001000 	.word	0x50001000
 8003b98:	2400147a 	.word	0x2400147a
 8003b9c:	2400147c 	.word	0x2400147c

08003ba0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d010      	beq.n	8003bd4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	dc13      	bgt.n	8003bde <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d005      	beq.n	8003bca <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003bbe:	e00e      	b.n	8003bde <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003bc0:	f002 fb8c 	bl	80062dc <_ZN17TypedTextDatabase8getFontsEv>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	e00a      	b.n	8003be0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003bca:	f002 fb87 	bl	80062dc <_ZN17TypedTextDatabase8getFontsEv>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	e005      	b.n	8003be0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003bd4:	f002 fb82 	bl	80062dc <_ZN17TypedTextDatabase8getFontsEv>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	e000      	b.n	8003be0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003bde:	2300      	movs	r3, #0
    }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	08025590 	.word	0x08025590

08003bfc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003c00:	2302      	movs	r3, #2
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    {
 8003c14:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
    }
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	08025860 	.word	0x08025860

08003c2c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    }
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ffe9 	bl	8003c0c <_ZN8touchgfx4FontD1Ev>
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f01f fb12 	bl	8023266 <_ZdlPvj>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e010      	b.n	8003c84 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	681c      	ldr	r4, [r3, #0]
 8003c72:	f107 030f 	add.w	r3, r7, #15
 8003c76:	f107 0210 	add.w	r2, r7, #16
 8003c7a:	8879      	ldrh	r1, [r7, #2]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	47a0      	blx	r4
 8003c80:	6178      	str	r0, [r7, #20]
        return glyph;
 8003c82:	697b      	ldr	r3, [r7, #20]
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	895b      	ldrh	r3, [r3, #10]
    }
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	899b      	ldrh	r3, [r3, #12]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	889b      	ldrh	r3, [r3, #4]
    }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	889a      	ldrh	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	799b      	ldrb	r3, [r3, #6]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
    }
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	79db      	ldrb	r3, [r3, #7]
 8003d02:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003d06:	b2db      	uxtb	r3, r3
    }
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	79db      	ldrb	r3, [r3, #7]
 8003d20:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d24:	b2db      	uxtb	r3, r3
    }
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ff61 	bl	8003c0c <_ZN8touchgfx4FontD1Ev>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08025f00 	.word	0x08025f00

08003d58 <_ZN8touchgfx9ConstFontD0Ev>:
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ffe7 	bl	8003d34 <_ZN8touchgfx9ConstFontD1Ev>
 8003d66:	2118      	movs	r1, #24
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f01f fa7c 	bl	8023266 <_ZdlPvj>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	4a05      	ldr	r2, [pc, #20]	; (8003d98 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ffd3 	bl	8003d34 <_ZN8touchgfx9ConstFontD1Ev>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08025608 	.word	0x08025608

08003d9c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ffe7 	bl	8003d78 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003daa:	2128      	movs	r1, #40	; 0x28
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f01f fa5a 	bl	8023266 <_ZdlPvj>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003de4:	4b08      	ldr	r3, [pc, #32]	; (8003e08 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df4:	e002      	b.n	8003dfc <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003df6:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	2400ae74 	.word	0x2400ae74

08003e0c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	721a      	strb	r2, [r3, #8]
    {
    }
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	080255e4 	.word	0x080255e4

08003e38 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    {
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	601a      	str	r2, [r3, #0]
    }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	080255e4 	.word	0x080255e4

08003e58 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    }
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ffe9 	bl	8003e38 <_ZN8touchgfx10TransitionD1Ev>
 8003e66:	210c      	movs	r1, #12
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f01f f9fc 	bl	8023266 <_ZdlPvj>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    {
    }
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    {
    }
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    {
    }
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8003ebc:	f011 f868 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f011 fc0a 	bl	80156dc <_ZN8touchgfx11Application10invalidateEv>
    }
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]
    }
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f011 f86c 	bl	8014fd4 <_ZN8touchgfx11ApplicationC1Ev>
 8003efc:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a04      	ldr	r2, [pc, #16]	; (8003f28 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003f16:	6013      	str	r3, [r2, #0]
    }
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	080253fc 	.word	0x080253fc
 8003f28:	2400aec0 	.word	0x2400aec0

08003f2c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	601a      	str	r2, [r3, #0]
    }
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	721a      	strb	r2, [r3, #8]
    }
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	605a      	str	r2, [r3, #4]
    }
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ffac 	bl	8003eec <_ZN8touchgfx14MVPApplicationC1Ev>
 8003f94:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f929 	bl	80041f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003fb6:	f7fe f8d9 	bl	800216c <_ZN8touchgfx3HAL11getInstanceEv>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003fc8:	f7ff ff04 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f018 fa45 	bl	801c45e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	08025398 	.word	0x08025398

08003fe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ffe9 	bl	8003fe4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	3308      	adds	r3, #8
 8004020:	3208      	adds	r2, #8
 8004022:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004026:	e883 0003 	stmia.w	r3, {r0, r1}
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b089      	sub	sp, #36	; 0x24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	f107 0008 	add.w	r0, r7, #8
 800404e:	f107 0318 	add.w	r3, r7, #24
 8004052:	cb0c      	ldmia	r3, {r2, r3}
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	f000 f8eb 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f7ff ffcb 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f9c0 	bl	80033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800407c:	bf00      	nop
 800407e:	3724      	adds	r7, #36	; 0x24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd90      	pop	{r4, r7, pc}
 8004084:	08004089 	.word	0x08004089

08004088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af02      	add	r7, sp, #8
 800408e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80040a8:	4804      	ldr	r0, [pc, #16]	; (80040bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80040aa:	f000 f8f3 	bl	8004294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2400aeb4 	.word	0x2400aeb4
 80040bc:	2400aeb0 	.word	0x2400aeb0

080040c0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 80040c0:	b590      	push	{r4, r7, lr}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	f107 0008 	add.w	r0, r7, #8
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	cb0c      	ldmia	r3, {r2, r3}
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	f000 f8a5 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4619      	mov	r1, r3
 80040ec:	4620      	mov	r0, r4
 80040ee:	f7ff ff85 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80040f2:	f107 0308 	add.w	r3, r7, #8
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7ff f97a 	bl	80033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004108:	bf00      	nop
 800410a:	3724      	adds	r7, #36	; 0x24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}
 8004110:	08004115 	.word	0x08004115

08004114 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af02      	add	r7, sp, #8
 800411a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 8004134:	4804      	ldr	r0, [pc, #16]	; (8004148 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 8004136:	f000 f9c7 	bl	80044c8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	2400aeb4 	.word	0x2400aeb4
 8004148:	2400aeb0 	.word	0x2400aeb0

0800414c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	f107 0008 	add.w	r0, r7, #8
 8004166:	f107 0318 	add.w	r3, r7, #24
 800416a:	cb0c      	ldmia	r3, {r2, r3}
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	f000 f85f 	bl	8004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4619      	mov	r1, r3
 8004178:	4620      	mov	r0, r4
 800417a:	f7ff ff3f 	bl	8003ffc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f934 	bl	80033f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004194:	bf00      	nop
 8004196:	3724      	adds	r7, #36	; 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	080041a1 	.word	0x080041a1

080041a0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 80041c2:	f000 fa9b 	bl	80046fc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2400aeb4 	.word	0x2400aeb4
 80041d4:	2400aeb0 	.word	0x2400aeb0

080041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	08025448 	.word	0x08025448

080041f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ffe8 	bl	80041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004208:	4a08      	ldr	r2, [pc, #32]	; (800422c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	60da      	str	r2, [r3, #12]
    }
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	080253e4 	.word	0x080253e4

08004230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	4639      	mov	r1, r7
 800423c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ffc8 	bl	80041d8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3308      	adds	r3, #8
 8004258:	463a      	mov	r2, r7
 800425a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800425e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	080253e4 	.word	0x080253e4

08004270 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fdc6 	bl	8003e0c <_ZN8touchgfx10TransitionC1Ev>
 8004280:	4a03      	ldr	r2, [pc, #12]	; (8004290 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	080255c0 	.word	0x080255c0

08004294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b08f      	sub	sp, #60	; 0x3c
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3320      	adds	r3, #32
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4610      	mov	r0, r2
 80042b2:	4798      	blx	r3
 80042b4:	4603      	mov	r3, r0
 80042b6:	2baf      	cmp	r3, #175	; 0xaf
 80042b8:	d805      	bhi.n	80042c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80042ba:	4b7e      	ldr	r3, [pc, #504]	; (80044b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80042bc:	4a7e      	ldr	r2, [pc, #504]	; (80044b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80042be:	21a3      	movs	r1, #163	; 0xa3
 80042c0:	487e      	ldr	r0, [pc, #504]	; (80044bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80042c2:	f01e ffff 	bl	80232c4 <__assert_func>
 80042c6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3320      	adds	r3, #32
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4610      	mov	r0, r2
 80042d8:	4798      	blx	r3
 80042da:	4603      	mov	r3, r0
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d805      	bhi.n	80042ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 80042e0:	4b77      	ldr	r3, [pc, #476]	; (80044c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80042e2:	4a75      	ldr	r2, [pc, #468]	; (80044b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80042e4:	21a4      	movs	r1, #164	; 0xa4
 80042e6:	4875      	ldr	r0, [pc, #468]	; (80044bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80042e8:	f01e ffec 	bl	80232c4 <__assert_func>
 80042ec:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3320      	adds	r3, #32
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4610      	mov	r0, r2
 80042fe:	4798      	blx	r3
 8004300:	4603      	mov	r3, r0
 8004302:	2b0b      	cmp	r3, #11
 8004304:	d805      	bhi.n	8004312 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004306:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004308:	4a6b      	ldr	r2, [pc, #428]	; (80044b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800430a:	21a5      	movs	r1, #165	; 0xa5
 800430c:	486b      	ldr	r0, [pc, #428]	; (80044bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800430e:	f01e ffd9 	bl	80232c4 <__assert_func>
 8004312:	bf00      	nop
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004320:	f010 fe36 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8004324:	4603      	mov	r3, r0
 8004326:	4618      	mov	r0, r3
 8004328:	f010 fe38 	bl	8014f9c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4610      	mov	r0, r2
 8004344:	4798      	blx	r3
    if (*currentTrans)
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4610      	mov	r0, r2
 800435c:	4798      	blx	r3
    if (*currentScreen)
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d008      	beq.n	8004378 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4610      	mov	r0, r2
 8004376:	4798      	blx	r3
    if (*currentPresenter)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3304      	adds	r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4610      	mov	r0, r2
 8004390:	4798      	blx	r3
    if (*currentScreen)
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4610      	mov	r0, r2
 80043a8:	4798      	blx	r3
    if (*currentPresenter)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4610      	mov	r0, r2
 80043c2:	4798      	blx	r3
}
 80043c4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 faaf 	bl	8004930 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4619      	mov	r1, r3
 80043d6:	200c      	movs	r0, #12
 80043d8:	f7ff fcf0 	bl	8003dbc <_ZnwjPv>
 80043dc:	4604      	mov	r4, r0
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff ff46 	bl	8004270 <_ZN8touchgfx12NoTransitionC1Ev>
 80043e4:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fab2 	bl	8004956 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4619      	mov	r1, r3
 80043f6:	20b0      	movs	r0, #176	; 0xb0
 80043f8:	f7ff fce0 	bl	8003dbc <_ZnwjPv>
 80043fc:	4604      	mov	r4, r0
 80043fe:	4620      	mov	r0, r4
 8004400:	f002 f8d0 	bl	80065a4 <_ZN11Screen1ViewC1Ev>
 8004404:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fab5 	bl	800497c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004412:	4603      	mov	r3, r0
 8004414:	4619      	mov	r1, r3
 8004416:	2010      	movs	r0, #16
 8004418:	f7ff fcd0 	bl	8003dbc <_ZnwjPv>
 800441c:	4604      	mov	r4, r0
 800441e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004420:	4620      	mov	r0, r4
 8004422:	f002 f869 	bl	80064f8 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004426:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004432:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004438:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	3304      	adds	r3, #4
 8004444:	e000      	b.n	8004448 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004446:	2300      	movs	r3, #0
 8004448:	4619      	mov	r1, r3
 800444a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800444c:	f7ff fd6e 	bl	8003f2c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	3304      	adds	r3, #4
 8004454:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fd83 	bl	8003f62 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fa9e 	bl	80049a2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	330c      	adds	r3, #12
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69f8      	ldr	r0, [r7, #28]
 800447c:	4798      	blx	r3
    newPresenter->activate();
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69b8      	ldr	r0, [r7, #24]
 8004486:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004488:	6979      	ldr	r1, [r7, #20]
 800448a:	69f8      	ldr	r0, [r7, #28]
 800448c:	f012 f95e 	bl	801674c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3310      	adds	r3, #16
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6978      	ldr	r0, [r7, #20]
 800449a:	4798      	blx	r3
    newTransition->invalidate();
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	4798      	blx	r3
}
 80044a8:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80044aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	373c      	adds	r7, #60	; 0x3c
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd90      	pop	{r4, r7, pc}
 80044b4:	08024874 	.word	0x08024874
 80044b8:	08024904 	.word	0x08024904
 80044bc:	08024a08 	.word	0x08024a08
 80044c0:	08024a60 	.word	0x08024a60
 80044c4:	08024b04 	.word	0x08024b04

080044c8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b08f      	sub	sp, #60	; 0x3c
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3320      	adds	r3, #32
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
 80044e8:	4603      	mov	r3, r0
 80044ea:	2baf      	cmp	r3, #175	; 0xaf
 80044ec:	d805      	bhi.n	80044fa <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80044ee:	4b7e      	ldr	r3, [pc, #504]	; (80046e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80044f0:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80044f2:	21a3      	movs	r1, #163	; 0xa3
 80044f4:	487e      	ldr	r0, [pc, #504]	; (80046f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80044f6:	f01e fee5 	bl	80232c4 <__assert_func>
 80044fa:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3320      	adds	r3, #32
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4610      	mov	r0, r2
 800450c:	4798      	blx	r3
 800450e:	4603      	mov	r3, r0
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d805      	bhi.n	8004520 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004514:	4b77      	ldr	r3, [pc, #476]	; (80046f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004516:	4a75      	ldr	r2, [pc, #468]	; (80046ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004518:	21a4      	movs	r1, #164	; 0xa4
 800451a:	4875      	ldr	r0, [pc, #468]	; (80046f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800451c:	f01e fed2 	bl	80232c4 <__assert_func>
 8004520:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3320      	adds	r3, #32
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
 8004534:	4603      	mov	r3, r0
 8004536:	2b0b      	cmp	r3, #11
 8004538:	d805      	bhi.n	8004546 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800453a:	4b6f      	ldr	r3, [pc, #444]	; (80046f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800453c:	4a6b      	ldr	r2, [pc, #428]	; (80046ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800453e:	21a5      	movs	r1, #165	; 0xa5
 8004540:	486b      	ldr	r0, [pc, #428]	; (80046f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004542:	f01e febf 	bl	80232c4 <__assert_func>
 8004546:	bf00      	nop
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004554:	f010 fd1c 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8004558:	4603      	mov	r3, r0
 800455a:	4618      	mov	r0, r3
 800455c:	f010 fd1e 	bl	8014f9c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4610      	mov	r0, r2
 8004578:	4798      	blx	r3
    if (*currentTrans)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4610      	mov	r0, r2
 8004590:	4798      	blx	r3
    if (*currentScreen)
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d008      	beq.n	80045ac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
    if (*currentPresenter)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3304      	adds	r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4610      	mov	r0, r2
 80045c4:	4798      	blx	r3
    if (*currentScreen)
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4610      	mov	r0, r2
 80045dc:	4798      	blx	r3
    if (*currentPresenter)
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4610      	mov	r0, r2
 80045f6:	4798      	blx	r3
}
 80045f8:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f995 	bl	8004930 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004606:	4603      	mov	r3, r0
 8004608:	4619      	mov	r1, r3
 800460a:	200c      	movs	r0, #12
 800460c:	f7ff fbd6 	bl	8003dbc <_ZnwjPv>
 8004610:	4604      	mov	r4, r0
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe2c 	bl	8004270 <_ZN8touchgfx12NoTransitionC1Ev>
 8004618:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f9cc 	bl	80049be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8004626:	4603      	mov	r3, r0
 8004628:	4619      	mov	r1, r3
 800462a:	20b0      	movs	r0, #176	; 0xb0
 800462c:	f7ff fbc6 	bl	8003dbc <_ZnwjPv>
 8004630:	4604      	mov	r4, r0
 8004632:	4620      	mov	r0, r4
 8004634:	f002 f86a 	bl	800670c <_ZN11Screen2ViewC1Ev>
 8004638:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f9cf 	bl	80049e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8004646:	4603      	mov	r3, r0
 8004648:	4619      	mov	r1, r3
 800464a:	2010      	movs	r0, #16
 800464c:	f7ff fbb6 	bl	8003dbc <_ZnwjPv>
 8004650:	4604      	mov	r4, r0
 8004652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004654:	4620      	mov	r0, r4
 8004656:	f002 f803 	bl	8006660 <_ZN16Screen2PresenterC1ER11Screen2View>
 800465a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004660:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004666:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004676:	3304      	adds	r3, #4
 8004678:	e000      	b.n	800467c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800467a:	2300      	movs	r3, #0
 800467c:	4619      	mov	r1, r3
 800467e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004680:	f7ff fc54 	bl	8003f2c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	3304      	adds	r3, #4
 8004688:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fc69 	bl	8003f62 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f9b8 	bl	8004a0a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	330c      	adds	r3, #12
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69f8      	ldr	r0, [r7, #28]
 80046b0:	4798      	blx	r3
    newPresenter->activate();
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69b8      	ldr	r0, [r7, #24]
 80046ba:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80046bc:	6979      	ldr	r1, [r7, #20]
 80046be:	69f8      	ldr	r0, [r7, #28]
 80046c0:	f012 f844 	bl	801674c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3310      	adds	r3, #16
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	4798      	blx	r3
    newTransition->invalidate();
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	4798      	blx	r3
}
 80046dc:	bf00      	nop
    return newPresenter;
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	373c      	adds	r7, #60	; 0x3c
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	08024874 	.word	0x08024874
 80046ec:	08024ba8 	.word	0x08024ba8
 80046f0:	08024a08 	.word	0x08024a08
 80046f4:	08024a60 	.word	0x08024a60
 80046f8:	08024b04 	.word	0x08024b04

080046fc <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b08f      	sub	sp, #60	; 0x3c
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3320      	adds	r3, #32
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4610      	mov	r0, r2
 800471a:	4798      	blx	r3
 800471c:	4603      	mov	r3, r0
 800471e:	2baf      	cmp	r3, #175	; 0xaf
 8004720:	d805      	bhi.n	800472e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8004722:	4b7e      	ldr	r3, [pc, #504]	; (800491c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004724:	4a7e      	ldr	r2, [pc, #504]	; (8004920 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004726:	21a3      	movs	r1, #163	; 0xa3
 8004728:	487e      	ldr	r0, [pc, #504]	; (8004924 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800472a:	f01e fdcb 	bl	80232c4 <__assert_func>
 800472e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3320      	adds	r3, #32
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4610      	mov	r0, r2
 8004740:	4798      	blx	r3
 8004742:	4603      	mov	r3, r0
 8004744:	2b0f      	cmp	r3, #15
 8004746:	d805      	bhi.n	8004754 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004748:	4b77      	ldr	r3, [pc, #476]	; (8004928 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800474a:	4a75      	ldr	r2, [pc, #468]	; (8004920 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800474c:	21a4      	movs	r1, #164	; 0xa4
 800474e:	4875      	ldr	r0, [pc, #468]	; (8004924 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004750:	f01e fdb8 	bl	80232c4 <__assert_func>
 8004754:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3320      	adds	r3, #32
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
 8004768:	4603      	mov	r3, r0
 800476a:	2b0b      	cmp	r3, #11
 800476c:	d805      	bhi.n	800477a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800476e:	4b6f      	ldr	r3, [pc, #444]	; (800492c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004770:	4a6b      	ldr	r2, [pc, #428]	; (8004920 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004772:	21a5      	movs	r1, #165	; 0xa5
 8004774:	486b      	ldr	r0, [pc, #428]	; (8004924 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004776:	f01e fda5 	bl	80232c4 <__assert_func>
 800477a:	bf00      	nop
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004788:	f010 fc02 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 800478c:	4603      	mov	r3, r0
 800478e:	4618      	mov	r0, r3
 8004790:	f010 fc04 	bl	8014f9c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4610      	mov	r0, r2
 80047ac:	4798      	blx	r3
    if (*currentTrans)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4610      	mov	r0, r2
 80047c4:	4798      	blx	r3
    if (*currentScreen)
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
    if (*currentPresenter)
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4610      	mov	r0, r2
 80047f8:	4798      	blx	r3
    if (*currentScreen)
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4610      	mov	r0, r2
 8004810:	4798      	blx	r3
    if (*currentPresenter)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
}
 800482c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f87b 	bl	8004930 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800483a:	4603      	mov	r3, r0
 800483c:	4619      	mov	r1, r3
 800483e:	200c      	movs	r0, #12
 8004840:	f7ff fabc 	bl	8003dbc <_ZnwjPv>
 8004844:	4604      	mov	r4, r0
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff fd12 	bl	8004270 <_ZN8touchgfx12NoTransitionC1Ev>
 800484c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f8e6 	bl	8004a26 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 800485a:	4603      	mov	r3, r0
 800485c:	4619      	mov	r1, r3
 800485e:	20b0      	movs	r0, #176	; 0xb0
 8004860:	f7ff faac 	bl	8003dbc <_ZnwjPv>
 8004864:	4604      	mov	r4, r0
 8004866:	4620      	mov	r0, r4
 8004868:	f002 f804 	bl	8006874 <_ZN11Screen3ViewC1Ev>
 800486c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f8e9 	bl	8004a4c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	2010      	movs	r0, #16
 8004880:	f7ff fa9c 	bl	8003dbc <_ZnwjPv>
 8004884:	4604      	mov	r4, r0
 8004886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004888:	4620      	mov	r0, r4
 800488a:	f001 ff9d 	bl	80067c8 <_ZN16Screen3PresenterC1ER11Screen3View>
 800488e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004894:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800489a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	3304      	adds	r3, #4
 80048ac:	e000      	b.n	80048b0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80048ae:	2300      	movs	r3, #0
 80048b0:	4619      	mov	r1, r3
 80048b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80048b4:	f7ff fb3a 	bl	8003f2c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80048b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ba:	3304      	adds	r3, #4
 80048bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff fb4f 	bl	8003f62 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 f8d2 	bl	8004a72 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 80048ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69f8      	ldr	r0, [r7, #28]
 80048e4:	4798      	blx	r3
    newPresenter->activate();
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69b8      	ldr	r0, [r7, #24]
 80048ee:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	69f8      	ldr	r0, [r7, #28]
 80048f4:	f011 ff2a 	bl	801674c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3310      	adds	r3, #16
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6978      	ldr	r0, [r7, #20]
 8004902:	4798      	blx	r3
    newTransition->invalidate();
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3314      	adds	r3, #20
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	4798      	blx	r3
}
 8004910:	bf00      	nop
    return newPresenter;
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004914:	4618      	mov	r0, r3
 8004916:	373c      	adds	r7, #60	; 0x3c
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	08024874 	.word	0x08024874
 8004920:	08024cac 	.word	0x08024cac
 8004924:	08024a08 	.word	0x08024a08
 8004928:	08024a60 	.word	0x08024a60
 800492c:	08024b04 	.word	0x08024b04

08004930 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3324      	adds	r3, #36	; 0x24
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	887a      	ldrh	r2, [r7, #2]
 8004946:	4611      	mov	r1, r2
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
 800494c:	4603      	mov	r3, r0
    }
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	887a      	ldrh	r2, [r7, #2]
 800496c:	4611      	mov	r1, r2
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	4798      	blx	r3
 8004972:	4603      	mov	r3, r0
    }
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3324      	adds	r3, #36	; 0x24
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	887a      	ldrh	r2, [r7, #2]
 8004992:	4611      	mov	r1, r2
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
 8004998:	4603      	mov	r3, r0
    }
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3324      	adds	r3, #36	; 0x24
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	4611      	mov	r1, r2
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
 80049da:	4603      	mov	r3, r0
    }
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	4611      	mov	r1, r2
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
 8004a00:	4603      	mov	r3, r0
    }
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
 8004a42:	4603      	mov	r3, r0
    }
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3324      	adds	r3, #36	; 0x24
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	887a      	ldrh	r2, [r7, #2]
 8004a62:	4611      	mov	r1, r2
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	4603      	mov	r3, r0
    }
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f9c9 	bl	8003e38 <_ZN8touchgfx10TransitionD1Ev>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	080255c0 	.word	0x080255c0

08004ab4 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ffe7 	bl	8004a90 <_ZN8touchgfx12NoTransitionD1Ev>
 8004ac2:	210c      	movs	r1, #12
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f01e fbce 	bl	8023266 <_ZdlPvj>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
    }
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af08      	add	r7, sp, #32
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	460b      	mov	r3, r1
 8004b14:	80fb      	strh	r3, [r7, #6]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	88b9      	ldrh	r1, [r7, #4]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b22:	9306      	str	r3, [sp, #24]
 8004b24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b2c:	9304      	str	r3, [sp, #16]
 8004b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b38:	9302      	str	r3, [sp, #8]
 8004b3a:	7f3b      	ldrb	r3, [r7, #28]
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	7e3b      	ldrb	r3, [r7, #24]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	460b      	mov	r3, r1
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	f011 fa69 	bl	801601c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b54:	619a      	str	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	61da      	str	r2, [r3, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b60:	621a      	str	r2, [r3, #32]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08025608 	.word	0x08025608

08004b78 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	889b      	ldrh	r3, [r3, #4]
 8004b8c:	0adb      	lsrs	r3, r3, #11
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4413      	add	r3, r2
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004baa:	b480      	push	{r7}
 8004bac:	b089      	sub	sp, #36	; 0x24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	607a      	str	r2, [r7, #4]
 8004bb6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7b1b      	ldrb	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e030      	b.n	8004c2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	69da      	ldr	r2, [r3, #28]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	7b5b      	ldrb	r3, [r3, #13]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bde:	b219      	sxth	r1, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	7adb      	ldrb	r3, [r3, #11]
 8004be4:	b21b      	sxth	r3, r3
 8004be6:	430b      	orrs	r3, r1
 8004be8:	b21b      	sxth	r3, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7b1b      	ldrb	r3, [r3, #12]
 8004bf6:	837b      	strh	r3, [r7, #26]
 8004bf8:	8b7b      	ldrh	r3, [r7, #26]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d015      	beq.n	8004c2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	897a      	ldrh	r2, [r7, #10]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d103      	bne.n	8004c10 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004c0e:	e00d      	b.n	8004c2c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	897a      	ldrh	r2, [r7, #10]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d306      	bcc.n	8004c28 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004c1a:	8b7b      	ldrh	r3, [r7, #26]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	837b      	strh	r3, [r7, #26]
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	3304      	adds	r3, #4
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e7e7      	b.n	8004bf8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004c28:	bf00      	nop
        }
    }
    return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3724      	adds	r7, #36	; 0x24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
        : color(col)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	601a      	str	r2, [r3, #0]
    }
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	887a      	ldrh	r2, [r7, #2]
 8004c66:	801a      	strh	r2, [r3, #0]
    {
    }
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fd fdce 	bl	800282c <_ZN8touchgfx4RectC1Ev>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	330c      	adds	r3, #12
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fd fdc9 	bl	800282c <_ZN8touchgfx4RectC1Ev>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	615a      	str	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	619a      	str	r2, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	61da      	str	r2, [r3, #28]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	841a      	strh	r2, [r3, #32]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	845a      	strh	r2, [r3, #34]	; 0x22
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	08025e98 	.word	0x08025e98

08004cd8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    {
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
    }
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	08025e98 	.word	0x08025e98

08004cf8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    }
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ffe9 	bl	8004cd8 <_ZN8touchgfx8DrawableD1Ev>
 8004d06:	2128      	movs	r1, #40	; 0x28
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f01e faac 	bl	8023266 <_ZdlPvj>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	4798      	blx	r3
        }
    }
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004d46:	2300      	movs	r3, #0
    }
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	817b      	strh	r3, [r7, #10]
 8004d66:	460b      	mov	r3, r1
 8004d68:	813b      	strh	r3, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004d6e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d76:	4619      	mov	r1, r3
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 f82a 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004d7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d86:	4619      	mov	r1, r3
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f87e 	bl	8004e8a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	809a      	strh	r2, [r3, #4]
    }
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	887a      	ldrh	r2, [r7, #2]
 8004dc4:	80da      	strh	r2, [r3, #6]
    }
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	807b      	strh	r3, [r7, #2]
 8004dde:	4613      	mov	r3, r2
 8004de0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3330      	adds	r3, #48	; 0x30
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004dee:	4611      	mov	r1, r2
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
        setY(y);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3334      	adds	r3, #52	; 0x34
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e00:	4611      	mov	r1, r2
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
    }
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	811a      	strh	r2, [r3, #8]
    }
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	815a      	strh	r2, [r3, #10]
    }
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
    {
    }
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	807b      	strh	r3, [r7, #2]
 8004e96:	4613      	mov	r3, r2
 8004e98:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3338      	adds	r3, #56	; 0x38
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
        setHeight(height);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	333c      	adds	r3, #60	; 0x3c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    }
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
    {
    }
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
 8004f50:	4613      	mov	r3, r2
 8004f52:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3354      	adds	r3, #84	; 0x54
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	8879      	ldrh	r1, [r7, #2]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004f64:	b292      	uxth	r2, r2
 8004f66:	1a8a      	subs	r2, r1, r2
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	b210      	sxth	r0, r2
 8004f6c:	8839      	ldrh	r1, [r7, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004f74:	b292      	uxth	r2, r2
 8004f76:	1a8a      	subs	r2, r1, r2
 8004f78:	b292      	uxth	r2, r2
 8004f7a:	b212      	sxth	r2, r2
 8004f7c:	4601      	mov	r1, r0
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
    }
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f98:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff ffe1 	bl	8004f8a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]
    }
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
	...

08004fe0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    {
 8004fe8:	4a06      	ldr	r2, [pc, #24]	; (8005004 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 faf0 	bl	80055d8 <_ZN8touchgfx9ContainerD1Ev>
    }
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	08025f94 	.word	0x08025f94

08005008 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
    }
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ffe5 	bl	8004fe0 <_ZN8touchgfx6ScreenD1Ev>
 8005016:	213c      	movs	r1, #60	; 0x3c
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f01e f924 	bl	8023266 <_ZdlPvj>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    {
    }
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    {
    }
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    {
    }
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    {
    }
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f00d fc47 	bl	8012934 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	817b      	strh	r3, [r7, #10]
 80050bc:	4613      	mov	r3, r2
 80050be:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff ff24 	bl	8004f10 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff2a 	bl	8004f2a <_ZNK8touchgfx8Drawable11isTouchableEv>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	601a      	str	r2, [r3, #0]
        }
    }
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fdba 	bl	8004c78 <_ZN8touchgfx8DrawableC1Ev>
 8005104:	4a03      	ldr	r2, [pc, #12]	; (8005114 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	080256f8 	.word	0x080256f8

08005118 <_ZN8touchgfx6WidgetD1Ev>:
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	4a05      	ldr	r2, [pc, #20]	; (8005138 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff fdd5 	bl	8004cd8 <_ZN8touchgfx8DrawableD1Ev>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	080256f8 	.word	0x080256f8

0800513c <_ZN8touchgfx6WidgetD0Ev>:
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ffe7 	bl	8005118 <_ZN8touchgfx6WidgetD1Ev>
 800514a:	2128      	movs	r1, #40	; 0x28
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f01e f88a 	bl	8023266 <_ZdlPvj>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4618      	mov	r0, r3
 8005168:	2326      	movs	r3, #38	; 0x26
 800516a:	461a      	mov	r2, r3
 800516c:	2100      	movs	r1, #0
 800516e:	f01e f935 	bl	80233dc <memset>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff ffbd 	bl	80050f4 <_ZN8touchgfx6WidgetC1Ev>
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	22ff      	movs	r2, #255	; 0xff
 8005184:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3328      	adds	r3, #40	; 0x28
 800518c:	2100      	movs	r1, #0
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fd52 	bl	8004c38 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	08025d18 	.word	0x08025d18

080051a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	2326      	movs	r3, #38	; 0x26
 80051ce:	461a      	mov	r2, r3
 80051d0:	2100      	movs	r1, #0
 80051d2:	f01e f903 	bl	80233dc <memset>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff8b 	bl	80050f4 <_ZN8touchgfx6WidgetC1Ev>
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2101      	movs	r1, #1
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fe7a 	bl	8004ef0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	08025ca8 	.word	0x08025ca8

0800520c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	4a05      	ldr	r2, [pc, #20]	; (8005248 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff6d 	bl	8005118 <_ZN8touchgfx6WidgetD1Ev>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	08025ca8 	.word	0x08025ca8

0800524c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ffe7 	bl	8005228 <_ZN8touchgfx14AbstractButtonD1Ev>
 800525a:	2130      	movs	r1, #48	; 0x30
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f01e f802 	bl	8023266 <_ZdlPvj>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ffa2 	bl	80051c0 <_ZN8touchgfx14AbstractButtonC1Ev>
 800527c:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	332e      	adds	r3, #46	; 0x2e
 8005286:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fce3 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3330      	adds	r3, #48	; 0x30
 8005294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fcdc 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	22ff      	movs	r2, #255	; 0xff
 80052a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	08025d80 	.word	0x08025d80

080052b4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fe8b 	bl	8004fe0 <_ZN8touchgfx6ScreenD1Ev>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	080256ac 	.word	0x080256ac

080052d8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ffe7 	bl	80052b4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80052e6:	2140      	movs	r1, #64	; 0x40
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f01d ffbc 	bl	8023266 <_ZdlPvj>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	33a0      	adds	r3, #160	; 0xa0
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f942 	bl	8005594 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	336c      	adds	r3, #108	; 0x6c
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f9a3 	bl	8005660 <_ZN8touchgfx6ButtonD1Ev>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3340      	adds	r3, #64	; 0x40
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f97c 	bl	800561c <_ZN8touchgfx3BoxD1Ev>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ffc4 	bl	80052b4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	08025660 	.word	0x08025660

0800533c <_ZN15Screen1ViewBaseD0Ev>:
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff ffd7 	bl	80052f8 <_ZN15Screen1ViewBaseD1Ev>
 800534a:	21b0      	movs	r1, #176	; 0xb0
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f01d ff8a 	bl	8023266 <_ZdlPvj>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005364:	f00f fe14 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8005368:	4603      	mov	r3, r0
    }
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
	...

08005374 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b08b      	sub	sp, #44	; 0x2c
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f8a2 	bl	80054c8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8005384:	4a3e      	ldr	r2, [pc, #248]	; (8005480 <_ZN15Screen1ViewBaseC1Ev+0x10c>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3340      	adds	r3, #64	; 0x40
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fee4 	bl	800515c <_ZN8touchgfx3BoxC1Ev>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	336c      	adds	r3, #108	; 0x6c
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff67 	bl	800526c <_ZN8touchgfx6ButtonC1Ev>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80053a4:	4b37      	ldr	r3, [pc, #220]	; (8005484 <_ZN15Screen1ViewBaseC1Ev+0x110>)
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	f107 0308 	add.w	r3, r7, #8
 80053b0:	cb0c      	ldmia	r3, {r2, r3}
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	f000 f8ae 	bl	8005514 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80053be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	f7ff fcc2 	bl	8004d54 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80053d6:	2300      	movs	r3, #0
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	2300      	movs	r3, #0
 80053dc:	77bb      	strb	r3, [r7, #30]
 80053de:	2300      	movs	r3, #0
 80053e0:	777b      	strb	r3, [r7, #29]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80053e2:	7ffb      	ldrb	r3, [r7, #31]
 80053e4:	041b      	lsls	r3, r3, #16
 80053e6:	461a      	mov	r2, r3
 80053e8:	7fbb      	ldrb	r3, [r7, #30]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	431a      	orrs	r2, r3
 80053ee:	7f7b      	ldrb	r3, [r7, #29]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80053f6:	f107 0318 	add.w	r3, r7, #24
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fc1b 	bl	8004c38 <_ZN8touchgfx9colortypeC1Em>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	4619      	mov	r1, r3
 8005406:	4620      	mov	r0, r4
 8005408:	f7ff fecc 	bl	80051a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(0, 0);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	336c      	adds	r3, #108	; 0x6c
 8005410:	2200      	movs	r2, #0
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fcdc 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005420:	f107 0310 	add.w	r3, r7, #16
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fc15 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 800542c:	f107 0314 	add.w	r3, r7, #20
 8005430:	2101      	movs	r1, #1
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fc0f 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 8005438:	f107 0214 	add.w	r2, r7, #20
 800543c:	f107 0310 	add.w	r3, r7, #16
 8005440:	4619      	mov	r1, r3
 8005442:	4620      	mov	r0, r4
 8005444:	f00e fc5a 	bl	8013cfc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	33a0      	adds	r3, #160	; 0xa0
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7ff fed9 	bl	800520c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3340      	adds	r3, #64	; 0x40
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7ff fe14 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	336c      	adds	r3, #108	; 0x6c
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7ff fe0d 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4618      	mov	r0, r3
 800547a:	3724      	adds	r7, #36	; 0x24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}
 8005480:	08025660 	.word	0x08025660
 8005484:	0800549d 	.word	0x0800549d

08005488 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]

}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	336c      	adds	r3, #108	; 0x6c
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d106      	bne.n	80054be <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff53 	bl	800535c <_ZN15Screen1ViewBase11applicationEv>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe fe01 	bl	80040c0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f010 ff8e 	bl	80163f4 <_ZN8touchgfx6ScreenC1Ev>
 80054d8:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	080256ac 	.word	0x080256ac

080054f4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	4a04      	ldr	r2, [pc, #16]	; (8005510 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	080256e0 	.word	0x080256e0

08005514 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4639      	mov	r1, r7
 8005520:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff ffe4 	bl	80054f4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3308      	adds	r3, #8
 800553c:	463a      	mov	r2, r7
 800553e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005542:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	08025694 	.word	0x08025694

08005554 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
    }
 800555c:	4a04      	ldr	r2, [pc, #16]	; (8005570 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	080256e0 	.word	0x080256e0

08005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    }
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff ffe9 	bl	8005554 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8005582:	2104      	movs	r1, #4
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f01d fe6e 	bl	8023266 <_ZdlPvj>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff ffd5 	bl	8005554 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	08025694 	.word	0x08025694

080055b8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ffe7 	bl	8005594 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80055c6:	2110      	movs	r1, #16
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f01d fe4c 	bl	8023266 <_ZdlPvj>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fb75 	bl	8004cd8 <_ZN8touchgfx8DrawableD1Ev>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	08025ac0 	.word	0x08025ac0

080055fc <_ZN8touchgfx9ContainerD0Ev>:
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ffe7 	bl	80055d8 <_ZN8touchgfx9ContainerD1Ev>
 800560a:	212c      	movs	r1, #44	; 0x2c
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f01d fe2a 	bl	8023266 <_ZdlPvj>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	4a05      	ldr	r2, [pc, #20]	; (800563c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fd73 	bl	8005118 <_ZN8touchgfx6WidgetD1Ev>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	08025d18 	.word	0x08025d18

08005640 <_ZN8touchgfx3BoxD0Ev>:
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ffe7 	bl	800561c <_ZN8touchgfx3BoxD1Ev>
 800564e:	212c      	movs	r1, #44	; 0x2c
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f01d fe08 	bl	8023266 <_ZdlPvj>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	4a05      	ldr	r2, [pc, #20]	; (8005680 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fdd9 	bl	8005228 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08025d80 	.word	0x08025d80

08005684 <_ZN8touchgfx6ButtonD0Ev>:
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ffe7 	bl	8005660 <_ZN8touchgfx6ButtonD1Ev>
 8005692:	2134      	movs	r1, #52	; 0x34
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f01d fde6 	bl	8023266 <_ZdlPvj>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	1052      	asrs	r2, r2, #1
 80056b8:	1898      	adds	r0, r3, r2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	e00a      	b.n	80056e2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68d2      	ldr	r2, [r2, #12]
 80056d4:	1052      	asrs	r2, r2, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	4413      	add	r3, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	4798      	blx	r3
    }
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d010      	beq.n	8005720 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005716:	2300      	movs	r3, #0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005720:	2300      	movs	r3, #0
    }
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	4a05      	ldr	r2, [pc, #20]	; (8005750 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff fc4d 	bl	8004fe0 <_ZN8touchgfx6ScreenD1Ev>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	080257ac 	.word	0x080257ac

08005754 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff ffe7 	bl	8005730 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8005762:	2140      	movs	r1, #64	; 0x40
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f01d fd7e 	bl	8023266 <_ZdlPvj>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <_ZN15Screen2ViewBaseD1Ev+0x40>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	33a0      	adds	r3, #160	; 0xa0
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f912 	bl	80059b0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	336c      	adds	r3, #108	; 0x6c
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ff65 	bl	8005660 <_ZN8touchgfx6ButtonD1Ev>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3340      	adds	r3, #64	; 0x40
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff ff3e 	bl	800561c <_ZN8touchgfx3BoxD1Ev>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff ffc4 	bl	8005730 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	08025760 	.word	0x08025760

080057b8 <_ZN15Screen2ViewBaseD0Ev>:
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ffd7 	bl	8005774 <_ZN15Screen2ViewBaseD1Ev>
 80057c6:	21b0      	movs	r1, #176	; 0xb0
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f01d fd4c 	bl	8023266 <_ZdlPvj>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80057e0:	f00f fbd6 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 80057e4:	4603      	mov	r3, r0
    }
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b08b      	sub	sp, #44	; 0x2c
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f8a2 	bl	8005944 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8005800:	4a3e      	ldr	r2, [pc, #248]	; (80058fc <_ZN15Screen2ViewBaseC1Ev+0x10c>)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3340      	adds	r3, #64	; 0x40
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fca6 	bl	800515c <_ZN8touchgfx3BoxC1Ev>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	336c      	adds	r3, #108	; 0x6c
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fd29 	bl	800526c <_ZN8touchgfx6ButtonC1Ev>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005820:	4b37      	ldr	r3, [pc, #220]	; (8005900 <_ZN15Screen2ViewBaseC1Ev+0x110>)
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	cb0c      	ldmia	r3, {r2, r3}
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	f000 f89e 	bl	8005970 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800583a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	f7ff fa84 	bl	8004d54 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005852:	2300      	movs	r3, #0
 8005854:	77fb      	strb	r3, [r7, #31]
 8005856:	2300      	movs	r3, #0
 8005858:	77bb      	strb	r3, [r7, #30]
 800585a:	2300      	movs	r3, #0
 800585c:	777b      	strb	r3, [r7, #29]
 800585e:	7ffb      	ldrb	r3, [r7, #31]
 8005860:	041b      	lsls	r3, r3, #16
 8005862:	461a      	mov	r2, r3
 8005864:	7fbb      	ldrb	r3, [r7, #30]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	431a      	orrs	r2, r3
 800586a:	7f7b      	ldrb	r3, [r7, #29]
 800586c:	4313      	orrs	r3, r2
 800586e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005872:	f107 0318 	add.w	r3, r7, #24
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff f9dd 	bl	8004c38 <_ZN8touchgfx9colortypeC1Em>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	4619      	mov	r1, r3
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff fc8e 	bl	80051a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	336c      	adds	r3, #108	; 0x6c
 800588c:	226a      	movs	r2, #106	; 0x6a
 800588e:	219b      	movs	r1, #155	; 0x9b
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fa9e 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f9d7 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	2101      	movs	r1, #1
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f9d1 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 80058b4:	f107 0214 	add.w	r2, r7, #20
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	4619      	mov	r1, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	f00e fa1c 	bl	8013cfc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	33a0      	adds	r3, #160	; 0xa0
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7ff fc9b 	bl	800520c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3340      	adds	r3, #64	; 0x40
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7ff fbd6 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	336c      	adds	r3, #108	; 0x6c
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f7ff fbcf 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4618      	mov	r0, r3
 80058f6:	3724      	adds	r7, #36	; 0x24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	08025760 	.word	0x08025760
 8005900:	08005919 	.word	0x08005919

08005904 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	336c      	adds	r3, #108	; 0x6c
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d106      	bne.n	800593a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff53 	bl	80057d8 <_ZN15Screen2ViewBase11applicationEv>
 8005932:	4603      	mov	r3, r0
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fc09 	bl	800414c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
}
 800593a:	bf00      	nop
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4618      	mov	r0, r3
 8005950:	f010 fd50 	bl	80163f4 <_ZN8touchgfx6ScreenC1Ev>
 8005954:	4a05      	ldr	r2, [pc, #20]	; (800596c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	080257ac 	.word	0x080257ac

08005970 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	4639      	mov	r1, r7
 800597c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fdb6 	bl	80054f4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3308      	adds	r3, #8
 8005998:	463a      	mov	r2, r7
 800599a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800599e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	08025794 	.word	0x08025794

080059b0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fdc7 	bl	8005554 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08025794 	.word	0x08025794

080059d4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ffe7 	bl	80059b0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80059e2:	2110      	movs	r1, #16
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f01d fc3e 	bl	8023266 <_ZdlPvj>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	1052      	asrs	r2, r2, #1
 8005a08:	1898      	adds	r0, r3, r2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	e00a      	b.n	8005a32 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	1052      	asrs	r2, r2, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6892      	ldr	r2, [r2, #8]
 8005a2e:	4413      	add	r3, r2
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	4798      	blx	r3
    }
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d107      	bne.n	8005a66 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d001      	beq.n	8005a70 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005a70:	2300      	movs	r3, #0
    }
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff faa5 	bl	8004fe0 <_ZN8touchgfx6ScreenD1Ev>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	0802582c 	.word	0x0802582c

08005aa4 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ffe7 	bl	8005a80 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8005ab2:	2140      	movs	r1, #64	; 0x40
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f01d fbd6 	bl	8023266 <_ZdlPvj>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <_ZN15Screen3ViewBaseD1Ev+0x40>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	33a0      	adds	r3, #160	; 0xa0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f914 	bl	8005d04 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	336c      	adds	r3, #108	; 0x6c
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fdbd 	bl	8005660 <_ZN8touchgfx6ButtonD1Ev>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3340      	adds	r3, #64	; 0x40
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fd96 	bl	800561c <_ZN8touchgfx3BoxD1Ev>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffc4 	bl	8005a80 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	080257e0 	.word	0x080257e0

08005b08 <_ZN15Screen3ViewBaseD0Ev>:
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ffd7 	bl	8005ac4 <_ZN15Screen3ViewBaseD1Ev>
 8005b16:	21b0      	movs	r1, #176	; 0xb0
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f01d fba4 	bl	8023266 <_ZdlPvj>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZN15Screen3ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005b30:	f00f fa2e 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8005b34:	4603      	mov	r3, r0
    }
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <_ZN15Screen3ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen3ViewBase::Screen3ViewBase() :
 8005b40:	b590      	push	{r4, r7, lr}
 8005b42:	b08b      	sub	sp, #44	; 0x2c
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f8a4 	bl	8005c98 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 8005b50:	4a3f      	ldr	r2, [pc, #252]	; (8005c50 <_ZN15Screen3ViewBaseC1Ev+0x110>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3340      	adds	r3, #64	; 0x40
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fafe 	bl	800515c <_ZN8touchgfx3BoxC1Ev>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	336c      	adds	r3, #108	; 0x6c
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fb81 	bl	800526c <_ZN8touchgfx6ButtonC1Ev>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005b70:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <_ZN15Screen3ViewBaseC1Ev+0x114>)
 8005b72:	60bb      	str	r3, [r7, #8]
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	f107 0308 	add.w	r3, r7, #8
 8005b7c:	cb0c      	ldmia	r3, {r2, r3}
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	f000 f8a0 	bl	8005cc4 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005b8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005b94:	2200      	movs	r2, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	f7ff f8dc 	bl	8004d54 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	77bb      	strb	r3, [r7, #30]
 8005baa:	2300      	movs	r3, #0
 8005bac:	777b      	strb	r3, [r7, #29]
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	7fbb      	ldrb	r3, [r7, #30]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	7f7b      	ldrb	r3, [r7, #29]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005bc2:	f107 0318 	add.w	r3, r7, #24
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff f835 	bl	8004c38 <_ZN8touchgfx9colortypeC1Em>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fae6 	bl	80051a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(304, 212);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	336c      	adds	r3, #108	; 0x6c
 8005bdc:	22d4      	movs	r2, #212	; 0xd4
 8005bde:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f8f5 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005bee:	f107 0310 	add.w	r3, r7, #16
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff f82e 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 8005bfa:	f107 0314 	add.w	r3, r7, #20
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff f828 	bl	8004c56 <_ZN8touchgfx6BitmapC1Et>
 8005c06:	f107 0214 	add.w	r2, r7, #20
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4620      	mov	r0, r4
 8005c12:	f00e f873 	bl	8013cfc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	33a0      	adds	r3, #160	; 0xa0
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f7ff faf2 	bl	800520c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3340      	adds	r3, #64	; 0x40
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7ff fa2d 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	336c      	adds	r3, #108	; 0x6c
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff fa26 	bl	8005090 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	3724      	adds	r7, #36	; 0x24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd90      	pop	{r4, r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	080257e0 	.word	0x080257e0
 8005c54:	08005c6d 	.word	0x08005c6d

08005c58 <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	336c      	adds	r3, #108	; 0x6c
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d106      	bne.n	8005c8e <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff51 	bl	8005b28 <_ZN15Screen3ViewBase11applicationEv>
 8005c86:	4603      	mov	r3, r0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe f9d3 	bl	8004034 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f010 fba6 	bl	80163f4 <_ZN8touchgfx6ScreenC1Ev>
 8005ca8:	4a05      	ldr	r2, [pc, #20]	; (8005cc0 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	0802582c 	.word	0x0802582c

08005cc4 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4639      	mov	r1, r7
 8005cd0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fc0c 	bl	80054f4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8005cdc:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3308      	adds	r3, #8
 8005cec:	463a      	mov	r2, r7
 8005cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005cf2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	08025814 	.word	0x08025814

08005d04 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	4a05      	ldr	r2, [pc, #20]	; (8005d24 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fc1d 	bl	8005554 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	08025814 	.word	0x08025814

08005d28 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff ffe7 	bl	8005d04 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005d36:	2110      	movs	r1, #16
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f01d fa94 	bl	8023266 <_ZdlPvj>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	1052      	asrs	r2, r2, #1
 8005d5c:	1898      	adds	r0, r3, r2
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	e00a      	b.n	8005d86 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	68d2      	ldr	r2, [r2, #12]
 8005d78:	1052      	asrs	r2, r2, #1
 8005d7a:	4413      	add	r3, r2
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	4413      	add	r3, r2
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4798      	blx	r3
    }
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d010      	beq.n	8005dc4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e000      	b.n	8005dc6 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005dc4:	2300      	movs	r3, #0
    }
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__tcf_0+0xc>)
 8005dda:	f7fd ffcd 	bl	8003d78 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	24001480 	.word	0x24001480

08005de4 <_Z23getFont_verdana_10_4bppv>:
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	; 0x30
 8005de8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005dea:	4b1f      	ldr	r3, [pc, #124]	; (8005e68 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f3bf 8f5b 	dmb	ish
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d02c      	beq.n	8005e60 <_Z23getFont_verdana_10_4bppv+0x7c>
 8005e06:	4818      	ldr	r0, [pc, #96]	; (8005e68 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005e08:	f01d fa2f 	bl	802326a <__cxa_guard_acquire>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d021      	beq.n	8005e60 <_Z23getFont_verdana_10_4bppv+0x7c>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e20:	2300      	movs	r3, #0
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	2300      	movs	r3, #0
 8005e26:	9308      	str	r3, [sp, #32]
 8005e28:	233f      	movs	r3, #63	; 0x3f
 8005e2a:	9307      	str	r3, [sp, #28]
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <_Z23getFont_verdana_10_4bppv+0x88>)
 8005e2e:	9306      	str	r3, [sp, #24]
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	2304      	movs	r3, #4
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	2300      	movs	r3, #0
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	230a      	movs	r3, #10
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	4909      	ldr	r1, [pc, #36]	; (8005e74 <_Z23getFont_verdana_10_4bppv+0x90>)
 8005e4e:	480a      	ldr	r0, [pc, #40]	; (8005e78 <_Z23getFont_verdana_10_4bppv+0x94>)
 8005e50:	f7fe fe58 	bl	8004b04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005e54:	4809      	ldr	r0, [pc, #36]	; (8005e7c <_Z23getFont_verdana_10_4bppv+0x98>)
 8005e56:	f01d fa53 	bl	8023300 <atexit>
 8005e5a:	4803      	ldr	r0, [pc, #12]	; (8005e68 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005e5c:	f01d fa11 	bl	8023282 <__cxa_guard_release>
    return verdana_10_4bpp;
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	240014a8 	.word	0x240014a8
 8005e6c:	08026320 	.word	0x08026320
 8005e70:	0802632c 	.word	0x0802632c
 8005e74:	90000178 	.word	0x90000178
 8005e78:	24001480 	.word	0x24001480
 8005e7c:	08005dd5 	.word	0x08005dd5

08005e80 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__tcf_0+0xc>)
 8005e86:	f7fd ff77 	bl	8003d78 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	240014ac 	.word	0x240014ac

08005e90 <_Z23getFont_verdana_20_4bppv>:
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f3bf 8f5b 	dmb	ish
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02c      	beq.n	8005f0c <_Z23getFont_verdana_20_4bppv+0x7c>
 8005eb2:	4818      	ldr	r0, [pc, #96]	; (8005f14 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005eb4:	f01d f9d9 	bl	802326a <__cxa_guard_acquire>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d021      	beq.n	8005f0c <_Z23getFont_verdana_20_4bppv+0x7c>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	930a      	str	r3, [sp, #40]	; 0x28
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9309      	str	r3, [sp, #36]	; 0x24
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9308      	str	r3, [sp, #32]
 8005ed4:	233f      	movs	r3, #63	; 0x3f
 8005ed6:	9307      	str	r3, [sp, #28]
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <_Z23getFont_verdana_20_4bppv+0x88>)
 8005eda:	9306      	str	r3, [sp, #24]
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9303      	str	r3, [sp, #12]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	9302      	str	r3, [sp, #8]
 8005eec:	2304      	movs	r3, #4
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2314      	movs	r3, #20
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4909      	ldr	r1, [pc, #36]	; (8005f20 <_Z23getFont_verdana_20_4bppv+0x90>)
 8005efa:	480a      	ldr	r0, [pc, #40]	; (8005f24 <_Z23getFont_verdana_20_4bppv+0x94>)
 8005efc:	f7fe fe02 	bl	8004b04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005f00:	4809      	ldr	r0, [pc, #36]	; (8005f28 <_Z23getFont_verdana_20_4bppv+0x98>)
 8005f02:	f01d f9fd 	bl	8023300 <atexit>
 8005f06:	4803      	ldr	r0, [pc, #12]	; (8005f14 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005f08:	f01d f9bb 	bl	8023282 <__cxa_guard_release>
    return verdana_20_4bpp;
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	240014d4 	.word	0x240014d4
 8005f18:	08026324 	.word	0x08026324
 8005f1c:	08026330 	.word	0x08026330
 8005f20:	90000188 	.word	0x90000188
 8005f24:	240014ac 	.word	0x240014ac
 8005f28:	08005e81 	.word	0x08005e81

08005f2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__tcf_0+0xc>)
 8005f32:	f7fd ff21 	bl	8003d78 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	240014d8 	.word	0x240014d8

08005f3c <_Z23getFont_verdana_40_4bppv>:
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	; 0x30
 8005f40:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f42:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	f3bf 8f5b 	dmb	ish
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02c      	beq.n	8005fb8 <_Z23getFont_verdana_40_4bppv+0x7c>
 8005f5e:	4818      	ldr	r0, [pc, #96]	; (8005fc0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005f60:	f01d f983 	bl	802326a <__cxa_guard_acquire>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bf14      	ite	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	2300      	moveq	r3, #0
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d021      	beq.n	8005fb8 <_Z23getFont_verdana_40_4bppv+0x7c>
 8005f74:	2300      	movs	r3, #0
 8005f76:	930a      	str	r3, [sp, #40]	; 0x28
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	233f      	movs	r3, #63	; 0x3f
 8005f82:	9307      	str	r3, [sp, #28]
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <_Z23getFont_verdana_40_4bppv+0x88>)
 8005f86:	9306      	str	r3, [sp, #24]
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005f8a:	9305      	str	r3, [sp, #20]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	2300      	movs	r3, #0
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	2301      	movs	r3, #1
 8005f96:	9302      	str	r3, [sp, #8]
 8005f98:	2304      	movs	r3, #4
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2328      	movs	r3, #40	; 0x28
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4909      	ldr	r1, [pc, #36]	; (8005fcc <_Z23getFont_verdana_40_4bppv+0x90>)
 8005fa6:	480a      	ldr	r0, [pc, #40]	; (8005fd0 <_Z23getFont_verdana_40_4bppv+0x94>)
 8005fa8:	f7fe fdac 	bl	8004b04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005fac:	4809      	ldr	r0, [pc, #36]	; (8005fd4 <_Z23getFont_verdana_40_4bppv+0x98>)
 8005fae:	f01d f9a7 	bl	8023300 <atexit>
 8005fb2:	4803      	ldr	r0, [pc, #12]	; (8005fc0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005fb4:	f01d f965 	bl	8023282 <__cxa_guard_release>
    return verdana_40_4bpp;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	24001500 	.word	0x24001500
 8005fc4:	08026328 	.word	0x08026328
 8005fc8:	08026334 	.word	0x08026334
 8005fcc:	90000198 	.word	0x90000198
 8005fd0:	240014d8 	.word	0x240014d8
 8005fd4:	08005f2d 	.word	0x08005f2d

08005fd8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8005fe6:	2300      	movs	r3, #0
    }
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8005ffc:	2300      	movs	r3, #0
    }
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006012:	2300      	movs	r3, #0
    }
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800602e:	4a07      	ldr	r2, [pc, #28]	; (800604c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006034:	4a06      	ldr	r2, [pc, #24]	; (8006050 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800603a:	4a06      	ldr	r2, [pc, #24]	; (8006054 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	8013      	strh	r3, [r2, #0]
    }
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	2400aec4 	.word	0x2400aec4
 8006050:	2400aecc 	.word	0x2400aecc
 8006054:	2400aec8 	.word	0x2400aec8

08006058 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006058:	b40e      	push	{r1, r2, r3}
 800605a:	b580      	push	{r7, lr}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8006062:	f107 0320 	add.w	r3, r7, #32
 8006066:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	2100      	movs	r1, #0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f00f fe04 	bl	8015c7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006074:	4603      	mov	r3, r0
 8006076:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006078:	89fb      	ldrh	r3, [r7, #14]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b003      	add	sp, #12
 8006086:	4770      	bx	lr

08006088 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006088:	b40c      	push	{r2, r3}
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	460b      	mov	r3, r1
 8006094:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8006096:	f107 031c 	add.w	r3, r7, #28
 800609a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800609c:	78f9      	ldrb	r1, [r7, #3]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f00f fdea 	bl	8015c7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80060a8:	4603      	mov	r3, r0
 80060aa:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80060ac:	89fb      	ldrh	r3, [r7, #14]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b8:	b002      	add	sp, #8
 80060ba:	4770      	bx	lr

080060bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d016      	beq.n	80060fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3322      	adds	r3, #34	; 0x22
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	8adb      	ldrh	r3, [r3, #22]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80060de:	4b43      	ldr	r3, [pc, #268]	; (80061ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80060e0:	4a43      	ldr	r2, [pc, #268]	; (80061f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80060e2:	21c0      	movs	r1, #192	; 0xc0
 80060e4:	4843      	ldr	r0, [pc, #268]	; (80061f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80060e6:	f01d f8ed 	bl	80232c4 <__assert_func>
            return buffer[pos];
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	8a9b      	ldrh	r3, [r3, #20]
 80060ee:	461a      	mov	r2, r3
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d06a      	beq.n	80061da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f010 ffed 	bl	80170e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3322      	adds	r3, #34	; 0x22
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	2301      	movs	r3, #1
 8006112:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	8adb      	ldrh	r3, [r3, #22]
 8006118:	8bfa      	ldrh	r2, [r7, #30]
 800611a:	429a      	cmp	r2, r3
 800611c:	d305      	bcc.n	800612a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006120:	4a36      	ldr	r2, [pc, #216]	; (80061fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006122:	21c5      	movs	r1, #197	; 0xc5
 8006124:	4833      	ldr	r0, [pc, #204]	; (80061f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006126:	f01d f8cd 	bl	80232c4 <__assert_func>
            const uint16_t index = pos + offset;
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	8a9a      	ldrh	r2, [r3, #20]
 800612e:	8bfb      	ldrh	r3, [r7, #30]
 8006130:	4413      	add	r3, r2
 8006132:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006134:	8bbb      	ldrh	r3, [r7, #28]
 8006136:	2b09      	cmp	r3, #9
 8006138:	d801      	bhi.n	800613e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800613a:	8bbb      	ldrh	r3, [r7, #28]
 800613c:	e001      	b.n	8006142 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800613e:	8bbb      	ldrh	r3, [r7, #28]
 8006140:	3b0a      	subs	r3, #10
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006148:	f640 123f 	movw	r2, #2367	; 0x93f
 800614c:	4293      	cmp	r3, r2
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03f      	beq.n	80061da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3322      	adds	r3, #34	; 0x22
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	3222      	adds	r2, #34	; 0x22
 8006162:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	8ad2      	ldrh	r2, [r2, #22]
 8006168:	2a00      	cmp	r2, #0
 800616a:	d105      	bne.n	8006178 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800616c:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800616e:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006170:	21c0      	movs	r1, #192	; 0xc0
 8006172:	4820      	ldr	r0, [pc, #128]	; (80061f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006174:	f01d f8a6 	bl	80232c4 <__assert_func>
            return buffer[pos];
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	8a92      	ldrh	r2, [r2, #20]
 800617c:	4611      	mov	r1, r2
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	4613      	mov	r3, r2
 8006188:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	8adb      	ldrh	r3, [r3, #22]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d806      	bhi.n	80061a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8006192:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8006196:	f240 110d 	movw	r1, #269	; 0x10d
 800619a:	4816      	ldr	r0, [pc, #88]	; (80061f4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800619c:	f01d f892 	bl	80232c4 <__assert_func>
            const uint16_t index = pos + 1;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	8a9b      	ldrh	r3, [r3, #20]
 80061a4:	3301      	adds	r3, #1
 80061a6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80061a8:	89bb      	ldrh	r3, [r7, #12]
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	d801      	bhi.n	80061b2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80061ae:	89bb      	ldrh	r3, [r7, #12]
 80061b0:	e000      	b.n	80061b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80061b2:	2300      	movs	r3, #0
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	89f9      	ldrh	r1, [r7, #14]
 80061b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80061bc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3322      	adds	r3, #34	; 0x22
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	f640 133f 	movw	r3, #2367	; 0x93f
 80061c8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	8a9b      	ldrh	r3, [r3, #20]
 80061ce:	4619      	mov	r1, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	8afa      	ldrh	r2, [r7, #22]
 80061d4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80061d8:	bf00      	nop
        }
    }
    return getNextChar();
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f010 fe84 	bl	8016ee8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80061e0:	4603      	mov	r3, r0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3728      	adds	r7, #40	; 0x28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	08024db0 	.word	0x08024db0
 80061f0:	08024dbc 	.word	0x08024dbc
 80061f4:	08024e68 	.word	0x08024e68
 80061f8:	08024ec0 	.word	0x08024ec0
 80061fc:	08024ed0 	.word	0x08024ed0
 8006200:	08024fa4 	.word	0x08024fa4
 8006204:	08024fb0 	.word	0x08024fb0

08006208 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f010 fe32 	bl	8016e7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006220:	b590      	push	{r4, r7, lr}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d127      	bne.n	8006284 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006248:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	4413      	add	r3, r2
 8006252:	4a18      	ldr	r2, [pc, #96]	; (80062b4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006254:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006260:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	e00a      	b.n	8006284 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006270:	4a12      	ldr	r2, [pc, #72]	; (80062bc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8006272:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006274:	4a12      	ldr	r2, [pc, #72]	; (80062c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8006276:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006278:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800627e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006282:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00d      	beq.n	80062a6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8006290:	f000 f824 	bl	80062dc <_ZN17TypedTextDatabase8getFontsEv>
 8006294:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006296:	f000 f819 	bl	80062cc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	4621      	mov	r1, r4
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff febd 	bl	8006020 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd90      	pop	{r4, r7, pc}
 80062ae:	bf00      	nop
 80062b0:	24001504 	.word	0x24001504
 80062b4:	2400150c 	.word	0x2400150c
 80062b8:	24001510 	.word	0x24001510
 80062bc:	900001ac 	.word	0x900001ac
 80062c0:	900001a8 	.word	0x900001a8
 80062c4:	900001b4 	.word	0x900001b4
 80062c8:	24001508 	.word	0x24001508

080062cc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
    return 0;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 80062e0:	4b02      	ldr	r3, [pc, #8]	; (80062ec <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	24001514 	.word	0x24001514

080062f0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d113      	bne.n	8006328 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006306:	4293      	cmp	r3, r2
 8006308:	d10e      	bne.n	8006328 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800630a:	f7ff fdc1 	bl	8005e90 <_Z23getFont_verdana_20_4bppv>
 800630e:	4603      	mov	r3, r0
};
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006312:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8006314:	f7ff fe12 	bl	8005f3c <_Z23getFont_verdana_40_4bppv>
 8006318:	4603      	mov	r3, r0
};
 800631a:	4a05      	ldr	r2, [pc, #20]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800631c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800631e:	f7ff fd61 	bl	8005de4 <_Z23getFont_verdana_10_4bppv>
 8006322:	4603      	mov	r3, r0
};
 8006324:	4a02      	ldr	r2, [pc, #8]	; (8006330 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006326:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	24001514 	.word	0x24001514

08006334 <_GLOBAL__sub_I_touchgfx_fonts>:
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
 8006338:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800633c:	2001      	movs	r0, #1
 800633e:	f7ff ffd7 	bl	80062f0 <_Z41__static_initialization_and_destruction_0ii>
 8006342:	bd80      	pop	{r7, pc}

08006344 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd fe12 	bl	8003f80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800635c:	4a03      	ldr	r2, [pc, #12]	; (800636c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]
{

}
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	0802534c 	.word	0x0802534c

08006370 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
{

}
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <_ZN5Model4tickEv>:

void Model::tick()
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]

}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    {
    }
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
    {
    }
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
    {
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	601a      	str	r2, [r3, #0]
    }
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	080258ec 	.word	0x080258ec

080063e8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    }
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ffe9 	bl	80063c8 <_ZN8touchgfx9PresenterD1Ev>
 80063f6:	2104      	movs	r1, #4
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f01c ff34 	bl	8023266 <_ZdlPvj>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    {
 8006410:	4a04      	ldr	r2, [pc, #16]	; (8006424 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
    }
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	080258ec 	.word	0x080258ec

08006428 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <_ZN13ModelListenerC1Ev+0x24>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	080258dc 	.word	0x080258dc

08006450 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	4a04      	ldr	r2, [pc, #16]	; (800646c <_ZN13ModelListenerD1Ev+0x1c>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	080258dc 	.word	0x080258dc

08006470 <_ZN13ModelListenerD0Ev>:
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff ffe9 	bl	8006450 <_ZN13ModelListenerD1Ev>
 800647e:	2108      	movs	r1, #8
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f01c fef0 	bl	8023266 <_ZdlPvj>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	4a09      	ldr	r2, [pc, #36]	; (80064c0 <_ZN16Screen1PresenterD1Ev+0x30>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff ffd1 	bl	8006450 <_ZN13ModelListenerD1Ev>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff ff89 	bl	80063c8 <_ZN8touchgfx9PresenterD1Ev>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	080258b4 	.word	0x080258b4
 80064c4:	080258cc 	.word	0x080258cc

080064c8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80064c8:	f1a0 0004 	sub.w	r0, r0, #4
 80064cc:	e7e0      	b.n	8006490 <_ZN16Screen1PresenterD1Ev>
 80064ce:	bf00      	nop

080064d0 <_ZN16Screen1PresenterD0Ev>:
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ffd9 	bl	8006490 <_ZN16Screen1PresenterD1Ev>
 80064de:	2110      	movs	r1, #16
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f01c fec0 	bl	8023266 <_ZdlPvj>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZThn4_N16Screen1PresenterD0Ev>:
 80064f0:	f1a0 0004 	sub.w	r0, r0, #4
 80064f4:	e7ec      	b.n	80064d0 <_ZN16Screen1PresenterD0Ev>
	...

080064f8 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
    : view(v)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff ff7f 	bl	8006408 <_ZN8touchgfx9PresenterC1Ev>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3304      	adds	r3, #4
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff ff8a 	bl	8006428 <_ZN13ModelListenerC1Ev>
 8006514:	4a06      	ldr	r2, [pc, #24]	; (8006530 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	4a06      	ldr	r2, [pc, #24]	; (8006534 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	605a      	str	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	60da      	str	r2, [r3, #12]
{

}
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	080258b4 	.word	0x080258b4
 8006534:	080258cc 	.word	0x080258cc

08006538 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]

}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	4a05      	ldr	r2, [pc, #20]	; (8006580 <_ZN11Screen1ViewD1Ev+0x20>)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fec1 	bl	80052f8 <_ZN15Screen1ViewBaseD1Ev>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	08025904 	.word	0x08025904

08006584 <_ZN11Screen1ViewD0Ev>:
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ffe7 	bl	8006560 <_ZN11Screen1ViewD1Ev>
 8006592:	21b0      	movs	r1, #176	; 0xb0
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f01c fe66 	bl	8023266 <_ZdlPvj>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fee0 	bl	8005374 <_ZN15Screen1ViewBaseC1Ev>
 80065b4:	4a03      	ldr	r2, [pc, #12]	; (80065c4 <_ZN11Screen1ViewC1Ev+0x20>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	601a      	str	r2, [r3, #0]
{

}
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	08025904 	.word	0x08025904

080065c8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe ff58 	bl	8005488 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fd30 	bl	8005050 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	4a09      	ldr	r2, [pc, #36]	; (8006628 <_ZN16Screen2PresenterD1Ev+0x30>)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <_ZN16Screen2PresenterD1Ev+0x34>)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff ff1d 	bl	8006450 <_ZN13ModelListenerD1Ev>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fed5 	bl	80063c8 <_ZN8touchgfx9PresenterD1Ev>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08025938 	.word	0x08025938
 800662c:	08025950 	.word	0x08025950

08006630 <_ZThn4_N16Screen2PresenterD1Ev>:
 8006630:	f1a0 0004 	sub.w	r0, r0, #4
 8006634:	e7e0      	b.n	80065f8 <_ZN16Screen2PresenterD1Ev>
 8006636:	bf00      	nop

08006638 <_ZN16Screen2PresenterD0Ev>:
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff ffd9 	bl	80065f8 <_ZN16Screen2PresenterD1Ev>
 8006646:	2110      	movs	r1, #16
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f01c fe0c 	bl	8023266 <_ZdlPvj>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZThn4_N16Screen2PresenterD0Ev>:
 8006658:	f1a0 0004 	sub.w	r0, r0, #4
 800665c:	e7ec      	b.n	8006638 <_ZN16Screen2PresenterD0Ev>
	...

08006660 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
    : view(v)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fecb 	bl	8006408 <_ZN8touchgfx9PresenterC1Ev>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fed6 	bl	8006428 <_ZN13ModelListenerC1Ev>
 800667c:	4a06      	ldr	r2, [pc, #24]	; (8006698 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	4a06      	ldr	r2, [pc, #24]	; (800669c <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	60da      	str	r2, [r3, #12]
{

}
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	08025938 	.word	0x08025938
 800669c:	08025950 	.word	0x08025950

080066a0 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]

}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <_ZN11Screen2ViewD1Ev+0x20>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff f84b 	bl	8005774 <_ZN15Screen2ViewBaseD1Ev>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	08025960 	.word	0x08025960

080066ec <_ZN11Screen2ViewD0Ev>:
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff ffe7 	bl	80066c8 <_ZN11Screen2ViewD1Ev>
 80066fa:	21b0      	movs	r1, #176	; 0xb0
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f01c fdb2 	bl	8023266 <_ZdlPvj>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff f86a 	bl	80057f0 <_ZN15Screen2ViewBaseC1Ev>
 800671c:	4a03      	ldr	r2, [pc, #12]	; (800672c <_ZN11Screen2ViewC1Ev+0x20>)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	601a      	str	r2, [r3, #0]
{

}
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	08025960 	.word	0x08025960

08006730 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff f8e2 	bl	8005904 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fc7c 	bl	8005050 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <_ZN16Screen3PresenterD1Ev+0x30>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	4a09      	ldr	r2, [pc, #36]	; (8006794 <_ZN16Screen3PresenterD1Ev+0x34>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fe69 	bl	8006450 <_ZN13ModelListenerD1Ev>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fe21 	bl	80063c8 <_ZN8touchgfx9PresenterD1Ev>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	08025994 	.word	0x08025994
 8006794:	080259ac 	.word	0x080259ac

08006798 <_ZThn4_N16Screen3PresenterD1Ev>:
 8006798:	f1a0 0004 	sub.w	r0, r0, #4
 800679c:	e7e0      	b.n	8006760 <_ZN16Screen3PresenterD1Ev>
 800679e:	bf00      	nop

080067a0 <_ZN16Screen3PresenterD0Ev>:
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff ffd9 	bl	8006760 <_ZN16Screen3PresenterD1Ev>
 80067ae:	2110      	movs	r1, #16
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f01c fd58 	bl	8023266 <_ZdlPvj>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <_ZThn4_N16Screen3PresenterD0Ev>:
 80067c0:	f1a0 0004 	sub.w	r0, r0, #4
 80067c4:	e7ec      	b.n	80067a0 <_ZN16Screen3PresenterD0Ev>
	...

080067c8 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
    : view(v)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fe17 	bl	8006408 <_ZN8touchgfx9PresenterC1Ev>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fe22 	bl	8006428 <_ZN13ModelListenerC1Ev>
 80067e4:	4a06      	ldr	r2, [pc, #24]	; (8006800 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	4a06      	ldr	r2, [pc, #24]	; (8006804 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	60da      	str	r2, [r3, #12]
{

}
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	08025994 	.word	0x08025994
 8006804:	080259ac 	.word	0x080259ac

08006808 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	4a05      	ldr	r2, [pc, #20]	; (8006850 <_ZN11Screen3ViewD1Ev+0x20>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff f93f 	bl	8005ac4 <_ZN15Screen3ViewBaseD1Ev>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	080259bc 	.word	0x080259bc

08006854 <_ZN11Screen3ViewD0Ev>:
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ffe7 	bl	8006830 <_ZN11Screen3ViewD1Ev>
 8006862:	21b0      	movs	r1, #176	; 0xb0
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f01c fcfe 	bl	8023266 <_ZdlPvj>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f95e 	bl	8005b40 <_ZN15Screen3ViewBaseC1Ev>
 8006884:	4a03      	ldr	r2, [pc, #12]	; (8006894 <_ZN11Screen3ViewC1Ev+0x20>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	601a      	str	r2, [r3, #0]
{

}
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	080259bc 	.word	0x080259bc

08006898 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff f9d8 	bl	8005c58 <_ZN15Screen3ViewBase11setupScreenEv>
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fbc8 	bl	8005050 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <__NVIC_SetPriority>:
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	db0a      	blt.n	80068f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <__NVIC_SetPriority+0x4c>)
 80068e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068e6:	0112      	lsls	r2, r2, #4
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	440b      	add	r3, r1
 80068ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068f0:	e00a      	b.n	8006908 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4908      	ldr	r1, [pc, #32]	; (8006918 <__NVIC_SetPriority+0x50>)
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	3b04      	subs	r3, #4
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	440b      	add	r3, r1
 8006906:	761a      	strb	r2, [r3, #24]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	e000e100 	.word	0xe000e100
 8006918:	e000ed00 	.word	0xe000ed00

0800691c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <SysTick_Handler+0x1c>)
 8006922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006924:	f002 feac 	bl	8009680 <xTaskGetSchedulerState>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800692e:	f000 ffeb 	bl	8007908 <xPortSysTickHandler>
  }
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	e000e010 	.word	0xe000e010

0800693c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006940:	2100      	movs	r1, #0
 8006942:	f06f 0004 	mvn.w	r0, #4
 8006946:	f7ff ffbf 	bl	80068c8 <__NVIC_SetPriority>
#endif
}
 800694a:	bf00      	nop
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006956:	f3ef 8305 	mrs	r3, IPSR
 800695a:	603b      	str	r3, [r7, #0]
  return(result);
 800695c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006962:	f06f 0305 	mvn.w	r3, #5
 8006966:	607b      	str	r3, [r7, #4]
 8006968:	e00c      	b.n	8006984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <osKernelInitialize+0x44>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d105      	bne.n	800697e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006972:	4b08      	ldr	r3, [pc, #32]	; (8006994 <osKernelInitialize+0x44>)
 8006974:	2201      	movs	r2, #1
 8006976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e002      	b.n	8006984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006984:	687b      	ldr	r3, [r7, #4]
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	24001520 	.word	0x24001520

08006998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800699e:	f3ef 8305 	mrs	r3, IPSR
 80069a2:	603b      	str	r3, [r7, #0]
  return(result);
 80069a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069aa:	f06f 0305 	mvn.w	r3, #5
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e010      	b.n	80069d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069b2:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <osKernelStart+0x48>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d109      	bne.n	80069ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069ba:	f7ff ffbf 	bl	800693c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069be:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <osKernelStart+0x48>)
 80069c0:	2202      	movs	r2, #2
 80069c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069c4:	f002 fa14 	bl	8008df0 <vTaskStartScheduler>
      stat = osOK;
 80069c8:	2300      	movs	r3, #0
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	e002      	b.n	80069d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069ce:	f04f 33ff 	mov.w	r3, #4294967295
 80069d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	24001520 	.word	0x24001520

080069e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08e      	sub	sp, #56	; 0x38
 80069e8:	af04      	add	r7, sp, #16
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069f4:	f3ef 8305 	mrs	r3, IPSR
 80069f8:	617b      	str	r3, [r7, #20]
  return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d17e      	bne.n	8006afe <osThreadNew+0x11a>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d07b      	beq.n	8006afe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a0a:	2318      	movs	r3, #24
 8006a0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a12:	f04f 33ff 	mov.w	r3, #4294967295
 8006a16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d045      	beq.n	8006aaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <osThreadNew+0x48>
        name = attr->name;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <osThreadNew+0x6e>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b38      	cmp	r3, #56	; 0x38
 8006a44:	d805      	bhi.n	8006a52 <osThreadNew+0x6e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <osThreadNew+0x72>
        return (NULL);
 8006a52:	2300      	movs	r3, #0
 8006a54:	e054      	b.n	8006b00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	089b      	lsrs	r3, r3, #2
 8006a64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <osThreadNew+0xa8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b5b      	cmp	r3, #91	; 0x5b
 8006a74:	d90a      	bls.n	8006a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <osThreadNew+0xa8>
        mem = 1;
 8006a86:	2301      	movs	r3, #1
 8006a88:	61bb      	str	r3, [r7, #24]
 8006a8a:	e010      	b.n	8006aae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10c      	bne.n	8006aae <osThreadNew+0xca>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d108      	bne.n	8006aae <osThreadNew+0xca>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d104      	bne.n	8006aae <osThreadNew+0xca>
          mem = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e001      	b.n	8006aae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d110      	bne.n	8006ad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006abc:	9202      	str	r2, [sp, #8]
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6a3a      	ldr	r2, [r7, #32]
 8006ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 ffba 	bl	8008a44 <xTaskCreateStatic>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e013      	b.n	8006afe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f107 0310 	add.w	r3, r7, #16
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f002 f805 	bl	8008afe <xTaskCreate>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <osThreadNew+0x11a>
            hTask = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006afe:	693b      	ldr	r3, [r7, #16]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3728      	adds	r7, #40	; 0x28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b10:	f3ef 8305 	mrs	r3, IPSR
 8006b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <osDelay+0x1c>
    stat = osErrorISR;
 8006b1c:	f06f 0305 	mvn.w	r3, #5
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e007      	b.n	8006b34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f002 f92a 	bl	8008d88 <vTaskDelay>
    }
  }

  return (stat);
 8006b34:	68fb      	ldr	r3, [r7, #12]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	; 0x28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	613b      	str	r3, [r7, #16]
  return(result);
 8006b54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d175      	bne.n	8006c46 <osSemaphoreNew+0x108>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d072      	beq.n	8006c46 <osSemaphoreNew+0x108>
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d86e      	bhi.n	8006c46 <osSemaphoreNew+0x108>
    mem = -1;
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <osSemaphoreNew+0x4c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	2b4f      	cmp	r3, #79	; 0x4f
 8006b82:	d902      	bls.n	8006b8a <osSemaphoreNew+0x4c>
        mem = 1;
 8006b84:	2301      	movs	r3, #1
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	e00c      	b.n	8006ba4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <osSemaphoreNew+0x66>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <osSemaphoreNew+0x66>
          mem = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e001      	b.n	8006ba4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d04c      	beq.n	8006c46 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d128      	bne.n	8006c04 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d10a      	bne.n	8006bce <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	9200      	str	r2, [sp, #0]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	f000 ff97 	bl	8007af8 <xQueueGenericCreateStatic>
 8006bca:	61f8      	str	r0, [r7, #28]
 8006bcc:	e005      	b.n	8006bda <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006bce:	2203      	movs	r2, #3
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f001 f808 	bl	8007be8 <xQueueGenericCreate>
 8006bd8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d022      	beq.n	8006c26 <osSemaphoreNew+0xe8>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01f      	beq.n	8006c26 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006be6:	2300      	movs	r3, #0
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	69f8      	ldr	r0, [r7, #28]
 8006bee:	f001 f8c3 	bl	8007d78 <xQueueGenericSend>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d016      	beq.n	8006c26 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006bf8:	69f8      	ldr	r0, [r7, #28]
 8006bfa:	f001 fd4f 	bl	800869c <vQueueDelete>
            hSemaphore = NULL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	e010      	b.n	8006c26 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d108      	bne.n	8006c1c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 f845 	bl	8007ca2 <xQueueCreateCountingSemaphoreStatic>
 8006c18:	61f8      	str	r0, [r7, #28]
 8006c1a:	e004      	b.n	8006c26 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f001 f876 	bl	8007d10 <xQueueCreateCountingSemaphore>
 8006c24:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00c      	beq.n	8006c46 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e001      	b.n	8006c3e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	69f8      	ldr	r0, [r7, #28]
 8006c42:	f001 fe77 	bl	8008934 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006c68:	f06f 0303 	mvn.w	r3, #3
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e039      	b.n	8006ce4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c70:	f3ef 8305 	mrs	r3, IPSR
 8006c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c76:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d022      	beq.n	8006cc2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006c82:	f06f 0303 	mvn.w	r3, #3
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e02c      	b.n	8006ce4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006c8e:	f107 0308 	add.w	r3, r7, #8
 8006c92:	461a      	mov	r2, r3
 8006c94:	2100      	movs	r1, #0
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f001 fc80 	bl	800859c <xQueueReceiveFromISR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d003      	beq.n	8006caa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006ca2:	f06f 0302 	mvn.w	r3, #2
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e01c      	b.n	8006ce4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d019      	beq.n	8006ce4 <osSemaphoreAcquire+0x94>
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <osSemaphoreAcquire+0xa0>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e010      	b.n	8006ce4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f001 fb5d 	bl	8008384 <xQueueSemaphoreTake>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d009      	beq.n	8006ce4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006cd6:	f06f 0301 	mvn.w	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	e002      	b.n	8006ce4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006cde:	f06f 0302 	mvn.w	r3, #2
 8006ce2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ce4:	697b      	ldr	r3, [r7, #20]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006d0a:	f06f 0303 	mvn.w	r3, #3
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e02c      	b.n	8006d6c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d12:	f3ef 8305 	mrs	r3, IPSR
 8006d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d18:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01a      	beq.n	8006d54 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d22:	f107 0308 	add.w	r3, r7, #8
 8006d26:	4619      	mov	r1, r3
 8006d28:	6938      	ldr	r0, [r7, #16]
 8006d2a:	f001 f9be 	bl	80080aa <xQueueGiveFromISR>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d003      	beq.n	8006d3c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006d34:	f06f 0302 	mvn.w	r3, #2
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e017      	b.n	8006d6c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d014      	beq.n	8006d6c <osSemaphoreRelease+0x78>
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <osSemaphoreRelease+0x84>)
 8006d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	e00b      	b.n	8006d6c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d54:	2300      	movs	r3, #0
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	6938      	ldr	r0, [r7, #16]
 8006d5c:	f001 f80c 	bl	8007d78 <xQueueGenericSend>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d002      	beq.n	8006d6c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006d66:	f06f 0302 	mvn.w	r3, #2
 8006d6a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006d6c:	697b      	ldr	r3, [r7, #20]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d8c:	f3ef 8305 	mrs	r3, IPSR
 8006d90:	613b      	str	r3, [r7, #16]
  return(result);
 8006d92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d15f      	bne.n	8006e58 <osMessageQueueNew+0xdc>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d05c      	beq.n	8006e58 <osMessageQueueNew+0xdc>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d059      	beq.n	8006e58 <osMessageQueueNew+0xdc>
    mem = -1;
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295
 8006da8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d029      	beq.n	8006e04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d012      	beq.n	8006dde <osMessageQueueNew+0x62>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b4f      	cmp	r3, #79	; 0x4f
 8006dbe:	d90e      	bls.n	8006dde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d302      	bcc.n	8006dde <osMessageQueueNew+0x62>
        mem = 1;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	e014      	b.n	8006e08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d110      	bne.n	8006e08 <osMessageQueueNew+0x8c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10c      	bne.n	8006e08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d108      	bne.n	8006e08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <osMessageQueueNew+0x8c>
          mem = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e001      	b.n	8006e08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d10b      	bne.n	8006e26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2100      	movs	r1, #0
 8006e18:	9100      	str	r1, [sp, #0]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fe6b 	bl	8007af8 <xQueueGenericCreateStatic>
 8006e22:	61f8      	str	r0, [r7, #28]
 8006e24:	e008      	b.n	8006e38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fed9 	bl	8007be8 <xQueueGenericCreate>
 8006e36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e001      	b.n	8006e50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e50:	6979      	ldr	r1, [r7, #20]
 8006e52:	69f8      	ldr	r0, [r7, #28]
 8006e54:	f001 fd6e 	bl	8008934 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e58:	69fb      	ldr	r3, [r7, #28]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3720      	adds	r7, #32
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e7c:	f3ef 8305 	mrs	r3, IPSR
 8006e80:	617b      	str	r3, [r7, #20]
  return(result);
 8006e82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d028      	beq.n	8006eda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <osMessageQueuePut+0x36>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <osMessageQueuePut+0x36>
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006e9a:	f06f 0303 	mvn.w	r3, #3
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e038      	b.n	8006f14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ea6:	f107 0210 	add.w	r2, r7, #16
 8006eaa:	2300      	movs	r3, #0
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	69b8      	ldr	r0, [r7, #24]
 8006eb0:	f001 f860 	bl	8007f74 <xQueueGenericSendFromISR>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d003      	beq.n	8006ec2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006eba:	f06f 0302 	mvn.w	r3, #2
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e028      	b.n	8006f14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d025      	beq.n	8006f14 <osMessageQueuePut+0xb0>
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <osMessageQueuePut+0xbc>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	e01c      	b.n	8006f14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <osMessageQueuePut+0x82>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006ee6:	f06f 0303 	mvn.w	r3, #3
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	e012      	b.n	8006f14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006eee:	2300      	movs	r3, #0
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	69b8      	ldr	r0, [r7, #24]
 8006ef6:	f000 ff3f 	bl	8007d78 <xQueueGenericSend>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d009      	beq.n	8006f14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f06:	f06f 0301 	mvn.w	r3, #1
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e002      	b.n	8006f14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f0e:	f06f 0302 	mvn.w	r3, #2
 8006f12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f14:	69fb      	ldr	r3, [r7, #28]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f3a:	f3ef 8305 	mrs	r3, IPSR
 8006f3e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d028      	beq.n	8006f98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <osMessageQueueGet+0x34>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <osMessageQueueGet+0x34>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006f58:	f06f 0303 	mvn.w	r3, #3
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	e037      	b.n	8006fd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f64:	f107 0310 	add.w	r3, r7, #16
 8006f68:	461a      	mov	r2, r3
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	69b8      	ldr	r0, [r7, #24]
 8006f6e:	f001 fb15 	bl	800859c <xQueueReceiveFromISR>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d003      	beq.n	8006f80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f78:	f06f 0302 	mvn.w	r3, #2
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e027      	b.n	8006fd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d024      	beq.n	8006fd0 <osMessageQueueGet+0xac>
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <osMessageQueueGet+0xb8>)
 8006f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	e01b      	b.n	8006fd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <osMessageQueueGet+0x80>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d103      	bne.n	8006fac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006fa4:	f06f 0303 	mvn.w	r3, #3
 8006fa8:	61fb      	str	r3, [r7, #28]
 8006faa:	e011      	b.n	8006fd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	69b8      	ldr	r0, [r7, #24]
 8006fb2:	f001 f907 	bl	80081c4 <xQueueReceive>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d009      	beq.n	8006fd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006fc2:	f06f 0301 	mvn.w	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	e002      	b.n	8006fd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006fca:	f06f 0302 	mvn.w	r3, #2
 8006fce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006fd0:	69fb      	ldr	r3, [r7, #28]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3720      	adds	r7, #32
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	e000ed04 	.word	0xe000ed04

08006fe0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <vApplicationGetIdleTaskMemory+0x2c>)
 8006ff0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	4a06      	ldr	r2, [pc, #24]	; (8007010 <vApplicationGetIdleTaskMemory+0x30>)
 8006ff6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2280      	movs	r2, #128	; 0x80
 8006ffc:	601a      	str	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	24001524 	.word	0x24001524
 8007010:	24001580 	.word	0x24001580

08007014 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <vApplicationGetTimerTaskMemory+0x2c>)
 8007024:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a06      	ldr	r2, [pc, #24]	; (8007044 <vApplicationGetTimerTaskMemory+0x30>)
 800702a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007032:	601a      	str	r2, [r3, #0]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	24001780 	.word	0x24001780
 8007044:	240017dc 	.word	0x240017dc

08007048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007054:	f001 ff32 	bl	8008ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007058:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <pvPortMalloc+0x180>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007060:	f000 f920 	bl	80072a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007064:	4b59      	ldr	r3, [pc, #356]	; (80071cc <pvPortMalloc+0x184>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8093 	bne.w	8007198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01d      	beq.n	80070b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007078:	2208      	movs	r2, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d014      	beq.n	80070b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06e      	beq.n	8007198 <pvPortMalloc+0x150>
 80070ba:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <pvPortMalloc+0x188>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d869      	bhi.n	8007198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c4:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <pvPortMalloc+0x18c>)
 80070c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070c8:	4b42      	ldr	r3, [pc, #264]	; (80071d4 <pvPortMalloc+0x18c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ce:	e004      	b.n	80070da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d903      	bls.n	80070ec <pvPortMalloc+0xa4>
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ec:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <pvPortMalloc+0x180>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d050      	beq.n	8007198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2208      	movs	r2, #8
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	2308      	movs	r3, #8
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	429a      	cmp	r2, r3
 8007116:	d91f      	bls.n	8007158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <pvPortMalloc+0xf8>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	613b      	str	r3, [r7, #16]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007152:	69b8      	ldr	r0, [r7, #24]
 8007154:	f000 f908 	bl	8007368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <pvPortMalloc+0x188>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <pvPortMalloc+0x188>)
 8007164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <pvPortMalloc+0x188>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <pvPortMalloc+0x190>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d203      	bcs.n	800717a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007172:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <pvPortMalloc+0x188>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <pvPortMalloc+0x190>)
 8007178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <pvPortMalloc+0x184>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	431a      	orrs	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <pvPortMalloc+0x194>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <pvPortMalloc+0x194>)
 8007196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007198:	f001 fe9e 	bl	8008ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <pvPortMalloc+0x174>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <pvPortMalloc+0x172>
	return pvReturn;
 80071bc:	69fb      	ldr	r3, [r7, #28]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	; 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	24009be4 	.word	0x24009be4
 80071cc:	24009bf8 	.word	0x24009bf8
 80071d0:	24009be8 	.word	0x24009be8
 80071d4:	24009bdc 	.word	0x24009bdc
 80071d8:	24009bec 	.word	0x24009bec
 80071dc:	24009bf0 	.word	0x24009bf0

080071e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04d      	beq.n	800728e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f2:	2308      	movs	r3, #8
 80071f4:	425b      	negs	r3, r3
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b24      	ldr	r3, [pc, #144]	; (8007298 <vPortFree+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <vPortFree+0x44>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <vPortFree+0x62>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60bb      	str	r3, [r7, #8]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <vPortFree+0xb8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11a      	bne.n	800728e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <vPortFree+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007268:	f001 fe28 	bl	8008ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <vPortFree+0xbc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4413      	add	r3, r2
 8007276:	4a09      	ldr	r2, [pc, #36]	; (800729c <vPortFree+0xbc>)
 8007278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f874 	bl	8007368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vPortFree+0xc0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a06      	ldr	r2, [pc, #24]	; (80072a0 <vPortFree+0xc0>)
 8007288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800728a:	f001 fe25 	bl	8008ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800728e:	bf00      	nop
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	24009bf8 	.word	0x24009bf8
 800729c:	24009be8 	.word	0x24009be8
 80072a0:	24009bf4 	.word	0x24009bf4

080072a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <prvHeapInit+0xac>)
 80072b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3307      	adds	r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <prvHeapInit+0xac>)
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <prvHeapInit+0xb0>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <prvHeapInit+0xb0>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f0:	2208      	movs	r2, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <prvHeapInit+0xb4>)
 8007304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvHeapInit+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <prvHeapInit+0xb4>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a0a      	ldr	r2, [pc, #40]	; (800735c <prvHeapInit+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <prvHeapInit+0xbc>)
 800733a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <prvHeapInit+0xc0>)
 800733e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	24001bdc 	.word	0x24001bdc
 8007354:	24009bdc 	.word	0x24009bdc
 8007358:	24009be4 	.word	0x24009be4
 800735c:	24009bec 	.word	0x24009bec
 8007360:	24009be8 	.word	0x24009be8
 8007364:	24009bf8 	.word	0x24009bf8

08007368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvInsertBlockIntoFreeList+0xac>)
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <prvInsertBlockIntoFreeList+0x14>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d8f7      	bhi.n	8007376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d108      	bne.n	80073aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d118      	bne.n	80073f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d00d      	beq.n	80073e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e008      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e003      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d002      	beq.n	8007406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	24009bdc 	.word	0x24009bdc
 8007418:	24009be4 	.word	0x24009be4

0800741c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f103 0208 	add.w	r2, r3, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f103 0208 	add.w	r2, r3, #8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f103 0208 	add.w	r2, r3, #8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d103      	bne.n	80074de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e00c      	b.n	80074f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3308      	adds	r3, #8
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e002      	b.n	80074ec <vListInsert+0x2e>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d2f6      	bcs.n	80074e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6892      	ldr	r2, [r2, #8]
 8007546:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6852      	ldr	r2, [r2, #4]
 8007550:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d103      	bne.n	8007564 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	1e5a      	subs	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3b04      	subs	r3, #4
 8007594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800759c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3b04      	subs	r3, #4
 80075a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 0201 	bic.w	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3b04      	subs	r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075b4:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <pxPortInitialiseStack+0x64>)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3b14      	subs	r3, #20
 80075be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3b04      	subs	r3, #4
 80075ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f06f 0202 	mvn.w	r2, #2
 80075d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3b20      	subs	r3, #32
 80075d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075da:	68fb      	ldr	r3, [r7, #12]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	080075ed 	.word	0x080075ed

080075ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075f6:	4b12      	ldr	r3, [pc, #72]	; (8007640 <prvTaskExitError+0x54>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d00a      	beq.n	8007616 <prvTaskExitError+0x2a>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60fb      	str	r3, [r7, #12]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <prvTaskExitError+0x28>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60bb      	str	r3, [r7, #8]
}
 8007628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800762a:	bf00      	nop
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0fc      	beq.n	800762c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	2400000c 	.word	0x2400000c
	...

08007650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <pxCurrentTCBConst2>)
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	6808      	ldr	r0, [r1, #0]
 8007656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	f380 8809 	msr	PSP, r0
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f04f 0000 	mov.w	r0, #0
 8007666:	f380 8811 	msr	BASEPRI, r0
 800766a:	4770      	bx	lr
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst2>:
 8007670:	24009c44 	.word	0x24009c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007678:	4808      	ldr	r0, [pc, #32]	; (800769c <prvPortStartFirstTask+0x24>)
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	6800      	ldr	r0, [r0, #0]
 800767e:	f380 8808 	msr	MSP, r0
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8814 	msr	CONTROL, r0
 800768a:	b662      	cpsie	i
 800768c:	b661      	cpsie	f
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	df00      	svc	0
 8007698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800769a:	bf00      	nop
 800769c:	e000ed08 	.word	0xe000ed08

080076a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076a6:	4b46      	ldr	r3, [pc, #280]	; (80077c0 <xPortStartScheduler+0x120>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a46      	ldr	r2, [pc, #280]	; (80077c4 <xPortStartScheduler+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d10a      	bne.n	80076c6 <xPortStartScheduler+0x26>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076c6:	4b3e      	ldr	r3, [pc, #248]	; (80077c0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a3f      	ldr	r2, [pc, #252]	; (80077c8 <xPortStartScheduler+0x128>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x46>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60fb      	str	r3, [r7, #12]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076e6:	4b39      	ldr	r3, [pc, #228]	; (80077cc <xPortStartScheduler+0x12c>)
 80076e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	22ff      	movs	r2, #255	; 0xff
 80076f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <xPortStartScheduler+0x130>)
 800770c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800770e:	4b31      	ldr	r3, [pc, #196]	; (80077d4 <xPortStartScheduler+0x134>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007714:	e009      	b.n	800772a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007716:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <xPortStartScheduler+0x134>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <xPortStartScheduler+0x134>)
 800771e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b80      	cmp	r3, #128	; 0x80
 8007734:	d0ef      	beq.n	8007716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007736:	4b27      	ldr	r3, [pc, #156]	; (80077d4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f1c3 0307 	rsb	r3, r3, #7
 800773e:	2b04      	cmp	r3, #4
 8007740:	d00a      	beq.n	8007758 <xPortStartScheduler+0xb8>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <xPortStartScheduler+0x134>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	021b      	lsls	r3, r3, #8
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <xPortStartScheduler+0x134>)
 8007760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007762:	4b1c      	ldr	r3, [pc, #112]	; (80077d4 <xPortStartScheduler+0x134>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800776a:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <xPortStartScheduler+0x134>)
 800776c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007776:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <xPortStartScheduler+0x138>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <xPortStartScheduler+0x138>)
 800777c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007782:	4b15      	ldr	r3, [pc, #84]	; (80077d8 <xPortStartScheduler+0x138>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <xPortStartScheduler+0x138>)
 8007788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800778c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800778e:	f000 f8dd 	bl	800794c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007792:	4b12      	ldr	r3, [pc, #72]	; (80077dc <xPortStartScheduler+0x13c>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007798:	f000 f8fc 	bl	8007994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800779c:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <xPortStartScheduler+0x140>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <xPortStartScheduler+0x140>)
 80077a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077a8:	f7ff ff66 	bl	8007678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077ac:	f001 fcfc 	bl	80091a8 <vTaskSwitchContext>
	prvTaskExitError();
 80077b0:	f7ff ff1c 	bl	80075ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	e000ed00 	.word	0xe000ed00
 80077c4:	410fc271 	.word	0x410fc271
 80077c8:	410fc270 	.word	0x410fc270
 80077cc:	e000e400 	.word	0xe000e400
 80077d0:	24009bfc 	.word	0x24009bfc
 80077d4:	24009c00 	.word	0x24009c00
 80077d8:	e000ed20 	.word	0xe000ed20
 80077dc:	2400000c 	.word	0x2400000c
 80077e0:	e000ef34 	.word	0xe000ef34

080077e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	607b      	str	r3, [r7, #4]
}
 80077fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077fe:	4b0f      	ldr	r3, [pc, #60]	; (800783c <vPortEnterCritical+0x58>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	4a0d      	ldr	r2, [pc, #52]	; (800783c <vPortEnterCritical+0x58>)
 8007806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007808:	4b0c      	ldr	r3, [pc, #48]	; (800783c <vPortEnterCritical+0x58>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d10f      	bne.n	8007830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <vPortEnterCritical+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <vPortEnterCritical+0x4c>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	603b      	str	r3, [r7, #0]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <vPortEnterCritical+0x4a>
	}
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	2400000c 	.word	0x2400000c
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800784a:	4b12      	ldr	r3, [pc, #72]	; (8007894 <vPortExitCritical+0x50>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <vPortExitCritical+0x24>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <vPortExitCritical+0x50>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3b01      	subs	r3, #1
 800786e:	4a09      	ldr	r2, [pc, #36]	; (8007894 <vPortExitCritical+0x50>)
 8007870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <vPortExitCritical+0x50>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <vPortExitCritical+0x42>
 800787a:	2300      	movs	r3, #0
 800787c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	2400000c 	.word	0x2400000c
	...

080078a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078a0:	f3ef 8009 	mrs	r0, PSP
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <pxCurrentTCBConst>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f01e 0f10 	tst.w	lr, #16
 80078b0:	bf08      	it	eq
 80078b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ba:	6010      	str	r0, [r2, #0]
 80078bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078c4:	f380 8811 	msr	BASEPRI, r0
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f001 fc6a 	bl	80091a8 <vTaskSwitchContext>
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f380 8811 	msr	BASEPRI, r0
 80078dc:	bc09      	pop	{r0, r3}
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	6808      	ldr	r0, [r1, #0]
 80078e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e6:	f01e 0f10 	tst.w	lr, #16
 80078ea:	bf08      	it	eq
 80078ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078f0:	f380 8809 	msr	PSP, r0
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	f3af 8000 	nop.w

08007900 <pxCurrentTCBConst>:
 8007900:	24009c44 	.word	0x24009c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop

08007908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
}
 8007920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007922:	f001 fb87 	bl	8009034 <xTaskIncrementTick>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <xPortSysTickHandler+0x40>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	2300      	movs	r3, #0
 8007936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	f383 8811 	msr	BASEPRI, r3
}
 800793e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007956:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <vPortSetupTimerInterrupt+0x38>)
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <vPortSetupTimerInterrupt+0x3c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <vPortSetupTimerInterrupt+0x40>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	099b      	lsrs	r3, r3, #6
 8007968:	4a09      	ldr	r2, [pc, #36]	; (8007990 <vPortSetupTimerInterrupt+0x44>)
 800796a:	3b01      	subs	r3, #1
 800796c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <vPortSetupTimerInterrupt+0x34>)
 8007970:	2207      	movs	r2, #7
 8007972:	601a      	str	r2, [r3, #0]
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	e000e010 	.word	0xe000e010
 8007984:	e000e018 	.word	0xe000e018
 8007988:	24000010 	.word	0x24000010
 800798c:	10624dd3 	.word	0x10624dd3
 8007990:	e000e014 	.word	0xe000e014

08007994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079a4 <vPortEnableVFP+0x10>
 8007998:	6801      	ldr	r1, [r0, #0]
 800799a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800799e:	6001      	str	r1, [r0, #0]
 80079a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079a2:	bf00      	nop
 80079a4:	e000ed88 	.word	0xe000ed88

080079a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ae:	f3ef 8305 	mrs	r3, IPSR
 80079b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d914      	bls.n	80079e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <vPortValidateInterruptPriority+0x70>)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079c4:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <vPortValidateInterruptPriority+0x74>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	7afa      	ldrb	r2, [r7, #11]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d20a      	bcs.n	80079e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	607b      	str	r3, [r7, #4]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079e4:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <vPortValidateInterruptPriority+0x78>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <vPortValidateInterruptPriority+0x7c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d90a      	bls.n	8007a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	603b      	str	r3, [r7, #0]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <vPortValidateInterruptPriority+0x60>
	}
 8007a0a:	bf00      	nop
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	e000e3f0 	.word	0xe000e3f0
 8007a1c:	24009bfc 	.word	0x24009bfc
 8007a20:	e000ed0c 	.word	0xe000ed0c
 8007a24:	24009c00 	.word	0x24009c00

08007a28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <xQueueGenericReset+0x2a>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60bb      	str	r3, [r7, #8]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a52:	f7ff fec7 	bl	80077e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a62:	fb01 f303 	mul.w	r3, r1, r3
 8007a66:	441a      	add	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	3b01      	subs	r3, #1
 8007a84:	68f9      	ldr	r1, [r7, #12]
 8007a86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	441a      	add	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d114      	bne.n	8007ad2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01a      	beq.n	8007ae6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 fc25 	bl	8009304 <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d012      	beq.n	8007ae6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <xQueueGenericReset+0xcc>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	e009      	b.n	8007ae6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fca0 	bl	800741c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3324      	adds	r3, #36	; 0x24
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fc9b 	bl	800741c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ae6:	f7ff fead 	bl	8007844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007aea:	2301      	movs	r3, #1
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08e      	sub	sp, #56	; 0x38
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <xQueueGenericCreateStatic+0x52>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <xQueueGenericCreateStatic+0x56>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <xQueueGenericCreateStatic+0x58>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	623b      	str	r3, [r7, #32]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d102      	bne.n	8007b76 <xQueueGenericCreateStatic+0x7e>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <xQueueGenericCreateStatic+0x82>
 8007b76:	2301      	movs	r3, #1
 8007b78:	e000      	b.n	8007b7c <xQueueGenericCreateStatic+0x84>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	61fb      	str	r3, [r7, #28]
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b96:	2350      	movs	r3, #80	; 0x50
 8007b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b50      	cmp	r3, #80	; 0x50
 8007b9e:	d00a      	beq.n	8007bb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61bb      	str	r3, [r7, #24]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f83f 	bl	8007c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3730      	adds	r7, #48	; 0x30
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	613b      	str	r3, [r7, #16]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	3350      	adds	r3, #80	; 0x50
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fa11 	bl	8007048 <pvPortMalloc>
 8007c26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d011      	beq.n	8007c52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	3350      	adds	r3, #80	; 0x50
 8007c36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c40:	79fa      	ldrb	r2, [r7, #7]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4613      	mov	r3, r2
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f805 	bl	8007c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c52:	69bb      	ldr	r3, [r7, #24]
	}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	69b8      	ldr	r0, [r7, #24]
 8007c8e:	f7ff fecb 	bl	8007a28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b08a      	sub	sp, #40	; 0x28
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	61bb      	str	r3, [r7, #24]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d90a      	bls.n	8007ce8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	617b      	str	r3, [r7, #20]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ce8:	2302      	movs	r3, #2
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff ff00 	bl	8007af8 <xQueueGenericCreateStatic>
 8007cf8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d06:	69fb      	ldr	r3, [r7, #28]
	}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10a      	bne.n	8007d36 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d90a      	bls.n	8007d54 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d54:	2202      	movs	r2, #2
 8007d56:	2100      	movs	r1, #0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff ff45 	bl	8007be8 <xQueueGenericCreate>
 8007d5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d6c:	697b      	ldr	r3, [r7, #20]
	}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	; 0x38
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d86:	2300      	movs	r3, #0
 8007d88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xQueueGenericSend+0x32>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d103      	bne.n	8007db8 <xQueueGenericSend+0x40>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <xQueueGenericSend+0x44>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <xQueueGenericSend+0x46>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <xQueueGenericSend+0x60>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dd4:	bf00      	nop
 8007dd6:	e7fe      	b.n	8007dd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d103      	bne.n	8007de6 <xQueueGenericSend+0x6e>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <xQueueGenericSend+0x72>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e000      	b.n	8007dec <xQueueGenericSend+0x74>
 8007dea:	2300      	movs	r3, #0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <xQueueGenericSend+0x8e>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e06:	f001 fc3b 	bl	8009680 <xTaskGetSchedulerState>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <xQueueGenericSend+0x9e>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <xQueueGenericSend+0xa2>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <xQueueGenericSend+0xa4>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61fb      	str	r3, [r7, #28]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e36:	f7ff fcd5 	bl	80077e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d302      	bcc.n	8007e4c <xQueueGenericSend+0xd4>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d129      	bne.n	8007ea0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e52:	f000 fc5e 	bl	8008712 <prvCopyDataToQueue>
 8007e56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d010      	beq.n	8007e82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	3324      	adds	r3, #36	; 0x24
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 fa4d 	bl	8009304 <xTaskRemoveFromEventList>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d013      	beq.n	8007e98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e70:	4b3f      	ldr	r3, [pc, #252]	; (8007f70 <xQueueGenericSend+0x1f8>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	e00a      	b.n	8007e98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e88:	4b39      	ldr	r3, [pc, #228]	; (8007f70 <xQueueGenericSend+0x1f8>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e98:	f7ff fcd4 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e063      	b.n	8007f68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d103      	bne.n	8007eae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ea6:	f7ff fccd 	bl	8007844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e05c      	b.n	8007f68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fa87 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ec2:	f7ff fcbf 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ec6:	f000 fff9 	bl	8008ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eca:	f7ff fc8b 	bl	80077e4 <vPortEnterCritical>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d103      	bne.n	8007ee4 <xQueueGenericSend+0x16c>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eea:	b25b      	sxtb	r3, r3
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef0:	d103      	bne.n	8007efa <xQueueGenericSend+0x182>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007efa:	f7ff fca3 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007efe:	1d3a      	adds	r2, r7, #4
 8007f00:	f107 0314 	add.w	r3, r7, #20
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fa76 	bl	80093f8 <xTaskCheckForTimeOut>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d124      	bne.n	8007f5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f14:	f000 fcf5 	bl	8008902 <prvIsQueueFull>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d018      	beq.n	8007f50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	3310      	adds	r3, #16
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 f99c 	bl	8009264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f2e:	f000 fc80 	bl	8008832 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f32:	f000 ffd1 	bl	8008ed8 <xTaskResumeAll>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f47f af7c 	bne.w	8007e36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <xQueueGenericSend+0x1f8>)
 8007f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	e772      	b.n	8007e36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f52:	f000 fc6e 	bl	8008832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f56:	f000 ffbf 	bl	8008ed8 <xTaskResumeAll>
 8007f5a:	e76c      	b.n	8007e36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f5e:	f000 fc68 	bl	8008832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f62:	f000 ffb9 	bl	8008ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3738      	adds	r7, #56	; 0x38
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	e000ed04 	.word	0xe000ed04

08007f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b090      	sub	sp, #64	; 0x40
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d103      	bne.n	8007fb0 <xQueueGenericSendFromISR+0x3c>
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <xQueueGenericSendFromISR+0x40>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <xQueueGenericSendFromISR+0x42>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <xQueueGenericSendFromISR+0x6a>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d101      	bne.n	8007fe2 <xQueueGenericSendFromISR+0x6e>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <xQueueGenericSendFromISR+0x70>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fec:	f383 8811 	msr	BASEPRI, r3
 8007ff0:	f3bf 8f6f 	isb	sy
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	623b      	str	r3, [r7, #32]
}
 8007ffa:	bf00      	nop
 8007ffc:	e7fe      	b.n	8007ffc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ffe:	f7ff fcd3 	bl	80079a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008002:	f3ef 8211 	mrs	r2, BASEPRI
 8008006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	61fa      	str	r2, [r7, #28]
 8008018:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800801a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800801c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	429a      	cmp	r2, r3
 8008028:	d302      	bcc.n	8008030 <xQueueGenericSendFromISR+0xbc>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d12f      	bne.n	8008090 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008046:	f000 fb64 	bl	8008712 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800804a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d112      	bne.n	800807a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	d016      	beq.n	800808a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f94f 	bl	8009304 <xTaskRemoveFromEventList>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00e      	beq.n	800808a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	e007      	b.n	800808a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800807a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800807e:	3301      	adds	r3, #1
 8008080:	b2db      	uxtb	r3, r3
 8008082:	b25a      	sxtb	r2, r3
 8008084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800808a:	2301      	movs	r3, #1
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800808e:	e001      	b.n	8008094 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008090:	2300      	movs	r3, #0
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f383 8811 	msr	BASEPRI, r3
}
 800809e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3740      	adds	r7, #64	; 0x40
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b08e      	sub	sp, #56	; 0x38
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	623b      	str	r3, [r7, #32]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	61fb      	str	r3, [r7, #28]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <xQueueGiveFromISR+0x58>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <xQueueGiveFromISR+0x5c>
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <xQueueGiveFromISR+0x5e>
 8008106:	2300      	movs	r3, #0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueGiveFromISR+0x78>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61bb      	str	r3, [r7, #24]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008122:	f7ff fc41 	bl	80079a8 <vPortValidateInterruptPriority>
	__asm volatile
 8008126:	f3ef 8211 	mrs	r2, BASEPRI
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	617a      	str	r2, [r7, #20]
 800813c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800813e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814e:	429a      	cmp	r2, r3
 8008150:	d22b      	bcs.n	80081aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d112      	bne.n	8008194 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d016      	beq.n	80081a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	3324      	adds	r3, #36	; 0x24
 800817a:	4618      	mov	r0, r3
 800817c:	f001 f8c2 	bl	8009304 <xTaskRemoveFromEventList>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e007      	b.n	80081a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008198:	3301      	adds	r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	b25a      	sxtb	r2, r3
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081a4:	2301      	movs	r3, #1
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
 80081a8:	e001      	b.n	80081ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f383 8811 	msr	BASEPRI, r3
}
 80081b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3738      	adds	r7, #56	; 0x38
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	; 0x30
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10a      	bne.n	80081f4 <xQueueReceive+0x30>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	623b      	str	r3, [r7, #32]
}
 80081f0:	bf00      	nop
 80081f2:	e7fe      	b.n	80081f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d103      	bne.n	8008202 <xQueueReceive+0x3e>
 80081fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <xQueueReceive+0x42>
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <xQueueReceive+0x44>
 8008206:	2300      	movs	r3, #0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueReceive+0x5e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61fb      	str	r3, [r7, #28]
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008222:	f001 fa2d 	bl	8009680 <xTaskGetSchedulerState>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <xQueueReceive+0x6e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <xQueueReceive+0x72>
 8008232:	2301      	movs	r3, #1
 8008234:	e000      	b.n	8008238 <xQueueReceive+0x74>
 8008236:	2300      	movs	r3, #0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueReceive+0x8e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	61bb      	str	r3, [r7, #24]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008252:	f7ff fac7 	bl	80077e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01f      	beq.n	80082a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008266:	f000 fabe 	bl	80087e6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	1e5a      	subs	r2, r3, #1
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00f      	beq.n	800829a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	3310      	adds	r3, #16
 800827e:	4618      	mov	r0, r3
 8008280:	f001 f840 	bl	8009304 <xTaskRemoveFromEventList>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800828a:	4b3d      	ldr	r3, [pc, #244]	; (8008380 <xQueueReceive+0x1bc>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800829a:	f7ff fad3 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 800829e:	2301      	movs	r3, #1
 80082a0:	e069      	b.n	8008376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082a8:	f7ff facc 	bl	8007844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e062      	b.n	8008376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 f886 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082c4:	f7ff fabe 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c8:	f000 fdf8 	bl	8008ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082cc:	f7ff fa8a 	bl	80077e4 <vPortEnterCritical>
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d103      	bne.n	80082e6 <xQueueReceive+0x122>
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f2:	d103      	bne.n	80082fc <xQueueReceive+0x138>
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082fc:	f7ff faa2 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008300:	1d3a      	adds	r2, r7, #4
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f001 f875 	bl	80093f8 <xTaskCheckForTimeOut>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d123      	bne.n	800835c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008316:	f000 fade 	bl	80088d6 <prvIsQueueEmpty>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d017      	beq.n	8008350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f000 ff9b 	bl	8009264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800832e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008330:	f000 fa7f 	bl	8008832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008334:	f000 fdd0 	bl	8008ed8 <xTaskResumeAll>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d189      	bne.n	8008252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800833e:	4b10      	ldr	r3, [pc, #64]	; (8008380 <xQueueReceive+0x1bc>)
 8008340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008344:	601a      	str	r2, [r3, #0]
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	e780      	b.n	8008252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008352:	f000 fa6e 	bl	8008832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008356:	f000 fdbf 	bl	8008ed8 <xTaskResumeAll>
 800835a:	e77a      	b.n	8008252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800835c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835e:	f000 fa68 	bl	8008832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008362:	f000 fdb9 	bl	8008ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008368:	f000 fab5 	bl	80088d6 <prvIsQueueEmpty>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	f43f af6f 	beq.w	8008252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008376:	4618      	mov	r0, r3
 8008378:	3730      	adds	r7, #48	; 0x30
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	; 0x38
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	623b      	str	r3, [r7, #32]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	61fb      	str	r3, [r7, #28]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083d4:	f001 f954 	bl	8009680 <xTaskGetSchedulerState>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <xQueueSemaphoreTake+0x60>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <xQueueSemaphoreTake+0x64>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e000      	b.n	80083ea <xQueueSemaphoreTake+0x66>
 80083e8:	2300      	movs	r3, #0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61bb      	str	r3, [r7, #24]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008404:	f7ff f9ee 	bl	80077e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	d024      	beq.n	800845e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008424:	f001 faa2 	bl	800996c <pvTaskIncrementMutexHeldCount>
 8008428:	4602      	mov	r2, r0
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00f      	beq.n	8008456 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	3310      	adds	r3, #16
 800843a:	4618      	mov	r0, r3
 800843c:	f000 ff62 	bl	8009304 <xTaskRemoveFromEventList>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008446:	4b54      	ldr	r3, [pc, #336]	; (8008598 <xQueueSemaphoreTake+0x214>)
 8008448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008456:	f7ff f9f5 	bl	8007844 <vPortExitCritical>
				return pdPASS;
 800845a:	2301      	movs	r3, #1
 800845c:	e097      	b.n	800858e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d111      	bne.n	8008488 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	617b      	str	r3, [r7, #20]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008480:	f7ff f9e0 	bl	8007844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008484:	2300      	movs	r3, #0
 8008486:	e082      	b.n	800858e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f000 ff9a 	bl	80093cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800849c:	f7ff f9d2 	bl	8007844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084a0:	f000 fd0c 	bl	8008ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084a4:	f7ff f99e 	bl	80077e4 <vPortEnterCritical>
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ae:	b25b      	sxtb	r3, r3
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d103      	bne.n	80084be <xQueueSemaphoreTake+0x13a>
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d103      	bne.n	80084d4 <xQueueSemaphoreTake+0x150>
 80084cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084d4:	f7ff f9b6 	bl	8007844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d8:	463a      	mov	r2, r7
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4611      	mov	r1, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 ff89 	bl	80093f8 <xTaskCheckForTimeOut>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d132      	bne.n	8008552 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084ee:	f000 f9f2 	bl	80088d6 <prvIsQueueEmpty>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008500:	f7ff f970 	bl	80077e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f001 f8d7 	bl	80096bc <xTaskPriorityInherit>
 800850e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008510:	f7ff f998 	bl	8007844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	3324      	adds	r3, #36	; 0x24
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fea1 	bl	8009264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008524:	f000 f985 	bl	8008832 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 fcd6 	bl	8008ed8 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af68 	bne.w	8008404 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008534:	4b18      	ldr	r3, [pc, #96]	; (8008598 <xQueueSemaphoreTake+0x214>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e75e      	b.n	8008404 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008548:	f000 f973 	bl	8008832 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800854c:	f000 fcc4 	bl	8008ed8 <xTaskResumeAll>
 8008550:	e758      	b.n	8008404 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008554:	f000 f96d 	bl	8008832 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008558:	f000 fcbe 	bl	8008ed8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800855e:	f000 f9ba 	bl	80088d6 <prvIsQueueEmpty>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f43f af4d 	beq.w	8008404 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008570:	f7ff f938 	bl	80077e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008576:	f000 f8b4 	bl	80086e2 <prvGetDisinheritPriorityAfterTimeout>
 800857a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f970 	bl	8009868 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008588:	f7ff f95c 	bl	8007844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800858c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800858e:	4618      	mov	r0, r3
 8008590:	3738      	adds	r7, #56	; 0x38
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	; 0x38
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	623b      	str	r3, [r7, #32]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <xQueueReceiveFromISR+0x3a>
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <xQueueReceiveFromISR+0x3e>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <xQueueReceiveFromISR+0x40>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	61fb      	str	r3, [r7, #28]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085f6:	f7ff f9d7 	bl	80079a8 <vPortValidateInterruptPriority>
	__asm volatile
 80085fa:	f3ef 8211 	mrs	r2, BASEPRI
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	61ba      	str	r2, [r7, #24]
 8008610:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008612:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008614:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02f      	beq.n	8008682 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800862c:	68b9      	ldr	r1, [r7, #8]
 800862e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008630:	f000 f8d9 	bl	80087e6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	1e5a      	subs	r2, r3, #1
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800863c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	d112      	bne.n	800866c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	3310      	adds	r3, #16
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fe56 	bl	8009304 <xTaskRemoveFromEventList>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00e      	beq.n	800867c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e007      	b.n	800867c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800866c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008670:	3301      	adds	r3, #1
 8008672:	b2db      	uxtb	r3, r3
 8008674:	b25a      	sxtb	r2, r3
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800867c:	2301      	movs	r3, #1
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	e001      	b.n	8008686 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	637b      	str	r3, [r7, #52]	; 0x34
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	613b      	str	r3, [r7, #16]
	__asm volatile
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f383 8811 	msr	BASEPRI, r3
}
 8008690:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008694:	4618      	mov	r0, r3
 8008696:	3738      	adds	r7, #56	; 0x38
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10a      	bne.n	80086c4 <vQueueDelete+0x28>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	60bb      	str	r3, [r7, #8]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f95f 	bl	8008988 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d102      	bne.n	80086da <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f7fe fd83 	bl	80071e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d006      	beq.n	8008700 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80086fc:	60fb      	str	r3, [r7, #12]
 80086fe:	e001      	b.n	8008704 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008704:	68fb      	ldr	r3, [r7, #12]
	}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800871e:	2300      	movs	r3, #0
 8008720:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10d      	bne.n	800874c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d14d      	bne.n	80087d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f001 f825 	bl	800978c <xTaskPriorityDisinherit>
 8008742:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	609a      	str	r2, [r3, #8]
 800874a:	e043      	b.n	80087d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d119      	bne.n	8008786 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6858      	ldr	r0, [r3, #4]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	461a      	mov	r2, r3
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	f01a fe2f 	bl	80233c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	441a      	add	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	d32b      	bcc.n	80087d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	605a      	str	r2, [r3, #4]
 8008784:	e026      	b.n	80087d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68d8      	ldr	r0, [r3, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	461a      	mov	r2, r3
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	f01a fe15 	bl	80233c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	425b      	negs	r3, r3
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d207      	bcs.n	80087c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	425b      	negs	r3, r3
 80087bc:	441a      	add	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d105      	bne.n	80087d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087dc:	697b      	ldr	r3, [r7, #20]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d018      	beq.n	800882a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	441a      	add	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	429a      	cmp	r2, r3
 8008810:	d303      	bcc.n	800881a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68d9      	ldr	r1, [r3, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	461a      	mov	r2, r3
 8008824:	6838      	ldr	r0, [r7, #0]
 8008826:	f01a fdcb 	bl	80233c0 <memcpy>
	}
}
 800882a:	bf00      	nop
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800883a:	f7fe ffd3 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008844:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008846:	e011      	b.n	800886c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	d012      	beq.n	8008876 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3324      	adds	r3, #36	; 0x24
 8008854:	4618      	mov	r0, r3
 8008856:	f000 fd55 	bl	8009304 <xTaskRemoveFromEventList>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008860:	f000 fe2c 	bl	80094bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	3b01      	subs	r3, #1
 8008868:	b2db      	uxtb	r3, r3
 800886a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800886c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	dce9      	bgt.n	8008848 <prvUnlockQueue+0x16>
 8008874:	e000      	b.n	8008878 <prvUnlockQueue+0x46>
					break;
 8008876:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	22ff      	movs	r2, #255	; 0xff
 800887c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008880:	f7fe ffe0 	bl	8007844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008884:	f7fe ffae 	bl	80077e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800888e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008890:	e011      	b.n	80088b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d012      	beq.n	80088c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3310      	adds	r3, #16
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fd30 	bl	8009304 <xTaskRemoveFromEventList>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088aa:	f000 fe07 	bl	80094bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dce9      	bgt.n	8008892 <prvUnlockQueue+0x60>
 80088be:	e000      	b.n	80088c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	22ff      	movs	r2, #255	; 0xff
 80088c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088ca:	f7fe ffbb 	bl	8007844 <vPortExitCritical>
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088de:	f7fe ff81 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d102      	bne.n	80088f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088ea:	2301      	movs	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	e001      	b.n	80088f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088f4:	f7fe ffa6 	bl	8007844 <vPortExitCritical>

	return xReturn;
 80088f8:	68fb      	ldr	r3, [r7, #12]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800890a:	f7fe ff6b 	bl	80077e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008916:	429a      	cmp	r2, r3
 8008918:	d102      	bne.n	8008920 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800891a:	2301      	movs	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	e001      	b.n	8008924 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008924:	f7fe ff8e 	bl	8007844 <vPortExitCritical>

	return xReturn;
 8008928:	68fb      	ldr	r3, [r7, #12]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
	...

08008934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	e014      	b.n	800896e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008944:	4a0f      	ldr	r2, [pc, #60]	; (8008984 <vQueueAddToRegistry+0x50>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10b      	bne.n	8008968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008950:	490c      	ldr	r1, [pc, #48]	; (8008984 <vQueueAddToRegistry+0x50>)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800895a:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <vQueueAddToRegistry+0x50>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008966:	e006      	b.n	8008976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b07      	cmp	r3, #7
 8008972:	d9e7      	bls.n	8008944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	24009c04 	.word	0x24009c04

08008988 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	e016      	b.n	80089c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008996:	4a10      	ldr	r2, [pc, #64]	; (80089d8 <vQueueUnregisterQueue+0x50>)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	4413      	add	r3, r2
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d10b      	bne.n	80089be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089a6:	4a0c      	ldr	r2, [pc, #48]	; (80089d8 <vQueueUnregisterQueue+0x50>)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2100      	movs	r1, #0
 80089ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089b0:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <vQueueUnregisterQueue+0x50>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	4413      	add	r3, r2
 80089b8:	2200      	movs	r2, #0
 80089ba:	605a      	str	r2, [r3, #4]
				break;
 80089bc:	e006      	b.n	80089cc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b07      	cmp	r3, #7
 80089c8:	d9e5      	bls.n	8008996 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	24009c04 	.word	0x24009c04

080089dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089ec:	f7fe fefa 	bl	80077e4 <vPortEnterCritical>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089f6:	b25b      	sxtb	r3, r3
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d103      	bne.n	8008a06 <vQueueWaitForMessageRestricted+0x2a>
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a0c:	b25b      	sxtb	r3, r3
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d103      	bne.n	8008a1c <vQueueWaitForMessageRestricted+0x40>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a1c:	f7fe ff12 	bl	8007844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	3324      	adds	r3, #36	; 0x24
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 fc3b 	bl	80092ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7ff fefb 	bl	8008832 <prvUnlockQueue>
	}
 8008a3c:	bf00      	nop
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b08e      	sub	sp, #56	; 0x38
 8008a48:	af04      	add	r7, sp, #16
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	623b      	str	r3, [r7, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	e7fe      	b.n	8008a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	61fb      	str	r3, [r7, #28]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a8a:	235c      	movs	r3, #92	; 0x5c
 8008a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b5c      	cmp	r3, #92	; 0x5c
 8008a92:	d00a      	beq.n	8008aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	61bb      	str	r3, [r7, #24]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01e      	beq.n	8008af0 <xTaskCreateStatic+0xac>
 8008ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d01b      	beq.n	8008af0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008aca:	2300      	movs	r3, #0
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad0:	9302      	str	r3, [sp, #8]
 8008ad2:	f107 0314 	add.w	r3, r7, #20
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f850 	bl	8008b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aea:	f000 f8dd 	bl	8008ca8 <prvAddNewTaskToReadyList>
 8008aee:	e001      	b.n	8008af4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008af4:	697b      	ldr	r3, [r7, #20]
	}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3728      	adds	r7, #40	; 0x28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b08c      	sub	sp, #48	; 0x30
 8008b02:	af04      	add	r7, sp, #16
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fa98 	bl	8007048 <pvPortMalloc>
 8008b18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00e      	beq.n	8008b3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b20:	205c      	movs	r0, #92	; 0x5c
 8008b22:	f7fe fa91 	bl	8007048 <pvPortMalloc>
 8008b26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	631a      	str	r2, [r3, #48]	; 0x30
 8008b34:	e005      	b.n	8008b42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b36:	6978      	ldr	r0, [r7, #20]
 8008b38:	f7fe fb52 	bl	80071e0 <vPortFree>
 8008b3c:	e001      	b.n	8008b42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d017      	beq.n	8008b78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b50:	88fa      	ldrh	r2, [r7, #6]
 8008b52:	2300      	movs	r3, #0
 8008b54:	9303      	str	r3, [sp, #12]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f80e 	bl	8008b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b6c:	69f8      	ldr	r0, [r7, #28]
 8008b6e:	f000 f89b 	bl	8008ca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61bb      	str	r3, [r7, #24]
 8008b76:	e002      	b.n	8008b7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b78:	f04f 33ff 	mov.w	r3, #4294967295
 8008b7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	21a5      	movs	r1, #165	; 0xa5
 8008ba2:	f01a fc1b 	bl	80233dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bb0:	440b      	add	r3, r1
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	617b      	str	r3, [r7, #20]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01f      	beq.n	8008c26 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008be6:	2300      	movs	r3, #0
 8008be8:	61fb      	str	r3, [r7, #28]
 8008bea:	e012      	b.n	8008c12 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	7819      	ldrb	r1, [r3, #0]
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3334      	adds	r3, #52	; 0x34
 8008bfc:	460a      	mov	r2, r1
 8008bfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	4413      	add	r3, r2
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d006      	beq.n	8008c1a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b0f      	cmp	r3, #15
 8008c16:	d9e9      	bls.n	8008bec <prvInitialiseNewTask+0x64>
 8008c18:	e000      	b.n	8008c1c <prvInitialiseNewTask+0x94>
			{
				break;
 8008c1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c24:	e003      	b.n	8008c2e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	2b37      	cmp	r3, #55	; 0x37
 8008c32:	d901      	bls.n	8008c38 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c34:	2337      	movs	r3, #55	; 0x37
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	2200      	movs	r2, #0
 8008c48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe fc04 	bl	800745c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	3318      	adds	r3, #24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe fbff 	bl	800745c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	2200      	movs	r2, #0
 8008c78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	68f9      	ldr	r1, [r7, #12]
 8008c86:	69b8      	ldr	r0, [r7, #24]
 8008c88:	f7fe fc7c 	bl	8007584 <pxPortInitialiseStack>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c9e:	bf00      	nop
 8008ca0:	3720      	adds	r7, #32
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cb0:	f7fe fd98 	bl	80077e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cb4:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <prvAddNewTaskToReadyList+0xc4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	4a2c      	ldr	r2, [pc, #176]	; (8008d6c <prvAddNewTaskToReadyList+0xc4>)
 8008cbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cbe:	4b2c      	ldr	r3, [pc, #176]	; (8008d70 <prvAddNewTaskToReadyList+0xc8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cc6:	4a2a      	ldr	r2, [pc, #168]	; (8008d70 <prvAddNewTaskToReadyList+0xc8>)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ccc:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <prvAddNewTaskToReadyList+0xc4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d110      	bne.n	8008cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cd4:	f000 fc16 	bl	8009504 <prvInitialiseTaskLists>
 8008cd8:	e00d      	b.n	8008cf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cda:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <prvAddNewTaskToReadyList+0xcc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ce2:	4b23      	ldr	r3, [pc, #140]	; (8008d70 <prvAddNewTaskToReadyList+0xc8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d802      	bhi.n	8008cf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cf0:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <prvAddNewTaskToReadyList+0xc8>)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cf6:	4b20      	ldr	r3, [pc, #128]	; (8008d78 <prvAddNewTaskToReadyList+0xd0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4a1e      	ldr	r2, [pc, #120]	; (8008d78 <prvAddNewTaskToReadyList+0xd0>)
 8008cfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d00:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <prvAddNewTaskToReadyList+0xd0>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <prvAddNewTaskToReadyList+0xd4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d903      	bls.n	8008d1c <prvAddNewTaskToReadyList+0x74>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d18:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <prvAddNewTaskToReadyList+0xd4>)
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d20:	4613      	mov	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4a15      	ldr	r2, [pc, #84]	; (8008d80 <prvAddNewTaskToReadyList+0xd8>)
 8008d2a:	441a      	add	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4619      	mov	r1, r3
 8008d32:	4610      	mov	r0, r2
 8008d34:	f7fe fb9f 	bl	8007476 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d38:	f7fe fd84 	bl	8007844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <prvAddNewTaskToReadyList+0xcc>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <prvAddNewTaskToReadyList+0xc8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d207      	bcs.n	8008d62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d52:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <prvAddNewTaskToReadyList+0xdc>)
 8008d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	2400a118 	.word	0x2400a118
 8008d70:	24009c44 	.word	0x24009c44
 8008d74:	2400a124 	.word	0x2400a124
 8008d78:	2400a134 	.word	0x2400a134
 8008d7c:	2400a120 	.word	0x2400a120
 8008d80:	24009c48 	.word	0x24009c48
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d017      	beq.n	8008dca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d9a:	4b13      	ldr	r3, [pc, #76]	; (8008de8 <vTaskDelay+0x60>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <vTaskDelay+0x30>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008db8:	f000 f880 	bl	8008ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fde8 	bl	8009994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dc4:	f000 f888 	bl	8008ed8 <xTaskResumeAll>
 8008dc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <vTaskDelay+0x64>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	2400a140 	.word	0x2400a140
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dfe:	463a      	mov	r2, r7
 8008e00:	1d39      	adds	r1, r7, #4
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe f8ea 	bl	8006fe0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	9202      	str	r2, [sp, #8]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	2300      	movs	r3, #0
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	460a      	mov	r2, r1
 8008e1e:	4921      	ldr	r1, [pc, #132]	; (8008ea4 <vTaskStartScheduler+0xb4>)
 8008e20:	4821      	ldr	r0, [pc, #132]	; (8008ea8 <vTaskStartScheduler+0xb8>)
 8008e22:	f7ff fe0f 	bl	8008a44 <xTaskCreateStatic>
 8008e26:	4603      	mov	r3, r0
 8008e28:	4a20      	ldr	r2, [pc, #128]	; (8008eac <vTaskStartScheduler+0xbc>)
 8008e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e2c:	4b1f      	ldr	r3, [pc, #124]	; (8008eac <vTaskStartScheduler+0xbc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e001      	b.n	8008e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d102      	bne.n	8008e4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e44:	f000 fdfa 	bl	8009a3c <xTimerCreateTimerTask>
 8008e48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d116      	bne.n	8008e7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	613b      	str	r3, [r7, #16]
}
 8008e62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e64:	4b12      	ldr	r3, [pc, #72]	; (8008eb0 <vTaskStartScheduler+0xc0>)
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e6c:	4b11      	ldr	r3, [pc, #68]	; (8008eb4 <vTaskStartScheduler+0xc4>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e72:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <vTaskStartScheduler+0xc8>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e78:	f7fe fc12 	bl	80076a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e7c:	e00e      	b.n	8008e9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d10a      	bne.n	8008e9c <vTaskStartScheduler+0xac>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	e7fe      	b.n	8008e9a <vTaskStartScheduler+0xaa>
}
 8008e9c:	bf00      	nop
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	08025064 	.word	0x08025064
 8008ea8:	080094d5 	.word	0x080094d5
 8008eac:	2400a13c 	.word	0x2400a13c
 8008eb0:	2400a138 	.word	0x2400a138
 8008eb4:	2400a124 	.word	0x2400a124
 8008eb8:	2400a11c 	.word	0x2400a11c

08008ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ec0:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <vTaskSuspendAll+0x18>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	4a03      	ldr	r2, [pc, #12]	; (8008ed4 <vTaskSuspendAll+0x18>)
 8008ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008eca:	bf00      	nop
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2400a140 	.word	0x2400a140

08008ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ee6:	4b42      	ldr	r3, [pc, #264]	; (8008ff0 <xTaskResumeAll+0x118>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	603b      	str	r3, [r7, #0]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f04:	f7fe fc6e 	bl	80077e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f08:	4b39      	ldr	r3, [pc, #228]	; (8008ff0 <xTaskResumeAll+0x118>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	4a38      	ldr	r2, [pc, #224]	; (8008ff0 <xTaskResumeAll+0x118>)
 8008f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f12:	4b37      	ldr	r3, [pc, #220]	; (8008ff0 <xTaskResumeAll+0x118>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d162      	bne.n	8008fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f1a:	4b36      	ldr	r3, [pc, #216]	; (8008ff4 <xTaskResumeAll+0x11c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d05e      	beq.n	8008fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f22:	e02f      	b.n	8008f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f24:	4b34      	ldr	r3, [pc, #208]	; (8008ff8 <xTaskResumeAll+0x120>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3318      	adds	r3, #24
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fafd 	bl	8007530 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fe faf8 	bl	8007530 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f44:	4b2d      	ldr	r3, [pc, #180]	; (8008ffc <xTaskResumeAll+0x124>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d903      	bls.n	8008f54 <xTaskResumeAll+0x7c>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <xTaskResumeAll+0x124>)
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f58:	4613      	mov	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4a27      	ldr	r2, [pc, #156]	; (8009000 <xTaskResumeAll+0x128>)
 8008f62:	441a      	add	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f7fe fa83 	bl	8007476 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	4b23      	ldr	r3, [pc, #140]	; (8009004 <xTaskResumeAll+0x12c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d302      	bcc.n	8008f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <xTaskResumeAll+0x130>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f84:	4b1c      	ldr	r3, [pc, #112]	; (8008ff8 <xTaskResumeAll+0x120>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1cb      	bne.n	8008f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f92:	f000 fb55 	bl	8009640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <xTaskResumeAll+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d010      	beq.n	8008fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fa2:	f000 f847 	bl	8009034 <xTaskIncrementTick>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <xTaskResumeAll+0x130>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f1      	bne.n	8008fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fbe:	4b13      	ldr	r3, [pc, #76]	; (800900c <xTaskResumeAll+0x134>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <xTaskResumeAll+0x130>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d009      	beq.n	8008fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fd0:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <xTaskResumeAll+0x138>)
 8008fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fe0:	f7fe fc30 	bl	8007844 <vPortExitCritical>

	return xAlreadyYielded;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2400a140 	.word	0x2400a140
 8008ff4:	2400a118 	.word	0x2400a118
 8008ff8:	2400a0d8 	.word	0x2400a0d8
 8008ffc:	2400a120 	.word	0x2400a120
 8009000:	24009c48 	.word	0x24009c48
 8009004:	24009c44 	.word	0x24009c44
 8009008:	2400a12c 	.word	0x2400a12c
 800900c:	2400a128 	.word	0x2400a128
 8009010:	e000ed04 	.word	0xe000ed04

08009014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <xTaskGetTickCount+0x1c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009020:	687b      	ldr	r3, [r7, #4]
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	2400a11c 	.word	0x2400a11c

08009034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800903a:	2300      	movs	r3, #0
 800903c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800903e:	4b4f      	ldr	r3, [pc, #316]	; (800917c <xTaskIncrementTick+0x148>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f040 808f 	bne.w	8009166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009048:	4b4d      	ldr	r3, [pc, #308]	; (8009180 <xTaskIncrementTick+0x14c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009050:	4a4b      	ldr	r2, [pc, #300]	; (8009180 <xTaskIncrementTick+0x14c>)
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d120      	bne.n	800909e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800905c:	4b49      	ldr	r3, [pc, #292]	; (8009184 <xTaskIncrementTick+0x150>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <xTaskIncrementTick+0x48>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	603b      	str	r3, [r7, #0]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <xTaskIncrementTick+0x46>
 800907c:	4b41      	ldr	r3, [pc, #260]	; (8009184 <xTaskIncrementTick+0x150>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	4b41      	ldr	r3, [pc, #260]	; (8009188 <xTaskIncrementTick+0x154>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a3f      	ldr	r2, [pc, #252]	; (8009184 <xTaskIncrementTick+0x150>)
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	4a3f      	ldr	r2, [pc, #252]	; (8009188 <xTaskIncrementTick+0x154>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	4b3e      	ldr	r3, [pc, #248]	; (800918c <xTaskIncrementTick+0x158>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a3d      	ldr	r2, [pc, #244]	; (800918c <xTaskIncrementTick+0x158>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	f000 fad1 	bl	8009640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800909e:	4b3c      	ldr	r3, [pc, #240]	; (8009190 <xTaskIncrementTick+0x15c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d349      	bcc.n	800913c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090a8:	4b36      	ldr	r3, [pc, #216]	; (8009184 <xTaskIncrementTick+0x150>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b2:	4b37      	ldr	r3, [pc, #220]	; (8009190 <xTaskIncrementTick+0x15c>)
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	601a      	str	r2, [r3, #0]
					break;
 80090ba:	e03f      	b.n	800913c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	4b31      	ldr	r3, [pc, #196]	; (8009184 <xTaskIncrementTick+0x150>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d203      	bcs.n	80090dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090d4:	4a2e      	ldr	r2, [pc, #184]	; (8009190 <xTaskIncrementTick+0x15c>)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090da:	e02f      	b.n	800913c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	3304      	adds	r3, #4
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fa25 	bl	8007530 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	3318      	adds	r3, #24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fa1c 	bl	8007530 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fc:	4b25      	ldr	r3, [pc, #148]	; (8009194 <xTaskIncrementTick+0x160>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d903      	bls.n	800910c <xTaskIncrementTick+0xd8>
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4a22      	ldr	r2, [pc, #136]	; (8009194 <xTaskIncrementTick+0x160>)
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009110:	4613      	mov	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4a1f      	ldr	r2, [pc, #124]	; (8009198 <xTaskIncrementTick+0x164>)
 800911a:	441a      	add	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	3304      	adds	r3, #4
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7fe f9a7 	bl	8007476 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912c:	4b1b      	ldr	r3, [pc, #108]	; (800919c <xTaskIncrementTick+0x168>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009132:	429a      	cmp	r2, r3
 8009134:	d3b8      	bcc.n	80090a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009136:	2301      	movs	r3, #1
 8009138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800913a:	e7b5      	b.n	80090a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800913c:	4b17      	ldr	r3, [pc, #92]	; (800919c <xTaskIncrementTick+0x168>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4915      	ldr	r1, [pc, #84]	; (8009198 <xTaskIncrementTick+0x164>)
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d901      	bls.n	8009158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009158:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <xTaskIncrementTick+0x16c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d007      	beq.n	8009170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009160:	2301      	movs	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e004      	b.n	8009170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <xTaskIncrementTick+0x170>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3301      	adds	r3, #1
 800916c:	4a0d      	ldr	r2, [pc, #52]	; (80091a4 <xTaskIncrementTick+0x170>)
 800916e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009170:	697b      	ldr	r3, [r7, #20]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	2400a140 	.word	0x2400a140
 8009180:	2400a11c 	.word	0x2400a11c
 8009184:	2400a0d0 	.word	0x2400a0d0
 8009188:	2400a0d4 	.word	0x2400a0d4
 800918c:	2400a130 	.word	0x2400a130
 8009190:	2400a138 	.word	0x2400a138
 8009194:	2400a120 	.word	0x2400a120
 8009198:	24009c48 	.word	0x24009c48
 800919c:	24009c44 	.word	0x24009c44
 80091a0:	2400a12c 	.word	0x2400a12c
 80091a4:	2400a128 	.word	0x2400a128

080091a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ae:	4b28      	ldr	r3, [pc, #160]	; (8009250 <vTaskSwitchContext+0xa8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091b6:	4b27      	ldr	r3, [pc, #156]	; (8009254 <vTaskSwitchContext+0xac>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091bc:	e041      	b.n	8009242 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80091be:	4b25      	ldr	r3, [pc, #148]	; (8009254 <vTaskSwitchContext+0xac>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c4:	4b24      	ldr	r3, [pc, #144]	; (8009258 <vTaskSwitchContext+0xb0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	e010      	b.n	80091ee <vTaskSwitchContext+0x46>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	607b      	str	r3, [r7, #4]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <vTaskSwitchContext+0x3e>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	491b      	ldr	r1, [pc, #108]	; (800925c <vTaskSwitchContext+0xb4>)
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0e4      	beq.n	80091cc <vTaskSwitchContext+0x24>
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a13      	ldr	r2, [pc, #76]	; (800925c <vTaskSwitchContext+0xb4>)
 800920e:	4413      	add	r3, r2
 8009210:	60bb      	str	r3, [r7, #8]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	605a      	str	r2, [r3, #4]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3308      	adds	r3, #8
 8009224:	429a      	cmp	r2, r3
 8009226:	d104      	bne.n	8009232 <vTaskSwitchContext+0x8a>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	605a      	str	r2, [r3, #4]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4a09      	ldr	r2, [pc, #36]	; (8009260 <vTaskSwitchContext+0xb8>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	4a06      	ldr	r2, [pc, #24]	; (8009258 <vTaskSwitchContext+0xb0>)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6013      	str	r3, [r2, #0]
}
 8009242:	bf00      	nop
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	2400a140 	.word	0x2400a140
 8009254:	2400a12c 	.word	0x2400a12c
 8009258:	2400a120 	.word	0x2400a120
 800925c:	24009c48 	.word	0x24009c48
 8009260:	24009c44 	.word	0x24009c44

08009264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	60fb      	str	r3, [r7, #12]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <vTaskPlaceOnEventList+0x44>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3318      	adds	r3, #24
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fe f913 	bl	80074be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009298:	2101      	movs	r1, #1
 800929a:	6838      	ldr	r0, [r7, #0]
 800929c:	f000 fb7a 	bl	8009994 <prvAddCurrentTaskToDelayedList>
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	24009c44 	.word	0x24009c44

080092ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	617b      	str	r3, [r7, #20]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <vTaskPlaceOnEventListRestricted+0x54>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3318      	adds	r3, #24
 80092da:	4619      	mov	r1, r3
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7fe f8ca 	bl	8007476 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	68b8      	ldr	r0, [r7, #8]
 80092f2:	f000 fb4f 	bl	8009994 <prvAddCurrentTaskToDelayedList>
	}
 80092f6:	bf00      	nop
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	24009c44 	.word	0x24009c44

08009304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10a      	bne.n	8009330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	60fb      	str	r3, [r7, #12]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	3318      	adds	r3, #24
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe f8fb 	bl	8007530 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800933a:	4b1e      	ldr	r3, [pc, #120]	; (80093b4 <xTaskRemoveFromEventList+0xb0>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11d      	bne.n	800937e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3304      	adds	r3, #4
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe f8f2 	bl	8007530 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <xTaskRemoveFromEventList+0xb4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d903      	bls.n	8009360 <xTaskRemoveFromEventList+0x5c>
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <xTaskRemoveFromEventList+0xb4>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4a13      	ldr	r2, [pc, #76]	; (80093bc <xTaskRemoveFromEventList+0xb8>)
 800936e:	441a      	add	r2, r3
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	3304      	adds	r3, #4
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f7fe f87d 	bl	8007476 <vListInsertEnd>
 800937c:	e005      	b.n	800938a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3318      	adds	r3, #24
 8009382:	4619      	mov	r1, r3
 8009384:	480e      	ldr	r0, [pc, #56]	; (80093c0 <xTaskRemoveFromEventList+0xbc>)
 8009386:	f7fe f876 	bl	8007476 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <xTaskRemoveFromEventList+0xc0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	429a      	cmp	r2, r3
 8009396:	d905      	bls.n	80093a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <xTaskRemoveFromEventList+0xc4>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e001      	b.n	80093a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093a8:	697b      	ldr	r3, [r7, #20]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	2400a140 	.word	0x2400a140
 80093b8:	2400a120 	.word	0x2400a120
 80093bc:	24009c48 	.word	0x24009c48
 80093c0:	2400a0d8 	.word	0x2400a0d8
 80093c4:	24009c44 	.word	0x24009c44
 80093c8:	2400a12c 	.word	0x2400a12c

080093cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093d4:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <vTaskInternalSetTimeOutState+0x24>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093dc:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <vTaskInternalSetTimeOutState+0x28>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	605a      	str	r2, [r3, #4]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	2400a130 	.word	0x2400a130
 80093f4:	2400a11c 	.word	0x2400a11c

080093f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10a      	bne.n	800941e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	613b      	str	r3, [r7, #16]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	60fb      	str	r3, [r7, #12]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800943a:	f7fe f9d3 	bl	80077e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800943e:	4b1d      	ldr	r3, [pc, #116]	; (80094b4 <xTaskCheckForTimeOut+0xbc>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	69ba      	ldr	r2, [r7, #24]
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d102      	bne.n	800945e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	e023      	b.n	80094a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <xTaskCheckForTimeOut+0xc0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d007      	beq.n	800947a <xTaskCheckForTimeOut+0x82>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	e015      	b.n	80094a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	429a      	cmp	r2, r3
 8009482:	d20b      	bcs.n	800949c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	1ad2      	subs	r2, r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff ff9b 	bl	80093cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	61fb      	str	r3, [r7, #28]
 800949a:	e004      	b.n	80094a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094a6:	f7fe f9cd 	bl	8007844 <vPortExitCritical>

	return xReturn;
 80094aa:	69fb      	ldr	r3, [r7, #28]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	2400a11c 	.word	0x2400a11c
 80094b8:	2400a130 	.word	0x2400a130

080094bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094c0:	4b03      	ldr	r3, [pc, #12]	; (80094d0 <vTaskMissedYield+0x14>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
}
 80094c6:	bf00      	nop
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr
 80094d0:	2400a12c 	.word	0x2400a12c

080094d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094dc:	f000 f852 	bl	8009584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094e0:	4b06      	ldr	r3, [pc, #24]	; (80094fc <prvIdleTask+0x28>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d9f9      	bls.n	80094dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80094e8:	4b05      	ldr	r3, [pc, #20]	; (8009500 <prvIdleTask+0x2c>)
 80094ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ee:	601a      	str	r2, [r3, #0]
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094f8:	e7f0      	b.n	80094dc <prvIdleTask+0x8>
 80094fa:	bf00      	nop
 80094fc:	24009c48 	.word	0x24009c48
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800950a:	2300      	movs	r3, #0
 800950c:	607b      	str	r3, [r7, #4]
 800950e:	e00c      	b.n	800952a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	4613      	mov	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4a12      	ldr	r2, [pc, #72]	; (8009564 <prvInitialiseTaskLists+0x60>)
 800951c:	4413      	add	r3, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd ff7c 	bl	800741c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3301      	adds	r3, #1
 8009528:	607b      	str	r3, [r7, #4]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b37      	cmp	r3, #55	; 0x37
 800952e:	d9ef      	bls.n	8009510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009530:	480d      	ldr	r0, [pc, #52]	; (8009568 <prvInitialiseTaskLists+0x64>)
 8009532:	f7fd ff73 	bl	800741c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009536:	480d      	ldr	r0, [pc, #52]	; (800956c <prvInitialiseTaskLists+0x68>)
 8009538:	f7fd ff70 	bl	800741c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800953c:	480c      	ldr	r0, [pc, #48]	; (8009570 <prvInitialiseTaskLists+0x6c>)
 800953e:	f7fd ff6d 	bl	800741c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009542:	480c      	ldr	r0, [pc, #48]	; (8009574 <prvInitialiseTaskLists+0x70>)
 8009544:	f7fd ff6a 	bl	800741c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009548:	480b      	ldr	r0, [pc, #44]	; (8009578 <prvInitialiseTaskLists+0x74>)
 800954a:	f7fd ff67 	bl	800741c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800954e:	4b0b      	ldr	r3, [pc, #44]	; (800957c <prvInitialiseTaskLists+0x78>)
 8009550:	4a05      	ldr	r2, [pc, #20]	; (8009568 <prvInitialiseTaskLists+0x64>)
 8009552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <prvInitialiseTaskLists+0x7c>)
 8009556:	4a05      	ldr	r2, [pc, #20]	; (800956c <prvInitialiseTaskLists+0x68>)
 8009558:	601a      	str	r2, [r3, #0]
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	24009c48 	.word	0x24009c48
 8009568:	2400a0a8 	.word	0x2400a0a8
 800956c:	2400a0bc 	.word	0x2400a0bc
 8009570:	2400a0d8 	.word	0x2400a0d8
 8009574:	2400a0ec 	.word	0x2400a0ec
 8009578:	2400a104 	.word	0x2400a104
 800957c:	2400a0d0 	.word	0x2400a0d0
 8009580:	2400a0d4 	.word	0x2400a0d4

08009584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800958a:	e019      	b.n	80095c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800958c:	f7fe f92a 	bl	80077e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009590:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <prvCheckTasksWaitingTermination+0x50>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	4618      	mov	r0, r3
 800959e:	f7fd ffc7 	bl	8007530 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095a2:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <prvCheckTasksWaitingTermination+0x54>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	4a0b      	ldr	r2, [pc, #44]	; (80095d8 <prvCheckTasksWaitingTermination+0x54>)
 80095aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095ac:	4b0b      	ldr	r3, [pc, #44]	; (80095dc <prvCheckTasksWaitingTermination+0x58>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <prvCheckTasksWaitingTermination+0x58>)
 80095b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095b6:	f7fe f945 	bl	8007844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f810 	bl	80095e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c0:	4b06      	ldr	r3, [pc, #24]	; (80095dc <prvCheckTasksWaitingTermination+0x58>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e1      	bne.n	800958c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095c8:	bf00      	nop
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2400a0ec 	.word	0x2400a0ec
 80095d8:	2400a118 	.word	0x2400a118
 80095dc:	2400a100 	.word	0x2400a100

080095e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d108      	bne.n	8009604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fd fdf2 	bl	80071e0 <vPortFree>
				vPortFree( pxTCB );
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fd fdef 	bl	80071e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009602:	e018      	b.n	8009636 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800960a:	2b01      	cmp	r3, #1
 800960c:	d103      	bne.n	8009616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fd fde6 	bl	80071e0 <vPortFree>
	}
 8009614:	e00f      	b.n	8009636 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800961c:	2b02      	cmp	r3, #2
 800961e:	d00a      	beq.n	8009636 <prvDeleteTCB+0x56>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <prvDeleteTCB+0x54>
	}
 8009636:	bf00      	nop
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <prvResetNextTaskUnblockTime+0x38>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009650:	4b0a      	ldr	r3, [pc, #40]	; (800967c <prvResetNextTaskUnblockTime+0x3c>)
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009658:	e008      	b.n	800966c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800965a:	4b07      	ldr	r3, [pc, #28]	; (8009678 <prvResetNextTaskUnblockTime+0x38>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4a04      	ldr	r2, [pc, #16]	; (800967c <prvResetNextTaskUnblockTime+0x3c>)
 800966a:	6013      	str	r3, [r2, #0]
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	2400a0d0 	.word	0x2400a0d0
 800967c:	2400a138 	.word	0x2400a138

08009680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009686:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <xTaskGetSchedulerState+0x34>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d102      	bne.n	8009694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800968e:	2301      	movs	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
 8009692:	e008      	b.n	80096a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <xTaskGetSchedulerState+0x38>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800969c:	2302      	movs	r3, #2
 800969e:	607b      	str	r3, [r7, #4]
 80096a0:	e001      	b.n	80096a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096a6:	687b      	ldr	r3, [r7, #4]
	}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	2400a124 	.word	0x2400a124
 80096b8:	2400a140 	.word	0x2400a140

080096bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d051      	beq.n	8009776 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d6:	4b2a      	ldr	r3, [pc, #168]	; (8009780 <xTaskPriorityInherit+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	429a      	cmp	r2, r3
 80096de:	d241      	bcs.n	8009764 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	db06      	blt.n	80096f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	4b25      	ldr	r3, [pc, #148]	; (8009780 <xTaskPriorityInherit+0xc4>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6959      	ldr	r1, [r3, #20]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4a1f      	ldr	r2, [pc, #124]	; (8009784 <xTaskPriorityInherit+0xc8>)
 8009708:	4413      	add	r3, r2
 800970a:	4299      	cmp	r1, r3
 800970c:	d122      	bne.n	8009754 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	3304      	adds	r3, #4
 8009712:	4618      	mov	r0, r3
 8009714:	f7fd ff0c 	bl	8007530 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009718:	4b19      	ldr	r3, [pc, #100]	; (8009780 <xTaskPriorityInherit+0xc4>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009726:	4b18      	ldr	r3, [pc, #96]	; (8009788 <xTaskPriorityInherit+0xcc>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d903      	bls.n	8009736 <xTaskPriorityInherit+0x7a>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	4a15      	ldr	r2, [pc, #84]	; (8009788 <xTaskPriorityInherit+0xcc>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	4613      	mov	r3, r2
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4a10      	ldr	r2, [pc, #64]	; (8009784 <xTaskPriorityInherit+0xc8>)
 8009744:	441a      	add	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	3304      	adds	r3, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f7fd fe92 	bl	8007476 <vListInsertEnd>
 8009752:	e004      	b.n	800975e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <xTaskPriorityInherit+0xc4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800975e:	2301      	movs	r3, #1
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e008      	b.n	8009776 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <xTaskPriorityInherit+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	429a      	cmp	r2, r3
 8009770:	d201      	bcs.n	8009776 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009776:	68fb      	ldr	r3, [r7, #12]
	}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	24009c44 	.word	0x24009c44
 8009784:	24009c48 	.word	0x24009c48
 8009788:	2400a120 	.word	0x2400a120

0800978c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009798:	2300      	movs	r3, #0
 800979a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d056      	beq.n	8009850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097a2:	4b2e      	ldr	r3, [pc, #184]	; (800985c <xTaskPriorityDisinherit+0xd0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d00a      	beq.n	80097c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	60bb      	str	r3, [r7, #8]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e4:	1e5a      	subs	r2, r3, #1
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d02c      	beq.n	8009850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d128      	bne.n	8009850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	3304      	adds	r3, #4
 8009802:	4618      	mov	r0, r3
 8009804:	f7fd fe94 	bl	8007530 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <xTaskPriorityDisinherit+0xd4>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	429a      	cmp	r2, r3
 8009826:	d903      	bls.n	8009830 <xTaskPriorityDisinherit+0xa4>
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4a0c      	ldr	r2, [pc, #48]	; (8009860 <xTaskPriorityDisinherit+0xd4>)
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4a09      	ldr	r2, [pc, #36]	; (8009864 <xTaskPriorityDisinherit+0xd8>)
 800983e:	441a      	add	r2, r3
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fd fe15 	bl	8007476 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009850:	697b      	ldr	r3, [r7, #20]
	}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	24009c44 	.word	0x24009c44
 8009860:	2400a120 	.word	0x2400a120
 8009864:	24009c48 	.word	0x24009c48

08009868 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009876:	2301      	movs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d06a      	beq.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60fb      	str	r3, [r7, #12]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d902      	bls.n	80098ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	e002      	b.n	80098b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d04b      	beq.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d146      	bne.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	69ba      	ldr	r2, [r7, #24]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d10a      	bne.n	80098e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	db04      	blt.n	8009906 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	6959      	ldr	r1, [r3, #20]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4a13      	ldr	r2, [pc, #76]	; (8009964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009916:	4413      	add	r3, r2
 8009918:	4299      	cmp	r1, r3
 800991a:	d11c      	bne.n	8009956 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	3304      	adds	r3, #4
 8009920:	4618      	mov	r0, r3
 8009922:	f7fd fe05 	bl	8007530 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800992a:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	429a      	cmp	r2, r3
 8009930:	d903      	bls.n	800993a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	4a0c      	ldr	r2, [pc, #48]	; (8009968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4a07      	ldr	r2, [pc, #28]	; (8009964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009948:	441a      	add	r2, r3
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	3304      	adds	r3, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fd fd90 	bl	8007476 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009956:	bf00      	nop
 8009958:	3720      	adds	r7, #32
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	24009c44 	.word	0x24009c44
 8009964:	24009c48 	.word	0x24009c48
 8009968:	2400a120 	.word	0x2400a120

0800996c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <pvTaskIncrementMutexHeldCount+0x24>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d004      	beq.n	8009982 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <pvTaskIncrementMutexHeldCount+0x24>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800997e:	3201      	adds	r2, #1
 8009980:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009982:	4b03      	ldr	r3, [pc, #12]	; (8009990 <pvTaskIncrementMutexHeldCount+0x24>)
 8009984:	681b      	ldr	r3, [r3, #0]
	}
 8009986:	4618      	mov	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	24009c44 	.word	0x24009c44

08009994 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800999e:	4b21      	ldr	r3, [pc, #132]	; (8009a24 <prvAddCurrentTaskToDelayedList+0x90>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099a4:	4b20      	ldr	r3, [pc, #128]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fd fdc0 	bl	8007530 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d10a      	bne.n	80099ce <prvAddCurrentTaskToDelayedList+0x3a>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d007      	beq.n	80099ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099be:	4b1a      	ldr	r3, [pc, #104]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4819      	ldr	r0, [pc, #100]	; (8009a2c <prvAddCurrentTaskToDelayedList+0x98>)
 80099c8:	f7fd fd55 	bl	8007476 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80099cc:	e026      	b.n	8009a1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4413      	add	r3, r2
 80099d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d209      	bcs.n	80099fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099e6:	4b12      	ldr	r3, [pc, #72]	; (8009a30 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	4b0f      	ldr	r3, [pc, #60]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3304      	adds	r3, #4
 80099f0:	4619      	mov	r1, r3
 80099f2:	4610      	mov	r0, r2
 80099f4:	f7fd fd63 	bl	80074be <vListInsert>
}
 80099f8:	e010      	b.n	8009a1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099fa:	4b0e      	ldr	r3, [pc, #56]	; (8009a34 <prvAddCurrentTaskToDelayedList+0xa0>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	4610      	mov	r0, r2
 8009a08:	f7fd fd59 	bl	80074be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a0c:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d202      	bcs.n	8009a1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a16:	4a08      	ldr	r2, [pc, #32]	; (8009a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	6013      	str	r3, [r2, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	2400a11c 	.word	0x2400a11c
 8009a28:	24009c44 	.word	0x24009c44
 8009a2c:	2400a104 	.word	0x2400a104
 8009a30:	2400a0d4 	.word	0x2400a0d4
 8009a34:	2400a0d0 	.word	0x2400a0d0
 8009a38:	2400a138 	.word	0x2400a138

08009a3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08a      	sub	sp, #40	; 0x28
 8009a40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009a46:	f000 fb07 	bl	800a058 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a4a:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <xTimerCreateTimerTask+0x80>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d021      	beq.n	8009a96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a5a:	1d3a      	adds	r2, r7, #4
 8009a5c:	f107 0108 	add.w	r1, r7, #8
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7fd fad5 	bl	8007014 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	9202      	str	r2, [sp, #8]
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	2302      	movs	r3, #2
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	2300      	movs	r3, #0
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	4910      	ldr	r1, [pc, #64]	; (8009ac0 <xTimerCreateTimerTask+0x84>)
 8009a7e:	4811      	ldr	r0, [pc, #68]	; (8009ac4 <xTimerCreateTimerTask+0x88>)
 8009a80:	f7fe ffe0 	bl	8008a44 <xTaskCreateStatic>
 8009a84:	4603      	mov	r3, r0
 8009a86:	4a10      	ldr	r2, [pc, #64]	; (8009ac8 <xTimerCreateTimerTask+0x8c>)
 8009a88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <xTimerCreateTimerTask+0x8c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a92:	2301      	movs	r3, #1
 8009a94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	613b      	str	r3, [r7, #16]
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ab2:	697b      	ldr	r3, [r7, #20]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	2400a174 	.word	0x2400a174
 8009ac0:	0802506c 	.word	0x0802506c
 8009ac4:	08009c01 	.word	0x08009c01
 8009ac8:	2400a178 	.word	0x2400a178

08009acc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	623b      	str	r3, [r7, #32]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009afa:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <xTimerGenericCommand+0x98>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d02a      	beq.n	8009b58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b05      	cmp	r3, #5
 8009b12:	dc18      	bgt.n	8009b46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b14:	f7ff fdb4 	bl	8009680 <xTaskGetSchedulerState>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d109      	bne.n	8009b32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b1e:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <xTimerGenericCommand+0x98>)
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f107 0110 	add.w	r1, r7, #16
 8009b26:	2300      	movs	r3, #0
 8009b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2a:	f7fe f925 	bl	8007d78 <xQueueGenericSend>
 8009b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8009b30:	e012      	b.n	8009b58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b32:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <xTimerGenericCommand+0x98>)
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f107 0110 	add.w	r1, r7, #16
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f7fe f91b 	bl	8007d78 <xQueueGenericSend>
 8009b42:	6278      	str	r0, [r7, #36]	; 0x24
 8009b44:	e008      	b.n	8009b58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b46:	4b07      	ldr	r3, [pc, #28]	; (8009b64 <xTimerGenericCommand+0x98>)
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f107 0110 	add.w	r1, r7, #16
 8009b4e:	2300      	movs	r3, #0
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	f7fe fa0f 	bl	8007f74 <xQueueGenericSendFromISR>
 8009b56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3728      	adds	r7, #40	; 0x28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	2400a174 	.word	0x2400a174

08009b68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b72:	4b22      	ldr	r3, [pc, #136]	; (8009bfc <prvProcessExpiredTimer+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fd fcd5 	bl	8007530 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d022      	beq.n	8009bda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	699a      	ldr	r2, [r3, #24]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	18d1      	adds	r1, r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	6978      	ldr	r0, [r7, #20]
 8009ba2:	f000 f8d1 	bl	8009d48 <prvInsertTimerInActiveList>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01f      	beq.n	8009bec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6978      	ldr	r0, [r7, #20]
 8009bb8:	f7ff ff88 	bl	8009acc <xTimerGenericCommand>
 8009bbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d113      	bne.n	8009bec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	6978      	ldr	r0, [r7, #20]
 8009bf2:	4798      	blx	r3
}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	2400a16c 	.word	0x2400a16c

08009c00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c08:	f107 0308 	add.w	r3, r7, #8
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f857 	bl	8009cc0 <prvGetNextExpireTime>
 8009c12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4619      	mov	r1, r3
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 f803 	bl	8009c24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c1e:	f000 f8d5 	bl	8009dcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c22:	e7f1      	b.n	8009c08 <prvTimerTask+0x8>

08009c24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c2e:	f7ff f945 	bl	8008ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 f866 	bl	8009d08 <prvSampleTimeNow>
 8009c3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d130      	bne.n	8009ca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <prvProcessTimerOrBlockTask+0x3c>
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d806      	bhi.n	8009c60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c52:	f7ff f941 	bl	8008ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ff85 	bl	8009b68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c5e:	e024      	b.n	8009caa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <prvProcessTimerOrBlockTask+0x90>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <prvProcessTimerOrBlockTask+0x50>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <prvProcessTimerOrBlockTask+0x52>
 8009c74:	2300      	movs	r3, #0
 8009c76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <prvProcessTimerOrBlockTask+0x94>)
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4619      	mov	r1, r3
 8009c86:	f7fe fea9 	bl	80089dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c8a:	f7ff f925 	bl	8008ed8 <xTaskResumeAll>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c94:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <prvProcessTimerOrBlockTask+0x98>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
}
 8009ca4:	e001      	b.n	8009caa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ca6:	f7ff f917 	bl	8008ed8 <xTaskResumeAll>
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	2400a170 	.word	0x2400a170
 8009cb8:	2400a174 	.word	0x2400a174
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <prvGetNextExpireTime+0x44>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d101      	bne.n	8009cd6 <prvGetNextExpireTime+0x16>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	e000      	b.n	8009cd8 <prvGetNextExpireTime+0x18>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d105      	bne.n	8009cf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce4:	4b07      	ldr	r3, [pc, #28]	; (8009d04 <prvGetNextExpireTime+0x44>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	e001      	b.n	8009cf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	2400a16c 	.word	0x2400a16c

08009d08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d10:	f7ff f980 	bl	8009014 <xTaskGetTickCount>
 8009d14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <prvSampleTimeNow+0x3c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d205      	bcs.n	8009d2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d20:	f000 f936 	bl	8009f90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d32:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <prvSampleTimeNow+0x3c>)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	2400a17c 	.word	0x2400a17c

08009d48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
 8009d54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d812      	bhi.n	8009d94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d302      	bcc.n	8009d82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e01b      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d82:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <prvInsertTimerInActiveList+0x7c>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7fd fb96 	bl	80074be <vListInsert>
 8009d92:	e012      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d206      	bcs.n	8009daa <prvInsertTimerInActiveList+0x62>
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d302      	bcc.n	8009daa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009da4:	2301      	movs	r3, #1
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	e007      	b.n	8009dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009daa:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <prvInsertTimerInActiveList+0x80>)
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f7fd fb82 	bl	80074be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dba:	697b      	ldr	r3, [r7, #20]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	2400a170 	.word	0x2400a170
 8009dc8:	2400a16c 	.word	0x2400a16c

08009dcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b08e      	sub	sp, #56	; 0x38
 8009dd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dd2:	e0ca      	b.n	8009f6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da18      	bge.n	8009e0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dda:	1d3b      	adds	r3, r7, #4
 8009ddc:	3304      	adds	r3, #4
 8009dde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	61fb      	str	r3, [r7, #28]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e02:	6850      	ldr	r0, [r2, #4]
 8009e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e06:	6892      	ldr	r2, [r2, #8]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f2c0 80aa 	blt.w	8009f68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d004      	beq.n	8009e2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	3304      	adds	r3, #4
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fd fb83 	bl	8007530 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e2a:	463b      	mov	r3, r7
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ff6b 	bl	8009d08 <prvSampleTimeNow>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b09      	cmp	r3, #9
 8009e38:	f200 8097 	bhi.w	8009f6a <prvProcessReceivedCommands+0x19e>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <prvProcessReceivedCommands+0x78>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009e6d 	.word	0x08009e6d
 8009e48:	08009e6d 	.word	0x08009e6d
 8009e4c:	08009e6d 	.word	0x08009e6d
 8009e50:	08009ee1 	.word	0x08009ee1
 8009e54:	08009ef5 	.word	0x08009ef5
 8009e58:	08009f3f 	.word	0x08009f3f
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e6d 	.word	0x08009e6d
 8009e64:	08009ee1 	.word	0x08009ee1
 8009e68:	08009ef5 	.word	0x08009ef5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	18d1      	adds	r1, r2, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e8c:	f7ff ff5c 	bl	8009d48 <prvInsertTimerInActiveList>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d069      	beq.n	8009f6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d05e      	beq.n	8009f6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	441a      	add	r2, r3
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ebe:	f7ff fe05 	bl	8009acc <xTimerGenericCommand>
 8009ec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ec4:	6a3b      	ldr	r3, [r7, #32]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d14f      	bne.n	8009f6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61bb      	str	r3, [r7, #24]
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ef2:	e03a      	b.n	8009f6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	617b      	str	r3, [r7, #20]
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	18d1      	adds	r1, r2, r3
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f38:	f7ff ff06 	bl	8009d48 <prvInsertTimerInActiveList>
					break;
 8009f3c:	e015      	b.n	8009f6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d103      	bne.n	8009f54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f4e:	f7fd f947 	bl	80071e0 <vPortFree>
 8009f52:	e00a      	b.n	8009f6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5a:	f023 0301 	bic.w	r3, r3, #1
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f66:	e000      	b.n	8009f6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f6a:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <prvProcessReceivedCommands+0x1c0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	1d39      	adds	r1, r7, #4
 8009f70:	2200      	movs	r2, #0
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe f926 	bl	80081c4 <xQueueReceive>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f47f af2a 	bne.w	8009dd4 <prvProcessReceivedCommands+0x8>
	}
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	3730      	adds	r7, #48	; 0x30
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	2400a174 	.word	0x2400a174

08009f90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f96:	e048      	b.n	800a02a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f98:	4b2d      	ldr	r3, [pc, #180]	; (800a050 <prvSwitchTimerLists+0xc0>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa2:	4b2b      	ldr	r3, [pc, #172]	; (800a050 <prvSwitchTimerLists+0xc0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fd fabd 	bl	8007530 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc4:	f003 0304 	and.w	r3, r3, #4
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d02e      	beq.n	800a02a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d90e      	bls.n	8009ffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fea:	4b19      	ldr	r3, [pc, #100]	; (800a050 <prvSwitchTimerLists+0xc0>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	f7fd fa62 	bl	80074be <vListInsert>
 8009ffa:	e016      	b.n	800a02a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	693a      	ldr	r2, [r7, #16]
 800a004:	2100      	movs	r1, #0
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7ff fd60 	bl	8009acc <xTimerGenericCommand>
 800a00c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	603b      	str	r3, [r7, #0]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a02a:	4b09      	ldr	r3, [pc, #36]	; (800a050 <prvSwitchTimerLists+0xc0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1b1      	bne.n	8009f98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a034:	4b06      	ldr	r3, [pc, #24]	; (800a050 <prvSwitchTimerLists+0xc0>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <prvSwitchTimerLists+0xc4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a04      	ldr	r2, [pc, #16]	; (800a050 <prvSwitchTimerLists+0xc0>)
 800a040:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a042:	4a04      	ldr	r2, [pc, #16]	; (800a054 <prvSwitchTimerLists+0xc4>)
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	6013      	str	r3, [r2, #0]
}
 800a048:	bf00      	nop
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	2400a16c 	.word	0x2400a16c
 800a054:	2400a170 	.word	0x2400a170

0800a058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a05e:	f7fd fbc1 	bl	80077e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <prvCheckForValidListAndQueue+0x60>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d120      	bne.n	800a0ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a06a:	4814      	ldr	r0, [pc, #80]	; (800a0bc <prvCheckForValidListAndQueue+0x64>)
 800a06c:	f7fd f9d6 	bl	800741c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a070:	4813      	ldr	r0, [pc, #76]	; (800a0c0 <prvCheckForValidListAndQueue+0x68>)
 800a072:	f7fd f9d3 	bl	800741c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a076:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <prvCheckForValidListAndQueue+0x6c>)
 800a078:	4a10      	ldr	r2, [pc, #64]	; (800a0bc <prvCheckForValidListAndQueue+0x64>)
 800a07a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a07c:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <prvCheckForValidListAndQueue+0x70>)
 800a07e:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <prvCheckForValidListAndQueue+0x68>)
 800a080:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a082:	2300      	movs	r3, #0
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <prvCheckForValidListAndQueue+0x74>)
 800a088:	4a11      	ldr	r2, [pc, #68]	; (800a0d0 <prvCheckForValidListAndQueue+0x78>)
 800a08a:	2110      	movs	r1, #16
 800a08c:	200a      	movs	r0, #10
 800a08e:	f7fd fd33 	bl	8007af8 <xQueueGenericCreateStatic>
 800a092:	4603      	mov	r3, r0
 800a094:	4a08      	ldr	r2, [pc, #32]	; (800a0b8 <prvCheckForValidListAndQueue+0x60>)
 800a096:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a098:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <prvCheckForValidListAndQueue+0x60>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0a0:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <prvCheckForValidListAndQueue+0x60>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	490b      	ldr	r1, [pc, #44]	; (800a0d4 <prvCheckForValidListAndQueue+0x7c>)
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fc44 	bl	8008934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0ac:	f7fd fbca 	bl	8007844 <vPortExitCritical>
}
 800a0b0:	bf00      	nop
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	2400a174 	.word	0x2400a174
 800a0bc:	2400a144 	.word	0x2400a144
 800a0c0:	2400a158 	.word	0x2400a158
 800a0c4:	2400a16c 	.word	0x2400a16c
 800a0c8:	2400a170 	.word	0x2400a170
 800a0cc:	2400a220 	.word	0x2400a220
 800a0d0:	2400a180 	.word	0x2400a180
 800a0d4:	08025074 	.word	0x08025074

0800a0d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a0dc:	4b3f      	ldr	r3, [pc, #252]	; (800a1dc <SystemInit+0x104>)
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	4a3e      	ldr	r2, [pc, #248]	; (800a1dc <SystemInit+0x104>)
 800a0e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a0ec:	4b3b      	ldr	r3, [pc, #236]	; (800a1dc <SystemInit+0x104>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4a3a      	ldr	r2, [pc, #232]	; (800a1dc <SystemInit+0x104>)
 800a0f2:	f043 0310 	orr.w	r3, r3, #16
 800a0f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a0f8:	4b39      	ldr	r3, [pc, #228]	; (800a1e0 <SystemInit+0x108>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	2b06      	cmp	r3, #6
 800a102:	d807      	bhi.n	800a114 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a104:	4b36      	ldr	r3, [pc, #216]	; (800a1e0 <SystemInit+0x108>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f023 030f 	bic.w	r3, r3, #15
 800a10c:	4a34      	ldr	r2, [pc, #208]	; (800a1e0 <SystemInit+0x108>)
 800a10e:	f043 0307 	orr.w	r3, r3, #7
 800a112:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a114:	4b33      	ldr	r3, [pc, #204]	; (800a1e4 <SystemInit+0x10c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a32      	ldr	r2, [pc, #200]	; (800a1e4 <SystemInit+0x10c>)
 800a11a:	f043 0301 	orr.w	r3, r3, #1
 800a11e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a120:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <SystemInit+0x10c>)
 800a122:	2200      	movs	r2, #0
 800a124:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a126:	4b2f      	ldr	r3, [pc, #188]	; (800a1e4 <SystemInit+0x10c>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	492e      	ldr	r1, [pc, #184]	; (800a1e4 <SystemInit+0x10c>)
 800a12c:	4b2e      	ldr	r3, [pc, #184]	; (800a1e8 <SystemInit+0x110>)
 800a12e:	4013      	ands	r3, r2
 800a130:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a132:	4b2b      	ldr	r3, [pc, #172]	; (800a1e0 <SystemInit+0x108>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0308 	and.w	r3, r3, #8
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a13e:	4b28      	ldr	r3, [pc, #160]	; (800a1e0 <SystemInit+0x108>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f023 030f 	bic.w	r3, r3, #15
 800a146:	4a26      	ldr	r2, [pc, #152]	; (800a1e0 <SystemInit+0x108>)
 800a148:	f043 0307 	orr.w	r3, r3, #7
 800a14c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a14e:	4b25      	ldr	r3, [pc, #148]	; (800a1e4 <SystemInit+0x10c>)
 800a150:	2200      	movs	r2, #0
 800a152:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a154:	4b23      	ldr	r3, [pc, #140]	; (800a1e4 <SystemInit+0x10c>)
 800a156:	2200      	movs	r2, #0
 800a158:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a15a:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <SystemInit+0x10c>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a160:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <SystemInit+0x10c>)
 800a162:	4a22      	ldr	r2, [pc, #136]	; (800a1ec <SystemInit+0x114>)
 800a164:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a166:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <SystemInit+0x10c>)
 800a168:	4a21      	ldr	r2, [pc, #132]	; (800a1f0 <SystemInit+0x118>)
 800a16a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a16c:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <SystemInit+0x10c>)
 800a16e:	4a21      	ldr	r2, [pc, #132]	; (800a1f4 <SystemInit+0x11c>)
 800a170:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <SystemInit+0x10c>)
 800a174:	2200      	movs	r2, #0
 800a176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <SystemInit+0x10c>)
 800a17a:	4a1e      	ldr	r2, [pc, #120]	; (800a1f4 <SystemInit+0x11c>)
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a17e:	4b19      	ldr	r3, [pc, #100]	; (800a1e4 <SystemInit+0x10c>)
 800a180:	2200      	movs	r2, #0
 800a182:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a184:	4b17      	ldr	r3, [pc, #92]	; (800a1e4 <SystemInit+0x10c>)
 800a186:	4a1b      	ldr	r2, [pc, #108]	; (800a1f4 <SystemInit+0x11c>)
 800a188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a18a:	4b16      	ldr	r3, [pc, #88]	; (800a1e4 <SystemInit+0x10c>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a190:	4b14      	ldr	r3, [pc, #80]	; (800a1e4 <SystemInit+0x10c>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a13      	ldr	r2, [pc, #76]	; (800a1e4 <SystemInit+0x10c>)
 800a196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a19a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a19c:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <SystemInit+0x10c>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a1a2:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <SystemInit+0x120>)
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	4a14      	ldr	r2, [pc, #80]	; (800a1f8 <SystemInit+0x120>)
 800a1a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a1ae:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <SystemInit+0x124>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	4b13      	ldr	r3, [pc, #76]	; (800a200 <SystemInit+0x128>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ba:	d202      	bcs.n	800a1c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a1bc:	4b11      	ldr	r3, [pc, #68]	; (800a204 <SystemInit+0x12c>)
 800a1be:	2201      	movs	r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <SystemInit+0x130>)
 800a1c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a1ca:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <SystemInit+0x104>)
 800a1cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	e000ed00 	.word	0xe000ed00
 800a1e0:	52002000 	.word	0x52002000
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	eaf6ed7f 	.word	0xeaf6ed7f
 800a1ec:	02020200 	.word	0x02020200
 800a1f0:	01ff0000 	.word	0x01ff0000
 800a1f4:	01010280 	.word	0x01010280
 800a1f8:	580000c0 	.word	0x580000c0
 800a1fc:	5c001000 	.word	0x5c001000
 800a200:	ffff0000 	.word	0xffff0000
 800a204:	51008108 	.word	0x51008108
 800a208:	52004000 	.word	0x52004000

0800a20c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d103      	bne.n	800a224 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	e02c      	b.n	800a27e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	891a      	ldrh	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	695a      	ldr	r2, [r3, #20]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <FT5336_RegisterBusIO+0x7c>)
 800a258:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a0b      	ldr	r2, [pc, #44]	; (800a28c <FT5336_RegisterBusIO+0x80>)
 800a25e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	e002      	b.n	800a27e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a278:	f04f 33ff 	mov.w	r3, #4294967295
 800a27c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a27e:	68fb      	ldr	r3, [r7, #12]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	0800a685 	.word	0x0800a685
 800a28c:	0800a6b9 	.word	0x0800a6b9

0800a290 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2201      	movs	r2, #1
 800a29e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2205      	movs	r2, #5
 800a2aa:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a2b2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a2ba:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10d      	bne.n	800a2fc <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f987 	bl	800a5fa <FT5336_DisableIT>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a308:	68fb      	ldr	r3, [r7, #12]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a312:	b480      	push	{r7}
 800a314:	b085      	sub	sp, #20
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a324:	2b01      	cmp	r3, #1
 800a326:	d103      	bne.n	800a330 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a330:	68fb      	ldr	r3, [r7, #12]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
 800a346:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 0218 	add.w	r2, r3, #24
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f000 fa25 	bl	800a7a6 <ft5336_radian_value>
 800a35c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f103 0218 	add.w	r2, r3, #24
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	4619      	mov	r1, r3
 800a36c:	4610      	mov	r0, r2
 800a36e:	f000 fa2b 	bl	800a7c8 <ft5336_offset_left_right>
 800a372:	4602      	mov	r2, r0
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f103 0218 	add.w	r2, r3, #24
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f000 fa2e 	bl	800a7ea <ft5336_offset_up_down>
 800a38e:	4602      	mov	r2, r0
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4413      	add	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f103 0218 	add.w	r2, r3, #24
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f000 fa31 	bl	800a80c <ft5336_disatnce_left_right>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f103 0218 	add.w	r2, r3, #24
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	f000 fa34 	bl	800a82e <ft5336_distance_up_down>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f103 0218 	add.w	r2, r3, #24
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f000 fa37 	bl	800a850 <ft5336_distance_zoom>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3318      	adds	r3, #24
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	f000 fa3f 	bl	800a894 <ft5336_chip_id>
 800a416:	4603      	mov	r3, r0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f908 	bl	800a644 <FT5336_DetectTouch>
 800a434:	4603      	mov	r3, r0
 800a436:	461a      	mov	r2, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f103 0018 	add.w	r0, r3, #24
 800a442:	f107 0208 	add.w	r2, r7, #8
 800a446:	2304      	movs	r3, #4
 800a448:	2103      	movs	r1, #3
 800a44a:	f000 f94f 	bl	800a6ec <ft5336_read_reg>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a454:	f04f 33ff 	mov.w	r3, #4294967295
 800a458:	60fb      	str	r3, [r7, #12]
 800a45a:	e00f      	b.n	800a47c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a45c:	7a3b      	ldrb	r3, [r7, #8]
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a464:	7a7a      	ldrb	r2, [r7, #9]
 800a466:	431a      	orrs	r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a46c:	7abb      	ldrb	r3, [r7, #10]
 800a46e:	021b      	lsls	r3, r3, #8
 800a470:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a474:	7afa      	ldrb	r2, [r7, #11]
 800a476:	431a      	orrs	r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a47c:	68fb      	ldr	r3, [r7, #12]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b08c      	sub	sp, #48	; 0x30
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f8d5 	bl	800a644 <FT5336_DetectTouch>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f103 0018 	add.w	r0, r3, #24
 800a4a8:	f107 0208 	add.w	r2, r7, #8
 800a4ac:	231e      	movs	r3, #30
 800a4ae:	2103      	movs	r1, #3
 800a4b0:	f000 f91c 	bl	800a6ec <ft5336_read_reg>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a4ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c0:	e077      	b.n	800a5b2 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4c6:	e071      	b.n	800a5ac <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a4c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	3330      	adds	r3, #48	; 0x30
 800a4d4:	443b      	add	r3, r7
 800a4d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	005b      	lsls	r3, r3, #1
 800a4e6:	4413      	add	r3, r2
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	3330      	adds	r3, #48	; 0x30
 800a4ee:	443b      	add	r3, r7
 800a4f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a4f4:	ea41 0203 	orr.w	r2, r1, r3
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	440b      	add	r3, r1
 800a500:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a504:	4613      	mov	r3, r2
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4413      	add	r3, r2
 800a50a:	005b      	lsls	r3, r3, #1
 800a50c:	3302      	adds	r3, #2
 800a50e:	3330      	adds	r3, #48	; 0x30
 800a510:	443b      	add	r3, r7
 800a512:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a51e:	4613      	mov	r3, r2
 800a520:	005b      	lsls	r3, r3, #1
 800a522:	4413      	add	r3, r2
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	3303      	adds	r3, #3
 800a528:	3330      	adds	r3, #48	; 0x30
 800a52a:	443b      	add	r3, r7
 800a52c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a530:	4319      	orrs	r1, r3
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a536:	3206      	adds	r2, #6
 800a538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53e:	4613      	mov	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4413      	add	r3, r2
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	3330      	adds	r3, #48	; 0x30
 800a548:	443b      	add	r3, r7
 800a54a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a54e:	099b      	lsrs	r3, r3, #6
 800a550:	b2db      	uxtb	r3, r3
 800a552:	4619      	mov	r1, r3
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a558:	3210      	adds	r2, #16
 800a55a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a55e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a560:	4613      	mov	r3, r2
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	4413      	add	r3, r2
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	3304      	adds	r3, #4
 800a56a:	3330      	adds	r3, #48	; 0x30
 800a56c:	443b      	add	r3, r7
 800a56e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a572:	4619      	mov	r1, r3
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	330a      	adds	r3, #10
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a582:	4613      	mov	r3, r2
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	3305      	adds	r3, #5
 800a58c:	3330      	adds	r3, #48	; 0x30
 800a58e:	443b      	add	r3, r7
 800a590:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a594:	091b      	lsrs	r3, r3, #4
 800a596:	b2db      	uxtb	r3, r3
 800a598:	4619      	mov	r1, r3
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59e:	3314      	adds	r3, #20
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d98a      	bls.n	800a4c8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3730      	adds	r7, #48	; 0x30
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3318      	adds	r3, #24
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 f8bb 	bl	800a748 <ft5336_gest_id>
 800a5d2:	4603      	mov	r3, r0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3318      	adds	r3, #24
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 f941 	bl	800a872 <ft5336_g_mode>
 800a5f0:	4603      	mov	r3, r0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3318      	adds	r3, #24
 800a606:	2100      	movs	r1, #0
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f932 	bl	800a872 <ft5336_g_mode>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	3318      	adds	r3, #24
 800a650:	f107 020b 	add.w	r2, r7, #11
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f000 f886 	bl	800a768 <ft5336_td_status>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a662:	f04f 33ff 	mov.w	r3, #4294967295
 800a666:	60fb      	str	r3, [r7, #12]
 800a668:	e007      	b.n	800a67a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	2b05      	cmp	r3, #5
 800a66e:	d902      	bls.n	800a676 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e001      	b.n	800a67a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a676:	7afb      	ldrb	r3, [r7, #11]
 800a678:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a67a:	68fb      	ldr	r3, [r7, #12]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a684:	b590      	push	{r4, r7, lr}
 800a686:	b087      	sub	sp, #28
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	461a      	mov	r2, r3
 800a690:	460b      	mov	r3, r1
 800a692:	72fb      	strb	r3, [r7, #11]
 800a694:	4613      	mov	r3, r2
 800a696:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	691c      	ldr	r4, [r3, #16]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	8918      	ldrh	r0, [r3, #8]
 800a6a4:	7afb      	ldrb	r3, [r7, #11]
 800a6a6:	b299      	uxth	r1, r3
 800a6a8:	893b      	ldrh	r3, [r7, #8]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	47a0      	blx	r4
 800a6ae:	4603      	mov	r3, r0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	371c      	adds	r7, #28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd90      	pop	{r4, r7, pc}

0800a6b8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a6b8:	b590      	push	{r4, r7, lr}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	72fb      	strb	r3, [r7, #11]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	68dc      	ldr	r4, [r3, #12]
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	8918      	ldrh	r0, [r3, #8]
 800a6d8:	7afb      	ldrb	r3, [r7, #11]
 800a6da:	b299      	uxth	r1, r3
 800a6dc:	893b      	ldrh	r3, [r7, #8]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	47a0      	blx	r4
 800a6e2:	4603      	mov	r3, r0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd90      	pop	{r4, r7, pc}

0800a6ec <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	72fb      	strb	r3, [r7, #11]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685c      	ldr	r4, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6898      	ldr	r0, [r3, #8]
 800a708:	893b      	ldrh	r3, [r7, #8]
 800a70a:	7af9      	ldrb	r1, [r7, #11]
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	47a0      	blx	r4
 800a710:	4603      	mov	r3, r0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	bd90      	pop	{r4, r7, pc}

0800a71a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800a71a:	b590      	push	{r4, r7, lr}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	461a      	mov	r2, r3
 800a726:	460b      	mov	r3, r1
 800a728:	72fb      	strb	r3, [r7, #11]
 800a72a:	4613      	mov	r3, r2
 800a72c:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681c      	ldr	r4, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6898      	ldr	r0, [r3, #8]
 800a736:	893b      	ldrh	r3, [r7, #8]
 800a738:	7af9      	ldrb	r1, [r7, #11]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	47a0      	blx	r4
 800a73e:	4603      	mov	r3, r0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3714      	adds	r7, #20
 800a744:	46bd      	mov	sp, r7
 800a746:	bd90      	pop	{r4, r7, pc}

0800a748 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800a752:	2301      	movs	r3, #1
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	2101      	movs	r1, #1
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ffc7 	bl	800a6ec <ft5336_read_reg>
 800a75e:	4603      	mov	r3, r0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800a772:	2301      	movs	r3, #1
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	2102      	movs	r1, #2
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff ffb7 	bl	800a6ec <ft5336_read_reg>
 800a77e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a79c:	68fb      	ldr	r3, [r7, #12]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800a7b2:	1cfa      	adds	r2, r7, #3
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	2191      	movs	r1, #145	; 0x91
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff ffae 	bl	800a71a <ft5336_write_reg>
 800a7be:	4603      	mov	r3, r0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800a7d4:	1cfa      	adds	r2, r7, #3
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	2192      	movs	r1, #146	; 0x92
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff ff9d 	bl	800a71a <ft5336_write_reg>
 800a7e0:	4603      	mov	r3, r0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800a7f6:	1cfa      	adds	r2, r7, #3
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	2193      	movs	r1, #147	; 0x93
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff ff8c 	bl	800a71a <ft5336_write_reg>
 800a802:	4603      	mov	r3, r0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800a818:	1cfa      	adds	r2, r7, #3
 800a81a:	2301      	movs	r3, #1
 800a81c:	2194      	movs	r1, #148	; 0x94
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7ff ff7b 	bl	800a71a <ft5336_write_reg>
 800a824:	4603      	mov	r3, r0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800a83a:	1cfa      	adds	r2, r7, #3
 800a83c:	2301      	movs	r3, #1
 800a83e:	2195      	movs	r1, #149	; 0x95
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff ff6a 	bl	800a71a <ft5336_write_reg>
 800a846:	4603      	mov	r3, r0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800a85c:	1cfa      	adds	r2, r7, #3
 800a85e:	2301      	movs	r3, #1
 800a860:	2196      	movs	r1, #150	; 0x96
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7ff ff59 	bl	800a71a <ft5336_write_reg>
 800a868:	4603      	mov	r3, r0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800a87e:	1cfa      	adds	r2, r7, #3
 800a880:	2301      	movs	r3, #1
 800a882:	21a4      	movs	r1, #164	; 0xa4
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff48 	bl	800a71a <ft5336_write_reg>
 800a88a:	4603      	mov	r3, r0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800a89e:	2301      	movs	r3, #1
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	21a8      	movs	r1, #168	; 0xa8
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff21 	bl	800a6ec <ft5336_read_reg>
 800a8aa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d107      	bne.n	800a8c2 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8da:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a8e2:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8ea:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a904:	fbb2 f2f3 	udiv	r2, r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b090      	sub	sp, #64	; 0x40
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	2b03      	cmp	r3, #3
 800a92a:	d102      	bne.n	800a932 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800a92c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a930:	e001      	b.n	800a936 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800a932:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a936:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800a938:	23b7      	movs	r3, #183	; 0xb7
 800a93a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a940:	2300      	movs	r3, #0
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800a944:	2300      	movs	r3, #0
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800a948:	2300      	movs	r3, #0
 800a94a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a94c:	2300      	movs	r3, #0
 800a94e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a950:	2300      	movs	r3, #0
 800a952:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a954:	2300      	movs	r3, #0
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f860 	bl	800aa22 <MT25TL01G_WriteEnable>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a968:	f06f 0301 	mvn.w	r3, #1
 800a96c:	e019      	b.n	800a9a2 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a96e:	f107 0308 	add.w	r3, r7, #8
 800a972:	f241 3288 	movw	r2, #5000	; 0x1388
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f004 fd2d 	bl	800f3d8 <HAL_QSPI_Command>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a984:	f06f 0301 	mvn.w	r3, #1
 800a988:	e00b      	b.n	800a9a2 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f80b 	bl	800a9aa <MT25TL01G_AutoPollingMemReady>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a99a:	f06f 0301 	mvn.w	r3, #1
 800a99e:	e000      	b.n	800a9a2 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3740      	adds	r7, #64	; 0x40
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b096      	sub	sp, #88	; 0x58
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a9b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a9ba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800a9bc:	2305      	movs	r3, #5
 800a9be:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a9c8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a9cc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800a9e6:	2310      	movs	r3, #16
 800a9e8:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800a9ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9ee:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800a9f0:	f240 1301 	movw	r3, #257	; 0x101
 800a9f4:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800a9f6:	2302      	movs	r3, #2
 800a9f8:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9fa:	f107 0208 	add.w	r2, r7, #8
 800a9fe:	f107 0120 	add.w	r1, r7, #32
 800aa02:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f004 fe73 	bl	800f6f2 <HAL_QSPI_AutoPolling>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800aa12:	f06f 0304 	mvn.w	r3, #4
 800aa16:	e000      	b.n	800aa1a <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800aa18:	2300      	movs	r3, #0

}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3758      	adds	r7, #88	; 0x58
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b096      	sub	sp, #88	; 0x58
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800aa2e:	78fb      	ldrb	r3, [r7, #3]
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d102      	bne.n	800aa3a <MT25TL01G_WriteEnable+0x18>
 800aa34:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa38:	e001      	b.n	800aa3e <MT25TL01G_WriteEnable+0x1c>
 800aa3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa3e:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800aa40:	2306      	movs	r3, #6
 800aa42:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa60:	f107 0320 	add.w	r3, r7, #32
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f004 fcb4 	bl	800f3d8 <HAL_QSPI_Command>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aa76:	f06f 0301 	mvn.w	r3, #1
 800aa7a:	e029      	b.n	800aad0 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800aa7c:	f240 2302 	movw	r3, #514	; 0x202
 800aa80:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800aa82:	f240 2302 	movw	r3, #514	; 0x202
 800aa86:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800aa90:	2310      	movs	r3, #16
 800aa92:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800aa94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa98:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800aa9a:	2305      	movs	r3, #5
 800aa9c:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d102      	bne.n	800aaaa <MT25TL01G_WriteEnable+0x88>
 800aaa4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aaa8:	e001      	b.n	800aaae <MT25TL01G_WriteEnable+0x8c>
 800aaaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aaae:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aab0:	f107 0208 	add.w	r2, r7, #8
 800aab4:	f107 0120 	add.w	r1, r7, #32
 800aab8:	f241 3388 	movw	r3, #5000	; 0x1388
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f004 fe18 	bl	800f6f2 <HAL_QSPI_AutoPolling>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800aac8:	f06f 0304 	mvn.w	r3, #4
 800aacc:	e000      	b.n	800aad0 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3758      	adds	r7, #88	; 0x58
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b090      	sub	sp, #64	; 0x40
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800aae6:	2335      	movs	r3, #53	; 0x35
 800aae8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aafa:	2300      	movs	r3, #0
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ab02:	2300      	movs	r3, #0
 800ab04:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab06:	f107 0308 	add.w	r3, r7, #8
 800ab0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0e:	4619      	mov	r1, r3
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f004 fc61 	bl	800f3d8 <HAL_QSPI_Command>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ab1c:	f06f 0301 	mvn.w	r3, #1
 800ab20:	e000      	b.n	800ab24 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3740      	adds	r7, #64	; 0x40
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b090      	sub	sp, #64	; 0x40
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ab34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab38:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800ab3a:	23f5      	movs	r3, #245	; 0xf5
 800ab3c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ab42:	2300      	movs	r3, #0
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ab52:	2300      	movs	r3, #0
 800ab54:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ab56:	2300      	movs	r3, #0
 800ab58:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab5a:	f107 0308 	add.w	r3, r7, #8
 800ab5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f004 fc37 	bl	800f3d8 <HAL_QSPI_Command>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ab70:	f06f 0301 	mvn.w	r3, #1
 800ab74:	e000      	b.n	800ab78 <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3740      	adds	r7, #64	; 0x40
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b092      	sub	sp, #72	; 0x48
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d83a      	bhi.n	800ac08 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abc1 	.word	0x0800abc1
 800aba0:	0800abd9 	.word	0x0800abd9
 800aba4:	0800abf1 	.word	0x0800abf1
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abac:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800abae:	230e      	movs	r3, #14
 800abb0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800abb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800abb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abbc:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800abbe:	e023      	b.n	800ac08 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800abc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abc4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800abc6:	233d      	movs	r3, #61	; 0x3d
 800abc8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800abca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800abd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abd4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800abd6:	e017      	b.n	800ac08 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800abd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abdc:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800abde:	23ee      	movs	r3, #238	; 0xee
 800abe0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800abe2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800abe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800abe8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800abec:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800abee:	e00b      	b.n	800ac08 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800abf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800abf4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800abf6:	23ed      	movs	r3, #237	; 0xed
 800abf8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800abfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ac00:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ac06:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ac08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ac0c:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800ac12:	2308      	movs	r3, #8
 800ac14:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800ac16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800ac1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac20:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ac22:	2300      	movs	r3, #0
 800ac24:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800ac2e:	f107 0208 	add.w	r2, r7, #8
 800ac32:	f107 0310 	add.w	r3, r7, #16
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f004 fdd1 	bl	800f7e0 <HAL_QSPI_MemoryMapped>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800ac44:	f06f 0305 	mvn.w	r3, #5
 800ac48:	e000      	b.n	800ac4c <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3748      	adds	r7, #72	; 0x48
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b092      	sub	sp, #72	; 0x48
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	2b03      	cmp	r3, #3
 800ac64:	d83a      	bhi.n	800acdc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800ac7d 	.word	0x0800ac7d
 800ac70:	0800ac95 	.word	0x0800ac95
 800ac74:	0800acad 	.word	0x0800acad
 800ac78:	0800acc5 	.word	0x0800acc5
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ac7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac80:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800ac82:	230c      	movs	r3, #12
 800ac84:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800ac86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800ac8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac90:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800ac92:	e023      	b.n	800acdc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ac94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800ac9a:	23bc      	movs	r3, #188	; 0xbc
 800ac9c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800ac9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800aca4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800acaa:	e017      	b.n	800acdc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800acac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800acb2:	23ec      	movs	r3, #236	; 0xec
 800acb4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800acb6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800acbc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800acc2:	e00b      	b.n	800acdc <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800acc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800acc8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800acca:	23eb      	movs	r3, #235	; 0xeb
 800accc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800acce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800acd4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800acda:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800acdc:	2308      	movs	r3, #8
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ace0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ace4:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800acea:	2300      	movs	r3, #0
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800acee:	2300      	movs	r3, #0
 800acf0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800acf2:	2300      	movs	r3, #0
 800acf4:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800acfe:	f107 0208 	add.w	r2, r7, #8
 800ad02:	f107 0310 	add.w	r3, r7, #16
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f004 fd69 	bl	800f7e0 <HAL_QSPI_MemoryMapped>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800ad14:	f06f 0305 	mvn.w	r3, #5
 800ad18:	e000      	b.n	800ad1c <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3748      	adds	r7, #72	; 0x48
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b090      	sub	sp, #64	; 0x40
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d102      	bne.n	800ad3c <MT25TL01G_ResetEnable+0x18>
 800ad36:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad3a:	e001      	b.n	800ad40 <MT25TL01G_ResetEnable+0x1c>
 800ad3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad40:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800ad42:	2366      	movs	r3, #102	; 0x66
 800ad44:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad62:	f107 0308 	add.w	r3, r7, #8
 800ad66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f004 fb33 	bl	800f3d8 <HAL_QSPI_Command>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ad78:	f06f 0301 	mvn.w	r3, #1
 800ad7c:	e000      	b.n	800ad80 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3740      	adds	r7, #64	; 0x40
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b090      	sub	sp, #64	; 0x40
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d102      	bne.n	800ada0 <MT25TL01G_ResetMemory+0x18>
 800ad9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad9e:	e001      	b.n	800ada4 <MT25TL01G_ResetMemory+0x1c>
 800ada0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800ada6:	2399      	movs	r3, #153	; 0x99
 800ada8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800adaa:	2300      	movs	r3, #0
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800adae:	2300      	movs	r3, #0
 800adb0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800adba:	2300      	movs	r3, #0
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800adbe:	2300      	movs	r3, #0
 800adc0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800adc6:	f107 0308 	add.w	r3, r7, #8
 800adca:	f241 3288 	movw	r2, #5000	; 0x1388
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f004 fb01 	bl	800f3d8 <HAL_QSPI_Command>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d002      	beq.n	800ade2 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800addc:	f06f 0301 	mvn.w	r3, #1
 800ade0:	e000      	b.n	800ade4 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3740      	adds	r7, #64	; 0x40
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295
 800adfa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f832 	bl	800ae6c <MT48LC4M32B2_ClockEnable>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d128      	bne.n	800ae60 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f000 f8e2 	bl	800afd8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f84a 	bl	800aeb4 <MT48LC4M32B2_Precharge>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d11c      	bne.n	800ae60 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6819      	ldr	r1, [r3, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f897 	bl	800af64 <MT48LC4M32B2_RefreshMode>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d111      	bne.n	800ae60 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f85c 	bl	800aefc <MT48LC4M32B2_ModeRegConfig>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10a      	bne.n	800ae60 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f8ad 	bl	800afb0 <MT48LC4M32B2_RefreshRate>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800ae60:	68fb      	ldr	r3, [r7, #12]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800ae76:	4b0e      	ldr	r3, [pc, #56]	; (800aeb0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ae78:	2201      	movs	r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ae7c:	4a0c      	ldr	r2, [pc, #48]	; (800aeb0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ae88:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ae8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae92:	4907      	ldr	r1, [pc, #28]	; (800aeb0 <MT48LC4M32B2_ClockEnable+0x44>)
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f007 f8bb 	bl	8012010 <HAL_SDRAM_SendCommand>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800aea0:	f04f 33ff 	mov.w	r3, #4294967295
 800aea4:	e000      	b.n	800aea8 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800aea6:	2300      	movs	r3, #0
  }
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	2400a270 	.word	0x2400a270

0800aeb4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800aebe:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <MT48LC4M32B2_Precharge+0x44>)
 800aec0:	2202      	movs	r2, #2
 800aec2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800aec4:	4a0c      	ldr	r2, [pc, #48]	; (800aef8 <MT48LC4M32B2_Precharge+0x44>)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800aeca:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <MT48LC4M32B2_Precharge+0x44>)
 800aecc:	2201      	movs	r2, #1
 800aece:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800aed0:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <MT48LC4M32B2_Precharge+0x44>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800aed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aeda:	4907      	ldr	r1, [pc, #28]	; (800aef8 <MT48LC4M32B2_Precharge+0x44>)
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f007 f897 	bl	8012010 <HAL_SDRAM_SendCommand>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	e000      	b.n	800aef0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800aeee:	2300      	movs	r3, #0
  }
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	2400a270 	.word	0x2400a270

0800aefc <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af0e:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800af14:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800af1a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af26:	2204      	movs	r2, #4
 800af28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a0c      	ldr	r2, [pc, #48]	; (800af60 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af30:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800af32:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af34:	2201      	movs	r2, #1
 800af36:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800af38:	4a09      	ldr	r2, [pc, #36]	; (800af60 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800af3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af42:	4907      	ldr	r1, [pc, #28]	; (800af60 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f007 f863 	bl	8012010 <HAL_SDRAM_SendCommand>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	e000      	b.n	800af58 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800af56:	2300      	movs	r3, #0
  }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	2400a270 	.word	0x2400a270

0800af64 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800af70:	4a0e      	ldr	r2, [pc, #56]	; (800afac <MT48LC4M32B2_RefreshMode+0x48>)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800af76:	4a0d      	ldr	r2, [pc, #52]	; (800afac <MT48LC4M32B2_RefreshMode+0x48>)
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800af7c:	4b0b      	ldr	r3, [pc, #44]	; (800afac <MT48LC4M32B2_RefreshMode+0x48>)
 800af7e:	2208      	movs	r2, #8
 800af80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800af82:	4b0a      	ldr	r3, [pc, #40]	; (800afac <MT48LC4M32B2_RefreshMode+0x48>)
 800af84:	2200      	movs	r2, #0
 800af86:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800af88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af8c:	4907      	ldr	r1, [pc, #28]	; (800afac <MT48LC4M32B2_RefreshMode+0x48>)
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f007 f83e 	bl	8012010 <HAL_SDRAM_SendCommand>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800af9a:	f04f 33ff 	mov.w	r3, #4294967295
 800af9e:	e000      	b.n	800afa2 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800afa0:	2300      	movs	r3, #0
  }
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	2400a270 	.word	0x2400a270

0800afb0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f007 f85c 	bl	801207a <HAL_SDRAM_ProgramRefreshRate>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800afc8:	f04f 33ff 	mov.w	r3, #4294967295
 800afcc:	e000      	b.n	800afd0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800afce:	2300      	movs	r3, #0
  }
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800afe0:	f001 fcfc 	bl	800c9dc <HAL_GetTick>
 800afe4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800afe6:	bf00      	nop
 800afe8:	f001 fcf8 	bl	800c9dc <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d8f7      	bhi.n	800afe8 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
	...

0800b004 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b00e:	4b16      	ldr	r3, [pc, #88]	; (800b068 <BSP_I2C4_Init+0x64>)
 800b010:	4a16      	ldr	r2, [pc, #88]	; (800b06c <BSP_I2C4_Init+0x68>)
 800b012:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b014:	4b16      	ldr	r3, [pc, #88]	; (800b070 <BSP_I2C4_Init+0x6c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d11f      	bne.n	800b05c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b01c:	4b14      	ldr	r3, [pc, #80]	; (800b070 <BSP_I2C4_Init+0x6c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	3301      	adds	r3, #1
 800b022:	4a13      	ldr	r2, [pc, #76]	; (800b070 <BSP_I2C4_Init+0x6c>)
 800b024:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b026:	4810      	ldr	r0, [pc, #64]	; (800b068 <BSP_I2C4_Init+0x64>)
 800b028:	f002 fefa 	bl	800de20 <HAL_I2C_GetState>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d114      	bne.n	800b05c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b032:	480d      	ldr	r0, [pc, #52]	; (800b068 <BSP_I2C4_Init+0x64>)
 800b034:	f000 fb60 	bl	800b6f8 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b038:	f005 fe90 	bl	8010d5c <HAL_RCC_GetPCLK2Freq>
 800b03c:	4603      	mov	r3, r0
 800b03e:	490d      	ldr	r1, [pc, #52]	; (800b074 <BSP_I2C4_Init+0x70>)
 800b040:	4618      	mov	r0, r3
 800b042:	f000 f8e3 	bl	800b20c <I2C_GetTiming>
 800b046:	4603      	mov	r3, r0
 800b048:	4619      	mov	r1, r3
 800b04a:	4807      	ldr	r0, [pc, #28]	; (800b068 <BSP_I2C4_Init+0x64>)
 800b04c:	f000 f838 	bl	800b0c0 <MX_I2C4_Init>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d002      	beq.n	800b05c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b056:	f06f 0307 	mvn.w	r3, #7
 800b05a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b05c:	687b      	ldr	r3, [r7, #4]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	2400ac88 	.word	0x2400ac88
 800b06c:	58001c00 	.word	0x58001c00
 800b070:	2400a280 	.word	0x2400a280
 800b074:	000186a0 	.word	0x000186a0

0800b078 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <BSP_I2C4_DeInit+0x40>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3b01      	subs	r3, #1
 800b088:	4a0b      	ldr	r2, [pc, #44]	; (800b0b8 <BSP_I2C4_DeInit+0x40>)
 800b08a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <BSP_I2C4_DeInit+0x40>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b094:	4809      	ldr	r0, [pc, #36]	; (800b0bc <BSP_I2C4_DeInit+0x44>)
 800b096:	f000 fb9b 	bl	800b7d0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b09a:	4808      	ldr	r0, [pc, #32]	; (800b0bc <BSP_I2C4_DeInit+0x44>)
 800b09c:	f002 fc4e 	bl	800d93c <HAL_I2C_DeInit>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d002      	beq.n	800b0ac <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b0a6:	f06f 0307 	mvn.w	r3, #7
 800b0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b0ac:	687b      	ldr	r3, [r7, #4]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2400a280 	.word	0x2400a280
 800b0bc:	2400ac88 	.word	0x2400ac88

0800b0c0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 fb8c 	bl	800d81c <HAL_I2C_Init>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d002      	beq.n	800b110 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	73fb      	strb	r3, [r7, #15]
 800b10e:	e014      	b.n	800b13a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b110:	2300      	movs	r3, #0
 800b112:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f003 f942 	bl	800e3a0 <HAL_I2CEx_ConfigAnalogFilter>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	73fb      	strb	r3, [r7, #15]
 800b126:	e008      	b.n	800b13a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b128:	2100      	movs	r1, #0
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f003 f983 	bl	800e436 <HAL_I2CEx_ConfigDigitalFilter>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60ba      	str	r2, [r7, #8]
 800b14c:	461a      	mov	r2, r3
 800b14e:	4603      	mov	r3, r0
 800b150:	81fb      	strh	r3, [r7, #14]
 800b152:	460b      	mov	r3, r1
 800b154:	81bb      	strh	r3, [r7, #12]
 800b156:	4613      	mov	r3, r2
 800b158:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b15a:	89b9      	ldrh	r1, [r7, #12]
 800b15c:	89f8      	ldrh	r0, [r7, #14]
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2201      	movs	r2, #1
 800b166:	f000 fb57 	bl	800b818 <I2C4_WriteReg>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b170:	2300      	movs	r3, #0
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	e00c      	b.n	800b190 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b176:	4809      	ldr	r0, [pc, #36]	; (800b19c <BSP_I2C4_WriteReg+0x58>)
 800b178:	f002 fe60 	bl	800de3c <HAL_I2C_GetError>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d103      	bne.n	800b18a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b182:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	e002      	b.n	800b190 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b18a:	f06f 0303 	mvn.w	r3, #3
 800b18e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b190:	697b      	ldr	r3, [r7, #20]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2400ac88 	.word	0x2400ac88

0800b1a0 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af02      	add	r7, sp, #8
 800b1a6:	60ba      	str	r2, [r7, #8]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	81fb      	strh	r3, [r7, #14]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	81bb      	strh	r3, [r7, #12]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b1b6:	89b9      	ldrh	r1, [r7, #12]
 800b1b8:	89f8      	ldrh	r0, [r7, #14]
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f000 fb4f 	bl	800b864 <I2C4_ReadReg>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	617b      	str	r3, [r7, #20]
 800b1d0:	e00c      	b.n	800b1ec <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b1d2:	4809      	ldr	r0, [pc, #36]	; (800b1f8 <BSP_I2C4_ReadReg+0x58>)
 800b1d4:	f002 fe32 	bl	800de3c <HAL_I2C_GetError>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d103      	bne.n	800b1e6 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b1de:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	e002      	b.n	800b1ec <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b1e6:	f06f 0303 	mvn.w	r3, #3
 800b1ea:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	2400ac88 	.word	0x2400ac88

0800b1fc <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b200:	f001 fbec 	bl	800c9dc <HAL_GetTick>
 800b204:	4603      	mov	r3, r0
}
 800b206:	4618      	mov	r0, r3
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d06b      	beq.n	800b2f8 <I2C_GetTiming+0xec>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d068      	beq.n	800b2f8 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b226:	2300      	movs	r3, #0
 800b228:	613b      	str	r3, [r7, #16]
 800b22a:	e060      	b.n	800b2ee <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b22c:	4a35      	ldr	r2, [pc, #212]	; (800b304 <I2C_GetTiming+0xf8>)
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	212c      	movs	r1, #44	; 0x2c
 800b232:	fb01 f303 	mul.w	r3, r1, r3
 800b236:	4413      	add	r3, r2
 800b238:	3304      	adds	r3, #4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d352      	bcc.n	800b2e8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b242:	4a30      	ldr	r2, [pc, #192]	; (800b304 <I2C_GetTiming+0xf8>)
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	212c      	movs	r1, #44	; 0x2c
 800b248:	fb01 f303 	mul.w	r3, r1, r3
 800b24c:	4413      	add	r3, r2
 800b24e:	3308      	adds	r3, #8
 800b250:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d847      	bhi.n	800b2e8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b258:	6939      	ldr	r1, [r7, #16]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f856 	bl	800b30c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b260:	6939      	ldr	r1, [r7, #16]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f940 	bl	800b4e8 <I2C_Compute_SCLL_SCLH>
 800b268:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b7f      	cmp	r3, #127	; 0x7f
 800b26e:	d842      	bhi.n	800b2f6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b270:	4925      	ldr	r1, [pc, #148]	; (800b308 <I2C_GetTiming+0xfc>)
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	440b      	add	r3, r1
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b282:	4821      	ldr	r0, [pc, #132]	; (800b308 <I2C_GetTiming+0xfc>)
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4403      	add	r3, r0
 800b290:	3304      	adds	r3, #4
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	051b      	lsls	r3, r3, #20
 800b296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b29a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b29c:	481a      	ldr	r0, [pc, #104]	; (800b308 <I2C_GetTiming+0xfc>)
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4403      	add	r3, r0
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b2b4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b2b6:	4814      	ldr	r0, [pc, #80]	; (800b308 <I2C_GetTiming+0xfc>)
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4403      	add	r3, r0
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b2cc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b2ce:	480e      	ldr	r0, [pc, #56]	; (800b308 <I2C_GetTiming+0xfc>)
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4413      	add	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4403      	add	r3, r0
 800b2dc:	3310      	adds	r3, #16
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b2e2:	430b      	orrs	r3, r1
 800b2e4:	617b      	str	r3, [r7, #20]
        }
        break;
 800b2e6:	e006      	b.n	800b2f6 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d99b      	bls.n	800b22c <I2C_GetTiming+0x20>
 800b2f4:	e000      	b.n	800b2f8 <I2C_GetTiming+0xec>
        break;
 800b2f6:	bf00      	nop
      }
    }
  }

  return ret;
 800b2f8:	697b      	ldr	r3, [r7, #20]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	080259f8 	.word	0x080259f8
 800b308:	2400a284 	.word	0x2400a284

0800b30c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b08f      	sub	sp, #60	; 0x3c
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b316:	2310      	movs	r3, #16
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	085a      	lsrs	r2, r3, #1
 800b31e:	4b6e      	ldr	r3, [pc, #440]	; (800b4d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b320:	4413      	add	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	fbb3 f3f2 	udiv	r3, r3, r2
 800b328:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b32a:	2332      	movs	r3, #50	; 0x32
 800b32c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b32e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b332:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b334:	4a69      	ldr	r2, [pc, #420]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	212c      	movs	r1, #44	; 0x2c
 800b33a:	fb01 f303 	mul.w	r3, r1, r3
 800b33e:	4413      	add	r3, r2
 800b340:	3324      	adds	r3, #36	; 0x24
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	4a65      	ldr	r2, [pc, #404]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	212c      	movs	r1, #44	; 0x2c
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	4413      	add	r3, r2
 800b352:	330c      	adds	r3, #12
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b358:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b35a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b35c:	495f      	ldr	r1, [pc, #380]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	202c      	movs	r0, #44	; 0x2c
 800b362:	fb00 f303 	mul.w	r3, r0, r3
 800b366:	440b      	add	r3, r1
 800b368:	3328      	adds	r3, #40	; 0x28
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3303      	adds	r3, #3
 800b36e:	69f9      	ldr	r1, [r7, #28]
 800b370:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b378:	4a58      	ldr	r2, [pc, #352]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	212c      	movs	r1, #44	; 0x2c
 800b37e:	fb01 f303 	mul.w	r3, r1, r3
 800b382:	4413      	add	r3, r2
 800b384:	3310      	adds	r3, #16
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4618      	mov	r0, r3
 800b38a:	4a54      	ldr	r2, [pc, #336]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	212c      	movs	r1, #44	; 0x2c
 800b390:	fb01 f303 	mul.w	r3, r1, r3
 800b394:	4413      	add	r3, r2
 800b396:	3320      	adds	r3, #32
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b39c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b39e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b3a0:	494e      	ldr	r1, [pc, #312]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	202c      	movs	r0, #44	; 0x2c
 800b3a6:	fb00 f303 	mul.w	r3, r0, r3
 800b3aa:	440b      	add	r3, r1
 800b3ac:	3328      	adds	r3, #40	; 0x28
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3304      	adds	r3, #4
 800b3b2:	69f9      	ldr	r1, [r7, #28]
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b3bc:	4a47      	ldr	r2, [pc, #284]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	212c      	movs	r1, #44	; 0x2c
 800b3c2:	fb01 f303 	mul.w	r3, r1, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3320      	adds	r3, #32
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4a43      	ldr	r2, [pc, #268]	; (800b4dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	212c      	movs	r1, #44	; 0x2c
 800b3d4:	fb01 f303 	mul.w	r3, r1, r3
 800b3d8:	4413      	add	r3, r2
 800b3da:	3314      	adds	r3, #20
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4403      	add	r3, r0
 800b3e0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc01      	bgt.n	800b3ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dc01      	bgt.n	800b3f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3fa:	e062      	b.n	800b4c2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b400:	e059      	b.n	800b4b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	3301      	adds	r3, #1
 800b406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b408:	3201      	adds	r2, #1
 800b40a:	fb03 f202 	mul.w	r2, r3, r2
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	fb02 f303 	mul.w	r3, r2, r3
 800b414:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d348      	bcc.n	800b4b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b41e:	2300      	movs	r3, #0
 800b420:	623b      	str	r3, [r7, #32]
 800b422:	e042      	b.n	800b4aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b426:	3301      	adds	r3, #1
 800b428:	6a3a      	ldr	r2, [r7, #32]
 800b42a:	fb03 f202 	mul.w	r2, r3, r2
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d332      	bcc.n	800b4a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	429a      	cmp	r2, r3
 800b444:	d82e      	bhi.n	800b4a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d02a      	beq.n	800b4a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b44e:	4b24      	ldr	r3, [pc, #144]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	4924      	ldr	r1, [pc, #144]	; (800b4e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b460:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b462:	4b1f      	ldr	r3, [pc, #124]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	491f      	ldr	r1, [pc, #124]	; (800b4e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	3304      	adds	r3, #4
 800b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b476:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b478:	4b19      	ldr	r3, [pc, #100]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	4919      	ldr	r1, [pc, #100]	; (800b4e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	3308      	adds	r3, #8
 800b48a:	6a3a      	ldr	r2, [r7, #32]
 800b48c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b492:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3301      	adds	r3, #1
 800b498:	4a11      	ldr	r2, [pc, #68]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b49a:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b49c:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b4a2:	d812      	bhi.n	800b4ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	623b      	str	r3, [r7, #32]
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	2b0f      	cmp	r3, #15
 800b4ae:	d9b9      	bls.n	800b424 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	2b0f      	cmp	r3, #15
 800b4ba:	d9a2      	bls.n	800b402 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4be:	3301      	adds	r3, #1
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c4:	2b0f      	cmp	r3, #15
 800b4c6:	d999      	bls.n	800b3fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b4c8:	e000      	b.n	800b4cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b4ca:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b4cc:	373c      	adds	r7, #60	; 0x3c
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	3b9aca00 	.word	0x3b9aca00
 800b4dc:	080259f8 	.word	0x080259f8
 800b4e0:	2400ac84 	.word	0x2400ac84
 800b4e4:	2400a284 	.word	0x2400a284

0800b4e8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b093      	sub	sp, #76	; 0x4c
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	085a      	lsrs	r2, r3, #1
 800b4fc:	4b7a      	ldr	r3, [pc, #488]	; (800b6e8 <I2C_Compute_SCLL_SCLH+0x200>)
 800b4fe:	4413      	add	r3, r2
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	fbb3 f3f2 	udiv	r3, r3, r2
 800b506:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b508:	4a78      	ldr	r2, [pc, #480]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	212c      	movs	r1, #44	; 0x2c
 800b50e:	fb01 f303 	mul.w	r3, r1, r3
 800b512:	4413      	add	r3, r2
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	085a      	lsrs	r2, r3, #1
 800b518:	4b73      	ldr	r3, [pc, #460]	; (800b6e8 <I2C_Compute_SCLL_SCLH+0x200>)
 800b51a:	4413      	add	r3, r2
 800b51c:	4973      	ldr	r1, [pc, #460]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	202c      	movs	r0, #44	; 0x2c
 800b522:	fb00 f202 	mul.w	r2, r0, r2
 800b526:	440a      	add	r2, r1
 800b528:	6812      	ldr	r2, [r2, #0]
 800b52a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b52e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b530:	2332      	movs	r3, #50	; 0x32
 800b532:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b534:	4a6d      	ldr	r2, [pc, #436]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	212c      	movs	r1, #44	; 0x2c
 800b53a:	fb01 f303 	mul.w	r3, r1, r3
 800b53e:	4413      	add	r3, r2
 800b540:	3328      	adds	r3, #40	; 0x28
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800b54c:	4a67      	ldr	r2, [pc, #412]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	212c      	movs	r1, #44	; 0x2c
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	3304      	adds	r3, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a62      	ldr	r2, [pc, #392]	; (800b6e8 <I2C_Compute_SCLL_SCLH+0x200>)
 800b55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b562:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800b564:	4a61      	ldr	r2, [pc, #388]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	212c      	movs	r1, #44	; 0x2c
 800b56a:	fb01 f303 	mul.w	r3, r1, r3
 800b56e:	4413      	add	r3, r2
 800b570:	3308      	adds	r3, #8
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a5c      	ldr	r2, [pc, #368]	; (800b6e8 <I2C_Compute_SCLL_SCLH+0x200>)
 800b576:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b580:	2300      	movs	r3, #0
 800b582:	637b      	str	r3, [r7, #52]	; 0x34
 800b584:	e0a3      	b.n	800b6ce <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800b586:	495a      	ldr	r1, [pc, #360]	; (800b6f0 <I2C_Compute_SCLL_SCLH+0x208>)
 800b588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	440b      	add	r3, r1
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	1c5a      	adds	r2, r3, #1
 800b598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
 800b59e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5a4:	e08c      	b.n	800b6c0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800b5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	441a      	add	r2, r3
 800b5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	6979      	ldr	r1, [r7, #20]
 800b5b2:	fb03 f101 	mul.w	r1, r3, r1
 800b5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b8:	005b      	lsls	r3, r3, #1
 800b5ba:	440b      	add	r3, r1
 800b5bc:	4413      	add	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800b5c0:	4a4a      	ldr	r2, [pc, #296]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	212c      	movs	r1, #44	; 0x2c
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3318      	adds	r3, #24
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d971      	bls.n	800b6ba <I2C_Compute_SCLL_SCLH+0x1d2>
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	089b      	lsrs	r3, r3, #2
 800b5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d268      	bcs.n	800b6ba <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5ec:	e062      	b.n	800b6b4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800b5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	441a      	add	r2, r3
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	6979      	ldr	r1, [r7, #20]
 800b5fa:	fb03 f101 	mul.w	r1, r3, r1
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	440b      	add	r3, r1
 800b604:	4413      	add	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	441a      	add	r2, r3
 800b60e:	4937      	ldr	r1, [pc, #220]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	202c      	movs	r0, #44	; 0x2c
 800b614:	fb00 f303 	mul.w	r3, r0, r3
 800b618:	440b      	add	r3, r1
 800b61a:	3320      	adds	r3, #32
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	441a      	add	r2, r3
 800b620:	4932      	ldr	r1, [pc, #200]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	202c      	movs	r0, #44	; 0x2c
 800b626:	fb00 f303 	mul.w	r3, r0, r3
 800b62a:	440b      	add	r3, r1
 800b62c:	3324      	adds	r3, #36	; 0x24
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4413      	add	r3, r2
 800b632:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d338      	bcc.n	800b6ae <I2C_Compute_SCLL_SCLH+0x1c6>
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	429a      	cmp	r2, r3
 800b642:	d834      	bhi.n	800b6ae <I2C_Compute_SCLL_SCLH+0x1c6>
 800b644:	4a29      	ldr	r2, [pc, #164]	; (800b6ec <I2C_Compute_SCLL_SCLH+0x204>)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	212c      	movs	r1, #44	; 0x2c
 800b64a:	fb01 f303 	mul.w	r3, r1, r3
 800b64e:	4413      	add	r3, r2
 800b650:	331c      	adds	r3, #28
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	429a      	cmp	r2, r3
 800b658:	d329      	bcc.n	800b6ae <I2C_Compute_SCLL_SCLH+0x1c6>
 800b65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d225      	bcs.n	800b6ae <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	da02      	bge.n	800b676 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800b670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b672:	425b      	negs	r3, r3
 800b674:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d917      	bls.n	800b6ae <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800b682:	491b      	ldr	r1, [pc, #108]	; (800b6f0 <I2C_Compute_SCLL_SCLH+0x208>)
 800b684:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	440b      	add	r3, r1
 800b690:	3310      	adds	r3, #16
 800b692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b694:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800b696:	4916      	ldr	r1, [pc, #88]	; (800b6f0 <I2C_Compute_SCLL_SCLH+0x208>)
 800b698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69a:	4613      	mov	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	440b      	add	r3, r1
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6a8:	601a      	str	r2, [r3, #0]
              ret = count;
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b6:	2bff      	cmp	r3, #255	; 0xff
 800b6b8:	d999      	bls.n	800b5ee <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6bc:	3301      	adds	r3, #1
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c2:	2bff      	cmp	r3, #255	; 0xff
 800b6c4:	f67f af6f 	bls.w	800b5a6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6ce:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <I2C_Compute_SCLL_SCLH+0x20c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	f4ff af56 	bcc.w	800b586 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800b6da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	374c      	adds	r7, #76	; 0x4c
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	3b9aca00 	.word	0x3b9aca00
 800b6ec:	080259f8 	.word	0x080259f8
 800b6f0:	2400a284 	.word	0x2400a284
 800b6f4:	2400ac84 	.word	0x2400ac84

0800b6f8 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b700:	4b31      	ldr	r3, [pc, #196]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b706:	4a30      	ldr	r2, [pc, #192]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b708:	f043 0308 	orr.w	r3, r3, #8
 800b70c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b710:	4b2d      	ldr	r3, [pc, #180]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b716:	f003 0308 	and.w	r3, r3, #8
 800b71a:	613b      	str	r3, [r7, #16]
 800b71c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b71e:	4b2a      	ldr	r3, [pc, #168]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b724:	4a28      	ldr	r2, [pc, #160]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b726:	f043 0308 	orr.w	r3, r3, #8
 800b72a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b72e:	4b26      	ldr	r3, [pc, #152]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b734:	f003 0308 	and.w	r3, r3, #8
 800b738:	60fb      	str	r3, [r7, #12]
 800b73a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b73c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b740:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b742:	2312      	movs	r3, #18
 800b744:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b746:	2300      	movs	r3, #0
 800b748:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b74a:	2302      	movs	r3, #2
 800b74c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b74e:	2304      	movs	r3, #4
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b752:	f107 0314 	add.w	r3, r7, #20
 800b756:	4619      	mov	r1, r3
 800b758:	481c      	ldr	r0, [pc, #112]	; (800b7cc <I2C4_MspInit+0xd4>)
 800b75a:	f001 fd43 	bl	800d1e4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b75e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b762:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b764:	2312      	movs	r3, #18
 800b766:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b76c:	2302      	movs	r3, #2
 800b76e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b770:	2304      	movs	r3, #4
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b774:	f107 0314 	add.w	r3, r7, #20
 800b778:	4619      	mov	r1, r3
 800b77a:	4814      	ldr	r0, [pc, #80]	; (800b7cc <I2C4_MspInit+0xd4>)
 800b77c:	f001 fd32 	bl	800d1e4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b782:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b786:	4a10      	ldr	r2, [pc, #64]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b790:	4b0d      	ldr	r3, [pc, #52]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b792:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79a:	60bb      	str	r3, [r7, #8]
 800b79c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800b79e:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b7a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7a4:	4a08      	ldr	r2, [pc, #32]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800b7ae:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b7b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b4:	4a04      	ldr	r2, [pc, #16]	; (800b7c8 <I2C4_MspInit+0xd0>)
 800b7b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800b7be:	bf00      	nop
 800b7c0:	3728      	adds	r7, #40	; 0x28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	58024400 	.word	0x58024400
 800b7cc:	58020c00 	.word	0x58020c00

0800b7d0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800b7d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	480b      	ldr	r0, [pc, #44]	; (800b810 <I2C4_MspDeInit+0x40>)
 800b7e4:	f001 feae 	bl	800d544 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800b7e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	4807      	ldr	r0, [pc, #28]	; (800b810 <I2C4_MspDeInit+0x40>)
 800b7f4:	f001 fea6 	bl	800d544 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b7f8:	4b06      	ldr	r3, [pc, #24]	; (800b814 <I2C4_MspDeInit+0x44>)
 800b7fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7fe:	4a05      	ldr	r2, [pc, #20]	; (800b814 <I2C4_MspDeInit+0x44>)
 800b800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b804:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800b808:	bf00      	nop
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	58020c00 	.word	0x58020c00
 800b814:	58024400 	.word	0x58024400

0800b818 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b088      	sub	sp, #32
 800b81c:	af04      	add	r7, sp, #16
 800b81e:	607b      	str	r3, [r7, #4]
 800b820:	4603      	mov	r3, r0
 800b822:	81fb      	strh	r3, [r7, #14]
 800b824:	460b      	mov	r3, r1
 800b826:	81bb      	strh	r3, [r7, #12]
 800b828:	4613      	mov	r3, r2
 800b82a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b82c:	8978      	ldrh	r0, [r7, #10]
 800b82e:	89ba      	ldrh	r2, [r7, #12]
 800b830:	89f9      	ldrh	r1, [r7, #14]
 800b832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b836:	9302      	str	r3, [sp, #8]
 800b838:	8b3b      	ldrh	r3, [r7, #24]
 800b83a:	9301      	str	r3, [sp, #4]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	9300      	str	r3, [sp, #0]
 800b840:	4603      	mov	r3, r0
 800b842:	4807      	ldr	r0, [pc, #28]	; (800b860 <I2C4_WriteReg+0x48>)
 800b844:	f002 f8be 	bl	800d9c4 <HAL_I2C_Mem_Write>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b84e:	2300      	movs	r3, #0
 800b850:	e001      	b.n	800b856 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b852:	f06f 0307 	mvn.w	r3, #7
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	2400ac88 	.word	0x2400ac88

0800b864 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b088      	sub	sp, #32
 800b868:	af04      	add	r7, sp, #16
 800b86a:	607b      	str	r3, [r7, #4]
 800b86c:	4603      	mov	r3, r0
 800b86e:	81fb      	strh	r3, [r7, #14]
 800b870:	460b      	mov	r3, r1
 800b872:	81bb      	strh	r3, [r7, #12]
 800b874:	4613      	mov	r3, r2
 800b876:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b878:	8978      	ldrh	r0, [r7, #10]
 800b87a:	89ba      	ldrh	r2, [r7, #12]
 800b87c:	89f9      	ldrh	r1, [r7, #14]
 800b87e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b882:	9302      	str	r3, [sp, #8]
 800b884:	8b3b      	ldrh	r3, [r7, #24]
 800b886:	9301      	str	r3, [sp, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4603      	mov	r3, r0
 800b88e:	4807      	ldr	r0, [pc, #28]	; (800b8ac <I2C4_ReadReg+0x48>)
 800b890:	f002 f9ac 	bl	800dbec <HAL_I2C_Mem_Read>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	e001      	b.n	800b8a2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b89e:	f06f 0307 	mvn.w	r3, #7
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	2400ac88 	.word	0x2400ac88

0800b8b0 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b090      	sub	sp, #64	; 0x40
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8c4:	f06f 0301 	mvn.w	r3, #1
 800b8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8ca:	e090      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800b8cc:	494a      	ldr	r1, [pc, #296]	; (800b9f8 <BSP_QSPI_Init+0x148>)
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	440b      	add	r3, r1
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f040 8086 	bne.w	800b9ee <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800b8e2:	4846      	ldr	r0, [pc, #280]	; (800b9fc <BSP_QSPI_Init+0x14c>)
 800b8e4:	f000 f99c 	bl	800bc20 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800b8e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d17f      	bne.n	800b9ee <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800b8ee:	f107 031c 	add.w	r3, r7, #28
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe ffea 	bl	800a8cc <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	785b      	ldrb	r3, [r3, #1]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b40      	ldr	r3, [pc, #256]	; (800ba00 <BSP_QSPI_Init+0x150>)
 800b900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b904:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800b906:	2340      	movs	r3, #64	; 0x40
 800b908:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b910:	fa93 f3a3 	rbit	r3, r3
 800b914:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800b920:	2320      	movs	r3, #32
 800b922:	e003      	b.n	800b92c <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	fab3 f383 	clz	r3, r3
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	3b01      	subs	r3, #1
 800b92e:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	785b      	ldrb	r3, [r3, #1]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <BSP_QSPI_Init+0x8c>
 800b938:	2310      	movs	r3, #16
 800b93a:	e000      	b.n	800b93e <BSP_QSPI_Init+0x8e>
 800b93c:	2300      	movs	r3, #0
 800b93e:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800b940:	f107 030c 	add.w	r3, r7, #12
 800b944:	4619      	mov	r1, r3
 800b946:	482d      	ldr	r0, [pc, #180]	; (800b9fc <BSP_QSPI_Init+0x14c>)
 800b948:	f000 f85c 	bl	800ba04 <MX_QSPI_Init>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b952:	f06f 0303 	mvn.w	r3, #3
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b958:	e049      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 faa8 	bl	800beb0 <QSPI_ResetMemory>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b966:	f06f 0304 	mvn.w	r3, #4
 800b96a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b96c:	e03f      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b96e:	4922      	ldr	r1, [pc, #136]	; (800b9f8 <BSP_QSPI_Init+0x148>)
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	4613      	mov	r3, r2
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	440b      	add	r3, r1
 800b97c:	3301      	adds	r3, #1
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	481e      	ldr	r0, [pc, #120]	; (800b9fc <BSP_QSPI_Init+0x14c>)
 800b984:	f7ff f811 	bl	800a9aa <MT25TL01G_AutoPollingMemReady>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b98e:	f06f 0304 	mvn.w	r3, #4
 800b992:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b994:	e02b      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b996:	4918      	ldr	r1, [pc, #96]	; (800b9f8 <BSP_QSPI_Init+0x148>)
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4814      	ldr	r0, [pc, #80]	; (800b9fc <BSP_QSPI_Init+0x14c>)
 800b9ac:	f7fe ffb5 	bl	800a91a <MT25TL01G_Enter4BytesAddressMode>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9b6:	f06f 0304 	mvn.w	r3, #4
 800b9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9bc:	e017      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fae2 	bl	800bf88 <QSPI_DummyCyclesCfg>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d003      	beq.n	800b9d2 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9ca:	f06f 0304 	mvn.w	r3, #4
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9d0:	e00d      	b.n	800b9ee <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	7819      	ldrb	r1, [r3, #0]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	785b      	ldrb	r3, [r3, #1]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f89d 	bl	800bb1c <BSP_QSPI_ConfigFlash>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9e8:	f06f 0304 	mvn.w	r3, #4
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3740      	adds	r7, #64	; 0x40
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	2400acd4 	.word	0x2400acd4
 800b9fc:	2400027c 	.word	0x2400027c
 800ba00:	08025a7c 	.word	0x08025a7c

0800ba04 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a13      	ldr	r2, [pc, #76]	; (800ba60 <MX_QSPI_Init+0x5c>)
 800ba12:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	689a      	ldr	r2, [r3, #8]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ba38:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f003 fa94 	bl	800ef7c <HAL_QSPI_Init>
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	52005000 	.word	0x52005000

0800ba64 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba76:	f06f 0301 	mvn.w	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e045      	b.n	800bb0a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800ba7e:	4925      	ldr	r1, [pc, #148]	; (800bb14 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	4613      	mov	r3, r2
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	4413      	add	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	440b      	add	r3, r1
 800ba8c:	3302      	adds	r3, #2
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d11d      	bne.n	800bad0 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ba94:	491f      	ldr	r1, [pc, #124]	; (800bb14 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	3301      	adds	r3, #1
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	4619      	mov	r1, r3
 800baa8:	481b      	ldr	r0, [pc, #108]	; (800bb18 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800baaa:	f7ff f8d3 	bl	800ac54 <MT25TL01G_EnableMemoryMappedModeSTR>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d003      	beq.n	800babc <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bab4:	f06f 0304 	mvn.w	r3, #4
 800bab8:	60fb      	str	r3, [r7, #12]
 800baba:	e026      	b.n	800bb0a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800babc:	4915      	ldr	r1, [pc, #84]	; (800bb14 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	4613      	mov	r3, r2
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	2202      	movs	r2, #2
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	e01c      	b.n	800bb0a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bad0:	4910      	ldr	r1, [pc, #64]	; (800bb14 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	4613      	mov	r3, r2
 800bad6:	005b      	lsls	r3, r3, #1
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	440b      	add	r3, r1
 800bade:	3301      	adds	r3, #1
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	4619      	mov	r1, r3
 800bae4:	480c      	ldr	r0, [pc, #48]	; (800bb18 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800bae6:	f7ff f84b 	bl	800ab80 <MT25TL01G_EnableMemoryMappedModeDTR>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800baf0:	f06f 0304 	mvn.w	r3, #4
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	e008      	b.n	800bb0a <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800baf8:	4906      	ldr	r1, [pc, #24]	; (800bb14 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	4613      	mov	r3, r2
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	2202      	movs	r2, #2
 800bb08:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	2400acd4 	.word	0x2400acd4
 800bb18:	2400027c 	.word	0x2400027c

0800bb1c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb36:	f06f 0301 	mvn.w	r3, #1
 800bb3a:	60fb      	str	r3, [r7, #12]
 800bb3c:	e067      	b.n	800bc0e <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800bb3e:	4936      	ldr	r1, [pc, #216]	; (800bc18 <BSP_QSPI_ConfigFlash+0xfc>)
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	4613      	mov	r3, r2
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	4413      	add	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	440b      	add	r3, r1
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d103      	bne.n	800bb5a <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800bb52:	f06f 0319 	mvn.w	r3, #25
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	e059      	b.n	800bc0e <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bb5a:	78bb      	ldrb	r3, [r7, #2]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <BSP_QSPI_ConfigFlash+0x48>
 800bb60:	2310      	movs	r3, #16
 800bb62:	e000      	b.n	800bb66 <BSP_QSPI_ConfigFlash+0x4a>
 800bb64:	2300      	movs	r3, #0
 800bb66:	4a2d      	ldr	r2, [pc, #180]	; (800bc1c <BSP_QSPI_ConfigFlash+0x100>)
 800bb68:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800bb6a:	482c      	ldr	r0, [pc, #176]	; (800bc1c <BSP_QSPI_ConfigFlash+0x100>)
 800bb6c:	f003 fa06 	bl	800ef7c <HAL_QSPI_Init>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bb76:	f06f 0303 	mvn.w	r3, #3
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	e047      	b.n	800bc0e <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800bb7e:	4926      	ldr	r1, [pc, #152]	; (800bc18 <BSP_QSPI_ConfigFlash+0xfc>)
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	4613      	mov	r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d10c      	bne.n	800bbae <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800bb94:	78fb      	ldrb	r3, [r7, #3]
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d016      	beq.n	800bbc8 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800bb9a:	4820      	ldr	r0, [pc, #128]	; (800bc1c <BSP_QSPI_ConfigFlash+0x100>)
 800bb9c:	f7fe ffc6 	bl	800ab2c <MT25TL01G_ExitQPIMode>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bba6:	f06f 0304 	mvn.w	r3, #4
 800bbaa:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bbac:	e00c      	b.n	800bbc8 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800bbae:	78fb      	ldrb	r3, [r7, #3]
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d10b      	bne.n	800bbcc <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800bbb4:	4819      	ldr	r0, [pc, #100]	; (800bc1c <BSP_QSPI_ConfigFlash+0x100>)
 800bbb6:	f7fe ff8f 	bl	800aad8 <MT25TL01G_EnterQPIMode>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbc0:	f06f 0304 	mvn.w	r3, #4
 800bbc4:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bbc6:	e001      	b.n	800bbcc <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800bbc8:	bf00      	nop
 800bbca:	e000      	b.n	800bbce <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800bbcc:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d11c      	bne.n	800bc0e <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800bbd4:	4910      	ldr	r1, [pc, #64]	; (800bc18 <BSP_QSPI_ConfigFlash+0xfc>)
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	440b      	add	r3, r1
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800bbe6:	490c      	ldr	r1, [pc, #48]	; (800bc18 <BSP_QSPI_ConfigFlash+0xfc>)
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	4613      	mov	r3, r2
 800bbec:	005b      	lsls	r3, r3, #1
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	78fa      	ldrb	r2, [r7, #3]
 800bbf8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800bbfa:	4907      	ldr	r1, [pc, #28]	; (800bc18 <BSP_QSPI_ConfigFlash+0xfc>)
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	005b      	lsls	r3, r3, #1
 800bc02:	4413      	add	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	440b      	add	r3, r1
 800bc08:	3302      	adds	r3, #2
 800bc0a:	78ba      	ldrb	r2, [r7, #2]
 800bc0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	2400acd4 	.word	0x2400acd4
 800bc1c:	2400027c 	.word	0x2400027c

0800bc20 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b094      	sub	sp, #80	; 0x50
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800bc28:	4b9c      	ldr	r3, [pc, #624]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bc2e:	4a9b      	ldr	r2, [pc, #620]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc34:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800bc38:	4b98      	ldr	r3, [pc, #608]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bc3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc42:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800bc46:	4b95      	ldr	r3, [pc, #596]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4a:	4a94      	ldr	r2, [pc, #592]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc50:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800bc52:	4b92      	ldr	r3, [pc, #584]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc56:	4a91      	ldr	r2, [pc, #580]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc5c:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800bc5e:	4b8f      	ldr	r3, [pc, #572]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc64:	4a8d      	ldr	r2, [pc, #564]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc66:	f043 0320 	orr.w	r3, r3, #32
 800bc6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc6e:	4b8b      	ldr	r3, [pc, #556]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	637b      	str	r3, [r7, #52]	; 0x34
 800bc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800bc7c:	4b87      	ldr	r3, [pc, #540]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc82:	4a86      	ldr	r2, [pc, #536]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bc8c:	4b83      	ldr	r3, [pc, #524]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc96:	633b      	str	r3, [r7, #48]	; 0x30
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800bc9a:	4b80      	ldr	r3, [pc, #512]	; (800be9c <QSPI_MspInit+0x27c>)
 800bc9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bca0:	4a7e      	ldr	r2, [pc, #504]	; (800be9c <QSPI_MspInit+0x27c>)
 800bca2:	f043 0308 	orr.w	r3, r3, #8
 800bca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bcaa:	4b7c      	ldr	r3, [pc, #496]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcb0:	f003 0308 	and.w	r3, r3, #8
 800bcb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800bcb8:	4b78      	ldr	r3, [pc, #480]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcbe:	4a77      	ldr	r2, [pc, #476]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcc0:	f043 0320 	orr.w	r3, r3, #32
 800bcc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bcc8:	4b74      	ldr	r3, [pc, #464]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800bcd6:	4b71      	ldr	r3, [pc, #452]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcdc:	4a6f      	ldr	r2, [pc, #444]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcde:	f043 0320 	orr.w	r3, r3, #32
 800bce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bce6:	4b6d      	ldr	r3, [pc, #436]	; (800be9c <QSPI_MspInit+0x27c>)
 800bce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcec:	f003 0320 	and.w	r3, r3, #32
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800bcf4:	4b69      	ldr	r3, [pc, #420]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcfa:	4a68      	ldr	r2, [pc, #416]	; (800be9c <QSPI_MspInit+0x27c>)
 800bcfc:	f043 0320 	orr.w	r3, r3, #32
 800bd00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd04:	4b65      	ldr	r3, [pc, #404]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd0a:	f003 0320 	and.w	r3, r3, #32
 800bd0e:	623b      	str	r3, [r7, #32]
 800bd10:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800bd12:	4b62      	ldr	r3, [pc, #392]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd18:	4a60      	ldr	r2, [pc, #384]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd22:	4b5e      	ldr	r3, [pc, #376]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd2c:	61fb      	str	r3, [r7, #28]
 800bd2e:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800bd30:	4b5a      	ldr	r3, [pc, #360]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd36:	4a59      	ldr	r2, [pc, #356]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd40:	4b56      	ldr	r3, [pc, #344]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4a:	61bb      	str	r3, [r7, #24]
 800bd4c:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800bd4e:	4b53      	ldr	r3, [pc, #332]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd54:	4a51      	ldr	r2, [pc, #324]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd5e:	4b4f      	ldr	r3, [pc, #316]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800bd6c:	4b4b      	ldr	r3, [pc, #300]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd72:	4a4a      	ldr	r2, [pc, #296]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd7c:	4b47      	ldr	r3, [pc, #284]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd86:	613b      	str	r3, [r7, #16]
 800bd88:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800bd8a:	4b44      	ldr	r3, [pc, #272]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd90:	4a42      	ldr	r2, [pc, #264]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd9a:	4b40      	ldr	r3, [pc, #256]	; (800be9c <QSPI_MspInit+0x27c>)
 800bd9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800bda8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdac:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800bdae:	2302      	movs	r3, #2
 800bdb0:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800bdba:	2309      	movs	r3, #9
 800bdbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800bdbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4836      	ldr	r0, [pc, #216]	; (800bea0 <QSPI_MspInit+0x280>)
 800bdc6:	f001 fa0d 	bl	800d1e4 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800bdca:	2340      	movs	r3, #64	; 0x40
 800bdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800bdd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bdda:	4619      	mov	r1, r3
 800bddc:	4831      	ldr	r0, [pc, #196]	; (800bea4 <QSPI_MspInit+0x284>)
 800bdde:	f001 fa01 	bl	800d1e4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800bde2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800bde8:	2300      	movs	r3, #0
 800bdea:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800bdec:	2309      	movs	r3, #9
 800bdee:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800bdf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	482c      	ldr	r0, [pc, #176]	; (800bea8 <QSPI_MspInit+0x288>)
 800bdf8:	f001 f9f4 	bl	800d1e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800bdfc:	2304      	movs	r3, #4
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be00:	2309      	movs	r3, #9
 800be02:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800be04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be08:	4619      	mov	r1, r3
 800be0a:	4828      	ldr	r0, [pc, #160]	; (800beac <QSPI_MspInit+0x28c>)
 800be0c:	f001 f9ea 	bl	800d1e4 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800be10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be14:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800be16:	230a      	movs	r3, #10
 800be18:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800be1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be1e:	4619      	mov	r1, r3
 800be20:	481f      	ldr	r0, [pc, #124]	; (800bea0 <QSPI_MspInit+0x280>)
 800be22:	f001 f9df 	bl	800d1e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800be26:	2308      	movs	r3, #8
 800be28:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be2a:	2309      	movs	r3, #9
 800be2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800be2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be32:	4619      	mov	r1, r3
 800be34:	481d      	ldr	r0, [pc, #116]	; (800beac <QSPI_MspInit+0x28c>)
 800be36:	f001 f9d5 	bl	800d1e4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800be3a:	2380      	movs	r3, #128	; 0x80
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be3e:	2309      	movs	r3, #9
 800be40:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800be42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be46:	4619      	mov	r1, r3
 800be48:	4815      	ldr	r0, [pc, #84]	; (800bea0 <QSPI_MspInit+0x280>)
 800be4a:	f001 f9cb 	bl	800d1e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800be4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800be54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be58:	4619      	mov	r1, r3
 800be5a:	4812      	ldr	r0, [pc, #72]	; (800bea4 <QSPI_MspInit+0x284>)
 800be5c:	f001 f9c2 	bl	800d1e4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800be60:	2340      	movs	r3, #64	; 0x40
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800be64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be68:	4619      	mov	r1, r3
 800be6a:	480d      	ldr	r0, [pc, #52]	; (800bea0 <QSPI_MspInit+0x280>)
 800be6c:	f001 f9ba 	bl	800d1e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800be70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800be76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be7a:	4619      	mov	r1, r3
 800be7c:	4809      	ldr	r0, [pc, #36]	; (800bea4 <QSPI_MspInit+0x284>)
 800be7e:	f001 f9b1 	bl	800d1e4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800be82:	2200      	movs	r2, #0
 800be84:	210f      	movs	r1, #15
 800be86:	205c      	movs	r0, #92	; 0x5c
 800be88:	f000 fe9c 	bl	800cbc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800be8c:	205c      	movs	r0, #92	; 0x5c
 800be8e:	f000 feb3 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
}
 800be92:	bf00      	nop
 800be94:	3750      	adds	r7, #80	; 0x50
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	58024400 	.word	0x58024400
 800bea0:	58021400 	.word	0x58021400
 800bea4:	58021800 	.word	0x58021800
 800bea8:	58020c00 	.word	0x58020c00
 800beac:	58021c00 	.word	0x58021c00

0800beb0 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bebc:	2103      	movs	r1, #3
 800bebe:	4830      	ldr	r0, [pc, #192]	; (800bf80 <QSPI_ResetMemory+0xd0>)
 800bec0:	f7fe ff30 	bl	800ad24 <MT25TL01G_ResetEnable>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800beca:	f06f 0304 	mvn.w	r3, #4
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e051      	b.n	800bf76 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bed2:	2103      	movs	r1, #3
 800bed4:	482a      	ldr	r0, [pc, #168]	; (800bf80 <QSPI_ResetMemory+0xd0>)
 800bed6:	f7fe ff57 	bl	800ad88 <MT25TL01G_ResetMemory>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bee0:	f06f 0304 	mvn.w	r3, #4
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	e046      	b.n	800bf76 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bee8:	4926      	ldr	r1, [pc, #152]	; (800bf84 <QSPI_ResetMemory+0xd4>)
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	4613      	mov	r3, r2
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	4413      	add	r3, r2
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	440b      	add	r3, r1
 800bef6:	3301      	adds	r3, #1
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
 800befc:	4820      	ldr	r0, [pc, #128]	; (800bf80 <QSPI_ResetMemory+0xd0>)
 800befe:	f7fe fd54 	bl	800a9aa <MT25TL01G_AutoPollingMemReady>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf08:	f06f 0304 	mvn.w	r3, #4
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	e032      	b.n	800bf76 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf10:	2100      	movs	r1, #0
 800bf12:	481b      	ldr	r0, [pc, #108]	; (800bf80 <QSPI_ResetMemory+0xd0>)
 800bf14:	f7fe ff06 	bl	800ad24 <MT25TL01G_ResetEnable>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf1e:	f06f 0304 	mvn.w	r3, #4
 800bf22:	60fb      	str	r3, [r7, #12]
 800bf24:	e027      	b.n	800bf76 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf26:	2100      	movs	r1, #0
 800bf28:	4815      	ldr	r0, [pc, #84]	; (800bf80 <QSPI_ResetMemory+0xd0>)
 800bf2a:	f7fe ff2d 	bl	800ad88 <MT25TL01G_ResetMemory>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf34:	f06f 0304 	mvn.w	r3, #4
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e01c      	b.n	800bf76 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800bf3c:	4911      	ldr	r1, [pc, #68]	; (800bf84 <QSPI_ResetMemory+0xd4>)
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	4613      	mov	r3, r2
 800bf42:	005b      	lsls	r3, r3, #1
 800bf44:	4413      	add	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800bf4e:	490d      	ldr	r1, [pc, #52]	; (800bf84 <QSPI_ResetMemory+0xd4>)
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	4613      	mov	r3, r2
 800bf54:	005b      	lsls	r3, r3, #1
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	440b      	add	r3, r1
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800bf62:	4908      	ldr	r1, [pc, #32]	; (800bf84 <QSPI_ResetMemory+0xd4>)
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	3302      	adds	r3, #2
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800bf76:	68fb      	ldr	r3, [r7, #12]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	2400027c 	.word	0x2400027c
 800bf84:	2400acd4 	.word	0x2400acd4

0800bf88 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b092      	sub	sp, #72	; 0x48
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800bf90:	2300      	movs	r3, #0
 800bf92:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800bf94:	2300      	movs	r3, #0
 800bf96:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800bf98:	f44f 7340 	mov.w	r3, #768	; 0x300
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800bf9e:	2385      	movs	r3, #133	; 0x85
 800bfa0:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800bfaa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800bfae:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfcc:	4619      	mov	r1, r3
 800bfce:	482b      	ldr	r0, [pc, #172]	; (800c07c <QSPI_DummyCyclesCfg+0xf4>)
 800bfd0:	f003 fa02 	bl	800f3d8 <HAL_QSPI_Command>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800bfda:	f06f 0304 	mvn.w	r3, #4
 800bfde:	e048      	b.n	800c072 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfe0:	f107 030a 	add.w	r3, r7, #10
 800bfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4824      	ldr	r0, [pc, #144]	; (800c07c <QSPI_DummyCyclesCfg+0xf4>)
 800bfec:	f003 fae4 	bl	800f5b8 <HAL_QSPI_Receive>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800bff6:	f06f 0304 	mvn.w	r3, #4
 800bffa:	e03a      	b.n	800c072 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bffc:	4920      	ldr	r1, [pc, #128]	; (800c080 <QSPI_DummyCyclesCfg+0xf8>)
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	3301      	adds	r3, #1
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	4619      	mov	r1, r3
 800c010:	481a      	ldr	r0, [pc, #104]	; (800c07c <QSPI_DummyCyclesCfg+0xf4>)
 800c012:	f7fe fd06 	bl	800aa22 <MT25TL01G_WriteEnable>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c01c:	f06f 0304 	mvn.w	r3, #4
 800c020:	e027      	b.n	800c072 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800c022:	2381      	movs	r3, #129	; 0x81
 800c024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800c026:	897a      	ldrh	r2, [r7, #10]
 800c028:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c02c:	4013      	ands	r3, r2
 800c02e:	b29a      	uxth	r2, r3
 800c030:	4b14      	ldr	r3, [pc, #80]	; (800c084 <QSPI_DummyCyclesCfg+0xfc>)
 800c032:	4313      	orrs	r3, r2
 800c034:	b29b      	uxth	r3, r3
 800c036:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c040:	4619      	mov	r1, r3
 800c042:	480e      	ldr	r0, [pc, #56]	; (800c07c <QSPI_DummyCyclesCfg+0xf4>)
 800c044:	f003 f9c8 	bl	800f3d8 <HAL_QSPI_Command>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c04e:	f06f 0304 	mvn.w	r3, #4
 800c052:	e00e      	b.n	800c072 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c054:	f107 030a 	add.w	r3, r7, #10
 800c058:	f241 3288 	movw	r2, #5000	; 0x1388
 800c05c:	4619      	mov	r1, r3
 800c05e:	4807      	ldr	r0, [pc, #28]	; (800c07c <QSPI_DummyCyclesCfg+0xf4>)
 800c060:	f003 fa18 	bl	800f494 <HAL_QSPI_Transmit>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c06a:	f06f 0304 	mvn.w	r3, #4
 800c06e:	e000      	b.n	800c072 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800c070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c072:	4618      	mov	r0, r3
 800c074:	3748      	adds	r7, #72	; 0x48
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	2400027c 	.word	0x2400027c
 800c080:	2400acd4 	.word	0x2400acd4
 800c084:	ffff8080 	.word	0xffff8080

0800c088 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c090:	2300      	movs	r3, #0
 800c092:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c09a:	f06f 0301 	mvn.w	r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	e044      	b.n	800c12c <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2234      	movs	r2, #52	; 0x34
 800c0a6:	fb02 f303 	mul.w	r3, r2, r3
 800c0aa:	4a23      	ldr	r2, [pc, #140]	; (800c138 <BSP_SDRAM_Init+0xb0>)
 800c0ac:	4413      	add	r3, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f8b8 	bl	800c224 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2234      	movs	r2, #52	; 0x34
 800c0b8:	fb02 f303 	mul.w	r3, r2, r3
 800c0bc:	4a1e      	ldr	r2, [pc, #120]	; (800c138 <BSP_SDRAM_Init+0xb0>)
 800c0be:	4413      	add	r3, r2
 800c0c0:	2210      	movs	r2, #16
 800c0c2:	2104      	movs	r1, #4
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 f861 	bl	800c18c <MX_SDRAM_BANK2_Init>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e029      	b.n	800c12c <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c0d8:	4b18      	ldr	r3, [pc, #96]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0da:	2208      	movs	r2, #8
 800c0dc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800c0de:	4b17      	ldr	r3, [pc, #92]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0e0:	2203      	movs	r2, #3
 800c0e2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c0e4:	4b15      	ldr	r3, [pc, #84]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0e6:	f240 6203 	movw	r2, #1539	; 0x603
 800c0ea:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800c0ec:	4b13      	ldr	r3, [pc, #76]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800c0f2:	4b12      	ldr	r3, [pc, #72]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800c0f8:	4b10      	ldr	r3, [pc, #64]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c0fa:	2230      	movs	r2, #48	; 0x30
 800c0fc:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c100:	2200      	movs	r2, #0
 800c102:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c10a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2234      	movs	r2, #52	; 0x34
 800c110:	fb02 f303 	mul.w	r3, r2, r3
 800c114:	4a08      	ldr	r2, [pc, #32]	; (800c138 <BSP_SDRAM_Init+0xb0>)
 800c116:	4413      	add	r3, r2
 800c118:	4908      	ldr	r1, [pc, #32]	; (800c13c <BSP_SDRAM_Init+0xb4>)
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fe fe66 	bl	800adec <MT48LC4M32B2_Init>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d002      	beq.n	800c12c <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c126:	f06f 0304 	mvn.w	r3, #4
 800c12a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800c12c:	68fb      	ldr	r3, [r7, #12]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	2400ace0 	.word	0x2400ace0
 800c13c:	2400ad14 	.word	0x2400ad14

0800c140 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c152:	f06f 0301 	mvn.w	r3, #1
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e011      	b.n	800c17e <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2234      	movs	r2, #52	; 0x34
 800c15e:	fb02 f303 	mul.w	r3, r2, r3
 800c162:	4a09      	ldr	r2, [pc, #36]	; (800c188 <BSP_SDRAM_DeInit+0x48>)
 800c164:	4413      	add	r3, r2
 800c166:	4618      	mov	r0, r3
 800c168:	f005 ff36 	bl	8011fd8 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2234      	movs	r2, #52	; 0x34
 800c170:	fb02 f303 	mul.w	r3, r2, r3
 800c174:	4a04      	ldr	r2, [pc, #16]	; (800c188 <BSP_SDRAM_DeInit+0x48>)
 800c176:	4413      	add	r3, r2
 800c178:	4618      	mov	r0, r3
 800c17a:	f000 f951 	bl	800c420 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800c17e:	68fb      	ldr	r3, [r7, #12]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	2400ace0 	.word	0x2400ace0

0800c18c <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08c      	sub	sp, #48	; 0x30
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800c198:	4b20      	ldr	r3, [pc, #128]	; (800c21c <MX_SDRAM_BANK2_Init+0x90>)
 800c19a:	4a21      	ldr	r2, [pc, #132]	; (800c220 <MX_SDRAM_BANK2_Init+0x94>)
 800c19c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	68ba      	ldr	r2, [r7, #8]
 800c1ae:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c1b6:	4b19      	ldr	r3, [pc, #100]	; (800c21c <MX_SDRAM_BANK2_Init+0x90>)
 800c1b8:	2240      	movs	r2, #64	; 0x40
 800c1ba:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c1c2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1d8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c1e4:	2307      	movs	r3, #7
 800c1e6:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800c1ec:	2307      	movs	r3, #7
 800c1ee:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c1fc:	f107 0314 	add.w	r3, r7, #20
 800c200:	4619      	mov	r1, r3
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f005 feac 	bl	8011f60 <HAL_SDRAM_Init>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e000      	b.n	800c214 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3730      	adds	r7, #48	; 0x30
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	2400ace0 	.word	0x2400ace0
 800c220:	52004140 	.word	0x52004140

0800c224 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	; 0x38
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c22c:	4b73      	ldr	r3, [pc, #460]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c22e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c232:	4a72      	ldr	r2, [pc, #456]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c238:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c23c:	4b6f      	ldr	r3, [pc, #444]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c23e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c246:	623b      	str	r3, [r7, #32]
 800c248:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800c24a:	4b6c      	ldr	r3, [pc, #432]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c24c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c250:	4a6a      	ldr	r2, [pc, #424]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c25a:	4b68      	ldr	r3, [pc, #416]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c25c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	61fb      	str	r3, [r7, #28]
 800c266:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c268:	4b64      	ldr	r3, [pc, #400]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c26a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c26e:	4a63      	ldr	r2, [pc, #396]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c270:	f043 0308 	orr.w	r3, r3, #8
 800c274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c278:	4b60      	ldr	r3, [pc, #384]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c27a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c27e:	f003 0308 	and.w	r3, r3, #8
 800c282:	61bb      	str	r3, [r7, #24]
 800c284:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c286:	4b5d      	ldr	r3, [pc, #372]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c28c:	4a5b      	ldr	r2, [pc, #364]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c28e:	f043 0310 	orr.w	r3, r3, #16
 800c292:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c296:	4b59      	ldr	r3, [pc, #356]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c2a4:	4b55      	ldr	r3, [pc, #340]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2aa:	4a54      	ldr	r2, [pc, #336]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2ac:	f043 0320 	orr.w	r3, r3, #32
 800c2b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2b4:	4b51      	ldr	r3, [pc, #324]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c2c2:	4b4e      	ldr	r3, [pc, #312]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2c8:	4a4c      	ldr	r2, [pc, #304]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2d2:	4b4a      	ldr	r3, [pc, #296]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2dc:	60fb      	str	r3, [r7, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c2e0:	4b46      	ldr	r3, [pc, #280]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2e6:	4a45      	ldr	r2, [pc, #276]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2f0:	4b42      	ldr	r3, [pc, #264]	; (800c3fc <SDRAM_MspInit+0x1d8>)
 800c2f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2fa:	60bb      	str	r3, [r7, #8]
 800c2fc:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c2fe:	2302      	movs	r3, #2
 800c300:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c302:	2301      	movs	r3, #1
 800c304:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c306:	2303      	movs	r3, #3
 800c308:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c30a:	230c      	movs	r3, #12
 800c30c:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800c30e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c318:	4619      	mov	r1, r3
 800c31a:	4839      	ldr	r0, [pc, #228]	; (800c400 <SDRAM_MspInit+0x1dc>)
 800c31c:	f000 ff62 	bl	800d1e4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c320:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c324:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c32a:	4619      	mov	r1, r3
 800c32c:	4835      	ldr	r0, [pc, #212]	; (800c404 <SDRAM_MspInit+0x1e0>)
 800c32e:	f000 ff59 	bl	800d1e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c332:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c33c:	4619      	mov	r1, r3
 800c33e:	4832      	ldr	r0, [pc, #200]	; (800c408 <SDRAM_MspInit+0x1e4>)
 800c340:	f000 ff50 	bl	800d1e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800c344:	f248 1333 	movw	r3, #33075	; 0x8133
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c34a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c34e:	4619      	mov	r1, r3
 800c350:	482e      	ldr	r0, [pc, #184]	; (800c40c <SDRAM_MspInit+0x1e8>)
 800c352:	f000 ff47 	bl	800d1e4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800c356:	23e0      	movs	r3, #224	; 0xe0
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c35e:	4619      	mov	r1, r3
 800c360:	482b      	ldr	r0, [pc, #172]	; (800c410 <SDRAM_MspInit+0x1ec>)
 800c362:	f000 ff3f 	bl	800d1e4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800c366:	4b2b      	ldr	r3, [pc, #172]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c36c:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800c36e:	4b29      	ldr	r3, [pc, #164]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c374:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800c376:	4b27      	ldr	r3, [pc, #156]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c378:	2280      	movs	r2, #128	; 0x80
 800c37a:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c37c:	4b25      	ldr	r3, [pc, #148]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c37e:	2200      	movs	r2, #0
 800c380:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800c382:	4b24      	ldr	r3, [pc, #144]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c384:	f240 2202 	movw	r2, #514	; 0x202
 800c388:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800c38a:	4b22      	ldr	r3, [pc, #136]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c38c:	f640 0208 	movw	r2, #2056	; 0x808
 800c390:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800c392:	4b20      	ldr	r3, [pc, #128]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c394:	2220      	movs	r2, #32
 800c396:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800c398:	4b1e      	ldr	r3, [pc, #120]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c39a:	2280      	movs	r2, #128	; 0x80
 800c39c:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800c39e:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c3a4:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800c3a6:	4b1b      	ldr	r3, [pc, #108]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800c3ac:	4b19      	ldr	r3, [pc, #100]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800c3b2:	4b18      	ldr	r3, [pc, #96]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3b4:	2280      	movs	r2, #128	; 0x80
 800c3b6:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800c3b8:	4b16      	ldr	r3, [pc, #88]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800c3be:	4b15      	ldr	r3, [pc, #84]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c3c4:	4b13      	ldr	r3, [pc, #76]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3c6:	4a14      	ldr	r2, [pc, #80]	; (800c418 <SDRAM_MspInit+0x1f4>)
 800c3c8:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <SDRAM_MspInit+0x1f8>)
 800c3cc:	4a11      	ldr	r2, [pc, #68]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3ce:	631a      	str	r2, [r3, #48]	; 0x30
 800c3d0:	4b10      	ldr	r3, [pc, #64]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3d2:	4a12      	ldr	r2, [pc, #72]	; (800c41c <SDRAM_MspInit+0x1f8>)
 800c3d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800c3d6:	480f      	ldr	r0, [pc, #60]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3d8:	f002 fc5e 	bl	800ec98 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800c3dc:	480d      	ldr	r0, [pc, #52]	; (800c414 <SDRAM_MspInit+0x1f0>)
 800c3de:	f002 fc0f 	bl	800ec00 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	210f      	movs	r1, #15
 800c3e6:	207a      	movs	r0, #122	; 0x7a
 800c3e8:	f000 fbec 	bl	800cbc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800c3ec:	207a      	movs	r0, #122	; 0x7a
 800c3ee:	f000 fc03 	bl	800cbf8 <HAL_NVIC_EnableIRQ>
}
 800c3f2:	bf00      	nop
 800c3f4:	3738      	adds	r7, #56	; 0x38
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	58024400 	.word	0x58024400
 800c400:	58020c00 	.word	0x58020c00
 800c404:	58021000 	.word	0x58021000
 800c408:	58021400 	.word	0x58021400
 800c40c:	58021800 	.word	0x58021800
 800c410:	58021c00 	.word	0x58021c00
 800c414:	2400ad34 	.word	0x2400ad34
 800c418:	52000040 	.word	0x52000040
 800c41c:	2400ace0 	.word	0x2400ace0

0800c420 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800c428:	207a      	movs	r0, #122	; 0x7a
 800c42a:	f000 fbf3 	bl	800cc14 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c42e:	4b05      	ldr	r3, [pc, #20]	; (800c444 <SDRAM_MspDeInit+0x24>)
 800c430:	4a05      	ldr	r2, [pc, #20]	; (800c448 <SDRAM_MspDeInit+0x28>)
 800c432:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c434:	4803      	ldr	r0, [pc, #12]	; (800c444 <SDRAM_MspDeInit+0x24>)
 800c436:	f002 fc2f 	bl	800ec98 <HAL_MDMA_DeInit>
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	2400ada0 	.word	0x2400ada0
 800c448:	52000040 	.word	0x52000040

0800c44c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c456:	2300      	movs	r3, #0
 800c458:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d11c      	bne.n	800c49a <BSP_TS_Init+0x4e>
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d018      	beq.n	800c49a <BSP_TS_Init+0x4e>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c470:	d813      	bhi.n	800c49a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00f      	beq.n	800c49a <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c482:	d80a      	bhi.n	800c49a <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	6819      	ldr	r1, [r3, #0]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	428b      	cmp	r3, r1
 800c492:	bf28      	it	cs
 800c494:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c496:	429a      	cmp	r2, r3
 800c498:	d903      	bls.n	800c4a2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c49a:	f06f 0301 	mvn.w	r3, #1
 800c49e:	61fb      	str	r3, [r7, #28]
 800c4a0:	e085      	b.n	800c5ae <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f9e6 	bl	800c874 <FT5336_Probe>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800c4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b2:	61fb      	str	r3, [r7, #28]
 800c4b4:	e07b      	b.n	800c5ae <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	6819      	ldr	r1, [r3, #0]
 800c4ba:	483f      	ldr	r0, [pc, #252]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	4413      	add	r3, r2
 800c4c4:	00db      	lsls	r3, r3, #3
 800c4c6:	4403      	add	r3, r0
 800c4c8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6859      	ldr	r1, [r3, #4]
 800c4ce:	483a      	ldr	r0, [pc, #232]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	009b      	lsls	r3, r3, #2
 800c4d6:	4413      	add	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	4403      	add	r3, r0
 800c4dc:	3304      	adds	r3, #4
 800c4de:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	6899      	ldr	r1, [r3, #8]
 800c4e4:	4834      	ldr	r0, [pc, #208]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	4403      	add	r3, r0
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	68d9      	ldr	r1, [r3, #12]
 800c4fa:	482f      	ldr	r0, [pc, #188]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	4613      	mov	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	4403      	add	r3, r0
 800c508:	330c      	adds	r3, #12
 800c50a:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c50c:	4b2b      	ldr	r3, [pc, #172]	; (800c5bc <BSP_TS_Init+0x170>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	492b      	ldr	r1, [pc, #172]	; (800c5c0 <BSP_TS_Init+0x174>)
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c51a:	f107 010c 	add.w	r1, r7, #12
 800c51e:	4610      	mov	r0, r2
 800c520:	4798      	blx	r3
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	da03      	bge.n	800c530 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c528:	f06f 0304 	mvn.w	r3, #4
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	e03e      	b.n	800c5ae <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c530:	6939      	ldr	r1, [r7, #16]
 800c532:	4821      	ldr	r0, [pc, #132]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	4403      	add	r3, r0
 800c540:	3310      	adds	r3, #16
 800c542:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c544:	6979      	ldr	r1, [r7, #20]
 800c546:	481c      	ldr	r0, [pc, #112]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	4613      	mov	r3, r2
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	00db      	lsls	r3, r3, #3
 800c552:	4403      	add	r3, r0
 800c554:	3314      	adds	r3, #20
 800c556:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c558:	2300      	movs	r3, #0
 800c55a:	61bb      	str	r3, [r7, #24]
 800c55c:	e024      	b.n	800c5a8 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	4413      	add	r3, r2
 800c568:	1c59      	adds	r1, r3, #1
 800c56a:	4813      	ldr	r0, [pc, #76]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	4613      	mov	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	69ba      	ldr	r2, [r7, #24]
 800c578:	4413      	add	r3, r2
 800c57a:	3306      	adds	r3, #6
 800c57c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4413      	add	r3, r2
 800c58a:	1c59      	adds	r1, r3, #1
 800c58c:	480a      	ldr	r0, [pc, #40]	; (800c5b8 <BSP_TS_Init+0x16c>)
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	69ba      	ldr	r2, [r7, #24]
 800c59a:	4413      	add	r3, r2
 800c59c:	3308      	adds	r3, #8
 800c59e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	61bb      	str	r3, [r7, #24]
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d9d7      	bls.n	800c55e <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800c5ae:	69fb      	ldr	r3, [r7, #28]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3720      	adds	r7, #32
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	2400ae14 	.word	0x2400ae14
 800c5bc:	2400ae0c 	.word	0x2400ae0c
 800c5c0:	2400ae10 	.word	0x2400ae10

0800c5c4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08a      	sub	sp, #40	; 0x28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c5d8:	f06f 0301 	mvn.w	r3, #1
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	e13e      	b.n	800c85e <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c5e0:	4ba1      	ldr	r3, [pc, #644]	; (800c868 <BSP_TS_GetState+0x2a4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	49a1      	ldr	r1, [pc, #644]	; (800c86c <BSP_TS_GetState+0x2a8>)
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c5ee:	f107 0108 	add.w	r1, r7, #8
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	4798      	blx	r3
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da03      	bge.n	800c604 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5fc:	f06f 0304 	mvn.w	r3, #4
 800c600:	627b      	str	r3, [r7, #36]	; 0x24
 800c602:	e12c      	b.n	800c85e <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 8110 	beq.w	800c82c <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c614:	4996      	ldr	r1, [pc, #600]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	4613      	mov	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4413      	add	r3, r2
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	440b      	add	r3, r1
 800c622:	3308      	adds	r3, #8
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 0308 	and.w	r3, r3, #8
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d003      	beq.n	800c636 <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c636:	498e      	ldr	r1, [pc, #568]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	440b      	add	r3, r1
 800c644:	3308      	adds	r3, #8
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0302 	and.w	r3, r3, #2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800c650:	4987      	ldr	r1, [pc, #540]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	4613      	mov	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	440b      	add	r3, r1
 800c65e:	3310      	adds	r3, #16
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	1ad3      	subs	r3, r2, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c66a:	4981      	ldr	r1, [pc, #516]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	00db      	lsls	r3, r3, #3
 800c676:	440b      	add	r3, r1
 800c678:	3308      	adds	r3, #8
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00b      	beq.n	800c69c <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800c684:	497a      	ldr	r1, [pc, #488]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	4613      	mov	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	440b      	add	r3, r1
 800c692:	3314      	adds	r3, #20
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c69c:	4974      	ldr	r1, [pc, #464]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	440b      	add	r3, r1
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	6a3a      	ldr	r2, [r7, #32]
 800c6ae:	fb02 f103 	mul.w	r1, r2, r3
 800c6b2:	486f      	ldr	r0, [pc, #444]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	00db      	lsls	r3, r3, #3
 800c6be:	4403      	add	r3, r0
 800c6c0:	3310      	adds	r3, #16
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	fbb1 f2f3 	udiv	r2, r1, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c6cc:	4968      	ldr	r1, [pc, #416]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	440b      	add	r3, r1
 800c6da:	3304      	adds	r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	69fa      	ldr	r2, [r7, #28]
 800c6e0:	fb02 f103 	mul.w	r1, r2, r3
 800c6e4:	4862      	ldr	r0, [pc, #392]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	4403      	add	r3, r0
 800c6f2:	3314      	adds	r3, #20
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	fbb1 f2f3 	udiv	r2, r1, r3
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	6859      	ldr	r1, [r3, #4]
 800c708:	4859      	ldr	r0, [pc, #356]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	00db      	lsls	r3, r3, #3
 800c714:	4403      	add	r3, r0
 800c716:	3318      	adds	r3, #24
 800c718:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c71a:	4299      	cmp	r1, r3
 800c71c:	d90c      	bls.n	800c738 <BSP_TS_GetState+0x174>
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	6859      	ldr	r1, [r3, #4]
 800c722:	4853      	ldr	r0, [pc, #332]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	4613      	mov	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	4403      	add	r3, r0
 800c730:	3318      	adds	r3, #24
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	1acb      	subs	r3, r1, r3
 800c736:	e00b      	b.n	800c750 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800c738:	494d      	ldr	r1, [pc, #308]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	440b      	add	r3, r1
 800c746:	3318      	adds	r3, #24
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c74e:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c750:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	6899      	ldr	r1, [r3, #8]
 800c756:	4846      	ldr	r0, [pc, #280]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	4613      	mov	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	4403      	add	r3, r0
 800c764:	3320      	adds	r3, #32
 800c766:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c768:	4299      	cmp	r1, r3
 800c76a:	d90c      	bls.n	800c786 <BSP_TS_GetState+0x1c2>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	6899      	ldr	r1, [r3, #8]
 800c770:	483f      	ldr	r0, [pc, #252]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	4403      	add	r3, r0
 800c77e:	3320      	adds	r3, #32
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	1acb      	subs	r3, r1, r3
 800c784:	e00b      	b.n	800c79e <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800c786:	493a      	ldr	r1, [pc, #232]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3320      	adds	r3, #32
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c79c:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c79e:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c7a0:	4933      	ldr	r1, [pc, #204]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	440b      	add	r3, r1
 800c7ae:	330c      	adds	r3, #12
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	69ba      	ldr	r2, [r7, #24]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d80b      	bhi.n	800c7d0 <BSP_TS_GetState+0x20c>
 800c7b8:	492d      	ldr	r1, [pc, #180]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	440b      	add	r3, r1
 800c7c6:	330c      	adds	r3, #12
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d916      	bls.n	800c7fe <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	6859      	ldr	r1, [r3, #4]
 800c7d4:	4826      	ldr	r0, [pc, #152]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	4403      	add	r3, r0
 800c7e2:	3318      	adds	r3, #24
 800c7e4:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	6899      	ldr	r1, [r3, #8]
 800c7ea:	4821      	ldr	r0, [pc, #132]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	4403      	add	r3, r0
 800c7f8:	3320      	adds	r3, #32
 800c7fa:	6019      	str	r1, [r3, #0]
 800c7fc:	e02f      	b.n	800c85e <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c7fe:	491c      	ldr	r1, [pc, #112]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	3318      	adds	r3, #24
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c814:	4916      	ldr	r1, [pc, #88]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	440b      	add	r3, r1
 800c822:	3320      	adds	r3, #32
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	609a      	str	r2, [r3, #8]
 800c82a:	e018      	b.n	800c85e <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c832:	490f      	ldr	r1, [pc, #60]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3318      	adds	r3, #24
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c848:	4909      	ldr	r1, [pc, #36]	; (800c870 <BSP_TS_GetState+0x2ac>)
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4613      	mov	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	440b      	add	r3, r1
 800c856:	3320      	adds	r3, #32
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c860:	4618      	mov	r0, r3
 800c862:	3728      	adds	r7, #40	; 0x28
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	2400ae0c 	.word	0x2400ae0c
 800c86c:	2400ae10 	.word	0x2400ae10
 800c870:	2400ae14 	.word	0x2400ae14

0800c874 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08a      	sub	sp, #40	; 0x28
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800c884:	2370      	movs	r3, #112	; 0x70
 800c886:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800c888:	4b23      	ldr	r3, [pc, #140]	; (800c918 <FT5336_Probe+0xa4>)
 800c88a:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c88c:	4b23      	ldr	r3, [pc, #140]	; (800c91c <FT5336_Probe+0xa8>)
 800c88e:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c890:	4b23      	ldr	r3, [pc, #140]	; (800c920 <FT5336_Probe+0xac>)
 800c892:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <FT5336_Probe+0xb0>)
 800c896:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800c898:	4b23      	ldr	r3, [pc, #140]	; (800c928 <FT5336_Probe+0xb4>)
 800c89a:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800c89c:	f107 030c 	add.w	r3, r7, #12
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	4822      	ldr	r0, [pc, #136]	; (800c92c <FT5336_Probe+0xb8>)
 800c8a4:	f7fd fcb2 	bl	800a20c <FT5336_RegisterBusIO>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800c8ae:	f06f 0307 	mvn.w	r3, #7
 800c8b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b4:	e02a      	b.n	800c90c <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800c8b6:	f107 0308 	add.w	r3, r7, #8
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	481b      	ldr	r0, [pc, #108]	; (800c92c <FT5336_Probe+0xb8>)
 800c8be:	f7fd fd9f 	bl	800a400 <FT5336_ReadID>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c8c8:	f06f 0304 	mvn.w	r3, #4
 800c8cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ce:	e01d      	b.n	800c90c <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2b51      	cmp	r3, #81	; 0x51
 800c8d4:	d003      	beq.n	800c8de <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c8d6:	f06f 0306 	mvn.w	r3, #6
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
 800c8dc:	e016      	b.n	800c90c <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800c8de:	4a14      	ldr	r2, [pc, #80]	; (800c930 <FT5336_Probe+0xbc>)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4912      	ldr	r1, [pc, #72]	; (800c92c <FT5336_Probe+0xb8>)
 800c8e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800c8e8:	4b12      	ldr	r3, [pc, #72]	; (800c934 <FT5336_Probe+0xc0>)
 800c8ea:	4a13      	ldr	r2, [pc, #76]	; (800c938 <FT5336_Probe+0xc4>)
 800c8ec:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800c8ee:	4b11      	ldr	r3, [pc, #68]	; (800c934 <FT5336_Probe+0xc0>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	490e      	ldr	r1, [pc, #56]	; (800c930 <FT5336_Probe+0xbc>)
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d002      	beq.n	800c90c <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c906:	f06f 0304 	mvn.w	r3, #4
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	0800b005 	.word	0x0800b005
 800c91c:	0800b079 	.word	0x0800b079
 800c920:	0800b1a1 	.word	0x0800b1a1
 800c924:	0800b145 	.word	0x0800b145
 800c928:	0800b1fd 	.word	0x0800b1fd
 800c92c:	2400ae3c 	.word	0x2400ae3c
 800c930:	2400ae10 	.word	0x2400ae10
 800c934:	2400ae0c 	.word	0x2400ae0c
 800c938:	24000018 	.word	0x24000018

0800c93c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c942:	2003      	movs	r0, #3
 800c944:	f000 f933 	bl	800cbae <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c948:	f004 f848 	bl	80109dc <HAL_RCC_GetSysClockFreq>
 800c94c:	4602      	mov	r2, r0
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <HAL_Init+0x68>)
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	0a1b      	lsrs	r3, r3, #8
 800c954:	f003 030f 	and.w	r3, r3, #15
 800c958:	4913      	ldr	r1, [pc, #76]	; (800c9a8 <HAL_Init+0x6c>)
 800c95a:	5ccb      	ldrb	r3, [r1, r3]
 800c95c:	f003 031f 	and.w	r3, r3, #31
 800c960:	fa22 f303 	lsr.w	r3, r2, r3
 800c964:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <HAL_Init+0x68>)
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	f003 030f 	and.w	r3, r3, #15
 800c96e:	4a0e      	ldr	r2, [pc, #56]	; (800c9a8 <HAL_Init+0x6c>)
 800c970:	5cd3      	ldrb	r3, [r2, r3]
 800c972:	f003 031f 	and.w	r3, r3, #31
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	fa22 f303 	lsr.w	r3, r2, r3
 800c97c:	4a0b      	ldr	r2, [pc, #44]	; (800c9ac <HAL_Init+0x70>)
 800c97e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c980:	4a0b      	ldr	r2, [pc, #44]	; (800c9b0 <HAL_Init+0x74>)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c986:	200f      	movs	r0, #15
 800c988:	f7f4 fd14 	bl	80013b4 <HAL_InitTick>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d001      	beq.n	800c996 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e002      	b.n	800c99c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800c996:	f7f4 f99f 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	080259e8 	.word	0x080259e8
 800c9ac:	24000014 	.word	0x24000014
 800c9b0:	24000010 	.word	0x24000010

0800c9b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c9b8:	4b06      	ldr	r3, [pc, #24]	; (800c9d4 <HAL_IncTick+0x20>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <HAL_IncTick+0x24>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	4a04      	ldr	r2, [pc, #16]	; (800c9d8 <HAL_IncTick+0x24>)
 800c9c6:	6013      	str	r3, [r2, #0]
}
 800c9c8:	bf00      	nop
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	2400004c 	.word	0x2400004c
 800c9d8:	2400ae64 	.word	0x2400ae64

0800c9dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
  return uwTick;
 800c9e0:	4b03      	ldr	r3, [pc, #12]	; (800c9f0 <HAL_GetTick+0x14>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	2400ae64 	.word	0x2400ae64

0800c9f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800c9f8:	4b03      	ldr	r3, [pc, #12]	; (800ca08 <HAL_GetREVID+0x14>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	0c1b      	lsrs	r3, r3, #16
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	5c001000 	.word	0x5c001000

0800ca0c <__NVIC_SetPriorityGrouping>:
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca1c:	4b0b      	ldr	r3, [pc, #44]	; (800ca4c <__NVIC_SetPriorityGrouping+0x40>)
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ca28:	4013      	ands	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ca34:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <__NVIC_SetPriorityGrouping+0x44>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ca3a:	4a04      	ldr	r2, [pc, #16]	; (800ca4c <__NVIC_SetPriorityGrouping+0x40>)
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	60d3      	str	r3, [r2, #12]
}
 800ca40:	bf00      	nop
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	e000ed00 	.word	0xe000ed00
 800ca50:	05fa0000 	.word	0x05fa0000

0800ca54 <__NVIC_GetPriorityGrouping>:
{
 800ca54:	b480      	push	{r7}
 800ca56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ca58:	4b04      	ldr	r3, [pc, #16]	; (800ca6c <__NVIC_GetPriorityGrouping+0x18>)
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	0a1b      	lsrs	r3, r3, #8
 800ca5e:	f003 0307 	and.w	r3, r3, #7
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr
 800ca6c:	e000ed00 	.word	0xe000ed00

0800ca70 <__NVIC_EnableIRQ>:
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ca7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	db0b      	blt.n	800ca9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ca82:	88fb      	ldrh	r3, [r7, #6]
 800ca84:	f003 021f 	and.w	r2, r3, #31
 800ca88:	4907      	ldr	r1, [pc, #28]	; (800caa8 <__NVIC_EnableIRQ+0x38>)
 800ca8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ca8e:	095b      	lsrs	r3, r3, #5
 800ca90:	2001      	movs	r0, #1
 800ca92:	fa00 f202 	lsl.w	r2, r0, r2
 800ca96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	e000e100 	.word	0xe000e100

0800caac <__NVIC_DisableIRQ>:
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	4603      	mov	r3, r0
 800cab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	db12      	blt.n	800cae4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	f003 021f 	and.w	r2, r3, #31
 800cac4:	490a      	ldr	r1, [pc, #40]	; (800caf0 <__NVIC_DisableIRQ+0x44>)
 800cac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caca:	095b      	lsrs	r3, r3, #5
 800cacc:	2001      	movs	r0, #1
 800cace:	fa00 f202 	lsl.w	r2, r0, r2
 800cad2:	3320      	adds	r3, #32
 800cad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cad8:	f3bf 8f4f 	dsb	sy
}
 800cadc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cade:	f3bf 8f6f 	isb	sy
}
 800cae2:	bf00      	nop
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	e000e100 	.word	0xe000e100

0800caf4 <__NVIC_SetPriority>:
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	6039      	str	r1, [r7, #0]
 800cafe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	db0a      	blt.n	800cb1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	b2da      	uxtb	r2, r3
 800cb0c:	490c      	ldr	r1, [pc, #48]	; (800cb40 <__NVIC_SetPriority+0x4c>)
 800cb0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb12:	0112      	lsls	r2, r2, #4
 800cb14:	b2d2      	uxtb	r2, r2
 800cb16:	440b      	add	r3, r1
 800cb18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cb1c:	e00a      	b.n	800cb34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	4908      	ldr	r1, [pc, #32]	; (800cb44 <__NVIC_SetPriority+0x50>)
 800cb24:	88fb      	ldrh	r3, [r7, #6]
 800cb26:	f003 030f 	and.w	r3, r3, #15
 800cb2a:	3b04      	subs	r3, #4
 800cb2c:	0112      	lsls	r2, r2, #4
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	440b      	add	r3, r1
 800cb32:	761a      	strb	r2, [r3, #24]
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	e000e100 	.word	0xe000e100
 800cb44:	e000ed00 	.word	0xe000ed00

0800cb48 <NVIC_EncodePriority>:
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b089      	sub	sp, #36	; 0x24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f003 0307 	and.w	r3, r3, #7
 800cb5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	f1c3 0307 	rsb	r3, r3, #7
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	bf28      	it	cs
 800cb66:	2304      	movcs	r3, #4
 800cb68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	2b06      	cmp	r3, #6
 800cb70:	d902      	bls.n	800cb78 <NVIC_EncodePriority+0x30>
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	3b03      	subs	r3, #3
 800cb76:	e000      	b.n	800cb7a <NVIC_EncodePriority+0x32>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	fa02 f303 	lsl.w	r3, r2, r3
 800cb86:	43da      	mvns	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	401a      	ands	r2, r3
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cb90:	f04f 31ff 	mov.w	r1, #4294967295
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	fa01 f303 	lsl.w	r3, r1, r3
 800cb9a:	43d9      	mvns	r1, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cba0:	4313      	orrs	r3, r2
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3724      	adds	r7, #36	; 0x24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff ff28 	bl	800ca0c <__NVIC_SetPriorityGrouping>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cbd2:	f7ff ff3f 	bl	800ca54 <__NVIC_GetPriorityGrouping>
 800cbd6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	68b9      	ldr	r1, [r7, #8]
 800cbdc:	6978      	ldr	r0, [r7, #20]
 800cbde:	f7ff ffb3 	bl	800cb48 <NVIC_EncodePriority>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff ff82 	bl	800caf4 <__NVIC_SetPriority>
}
 800cbf0:	bf00      	nop
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff ff32 	bl	800ca70 <__NVIC_EnableIRQ>
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cc1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff ff42 	bl	800caac <__NVIC_DisableIRQ>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cc30:	b480      	push	{r7}
 800cc32:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cc34:	f3bf 8f5f 	dmb	sy
}
 800cc38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800cc3a:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <HAL_MPU_Disable+0x28>)
 800cc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3e:	4a06      	ldr	r2, [pc, #24]	; (800cc58 <HAL_MPU_Disable+0x28>)
 800cc40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800cc46:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <HAL_MPU_Disable+0x2c>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	605a      	str	r2, [r3, #4]
}
 800cc4c:	bf00      	nop
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	e000ed00 	.word	0xe000ed00
 800cc5c:	e000ed90 	.word	0xe000ed90

0800cc60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800cc68:	4a0b      	ldr	r2, [pc, #44]	; (800cc98 <HAL_MPU_Enable+0x38>)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f043 0301 	orr.w	r3, r3, #1
 800cc70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cc72:	4b0a      	ldr	r3, [pc, #40]	; (800cc9c <HAL_MPU_Enable+0x3c>)
 800cc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc76:	4a09      	ldr	r2, [pc, #36]	; (800cc9c <HAL_MPU_Enable+0x3c>)
 800cc78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800cc7e:	f3bf 8f4f 	dsb	sy
}
 800cc82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cc84:	f3bf 8f6f 	isb	sy
}
 800cc88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800cc8a:	bf00      	nop
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	e000ed90 	.word	0xe000ed90
 800cc9c:	e000ed00 	.word	0xe000ed00

0800cca0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	785a      	ldrb	r2, [r3, #1]
 800ccac:	4b1d      	ldr	r3, [pc, #116]	; (800cd24 <HAL_MPU_ConfigRegion+0x84>)
 800ccae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d029      	beq.n	800cd0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800ccb8:	4a1a      	ldr	r2, [pc, #104]	; (800cd24 <HAL_MPU_ConfigRegion+0x84>)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7b1b      	ldrb	r3, [r3, #12]
 800ccc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7adb      	ldrb	r3, [r3, #11]
 800ccca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cccc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	7a9b      	ldrb	r3, [r3, #10]
 800ccd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800ccd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	7b5b      	ldrb	r3, [r3, #13]
 800ccda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800ccdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	7b9b      	ldrb	r3, [r3, #14]
 800cce2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cce4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7bdb      	ldrb	r3, [r3, #15]
 800ccea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800ccec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	7a5b      	ldrb	r3, [r3, #9]
 800ccf2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800ccf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	7a1b      	ldrb	r3, [r3, #8]
 800ccfa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800ccfc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	7812      	ldrb	r2, [r2, #0]
 800cd02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd04:	4a07      	ldr	r2, [pc, #28]	; (800cd24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cd06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cd0a:	e005      	b.n	800cd18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800cd0c:	4b05      	ldr	r3, [pc, #20]	; (800cd24 <HAL_MPU_ConfigRegion+0x84>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800cd12:	4b04      	ldr	r3, [pc, #16]	; (800cd24 <HAL_MPU_ConfigRegion+0x84>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	611a      	str	r2, [r3, #16]
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	e000ed90 	.word	0xe000ed90

0800cd28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e054      	b.n	800cde4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7f5b      	ldrb	r3, [r3, #29]
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d105      	bne.n	800cd50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7f3 ffe2 	bl	8000d14 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2202      	movs	r2, #2
 800cd54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	791b      	ldrb	r3, [r3, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10c      	bne.n	800cd78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a22      	ldr	r2, [pc, #136]	; (800cdec <HAL_CRC_Init+0xc4>)
 800cd64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689a      	ldr	r2, [r3, #8]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 0218 	bic.w	r2, r2, #24
 800cd74:	609a      	str	r2, [r3, #8]
 800cd76:	e00c      	b.n	800cd92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6899      	ldr	r1, [r3, #8]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	461a      	mov	r2, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 f834 	bl	800cdf0 <HAL_CRCEx_Polynomial_Set>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e028      	b.n	800cde4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	795b      	ldrb	r3, [r3, #5]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d105      	bne.n	800cda6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cda2:	611a      	str	r2, [r3, #16]
 800cda4:	e004      	b.n	800cdb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	6912      	ldr	r2, [r2, #16]
 800cdae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695a      	ldr	r2, [r3, #20]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	689b      	ldr	r3, [r3, #8]
 800cdcc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	699a      	ldr	r2, [r3, #24]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	04c11db7 	.word	0x04c11db7

0800cdf0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ce00:	231f      	movs	r3, #31
 800ce02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ce04:	bf00      	nop
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	1e5a      	subs	r2, r3, #1
 800ce0a:	613a      	str	r2, [r7, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d009      	beq.n	800ce24 <HAL_CRCEx_Polynomial_Set+0x34>
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f003 031f 	and.w	r3, r3, #31
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	fa22 f303 	lsr.w	r3, r2, r3
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0f0      	beq.n	800ce06 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b18      	cmp	r3, #24
 800ce28:	d846      	bhi.n	800ceb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800ce2a:	a201      	add	r2, pc, #4	; (adr r2, 800ce30 <HAL_CRCEx_Polynomial_Set+0x40>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800cebf 	.word	0x0800cebf
 800ce34:	0800ceb9 	.word	0x0800ceb9
 800ce38:	0800ceb9 	.word	0x0800ceb9
 800ce3c:	0800ceb9 	.word	0x0800ceb9
 800ce40:	0800ceb9 	.word	0x0800ceb9
 800ce44:	0800ceb9 	.word	0x0800ceb9
 800ce48:	0800ceb9 	.word	0x0800ceb9
 800ce4c:	0800ceb9 	.word	0x0800ceb9
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800ceb9 	.word	0x0800ceb9
 800ce58:	0800ceb9 	.word	0x0800ceb9
 800ce5c:	0800ceb9 	.word	0x0800ceb9
 800ce60:	0800ceb9 	.word	0x0800ceb9
 800ce64:	0800ceb9 	.word	0x0800ceb9
 800ce68:	0800ceb9 	.word	0x0800ceb9
 800ce6c:	0800ceb9 	.word	0x0800ceb9
 800ce70:	0800cea1 	.word	0x0800cea1
 800ce74:	0800ceb9 	.word	0x0800ceb9
 800ce78:	0800ceb9 	.word	0x0800ceb9
 800ce7c:	0800ceb9 	.word	0x0800ceb9
 800ce80:	0800ceb9 	.word	0x0800ceb9
 800ce84:	0800ceb9 	.word	0x0800ceb9
 800ce88:	0800ceb9 	.word	0x0800ceb9
 800ce8c:	0800ceb9 	.word	0x0800ceb9
 800ce90:	0800ce95 	.word	0x0800ce95
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	2b06      	cmp	r3, #6
 800ce98:	d913      	bls.n	800cec2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ce9e:	e010      	b.n	800cec2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	2b07      	cmp	r3, #7
 800cea4:	d90f      	bls.n	800cec6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ceaa:	e00c      	b.n	800cec6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2b0f      	cmp	r3, #15
 800ceb0:	d90b      	bls.n	800ceca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ceb6:	e008      	b.n	800ceca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]
      break;
 800cebc:	e006      	b.n	800cecc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800cebe:	bf00      	nop
 800cec0:	e004      	b.n	800cecc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800cec2:	bf00      	nop
 800cec4:	e002      	b.n	800cecc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800cec6:	bf00      	nop
 800cec8:	e000      	b.n	800cecc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800ceca:	bf00      	nop
  }
  if (status == HAL_OK)
 800cecc:	7dfb      	ldrb	r3, [r7, #23]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10d      	bne.n	800ceee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f023 0118 	bic.w	r1, r3, #24
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	430a      	orrs	r2, r1
 800ceec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	371c      	adds	r7, #28
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e04f      	b.n	800cfae <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d106      	bne.n	800cf28 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7f3 ff18 	bl	8000d58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	4b20      	ldr	r3, [pc, #128]	; (800cfb8 <HAL_DMA2D_Init+0xbc>)
 800cf38:	4013      	ands	r3, r2
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	6851      	ldr	r1, [r2, #4]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	69d2      	ldr	r2, [r2, #28]
 800cf42:	4311      	orrs	r1, r2
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6812      	ldr	r2, [r2, #0]
 800cf48:	430b      	orrs	r3, r1
 800cf4a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf52:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <HAL_DMA2D_Init+0xc0>)
 800cf54:	4013      	ands	r3, r2
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	6891      	ldr	r1, [r2, #8]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6992      	ldr	r2, [r2, #24]
 800cf5e:	4311      	orrs	r1, r2
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	6812      	ldr	r2, [r2, #0]
 800cf64:	430b      	orrs	r3, r1
 800cf66:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf6e:	4b14      	ldr	r3, [pc, #80]	; (800cfc0 <HAL_DMA2D_Init+0xc4>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	68d1      	ldr	r1, [r2, #12]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	6812      	ldr	r2, [r2, #0]
 800cf7a:	430b      	orrs	r3, r1
 800cf7c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf84:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	051a      	lsls	r2, r3, #20
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	055b      	lsls	r3, r3, #21
 800cf94:	431a      	orrs	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	fff8ffbf 	.word	0xfff8ffbf
 800cfbc:	fffffef8 	.word	0xfffffef8
 800cfc0:	ffff0000 	.word	0xffff0000

0800cfc4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d026      	beq.n	800d034 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d021      	beq.n	800d034 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cffe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d004:	f043 0201 	orr.w	r2, r3, #1
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2201      	movs	r2, #1
 800d012:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2204      	movs	r2, #4
 800d018:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d003      	beq.n	800d034 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0320 	and.w	r3, r3, #32
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d026      	beq.n	800d08c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d044:	2b00      	cmp	r3, #0
 800d046:	d021      	beq.n	800d08c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d056:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2220      	movs	r2, #32
 800d05e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d064:	f043 0202 	orr.w	r2, r3, #2
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2204      	movs	r2, #4
 800d070:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f003 0308 	and.w	r3, r3, #8
 800d092:	2b00      	cmp	r3, #0
 800d094:	d026      	beq.n	800d0e4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d021      	beq.n	800d0e4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0ae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2208      	movs	r2, #8
 800d0b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0bc:	f043 0204 	orr.w	r2, r3, #4
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2204      	movs	r2, #4
 800d0c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d013      	beq.n	800d116 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00e      	beq.n	800d116 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d106:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2204      	movs	r2, #4
 800d10e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f853 	bl	800d1bc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f003 0302 	and.w	r3, r3, #2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d024      	beq.n	800d16a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01f      	beq.n	800d16a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d138:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2202      	movs	r2, #2
 800d140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f003 0310 	and.w	r3, r3, #16
 800d170:	2b00      	cmp	r3, #0
 800d172:	d01f      	beq.n	800d1b4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d01a      	beq.n	800d1b4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d18c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2210      	movs	r2, #16
 800d194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f80e 	bl	800d1d0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d1b4:	bf00      	nop
 800d1b6:	3710      	adds	r7, #16
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d1d8:	bf00      	nop
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b089      	sub	sp, #36	; 0x24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d1f2:	4b89      	ldr	r3, [pc, #548]	; (800d418 <HAL_GPIO_Init+0x234>)
 800d1f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d1f6:	e194      	b.n	800d522 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	2101      	movs	r1, #1
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	fa01 f303 	lsl.w	r3, r1, r3
 800d204:	4013      	ands	r3, r2
 800d206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 8186 	beq.w	800d51c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d005      	beq.n	800d228 <HAL_GPIO_Init+0x44>
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	f003 0303 	and.w	r3, r3, #3
 800d224:	2b02      	cmp	r3, #2
 800d226:	d130      	bne.n	800d28a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	2203      	movs	r2, #3
 800d234:	fa02 f303 	lsl.w	r3, r2, r3
 800d238:	43db      	mvns	r3, r3
 800d23a:	69ba      	ldr	r2, [r7, #24]
 800d23c:	4013      	ands	r3, r2
 800d23e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	68da      	ldr	r2, [r3, #12]
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	fa02 f303 	lsl.w	r3, r2, r3
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	4313      	orrs	r3, r2
 800d250:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	69ba      	ldr	r2, [r7, #24]
 800d256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d25e:	2201      	movs	r2, #1
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	fa02 f303 	lsl.w	r3, r2, r3
 800d266:	43db      	mvns	r3, r3
 800d268:	69ba      	ldr	r2, [r7, #24]
 800d26a:	4013      	ands	r3, r2
 800d26c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	091b      	lsrs	r3, r3, #4
 800d274:	f003 0201 	and.w	r2, r3, #1
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	fa02 f303 	lsl.w	r3, r2, r3
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	4313      	orrs	r3, r2
 800d282:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f003 0303 	and.w	r3, r3, #3
 800d292:	2b03      	cmp	r3, #3
 800d294:	d017      	beq.n	800d2c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a6:	43db      	mvns	r3, r3
 800d2a8:	69ba      	ldr	r2, [r7, #24]
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	689a      	ldr	r2, [r3, #8]
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	69ba      	ldr	r2, [r7, #24]
 800d2c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d123      	bne.n	800d31a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	08da      	lsrs	r2, r3, #3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3208      	adds	r2, #8
 800d2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	220f      	movs	r2, #15
 800d2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ee:	43db      	mvns	r3, r3
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	4013      	ands	r3, r2
 800d2f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	691a      	ldr	r2, [r3, #16]
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	f003 0307 	and.w	r3, r3, #7
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	fa02 f303 	lsl.w	r3, r2, r3
 800d306:	69ba      	ldr	r2, [r7, #24]
 800d308:	4313      	orrs	r3, r2
 800d30a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	08da      	lsrs	r2, r3, #3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3208      	adds	r2, #8
 800d314:	69b9      	ldr	r1, [r7, #24]
 800d316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	2203      	movs	r2, #3
 800d326:	fa02 f303 	lsl.w	r3, r2, r3
 800d32a:	43db      	mvns	r3, r3
 800d32c:	69ba      	ldr	r2, [r7, #24]
 800d32e:	4013      	ands	r3, r2
 800d330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	f003 0203 	and.w	r2, r3, #3
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	fa02 f303 	lsl.w	r3, r2, r3
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	4313      	orrs	r3, r2
 800d346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d356:	2b00      	cmp	r3, #0
 800d358:	f000 80e0 	beq.w	800d51c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d35c:	4b2f      	ldr	r3, [pc, #188]	; (800d41c <HAL_GPIO_Init+0x238>)
 800d35e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d362:	4a2e      	ldr	r2, [pc, #184]	; (800d41c <HAL_GPIO_Init+0x238>)
 800d364:	f043 0302 	orr.w	r3, r3, #2
 800d368:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d36c:	4b2b      	ldr	r3, [pc, #172]	; (800d41c <HAL_GPIO_Init+0x238>)
 800d36e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	60fb      	str	r3, [r7, #12]
 800d378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d37a:	4a29      	ldr	r2, [pc, #164]	; (800d420 <HAL_GPIO_Init+0x23c>)
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	089b      	lsrs	r3, r3, #2
 800d380:	3302      	adds	r3, #2
 800d382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	f003 0303 	and.w	r3, r3, #3
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	220f      	movs	r2, #15
 800d392:	fa02 f303 	lsl.w	r3, r2, r3
 800d396:	43db      	mvns	r3, r3
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	4013      	ands	r3, r2
 800d39c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4a20      	ldr	r2, [pc, #128]	; (800d424 <HAL_GPIO_Init+0x240>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d052      	beq.n	800d44c <HAL_GPIO_Init+0x268>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a1f      	ldr	r2, [pc, #124]	; (800d428 <HAL_GPIO_Init+0x244>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d031      	beq.n	800d412 <HAL_GPIO_Init+0x22e>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a1e      	ldr	r2, [pc, #120]	; (800d42c <HAL_GPIO_Init+0x248>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d02b      	beq.n	800d40e <HAL_GPIO_Init+0x22a>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a1d      	ldr	r2, [pc, #116]	; (800d430 <HAL_GPIO_Init+0x24c>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d025      	beq.n	800d40a <HAL_GPIO_Init+0x226>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a1c      	ldr	r2, [pc, #112]	; (800d434 <HAL_GPIO_Init+0x250>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d01f      	beq.n	800d406 <HAL_GPIO_Init+0x222>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a1b      	ldr	r2, [pc, #108]	; (800d438 <HAL_GPIO_Init+0x254>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d019      	beq.n	800d402 <HAL_GPIO_Init+0x21e>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a1a      	ldr	r2, [pc, #104]	; (800d43c <HAL_GPIO_Init+0x258>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d013      	beq.n	800d3fe <HAL_GPIO_Init+0x21a>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4a19      	ldr	r2, [pc, #100]	; (800d440 <HAL_GPIO_Init+0x25c>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d00d      	beq.n	800d3fa <HAL_GPIO_Init+0x216>
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	4a18      	ldr	r2, [pc, #96]	; (800d444 <HAL_GPIO_Init+0x260>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d007      	beq.n	800d3f6 <HAL_GPIO_Init+0x212>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4a17      	ldr	r2, [pc, #92]	; (800d448 <HAL_GPIO_Init+0x264>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d101      	bne.n	800d3f2 <HAL_GPIO_Init+0x20e>
 800d3ee:	2309      	movs	r3, #9
 800d3f0:	e02d      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d3f2:	230a      	movs	r3, #10
 800d3f4:	e02b      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d3f6:	2308      	movs	r3, #8
 800d3f8:	e029      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d3fa:	2307      	movs	r3, #7
 800d3fc:	e027      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d3fe:	2306      	movs	r3, #6
 800d400:	e025      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d402:	2305      	movs	r3, #5
 800d404:	e023      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d406:	2304      	movs	r3, #4
 800d408:	e021      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d40a:	2303      	movs	r3, #3
 800d40c:	e01f      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d40e:	2302      	movs	r3, #2
 800d410:	e01d      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d412:	2301      	movs	r3, #1
 800d414:	e01b      	b.n	800d44e <HAL_GPIO_Init+0x26a>
 800d416:	bf00      	nop
 800d418:	58000080 	.word	0x58000080
 800d41c:	58024400 	.word	0x58024400
 800d420:	58000400 	.word	0x58000400
 800d424:	58020000 	.word	0x58020000
 800d428:	58020400 	.word	0x58020400
 800d42c:	58020800 	.word	0x58020800
 800d430:	58020c00 	.word	0x58020c00
 800d434:	58021000 	.word	0x58021000
 800d438:	58021400 	.word	0x58021400
 800d43c:	58021800 	.word	0x58021800
 800d440:	58021c00 	.word	0x58021c00
 800d444:	58022000 	.word	0x58022000
 800d448:	58022400 	.word	0x58022400
 800d44c:	2300      	movs	r3, #0
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	f002 0203 	and.w	r2, r2, #3
 800d454:	0092      	lsls	r2, r2, #2
 800d456:	4093      	lsls	r3, r2
 800d458:	69ba      	ldr	r2, [r7, #24]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d45e:	4938      	ldr	r1, [pc, #224]	; (800d540 <HAL_GPIO_Init+0x35c>)
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	089b      	lsrs	r3, r3, #2
 800d464:	3302      	adds	r3, #2
 800d466:	69ba      	ldr	r2, [r7, #24]
 800d468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d46c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	43db      	mvns	r3, r3
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	4013      	ands	r3, r2
 800d47c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d48a:	69ba      	ldr	r2, [r7, #24]
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	4313      	orrs	r3, r2
 800d490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d49a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	43db      	mvns	r3, r3
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d4b8:	69ba      	ldr	r2, [r7, #24]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d4c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	43db      	mvns	r3, r3
 800d4d2:	69ba      	ldr	r2, [r7, #24]
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d003      	beq.n	800d4ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	43db      	mvns	r3, r3
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	4013      	ands	r3, r2
 800d500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d003      	beq.n	800d516 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	4313      	orrs	r3, r2
 800d514:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	3301      	adds	r3, #1
 800d520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	fa22 f303 	lsr.w	r3, r2, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f47f ae63 	bne.w	800d1f8 <HAL_GPIO_Init+0x14>
  }
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	3724      	adds	r7, #36	; 0x24
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr
 800d540:	58000400 	.word	0x58000400

0800d544 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d54e:	2300      	movs	r3, #0
 800d550:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d552:	4b75      	ldr	r3, [pc, #468]	; (800d728 <HAL_GPIO_DeInit+0x1e4>)
 800d554:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d556:	e0d9      	b.n	800d70c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d558:	2201      	movs	r2, #1
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	fa02 f303 	lsl.w	r3, r2, r3
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	4013      	ands	r3, r2
 800d564:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 80cc 	beq.w	800d706 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d56e:	4a6f      	ldr	r2, [pc, #444]	; (800d72c <HAL_GPIO_DeInit+0x1e8>)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	089b      	lsrs	r3, r3, #2
 800d574:	3302      	adds	r3, #2
 800d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d57a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	f003 0303 	and.w	r3, r3, #3
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	220f      	movs	r2, #15
 800d586:	fa02 f303 	lsl.w	r3, r2, r3
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	4013      	ands	r3, r2
 800d58e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4a67      	ldr	r2, [pc, #412]	; (800d730 <HAL_GPIO_DeInit+0x1ec>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d037      	beq.n	800d608 <HAL_GPIO_DeInit+0xc4>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a66      	ldr	r2, [pc, #408]	; (800d734 <HAL_GPIO_DeInit+0x1f0>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d031      	beq.n	800d604 <HAL_GPIO_DeInit+0xc0>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a65      	ldr	r2, [pc, #404]	; (800d738 <HAL_GPIO_DeInit+0x1f4>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d02b      	beq.n	800d600 <HAL_GPIO_DeInit+0xbc>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a64      	ldr	r2, [pc, #400]	; (800d73c <HAL_GPIO_DeInit+0x1f8>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d025      	beq.n	800d5fc <HAL_GPIO_DeInit+0xb8>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	4a63      	ldr	r2, [pc, #396]	; (800d740 <HAL_GPIO_DeInit+0x1fc>)
 800d5b4:	4293      	cmp	r3, r2
 800d5b6:	d01f      	beq.n	800d5f8 <HAL_GPIO_DeInit+0xb4>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a62      	ldr	r2, [pc, #392]	; (800d744 <HAL_GPIO_DeInit+0x200>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d019      	beq.n	800d5f4 <HAL_GPIO_DeInit+0xb0>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a61      	ldr	r2, [pc, #388]	; (800d748 <HAL_GPIO_DeInit+0x204>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d013      	beq.n	800d5f0 <HAL_GPIO_DeInit+0xac>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a60      	ldr	r2, [pc, #384]	; (800d74c <HAL_GPIO_DeInit+0x208>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d00d      	beq.n	800d5ec <HAL_GPIO_DeInit+0xa8>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a5f      	ldr	r2, [pc, #380]	; (800d750 <HAL_GPIO_DeInit+0x20c>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d007      	beq.n	800d5e8 <HAL_GPIO_DeInit+0xa4>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a5e      	ldr	r2, [pc, #376]	; (800d754 <HAL_GPIO_DeInit+0x210>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d101      	bne.n	800d5e4 <HAL_GPIO_DeInit+0xa0>
 800d5e0:	2309      	movs	r3, #9
 800d5e2:	e012      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5e4:	230a      	movs	r3, #10
 800d5e6:	e010      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5e8:	2308      	movs	r3, #8
 800d5ea:	e00e      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5ec:	2307      	movs	r3, #7
 800d5ee:	e00c      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5f0:	2306      	movs	r3, #6
 800d5f2:	e00a      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5f4:	2305      	movs	r3, #5
 800d5f6:	e008      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5f8:	2304      	movs	r3, #4
 800d5fa:	e006      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e004      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d600:	2302      	movs	r3, #2
 800d602:	e002      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d604:	2301      	movs	r3, #1
 800d606:	e000      	b.n	800d60a <HAL_GPIO_DeInit+0xc6>
 800d608:	2300      	movs	r3, #0
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	f002 0203 	and.w	r2, r2, #3
 800d610:	0092      	lsls	r2, r2, #2
 800d612:	4093      	lsls	r3, r2
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	429a      	cmp	r2, r3
 800d618:	d136      	bne.n	800d688 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	43db      	mvns	r3, r3
 800d622:	401a      	ands	r2, r3
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	43db      	mvns	r3, r3
 800d630:	401a      	ands	r2, r3
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	43db      	mvns	r3, r3
 800d640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d644:	4013      	ands	r3, r2
 800d646:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	43db      	mvns	r3, r3
 800d652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d656:	4013      	ands	r3, r2
 800d658:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	f003 0303 	and.w	r3, r3, #3
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	220f      	movs	r2, #15
 800d664:	fa02 f303 	lsl.w	r3, r2, r3
 800d668:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d66a:	4a30      	ldr	r2, [pc, #192]	; (800d72c <HAL_GPIO_DeInit+0x1e8>)
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	089b      	lsrs	r3, r3, #2
 800d670:	3302      	adds	r3, #2
 800d672:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	43da      	mvns	r2, r3
 800d67a:	482c      	ldr	r0, [pc, #176]	; (800d72c <HAL_GPIO_DeInit+0x1e8>)
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	089b      	lsrs	r3, r3, #2
 800d680:	400a      	ands	r2, r1
 800d682:	3302      	adds	r3, #2
 800d684:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	2103      	movs	r1, #3
 800d692:	fa01 f303 	lsl.w	r3, r1, r3
 800d696:	431a      	orrs	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	08da      	lsrs	r2, r3, #3
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3208      	adds	r2, #8
 800d6a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f003 0307 	and.w	r3, r3, #7
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	220f      	movs	r2, #15
 800d6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6b6:	43db      	mvns	r3, r3
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	08d2      	lsrs	r2, r2, #3
 800d6bc:	4019      	ands	r1, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3208      	adds	r2, #8
 800d6c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	2103      	movs	r1, #3
 800d6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6d4:	43db      	mvns	r3, r3
 800d6d6:	401a      	ands	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685a      	ldr	r2, [r3, #4]
 800d6e0:	2101      	movs	r1, #1
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6e8:	43db      	mvns	r3, r3
 800d6ea:	401a      	ands	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689a      	ldr	r2, [r3, #8]
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	2103      	movs	r1, #3
 800d6fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d6fe:	43db      	mvns	r3, r3
 800d700:	401a      	ands	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	609a      	str	r2, [r3, #8]
    }

    position++;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	3301      	adds	r3, #1
 800d70a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	fa22 f303 	lsr.w	r3, r2, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	f47f af1f 	bne.w	800d558 <HAL_GPIO_DeInit+0x14>
  }
}
 800d71a:	bf00      	nop
 800d71c:	bf00      	nop
 800d71e:	371c      	adds	r7, #28
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr
 800d728:	58000080 	.word	0x58000080
 800d72c:	58000400 	.word	0x58000400
 800d730:	58020000 	.word	0x58020000
 800d734:	58020400 	.word	0x58020400
 800d738:	58020800 	.word	0x58020800
 800d73c:	58020c00 	.word	0x58020c00
 800d740:	58021000 	.word	0x58021000
 800d744:	58021400 	.word	0x58021400
 800d748:	58021800 	.word	0x58021800
 800d74c:	58021c00 	.word	0x58021c00
 800d750:	58022000 	.word	0x58022000
 800d754:	58022400 	.word	0x58022400

0800d758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	807b      	strh	r3, [r7, #2]
 800d764:	4613      	mov	r3, r2
 800d766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d768:	787b      	ldrb	r3, [r7, #1]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d76e:	887a      	ldrh	r2, [r7, #2]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d774:	e003      	b.n	800d77e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d776:	887b      	ldrh	r3, [r7, #2]
 800d778:	041a      	lsls	r2, r3, #16
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	619a      	str	r2, [r3, #24]
}
 800d77e:	bf00      	nop
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b085      	sub	sp, #20
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
 800d792:	460b      	mov	r3, r1
 800d794:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d79c:	887a      	ldrh	r2, [r7, #2]
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	041a      	lsls	r2, r3, #16
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	43d9      	mvns	r1, r3
 800d7a8:	887b      	ldrh	r3, [r7, #2]
 800d7aa:	400b      	ands	r3, r1
 800d7ac:	431a      	orrs	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	619a      	str	r2, [r3, #24]
}
 800d7b2:	bf00      	nop
 800d7b4:	3714      	adds	r7, #20
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
	...

0800d7c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800d7c8:	4a08      	ldr	r2, [pc, #32]	; (800d7ec <HAL_HSEM_FastTake+0x2c>)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3320      	adds	r3, #32
 800d7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d2:	4a07      	ldr	r2, [pc, #28]	; (800d7f0 <HAL_HSEM_FastTake+0x30>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d101      	bne.n	800d7dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e000      	b.n	800d7de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	58026400 	.word	0x58026400
 800d7f0:	80000300 	.word	0x80000300

0800d7f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800d7fe:	4906      	ldr	r1, [pc, #24]	; (800d818 <HAL_HSEM_Release+0x24>)
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr
 800d818:	58026400 	.word	0x58026400

0800d81c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d82a:	2301      	movs	r3, #1
 800d82c:	e07f      	b.n	800d92e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f8a9 	bl	800d99a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2224      	movs	r2, #36	; 0x24
 800d84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f022 0201 	bic.w	r2, r2, #1
 800d85e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	685a      	ldr	r2, [r3, #4]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d86c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d87c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d107      	bne.n	800d896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689a      	ldr	r2, [r3, #8]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d892:	609a      	str	r2, [r3, #8]
 800d894:	e006      	b.n	800d8a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	689a      	ldr	r2, [r3, #8]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d8a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d104      	bne.n	800d8b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6859      	ldr	r1, [r3, #4]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <HAL_I2C_Init+0x11c>)
 800d8c2:	430b      	orrs	r3, r1
 800d8c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68da      	ldr	r2, [r3, #12]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d8d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	691a      	ldr	r2, [r3, #16]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	69d9      	ldr	r1, [r3, #28]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6a1a      	ldr	r2, [r3, #32]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	430a      	orrs	r2, r1
 800d8fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f042 0201 	orr.w	r2, r2, #1
 800d90e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2220      	movs	r2, #32
 800d91a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	02008000 	.word	0x02008000

0800d93c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d101      	bne.n	800d94e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e021      	b.n	800d992 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2224      	movs	r2, #36	; 0x24
 800d952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0201 	bic.w	r2, r2, #1
 800d964:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f821 	bl	800d9ae <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	3708      	adds	r7, #8
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d99a:	b480      	push	{r7}
 800d99c:	b083      	sub	sp, #12
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d9a2:	bf00      	nop
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d9ae:	b480      	push	{r7}
 800d9b0:	b083      	sub	sp, #12
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
	...

0800d9c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af02      	add	r7, sp, #8
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	817b      	strh	r3, [r7, #10]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	813b      	strh	r3, [r7, #8]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	2b20      	cmp	r3, #32
 800d9e8:	f040 80f9 	bne.w	800dbde <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <HAL_I2C_Mem_Write+0x34>
 800d9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d105      	bne.n	800da04 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e0ed      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d101      	bne.n	800da12 <HAL_I2C_Mem_Write+0x4e>
 800da0e:	2302      	movs	r3, #2
 800da10:	e0e6      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800da1a:	f7fe ffdf 	bl	800c9dc <HAL_GetTick>
 800da1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	2319      	movs	r3, #25
 800da26:	2201      	movs	r2, #1
 800da28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f000 fadd 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e0d1      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2221      	movs	r2, #33	; 0x21
 800da40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2240      	movs	r2, #64	; 0x40
 800da48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	6a3a      	ldr	r2, [r7, #32]
 800da56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800da64:	88f8      	ldrh	r0, [r7, #6]
 800da66:	893a      	ldrh	r2, [r7, #8]
 800da68:	8979      	ldrh	r1, [r7, #10]
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	9301      	str	r3, [sp, #4]
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4603      	mov	r3, r0
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 f9ed 	bl	800de54 <I2C_RequestMemoryWrite>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	e0a9      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da90:	b29b      	uxth	r3, r3
 800da92:	2bff      	cmp	r3, #255	; 0xff
 800da94:	d90e      	bls.n	800dab4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	22ff      	movs	r2, #255	; 0xff
 800da9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	8979      	ldrh	r1, [r7, #10]
 800daa4:	2300      	movs	r3, #0
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f000 fc45 	bl	800e33c <I2C_TransferConfig>
 800dab2:	e00f      	b.n	800dad4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dab8:	b29a      	uxth	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	8979      	ldrh	r1, [r7, #10]
 800dac6:	2300      	movs	r3, #0
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f000 fc34 	bl	800e33c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 fac7 	bl	800e06c <I2C_WaitOnTXISFlagUntilTimeout>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e07b      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daec:	781a      	ldrb	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf8:	1c5a      	adds	r2, r3, #1
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db02:	b29b      	uxth	r3, r3
 800db04:	3b01      	subs	r3, #1
 800db06:	b29a      	uxth	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db10:	3b01      	subs	r3, #1
 800db12:	b29a      	uxth	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d034      	beq.n	800db8c <HAL_I2C_Mem_Write+0x1c8>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db26:	2b00      	cmp	r3, #0
 800db28:	d130      	bne.n	800db8c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	2200      	movs	r2, #0
 800db32:	2180      	movs	r1, #128	; 0x80
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 fa59 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d001      	beq.n	800db44 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e04d      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db48:	b29b      	uxth	r3, r3
 800db4a:	2bff      	cmp	r3, #255	; 0xff
 800db4c:	d90e      	bls.n	800db6c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	22ff      	movs	r2, #255	; 0xff
 800db52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	8979      	ldrh	r1, [r7, #10]
 800db5c:	2300      	movs	r3, #0
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f000 fbe9 	bl	800e33c <I2C_TransferConfig>
 800db6a:	e00f      	b.n	800db8c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db70:	b29a      	uxth	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	8979      	ldrh	r1, [r7, #10]
 800db7e:	2300      	movs	r3, #0
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f000 fbd8 	bl	800e33c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db90:	b29b      	uxth	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d19e      	bne.n	800dad4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f000 faa6 	bl	800e0ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e01a      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2220      	movs	r2, #32
 800dbb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6859      	ldr	r1, [r3, #4]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <HAL_I2C_Mem_Write+0x224>)
 800dbbe:	400b      	ands	r3, r1
 800dbc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2220      	movs	r2, #32
 800dbc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e000      	b.n	800dbe0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dbde:	2302      	movs	r3, #2
  }
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	fe00e800 	.word	0xfe00e800

0800dbec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af02      	add	r7, sp, #8
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	4608      	mov	r0, r1
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	817b      	strh	r3, [r7, #10]
 800dbfe:	460b      	mov	r3, r1
 800dc00:	813b      	strh	r3, [r7, #8]
 800dc02:	4613      	mov	r3, r2
 800dc04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	2b20      	cmp	r3, #32
 800dc10:	f040 80fd 	bne.w	800de0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <HAL_I2C_Mem_Read+0x34>
 800dc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d105      	bne.n	800dc2c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e0f1      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d101      	bne.n	800dc3a <HAL_I2C_Mem_Read+0x4e>
 800dc36:	2302      	movs	r3, #2
 800dc38:	e0ea      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dc42:	f7fe fecb 	bl	800c9dc <HAL_GetTick>
 800dc46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	2319      	movs	r3, #25
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 f9c9 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e0d5      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2222      	movs	r2, #34	; 0x22
 800dc68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2240      	movs	r2, #64	; 0x40
 800dc70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6a3a      	ldr	r2, [r7, #32]
 800dc7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc8c:	88f8      	ldrh	r0, [r7, #6]
 800dc8e:	893a      	ldrh	r2, [r7, #8]
 800dc90:	8979      	ldrh	r1, [r7, #10]
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f000 f92d 	bl	800defc <I2C_RequestMemoryRead>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d005      	beq.n	800dcb4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	e0ad      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2bff      	cmp	r3, #255	; 0xff
 800dcbc:	d90e      	bls.n	800dcdc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	22ff      	movs	r2, #255	; 0xff
 800dcc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	8979      	ldrh	r1, [r7, #10]
 800dccc:	4b52      	ldr	r3, [pc, #328]	; (800de18 <HAL_I2C_Mem_Read+0x22c>)
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 fb31 	bl	800e33c <I2C_TransferConfig>
 800dcda:	e00f      	b.n	800dcfc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	8979      	ldrh	r1, [r7, #10]
 800dcee:	4b4a      	ldr	r3, [pc, #296]	; (800de18 <HAL_I2C_Mem_Read+0x22c>)
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f000 fb20 	bl	800e33c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	2200      	movs	r2, #0
 800dd04:	2104      	movs	r1, #4
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f000 f970 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e07c      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	b2d2      	uxtb	r2, r2
 800dd22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd32:	3b01      	subs	r3, #1
 800dd34:	b29a      	uxth	r2, r3
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	3b01      	subs	r3, #1
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d034      	beq.n	800ddbc <HAL_I2C_Mem_Read+0x1d0>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d130      	bne.n	800ddbc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	2200      	movs	r2, #0
 800dd62:	2180      	movs	r1, #128	; 0x80
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f000 f941 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	e04d      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	2bff      	cmp	r3, #255	; 0xff
 800dd7c:	d90e      	bls.n	800dd9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	22ff      	movs	r2, #255	; 0xff
 800dd82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	8979      	ldrh	r1, [r7, #10]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 fad1 	bl	800e33c <I2C_TransferConfig>
 800dd9a:	e00f      	b.n	800ddbc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddaa:	b2da      	uxtb	r2, r3
 800ddac:	8979      	ldrh	r1, [r7, #10]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f000 fac0 	bl	800e33c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d19a      	bne.n	800dcfc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f000 f98e 	bl	800e0ec <I2C_WaitOnSTOPFlagUntilTimeout>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d001      	beq.n	800ddda <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e01a      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2220      	movs	r2, #32
 800dde0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6859      	ldr	r1, [r3, #4]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <HAL_I2C_Mem_Read+0x230>)
 800ddee:	400b      	ands	r3, r1
 800ddf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2220      	movs	r2, #32
 800ddf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2200      	movs	r2, #0
 800de06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e000      	b.n	800de10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800de0e:	2302      	movs	r3, #2
  }
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	80002400 	.word	0x80002400
 800de1c:	fe00e800 	.word	0xfe00e800

0800de20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de2e:	b2db      	uxtb	r3, r3
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af02      	add	r7, sp, #8
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	4608      	mov	r0, r1
 800de5e:	4611      	mov	r1, r2
 800de60:	461a      	mov	r2, r3
 800de62:	4603      	mov	r3, r0
 800de64:	817b      	strh	r3, [r7, #10]
 800de66:	460b      	mov	r3, r1
 800de68:	813b      	strh	r3, [r7, #8]
 800de6a:	4613      	mov	r3, r2
 800de6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800de6e:	88fb      	ldrh	r3, [r7, #6]
 800de70:	b2da      	uxtb	r2, r3
 800de72:	8979      	ldrh	r1, [r7, #10]
 800de74:	4b20      	ldr	r3, [pc, #128]	; (800def8 <I2C_RequestMemoryWrite+0xa4>)
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 fa5d 	bl	800e33c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	69b9      	ldr	r1, [r7, #24]
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f000 f8f0 	bl	800e06c <I2C_WaitOnTXISFlagUntilTimeout>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e02c      	b.n	800def0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800de96:	88fb      	ldrh	r3, [r7, #6]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d105      	bne.n	800dea8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800de9c:	893b      	ldrh	r3, [r7, #8]
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	629a      	str	r2, [r3, #40]	; 0x28
 800dea6:	e015      	b.n	800ded4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dea8:	893b      	ldrh	r3, [r7, #8]
 800deaa:	0a1b      	lsrs	r3, r3, #8
 800deac:	b29b      	uxth	r3, r3
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800deb6:	69fa      	ldr	r2, [r7, #28]
 800deb8:	69b9      	ldr	r1, [r7, #24]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 f8d6 	bl	800e06c <I2C_WaitOnTXISFlagUntilTimeout>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e012      	b.n	800def0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800deca:	893b      	ldrh	r3, [r7, #8]
 800decc:	b2da      	uxtb	r2, r3
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	2200      	movs	r2, #0
 800dedc:	2180      	movs	r1, #128	; 0x80
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f000 f884 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e000      	b.n	800def0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	80002000 	.word	0x80002000

0800defc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af02      	add	r7, sp, #8
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	461a      	mov	r2, r3
 800df0a:	4603      	mov	r3, r0
 800df0c:	817b      	strh	r3, [r7, #10]
 800df0e:	460b      	mov	r3, r1
 800df10:	813b      	strh	r3, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	8979      	ldrh	r1, [r7, #10]
 800df1c:	4b20      	ldr	r3, [pc, #128]	; (800dfa0 <I2C_RequestMemoryRead+0xa4>)
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	f000 fa0a 	bl	800e33c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df28:	69fa      	ldr	r2, [r7, #28]
 800df2a:	69b9      	ldr	r1, [r7, #24]
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 f89d 	bl	800e06c <I2C_WaitOnTXISFlagUntilTimeout>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800df38:	2301      	movs	r3, #1
 800df3a:	e02c      	b.n	800df96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df3c:	88fb      	ldrh	r3, [r7, #6]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d105      	bne.n	800df4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800df42:	893b      	ldrh	r3, [r7, #8]
 800df44:	b2da      	uxtb	r2, r3
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	629a      	str	r2, [r3, #40]	; 0x28
 800df4c:	e015      	b.n	800df7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800df4e:	893b      	ldrh	r3, [r7, #8]
 800df50:	0a1b      	lsrs	r3, r3, #8
 800df52:	b29b      	uxth	r3, r3
 800df54:	b2da      	uxtb	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df5c:	69fa      	ldr	r2, [r7, #28]
 800df5e:	69b9      	ldr	r1, [r7, #24]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 f883 	bl	800e06c <I2C_WaitOnTXISFlagUntilTimeout>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e012      	b.n	800df96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800df70:	893b      	ldrh	r3, [r7, #8]
 800df72:	b2da      	uxtb	r2, r3
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	2200      	movs	r2, #0
 800df82:	2140      	movs	r1, #64	; 0x40
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f000 f831 	bl	800dfec <I2C_WaitOnFlagUntilTimeout>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	e000      	b.n	800df96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	80002000 	.word	0x80002000

0800dfa4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	699b      	ldr	r3, [r3, #24]
 800dfb2:	f003 0302 	and.w	r3, r3, #2
 800dfb6:	2b02      	cmp	r3, #2
 800dfb8:	d103      	bne.n	800dfc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d007      	beq.n	800dfe0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	699a      	ldr	r2, [r3, #24]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f042 0201 	orr.w	r2, r2, #1
 800dfde:	619a      	str	r2, [r3, #24]
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b084      	sub	sp, #16
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	603b      	str	r3, [r7, #0]
 800dff8:	4613      	mov	r3, r2
 800dffa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dffc:	e022      	b.n	800e044 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e004:	d01e      	beq.n	800e044 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e006:	f7fe fce9 	bl	800c9dc <HAL_GetTick>
 800e00a:	4602      	mov	r2, r0
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	429a      	cmp	r2, r3
 800e014:	d302      	bcc.n	800e01c <I2C_WaitOnFlagUntilTimeout+0x30>
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d113      	bne.n	800e044 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e020:	f043 0220 	orr.w	r2, r3, #32
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2220      	movs	r2, #32
 800e02c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2200      	movs	r2, #0
 800e034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e00f      	b.n	800e064 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	4013      	ands	r3, r2
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	429a      	cmp	r2, r3
 800e052:	bf0c      	ite	eq
 800e054:	2301      	moveq	r3, #1
 800e056:	2300      	movne	r3, #0
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	461a      	mov	r2, r3
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d0cd      	beq.n	800dffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e062:	2300      	movs	r3, #0
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e078:	e02c      	b.n	800e0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	68b9      	ldr	r1, [r7, #8]
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f000 f870 	bl	800e164 <I2C_IsErrorOccurred>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e02a      	b.n	800e0e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e094:	d01e      	beq.n	800e0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e096:	f7fe fca1 	bl	800c9dc <HAL_GetTick>
 800e09a:	4602      	mov	r2, r0
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	1ad3      	subs	r3, r2, r3
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d302      	bcc.n	800e0ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d113      	bne.n	800e0d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b0:	f043 0220 	orr.w	r2, r3, #32
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2220      	movs	r2, #32
 800e0bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e007      	b.n	800e0e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	699b      	ldr	r3, [r3, #24]
 800e0da:	f003 0302 	and.w	r3, r3, #2
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d1cb      	bne.n	800e07a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0f8:	e028      	b.n	800e14c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	68b9      	ldr	r1, [r7, #8]
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 f830 	bl	800e164 <I2C_IsErrorOccurred>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d001      	beq.n	800e10e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e026      	b.n	800e15c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e10e:	f7fe fc65 	bl	800c9dc <HAL_GetTick>
 800e112:	4602      	mov	r2, r0
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	1ad3      	subs	r3, r2, r3
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d302      	bcc.n	800e124 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d113      	bne.n	800e14c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e128:	f043 0220 	orr.w	r2, r3, #32
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2220      	movs	r2, #32
 800e134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e007      	b.n	800e15c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	f003 0320 	and.w	r3, r3, #32
 800e156:	2b20      	cmp	r3, #32
 800e158:	d1cf      	bne.n	800e0fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08a      	sub	sp, #40	; 0x28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e170:	2300      	movs	r3, #0
 800e172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	f003 0310 	and.w	r3, r3, #16
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d075      	beq.n	800e27c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2210      	movs	r2, #16
 800e196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e198:	e056      	b.n	800e248 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d052      	beq.n	800e248 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e1a2:	f7fe fc1b 	bl	800c9dc <HAL_GetTick>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d302      	bcc.n	800e1b8 <I2C_IsErrorOccurred+0x54>
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d147      	bne.n	800e248 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e1ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1da:	d12e      	bne.n	800e23a <I2C_IsErrorOccurred+0xd6>
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1e2:	d02a      	beq.n	800e23a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e1e4:	7cfb      	ldrb	r3, [r7, #19]
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	d027      	beq.n	800e23a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e1f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e1fa:	f7fe fbef 	bl	800c9dc <HAL_GetTick>
 800e1fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e200:	e01b      	b.n	800e23a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e202:	f7fe fbeb 	bl	800c9dc <HAL_GetTick>
 800e206:	4602      	mov	r2, r0
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	2b19      	cmp	r3, #25
 800e20e:	d914      	bls.n	800e23a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e214:	f043 0220 	orr.w	r2, r3, #32
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2220      	movs	r2, #32
 800e220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e234:	2301      	movs	r3, #1
 800e236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	f003 0320 	and.w	r3, r3, #32
 800e244:	2b20      	cmp	r3, #32
 800e246:	d1dc      	bne.n	800e202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	f003 0320 	and.w	r3, r3, #32
 800e252:	2b20      	cmp	r3, #32
 800e254:	d003      	beq.n	800e25e <I2C_IsErrorOccurred+0xfa>
 800e256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d09d      	beq.n	800e19a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e262:	2b00      	cmp	r3, #0
 800e264:	d103      	bne.n	800e26e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2220      	movs	r2, #32
 800e26c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e26e:	6a3b      	ldr	r3, [r7, #32]
 800e270:	f043 0304 	orr.w	r3, r3, #4
 800e274:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d00b      	beq.n	800e2a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	f043 0301 	orr.w	r3, r3, #1
 800e294:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e29e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00b      	beq.n	800e2c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e2b0:	6a3b      	ldr	r3, [r7, #32]
 800e2b2:	f043 0308 	orr.w	r3, r3, #8
 800e2b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e2c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00b      	beq.n	800e2ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	f043 0302 	orr.w	r3, r3, #2
 800e2d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d01c      	beq.n	800e32c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	f7ff fe56 	bl	800dfa4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6859      	ldr	r1, [r3, #4]
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	4b0d      	ldr	r3, [pc, #52]	; (800e338 <I2C_IsErrorOccurred+0x1d4>)
 800e304:	400b      	ands	r3, r1
 800e306:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	431a      	orrs	r2, r3
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2220      	movs	r2, #32
 800e318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e330:	4618      	mov	r0, r3
 800e332:	3728      	adds	r7, #40	; 0x28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	fe00e800 	.word	0xfe00e800

0800e33c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b087      	sub	sp, #28
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	607b      	str	r3, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	817b      	strh	r3, [r7, #10]
 800e34a:	4613      	mov	r3, r2
 800e34c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e34e:	897b      	ldrh	r3, [r7, #10]
 800e350:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e354:	7a7b      	ldrb	r3, [r7, #9]
 800e356:	041b      	lsls	r3, r3, #16
 800e358:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e35c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	4313      	orrs	r3, r2
 800e366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e36a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	685a      	ldr	r2, [r3, #4]
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	0d5b      	lsrs	r3, r3, #21
 800e376:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e37a:	4b08      	ldr	r3, [pc, #32]	; (800e39c <I2C_TransferConfig+0x60>)
 800e37c:	430b      	orrs	r3, r1
 800e37e:	43db      	mvns	r3, r3
 800e380:	ea02 0103 	and.w	r1, r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	430a      	orrs	r2, r1
 800e38c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e38e:	bf00      	nop
 800e390:	371c      	adds	r7, #28
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	03ff63ff 	.word	0x03ff63ff

0800e3a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b20      	cmp	r3, #32
 800e3b4:	d138      	bne.n	800e428 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d101      	bne.n	800e3c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e3c0:	2302      	movs	r3, #2
 800e3c2:	e032      	b.n	800e42a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2224      	movs	r2, #36	; 0x24
 800e3d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f022 0201 	bic.w	r2, r2, #1
 800e3e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e3f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6819      	ldr	r1, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	683a      	ldr	r2, [r7, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f042 0201 	orr.w	r2, r2, #1
 800e412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2220      	movs	r2, #32
 800e418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2200      	movs	r2, #0
 800e420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	e000      	b.n	800e42a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e428:	2302      	movs	r3, #2
  }
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	370c      	adds	r7, #12
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e436:	b480      	push	{r7}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
 800e43e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b20      	cmp	r3, #32
 800e44a:	d139      	bne.n	800e4c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e452:	2b01      	cmp	r3, #1
 800e454:	d101      	bne.n	800e45a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e456:	2302      	movs	r3, #2
 800e458:	e033      	b.n	800e4c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2224      	movs	r2, #36	; 0x24
 800e466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f022 0201 	bic.w	r2, r2, #1
 800e478:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e488:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	021b      	lsls	r3, r3, #8
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	4313      	orrs	r3, r2
 800e492:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f042 0201 	orr.w	r2, r2, #1
 800e4aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2220      	movs	r2, #32
 800e4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	e000      	b.n	800e4c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e4c0:	2302      	movs	r3, #2
  }
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
	...

0800e4d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d101      	bne.n	800e4e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e4de:	2301      	movs	r3, #1
 800e4e0:	e0bf      	b.n	800e662 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d106      	bne.n	800e4fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7f2 fc56 	bl	8000da8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2202      	movs	r2, #2
 800e500:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	699a      	ldr	r2, [r3, #24]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e512:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6999      	ldr	r1, [r3, #24]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e528:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6899      	ldr	r1, [r3, #8]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	4b4a      	ldr	r3, [pc, #296]	; (800e66c <HAL_LTDC_Init+0x19c>)
 800e544:	400b      	ands	r3, r1
 800e546:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	695b      	ldr	r3, [r3, #20]
 800e54c:	041b      	lsls	r3, r3, #16
 800e54e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	6899      	ldr	r1, [r3, #8]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	431a      	orrs	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	430a      	orrs	r2, r1
 800e564:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	68d9      	ldr	r1, [r3, #12]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	4b3e      	ldr	r3, [pc, #248]	; (800e66c <HAL_LTDC_Init+0x19c>)
 800e572:	400b      	ands	r3, r1
 800e574:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	69db      	ldr	r3, [r3, #28]
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68d9      	ldr	r1, [r3, #12]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a1a      	ldr	r2, [r3, #32]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	431a      	orrs	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	430a      	orrs	r2, r1
 800e592:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6919      	ldr	r1, [r3, #16]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681a      	ldr	r2, [r3, #0]
 800e59e:	4b33      	ldr	r3, [pc, #204]	; (800e66c <HAL_LTDC_Init+0x19c>)
 800e5a0:	400b      	ands	r3, r1
 800e5a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a8:	041b      	lsls	r3, r3, #16
 800e5aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6919      	ldr	r1, [r3, #16]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	431a      	orrs	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	6959      	ldr	r1, [r3, #20]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	4b27      	ldr	r3, [pc, #156]	; (800e66c <HAL_LTDC_Init+0x19c>)
 800e5ce:	400b      	ands	r3, r1
 800e5d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5d6:	041b      	lsls	r3, r3, #16
 800e5d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6959      	ldr	r1, [r3, #20]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	431a      	orrs	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	430a      	orrs	r2, r1
 800e5ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e5f6:	021b      	lsls	r3, r3, #8
 800e5f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e600:	041b      	lsls	r3, r3, #16
 800e602:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e612:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4313      	orrs	r3, r2
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800e626:	431a      	orrs	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	430a      	orrs	r2, r1
 800e62e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f042 0206 	orr.w	r2, r2, #6
 800e63e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	699a      	ldr	r2, [r3, #24]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f042 0201 	orr.w	r2, r2, #1
 800e64e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	f000f800 	.word	0xf000f800

0800e670 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e686:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f003 0304 	and.w	r3, r3, #4
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d023      	beq.n	800e6da <HAL_LTDC_IRQHandler+0x6a>
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	f003 0304 	and.w	r3, r3, #4
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d01e      	beq.n	800e6da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f022 0204 	bic.w	r2, r2, #4
 800e6aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2204      	movs	r2, #4
 800e6b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e6ba:	f043 0201 	orr.w	r2, r3, #1
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f86f 	bl	800e7b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f003 0302 	and.w	r3, r3, #2
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d023      	beq.n	800e72c <HAL_LTDC_IRQHandler+0xbc>
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d01e      	beq.n	800e72c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f022 0202 	bic.w	r2, r2, #2
 800e6fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2202      	movs	r2, #2
 800e704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e70c:	f043 0202 	orr.w	r2, r3, #2
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2204      	movs	r2, #4
 800e71a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f846 	bl	800e7b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	2b00      	cmp	r3, #0
 800e734:	d01b      	beq.n	800e76e <HAL_LTDC_IRQHandler+0xfe>
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d016      	beq.n	800e76e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f022 0201 	bic.w	r2, r2, #1
 800e74e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2201      	movs	r2, #1
 800e756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2201      	movs	r2, #1
 800e75c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7f5 f9cd 	bl	8003b08 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f003 0308 	and.w	r3, r3, #8
 800e774:	2b00      	cmp	r3, #0
 800e776:	d01b      	beq.n	800e7b0 <HAL_LTDC_IRQHandler+0x140>
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	f003 0308 	and.w	r3, r3, #8
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d016      	beq.n	800e7b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f022 0208 	bic.w	r2, r2, #8
 800e790:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2208      	movs	r2, #8
 800e798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f80e 	bl	800e7cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e7e0:	b5b0      	push	{r4, r5, r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d101      	bne.n	800e7fa <HAL_LTDC_ConfigLayer+0x1a>
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	e02c      	b.n	800e854 <HAL_LTDC_ConfigLayer+0x74>
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	2202      	movs	r2, #2
 800e806:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2134      	movs	r1, #52	; 0x34
 800e810:	fb01 f303 	mul.w	r3, r1, r3
 800e814:	4413      	add	r3, r2
 800e816:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	4614      	mov	r4, r2
 800e81e:	461d      	mov	r5, r3
 800e820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e82a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e830:	687a      	ldr	r2, [r7, #4]
 800e832:	68b9      	ldr	r1, [r7, #8]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f000 f849 	bl	800e8cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	2201      	movs	r2, #1
 800e840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bdb0      	pop	{r4, r5, r7, pc}

0800e85c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d101      	bne.n	800e874 <HAL_LTDC_ProgramLineEvent+0x18>
 800e870:	2302      	movs	r3, #2
 800e872:	e023      	b.n	800e8bc <HAL_LTDC_ProgramLineEvent+0x60>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2201      	movs	r2, #1
 800e878:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f022 0201 	bic.w	r2, r2, #1
 800e892:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800e894:	4a0c      	ldr	r2, [pc, #48]	; (800e8c8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f042 0201 	orr.w	r2, r2, #1
 800e8a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	50001000 	.word	0x50001000

0800e8cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b089      	sub	sp, #36	; 0x24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	0c1b      	lsrs	r3, r3, #16
 800e8e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e8e8:	4413      	add	r3, r2
 800e8ea:	041b      	lsls	r3, r3, #16
 800e8ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	01db      	lsls	r3, r3, #7
 800e8f8:	4413      	add	r3, r2
 800e8fa:	3384      	adds	r3, #132	; 0x84
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	6812      	ldr	r2, [r2, #0]
 800e902:	4611      	mov	r1, r2
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	01d2      	lsls	r2, r2, #7
 800e908:	440a      	add	r2, r1
 800e90a:	3284      	adds	r2, #132	; 0x84
 800e90c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800e910:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	0c1b      	lsrs	r3, r3, #16
 800e91e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e922:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e924:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4619      	mov	r1, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	01db      	lsls	r3, r3, #7
 800e930:	440b      	add	r3, r1
 800e932:	3384      	adds	r3, #132	; 0x84
 800e934:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e93a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	68da      	ldr	r2, [r3, #12]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e94a:	4413      	add	r3, r2
 800e94c:	041b      	lsls	r3, r3, #16
 800e94e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	01db      	lsls	r3, r3, #7
 800e95a:	4413      	add	r3, r2
 800e95c:	3384      	adds	r3, #132	; 0x84
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	6812      	ldr	r2, [r2, #0]
 800e964:	4611      	mov	r1, r2
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	01d2      	lsls	r2, r2, #7
 800e96a:	440a      	add	r2, r1
 800e96c:	3284      	adds	r2, #132	; 0x84
 800e96e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800e972:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	689a      	ldr	r2, [r3, #8]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e982:	4413      	add	r3, r2
 800e984:	1c5a      	adds	r2, r3, #1
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4619      	mov	r1, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	01db      	lsls	r3, r3, #7
 800e990:	440b      	add	r3, r1
 800e992:	3384      	adds	r3, #132	; 0x84
 800e994:	4619      	mov	r1, r3
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4313      	orrs	r3, r2
 800e99a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	01db      	lsls	r3, r3, #7
 800e9a6:	4413      	add	r3, r2
 800e9a8:	3384      	adds	r3, #132	; 0x84
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	6812      	ldr	r2, [r2, #0]
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	01d2      	lsls	r2, r2, #7
 800e9b6:	440a      	add	r2, r1
 800e9b8:	3284      	adds	r2, #132	; 0x84
 800e9ba:	f023 0307 	bic.w	r3, r3, #7
 800e9be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	01db      	lsls	r3, r3, #7
 800e9ca:	4413      	add	r3, r2
 800e9cc:	3384      	adds	r3, #132	; 0x84
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e9dc:	021b      	lsls	r3, r3, #8
 800e9de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800e9e6:	041b      	lsls	r3, r3, #16
 800e9e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	061b      	lsls	r3, r3, #24
 800e9f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	01db      	lsls	r3, r3, #7
 800e9fc:	4413      	add	r3, r2
 800e9fe:	3384      	adds	r3, #132	; 0x84
 800ea00:	699b      	ldr	r3, [r3, #24]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	461a      	mov	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	01db      	lsls	r3, r3, #7
 800ea0c:	4413      	add	r3, r2
 800ea0e:	3384      	adds	r3, #132	; 0x84
 800ea10:	461a      	mov	r2, r3
 800ea12:	2300      	movs	r3, #0
 800ea14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	431a      	orrs	r2, r3
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	431a      	orrs	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	01db      	lsls	r3, r3, #7
 800ea30:	440b      	add	r3, r1
 800ea32:	3384      	adds	r3, #132	; 0x84
 800ea34:	4619      	mov	r1, r3
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	461a      	mov	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	01db      	lsls	r3, r3, #7
 800ea46:	4413      	add	r3, r2
 800ea48:	3384      	adds	r3, #132	; 0x84
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	6812      	ldr	r2, [r2, #0]
 800ea50:	4611      	mov	r1, r2
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	01d2      	lsls	r2, r2, #7
 800ea56:	440a      	add	r2, r1
 800ea58:	3284      	adds	r2, #132	; 0x84
 800ea5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	461a      	mov	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	01db      	lsls	r3, r3, #7
 800ea6a:	4413      	add	r3, r2
 800ea6c:	3384      	adds	r3, #132	; 0x84
 800ea6e:	461a      	mov	r2, r3
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	01db      	lsls	r3, r3, #7
 800ea80:	4413      	add	r3, r2
 800ea82:	3384      	adds	r3, #132	; 0x84
 800ea84:	69da      	ldr	r2, [r3, #28]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	01db      	lsls	r3, r3, #7
 800ea90:	440b      	add	r3, r1
 800ea92:	3384      	adds	r3, #132	; 0x84
 800ea94:	4619      	mov	r1, r3
 800ea96:	4b58      	ldr	r3, [pc, #352]	; (800ebf8 <LTDC_SetConfig+0x32c>)
 800ea98:	4013      	ands	r3, r2
 800ea9a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	69da      	ldr	r2, [r3, #28]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	6a1b      	ldr	r3, [r3, #32]
 800eaa4:	68f9      	ldr	r1, [r7, #12]
 800eaa6:	6809      	ldr	r1, [r1, #0]
 800eaa8:	4608      	mov	r0, r1
 800eaaa:	6879      	ldr	r1, [r7, #4]
 800eaac:	01c9      	lsls	r1, r1, #7
 800eaae:	4401      	add	r1, r0
 800eab0:	3184      	adds	r1, #132	; 0x84
 800eab2:	4313      	orrs	r3, r2
 800eab4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	01db      	lsls	r3, r3, #7
 800eac0:	4413      	add	r3, r2
 800eac2:	3384      	adds	r3, #132	; 0x84
 800eac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	01db      	lsls	r3, r3, #7
 800ead0:	4413      	add	r3, r2
 800ead2:	3384      	adds	r3, #132	; 0x84
 800ead4:	461a      	mov	r2, r3
 800ead6:	2300      	movs	r3, #0
 800ead8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	01db      	lsls	r3, r3, #7
 800eae4:	4413      	add	r3, r2
 800eae6:	3384      	adds	r3, #132	; 0x84
 800eae8:	461a      	mov	r2, r3
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d102      	bne.n	800eafe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800eaf8:	2304      	movs	r3, #4
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	e01b      	b.n	800eb36 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d102      	bne.n	800eb0c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800eb06:	2303      	movs	r3, #3
 800eb08:	61fb      	str	r3, [r7, #28]
 800eb0a:	e014      	b.n	800eb36 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	691b      	ldr	r3, [r3, #16]
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d00b      	beq.n	800eb2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d007      	beq.n	800eb2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800eb20:	2b03      	cmp	r3, #3
 800eb22:	d003      	beq.n	800eb2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800eb28:	2b07      	cmp	r3, #7
 800eb2a:	d102      	bne.n	800eb32 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	61fb      	str	r3, [r7, #28]
 800eb30:	e001      	b.n	800eb36 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800eb32:	2301      	movs	r3, #1
 800eb34:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	01db      	lsls	r3, r3, #7
 800eb40:	4413      	add	r3, r2
 800eb42:	3384      	adds	r3, #132	; 0x84
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	6812      	ldr	r2, [r2, #0]
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	01d2      	lsls	r2, r2, #7
 800eb50:	440a      	add	r2, r1
 800eb52:	3284      	adds	r2, #132	; 0x84
 800eb54:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800eb58:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb5e:	69fa      	ldr	r2, [r7, #28]
 800eb60:	fb02 f303 	mul.w	r3, r2, r3
 800eb64:	041a      	lsls	r2, r3, #16
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	6859      	ldr	r1, [r3, #4]
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	1acb      	subs	r3, r1, r3
 800eb70:	69f9      	ldr	r1, [r7, #28]
 800eb72:	fb01 f303 	mul.w	r3, r1, r3
 800eb76:	3307      	adds	r3, #7
 800eb78:	68f9      	ldr	r1, [r7, #12]
 800eb7a:	6809      	ldr	r1, [r1, #0]
 800eb7c:	4608      	mov	r0, r1
 800eb7e:	6879      	ldr	r1, [r7, #4]
 800eb80:	01c9      	lsls	r1, r1, #7
 800eb82:	4401      	add	r1, r0
 800eb84:	3184      	adds	r1, #132	; 0x84
 800eb86:	4313      	orrs	r3, r2
 800eb88:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	01db      	lsls	r3, r3, #7
 800eb94:	4413      	add	r3, r2
 800eb96:	3384      	adds	r3, #132	; 0x84
 800eb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	01db      	lsls	r3, r3, #7
 800eba4:	440b      	add	r3, r1
 800eba6:	3384      	adds	r3, #132	; 0x84
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4b14      	ldr	r3, [pc, #80]	; (800ebfc <LTDC_SetConfig+0x330>)
 800ebac:	4013      	ands	r3, r2
 800ebae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	01db      	lsls	r3, r3, #7
 800ebba:	4413      	add	r3, r2
 800ebbc:	3384      	adds	r3, #132	; 0x84
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	01db      	lsls	r3, r3, #7
 800ebd0:	4413      	add	r3, r2
 800ebd2:	3384      	adds	r3, #132	; 0x84
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	6812      	ldr	r2, [r2, #0]
 800ebda:	4611      	mov	r1, r2
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	01d2      	lsls	r2, r2, #7
 800ebe0:	440a      	add	r2, r1
 800ebe2:	3284      	adds	r2, #132	; 0x84
 800ebe4:	f043 0301 	orr.w	r3, r3, #1
 800ebe8:	6013      	str	r3, [r2, #0]
}
 800ebea:	bf00      	nop
 800ebec:	3724      	adds	r7, #36	; 0x24
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf4:	4770      	bx	lr
 800ebf6:	bf00      	nop
 800ebf8:	fffff8f8 	.word	0xfffff8f8
 800ebfc:	fffff800 	.word	0xfffff800

0800ec00 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ec08:	f7fd fee8 	bl	800c9dc <HAL_GetTick>
 800ec0c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e03b      	b.n	800ec90 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2202      	movs	r2, #2
 800ec24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68da      	ldr	r2, [r3, #12]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0201 	bic.w	r2, r2, #1
 800ec36:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ec38:	e00f      	b.n	800ec5a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ec3a:	f7fd fecf 	bl	800c9dc <HAL_GetTick>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	2b05      	cmp	r3, #5
 800ec46:	d908      	bls.n	800ec5a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2240      	movs	r2, #64	; 0x40
 800ec4c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2203      	movs	r2, #3
 800ec52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e01a      	b.n	800ec90 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1e8      	bne.n	800ec3a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f894 	bl	800ed96 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d101      	bne.n	800ecaa <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	e048      	b.n	800ed3c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f022 0201 	bic.w	r2, r2, #1
 800ecb8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2200      	movs	r2, #0
 800ece0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2200      	movs	r2, #0
 800ece8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2200      	movs	r2, #0
 800ed08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	221f      	movs	r2, #31
 800ed10:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d101      	bne.n	800ed5a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e017      	b.n	800ed8a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d004      	beq.n	800ed70 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2280      	movs	r2, #128	; 0x80
 800ed6a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e00c      	b.n	800ed8a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2204      	movs	r2, #4
 800ed74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68da      	ldr	r2, [r3, #12]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f022 0201 	bic.w	r2, r2, #1
 800ed86:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	370c      	adds	r7, #12
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr

0800ed96 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ed96:	b480      	push	{r7}
 800ed98:	b085      	sub	sp, #20
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68d9      	ldr	r1, [r3, #12]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	691a      	ldr	r2, [r3, #16]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	430a      	orrs	r2, r1
 800edac:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	695a      	ldr	r2, [r3, #20]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	699b      	ldr	r3, [r3, #24]
 800edb6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800edbc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a1b      	ldr	r3, [r3, #32]
 800edc2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800edc8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edce:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800edd4:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edda:	3b01      	subs	r3, #1
 800eddc:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800edde:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800edea:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800edec:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edf6:	d107      	bne.n	800ee08 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800ee06:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	da11      	bge.n	800ee3c <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	695a      	ldr	r2, [r3, #20]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee26:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2c:	425b      	negs	r3, r3
 800ee2e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	b292      	uxth	r2, r2
 800ee38:	621a      	str	r2, [r3, #32]
 800ee3a:	e006      	b.n	800ee4a <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee40:	461a      	mov	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	b292      	uxth	r2, r2
 800ee48:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	da15      	bge.n	800ee7e <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	695a      	ldr	r2, [r3, #20]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ee60:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee66:	425b      	negs	r3, r3
 800ee68:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	6a19      	ldr	r1, [r3, #32]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	041a      	lsls	r2, r3, #16
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	430a      	orrs	r2, r1
 800ee7a:	621a      	str	r2, [r3, #32]
 800ee7c:	e009      	b.n	800ee92 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6a19      	ldr	r1, [r3, #32]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee88:	041a      	lsls	r2, r3, #16
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	430a      	orrs	r2, r1
 800ee90:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee9a:	d006      	beq.n	800eeaa <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	b2d2      	uxtb	r2, r2
 800eea6:	629a      	str	r2, [r3, #40]	; 0x28
 800eea8:	e003      	b.n	800eeb2 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800eeba:	bf00      	nop
 800eebc:	3714      	adds	r7, #20
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
	...

0800eec8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800eed0:	4b29      	ldr	r3, [pc, #164]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	f003 0307 	and.w	r3, r3, #7
 800eed8:	2b06      	cmp	r3, #6
 800eeda:	d00a      	beq.n	800eef2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800eedc:	4b26      	ldr	r3, [pc, #152]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d001      	beq.n	800eeee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e040      	b.n	800ef70 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	e03e      	b.n	800ef70 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800eef2:	4b21      	ldr	r3, [pc, #132]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800eefa:	491f      	ldr	r1, [pc, #124]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ef02:	f7fd fd6b 	bl	800c9dc <HAL_GetTick>
 800ef06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef08:	e009      	b.n	800ef1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ef0a:	f7fd fd67 	bl	800c9dc <HAL_GetTick>
 800ef0e:	4602      	mov	r2, r0
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef18:	d901      	bls.n	800ef1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e028      	b.n	800ef70 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef2a:	d1ee      	bne.n	800ef0a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2b1e      	cmp	r3, #30
 800ef30:	d008      	beq.n	800ef44 <HAL_PWREx_ConfigSupply+0x7c>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b2e      	cmp	r3, #46	; 0x2e
 800ef36:	d005      	beq.n	800ef44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b1d      	cmp	r3, #29
 800ef3c:	d002      	beq.n	800ef44 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2b2d      	cmp	r3, #45	; 0x2d
 800ef42:	d114      	bne.n	800ef6e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ef44:	f7fd fd4a 	bl	800c9dc <HAL_GetTick>
 800ef48:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ef4a:	e009      	b.n	800ef60 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ef4c:	f7fd fd46 	bl	800c9dc <HAL_GetTick>
 800ef50:	4602      	mov	r2, r0
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef5a:	d901      	bls.n	800ef60 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e007      	b.n	800ef70 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ef60:	4b05      	ldr	r3, [pc, #20]	; (800ef78 <HAL_PWREx_ConfigSupply+0xb0>)
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef6c:	d1ee      	bne.n	800ef4c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	58024800 	.word	0x58024800

0800ef7c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af02      	add	r7, sp, #8
 800ef82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800ef84:	f7fd fd2a 	bl	800c9dc <HAL_GetTick>
 800ef88:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d101      	bne.n	800ef94 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e05f      	b.n	800f054 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d107      	bne.n	800efb0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7f1 fff3 	bl	8000f8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800efa6:	f241 3188 	movw	r1, #5000	; 0x1388
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fcca 	bl	800f944 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	3b01      	subs	r3, #1
 800efc0:	021a      	lsls	r2, r3, #8
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	430a      	orrs	r2, r1
 800efc8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	2120      	movs	r1, #32
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fcf5 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800efdc:	4603      	mov	r3, r0
 800efde:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d135      	bne.n	800f052 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	4b1b      	ldr	r3, [pc, #108]	; (800f05c <HAL_QSPI_Init+0xe0>)
 800efee:	4013      	ands	r3, r2
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	6852      	ldr	r2, [r2, #4]
 800eff4:	0611      	lsls	r1, r2, #24
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	68d2      	ldr	r2, [r2, #12]
 800effa:	4311      	orrs	r1, r2
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	69d2      	ldr	r2, [r2, #28]
 800f000:	4311      	orrs	r1, r2
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	6a12      	ldr	r2, [r2, #32]
 800f006:	4311      	orrs	r1, r2
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	6812      	ldr	r2, [r2, #0]
 800f00c:	430b      	orrs	r3, r1
 800f00e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	4b12      	ldr	r3, [pc, #72]	; (800f060 <HAL_QSPI_Init+0xe4>)
 800f018:	4013      	ands	r3, r2
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	6912      	ldr	r2, [r2, #16]
 800f01e:	0411      	lsls	r1, r2, #16
 800f020:	687a      	ldr	r2, [r7, #4]
 800f022:	6952      	ldr	r2, [r2, #20]
 800f024:	4311      	orrs	r1, r2
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	6992      	ldr	r2, [r2, #24]
 800f02a:	4311      	orrs	r1, r2
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	6812      	ldr	r2, [r2, #0]
 800f030:	430b      	orrs	r3, r1
 800f032:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f042 0201 	orr.w	r2, r2, #1
 800f042:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2201      	movs	r2, #1
 800f04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800f052:	7afb      	ldrb	r3, [r7, #11]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	00ffff2f 	.word	0x00ffff2f
 800f060:	ffe0f8fe 	.word	0xffe0f8fe

0800f064 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	f003 0304 	and.w	r3, r3, #4
 800f082:	2b00      	cmp	r3, #0
 800f084:	d064      	beq.n	800f150 <HAL_QSPI_IRQHandler+0xec>
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d05f      	beq.n	800f150 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	3320      	adds	r3, #32
 800f096:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b12      	cmp	r3, #18
 800f0a2:	d125      	bne.n	800f0f0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f0a4:	e01c      	b.n	800f0e0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00f      	beq.n	800f0ce <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b2:	781a      	ldrb	r2, [r3, #0]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0bc:	1c5a      	adds	r2, r3, #1
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c6:	1e5a      	subs	r2, r3, #1
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0cc:	e008      	b.n	800f0e0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f0dc:	601a      	str	r2, [r3, #0]
          break;
 800f0de:	e033      	b.n	800f148 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	f003 0304 	and.w	r3, r3, #4
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1db      	bne.n	800f0a6 <HAL_QSPI_IRQHandler+0x42>
 800f0ee:	e02b      	b.n	800f148 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	2b22      	cmp	r3, #34	; 0x22
 800f0fa:	d125      	bne.n	800f148 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f0fc:	e01d      	b.n	800f13a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f102:	2b00      	cmp	r3, #0
 800f104:	d010      	beq.n	800f128 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	7812      	ldrb	r2, [r2, #0]
 800f10e:	b2d2      	uxtb	r2, r2
 800f110:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f120:	1e5a      	subs	r2, r3, #1
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	639a      	str	r2, [r3, #56]	; 0x38
 800f126:	e008      	b.n	800f13a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681a      	ldr	r2, [r3, #0]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f136:	601a      	str	r2, [r3, #0]
          break;
 800f138:	e006      	b.n	800f148 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	f003 0304 	and.w	r3, r3, #4
 800f144:	2b00      	cmp	r3, #0
 800f146:	d1da      	bne.n	800f0fe <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 fbdd 	bl	800f908 <HAL_QSPI_FifoThresholdCallback>
 800f14e:	e13c      	b.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f003 0302 	and.w	r3, r3, #2
 800f156:	2b00      	cmp	r3, #0
 800f158:	f000 80b0 	beq.w	800f2bc <HAL_QSPI_IRQHandler+0x258>
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 80aa 	beq.w	800f2bc <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2202      	movs	r2, #2
 800f16e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f17e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b12      	cmp	r3, #18
 800f18a:	d120      	bne.n	800f1ce <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f003 0304 	and.w	r3, r3, #4
 800f196:	2b00      	cmp	r3, #0
 800f198:	d011      	beq.n	800f1be <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f022 0204 	bic.w	r2, r2, #4
 800f1a8:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68da      	ldr	r2, [r3, #12]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f022 0201 	bic.w	r2, r2, #1
 800f1bc:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fb94 	bl	800f8f4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f1cc:	e0fa      	b.n	800f3c4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b22      	cmp	r3, #34	; 0x22
 800f1d8:	d143      	bne.n	800f262 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f003 0304 	and.w	r3, r3, #4
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d012      	beq.n	800f20e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f022 0204 	bic.w	r2, r2, #4
 800f1f6:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	68da      	ldr	r2, [r3, #12]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f022 0201 	bic.w	r2, r2, #1
 800f20a:	60da      	str	r2, [r3, #12]
 800f20c:	e021      	b.n	800f252 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3320      	adds	r3, #32
 800f214:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f216:	e013      	b.n	800f240 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d017      	beq.n	800f250 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	7812      	ldrb	r2, [r2, #0]
 800f228:	b2d2      	uxtb	r2, r2
 800f22a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f230:	1c5a      	adds	r2, r3, #1
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f23a:	1e5a      	subs	r2, r3, #1
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e4      	bne.n	800f218 <HAL_QSPI_IRQHandler+0x1b4>
 800f24e:	e000      	b.n	800f252 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800f250:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2201      	movs	r2, #1
 800f256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 fb40 	bl	800f8e0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f260:	e0b0      	b.n	800f3c4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d107      	bne.n	800f27e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fb28 	bl	800f8cc <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f27c:	e0a2      	b.n	800f3c4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b08      	cmp	r3, #8
 800f288:	f040 809c 	bne.w	800f3c4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	695a      	ldr	r2, [r3, #20]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f29a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 fb03 	bl	800f8b8 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f2b2:	e087      	b.n	800f3c4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 faf5 	bl	800f8a4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f2ba:	e083      	b.n	800f3c4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	f003 0308 	and.w	r3, r3, #8
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d01f      	beq.n	800f306 <HAL_QSPI_IRQHandler+0x2a2>
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d01a      	beq.n	800f306 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2208      	movs	r2, #8
 800f2d6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00b      	beq.n	800f2fe <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f2f4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fb0c 	bl	800f91c <HAL_QSPI_StatusMatchCallback>
 800f304:	e061      	b.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	f003 0301 	and.w	r3, r3, #1
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d047      	beq.n	800f3a0 <HAL_QSPI_IRQHandler+0x33c>
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d042      	beq.n	800f3a0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2201      	movs	r2, #1
 800f320:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800f330:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f336:	f043 0202 	orr.w	r2, r3, #2
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f003 0304 	and.w	r3, r3, #4
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d021      	beq.n	800f390 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f022 0204 	bic.w	r2, r2, #4
 800f35a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f360:	4a1c      	ldr	r2, [pc, #112]	; (800f3d4 <HAL_QSPI_IRQHandler+0x370>)
 800f362:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f368:	4618      	mov	r0, r3
 800f36a:	f7ff fced 	bl	800ed48 <HAL_MDMA_Abort_IT>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d029      	beq.n	800f3c8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f378:	f043 0204 	orr.w	r2, r3, #4
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2201      	movs	r2, #1
 800f384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 fa8b 	bl	800f8a4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f38e:	e01b      	b.n	800f3c8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fa83 	bl	800f8a4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f39e:	e013      	b.n	800f3c8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f003 0310 	and.w	r3, r3, #16
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00f      	beq.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00a      	beq.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2210      	movs	r2, #16
 800f3ba:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fab7 	bl	800f930 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800f3c2:	e002      	b.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f3c4:	bf00      	nop
 800f3c6:	e000      	b.n	800f3ca <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f3c8:	bf00      	nop
}
 800f3ca:	bf00      	nop
 800f3cc:	3718      	adds	r7, #24
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	0800f961 	.word	0x0800f961

0800f3d8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af02      	add	r7, sp, #8
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f3e4:	f7fd fafa 	bl	800c9dc <HAL_GetTick>
 800f3e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d101      	bne.n	800f3fa <HAL_QSPI_Command+0x22>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e048      	b.n	800f48c <HAL_QSPI_Command+0xb4>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d137      	bne.n	800f47e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2202      	movs	r2, #2
 800f418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	2200      	movs	r2, #0
 800f424:	2120      	movs	r1, #32
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f000 facd 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d125      	bne.n	800f482 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f436:	2200      	movs	r2, #0
 800f438:	68b9      	ldr	r1, [r7, #8]
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 fafa 	bl	800fa34 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f444:	2b00      	cmp	r3, #0
 800f446:	d115      	bne.n	800f474 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	2201      	movs	r2, #1
 800f450:	2102      	movs	r1, #2
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f000 fab7 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f458:	4603      	mov	r3, r0
 800f45a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f45c:	7dfb      	ldrb	r3, [r7, #23]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d10f      	bne.n	800f482 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2202      	movs	r2, #2
 800f468:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f472:	e006      	b.n	800f482 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2201      	movs	r2, #1
 800f478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f47c:	e001      	b.n	800f482 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f47e:	2302      	movs	r3, #2
 800f480:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}

0800f494 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b08a      	sub	sp, #40	; 0x28
 800f498:	af02      	add	r7, sp, #8
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f4a4:	f7fd fa9a 	bl	800c9dc <HAL_GetTick>
 800f4a8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3320      	adds	r3, #32
 800f4b0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d101      	bne.n	800f4c2 <HAL_QSPI_Transmit+0x2e>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	e076      	b.n	800f5b0 <HAL_QSPI_Transmit+0x11c>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d165      	bne.n	800f5a2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d056      	beq.n	800f590 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	2212      	movs	r2, #18
 800f4e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	691b      	ldr	r3, [r3, #16]
 800f4f0:	1c5a      	adds	r2, r3, #1
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	695a      	ldr	r2, [r3, #20]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f516:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f518:	e01b      	b.n	800f552 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	2201      	movs	r2, #1
 800f522:	2104      	movs	r1, #4
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f000 fa4e 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f52a:	4603      	mov	r3, r0
 800f52c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f52e:	7ffb      	ldrb	r3, [r7, #31]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d113      	bne.n	800f55c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f54c:	1e5a      	subs	r2, r3, #1
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1df      	bne.n	800f51a <HAL_QSPI_Transmit+0x86>
 800f55a:	e000      	b.n	800f55e <HAL_QSPI_Transmit+0xca>
          break;
 800f55c:	bf00      	nop
      }

      if (status == HAL_OK)
 800f55e:	7ffb      	ldrb	r3, [r7, #31]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d110      	bne.n	800f586 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	2201      	movs	r2, #1
 800f56c:	2102      	movs	r1, #2
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f000 fa29 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f574:	4603      	mov	r3, r0
 800f576:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f578:	7ffb      	ldrb	r3, [r7, #31]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d103      	bne.n	800f586 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2202      	movs	r2, #2
 800f584:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2201      	movs	r2, #1
 800f58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f58e:	e00a      	b.n	800f5a6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f594:	f043 0208 	orr.w	r2, r3, #8
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f59c:	2301      	movs	r3, #1
 800f59e:	77fb      	strb	r3, [r7, #31]
 800f5a0:	e001      	b.n	800f5a6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f5ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3720      	adds	r7, #32
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b08a      	sub	sp, #40	; 0x28
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f5c8:	f7fd fa08 	bl	800c9dc <HAL_GetTick>
 800f5cc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	3320      	adds	r3, #32
 800f5dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d101      	bne.n	800f5ee <HAL_QSPI_Receive+0x36>
 800f5ea:	2302      	movs	r3, #2
 800f5ec:	e07d      	b.n	800f6ea <HAL_QSPI_Receive+0x132>
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d16c      	bne.n	800f6dc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d05d      	beq.n	800f6ca <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2222      	movs	r2, #34	; 0x22
 800f612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68ba      	ldr	r2, [r7, #8]
 800f632:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f646:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f650:	e01c      	b.n	800f68c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	9300      	str	r3, [sp, #0]
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	2201      	movs	r2, #1
 800f65a:	2106      	movs	r1, #6
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f000 f9b2 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f662:	4603      	mov	r3, r0
 800f664:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f666:	7ffb      	ldrb	r3, [r7, #31]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d114      	bne.n	800f696 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	7812      	ldrb	r2, [r2, #0]
 800f674:	b2d2      	uxtb	r2, r2
 800f676:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f686:	1e5a      	subs	r2, r3, #1
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f690:	2b00      	cmp	r3, #0
 800f692:	d1de      	bne.n	800f652 <HAL_QSPI_Receive+0x9a>
 800f694:	e000      	b.n	800f698 <HAL_QSPI_Receive+0xe0>
          break;
 800f696:	bf00      	nop
      }

      if (status == HAL_OK)
 800f698:	7ffb      	ldrb	r3, [r7, #31]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d110      	bne.n	800f6c0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	2102      	movs	r1, #2
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	f000 f98c 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f6b2:	7ffb      	ldrb	r3, [r7, #31]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d103      	bne.n	800f6c0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2202      	movs	r2, #2
 800f6be:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f6c8:	e00a      	b.n	800f6e0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6ce:	f043 0208 	orr.w	r2, r3, #8
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	77fb      	strb	r3, [r7, #31]
 800f6da:	e001      	b.n	800f6e0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f6dc:	2302      	movs	r3, #2
 800f6de:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f6e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3720      	adds	r7, #32
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b088      	sub	sp, #32
 800f6f6:	af02      	add	r7, sp, #8
 800f6f8:	60f8      	str	r0, [r7, #12]
 800f6fa:	60b9      	str	r1, [r7, #8]
 800f6fc:	607a      	str	r2, [r7, #4]
 800f6fe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f700:	f7fd f96c 	bl	800c9dc <HAL_GetTick>
 800f704:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d101      	bne.n	800f716 <HAL_QSPI_AutoPolling+0x24>
 800f712:	2302      	movs	r3, #2
 800f714:	e060      	b.n	800f7d8 <HAL_QSPI_AutoPolling+0xe6>
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f724:	b2db      	uxtb	r3, r3
 800f726:	2b01      	cmp	r3, #1
 800f728:	d14f      	bne.n	800f7ca <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2242      	movs	r2, #66	; 0x42
 800f734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	9300      	str	r3, [sp, #0]
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	2200      	movs	r2, #0
 800f740:	2120      	movs	r1, #32
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f000 f93f 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f748:	4603      	mov	r3, r0
 800f74a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f74c:	7dfb      	ldrb	r3, [r7, #23]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d13d      	bne.n	800f7ce <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	6812      	ldr	r2, [r2, #0]
 800f75a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	6852      	ldr	r2, [r2, #4]
 800f764:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	6892      	ldr	r2, [r2, #8]
 800f76e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	691b      	ldr	r3, [r3, #16]
 800f77e:	431a      	orrs	r2, r3
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800f788:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68da      	ldr	r2, [r3, #12]
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800f792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f796:	68b9      	ldr	r1, [r7, #8]
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	f000 f94b 	bl	800fa34 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	9300      	str	r3, [sp, #0]
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	2108      	movs	r1, #8
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f000 f90c 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800f7b2:	7dfb      	ldrb	r3, [r7, #23]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d10a      	bne.n	800f7ce <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	2208      	movs	r2, #8
 800f7be:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7c8:	e001      	b.n	800f7ce <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f7ca:	2302      	movs	r3, #2
 800f7cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f7d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3718      	adds	r7, #24
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b088      	sub	sp, #32
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f7ec:	f7fd f8f6 	bl	800c9dc <HAL_GetTick>
 800f7f0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d101      	bne.n	800f802 <HAL_QSPI_MemoryMapped+0x22>
 800f7fe:	2302      	movs	r3, #2
 800f800:	e04c      	b.n	800f89c <HAL_QSPI_MemoryMapped+0xbc>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b01      	cmp	r3, #1
 800f814:	d13b      	bne.n	800f88e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	2282      	movs	r2, #130	; 0x82
 800f820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	2200      	movs	r2, #0
 800f82e:	2120      	movs	r1, #32
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 f8c8 	bl	800f9c6 <QSPI_WaitFlagStateUntilTimeout>
 800f836:	4603      	mov	r3, r0
 800f838:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f83a:	7dfb      	ldrb	r3, [r7, #23]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d128      	bne.n	800f892 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	f023 0108 	bic.w	r1, r3, #8
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685a      	ldr	r2, [r3, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	430a      	orrs	r2, r1
 800f854:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	2b08      	cmp	r3, #8
 800f85c:	d110      	bne.n	800f880 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	6812      	ldr	r2, [r2, #0]
 800f866:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2210      	movs	r2, #16
 800f86e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f87e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800f880:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800f884:	68b9      	ldr	r1, [r7, #8]
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f000 f8d4 	bl	800fa34 <QSPI_Config>
 800f88c:	e001      	b.n	800f892 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f88e:	2302      	movs	r3, #2
 800f890:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3718      	adds	r7, #24
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800f8ac:	bf00      	nop
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800f8e8:	bf00      	nop
 800f8ea:	370c      	adds	r7, #12
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800f8fc:	bf00      	nop
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800f910:	bf00      	nop
 800f912:	370c      	adds	r7, #12
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800f924:	bf00      	nop
 800f926:	370c      	adds	r7, #12
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr

0800f930 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800f930:	b480      	push	{r7}
 800f932:	b083      	sub	sp, #12
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800f938:	bf00      	nop
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr

0800f944 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	683a      	ldr	r2, [r7, #0]
 800f952:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f954:	bf00      	nop
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2200      	movs	r2, #0
 800f972:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f980:	b2db      	uxtb	r3, r3
 800f982:	2b08      	cmp	r3, #8
 800f984:	d114      	bne.n	800f9b0 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2202      	movs	r2, #2
 800f98c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	681a      	ldr	r2, [r3, #0]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f99c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f042 0202 	orr.w	r2, r2, #2
 800f9ac:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800f9ae:	e006      	b.n	800f9be <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	f7ff ff73 	bl	800f8a4 <HAL_QSPI_ErrorCallback>
}
 800f9be:	bf00      	nop
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b084      	sub	sp, #16
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	60b9      	str	r1, [r7, #8]
 800f9d0:	603b      	str	r3, [r7, #0]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f9d6:	e01a      	b.n	800fa0e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9de:	d016      	beq.n	800fa0e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f9e0:	f7fc fffc 	bl	800c9dc <HAL_GetTick>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	69ba      	ldr	r2, [r7, #24]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d302      	bcc.n	800f9f6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d10b      	bne.n	800fa0e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa02:	f043 0201 	orr.w	r2, r3, #1
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e00e      	b.n	800fa2c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	689a      	ldr	r2, [r3, #8]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	4013      	ands	r3, r2
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	bf14      	ite	ne
 800fa1c:	2301      	movne	r3, #1
 800fa1e:	2300      	moveq	r3, #0
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	461a      	mov	r2, r3
 800fa24:	79fb      	ldrb	r3, [r7, #7]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d1d6      	bne.n	800f9d8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3710      	adds	r7, #16
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	60f8      	str	r0, [r7, #12]
 800fa3c:	60b9      	str	r1, [r7, #8]
 800fa3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d009      	beq.n	800fa5c <QSPI_Config+0x28>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fa4e:	d005      	beq.n	800fa5c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	3a01      	subs	r2, #1
 800fa5a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	699b      	ldr	r3, [r3, #24]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f000 80b9 	beq.w	800fbd8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d05f      	beq.n	800fb2e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	6892      	ldr	r2, [r2, #8]
 800fa76:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	69db      	ldr	r3, [r3, #28]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d031      	beq.n	800fae4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa88:	431a      	orrs	r2, r3
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa8e:	431a      	orrs	r2, r3
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	431a      	orrs	r2, r3
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	695b      	ldr	r3, [r3, #20]
 800fa9a:	049b      	lsls	r3, r3, #18
 800fa9c:	431a      	orrs	r2, r3
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	431a      	orrs	r2, r3
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	431a      	orrs	r2, r3
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	431a      	orrs	r2, r3
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	431a      	orrs	r2, r3
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	431a      	orrs	r2, r3
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	ea42 0103 	orr.w	r1, r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	430a      	orrs	r2, r1
 800facc:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fad4:	f000 812e 	beq.w	800fd34 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	68ba      	ldr	r2, [r7, #8]
 800fade:	6852      	ldr	r2, [r2, #4]
 800fae0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800fae2:	e127      	b.n	800fd34 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faec:	431a      	orrs	r2, r3
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf2:	431a      	orrs	r2, r3
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf8:	431a      	orrs	r2, r3
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	695b      	ldr	r3, [r3, #20]
 800fafe:	049b      	lsls	r3, r3, #18
 800fb00:	431a      	orrs	r2, r3
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	691b      	ldr	r3, [r3, #16]
 800fb06:	431a      	orrs	r2, r3
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	6a1b      	ldr	r3, [r3, #32]
 800fb0c:	431a      	orrs	r2, r3
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	431a      	orrs	r2, r3
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	699b      	ldr	r3, [r3, #24]
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	ea42 0103 	orr.w	r1, r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	430a      	orrs	r2, r1
 800fb2a:	615a      	str	r2, [r3, #20]
}
 800fb2c:	e102      	b.n	800fd34 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	69db      	ldr	r3, [r3, #28]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d02e      	beq.n	800fb94 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb3e:	431a      	orrs	r2, r3
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb44:	431a      	orrs	r2, r3
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	695b      	ldr	r3, [r3, #20]
 800fb50:	049b      	lsls	r3, r3, #18
 800fb52:	431a      	orrs	r2, r3
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	6a1b      	ldr	r3, [r3, #32]
 800fb58:	431a      	orrs	r2, r3
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	69db      	ldr	r3, [r3, #28]
 800fb64:	431a      	orrs	r2, r3
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	431a      	orrs	r2, r3
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	ea42 0103 	orr.w	r1, r2, r3
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	430a      	orrs	r2, r1
 800fb7c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fb84:	f000 80d6 	beq.w	800fd34 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	6852      	ldr	r2, [r2, #4]
 800fb90:	619a      	str	r2, [r3, #24]
}
 800fb92:	e0cf      	b.n	800fd34 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb98:	68bb      	ldr	r3, [r7, #8]
 800fb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb9c:	431a      	orrs	r2, r3
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fba2:	431a      	orrs	r2, r3
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba8:	431a      	orrs	r2, r3
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	695b      	ldr	r3, [r3, #20]
 800fbae:	049b      	lsls	r3, r3, #18
 800fbb0:	431a      	orrs	r2, r3
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	6a1b      	ldr	r3, [r3, #32]
 800fbb6:	431a      	orrs	r2, r3
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	69db      	ldr	r3, [r3, #28]
 800fbbc:	431a      	orrs	r2, r3
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	699b      	ldr	r3, [r3, #24]
 800fbc2:	431a      	orrs	r2, r3
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	ea42 0103 	orr.w	r1, r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	430a      	orrs	r2, r1
 800fbd4:	615a      	str	r2, [r3, #20]
}
 800fbd6:	e0ad      	b.n	800fd34 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	6a1b      	ldr	r3, [r3, #32]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d058      	beq.n	800fc92 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	6892      	ldr	r2, [r2, #8]
 800fbe8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	69db      	ldr	r3, [r3, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d02d      	beq.n	800fc4e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfa:	431a      	orrs	r2, r3
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc00:	431a      	orrs	r2, r3
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc06:	431a      	orrs	r2, r3
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	695b      	ldr	r3, [r3, #20]
 800fc0c:	049b      	lsls	r3, r3, #18
 800fc0e:	431a      	orrs	r2, r3
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	431a      	orrs	r2, r3
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	6a1b      	ldr	r3, [r3, #32]
 800fc1a:	431a      	orrs	r2, r3
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	431a      	orrs	r2, r3
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	69db      	ldr	r3, [r3, #28]
 800fc26:	431a      	orrs	r2, r3
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	ea42 0103 	orr.w	r1, r2, r3
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	430a      	orrs	r2, r1
 800fc38:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fc40:	d078      	beq.n	800fd34 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	6852      	ldr	r2, [r2, #4]
 800fc4a:	619a      	str	r2, [r3, #24]
}
 800fc4c:	e072      	b.n	800fd34 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc56:	431a      	orrs	r2, r3
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5c:	431a      	orrs	r2, r3
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc62:	431a      	orrs	r2, r3
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	695b      	ldr	r3, [r3, #20]
 800fc68:	049b      	lsls	r3, r3, #18
 800fc6a:	431a      	orrs	r2, r3
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	431a      	orrs	r2, r3
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	431a      	orrs	r2, r3
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	431a      	orrs	r2, r3
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	699b      	ldr	r3, [r3, #24]
 800fc82:	ea42 0103 	orr.w	r1, r2, r3
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	430a      	orrs	r2, r1
 800fc8e:	615a      	str	r2, [r3, #20]
}
 800fc90:	e050      	b.n	800fd34 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	69db      	ldr	r3, [r3, #28]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d02a      	beq.n	800fcf0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fca2:	431a      	orrs	r2, r3
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fca8:	431a      	orrs	r2, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcae:	431a      	orrs	r2, r3
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	049b      	lsls	r3, r3, #18
 800fcb6:	431a      	orrs	r2, r3
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	6a1b      	ldr	r3, [r3, #32]
 800fcbc:	431a      	orrs	r2, r3
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	431a      	orrs	r2, r3
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	ea42 0103 	orr.w	r1, r2, r3
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	687a      	ldr	r2, [r7, #4]
 800fcd8:	430a      	orrs	r2, r1
 800fcda:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fce2:	d027      	beq.n	800fd34 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	6852      	ldr	r2, [r2, #4]
 800fcec:	619a      	str	r2, [r3, #24]
}
 800fcee:	e021      	b.n	800fd34 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d01d      	beq.n	800fd34 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd00:	431a      	orrs	r2, r3
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd06:	431a      	orrs	r2, r3
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0c:	431a      	orrs	r2, r3
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	049b      	lsls	r3, r3, #18
 800fd14:	431a      	orrs	r2, r3
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	6a1b      	ldr	r3, [r3, #32]
 800fd1a:	431a      	orrs	r2, r3
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	69db      	ldr	r3, [r3, #28]
 800fd20:	431a      	orrs	r2, r3
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	699b      	ldr	r3, [r3, #24]
 800fd26:	ea42 0103 	orr.w	r1, r2, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	430a      	orrs	r2, r1
 800fd32:	615a      	str	r2, [r3, #20]
}
 800fd34:	bf00      	nop
 800fd36:	3714      	adds	r7, #20
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08c      	sub	sp, #48	; 0x30
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	f000 bc1d 	b.w	801058e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f003 0301 	and.w	r3, r3, #1
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f000 8087 	beq.w	800fe70 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fd62:	4b99      	ldr	r3, [pc, #612]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fd6c:	4b96      	ldr	r3, [pc, #600]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd70:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800fd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd74:	2b10      	cmp	r3, #16
 800fd76:	d007      	beq.n	800fd88 <HAL_RCC_OscConfig+0x48>
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	2b18      	cmp	r3, #24
 800fd7c:	d110      	bne.n	800fda0 <HAL_RCC_OscConfig+0x60>
 800fd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd80:	f003 0303 	and.w	r3, r3, #3
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d10b      	bne.n	800fda0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd88:	4b8f      	ldr	r3, [pc, #572]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d06c      	beq.n	800fe6e <HAL_RCC_OscConfig+0x12e>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d168      	bne.n	800fe6e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e3f6      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fda8:	d106      	bne.n	800fdb8 <HAL_RCC_OscConfig+0x78>
 800fdaa:	4b87      	ldr	r3, [pc, #540]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a86      	ldr	r2, [pc, #536]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdb4:	6013      	str	r3, [r2, #0]
 800fdb6:	e02e      	b.n	800fe16 <HAL_RCC_OscConfig+0xd6>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10c      	bne.n	800fdda <HAL_RCC_OscConfig+0x9a>
 800fdc0:	4b81      	ldr	r3, [pc, #516]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a80      	ldr	r2, [pc, #512]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	4b7e      	ldr	r3, [pc, #504]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4a7d      	ldr	r2, [pc, #500]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	e01d      	b.n	800fe16 <HAL_RCC_OscConfig+0xd6>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fde2:	d10c      	bne.n	800fdfe <HAL_RCC_OscConfig+0xbe>
 800fde4:	4b78      	ldr	r3, [pc, #480]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a77      	ldr	r2, [pc, #476]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fdee:	6013      	str	r3, [r2, #0]
 800fdf0:	4b75      	ldr	r3, [pc, #468]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	4a74      	ldr	r2, [pc, #464]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fdf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdfa:	6013      	str	r3, [r2, #0]
 800fdfc:	e00b      	b.n	800fe16 <HAL_RCC_OscConfig+0xd6>
 800fdfe:	4b72      	ldr	r3, [pc, #456]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a71      	ldr	r2, [pc, #452]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	4b6f      	ldr	r3, [pc, #444]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a6e      	ldr	r2, [pc, #440]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fe14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d013      	beq.n	800fe46 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe1e:	f7fc fddd 	bl	800c9dc <HAL_GetTick>
 800fe22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe24:	e008      	b.n	800fe38 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe26:	f7fc fdd9 	bl	800c9dc <HAL_GetTick>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	1ad3      	subs	r3, r2, r3
 800fe30:	2b64      	cmp	r3, #100	; 0x64
 800fe32:	d901      	bls.n	800fe38 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800fe34:	2303      	movs	r3, #3
 800fe36:	e3aa      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe38:	4b63      	ldr	r3, [pc, #396]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d0f0      	beq.n	800fe26 <HAL_RCC_OscConfig+0xe6>
 800fe44:	e014      	b.n	800fe70 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe46:	f7fc fdc9 	bl	800c9dc <HAL_GetTick>
 800fe4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fe4c:	e008      	b.n	800fe60 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe4e:	f7fc fdc5 	bl	800c9dc <HAL_GetTick>
 800fe52:	4602      	mov	r2, r0
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	2b64      	cmp	r3, #100	; 0x64
 800fe5a:	d901      	bls.n	800fe60 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	e396      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fe60:	4b59      	ldr	r3, [pc, #356]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1f0      	bne.n	800fe4e <HAL_RCC_OscConfig+0x10e>
 800fe6c:	e000      	b.n	800fe70 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f003 0302 	and.w	r3, r3, #2
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f000 80cb 	beq.w	8010014 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fe7e:	4b52      	ldr	r3, [pc, #328]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe86:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fe88:	4b4f      	ldr	r3, [pc, #316]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fe8e:	6a3b      	ldr	r3, [r7, #32]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d007      	beq.n	800fea4 <HAL_RCC_OscConfig+0x164>
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	2b18      	cmp	r3, #24
 800fe98:	d156      	bne.n	800ff48 <HAL_RCC_OscConfig+0x208>
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	f003 0303 	and.w	r3, r3, #3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d151      	bne.n	800ff48 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fea4:	4b48      	ldr	r3, [pc, #288]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f003 0304 	and.w	r3, r3, #4
 800feac:	2b00      	cmp	r3, #0
 800feae:	d005      	beq.n	800febc <HAL_RCC_OscConfig+0x17c>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d101      	bne.n	800febc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800feb8:	2301      	movs	r3, #1
 800feba:	e368      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800febc:	4b42      	ldr	r3, [pc, #264]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	f023 0219 	bic.w	r2, r3, #25
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	493f      	ldr	r1, [pc, #252]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800feca:	4313      	orrs	r3, r2
 800fecc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fece:	f7fc fd85 	bl	800c9dc <HAL_GetTick>
 800fed2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fed4:	e008      	b.n	800fee8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fed6:	f7fc fd81 	bl	800c9dc <HAL_GetTick>
 800feda:	4602      	mov	r2, r0
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	1ad3      	subs	r3, r2, r3
 800fee0:	2b02      	cmp	r3, #2
 800fee2:	d901      	bls.n	800fee8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800fee4:	2303      	movs	r3, #3
 800fee6:	e352      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fee8:	4b37      	ldr	r3, [pc, #220]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f003 0304 	and.w	r3, r3, #4
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d0f0      	beq.n	800fed6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fef4:	f7fc fd7e 	bl	800c9f4 <HAL_GetREVID>
 800fef8:	4603      	mov	r3, r0
 800fefa:	f241 0203 	movw	r2, #4099	; 0x1003
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d817      	bhi.n	800ff32 <HAL_RCC_OscConfig+0x1f2>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	2b40      	cmp	r3, #64	; 0x40
 800ff08:	d108      	bne.n	800ff1c <HAL_RCC_OscConfig+0x1dc>
 800ff0a:	4b2f      	ldr	r3, [pc, #188]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ff12:	4a2d      	ldr	r2, [pc, #180]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ff18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff1a:	e07b      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff1c:	4b2a      	ldr	r3, [pc, #168]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	031b      	lsls	r3, r3, #12
 800ff2a:	4927      	ldr	r1, [pc, #156]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff30:	e070      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff32:	4b25      	ldr	r3, [pc, #148]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	691b      	ldr	r3, [r3, #16]
 800ff3e:	061b      	lsls	r3, r3, #24
 800ff40:	4921      	ldr	r1, [pc, #132]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff42:	4313      	orrs	r3, r2
 800ff44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff46:	e065      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d048      	beq.n	800ffe2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ff50:	4b1d      	ldr	r3, [pc, #116]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f023 0219 	bic.w	r2, r3, #25
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	491a      	ldr	r1, [pc, #104]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff62:	f7fc fd3b 	bl	800c9dc <HAL_GetTick>
 800ff66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff68:	e008      	b.n	800ff7c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ff6a:	f7fc fd37 	bl	800c9dc <HAL_GetTick>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d901      	bls.n	800ff7c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	e308      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff7c:	4b12      	ldr	r3, [pc, #72]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0f0      	beq.n	800ff6a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff88:	f7fc fd34 	bl	800c9f4 <HAL_GetREVID>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	f241 0203 	movw	r2, #4099	; 0x1003
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d81a      	bhi.n	800ffcc <HAL_RCC_OscConfig+0x28c>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	2b40      	cmp	r3, #64	; 0x40
 800ff9c:	d108      	bne.n	800ffb0 <HAL_RCC_OscConfig+0x270>
 800ff9e:	4b0a      	ldr	r3, [pc, #40]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ffa6:	4a08      	ldr	r2, [pc, #32]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ffa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ffac:	6053      	str	r3, [r2, #4]
 800ffae:	e031      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
 800ffb0:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	691b      	ldr	r3, [r3, #16]
 800ffbc:	031b      	lsls	r3, r3, #12
 800ffbe:	4902      	ldr	r1, [pc, #8]	; (800ffc8 <HAL_RCC_OscConfig+0x288>)
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	604b      	str	r3, [r1, #4]
 800ffc4:	e026      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
 800ffc6:	bf00      	nop
 800ffc8:	58024400 	.word	0x58024400
 800ffcc:	4b9a      	ldr	r3, [pc, #616]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	691b      	ldr	r3, [r3, #16]
 800ffd8:	061b      	lsls	r3, r3, #24
 800ffda:	4997      	ldr	r1, [pc, #604]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	604b      	str	r3, [r1, #4]
 800ffe0:	e018      	b.n	8010014 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ffe2:	4b95      	ldr	r3, [pc, #596]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a94      	ldr	r2, [pc, #592]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 800ffe8:	f023 0301 	bic.w	r3, r3, #1
 800ffec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffee:	f7fc fcf5 	bl	800c9dc <HAL_GetTick>
 800fff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fff4:	e008      	b.n	8010008 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fff6:	f7fc fcf1 	bl	800c9dc <HAL_GetTick>
 800fffa:	4602      	mov	r2, r0
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	1ad3      	subs	r3, r2, r3
 8010000:	2b02      	cmp	r3, #2
 8010002:	d901      	bls.n	8010008 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010004:	2303      	movs	r3, #3
 8010006:	e2c2      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010008:	4b8b      	ldr	r3, [pc, #556]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f003 0304 	and.w	r3, r3, #4
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1f0      	bne.n	800fff6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f003 0310 	and.w	r3, r3, #16
 801001c:	2b00      	cmp	r3, #0
 801001e:	f000 80a9 	beq.w	8010174 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010022:	4b85      	ldr	r3, [pc, #532]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801002a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801002c:	4b82      	ldr	r3, [pc, #520]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801002e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010030:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	2b08      	cmp	r3, #8
 8010036:	d007      	beq.n	8010048 <HAL_RCC_OscConfig+0x308>
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	2b18      	cmp	r3, #24
 801003c:	d13a      	bne.n	80100b4 <HAL_RCC_OscConfig+0x374>
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f003 0303 	and.w	r3, r3, #3
 8010044:	2b01      	cmp	r3, #1
 8010046:	d135      	bne.n	80100b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010048:	4b7b      	ldr	r3, [pc, #492]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010050:	2b00      	cmp	r3, #0
 8010052:	d005      	beq.n	8010060 <HAL_RCC_OscConfig+0x320>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	2b80      	cmp	r3, #128	; 0x80
 801005a:	d001      	beq.n	8010060 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801005c:	2301      	movs	r3, #1
 801005e:	e296      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010060:	f7fc fcc8 	bl	800c9f4 <HAL_GetREVID>
 8010064:	4603      	mov	r3, r0
 8010066:	f241 0203 	movw	r2, #4099	; 0x1003
 801006a:	4293      	cmp	r3, r2
 801006c:	d817      	bhi.n	801009e <HAL_RCC_OscConfig+0x35e>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	2b20      	cmp	r3, #32
 8010074:	d108      	bne.n	8010088 <HAL_RCC_OscConfig+0x348>
 8010076:	4b70      	ldr	r3, [pc, #448]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801007e:	4a6e      	ldr	r2, [pc, #440]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010084:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010086:	e075      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010088:	4b6b      	ldr	r3, [pc, #428]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a1b      	ldr	r3, [r3, #32]
 8010094:	069b      	lsls	r3, r3, #26
 8010096:	4968      	ldr	r1, [pc, #416]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010098:	4313      	orrs	r3, r2
 801009a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801009c:	e06a      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801009e:	4b66      	ldr	r3, [pc, #408]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	061b      	lsls	r3, r3, #24
 80100ac:	4962      	ldr	r1, [pc, #392]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80100ae:	4313      	orrs	r3, r2
 80100b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80100b2:	e05f      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	69db      	ldr	r3, [r3, #28]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d042      	beq.n	8010142 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80100bc:	4b5e      	ldr	r3, [pc, #376]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	4a5d      	ldr	r2, [pc, #372]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80100c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100c8:	f7fc fc88 	bl	800c9dc <HAL_GetTick>
 80100cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80100ce:	e008      	b.n	80100e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80100d0:	f7fc fc84 	bl	800c9dc <HAL_GetTick>
 80100d4:	4602      	mov	r2, r0
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d901      	bls.n	80100e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80100de:	2303      	movs	r3, #3
 80100e0:	e255      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80100e2:	4b55      	ldr	r3, [pc, #340]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d0f0      	beq.n	80100d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80100ee:	f7fc fc81 	bl	800c9f4 <HAL_GetREVID>
 80100f2:	4603      	mov	r3, r0
 80100f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80100f8:	4293      	cmp	r3, r2
 80100fa:	d817      	bhi.n	801012c <HAL_RCC_OscConfig+0x3ec>
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	2b20      	cmp	r3, #32
 8010102:	d108      	bne.n	8010116 <HAL_RCC_OscConfig+0x3d6>
 8010104:	4b4c      	ldr	r3, [pc, #304]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801010c:	4a4a      	ldr	r2, [pc, #296]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801010e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010112:	6053      	str	r3, [r2, #4]
 8010114:	e02e      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
 8010116:	4b48      	ldr	r3, [pc, #288]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	069b      	lsls	r3, r3, #26
 8010124:	4944      	ldr	r1, [pc, #272]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010126:	4313      	orrs	r3, r2
 8010128:	604b      	str	r3, [r1, #4]
 801012a:	e023      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
 801012c:	4b42      	ldr	r3, [pc, #264]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801012e:	68db      	ldr	r3, [r3, #12]
 8010130:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6a1b      	ldr	r3, [r3, #32]
 8010138:	061b      	lsls	r3, r3, #24
 801013a:	493f      	ldr	r1, [pc, #252]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801013c:	4313      	orrs	r3, r2
 801013e:	60cb      	str	r3, [r1, #12]
 8010140:	e018      	b.n	8010174 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8010142:	4b3d      	ldr	r3, [pc, #244]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a3c      	ldr	r2, [pc, #240]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801014c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801014e:	f7fc fc45 	bl	800c9dc <HAL_GetTick>
 8010152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010154:	e008      	b.n	8010168 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8010156:	f7fc fc41 	bl	800c9dc <HAL_GetTick>
 801015a:	4602      	mov	r2, r0
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	2b02      	cmp	r3, #2
 8010162:	d901      	bls.n	8010168 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010164:	2303      	movs	r3, #3
 8010166:	e212      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8010168:	4b33      	ldr	r3, [pc, #204]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1f0      	bne.n	8010156 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f003 0308 	and.w	r3, r3, #8
 801017c:	2b00      	cmp	r3, #0
 801017e:	d036      	beq.n	80101ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	695b      	ldr	r3, [r3, #20]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d019      	beq.n	80101bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010188:	4b2b      	ldr	r3, [pc, #172]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801018a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801018c:	4a2a      	ldr	r2, [pc, #168]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801018e:	f043 0301 	orr.w	r3, r3, #1
 8010192:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010194:	f7fc fc22 	bl	800c9dc <HAL_GetTick>
 8010198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801019a:	e008      	b.n	80101ae <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801019c:	f7fc fc1e 	bl	800c9dc <HAL_GetTick>
 80101a0:	4602      	mov	r2, r0
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	d901      	bls.n	80101ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80101aa:	2303      	movs	r3, #3
 80101ac:	e1ef      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80101ae:	4b22      	ldr	r3, [pc, #136]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80101b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d0f0      	beq.n	801019c <HAL_RCC_OscConfig+0x45c>
 80101ba:	e018      	b.n	80101ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80101bc:	4b1e      	ldr	r3, [pc, #120]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80101be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101c0:	4a1d      	ldr	r2, [pc, #116]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80101c2:	f023 0301 	bic.w	r3, r3, #1
 80101c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80101c8:	f7fc fc08 	bl	800c9dc <HAL_GetTick>
 80101cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80101ce:	e008      	b.n	80101e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80101d0:	f7fc fc04 	bl	800c9dc <HAL_GetTick>
 80101d4:	4602      	mov	r2, r0
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d901      	bls.n	80101e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80101de:	2303      	movs	r3, #3
 80101e0:	e1d5      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80101e2:	4b15      	ldr	r3, [pc, #84]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 80101e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101e6:	f003 0302 	and.w	r3, r3, #2
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1f0      	bne.n	80101d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f003 0320 	and.w	r3, r3, #32
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d039      	beq.n	801026e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	699b      	ldr	r3, [r3, #24]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d01c      	beq.n	801023c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010202:	4b0d      	ldr	r3, [pc, #52]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	4a0c      	ldr	r2, [pc, #48]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 8010208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801020c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801020e:	f7fc fbe5 	bl	800c9dc <HAL_GetTick>
 8010212:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010214:	e008      	b.n	8010228 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010216:	f7fc fbe1 	bl	800c9dc <HAL_GetTick>
 801021a:	4602      	mov	r2, r0
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	1ad3      	subs	r3, r2, r3
 8010220:	2b02      	cmp	r3, #2
 8010222:	d901      	bls.n	8010228 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8010224:	2303      	movs	r3, #3
 8010226:	e1b2      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010228:	4b03      	ldr	r3, [pc, #12]	; (8010238 <HAL_RCC_OscConfig+0x4f8>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010230:	2b00      	cmp	r3, #0
 8010232:	d0f0      	beq.n	8010216 <HAL_RCC_OscConfig+0x4d6>
 8010234:	e01b      	b.n	801026e <HAL_RCC_OscConfig+0x52e>
 8010236:	bf00      	nop
 8010238:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801023c:	4b9b      	ldr	r3, [pc, #620]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a9a      	ldr	r2, [pc, #616]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010246:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010248:	f7fc fbc8 	bl	800c9dc <HAL_GetTick>
 801024c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801024e:	e008      	b.n	8010262 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8010250:	f7fc fbc4 	bl	800c9dc <HAL_GetTick>
 8010254:	4602      	mov	r2, r0
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	2b02      	cmp	r3, #2
 801025c:	d901      	bls.n	8010262 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801025e:	2303      	movs	r3, #3
 8010260:	e195      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010262:	4b92      	ldr	r3, [pc, #584]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801026a:	2b00      	cmp	r3, #0
 801026c:	d1f0      	bne.n	8010250 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f003 0304 	and.w	r3, r3, #4
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 8081 	beq.w	801037e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801027c:	4b8c      	ldr	r3, [pc, #560]	; (80104b0 <HAL_RCC_OscConfig+0x770>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	4a8b      	ldr	r2, [pc, #556]	; (80104b0 <HAL_RCC_OscConfig+0x770>)
 8010282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010288:	f7fc fba8 	bl	800c9dc <HAL_GetTick>
 801028c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801028e:	e008      	b.n	80102a2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8010290:	f7fc fba4 	bl	800c9dc <HAL_GetTick>
 8010294:	4602      	mov	r2, r0
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	2b64      	cmp	r3, #100	; 0x64
 801029c:	d901      	bls.n	80102a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801029e:	2303      	movs	r3, #3
 80102a0:	e175      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80102a2:	4b83      	ldr	r3, [pc, #524]	; (80104b0 <HAL_RCC_OscConfig+0x770>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d0f0      	beq.n	8010290 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	689b      	ldr	r3, [r3, #8]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d106      	bne.n	80102c4 <HAL_RCC_OscConfig+0x584>
 80102b6:	4b7d      	ldr	r3, [pc, #500]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ba:	4a7c      	ldr	r2, [pc, #496]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102bc:	f043 0301 	orr.w	r3, r3, #1
 80102c0:	6713      	str	r3, [r2, #112]	; 0x70
 80102c2:	e02d      	b.n	8010320 <HAL_RCC_OscConfig+0x5e0>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10c      	bne.n	80102e6 <HAL_RCC_OscConfig+0x5a6>
 80102cc:	4b77      	ldr	r3, [pc, #476]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d0:	4a76      	ldr	r2, [pc, #472]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102d2:	f023 0301 	bic.w	r3, r3, #1
 80102d6:	6713      	str	r3, [r2, #112]	; 0x70
 80102d8:	4b74      	ldr	r3, [pc, #464]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102dc:	4a73      	ldr	r2, [pc, #460]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102de:	f023 0304 	bic.w	r3, r3, #4
 80102e2:	6713      	str	r3, [r2, #112]	; 0x70
 80102e4:	e01c      	b.n	8010320 <HAL_RCC_OscConfig+0x5e0>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	2b05      	cmp	r3, #5
 80102ec:	d10c      	bne.n	8010308 <HAL_RCC_OscConfig+0x5c8>
 80102ee:	4b6f      	ldr	r3, [pc, #444]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102f2:	4a6e      	ldr	r2, [pc, #440]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102f4:	f043 0304 	orr.w	r3, r3, #4
 80102f8:	6713      	str	r3, [r2, #112]	; 0x70
 80102fa:	4b6c      	ldr	r3, [pc, #432]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80102fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102fe:	4a6b      	ldr	r2, [pc, #428]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010300:	f043 0301 	orr.w	r3, r3, #1
 8010304:	6713      	str	r3, [r2, #112]	; 0x70
 8010306:	e00b      	b.n	8010320 <HAL_RCC_OscConfig+0x5e0>
 8010308:	4b68      	ldr	r3, [pc, #416]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801030a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801030c:	4a67      	ldr	r2, [pc, #412]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801030e:	f023 0301 	bic.w	r3, r3, #1
 8010312:	6713      	str	r3, [r2, #112]	; 0x70
 8010314:	4b65      	ldr	r3, [pc, #404]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010318:	4a64      	ldr	r2, [pc, #400]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801031a:	f023 0304 	bic.w	r3, r3, #4
 801031e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	689b      	ldr	r3, [r3, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d015      	beq.n	8010354 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010328:	f7fc fb58 	bl	800c9dc <HAL_GetTick>
 801032c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801032e:	e00a      	b.n	8010346 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010330:	f7fc fb54 	bl	800c9dc <HAL_GetTick>
 8010334:	4602      	mov	r2, r0
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	1ad3      	subs	r3, r2, r3
 801033a:	f241 3288 	movw	r2, #5000	; 0x1388
 801033e:	4293      	cmp	r3, r2
 8010340:	d901      	bls.n	8010346 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8010342:	2303      	movs	r3, #3
 8010344:	e123      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010346:	4b59      	ldr	r3, [pc, #356]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801034a:	f003 0302 	and.w	r3, r3, #2
 801034e:	2b00      	cmp	r3, #0
 8010350:	d0ee      	beq.n	8010330 <HAL_RCC_OscConfig+0x5f0>
 8010352:	e014      	b.n	801037e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010354:	f7fc fb42 	bl	800c9dc <HAL_GetTick>
 8010358:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801035a:	e00a      	b.n	8010372 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801035c:	f7fc fb3e 	bl	800c9dc <HAL_GetTick>
 8010360:	4602      	mov	r2, r0
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	f241 3288 	movw	r2, #5000	; 0x1388
 801036a:	4293      	cmp	r3, r2
 801036c:	d901      	bls.n	8010372 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801036e:	2303      	movs	r3, #3
 8010370:	e10d      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8010372:	4b4e      	ldr	r3, [pc, #312]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010376:	f003 0302 	and.w	r3, r3, #2
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1ee      	bne.n	801035c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 8102 	beq.w	801058c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8010388:	4b48      	ldr	r3, [pc, #288]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010390:	2b18      	cmp	r3, #24
 8010392:	f000 80bd 	beq.w	8010510 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039a:	2b02      	cmp	r3, #2
 801039c:	f040 809e 	bne.w	80104dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80103a0:	4b42      	ldr	r3, [pc, #264]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a41      	ldr	r2, [pc, #260]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80103a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80103aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80103ac:	f7fc fb16 	bl	800c9dc <HAL_GetTick>
 80103b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80103b2:	e008      	b.n	80103c6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80103b4:	f7fc fb12 	bl	800c9dc <HAL_GetTick>
 80103b8:	4602      	mov	r2, r0
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d901      	bls.n	80103c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80103c2:	2303      	movs	r3, #3
 80103c4:	e0e3      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80103c6:	4b39      	ldr	r3, [pc, #228]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1f0      	bne.n	80103b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80103d2:	4b36      	ldr	r3, [pc, #216]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80103d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103d6:	4b37      	ldr	r3, [pc, #220]	; (80104b4 <HAL_RCC_OscConfig+0x774>)
 80103d8:	4013      	ands	r3, r2
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80103e2:	0112      	lsls	r2, r2, #4
 80103e4:	430a      	orrs	r2, r1
 80103e6:	4931      	ldr	r1, [pc, #196]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 80103e8:	4313      	orrs	r3, r2
 80103ea:	628b      	str	r3, [r1, #40]	; 0x28
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103f0:	3b01      	subs	r3, #1
 80103f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103fa:	3b01      	subs	r3, #1
 80103fc:	025b      	lsls	r3, r3, #9
 80103fe:	b29b      	uxth	r3, r3
 8010400:	431a      	orrs	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010406:	3b01      	subs	r3, #1
 8010408:	041b      	lsls	r3, r3, #16
 801040a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801040e:	431a      	orrs	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010414:	3b01      	subs	r3, #1
 8010416:	061b      	lsls	r3, r3, #24
 8010418:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801041c:	4923      	ldr	r1, [pc, #140]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801041e:	4313      	orrs	r3, r2
 8010420:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8010422:	4b22      	ldr	r3, [pc, #136]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010426:	4a21      	ldr	r2, [pc, #132]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010428:	f023 0301 	bic.w	r3, r3, #1
 801042c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801042e:	4b1f      	ldr	r3, [pc, #124]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010432:	4b21      	ldr	r3, [pc, #132]	; (80104b8 <HAL_RCC_OscConfig+0x778>)
 8010434:	4013      	ands	r3, r2
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801043a:	00d2      	lsls	r2, r2, #3
 801043c:	491b      	ldr	r1, [pc, #108]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801043e:	4313      	orrs	r3, r2
 8010440:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010442:	4b1a      	ldr	r3, [pc, #104]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010446:	f023 020c 	bic.w	r2, r3, #12
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801044e:	4917      	ldr	r1, [pc, #92]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010450:	4313      	orrs	r3, r2
 8010452:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8010454:	4b15      	ldr	r3, [pc, #84]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010458:	f023 0202 	bic.w	r2, r3, #2
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010460:	4912      	ldr	r1, [pc, #72]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010462:	4313      	orrs	r3, r2
 8010464:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8010466:	4b11      	ldr	r3, [pc, #68]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046a:	4a10      	ldr	r2, [pc, #64]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801046c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010470:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010472:	4b0e      	ldr	r3, [pc, #56]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010476:	4a0d      	ldr	r2, [pc, #52]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801047c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801047e:	4b0b      	ldr	r3, [pc, #44]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010482:	4a0a      	ldr	r2, [pc, #40]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010488:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801048a:	4b08      	ldr	r3, [pc, #32]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048e:	4a07      	ldr	r2, [pc, #28]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010490:	f043 0301 	orr.w	r3, r3, #1
 8010494:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010496:	4b05      	ldr	r3, [pc, #20]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	4a04      	ldr	r2, [pc, #16]	; (80104ac <HAL_RCC_OscConfig+0x76c>)
 801049c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80104a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104a2:	f7fc fa9b 	bl	800c9dc <HAL_GetTick>
 80104a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80104a8:	e011      	b.n	80104ce <HAL_RCC_OscConfig+0x78e>
 80104aa:	bf00      	nop
 80104ac:	58024400 	.word	0x58024400
 80104b0:	58024800 	.word	0x58024800
 80104b4:	fffffc0c 	.word	0xfffffc0c
 80104b8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104bc:	f7fc fa8e 	bl	800c9dc <HAL_GetTick>
 80104c0:	4602      	mov	r2, r0
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	1ad3      	subs	r3, r2, r3
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d901      	bls.n	80104ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80104ca:	2303      	movs	r3, #3
 80104cc:	e05f      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80104ce:	4b32      	ldr	r3, [pc, #200]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d0f0      	beq.n	80104bc <HAL_RCC_OscConfig+0x77c>
 80104da:	e057      	b.n	801058c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80104dc:	4b2e      	ldr	r3, [pc, #184]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a2d      	ldr	r2, [pc, #180]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 80104e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80104e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104e8:	f7fc fa78 	bl	800c9dc <HAL_GetTick>
 80104ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80104ee:	e008      	b.n	8010502 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80104f0:	f7fc fa74 	bl	800c9dc <HAL_GetTick>
 80104f4:	4602      	mov	r2, r0
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	2b02      	cmp	r3, #2
 80104fc:	d901      	bls.n	8010502 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80104fe:	2303      	movs	r3, #3
 8010500:	e045      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010502:	4b25      	ldr	r3, [pc, #148]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801050a:	2b00      	cmp	r3, #0
 801050c:	d1f0      	bne.n	80104f0 <HAL_RCC_OscConfig+0x7b0>
 801050e:	e03d      	b.n	801058c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010510:	4b21      	ldr	r3, [pc, #132]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 8010512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010514:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010516:	4b20      	ldr	r3, [pc, #128]	; (8010598 <HAL_RCC_OscConfig+0x858>)
 8010518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010520:	2b01      	cmp	r3, #1
 8010522:	d031      	beq.n	8010588 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	f003 0203 	and.w	r2, r3, #3
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801052e:	429a      	cmp	r2, r3
 8010530:	d12a      	bne.n	8010588 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	091b      	lsrs	r3, r3, #4
 8010536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801053e:	429a      	cmp	r2, r3
 8010540:	d122      	bne.n	8010588 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801054c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801054e:	429a      	cmp	r2, r3
 8010550:	d11a      	bne.n	8010588 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	0a5b      	lsrs	r3, r3, #9
 8010556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801055e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010560:	429a      	cmp	r2, r3
 8010562:	d111      	bne.n	8010588 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	0c1b      	lsrs	r3, r3, #16
 8010568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010570:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010572:	429a      	cmp	r2, r3
 8010574:	d108      	bne.n	8010588 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	0e1b      	lsrs	r3, r3, #24
 801057a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010582:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8010584:	429a      	cmp	r2, r3
 8010586:	d001      	beq.n	801058c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	e000      	b.n	801058e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3730      	adds	r7, #48	; 0x30
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	58024400 	.word	0x58024400

0801059c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d101      	bne.n	80105b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80105ac:	2301      	movs	r3, #1
 80105ae:	e19c      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80105b0:	4b8a      	ldr	r3, [pc, #552]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f003 030f 	and.w	r3, r3, #15
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d910      	bls.n	80105e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80105be:	4b87      	ldr	r3, [pc, #540]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f023 020f 	bic.w	r2, r3, #15
 80105c6:	4985      	ldr	r1, [pc, #532]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80105ce:	4b83      	ldr	r3, [pc, #524]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f003 030f 	and.w	r3, r3, #15
 80105d6:	683a      	ldr	r2, [r7, #0]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d001      	beq.n	80105e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	e184      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f003 0304 	and.w	r3, r3, #4
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d010      	beq.n	801060e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	691a      	ldr	r2, [r3, #16]
 80105f0:	4b7b      	ldr	r3, [pc, #492]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d908      	bls.n	801060e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80105fc:	4b78      	ldr	r3, [pc, #480]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	4975      	ldr	r1, [pc, #468]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801060a:	4313      	orrs	r3, r2
 801060c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	f003 0308 	and.w	r3, r3, #8
 8010616:	2b00      	cmp	r3, #0
 8010618:	d010      	beq.n	801063c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	695a      	ldr	r2, [r3, #20]
 801061e:	4b70      	ldr	r3, [pc, #448]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010620:	69db      	ldr	r3, [r3, #28]
 8010622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010626:	429a      	cmp	r2, r3
 8010628:	d908      	bls.n	801063c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801062a:	4b6d      	ldr	r3, [pc, #436]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801062c:	69db      	ldr	r3, [r3, #28]
 801062e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	496a      	ldr	r1, [pc, #424]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010638:	4313      	orrs	r3, r2
 801063a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f003 0310 	and.w	r3, r3, #16
 8010644:	2b00      	cmp	r3, #0
 8010646:	d010      	beq.n	801066a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	699a      	ldr	r2, [r3, #24]
 801064c:	4b64      	ldr	r3, [pc, #400]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801064e:	69db      	ldr	r3, [r3, #28]
 8010650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010654:	429a      	cmp	r2, r3
 8010656:	d908      	bls.n	801066a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010658:	4b61      	ldr	r3, [pc, #388]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801065a:	69db      	ldr	r3, [r3, #28]
 801065c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	495e      	ldr	r1, [pc, #376]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010666:	4313      	orrs	r3, r2
 8010668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f003 0320 	and.w	r3, r3, #32
 8010672:	2b00      	cmp	r3, #0
 8010674:	d010      	beq.n	8010698 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69da      	ldr	r2, [r3, #28]
 801067a:	4b59      	ldr	r3, [pc, #356]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801067c:	6a1b      	ldr	r3, [r3, #32]
 801067e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010682:	429a      	cmp	r2, r3
 8010684:	d908      	bls.n	8010698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8010686:	4b56      	ldr	r3, [pc, #344]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010688:	6a1b      	ldr	r3, [r3, #32]
 801068a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	4953      	ldr	r1, [pc, #332]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010694:	4313      	orrs	r3, r2
 8010696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 0302 	and.w	r3, r3, #2
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d010      	beq.n	80106c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	68da      	ldr	r2, [r3, #12]
 80106a8:	4b4d      	ldr	r3, [pc, #308]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	f003 030f 	and.w	r3, r3, #15
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d908      	bls.n	80106c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80106b4:	4b4a      	ldr	r3, [pc, #296]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106b6:	699b      	ldr	r3, [r3, #24]
 80106b8:	f023 020f 	bic.w	r2, r3, #15
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	4947      	ldr	r1, [pc, #284]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106c2:	4313      	orrs	r3, r2
 80106c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f003 0301 	and.w	r3, r3, #1
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d055      	beq.n	801077e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80106d2:	4b43      	ldr	r3, [pc, #268]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	689b      	ldr	r3, [r3, #8]
 80106de:	4940      	ldr	r1, [pc, #256]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106e0:	4313      	orrs	r3, r2
 80106e2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d107      	bne.n	80106fc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80106ec:	4b3c      	ldr	r3, [pc, #240]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d121      	bne.n	801073c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80106f8:	2301      	movs	r3, #1
 80106fa:	e0f6      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	2b03      	cmp	r3, #3
 8010702:	d107      	bne.n	8010714 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010704:	4b36      	ldr	r3, [pc, #216]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d115      	bne.n	801073c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010710:	2301      	movs	r3, #1
 8010712:	e0ea      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	2b01      	cmp	r3, #1
 801071a:	d107      	bne.n	801072c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801071c:	4b30      	ldr	r3, [pc, #192]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010724:	2b00      	cmp	r3, #0
 8010726:	d109      	bne.n	801073c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010728:	2301      	movs	r3, #1
 801072a:	e0de      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801072c:	4b2c      	ldr	r3, [pc, #176]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8010738:	2301      	movs	r3, #1
 801073a:	e0d6      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801073c:	4b28      	ldr	r3, [pc, #160]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801073e:	691b      	ldr	r3, [r3, #16]
 8010740:	f023 0207 	bic.w	r2, r3, #7
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	4925      	ldr	r1, [pc, #148]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801074a:	4313      	orrs	r3, r2
 801074c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801074e:	f7fc f945 	bl	800c9dc <HAL_GetTick>
 8010752:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010754:	e00a      	b.n	801076c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010756:	f7fc f941 	bl	800c9dc <HAL_GetTick>
 801075a:	4602      	mov	r2, r0
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	f241 3288 	movw	r2, #5000	; 0x1388
 8010764:	4293      	cmp	r3, r2
 8010766:	d901      	bls.n	801076c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8010768:	2303      	movs	r3, #3
 801076a:	e0be      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801076c:	4b1c      	ldr	r3, [pc, #112]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	429a      	cmp	r2, r3
 801077c:	d1eb      	bne.n	8010756 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	2b00      	cmp	r3, #0
 8010788:	d010      	beq.n	80107ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	68da      	ldr	r2, [r3, #12]
 801078e:	4b14      	ldr	r3, [pc, #80]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	f003 030f 	and.w	r3, r3, #15
 8010796:	429a      	cmp	r2, r3
 8010798:	d208      	bcs.n	80107ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801079a:	4b11      	ldr	r3, [pc, #68]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 801079c:	699b      	ldr	r3, [r3, #24]
 801079e:	f023 020f 	bic.w	r2, r3, #15
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	490e      	ldr	r1, [pc, #56]	; (80107e0 <HAL_RCC_ClockConfig+0x244>)
 80107a8:	4313      	orrs	r3, r2
 80107aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80107ac:	4b0b      	ldr	r3, [pc, #44]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f003 030f 	and.w	r3, r3, #15
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d214      	bcs.n	80107e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80107ba:	4b08      	ldr	r3, [pc, #32]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f023 020f 	bic.w	r2, r3, #15
 80107c2:	4906      	ldr	r1, [pc, #24]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	4313      	orrs	r3, r2
 80107c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80107ca:	4b04      	ldr	r3, [pc, #16]	; (80107dc <HAL_RCC_ClockConfig+0x240>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f003 030f 	and.w	r3, r3, #15
 80107d2:	683a      	ldr	r2, [r7, #0]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d005      	beq.n	80107e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80107d8:	2301      	movs	r3, #1
 80107da:	e086      	b.n	80108ea <HAL_RCC_ClockConfig+0x34e>
 80107dc:	52002000 	.word	0x52002000
 80107e0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	f003 0304 	and.w	r3, r3, #4
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d010      	beq.n	8010812 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	691a      	ldr	r2, [r3, #16]
 80107f4:	4b3f      	ldr	r3, [pc, #252]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 80107f6:	699b      	ldr	r3, [r3, #24]
 80107f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d208      	bcs.n	8010812 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010800:	4b3c      	ldr	r3, [pc, #240]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010802:	699b      	ldr	r3, [r3, #24]
 8010804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	4939      	ldr	r1, [pc, #228]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 801080e:	4313      	orrs	r3, r2
 8010810:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	f003 0308 	and.w	r3, r3, #8
 801081a:	2b00      	cmp	r3, #0
 801081c:	d010      	beq.n	8010840 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	695a      	ldr	r2, [r3, #20]
 8010822:	4b34      	ldr	r3, [pc, #208]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801082a:	429a      	cmp	r2, r3
 801082c:	d208      	bcs.n	8010840 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801082e:	4b31      	ldr	r3, [pc, #196]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010830:	69db      	ldr	r3, [r3, #28]
 8010832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	695b      	ldr	r3, [r3, #20]
 801083a:	492e      	ldr	r1, [pc, #184]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 801083c:	4313      	orrs	r3, r2
 801083e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f003 0310 	and.w	r3, r3, #16
 8010848:	2b00      	cmp	r3, #0
 801084a:	d010      	beq.n	801086e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	699a      	ldr	r2, [r3, #24]
 8010850:	4b28      	ldr	r3, [pc, #160]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010852:	69db      	ldr	r3, [r3, #28]
 8010854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010858:	429a      	cmp	r2, r3
 801085a:	d208      	bcs.n	801086e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801085c:	4b25      	ldr	r3, [pc, #148]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 801085e:	69db      	ldr	r3, [r3, #28]
 8010860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	699b      	ldr	r3, [r3, #24]
 8010868:	4922      	ldr	r1, [pc, #136]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 801086a:	4313      	orrs	r3, r2
 801086c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	f003 0320 	and.w	r3, r3, #32
 8010876:	2b00      	cmp	r3, #0
 8010878:	d010      	beq.n	801089c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	69da      	ldr	r2, [r3, #28]
 801087e:	4b1d      	ldr	r3, [pc, #116]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010886:	429a      	cmp	r2, r3
 8010888:	d208      	bcs.n	801089c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801088a:	4b1a      	ldr	r3, [pc, #104]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 801088c:	6a1b      	ldr	r3, [r3, #32]
 801088e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	69db      	ldr	r3, [r3, #28]
 8010896:	4917      	ldr	r1, [pc, #92]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 8010898:	4313      	orrs	r3, r2
 801089a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801089c:	f000 f89e 	bl	80109dc <HAL_RCC_GetSysClockFreq>
 80108a0:	4602      	mov	r2, r0
 80108a2:	4b14      	ldr	r3, [pc, #80]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 80108a4:	699b      	ldr	r3, [r3, #24]
 80108a6:	0a1b      	lsrs	r3, r3, #8
 80108a8:	f003 030f 	and.w	r3, r3, #15
 80108ac:	4912      	ldr	r1, [pc, #72]	; (80108f8 <HAL_RCC_ClockConfig+0x35c>)
 80108ae:	5ccb      	ldrb	r3, [r1, r3]
 80108b0:	f003 031f 	and.w	r3, r3, #31
 80108b4:	fa22 f303 	lsr.w	r3, r2, r3
 80108b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80108ba:	4b0e      	ldr	r3, [pc, #56]	; (80108f4 <HAL_RCC_ClockConfig+0x358>)
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	f003 030f 	and.w	r3, r3, #15
 80108c2:	4a0d      	ldr	r2, [pc, #52]	; (80108f8 <HAL_RCC_ClockConfig+0x35c>)
 80108c4:	5cd3      	ldrb	r3, [r2, r3]
 80108c6:	f003 031f 	and.w	r3, r3, #31
 80108ca:	693a      	ldr	r2, [r7, #16]
 80108cc:	fa22 f303 	lsr.w	r3, r2, r3
 80108d0:	4a0a      	ldr	r2, [pc, #40]	; (80108fc <HAL_RCC_ClockConfig+0x360>)
 80108d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80108d4:	4a0a      	ldr	r2, [pc, #40]	; (8010900 <HAL_RCC_ClockConfig+0x364>)
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80108da:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <HAL_RCC_ClockConfig+0x368>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7f0 fd68 	bl	80013b4 <HAL_InitTick>
 80108e4:	4603      	mov	r3, r0
 80108e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80108e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3718      	adds	r7, #24
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	58024400 	.word	0x58024400
 80108f8:	080259e8 	.word	0x080259e8
 80108fc:	24000014 	.word	0x24000014
 8010900:	24000010 	.word	0x24000010
 8010904:	24000048 	.word	0x24000048

08010908 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08c      	sub	sp, #48	; 0x30
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d12a      	bne.n	8010970 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 801091a:	4b2d      	ldr	r3, [pc, #180]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 801091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010920:	4a2b      	ldr	r2, [pc, #172]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 8010922:	f043 0301 	orr.w	r3, r3, #1
 8010926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801092a:	4b29      	ldr	r3, [pc, #164]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 801092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010930:	f003 0301 	and.w	r3, r3, #1
 8010934:	61bb      	str	r3, [r7, #24]
 8010936:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010938:	f44f 7380 	mov.w	r3, #256	; 0x100
 801093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801093e:	2302      	movs	r3, #2
 8010940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010942:	2303      	movs	r3, #3
 8010944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010946:	2300      	movs	r3, #0
 8010948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801094a:	2300      	movs	r3, #0
 801094c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801094e:	f107 031c 	add.w	r3, r7, #28
 8010952:	4619      	mov	r1, r3
 8010954:	481f      	ldr	r0, [pc, #124]	; (80109d4 <HAL_RCC_MCOConfig+0xcc>)
 8010956:	f7fc fc45 	bl	800d1e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 801095a:	4b1d      	ldr	r3, [pc, #116]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	430b      	orrs	r3, r1
 8010968:	4919      	ldr	r1, [pc, #100]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 801096a:	4313      	orrs	r3, r2
 801096c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 801096e:	e02a      	b.n	80109c6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8010970:	4b17      	ldr	r3, [pc, #92]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 8010972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010976:	4a16      	ldr	r2, [pc, #88]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 8010978:	f043 0304 	orr.w	r3, r3, #4
 801097c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010980:	4b13      	ldr	r3, [pc, #76]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 8010982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010986:	f003 0304 	and.w	r3, r3, #4
 801098a:	617b      	str	r3, [r7, #20]
 801098c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801098e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010994:	2302      	movs	r3, #2
 8010996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010998:	2303      	movs	r3, #3
 801099a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801099c:	2300      	movs	r3, #0
 801099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80109a0:	2300      	movs	r3, #0
 80109a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80109a4:	f107 031c 	add.w	r3, r7, #28
 80109a8:	4619      	mov	r1, r3
 80109aa:	480b      	ldr	r0, [pc, #44]	; (80109d8 <HAL_RCC_MCOConfig+0xd0>)
 80109ac:	f7fc fc1a 	bl	800d1e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80109b0:	4b07      	ldr	r3, [pc, #28]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	01d9      	lsls	r1, r3, #7
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	430b      	orrs	r3, r1
 80109c0:	4903      	ldr	r1, [pc, #12]	; (80109d0 <HAL_RCC_MCOConfig+0xc8>)
 80109c2:	4313      	orrs	r3, r2
 80109c4:	610b      	str	r3, [r1, #16]
}
 80109c6:	bf00      	nop
 80109c8:	3730      	adds	r7, #48	; 0x30
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	58024400 	.word	0x58024400
 80109d4:	58020000 	.word	0x58020000
 80109d8:	58020800 	.word	0x58020800

080109dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80109dc:	b480      	push	{r7}
 80109de:	b089      	sub	sp, #36	; 0x24
 80109e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80109e2:	4bb3      	ldr	r3, [pc, #716]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80109e4:	691b      	ldr	r3, [r3, #16]
 80109e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109ea:	2b18      	cmp	r3, #24
 80109ec:	f200 8155 	bhi.w	8010c9a <HAL_RCC_GetSysClockFreq+0x2be>
 80109f0:	a201      	add	r2, pc, #4	; (adr r2, 80109f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80109f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f6:	bf00      	nop
 80109f8:	08010a5d 	.word	0x08010a5d
 80109fc:	08010c9b 	.word	0x08010c9b
 8010a00:	08010c9b 	.word	0x08010c9b
 8010a04:	08010c9b 	.word	0x08010c9b
 8010a08:	08010c9b 	.word	0x08010c9b
 8010a0c:	08010c9b 	.word	0x08010c9b
 8010a10:	08010c9b 	.word	0x08010c9b
 8010a14:	08010c9b 	.word	0x08010c9b
 8010a18:	08010a83 	.word	0x08010a83
 8010a1c:	08010c9b 	.word	0x08010c9b
 8010a20:	08010c9b 	.word	0x08010c9b
 8010a24:	08010c9b 	.word	0x08010c9b
 8010a28:	08010c9b 	.word	0x08010c9b
 8010a2c:	08010c9b 	.word	0x08010c9b
 8010a30:	08010c9b 	.word	0x08010c9b
 8010a34:	08010c9b 	.word	0x08010c9b
 8010a38:	08010a89 	.word	0x08010a89
 8010a3c:	08010c9b 	.word	0x08010c9b
 8010a40:	08010c9b 	.word	0x08010c9b
 8010a44:	08010c9b 	.word	0x08010c9b
 8010a48:	08010c9b 	.word	0x08010c9b
 8010a4c:	08010c9b 	.word	0x08010c9b
 8010a50:	08010c9b 	.word	0x08010c9b
 8010a54:	08010c9b 	.word	0x08010c9b
 8010a58:	08010a8f 	.word	0x08010a8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a5c:	4b94      	ldr	r3, [pc, #592]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f003 0320 	and.w	r3, r3, #32
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d009      	beq.n	8010a7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010a68:	4b91      	ldr	r3, [pc, #580]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	08db      	lsrs	r3, r3, #3
 8010a6e:	f003 0303 	and.w	r3, r3, #3
 8010a72:	4a90      	ldr	r2, [pc, #576]	; (8010cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010a74:	fa22 f303 	lsr.w	r3, r2, r3
 8010a78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8010a7a:	e111      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010a7c:	4b8d      	ldr	r3, [pc, #564]	; (8010cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010a7e:	61bb      	str	r3, [r7, #24]
    break;
 8010a80:	e10e      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8010a82:	4b8d      	ldr	r3, [pc, #564]	; (8010cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010a84:	61bb      	str	r3, [r7, #24]
    break;
 8010a86:	e10b      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8010a88:	4b8c      	ldr	r3, [pc, #560]	; (8010cbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010a8a:	61bb      	str	r3, [r7, #24]
    break;
 8010a8c:	e108      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010a8e:	4b88      	ldr	r3, [pc, #544]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a92:	f003 0303 	and.w	r3, r3, #3
 8010a96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8010a98:	4b85      	ldr	r3, [pc, #532]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a9c:	091b      	lsrs	r3, r3, #4
 8010a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010aa2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010aa4:	4b82      	ldr	r3, [pc, #520]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa8:	f003 0301 	and.w	r3, r3, #1
 8010aac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010aae:	4b80      	ldr	r3, [pc, #512]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab2:	08db      	lsrs	r3, r3, #3
 8010ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	fb02 f303 	mul.w	r3, r2, r3
 8010abe:	ee07 3a90 	vmov	s15, r3
 8010ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ac6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f000 80e1 	beq.w	8010c94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	f000 8083 	beq.w	8010be0 <HAL_RCC_GetSysClockFreq+0x204>
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	f200 80a1 	bhi.w	8010c24 <HAL_RCC_GetSysClockFreq+0x248>
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d003      	beq.n	8010af0 <HAL_RCC_GetSysClockFreq+0x114>
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d056      	beq.n	8010b9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8010aee:	e099      	b.n	8010c24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010af0:	4b6f      	ldr	r3, [pc, #444]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f003 0320 	and.w	r3, r3, #32
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d02d      	beq.n	8010b58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010afc:	4b6c      	ldr	r3, [pc, #432]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	08db      	lsrs	r3, r3, #3
 8010b02:	f003 0303 	and.w	r3, r3, #3
 8010b06:	4a6b      	ldr	r2, [pc, #428]	; (8010cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b08:	fa22 f303 	lsr.w	r3, r2, r3
 8010b0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	ee07 3a90 	vmov	s15, r3
 8010b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	ee07 3a90 	vmov	s15, r3
 8010b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b26:	4b62      	ldr	r3, [pc, #392]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b2e:	ee07 3a90 	vmov	s15, r3
 8010b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8010b3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8010b56:	e087      	b.n	8010c68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	ee07 3a90 	vmov	s15, r3
 8010b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010cc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b6a:	4b51      	ldr	r3, [pc, #324]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b72:	ee07 3a90 	vmov	s15, r3
 8010b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010b7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010b9a:	e065      	b.n	8010c68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	ee07 3a90 	vmov	s15, r3
 8010ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ba6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bae:	4b40      	ldr	r3, [pc, #256]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bb6:	ee07 3a90 	vmov	s15, r3
 8010bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8010bc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bde:	e043      	b.n	8010c68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	ee07 3a90 	vmov	s15, r3
 8010be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010ccc <HAL_RCC_GetSysClockFreq+0x2f0>
 8010bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bf2:	4b2f      	ldr	r3, [pc, #188]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfa:	ee07 3a90 	vmov	s15, r3
 8010bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c22:	e021      	b.n	8010c68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	ee07 3a90 	vmov	s15, r3
 8010c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c36:	4b1e      	ldr	r3, [pc, #120]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3e:	ee07 3a90 	vmov	s15, r3
 8010c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8010c68:	4b11      	ldr	r3, [pc, #68]	; (8010cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c6c:	0a5b      	lsrs	r3, r3, #9
 8010c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c72:	3301      	adds	r3, #1
 8010c74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	ee07 3a90 	vmov	s15, r3
 8010c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8010c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c8c:	ee17 3a90 	vmov	r3, s15
 8010c90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8010c92:	e005      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8010c94:	2300      	movs	r3, #0
 8010c96:	61bb      	str	r3, [r7, #24]
    break;
 8010c98:	e002      	b.n	8010ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8010c9a:	4b07      	ldr	r3, [pc, #28]	; (8010cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010c9c:	61bb      	str	r3, [r7, #24]
    break;
 8010c9e:	bf00      	nop
  }

  return sysclockfreq;
 8010ca0:	69bb      	ldr	r3, [r7, #24]
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3724      	adds	r7, #36	; 0x24
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	58024400 	.word	0x58024400
 8010cb4:	03d09000 	.word	0x03d09000
 8010cb8:	003d0900 	.word	0x003d0900
 8010cbc:	017d7840 	.word	0x017d7840
 8010cc0:	46000000 	.word	0x46000000
 8010cc4:	4c742400 	.word	0x4c742400
 8010cc8:	4a742400 	.word	0x4a742400
 8010ccc:	4bbebc20 	.word	0x4bbebc20

08010cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010cd6:	f7ff fe81 	bl	80109dc <HAL_RCC_GetSysClockFreq>
 8010cda:	4602      	mov	r2, r0
 8010cdc:	4b10      	ldr	r3, [pc, #64]	; (8010d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	0a1b      	lsrs	r3, r3, #8
 8010ce2:	f003 030f 	and.w	r3, r3, #15
 8010ce6:	490f      	ldr	r1, [pc, #60]	; (8010d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8010ce8:	5ccb      	ldrb	r3, [r1, r3]
 8010cea:	f003 031f 	and.w	r3, r3, #31
 8010cee:	fa22 f303 	lsr.w	r3, r2, r3
 8010cf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010cf4:	4b0a      	ldr	r3, [pc, #40]	; (8010d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8010cf6:	699b      	ldr	r3, [r3, #24]
 8010cf8:	f003 030f 	and.w	r3, r3, #15
 8010cfc:	4a09      	ldr	r2, [pc, #36]	; (8010d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8010cfe:	5cd3      	ldrb	r3, [r2, r3]
 8010d00:	f003 031f 	and.w	r3, r3, #31
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	fa22 f303 	lsr.w	r3, r2, r3
 8010d0a:	4a07      	ldr	r2, [pc, #28]	; (8010d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8010d0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010d0e:	4a07      	ldr	r2, [pc, #28]	; (8010d2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010d14:	4b04      	ldr	r3, [pc, #16]	; (8010d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8010d16:	681b      	ldr	r3, [r3, #0]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	58024400 	.word	0x58024400
 8010d24:	080259e8 	.word	0x080259e8
 8010d28:	24000014 	.word	0x24000014
 8010d2c:	24000010 	.word	0x24000010

08010d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010d34:	f7ff ffcc 	bl	8010cd0 <HAL_RCC_GetHCLKFreq>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	4b06      	ldr	r3, [pc, #24]	; (8010d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010d3c:	69db      	ldr	r3, [r3, #28]
 8010d3e:	091b      	lsrs	r3, r3, #4
 8010d40:	f003 0307 	and.w	r3, r3, #7
 8010d44:	4904      	ldr	r1, [pc, #16]	; (8010d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010d46:	5ccb      	ldrb	r3, [r1, r3]
 8010d48:	f003 031f 	and.w	r3, r3, #31
 8010d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	58024400 	.word	0x58024400
 8010d58:	080259e8 	.word	0x080259e8

08010d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010d60:	f7ff ffb6 	bl	8010cd0 <HAL_RCC_GetHCLKFreq>
 8010d64:	4602      	mov	r2, r0
 8010d66:	4b06      	ldr	r3, [pc, #24]	; (8010d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010d68:	69db      	ldr	r3, [r3, #28]
 8010d6a:	0a1b      	lsrs	r3, r3, #8
 8010d6c:	f003 0307 	and.w	r3, r3, #7
 8010d70:	4904      	ldr	r1, [pc, #16]	; (8010d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010d72:	5ccb      	ldrb	r3, [r1, r3]
 8010d74:	f003 031f 	and.w	r3, r3, #31
 8010d78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	58024400 	.word	0x58024400
 8010d84:	080259e8 	.word	0x080259e8

08010d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	223f      	movs	r2, #63	; 0x3f
 8010d96:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010d98:	4b1a      	ldr	r3, [pc, #104]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	f003 0207 	and.w	r2, r3, #7
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010da4:	4b17      	ldr	r3, [pc, #92]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010da6:	699b      	ldr	r3, [r3, #24]
 8010da8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010db0:	4b14      	ldr	r3, [pc, #80]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	f003 020f 	and.w	r2, r3, #15
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8010dbc:	4b11      	ldr	r3, [pc, #68]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010dc8:	4b0e      	ldr	r3, [pc, #56]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010dca:	69db      	ldr	r3, [r3, #28]
 8010dcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010dd4:	4b0b      	ldr	r3, [pc, #44]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010dd6:	69db      	ldr	r3, [r3, #28]
 8010dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010de0:	4b08      	ldr	r3, [pc, #32]	; (8010e04 <HAL_RCC_GetClockConfig+0x7c>)
 8010de2:	6a1b      	ldr	r3, [r3, #32]
 8010de4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010dec:	4b06      	ldr	r3, [pc, #24]	; (8010e08 <HAL_RCC_GetClockConfig+0x80>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f003 020f 	and.w	r2, r3, #15
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	601a      	str	r2, [r3, #0]
}
 8010df8:	bf00      	nop
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	58024400 	.word	0x58024400
 8010e08:	52002000 	.word	0x52002000

08010e0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b086      	sub	sp, #24
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010e14:	2300      	movs	r3, #0
 8010e16:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010e18:	2300      	movs	r3, #0
 8010e1a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d03f      	beq.n	8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010e30:	d02a      	beq.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010e32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010e36:	d824      	bhi.n	8010e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e3c:	d018      	beq.n	8010e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010e42:	d81e      	bhi.n	8010e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d003      	beq.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e4c:	d007      	beq.n	8010e5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010e4e:	e018      	b.n	8010e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e50:	4ba3      	ldr	r3, [pc, #652]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e54:	4aa2      	ldr	r2, [pc, #648]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010e5c:	e015      	b.n	8010e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	3304      	adds	r3, #4
 8010e62:	2102      	movs	r1, #2
 8010e64:	4618      	mov	r0, r3
 8010e66:	f000 ff17 	bl	8011c98 <RCCEx_PLL2_Config>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010e6e:	e00c      	b.n	8010e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	3324      	adds	r3, #36	; 0x24
 8010e74:	2102      	movs	r1, #2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f000 ffc0 	bl	8011dfc <RCCEx_PLL3_Config>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8010e80:	e003      	b.n	8010e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010e82:	2301      	movs	r3, #1
 8010e84:	75fb      	strb	r3, [r7, #23]
      break;
 8010e86:	e000      	b.n	8010e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d109      	bne.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010e90:	4b93      	ldr	r3, [pc, #588]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e9c:	4990      	ldr	r1, [pc, #576]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8010ea2:	e001      	b.n	8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ea4:	7dfb      	ldrb	r3, [r7, #23]
 8010ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d03d      	beq.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eb8:	2b04      	cmp	r3, #4
 8010eba:	d826      	bhi.n	8010f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010ebc:	a201      	add	r2, pc, #4	; (adr r2, 8010ec4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8010ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec2:	bf00      	nop
 8010ec4:	08010ed9 	.word	0x08010ed9
 8010ec8:	08010ee7 	.word	0x08010ee7
 8010ecc:	08010ef9 	.word	0x08010ef9
 8010ed0:	08010f11 	.word	0x08010f11
 8010ed4:	08010f11 	.word	0x08010f11
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ed8:	4b81      	ldr	r3, [pc, #516]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010edc:	4a80      	ldr	r2, [pc, #512]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010ee4:	e015      	b.n	8010f12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	3304      	adds	r3, #4
 8010eea:	2100      	movs	r1, #0
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 fed3 	bl	8011c98 <RCCEx_PLL2_Config>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010ef6:	e00c      	b.n	8010f12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3324      	adds	r3, #36	; 0x24
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f000 ff7c 	bl	8011dfc <RCCEx_PLL3_Config>
 8010f04:	4603      	mov	r3, r0
 8010f06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8010f08:	e003      	b.n	8010f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8010f0e:	e000      	b.n	8010f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8010f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010f12:	7dfb      	ldrb	r3, [r7, #23]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d109      	bne.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010f18:	4b71      	ldr	r3, [pc, #452]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f1c:	f023 0207 	bic.w	r2, r3, #7
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f24:	496e      	ldr	r1, [pc, #440]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f26:	4313      	orrs	r3, r2
 8010f28:	650b      	str	r3, [r1, #80]	; 0x50
 8010f2a:	e001      	b.n	8010f30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f2c:	7dfb      	ldrb	r3, [r7, #23]
 8010f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d042      	beq.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f44:	d02b      	beq.n	8010f9e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8010f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f4a:	d825      	bhi.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010f4c:	2bc0      	cmp	r3, #192	; 0xc0
 8010f4e:	d028      	beq.n	8010fa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8010f50:	2bc0      	cmp	r3, #192	; 0xc0
 8010f52:	d821      	bhi.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010f54:	2b80      	cmp	r3, #128	; 0x80
 8010f56:	d016      	beq.n	8010f86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8010f58:	2b80      	cmp	r3, #128	; 0x80
 8010f5a:	d81d      	bhi.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d002      	beq.n	8010f66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8010f60:	2b40      	cmp	r3, #64	; 0x40
 8010f62:	d007      	beq.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8010f64:	e018      	b.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f66:	4b5e      	ldr	r3, [pc, #376]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6a:	4a5d      	ldr	r2, [pc, #372]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010f72:	e017      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	3304      	adds	r3, #4
 8010f78:	2100      	movs	r1, #0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f000 fe8c 	bl	8011c98 <RCCEx_PLL2_Config>
 8010f80:	4603      	mov	r3, r0
 8010f82:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010f84:	e00e      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3324      	adds	r3, #36	; 0x24
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 ff35 	bl	8011dfc <RCCEx_PLL3_Config>
 8010f92:	4603      	mov	r3, r0
 8010f94:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8010f96:	e005      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f9c:	e002      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010f9e:	bf00      	nop
 8010fa0:	e000      	b.n	8010fa4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8010fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d109      	bne.n	8010fbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010faa:	4b4d      	ldr	r3, [pc, #308]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fb6:	494a      	ldr	r1, [pc, #296]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	650b      	str	r3, [r1, #80]	; 0x50
 8010fbc:	e001      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fbe:	7dfb      	ldrb	r3, [r7, #23]
 8010fc0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d049      	beq.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010fd8:	d030      	beq.n	801103c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8010fda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010fde:	d82a      	bhi.n	8011036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010fe0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010fe4:	d02c      	beq.n	8011040 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8010fe6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010fea:	d824      	bhi.n	8011036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010fec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ff0:	d018      	beq.n	8011024 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8010ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ff6:	d81e      	bhi.n	8011036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d003      	beq.n	8011004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8010ffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011000:	d007      	beq.n	8011012 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011002:	e018      	b.n	8011036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011004:	4b36      	ldr	r3, [pc, #216]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011008:	4a35      	ldr	r2, [pc, #212]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801100a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801100e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011010:	e017      	b.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	3304      	adds	r3, #4
 8011016:	2100      	movs	r1, #0
 8011018:	4618      	mov	r0, r3
 801101a:	f000 fe3d 	bl	8011c98 <RCCEx_PLL2_Config>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8011022:	e00e      	b.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3324      	adds	r3, #36	; 0x24
 8011028:	2100      	movs	r1, #0
 801102a:	4618      	mov	r0, r3
 801102c:	f000 fee6 	bl	8011dfc <RCCEx_PLL3_Config>
 8011030:	4603      	mov	r3, r0
 8011032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8011034:	e005      	b.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8011036:	2301      	movs	r3, #1
 8011038:	75fb      	strb	r3, [r7, #23]
      break;
 801103a:	e002      	b.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801103c:	bf00      	nop
 801103e:	e000      	b.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8011040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011042:	7dfb      	ldrb	r3, [r7, #23]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10a      	bne.n	801105e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011048:	4b25      	ldr	r3, [pc, #148]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801104c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011056:	4922      	ldr	r1, [pc, #136]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011058:	4313      	orrs	r3, r2
 801105a:	658b      	str	r3, [r1, #88]	; 0x58
 801105c:	e001      	b.n	8011062 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801105e:	7dfb      	ldrb	r3, [r7, #23]
 8011060:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801106a:	2b00      	cmp	r3, #0
 801106c:	d04b      	beq.n	8011106 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011078:	d030      	beq.n	80110dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801107a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801107e:	d82a      	bhi.n	80110d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011080:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011084:	d02e      	beq.n	80110e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8011086:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801108a:	d824      	bhi.n	80110d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801108c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011090:	d018      	beq.n	80110c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8011092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011096:	d81e      	bhi.n	80110d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011098:	2b00      	cmp	r3, #0
 801109a:	d003      	beq.n	80110a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80110a0:	d007      	beq.n	80110b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80110a2:	e018      	b.n	80110d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80110a4:	4b0e      	ldr	r3, [pc, #56]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80110a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a8:	4a0d      	ldr	r2, [pc, #52]	; (80110e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80110aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80110ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80110b0:	e019      	b.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	3304      	adds	r3, #4
 80110b6:	2100      	movs	r1, #0
 80110b8:	4618      	mov	r0, r3
 80110ba:	f000 fded 	bl	8011c98 <RCCEx_PLL2_Config>
 80110be:	4603      	mov	r3, r0
 80110c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80110c2:	e010      	b.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	3324      	adds	r3, #36	; 0x24
 80110c8:	2100      	movs	r1, #0
 80110ca:	4618      	mov	r0, r3
 80110cc:	f000 fe96 	bl	8011dfc <RCCEx_PLL3_Config>
 80110d0:	4603      	mov	r3, r0
 80110d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80110d4:	e007      	b.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80110d6:	2301      	movs	r3, #1
 80110d8:	75fb      	strb	r3, [r7, #23]
      break;
 80110da:	e004      	b.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80110dc:	bf00      	nop
 80110de:	e002      	b.n	80110e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80110e0:	58024400 	.word	0x58024400
      break;
 80110e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10a      	bne.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80110ec:	4b99      	ldr	r3, [pc, #612]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80110ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80110fa:	4996      	ldr	r1, [pc, #600]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80110fc:	4313      	orrs	r3, r2
 80110fe:	658b      	str	r3, [r1, #88]	; 0x58
 8011100:	e001      	b.n	8011106 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011102:	7dfb      	ldrb	r3, [r7, #23]
 8011104:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801110e:	2b00      	cmp	r3, #0
 8011110:	d032      	beq.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011116:	2b30      	cmp	r3, #48	; 0x30
 8011118:	d01c      	beq.n	8011154 <HAL_RCCEx_PeriphCLKConfig+0x348>
 801111a:	2b30      	cmp	r3, #48	; 0x30
 801111c:	d817      	bhi.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x342>
 801111e:	2b20      	cmp	r3, #32
 8011120:	d00c      	beq.n	801113c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8011122:	2b20      	cmp	r3, #32
 8011124:	d813      	bhi.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8011126:	2b00      	cmp	r3, #0
 8011128:	d016      	beq.n	8011158 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801112a:	2b10      	cmp	r3, #16
 801112c:	d10f      	bne.n	801114e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801112e:	4b89      	ldr	r3, [pc, #548]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011132:	4a88      	ldr	r2, [pc, #544]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801113a:	e00e      	b.n	801115a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3304      	adds	r3, #4
 8011140:	2102      	movs	r1, #2
 8011142:	4618      	mov	r0, r3
 8011144:	f000 fda8 	bl	8011c98 <RCCEx_PLL2_Config>
 8011148:	4603      	mov	r3, r0
 801114a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801114c:	e005      	b.n	801115a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801114e:	2301      	movs	r3, #1
 8011150:	75fb      	strb	r3, [r7, #23]
      break;
 8011152:	e002      	b.n	801115a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011154:	bf00      	nop
 8011156:	e000      	b.n	801115a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8011158:	bf00      	nop
    }

    if(ret == HAL_OK)
 801115a:	7dfb      	ldrb	r3, [r7, #23]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d109      	bne.n	8011174 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8011160:	4b7c      	ldr	r3, [pc, #496]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011164:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801116c:	4979      	ldr	r1, [pc, #484]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801116e:	4313      	orrs	r3, r2
 8011170:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011172:	e001      	b.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011174:	7dfb      	ldrb	r3, [r7, #23]
 8011176:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011180:	2b00      	cmp	r3, #0
 8011182:	d047      	beq.n	8011214 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801118c:	d030      	beq.n	80111f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801118e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011192:	d82a      	bhi.n	80111ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011198:	d02c      	beq.n	80111f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 801119a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801119e:	d824      	bhi.n	80111ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80111a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111a4:	d018      	beq.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80111a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111aa:	d81e      	bhi.n	80111ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80111b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111b4:	d007      	beq.n	80111c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80111b6:	e018      	b.n	80111ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111b8:	4b66      	ldr	r3, [pc, #408]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111bc:	4a65      	ldr	r2, [pc, #404]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80111c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80111c4:	e017      	b.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	3304      	adds	r3, #4
 80111ca:	2100      	movs	r1, #0
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fd63 	bl	8011c98 <RCCEx_PLL2_Config>
 80111d2:	4603      	mov	r3, r0
 80111d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80111d6:	e00e      	b.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	3324      	adds	r3, #36	; 0x24
 80111dc:	2100      	movs	r1, #0
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 fe0c 	bl	8011dfc <RCCEx_PLL3_Config>
 80111e4:	4603      	mov	r3, r0
 80111e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80111e8:	e005      	b.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80111ea:	2301      	movs	r3, #1
 80111ec:	75fb      	strb	r3, [r7, #23]
      break;
 80111ee:	e002      	b.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80111f0:	bf00      	nop
 80111f2:	e000      	b.n	80111f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80111f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80111f6:	7dfb      	ldrb	r3, [r7, #23]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d109      	bne.n	8011210 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80111fc:	4b55      	ldr	r3, [pc, #340]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011200:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011208:	4952      	ldr	r1, [pc, #328]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801120a:	4313      	orrs	r3, r2
 801120c:	650b      	str	r3, [r1, #80]	; 0x50
 801120e:	e001      	b.n	8011214 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011210:	7dfb      	ldrb	r3, [r7, #23]
 8011212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801121c:	2b00      	cmp	r3, #0
 801121e:	d049      	beq.n	80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011228:	d02e      	beq.n	8011288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 801122a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801122e:	d828      	bhi.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011234:	d02a      	beq.n	801128c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8011236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801123a:	d822      	bhi.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 801123c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011240:	d026      	beq.n	8011290 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8011242:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011246:	d81c      	bhi.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801124c:	d010      	beq.n	8011270 <HAL_RCCEx_PeriphCLKConfig+0x464>
 801124e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011252:	d816      	bhi.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01d      	beq.n	8011294 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8011258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801125c:	d111      	bne.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	3304      	adds	r3, #4
 8011262:	2101      	movs	r1, #1
 8011264:	4618      	mov	r0, r3
 8011266:	f000 fd17 	bl	8011c98 <RCCEx_PLL2_Config>
 801126a:	4603      	mov	r3, r0
 801126c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 801126e:	e012      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3324      	adds	r3, #36	; 0x24
 8011274:	2101      	movs	r1, #1
 8011276:	4618      	mov	r0, r3
 8011278:	f000 fdc0 	bl	8011dfc <RCCEx_PLL3_Config>
 801127c:	4603      	mov	r3, r0
 801127e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8011280:	e009      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011282:	2301      	movs	r3, #1
 8011284:	75fb      	strb	r3, [r7, #23]
      break;
 8011286:	e006      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011288:	bf00      	nop
 801128a:	e004      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 801128c:	bf00      	nop
 801128e:	e002      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011290:	bf00      	nop
 8011292:	e000      	b.n	8011296 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8011294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011296:	7dfb      	ldrb	r3, [r7, #23]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d109      	bne.n	80112b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801129c:	4b2d      	ldr	r3, [pc, #180]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801129e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112a8:	492a      	ldr	r1, [pc, #168]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80112aa:	4313      	orrs	r3, r2
 80112ac:	650b      	str	r3, [r1, #80]	; 0x50
 80112ae:	e001      	b.n	80112b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
 80112b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d04d      	beq.n	801135c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80112c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80112ca:	d02e      	beq.n	801132a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80112cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80112d0:	d828      	bhi.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80112d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112d6:	d02a      	beq.n	801132e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80112d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112dc:	d822      	bhi.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80112de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80112e2:	d026      	beq.n	8011332 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80112e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80112e8:	d81c      	bhi.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80112ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112ee:	d010      	beq.n	8011312 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80112f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112f4:	d816      	bhi.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d01d      	beq.n	8011336 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80112fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80112fe:	d111      	bne.n	8011324 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	3304      	adds	r3, #4
 8011304:	2101      	movs	r1, #1
 8011306:	4618      	mov	r0, r3
 8011308:	f000 fcc6 	bl	8011c98 <RCCEx_PLL2_Config>
 801130c:	4603      	mov	r3, r0
 801130e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011310:	e012      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	3324      	adds	r3, #36	; 0x24
 8011316:	2101      	movs	r1, #1
 8011318:	4618      	mov	r0, r3
 801131a:	f000 fd6f 	bl	8011dfc <RCCEx_PLL3_Config>
 801131e:	4603      	mov	r3, r0
 8011320:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8011322:	e009      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	75fb      	strb	r3, [r7, #23]
      break;
 8011328:	e006      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801132a:	bf00      	nop
 801132c:	e004      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 801132e:	bf00      	nop
 8011330:	e002      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011332:	bf00      	nop
 8011334:	e000      	b.n	8011338 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8011336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10c      	bne.n	8011358 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801133e:	4b05      	ldr	r3, [pc, #20]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011342:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801134c:	4901      	ldr	r1, [pc, #4]	; (8011354 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801134e:	4313      	orrs	r3, r2
 8011350:	658b      	str	r3, [r1, #88]	; 0x58
 8011352:	e003      	b.n	801135c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011358:	7dfb      	ldrb	r3, [r7, #23]
 801135a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d02f      	beq.n	80113c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801136c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011370:	d00e      	beq.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8011372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011376:	d814      	bhi.n	80113a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8011378:	2b00      	cmp	r3, #0
 801137a:	d015      	beq.n	80113a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 801137c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011380:	d10f      	bne.n	80113a2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011382:	4baf      	ldr	r3, [pc, #700]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011386:	4aae      	ldr	r2, [pc, #696]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801138c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 801138e:	e00c      	b.n	80113aa <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	3304      	adds	r3, #4
 8011394:	2101      	movs	r1, #1
 8011396:	4618      	mov	r0, r3
 8011398:	f000 fc7e 	bl	8011c98 <RCCEx_PLL2_Config>
 801139c:	4603      	mov	r3, r0
 801139e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80113a0:	e003      	b.n	80113aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80113a2:	2301      	movs	r3, #1
 80113a4:	75fb      	strb	r3, [r7, #23]
      break;
 80113a6:	e000      	b.n	80113aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80113a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80113aa:	7dfb      	ldrb	r3, [r7, #23]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d109      	bne.n	80113c4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80113b0:	4ba3      	ldr	r3, [pc, #652]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80113b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113bc:	49a0      	ldr	r1, [pc, #640]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80113be:	4313      	orrs	r3, r2
 80113c0:	650b      	str	r3, [r1, #80]	; 0x50
 80113c2:	e001      	b.n	80113c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d032      	beq.n	801143a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113d8:	2b03      	cmp	r3, #3
 80113da:	d81b      	bhi.n	8011414 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80113dc:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80113de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e2:	bf00      	nop
 80113e4:	0801141b 	.word	0x0801141b
 80113e8:	080113f5 	.word	0x080113f5
 80113ec:	08011403 	.word	0x08011403
 80113f0:	0801141b 	.word	0x0801141b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113f4:	4b92      	ldr	r3, [pc, #584]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80113f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f8:	4a91      	ldr	r2, [pc, #580]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80113fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011400:	e00c      	b.n	801141c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	3304      	adds	r3, #4
 8011406:	2102      	movs	r1, #2
 8011408:	4618      	mov	r0, r3
 801140a:	f000 fc45 	bl	8011c98 <RCCEx_PLL2_Config>
 801140e:	4603      	mov	r3, r0
 8011410:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8011412:	e003      	b.n	801141c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8011414:	2301      	movs	r3, #1
 8011416:	75fb      	strb	r3, [r7, #23]
      break;
 8011418:	e000      	b.n	801141c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 801141a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801141c:	7dfb      	ldrb	r3, [r7, #23]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011422:	4b87      	ldr	r3, [pc, #540]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011426:	f023 0203 	bic.w	r2, r3, #3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801142e:	4984      	ldr	r1, [pc, #528]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011430:	4313      	orrs	r3, r2
 8011432:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011434:	e001      	b.n	801143a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011436:	7dfb      	ldrb	r3, [r7, #23]
 8011438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 8086 	beq.w	8011554 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011448:	4b7e      	ldr	r3, [pc, #504]	; (8011644 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a7d      	ldr	r2, [pc, #500]	; (8011644 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011454:	f7fb fac2 	bl	800c9dc <HAL_GetTick>
 8011458:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801145a:	e009      	b.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801145c:	f7fb fabe 	bl	800c9dc <HAL_GetTick>
 8011460:	4602      	mov	r2, r0
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	2b64      	cmp	r3, #100	; 0x64
 8011468:	d902      	bls.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 801146a:	2303      	movs	r3, #3
 801146c:	75fb      	strb	r3, [r7, #23]
        break;
 801146e:	e005      	b.n	801147c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011470:	4b74      	ldr	r3, [pc, #464]	; (8011644 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011478:	2b00      	cmp	r3, #0
 801147a:	d0ef      	beq.n	801145c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 801147c:	7dfb      	ldrb	r3, [r7, #23]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d166      	bne.n	8011550 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011482:	4b6f      	ldr	r3, [pc, #444]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011484:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801148c:	4053      	eors	r3, r2
 801148e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011492:	2b00      	cmp	r3, #0
 8011494:	d013      	beq.n	80114be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011496:	4b6a      	ldr	r3, [pc, #424]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801149a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801149e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80114a0:	4b67      	ldr	r3, [pc, #412]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114a4:	4a66      	ldr	r2, [pc, #408]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80114aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80114ac:	4b64      	ldr	r3, [pc, #400]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114b0:	4a63      	ldr	r2, [pc, #396]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80114b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80114b8:	4a61      	ldr	r2, [pc, #388]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80114c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114c8:	d115      	bne.n	80114f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114ca:	f7fb fa87 	bl	800c9dc <HAL_GetTick>
 80114ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80114d0:	e00b      	b.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80114d2:	f7fb fa83 	bl	800c9dc <HAL_GetTick>
 80114d6:	4602      	mov	r2, r0
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d902      	bls.n	80114ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80114e4:	2303      	movs	r3, #3
 80114e6:	75fb      	strb	r3, [r7, #23]
            break;
 80114e8:	e005      	b.n	80114f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80114ea:	4b55      	ldr	r3, [pc, #340]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ee:	f003 0302 	and.w	r3, r3, #2
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0ed      	beq.n	80114d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80114f6:	7dfb      	ldrb	r3, [r7, #23]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d126      	bne.n	801154a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801150a:	d10d      	bne.n	8011528 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 801150c:	4b4c      	ldr	r3, [pc, #304]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801150e:	691b      	ldr	r3, [r3, #16]
 8011510:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801151a:	0919      	lsrs	r1, r3, #4
 801151c:	4b4a      	ldr	r3, [pc, #296]	; (8011648 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 801151e:	400b      	ands	r3, r1
 8011520:	4947      	ldr	r1, [pc, #284]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011522:	4313      	orrs	r3, r2
 8011524:	610b      	str	r3, [r1, #16]
 8011526:	e005      	b.n	8011534 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8011528:	4b45      	ldr	r3, [pc, #276]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	4a44      	ldr	r2, [pc, #272]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801152e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011532:	6113      	str	r3, [r2, #16]
 8011534:	4b42      	ldr	r3, [pc, #264]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011536:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011542:	493f      	ldr	r1, [pc, #252]	; (8011640 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011544:	4313      	orrs	r3, r2
 8011546:	670b      	str	r3, [r1, #112]	; 0x70
 8011548:	e004      	b.n	8011554 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	75bb      	strb	r3, [r7, #22]
 801154e:	e001      	b.n	8011554 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011550:	7dfb      	ldrb	r3, [r7, #23]
 8011552:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	2b00      	cmp	r3, #0
 801155e:	f000 8085 	beq.w	801166c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011566:	2b28      	cmp	r3, #40	; 0x28
 8011568:	d866      	bhi.n	8011638 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 801156a:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 801156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011570:	0801164d 	.word	0x0801164d
 8011574:	08011639 	.word	0x08011639
 8011578:	08011639 	.word	0x08011639
 801157c:	08011639 	.word	0x08011639
 8011580:	08011639 	.word	0x08011639
 8011584:	08011639 	.word	0x08011639
 8011588:	08011639 	.word	0x08011639
 801158c:	08011639 	.word	0x08011639
 8011590:	08011615 	.word	0x08011615
 8011594:	08011639 	.word	0x08011639
 8011598:	08011639 	.word	0x08011639
 801159c:	08011639 	.word	0x08011639
 80115a0:	08011639 	.word	0x08011639
 80115a4:	08011639 	.word	0x08011639
 80115a8:	08011639 	.word	0x08011639
 80115ac:	08011639 	.word	0x08011639
 80115b0:	08011627 	.word	0x08011627
 80115b4:	08011639 	.word	0x08011639
 80115b8:	08011639 	.word	0x08011639
 80115bc:	08011639 	.word	0x08011639
 80115c0:	08011639 	.word	0x08011639
 80115c4:	08011639 	.word	0x08011639
 80115c8:	08011639 	.word	0x08011639
 80115cc:	08011639 	.word	0x08011639
 80115d0:	0801164d 	.word	0x0801164d
 80115d4:	08011639 	.word	0x08011639
 80115d8:	08011639 	.word	0x08011639
 80115dc:	08011639 	.word	0x08011639
 80115e0:	08011639 	.word	0x08011639
 80115e4:	08011639 	.word	0x08011639
 80115e8:	08011639 	.word	0x08011639
 80115ec:	08011639 	.word	0x08011639
 80115f0:	0801164d 	.word	0x0801164d
 80115f4:	08011639 	.word	0x08011639
 80115f8:	08011639 	.word	0x08011639
 80115fc:	08011639 	.word	0x08011639
 8011600:	08011639 	.word	0x08011639
 8011604:	08011639 	.word	0x08011639
 8011608:	08011639 	.word	0x08011639
 801160c:	08011639 	.word	0x08011639
 8011610:	0801164d 	.word	0x0801164d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	3304      	adds	r3, #4
 8011618:	2101      	movs	r1, #1
 801161a:	4618      	mov	r0, r3
 801161c:	f000 fb3c 	bl	8011c98 <RCCEx_PLL2_Config>
 8011620:	4603      	mov	r3, r0
 8011622:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011624:	e013      	b.n	801164e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	3324      	adds	r3, #36	; 0x24
 801162a:	2101      	movs	r1, #1
 801162c:	4618      	mov	r0, r3
 801162e:	f000 fbe5 	bl	8011dfc <RCCEx_PLL3_Config>
 8011632:	4603      	mov	r3, r0
 8011634:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8011636:	e00a      	b.n	801164e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011638:	2301      	movs	r3, #1
 801163a:	75fb      	strb	r3, [r7, #23]
      break;
 801163c:	e007      	b.n	801164e <HAL_RCCEx_PeriphCLKConfig+0x842>
 801163e:	bf00      	nop
 8011640:	58024400 	.word	0x58024400
 8011644:	58024800 	.word	0x58024800
 8011648:	00ffffcf 	.word	0x00ffffcf
      break;
 801164c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801164e:	7dfb      	ldrb	r3, [r7, #23]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d109      	bne.n	8011668 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011654:	4b96      	ldr	r3, [pc, #600]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011658:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011660:	4993      	ldr	r1, [pc, #588]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011662:	4313      	orrs	r3, r2
 8011664:	654b      	str	r3, [r1, #84]	; 0x54
 8011666:	e001      	b.n	801166c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011668:	7dfb      	ldrb	r3, [r7, #23]
 801166a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f003 0302 	and.w	r3, r3, #2
 8011674:	2b00      	cmp	r3, #0
 8011676:	d038      	beq.n	80116ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801167c:	2b05      	cmp	r3, #5
 801167e:	d821      	bhi.n	80116c4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8011680:	a201      	add	r2, pc, #4	; (adr r2, 8011688 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8011682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011686:	bf00      	nop
 8011688:	080116cb 	.word	0x080116cb
 801168c:	080116a1 	.word	0x080116a1
 8011690:	080116b3 	.word	0x080116b3
 8011694:	080116cb 	.word	0x080116cb
 8011698:	080116cb 	.word	0x080116cb
 801169c:	080116cb 	.word	0x080116cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3304      	adds	r3, #4
 80116a4:	2101      	movs	r1, #1
 80116a6:	4618      	mov	r0, r3
 80116a8:	f000 faf6 	bl	8011c98 <RCCEx_PLL2_Config>
 80116ac:	4603      	mov	r3, r0
 80116ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80116b0:	e00c      	b.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	3324      	adds	r3, #36	; 0x24
 80116b6:	2101      	movs	r1, #1
 80116b8:	4618      	mov	r0, r3
 80116ba:	f000 fb9f 	bl	8011dfc <RCCEx_PLL3_Config>
 80116be:	4603      	mov	r3, r0
 80116c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80116c2:	e003      	b.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80116c4:	2301      	movs	r3, #1
 80116c6:	75fb      	strb	r3, [r7, #23]
      break;
 80116c8:	e000      	b.n	80116cc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80116ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d109      	bne.n	80116e6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80116d2:	4b77      	ldr	r3, [pc, #476]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80116d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116d6:	f023 0207 	bic.w	r2, r3, #7
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116de:	4974      	ldr	r1, [pc, #464]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80116e0:	4313      	orrs	r3, r2
 80116e2:	654b      	str	r3, [r1, #84]	; 0x54
 80116e4:	e001      	b.n	80116ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
 80116e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0304 	and.w	r3, r3, #4
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d03a      	beq.n	801176c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116fc:	2b05      	cmp	r3, #5
 80116fe:	d821      	bhi.n	8011744 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8011700:	a201      	add	r2, pc, #4	; (adr r2, 8011708 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8011702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011706:	bf00      	nop
 8011708:	0801174b 	.word	0x0801174b
 801170c:	08011721 	.word	0x08011721
 8011710:	08011733 	.word	0x08011733
 8011714:	0801174b 	.word	0x0801174b
 8011718:	0801174b 	.word	0x0801174b
 801171c:	0801174b 	.word	0x0801174b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	3304      	adds	r3, #4
 8011724:	2101      	movs	r1, #1
 8011726:	4618      	mov	r0, r3
 8011728:	f000 fab6 	bl	8011c98 <RCCEx_PLL2_Config>
 801172c:	4603      	mov	r3, r0
 801172e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011730:	e00c      	b.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3324      	adds	r3, #36	; 0x24
 8011736:	2101      	movs	r1, #1
 8011738:	4618      	mov	r0, r3
 801173a:	f000 fb5f 	bl	8011dfc <RCCEx_PLL3_Config>
 801173e:	4603      	mov	r3, r0
 8011740:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8011742:	e003      	b.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011744:	2301      	movs	r3, #1
 8011746:	75fb      	strb	r3, [r7, #23]
      break;
 8011748:	e000      	b.n	801174c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 801174a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801174c:	7dfb      	ldrb	r3, [r7, #23]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10a      	bne.n	8011768 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011752:	4b57      	ldr	r3, [pc, #348]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011756:	f023 0207 	bic.w	r2, r3, #7
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011760:	4953      	ldr	r1, [pc, #332]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011762:	4313      	orrs	r3, r2
 8011764:	658b      	str	r3, [r1, #88]	; 0x58
 8011766:	e001      	b.n	801176c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011768:	7dfb      	ldrb	r3, [r7, #23]
 801176a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f003 0320 	and.w	r3, r3, #32
 8011774:	2b00      	cmp	r3, #0
 8011776:	d04b      	beq.n	8011810 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011782:	d02e      	beq.n	80117e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011788:	d828      	bhi.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801178a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801178e:	d02a      	beq.n	80117e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8011790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011794:	d822      	bhi.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801179a:	d026      	beq.n	80117ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 801179c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80117a0:	d81c      	bhi.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80117a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117a6:	d010      	beq.n	80117ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80117a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117ac:	d816      	bhi.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d01d      	beq.n	80117ee <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80117b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80117b6:	d111      	bne.n	80117dc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3304      	adds	r3, #4
 80117bc:	2100      	movs	r1, #0
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 fa6a 	bl	8011c98 <RCCEx_PLL2_Config>
 80117c4:	4603      	mov	r3, r0
 80117c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80117c8:	e012      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3324      	adds	r3, #36	; 0x24
 80117ce:	2102      	movs	r1, #2
 80117d0:	4618      	mov	r0, r3
 80117d2:	f000 fb13 	bl	8011dfc <RCCEx_PLL3_Config>
 80117d6:	4603      	mov	r3, r0
 80117d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80117da:	e009      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80117dc:	2301      	movs	r3, #1
 80117de:	75fb      	strb	r3, [r7, #23]
      break;
 80117e0:	e006      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80117e2:	bf00      	nop
 80117e4:	e004      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80117e6:	bf00      	nop
 80117e8:	e002      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80117ea:	bf00      	nop
 80117ec:	e000      	b.n	80117f0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80117ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10a      	bne.n	801180c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80117f6:	4b2e      	ldr	r3, [pc, #184]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80117f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011804:	492a      	ldr	r1, [pc, #168]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011806:	4313      	orrs	r3, r2
 8011808:	654b      	str	r3, [r1, #84]	; 0x54
 801180a:	e001      	b.n	8011810 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011818:	2b00      	cmp	r3, #0
 801181a:	d04d      	beq.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011822:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011826:	d02e      	beq.n	8011886 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8011828:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801182c:	d828      	bhi.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011832:	d02a      	beq.n	801188a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011838:	d822      	bhi.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801183a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801183e:	d026      	beq.n	801188e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8011840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011844:	d81c      	bhi.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801184a:	d010      	beq.n	801186e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 801184c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011850:	d816      	bhi.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011852:	2b00      	cmp	r3, #0
 8011854:	d01d      	beq.n	8011892 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8011856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801185a:	d111      	bne.n	8011880 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3304      	adds	r3, #4
 8011860:	2100      	movs	r1, #0
 8011862:	4618      	mov	r0, r3
 8011864:	f000 fa18 	bl	8011c98 <RCCEx_PLL2_Config>
 8011868:	4603      	mov	r3, r0
 801186a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801186c:	e012      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	3324      	adds	r3, #36	; 0x24
 8011872:	2102      	movs	r1, #2
 8011874:	4618      	mov	r0, r3
 8011876:	f000 fac1 	bl	8011dfc <RCCEx_PLL3_Config>
 801187a:	4603      	mov	r3, r0
 801187c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801187e:	e009      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011880:	2301      	movs	r3, #1
 8011882:	75fb      	strb	r3, [r7, #23]
      break;
 8011884:	e006      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011886:	bf00      	nop
 8011888:	e004      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801188a:	bf00      	nop
 801188c:	e002      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801188e:	bf00      	nop
 8011890:	e000      	b.n	8011894 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8011892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011894:	7dfb      	ldrb	r3, [r7, #23]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d10c      	bne.n	80118b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801189e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80118a8:	4901      	ldr	r1, [pc, #4]	; (80118b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80118aa:	4313      	orrs	r3, r2
 80118ac:	658b      	str	r3, [r1, #88]	; 0x58
 80118ae:	e003      	b.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80118b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118b4:	7dfb      	ldrb	r3, [r7, #23]
 80118b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d04b      	beq.n	801195c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80118ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80118ce:	d02e      	beq.n	801192e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80118d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80118d4:	d828      	bhi.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80118d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118da:	d02a      	beq.n	8011932 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80118dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80118e0:	d822      	bhi.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80118e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80118e6:	d026      	beq.n	8011936 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80118e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80118ec:	d81c      	bhi.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80118ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80118f2:	d010      	beq.n	8011916 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80118f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80118f8:	d816      	bhi.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d01d      	beq.n	801193a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80118fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011902:	d111      	bne.n	8011928 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	3304      	adds	r3, #4
 8011908:	2100      	movs	r1, #0
 801190a:	4618      	mov	r0, r3
 801190c:	f000 f9c4 	bl	8011c98 <RCCEx_PLL2_Config>
 8011910:	4603      	mov	r3, r0
 8011912:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011914:	e012      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	3324      	adds	r3, #36	; 0x24
 801191a:	2102      	movs	r1, #2
 801191c:	4618      	mov	r0, r3
 801191e:	f000 fa6d 	bl	8011dfc <RCCEx_PLL3_Config>
 8011922:	4603      	mov	r3, r0
 8011924:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8011926:	e009      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	75fb      	strb	r3, [r7, #23]
      break;
 801192c:	e006      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801192e:	bf00      	nop
 8011930:	e004      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011932:	bf00      	nop
 8011934:	e002      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801193a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801193c:	7dfb      	ldrb	r3, [r7, #23]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d10a      	bne.n	8011958 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011942:	4b9d      	ldr	r3, [pc, #628]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011950:	4999      	ldr	r1, [pc, #612]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011952:	4313      	orrs	r3, r2
 8011954:	658b      	str	r3, [r1, #88]	; 0x58
 8011956:	e001      	b.n	801195c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011958:	7dfb      	ldrb	r3, [r7, #23]
 801195a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f003 0308 	and.w	r3, r3, #8
 8011964:	2b00      	cmp	r3, #0
 8011966:	d01a      	beq.n	801199e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801196e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011972:	d10a      	bne.n	801198a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	3324      	adds	r3, #36	; 0x24
 8011978:	2102      	movs	r1, #2
 801197a:	4618      	mov	r0, r3
 801197c:	f000 fa3e 	bl	8011dfc <RCCEx_PLL3_Config>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d001      	beq.n	801198a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8011986:	2301      	movs	r3, #1
 8011988:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801198a:	4b8b      	ldr	r3, [pc, #556]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801198e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011998:	4987      	ldr	r1, [pc, #540]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801199a:	4313      	orrs	r3, r2
 801199c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	f003 0310 	and.w	r3, r3, #16
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d01a      	beq.n	80119e0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80119b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119b4:	d10a      	bne.n	80119cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	3324      	adds	r3, #36	; 0x24
 80119ba:	2102      	movs	r1, #2
 80119bc:	4618      	mov	r0, r3
 80119be:	f000 fa1d 	bl	8011dfc <RCCEx_PLL3_Config>
 80119c2:	4603      	mov	r3, r0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d001      	beq.n	80119cc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80119c8:	2301      	movs	r3, #1
 80119ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80119cc:	4b7a      	ldr	r3, [pc, #488]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80119ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80119da:	4977      	ldr	r1, [pc, #476]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80119dc:	4313      	orrs	r3, r2
 80119de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d034      	beq.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80119f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119f6:	d01d      	beq.n	8011a34 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80119f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119fc:	d817      	bhi.n	8011a2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8011a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a06:	d009      	beq.n	8011a1c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8011a08:	e011      	b.n	8011a2e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	3304      	adds	r3, #4
 8011a0e:	2100      	movs	r1, #0
 8011a10:	4618      	mov	r0, r3
 8011a12:	f000 f941 	bl	8011c98 <RCCEx_PLL2_Config>
 8011a16:	4603      	mov	r3, r0
 8011a18:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011a1a:	e00c      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3324      	adds	r3, #36	; 0x24
 8011a20:	2102      	movs	r1, #2
 8011a22:	4618      	mov	r0, r3
 8011a24:	f000 f9ea 	bl	8011dfc <RCCEx_PLL3_Config>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8011a2c:	e003      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011a2e:	2301      	movs	r3, #1
 8011a30:	75fb      	strb	r3, [r7, #23]
      break;
 8011a32:	e000      	b.n	8011a36 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8011a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011a36:	7dfb      	ldrb	r3, [r7, #23]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10a      	bne.n	8011a52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011a3c:	4b5e      	ldr	r3, [pc, #376]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011a4a:	495b      	ldr	r1, [pc, #364]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a4c:	4313      	orrs	r3, r2
 8011a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8011a50:	e001      	b.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d033      	beq.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a6c:	d01c      	beq.n	8011aa8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8011a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a72:	d816      	bhi.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8011a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a78:	d003      	beq.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8011a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a7e:	d007      	beq.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8011a80:	e00f      	b.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a82:	4b4d      	ldr	r3, [pc, #308]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a86:	4a4c      	ldr	r2, [pc, #304]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8011a8e:	e00c      	b.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	3324      	adds	r3, #36	; 0x24
 8011a94:	2101      	movs	r1, #1
 8011a96:	4618      	mov	r0, r3
 8011a98:	f000 f9b0 	bl	8011dfc <RCCEx_PLL3_Config>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8011aa0:	e003      	b.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	75fb      	strb	r3, [r7, #23]
      break;
 8011aa6:	e000      	b.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8011aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011aaa:	7dfb      	ldrb	r3, [r7, #23]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10a      	bne.n	8011ac6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011ab0:	4b41      	ldr	r3, [pc, #260]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ab4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011abe:	493e      	ldr	r1, [pc, #248]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	654b      	str	r3, [r1, #84]	; 0x54
 8011ac4:	e001      	b.n	8011aca <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011ac6:	7dfb      	ldrb	r3, [r7, #23]
 8011ac8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d029      	beq.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d003      	beq.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8011ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ae2:	d007      	beq.n	8011af4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8011ae4:	e00f      	b.n	8011b06 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ae6:	4b34      	ldr	r3, [pc, #208]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aea:	4a33      	ldr	r2, [pc, #204]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011af2:	e00b      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	3304      	adds	r3, #4
 8011af8:	2102      	movs	r1, #2
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 f8cc 	bl	8011c98 <RCCEx_PLL2_Config>
 8011b00:	4603      	mov	r3, r0
 8011b02:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8011b04:	e002      	b.n	8011b0c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8011b06:	2301      	movs	r3, #1
 8011b08:	75fb      	strb	r3, [r7, #23]
      break;
 8011b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b0c:	7dfb      	ldrb	r3, [r7, #23]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011b12:	4b29      	ldr	r3, [pc, #164]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b1e:	4926      	ldr	r1, [pc, #152]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b20:	4313      	orrs	r3, r2
 8011b22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011b24:	e001      	b.n	8011b2a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b26:	7dfb      	ldrb	r3, [r7, #23]
 8011b28:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00a      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	3324      	adds	r3, #36	; 0x24
 8011b3a:	2102      	movs	r1, #2
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f000 f95d 	bl	8011dfc <RCCEx_PLL3_Config>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d033      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b60:	d017      	beq.n	8011b92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8011b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b66:	d811      	bhi.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b6c:	d013      	beq.n	8011b96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8011b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b72:	d80b      	bhi.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d010      	beq.n	8011b9a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8011b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b7c:	d106      	bne.n	8011b8c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b7e:	4b0e      	ldr	r3, [pc, #56]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b82:	4a0d      	ldr	r2, [pc, #52]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8011b8a:	e007      	b.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8011b90:	e004      	b.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011b92:	bf00      	nop
 8011b94:	e002      	b.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011b96:	bf00      	nop
 8011b98:	e000      	b.n	8011b9c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8011b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8011b9c:	7dfb      	ldrb	r3, [r7, #23]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d10c      	bne.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011ba2:	4b05      	ldr	r3, [pc, #20]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bae:	4902      	ldr	r1, [pc, #8]	; (8011bb8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011bb0:	4313      	orrs	r3, r2
 8011bb2:	654b      	str	r3, [r1, #84]	; 0x54
 8011bb4:	e004      	b.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8011bb6:	bf00      	nop
 8011bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bbc:	7dfb      	ldrb	r3, [r7, #23]
 8011bbe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d008      	beq.n	8011bde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011bcc:	4b31      	ldr	r3, [pc, #196]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd8:	492e      	ldr	r1, [pc, #184]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d009      	beq.n	8011bfe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011bea:	4b2a      	ldr	r3, [pc, #168]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011bec:	691b      	ldr	r3, [r3, #16]
 8011bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011bf8:	4926      	ldr	r1, [pc, #152]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011bfa:	4313      	orrs	r3, r2
 8011bfc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d008      	beq.n	8011c1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011c0a:	4b22      	ldr	r3, [pc, #136]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c16:	491f      	ldr	r1, [pc, #124]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00d      	beq.n	8011c44 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011c28:	4b1a      	ldr	r3, [pc, #104]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c2a:	691b      	ldr	r3, [r3, #16]
 8011c2c:	4a19      	ldr	r2, [pc, #100]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011c32:	6113      	str	r3, [r2, #16]
 8011c34:	4b17      	ldr	r3, [pc, #92]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c36:	691a      	ldr	r2, [r3, #16]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011c3e:	4915      	ldr	r1, [pc, #84]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c40:	4313      	orrs	r3, r2
 8011c42:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	da08      	bge.n	8011c5e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011c4c:	4b11      	ldr	r3, [pc, #68]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c58:	490e      	ldr	r1, [pc, #56]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c5a:	4313      	orrs	r3, r2
 8011c5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d009      	beq.n	8011c7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011c6a:	4b0a      	ldr	r3, [pc, #40]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c78:	4906      	ldr	r1, [pc, #24]	; (8011c94 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8011c7e:	7dbb      	ldrb	r3, [r7, #22]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d101      	bne.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	e000      	b.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8011c88:	2301      	movs	r3, #1
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3718      	adds	r7, #24
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop
 8011c94:	58024400 	.word	0x58024400

08011c98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011ca6:	4b53      	ldr	r3, [pc, #332]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011caa:	f003 0303 	and.w	r3, r3, #3
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d101      	bne.n	8011cb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e099      	b.n	8011dea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011cb6:	4b4f      	ldr	r3, [pc, #316]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a4e      	ldr	r2, [pc, #312]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011cbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011cc2:	f7fa fe8b 	bl	800c9dc <HAL_GetTick>
 8011cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011cc8:	e008      	b.n	8011cdc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8011cca:	f7fa fe87 	bl	800c9dc <HAL_GetTick>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	d901      	bls.n	8011cdc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011cd8:	2303      	movs	r3, #3
 8011cda:	e086      	b.n	8011dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011cdc:	4b45      	ldr	r3, [pc, #276]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1f0      	bne.n	8011cca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011ce8:	4b42      	ldr	r3, [pc, #264]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	031b      	lsls	r3, r3, #12
 8011cf6:	493f      	ldr	r1, [pc, #252]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	628b      	str	r3, [r1, #40]	; 0x28
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	025b      	lsls	r3, r3, #9
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	431a      	orrs	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	041b      	lsls	r3, r3, #16
 8011d1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011d1e:	431a      	orrs	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	3b01      	subs	r3, #1
 8011d26:	061b      	lsls	r3, r3, #24
 8011d28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011d2c:	4931      	ldr	r1, [pc, #196]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011d32:	4b30      	ldr	r3, [pc, #192]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	492d      	ldr	r1, [pc, #180]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d40:	4313      	orrs	r3, r2
 8011d42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011d44:	4b2b      	ldr	r3, [pc, #172]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d48:	f023 0220 	bic.w	r2, r3, #32
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	699b      	ldr	r3, [r3, #24]
 8011d50:	4928      	ldr	r1, [pc, #160]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d52:	4313      	orrs	r3, r2
 8011d54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011d56:	4b27      	ldr	r3, [pc, #156]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5a:	4a26      	ldr	r2, [pc, #152]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d5c:	f023 0310 	bic.w	r3, r3, #16
 8011d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011d62:	4b24      	ldr	r3, [pc, #144]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d66:	4b24      	ldr	r3, [pc, #144]	; (8011df8 <RCCEx_PLL2_Config+0x160>)
 8011d68:	4013      	ands	r3, r2
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	69d2      	ldr	r2, [r2, #28]
 8011d6e:	00d2      	lsls	r2, r2, #3
 8011d70:	4920      	ldr	r1, [pc, #128]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d72:	4313      	orrs	r3, r2
 8011d74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011d76:	4b1f      	ldr	r3, [pc, #124]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d7a:	4a1e      	ldr	r2, [pc, #120]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d7c:	f043 0310 	orr.w	r3, r3, #16
 8011d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011d88:	4b1a      	ldr	r3, [pc, #104]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	4a19      	ldr	r2, [pc, #100]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011d94:	e00f      	b.n	8011db6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d106      	bne.n	8011daa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011d9c:	4b15      	ldr	r3, [pc, #84]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da0:	4a14      	ldr	r2, [pc, #80]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011da8:	e005      	b.n	8011db6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011daa:	4b12      	ldr	r3, [pc, #72]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dae:	4a11      	ldr	r2, [pc, #68]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011db4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011db6:	4b0f      	ldr	r3, [pc, #60]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a0e      	ldr	r2, [pc, #56]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011dc2:	f7fa fe0b 	bl	800c9dc <HAL_GetTick>
 8011dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011dc8:	e008      	b.n	8011ddc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8011dca:	f7fa fe07 	bl	800c9dc <HAL_GetTick>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	68bb      	ldr	r3, [r7, #8]
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	2b02      	cmp	r3, #2
 8011dd6:	d901      	bls.n	8011ddc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011dd8:	2303      	movs	r3, #3
 8011dda:	e006      	b.n	8011dea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011ddc:	4b05      	ldr	r3, [pc, #20]	; (8011df4 <RCCEx_PLL2_Config+0x15c>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d0f0      	beq.n	8011dca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	58024400 	.word	0x58024400
 8011df8:	ffff0007 	.word	0xffff0007

08011dfc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011e0a:	4b53      	ldr	r3, [pc, #332]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0e:	f003 0303 	and.w	r3, r3, #3
 8011e12:	2b03      	cmp	r3, #3
 8011e14:	d101      	bne.n	8011e1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011e16:	2301      	movs	r3, #1
 8011e18:	e099      	b.n	8011f4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011e1a:	4b4f      	ldr	r3, [pc, #316]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4a4e      	ldr	r2, [pc, #312]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011e26:	f7fa fdd9 	bl	800c9dc <HAL_GetTick>
 8011e2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011e2c:	e008      	b.n	8011e40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8011e2e:	f7fa fdd5 	bl	800c9dc <HAL_GetTick>
 8011e32:	4602      	mov	r2, r0
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d901      	bls.n	8011e40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	e086      	b.n	8011f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011e40:	4b45      	ldr	r3, [pc, #276]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d1f0      	bne.n	8011e2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011e4c:	4b42      	ldr	r3, [pc, #264]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	051b      	lsls	r3, r3, #20
 8011e5a:	493f      	ldr	r1, [pc, #252]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e5c:	4313      	orrs	r3, r2
 8011e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	3b01      	subs	r3, #1
 8011e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	3b01      	subs	r3, #1
 8011e70:	025b      	lsls	r3, r3, #9
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	431a      	orrs	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	68db      	ldr	r3, [r3, #12]
 8011e7a:	3b01      	subs	r3, #1
 8011e7c:	041b      	lsls	r3, r3, #16
 8011e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011e82:	431a      	orrs	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	061b      	lsls	r3, r3, #24
 8011e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011e90:	4931      	ldr	r1, [pc, #196]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e92:	4313      	orrs	r3, r2
 8011e94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011e96:	4b30      	ldr	r3, [pc, #192]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	695b      	ldr	r3, [r3, #20]
 8011ea2:	492d      	ldr	r1, [pc, #180]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011ea8:	4b2b      	ldr	r3, [pc, #172]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	699b      	ldr	r3, [r3, #24]
 8011eb4:	4928      	ldr	r1, [pc, #160]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011eba:	4b27      	ldr	r3, [pc, #156]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ebe:	4a26      	ldr	r2, [pc, #152]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011ec6:	4b24      	ldr	r3, [pc, #144]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011eca:	4b24      	ldr	r3, [pc, #144]	; (8011f5c <RCCEx_PLL3_Config+0x160>)
 8011ecc:	4013      	ands	r3, r2
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	69d2      	ldr	r2, [r2, #28]
 8011ed2:	00d2      	lsls	r2, r2, #3
 8011ed4:	4920      	ldr	r1, [pc, #128]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011eda:	4b1f      	ldr	r3, [pc, #124]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	4a1e      	ldr	r2, [pc, #120]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d106      	bne.n	8011efa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011eec:	4b1a      	ldr	r3, [pc, #104]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef0:	4a19      	ldr	r2, [pc, #100]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ef8:	e00f      	b.n	8011f1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d106      	bne.n	8011f0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011f00:	4b15      	ldr	r3, [pc, #84]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f04:	4a14      	ldr	r2, [pc, #80]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011f0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011f0c:	e005      	b.n	8011f1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011f0e:	4b12      	ldr	r3, [pc, #72]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f12:	4a11      	ldr	r2, [pc, #68]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011f18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011f1a:	4b0f      	ldr	r3, [pc, #60]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4a0e      	ldr	r2, [pc, #56]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011f26:	f7fa fd59 	bl	800c9dc <HAL_GetTick>
 8011f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011f2c:	e008      	b.n	8011f40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8011f2e:	f7fa fd55 	bl	800c9dc <HAL_GetTick>
 8011f32:	4602      	mov	r2, r0
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	2b02      	cmp	r3, #2
 8011f3a:	d901      	bls.n	8011f40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011f3c:	2303      	movs	r3, #3
 8011f3e:	e006      	b.n	8011f4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011f40:	4b05      	ldr	r3, [pc, #20]	; (8011f58 <RCCEx_PLL3_Config+0x15c>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d0f0      	beq.n	8011f2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3710      	adds	r7, #16
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	58024400 	.word	0x58024400
 8011f5c:	ffff0007 	.word	0xffff0007

08011f60 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d101      	bne.n	8011f74 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011f70:	2301      	movs	r3, #1
 8011f72:	e02b      	b.n	8011fcc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d106      	bne.n	8011f8e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ef f9c5 	bl	8001318 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2202      	movs	r2, #2
 8011f92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681a      	ldr	r2, [r3, #0]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	3304      	adds	r3, #4
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	4610      	mov	r0, r2
 8011fa2:	f000 fb6b 	bl	801267c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6818      	ldr	r0, [r3, #0]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	461a      	mov	r2, r3
 8011fb0:	6839      	ldr	r1, [r7, #0]
 8011fb2:	f000 fbbf 	bl	8012734 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8011fb6:	4b07      	ldr	r3, [pc, #28]	; (8011fd4 <HAL_SDRAM_Init+0x74>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4a06      	ldr	r2, [pc, #24]	; (8011fd4 <HAL_SDRAM_Init+0x74>)
 8011fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011fc0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2201      	movs	r2, #1
 8011fc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011fca:	2300      	movs	r3, #0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3708      	adds	r7, #8
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}
 8011fd4:	52004000 	.word	0x52004000

08011fd8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7ef f9dd 	bl	80013a0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4619      	mov	r1, r3
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	f000 fc09 	bl	8012808 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	2200      	movs	r2, #0
 8012002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 8012006:	2300      	movs	r3, #0
}
 8012008:	4618      	mov	r0, r3
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b086      	sub	sp, #24
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012022:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8012024:	7dfb      	ldrb	r3, [r7, #23]
 8012026:	2b02      	cmp	r3, #2
 8012028:	d101      	bne.n	801202e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801202a:	2302      	movs	r3, #2
 801202c:	e021      	b.n	8012072 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801202e:	7dfb      	ldrb	r3, [r7, #23]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d002      	beq.n	801203a <HAL_SDRAM_SendCommand+0x2a>
 8012034:	7dfb      	ldrb	r3, [r7, #23]
 8012036:	2b05      	cmp	r3, #5
 8012038:	d118      	bne.n	801206c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2202      	movs	r2, #2
 801203e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	68b9      	ldr	r1, [r7, #8]
 801204a:	4618      	mov	r0, r3
 801204c:	f000 fbfe 	bl	801284c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b02      	cmp	r3, #2
 8012056:	d104      	bne.n	8012062 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2205      	movs	r2, #5
 801205c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8012060:	e006      	b.n	8012070 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2201      	movs	r2, #1
 8012066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801206a:	e001      	b.n	8012070 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801206c:	2301      	movs	r3, #1
 801206e:	e000      	b.n	8012072 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801207a:	b580      	push	{r7, lr}
 801207c:	b082      	sub	sp, #8
 801207e:	af00      	add	r7, sp, #0
 8012080:	6078      	str	r0, [r7, #4]
 8012082:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b02      	cmp	r3, #2
 801208e:	d101      	bne.n	8012094 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8012090:	2302      	movs	r3, #2
 8012092:	e016      	b.n	80120c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801209a:	b2db      	uxtb	r3, r3
 801209c:	2b01      	cmp	r3, #1
 801209e:	d10f      	bne.n	80120c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2202      	movs	r2, #2
 80120a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6839      	ldr	r1, [r7, #0]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f000 fbf0 	bl	8012894 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2201      	movs	r2, #1
 80120b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80120bc:	2300      	movs	r3, #0
 80120be:	e000      	b.n	80120c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}

080120ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80120ca:	b580      	push	{r7, lr}
 80120cc:	b082      	sub	sp, #8
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d101      	bne.n	80120dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80120d8:	2301      	movs	r3, #1
 80120da:	e049      	b.n	8012170 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d106      	bne.n	80120f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f000 f841 	bl	8012178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2202      	movs	r2, #2
 80120fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	3304      	adds	r3, #4
 8012106:	4619      	mov	r1, r3
 8012108:	4610      	mov	r0, r2
 801210a:	f000 f9ff 	bl	801250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2201      	movs	r2, #1
 8012112:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2201      	movs	r2, #1
 801211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2201      	movs	r2, #1
 8012122:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2201      	movs	r2, #1
 801212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2201      	movs	r2, #1
 8012132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2201      	movs	r2, #1
 801213a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2201      	movs	r2, #1
 8012142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2201      	movs	r2, #1
 801214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	2201      	movs	r2, #1
 8012152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2201      	movs	r2, #1
 801215a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2201      	movs	r2, #1
 8012162:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2201      	movs	r2, #1
 801216a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8012178:	b480      	push	{r7}
 801217a:	b083      	sub	sp, #12
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012180:	bf00      	nop
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr

0801218c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801219a:	b2db      	uxtb	r3, r3
 801219c:	2b01      	cmp	r3, #1
 801219e:	d001      	beq.n	80121a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80121a0:	2301      	movs	r3, #1
 80121a2:	e054      	b.n	801224e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2202      	movs	r2, #2
 80121a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	68da      	ldr	r2, [r3, #12]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f042 0201 	orr.w	r2, r2, #1
 80121ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4a26      	ldr	r2, [pc, #152]	; (801225c <HAL_TIM_Base_Start_IT+0xd0>)
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d022      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121ce:	d01d      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4a22      	ldr	r2, [pc, #136]	; (8012260 <HAL_TIM_Base_Start_IT+0xd4>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d018      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	4a21      	ldr	r2, [pc, #132]	; (8012264 <HAL_TIM_Base_Start_IT+0xd8>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d013      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4a1f      	ldr	r2, [pc, #124]	; (8012268 <HAL_TIM_Base_Start_IT+0xdc>)
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d00e      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	4a1e      	ldr	r2, [pc, #120]	; (801226c <HAL_TIM_Base_Start_IT+0xe0>)
 80121f4:	4293      	cmp	r3, r2
 80121f6:	d009      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	4a1c      	ldr	r2, [pc, #112]	; (8012270 <HAL_TIM_Base_Start_IT+0xe4>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d004      	beq.n	801220c <HAL_TIM_Base_Start_IT+0x80>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	4a1b      	ldr	r2, [pc, #108]	; (8012274 <HAL_TIM_Base_Start_IT+0xe8>)
 8012208:	4293      	cmp	r3, r2
 801220a:	d115      	bne.n	8012238 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689a      	ldr	r2, [r3, #8]
 8012212:	4b19      	ldr	r3, [pc, #100]	; (8012278 <HAL_TIM_Base_Start_IT+0xec>)
 8012214:	4013      	ands	r3, r2
 8012216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2b06      	cmp	r3, #6
 801221c:	d015      	beq.n	801224a <HAL_TIM_Base_Start_IT+0xbe>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012224:	d011      	beq.n	801224a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f042 0201 	orr.w	r2, r2, #1
 8012234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012236:	e008      	b.n	801224a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	f042 0201 	orr.w	r2, r2, #1
 8012246:	601a      	str	r2, [r3, #0]
 8012248:	e000      	b.n	801224c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801224a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3714      	adds	r7, #20
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	40010000 	.word	0x40010000
 8012260:	40000400 	.word	0x40000400
 8012264:	40000800 	.word	0x40000800
 8012268:	40000c00 	.word	0x40000c00
 801226c:	40010400 	.word	0x40010400
 8012270:	40001800 	.word	0x40001800
 8012274:	40014000 	.word	0x40014000
 8012278:	00010007 	.word	0x00010007

0801227c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b082      	sub	sp, #8
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	2b02      	cmp	r3, #2
 8012290:	d122      	bne.n	80122d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	f003 0302 	and.w	r3, r3, #2
 801229c:	2b02      	cmp	r3, #2
 801229e:	d11b      	bne.n	80122d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f06f 0202 	mvn.w	r2, #2
 80122a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2201      	movs	r2, #1
 80122ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	699b      	ldr	r3, [r3, #24]
 80122b6:	f003 0303 	and.w	r3, r3, #3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d003      	beq.n	80122c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f905 	bl	80124ce <HAL_TIM_IC_CaptureCallback>
 80122c4:	e005      	b.n	80122d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f8f7 	bl	80124ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f908 	bl	80124e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	f003 0304 	and.w	r3, r3, #4
 80122e2:	2b04      	cmp	r3, #4
 80122e4:	d122      	bne.n	801232c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	f003 0304 	and.w	r3, r3, #4
 80122f0:	2b04      	cmp	r3, #4
 80122f2:	d11b      	bne.n	801232c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	f06f 0204 	mvn.w	r2, #4
 80122fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2202      	movs	r2, #2
 8012302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	699b      	ldr	r3, [r3, #24]
 801230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f8db 	bl	80124ce <HAL_TIM_IC_CaptureCallback>
 8012318:	e005      	b.n	8012326 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 f8cd 	bl	80124ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f000 f8de 	bl	80124e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2200      	movs	r2, #0
 801232a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	691b      	ldr	r3, [r3, #16]
 8012332:	f003 0308 	and.w	r3, r3, #8
 8012336:	2b08      	cmp	r3, #8
 8012338:	d122      	bne.n	8012380 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	f003 0308 	and.w	r3, r3, #8
 8012344:	2b08      	cmp	r3, #8
 8012346:	d11b      	bne.n	8012380 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f06f 0208 	mvn.w	r2, #8
 8012350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2204      	movs	r2, #4
 8012356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	69db      	ldr	r3, [r3, #28]
 801235e:	f003 0303 	and.w	r3, r3, #3
 8012362:	2b00      	cmp	r3, #0
 8012364:	d003      	beq.n	801236e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 f8b1 	bl	80124ce <HAL_TIM_IC_CaptureCallback>
 801236c:	e005      	b.n	801237a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f8a3 	bl	80124ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f000 f8b4 	bl	80124e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2200      	movs	r2, #0
 801237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	691b      	ldr	r3, [r3, #16]
 8012386:	f003 0310 	and.w	r3, r3, #16
 801238a:	2b10      	cmp	r3, #16
 801238c:	d122      	bne.n	80123d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	f003 0310 	and.w	r3, r3, #16
 8012398:	2b10      	cmp	r3, #16
 801239a:	d11b      	bne.n	80123d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	f06f 0210 	mvn.w	r2, #16
 80123a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2208      	movs	r2, #8
 80123aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	69db      	ldr	r3, [r3, #28]
 80123b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d003      	beq.n	80123c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 f887 	bl	80124ce <HAL_TIM_IC_CaptureCallback>
 80123c0:	e005      	b.n	80123ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 f879 	bl	80124ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 f88a 	bl	80124e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	2200      	movs	r2, #0
 80123d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d10e      	bne.n	8012400 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	f003 0301 	and.w	r3, r3, #1
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d107      	bne.n	8012400 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f06f 0201 	mvn.w	r2, #1
 80123f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ee fbac 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	691b      	ldr	r3, [r3, #16]
 8012406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801240a:	2b80      	cmp	r3, #128	; 0x80
 801240c:	d10e      	bne.n	801242c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	68db      	ldr	r3, [r3, #12]
 8012414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012418:	2b80      	cmp	r3, #128	; 0x80
 801241a:	d107      	bne.n	801242c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f000 f914 	bl	8012654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801243a:	d10e      	bne.n	801245a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012446:	2b80      	cmp	r3, #128	; 0x80
 8012448:	d107      	bne.n	801245a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f000 f907 	bl	8012668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012464:	2b40      	cmp	r3, #64	; 0x40
 8012466:	d10e      	bne.n	8012486 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012472:	2b40      	cmp	r3, #64	; 0x40
 8012474:	d107      	bne.n	8012486 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801247e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f000 f838 	bl	80124f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	691b      	ldr	r3, [r3, #16]
 801248c:	f003 0320 	and.w	r3, r3, #32
 8012490:	2b20      	cmp	r3, #32
 8012492:	d10e      	bne.n	80124b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	f003 0320 	and.w	r3, r3, #32
 801249e:	2b20      	cmp	r3, #32
 80124a0:	d107      	bne.n	80124b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f06f 0220 	mvn.w	r2, #32
 80124aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 f8c7 	bl	8012640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80124b2:	bf00      	nop
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124ba:	b480      	push	{r7}
 80124bc:	b083      	sub	sp, #12
 80124be:	af00      	add	r7, sp, #0
 80124c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80124c2:	bf00      	nop
 80124c4:	370c      	adds	r7, #12
 80124c6:	46bd      	mov	sp, r7
 80124c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124cc:	4770      	bx	lr

080124ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80124ce:	b480      	push	{r7}
 80124d0:	b083      	sub	sp, #12
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80124d6:	bf00      	nop
 80124d8:	370c      	adds	r7, #12
 80124da:	46bd      	mov	sp, r7
 80124dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e0:	4770      	bx	lr

080124e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80124e2:	b480      	push	{r7}
 80124e4:	b083      	sub	sp, #12
 80124e6:	af00      	add	r7, sp, #0
 80124e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80124ea:	bf00      	nop
 80124ec:	370c      	adds	r7, #12
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr

080124f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80124f6:	b480      	push	{r7}
 80124f8:	b083      	sub	sp, #12
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80124fe:	bf00      	nop
 8012500:	370c      	adds	r7, #12
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr
	...

0801250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801250c:	b480      	push	{r7}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	4a40      	ldr	r2, [pc, #256]	; (8012620 <TIM_Base_SetConfig+0x114>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d013      	beq.n	801254c <TIM_Base_SetConfig+0x40>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801252a:	d00f      	beq.n	801254c <TIM_Base_SetConfig+0x40>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	4a3d      	ldr	r2, [pc, #244]	; (8012624 <TIM_Base_SetConfig+0x118>)
 8012530:	4293      	cmp	r3, r2
 8012532:	d00b      	beq.n	801254c <TIM_Base_SetConfig+0x40>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	4a3c      	ldr	r2, [pc, #240]	; (8012628 <TIM_Base_SetConfig+0x11c>)
 8012538:	4293      	cmp	r3, r2
 801253a:	d007      	beq.n	801254c <TIM_Base_SetConfig+0x40>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	4a3b      	ldr	r2, [pc, #236]	; (801262c <TIM_Base_SetConfig+0x120>)
 8012540:	4293      	cmp	r3, r2
 8012542:	d003      	beq.n	801254c <TIM_Base_SetConfig+0x40>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	4a3a      	ldr	r2, [pc, #232]	; (8012630 <TIM_Base_SetConfig+0x124>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d108      	bne.n	801255e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	4313      	orrs	r3, r2
 801255c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	4a2f      	ldr	r2, [pc, #188]	; (8012620 <TIM_Base_SetConfig+0x114>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d01f      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801256c:	d01b      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	4a2c      	ldr	r2, [pc, #176]	; (8012624 <TIM_Base_SetConfig+0x118>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d017      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4a2b      	ldr	r2, [pc, #172]	; (8012628 <TIM_Base_SetConfig+0x11c>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d013      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	4a2a      	ldr	r2, [pc, #168]	; (801262c <TIM_Base_SetConfig+0x120>)
 8012582:	4293      	cmp	r3, r2
 8012584:	d00f      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	4a29      	ldr	r2, [pc, #164]	; (8012630 <TIM_Base_SetConfig+0x124>)
 801258a:	4293      	cmp	r3, r2
 801258c:	d00b      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	4a28      	ldr	r2, [pc, #160]	; (8012634 <TIM_Base_SetConfig+0x128>)
 8012592:	4293      	cmp	r3, r2
 8012594:	d007      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a27      	ldr	r2, [pc, #156]	; (8012638 <TIM_Base_SetConfig+0x12c>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d003      	beq.n	80125a6 <TIM_Base_SetConfig+0x9a>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4a26      	ldr	r2, [pc, #152]	; (801263c <TIM_Base_SetConfig+0x130>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d108      	bne.n	80125b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	4313      	orrs	r3, r2
 80125b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	695b      	ldr	r3, [r3, #20]
 80125c2:	4313      	orrs	r3, r2
 80125c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	689a      	ldr	r2, [r3, #8]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4a10      	ldr	r2, [pc, #64]	; (8012620 <TIM_Base_SetConfig+0x114>)
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d00f      	beq.n	8012604 <TIM_Base_SetConfig+0xf8>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	4a12      	ldr	r2, [pc, #72]	; (8012630 <TIM_Base_SetConfig+0x124>)
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d00b      	beq.n	8012604 <TIM_Base_SetConfig+0xf8>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	4a11      	ldr	r2, [pc, #68]	; (8012634 <TIM_Base_SetConfig+0x128>)
 80125f0:	4293      	cmp	r3, r2
 80125f2:	d007      	beq.n	8012604 <TIM_Base_SetConfig+0xf8>
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	4a10      	ldr	r2, [pc, #64]	; (8012638 <TIM_Base_SetConfig+0x12c>)
 80125f8:	4293      	cmp	r3, r2
 80125fa:	d003      	beq.n	8012604 <TIM_Base_SetConfig+0xf8>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	4a0f      	ldr	r2, [pc, #60]	; (801263c <TIM_Base_SetConfig+0x130>)
 8012600:	4293      	cmp	r3, r2
 8012602:	d103      	bne.n	801260c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	691a      	ldr	r2, [r3, #16]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2201      	movs	r2, #1
 8012610:	615a      	str	r2, [r3, #20]
}
 8012612:	bf00      	nop
 8012614:	3714      	adds	r7, #20
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop
 8012620:	40010000 	.word	0x40010000
 8012624:	40000400 	.word	0x40000400
 8012628:	40000800 	.word	0x40000800
 801262c:	40000c00 	.word	0x40000c00
 8012630:	40010400 	.word	0x40010400
 8012634:	40014000 	.word	0x40014000
 8012638:	40014400 	.word	0x40014400
 801263c:	40014800 	.word	0x40014800

08012640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012648:	bf00      	nop
 801264a:	370c      	adds	r7, #12
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801265c:	bf00      	nop
 801265e:	370c      	adds	r7, #12
 8012660:	46bd      	mov	sp, r7
 8012662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012666:	4770      	bx	lr

08012668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d121      	bne.n	80126d2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	4b27      	ldr	r3, [pc, #156]	; (8012730 <FMC_SDRAM_Init+0xb4>)
 8012694:	4013      	ands	r3, r2
 8012696:	683a      	ldr	r2, [r7, #0]
 8012698:	6851      	ldr	r1, [r2, #4]
 801269a:	683a      	ldr	r2, [r7, #0]
 801269c:	6892      	ldr	r2, [r2, #8]
 801269e:	4311      	orrs	r1, r2
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	68d2      	ldr	r2, [r2, #12]
 80126a4:	4311      	orrs	r1, r2
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	6912      	ldr	r2, [r2, #16]
 80126aa:	4311      	orrs	r1, r2
 80126ac:	683a      	ldr	r2, [r7, #0]
 80126ae:	6952      	ldr	r2, [r2, #20]
 80126b0:	4311      	orrs	r1, r2
 80126b2:	683a      	ldr	r2, [r7, #0]
 80126b4:	6992      	ldr	r2, [r2, #24]
 80126b6:	4311      	orrs	r1, r2
 80126b8:	683a      	ldr	r2, [r7, #0]
 80126ba:	69d2      	ldr	r2, [r2, #28]
 80126bc:	4311      	orrs	r1, r2
 80126be:	683a      	ldr	r2, [r7, #0]
 80126c0:	6a12      	ldr	r2, [r2, #32]
 80126c2:	4311      	orrs	r1, r2
 80126c4:	683a      	ldr	r2, [r7, #0]
 80126c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80126c8:	430a      	orrs	r2, r1
 80126ca:	431a      	orrs	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	601a      	str	r2, [r3, #0]
 80126d0:	e026      	b.n	8012720 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	69d9      	ldr	r1, [r3, #28]
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	6a1b      	ldr	r3, [r3, #32]
 80126e2:	4319      	orrs	r1, r3
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e8:	430b      	orrs	r3, r1
 80126ea:	431a      	orrs	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685a      	ldr	r2, [r3, #4]
 80126f4:	4b0e      	ldr	r3, [pc, #56]	; (8012730 <FMC_SDRAM_Init+0xb4>)
 80126f6:	4013      	ands	r3, r2
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	6851      	ldr	r1, [r2, #4]
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	6892      	ldr	r2, [r2, #8]
 8012700:	4311      	orrs	r1, r2
 8012702:	683a      	ldr	r2, [r7, #0]
 8012704:	68d2      	ldr	r2, [r2, #12]
 8012706:	4311      	orrs	r1, r2
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	6912      	ldr	r2, [r2, #16]
 801270c:	4311      	orrs	r1, r2
 801270e:	683a      	ldr	r2, [r7, #0]
 8012710:	6952      	ldr	r2, [r2, #20]
 8012712:	4311      	orrs	r1, r2
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	6992      	ldr	r2, [r2, #24]
 8012718:	430a      	orrs	r2, r1
 801271a:	431a      	orrs	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012720:	2300      	movs	r3, #0
}
 8012722:	4618      	mov	r0, r3
 8012724:	370c      	adds	r7, #12
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	ffff8000 	.word	0xffff8000

08012734 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d128      	bne.n	8012798 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	689b      	ldr	r3, [r3, #8]
 801274a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	1e59      	subs	r1, r3, #1
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	3b01      	subs	r3, #1
 801275a:	011b      	lsls	r3, r3, #4
 801275c:	4319      	orrs	r1, r3
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	3b01      	subs	r3, #1
 8012764:	021b      	lsls	r3, r3, #8
 8012766:	4319      	orrs	r1, r3
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	3b01      	subs	r3, #1
 801276e:	031b      	lsls	r3, r3, #12
 8012770:	4319      	orrs	r1, r3
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	3b01      	subs	r3, #1
 8012778:	041b      	lsls	r3, r3, #16
 801277a:	4319      	orrs	r1, r3
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	695b      	ldr	r3, [r3, #20]
 8012780:	3b01      	subs	r3, #1
 8012782:	051b      	lsls	r3, r3, #20
 8012784:	4319      	orrs	r1, r3
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	699b      	ldr	r3, [r3, #24]
 801278a:	3b01      	subs	r3, #1
 801278c:	061b      	lsls	r3, r3, #24
 801278e:	430b      	orrs	r3, r1
 8012790:	431a      	orrs	r2, r3
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	609a      	str	r2, [r3, #8]
 8012796:	e02d      	b.n	80127f4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	689a      	ldr	r2, [r3, #8]
 801279c:	4b19      	ldr	r3, [pc, #100]	; (8012804 <FMC_SDRAM_Timing_Init+0xd0>)
 801279e:	4013      	ands	r3, r2
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	68d2      	ldr	r2, [r2, #12]
 80127a4:	3a01      	subs	r2, #1
 80127a6:	0311      	lsls	r1, r2, #12
 80127a8:	68ba      	ldr	r2, [r7, #8]
 80127aa:	6952      	ldr	r2, [r2, #20]
 80127ac:	3a01      	subs	r2, #1
 80127ae:	0512      	lsls	r2, r2, #20
 80127b0:	430a      	orrs	r2, r1
 80127b2:	431a      	orrs	r2, r3
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	68db      	ldr	r3, [r3, #12]
 80127bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	1e59      	subs	r1, r3, #1
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	3b01      	subs	r3, #1
 80127cc:	011b      	lsls	r3, r3, #4
 80127ce:	4319      	orrs	r1, r3
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	689b      	ldr	r3, [r3, #8]
 80127d4:	3b01      	subs	r3, #1
 80127d6:	021b      	lsls	r3, r3, #8
 80127d8:	4319      	orrs	r1, r3
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	691b      	ldr	r3, [r3, #16]
 80127de:	3b01      	subs	r3, #1
 80127e0:	041b      	lsls	r3, r3, #16
 80127e2:	4319      	orrs	r1, r3
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	699b      	ldr	r3, [r3, #24]
 80127e8:	3b01      	subs	r3, #1
 80127ea:	061b      	lsls	r3, r3, #24
 80127ec:	430b      	orrs	r3, r1
 80127ee:	431a      	orrs	r2, r3
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80127f4:	2300      	movs	r3, #0
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3714      	adds	r7, #20
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	ff0f0fff 	.word	0xff0f0fff

08012808 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	683a      	ldr	r2, [r7, #0]
 8012816:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801281a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	3202      	adds	r2, #2
 8012824:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8012828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2200      	movs	r2, #0
 8012836:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2200      	movs	r2, #0
 801283c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	691a      	ldr	r2, [r3, #16]
 801285c:	4b0c      	ldr	r3, [pc, #48]	; (8012890 <FMC_SDRAM_SendCommand+0x44>)
 801285e:	4013      	ands	r3, r2
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	6811      	ldr	r1, [r2, #0]
 8012864:	68ba      	ldr	r2, [r7, #8]
 8012866:	6852      	ldr	r2, [r2, #4]
 8012868:	4311      	orrs	r1, r2
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	6892      	ldr	r2, [r2, #8]
 801286e:	3a01      	subs	r2, #1
 8012870:	0152      	lsls	r2, r2, #5
 8012872:	4311      	orrs	r1, r2
 8012874:	68ba      	ldr	r2, [r7, #8]
 8012876:	68d2      	ldr	r2, [r2, #12]
 8012878:	0252      	lsls	r2, r2, #9
 801287a:	430a      	orrs	r2, r1
 801287c:	431a      	orrs	r2, r3
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8012882:	2300      	movs	r3, #0
}
 8012884:	4618      	mov	r0, r3
 8012886:	3714      	adds	r7, #20
 8012888:	46bd      	mov	sp, r7
 801288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288e:	4770      	bx	lr
 8012890:	ffc00000 	.word	0xffc00000

08012894 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	695a      	ldr	r2, [r3, #20]
 80128a2:	4b07      	ldr	r3, [pc, #28]	; (80128c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80128a4:	4013      	ands	r3, r2
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	0052      	lsls	r2, r2, #1
 80128aa:	431a      	orrs	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	370c      	adds	r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop
 80128c0:	ffffc001 	.word	0xffffc001

080128c4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80128c4:	8880      	ldrh	r0, [r0, #4]
 80128c6:	4770      	bx	lr

080128c8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80128c8:	b570      	push	{r4, r5, r6, lr}
 80128ca:	6803      	ldr	r3, [r0, #0]
 80128cc:	460c      	mov	r4, r1
 80128ce:	2100      	movs	r1, #0
 80128d0:	4605      	mov	r5, r0
 80128d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d4:	4798      	blx	r3
 80128d6:	4606      	mov	r6, r0
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	4628      	mov	r0, r5
 80128dc:	1ba4      	subs	r4, r4, r6
 80128de:	6a1b      	ldr	r3, [r3, #32]
 80128e0:	b2a4      	uxth	r4, r4
 80128e2:	4798      	blx	r3
 80128e4:	fbb4 f0f0 	udiv	r0, r4, r0
 80128e8:	bd70      	pop	{r4, r5, r6, pc}

080128ea <_ZN8touchgfx17AbstractPartition5clearEv>:
 80128ea:	2300      	movs	r3, #0
 80128ec:	8083      	strh	r3, [r0, #4]
 80128ee:	4770      	bx	lr

080128f0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80128f0:	b510      	push	{r4, lr}
 80128f2:	6803      	ldr	r3, [r0, #0]
 80128f4:	4604      	mov	r4, r0
 80128f6:	8881      	ldrh	r1, [r0, #4]
 80128f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128fa:	4798      	blx	r3
 80128fc:	88a3      	ldrh	r3, [r4, #4]
 80128fe:	3301      	adds	r3, #1
 8012900:	80a3      	strh	r3, [r4, #4]
 8012902:	bd10      	pop	{r4, pc}

08012904 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012904:	6803      	ldr	r3, [r0, #0]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	4718      	bx	r3

0801290a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801290a:	4770      	bx	lr

0801290c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801290c:	4a02      	ldr	r2, [pc, #8]	; (8012918 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801290e:	6002      	str	r2, [r0, #0]
 8012910:	2200      	movs	r2, #0
 8012912:	8082      	strh	r2, [r0, #4]
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	08025a8c 	.word	0x08025a8c

0801291c <_ZN8touchgfx9Container13getFirstChildEv>:
 801291c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801291e:	4770      	bx	lr

08012920 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012920:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012922:	2000      	movs	r0, #0
 8012924:	b12b      	cbz	r3, 8012932 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012926:	b920      	cbnz	r0, 8012932 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012928:	1a5a      	subs	r2, r3, r1
 801292a:	699b      	ldr	r3, [r3, #24]
 801292c:	4250      	negs	r0, r2
 801292e:	4150      	adcs	r0, r2
 8012930:	e7f8      	b.n	8012924 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8012932:	4770      	bx	lr

08012934 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012934:	2300      	movs	r3, #0
 8012936:	6148      	str	r0, [r1, #20]
 8012938:	618b      	str	r3, [r1, #24]
 801293a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801293c:	b913      	cbnz	r3, 8012944 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 801293e:	6281      	str	r1, [r0, #40]	; 0x28
 8012940:	4770      	bx	lr
 8012942:	4613      	mov	r3, r2
 8012944:	699a      	ldr	r2, [r3, #24]
 8012946:	2a00      	cmp	r2, #0
 8012948:	d1fb      	bne.n	8012942 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801294a:	6199      	str	r1, [r3, #24]
 801294c:	4770      	bx	lr

0801294e <_ZN8touchgfx9Container9removeAllEv>:
 801294e:	2200      	movs	r2, #0
 8012950:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012952:	b123      	cbz	r3, 801295e <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012954:	6999      	ldr	r1, [r3, #24]
 8012956:	6281      	str	r1, [r0, #40]	; 0x28
 8012958:	e9c3 2205 	strd	r2, r2, [r3, #20]
 801295c:	e7f8      	b.n	8012950 <_ZN8touchgfx9Container9removeAllEv+0x2>
 801295e:	4770      	bx	lr

08012960 <_ZN8touchgfx9Container6unlinkEv>:
 8012960:	2300      	movs	r3, #0
 8012962:	6283      	str	r3, [r0, #40]	; 0x28
 8012964:	4770      	bx	lr

08012966 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012966:	2200      	movs	r2, #0
 8012968:	8002      	strh	r2, [r0, #0]
 801296a:	8042      	strh	r2, [r0, #2]
 801296c:	8082      	strh	r2, [r0, #4]
 801296e:	80c2      	strh	r2, [r0, #6]
 8012970:	4770      	bx	lr

08012972 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012972:	b570      	push	{r4, r5, r6, lr}
 8012974:	460d      	mov	r5, r1
 8012976:	4616      	mov	r6, r2
 8012978:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801297a:	b13c      	cbz	r4, 801298c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801297c:	6823      	ldr	r3, [r4, #0]
 801297e:	4620      	mov	r0, r4
 8012980:	4632      	mov	r2, r6
 8012982:	4629      	mov	r1, r5
 8012984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012986:	4798      	blx	r3
 8012988:	69a4      	ldr	r4, [r4, #24]
 801298a:	e7f6      	b.n	801297a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801298c:	bd70      	pop	{r4, r5, r6, pc}

0801298e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801298e:	b538      	push	{r3, r4, r5, lr}
 8012990:	460d      	mov	r5, r1
 8012992:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012994:	b134      	cbz	r4, 80129a4 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012996:	682b      	ldr	r3, [r5, #0]
 8012998:	4621      	mov	r1, r4
 801299a:	4628      	mov	r0, r5
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	4798      	blx	r3
 80129a0:	69a4      	ldr	r4, [r4, #24]
 80129a2:	e7f7      	b.n	8012994 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80129a4:	bd38      	pop	{r3, r4, r5, pc}

080129a6 <_ZNK8touchgfx9Container17invalidateContentEv>:
 80129a6:	b510      	push	{r4, lr}
 80129a8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80129aa:	b12c      	cbz	r4, 80129b8 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 80129ac:	6823      	ldr	r3, [r4, #0]
 80129ae:	4620      	mov	r0, r4
 80129b0:	699b      	ldr	r3, [r3, #24]
 80129b2:	4798      	blx	r3
 80129b4:	69a4      	ldr	r4, [r4, #24]
 80129b6:	e7f8      	b.n	80129aa <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 80129b8:	bd10      	pop	{r4, pc}

080129ba <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80129ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129bc:	b19b      	cbz	r3, 80129e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80129be:	428b      	cmp	r3, r1
 80129c0:	d109      	bne.n	80129d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80129c2:	699a      	ldr	r2, [r3, #24]
 80129c4:	2100      	movs	r1, #0
 80129c6:	6159      	str	r1, [r3, #20]
 80129c8:	6282      	str	r2, [r0, #40]	; 0x28
 80129ca:	b902      	cbnz	r2, 80129ce <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80129cc:	4770      	bx	lr
 80129ce:	6199      	str	r1, [r3, #24]
 80129d0:	4770      	bx	lr
 80129d2:	4613      	mov	r3, r2
 80129d4:	b13a      	cbz	r2, 80129e6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80129d6:	699a      	ldr	r2, [r3, #24]
 80129d8:	428a      	cmp	r2, r1
 80129da:	d1fa      	bne.n	80129d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80129dc:	698a      	ldr	r2, [r1, #24]
 80129de:	619a      	str	r2, [r3, #24]
 80129e0:	2300      	movs	r3, #0
 80129e2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80129e6:	4770      	bx	lr

080129e8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80129e8:	b410      	push	{r4}
 80129ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129ec:	4604      	mov	r4, r0
 80129ee:	b92b      	cbnz	r3, 80129fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80129f0:	6803      	ldr	r3, [r0, #0]
 80129f2:	4611      	mov	r1, r2
 80129f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80129fa:	4718      	bx	r3
 80129fc:	b941      	cbnz	r1, 8012a10 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80129fe:	6193      	str	r3, [r2, #24]
 8012a00:	6282      	str	r2, [r0, #40]	; 0x28
 8012a02:	6154      	str	r4, [r2, #20]
 8012a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a08:	4770      	bx	lr
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	d0f9      	beq.n	8012a04 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012a10:	4299      	cmp	r1, r3
 8012a12:	6998      	ldr	r0, [r3, #24]
 8012a14:	d1f9      	bne.n	8012a0a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012a16:	6190      	str	r0, [r2, #24]
 8012a18:	618a      	str	r2, [r1, #24]
 8012a1a:	e7f2      	b.n	8012a02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012a1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a20:	461f      	mov	r7, r3
 8012a22:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012a26:	460d      	mov	r5, r1
 8012a28:	4616      	mov	r6, r2
 8012a2a:	b103      	cbz	r3, 8012a2e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012a2c:	6038      	str	r0, [r7, #0]
 8012a2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a30:	b314      	cbz	r4, 8012a78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012a32:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012a36:	b1eb      	cbz	r3, 8012a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012a3c:	428d      	cmp	r5, r1
 8012a3e:	db19      	blt.n	8012a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a40:	b289      	uxth	r1, r1
 8012a42:	8923      	ldrh	r3, [r4, #8]
 8012a44:	440b      	add	r3, r1
 8012a46:	b21b      	sxth	r3, r3
 8012a48:	429d      	cmp	r5, r3
 8012a4a:	da13      	bge.n	8012a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a4c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012a50:	4296      	cmp	r6, r2
 8012a52:	db0f      	blt.n	8012a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a54:	b292      	uxth	r2, r2
 8012a56:	8963      	ldrh	r3, [r4, #10]
 8012a58:	4413      	add	r3, r2
 8012a5a:	b21b      	sxth	r3, r3
 8012a5c:	429e      	cmp	r6, r3
 8012a5e:	da09      	bge.n	8012a74 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012a60:	6823      	ldr	r3, [r4, #0]
 8012a62:	1ab2      	subs	r2, r6, r2
 8012a64:	1a69      	subs	r1, r5, r1
 8012a66:	4620      	mov	r0, r4
 8012a68:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012a6c:	b212      	sxth	r2, r2
 8012a6e:	463b      	mov	r3, r7
 8012a70:	b209      	sxth	r1, r1
 8012a72:	47c0      	blx	r8
 8012a74:	69a4      	ldr	r4, [r4, #24]
 8012a76:	e7db      	b.n	8012a30 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a80:	4c6d      	ldr	r4, [pc, #436]	; (8012c38 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012a82:	b0a1      	sub	sp, #132	; 0x84
 8012a84:	4606      	mov	r6, r0
 8012a86:	6824      	ldr	r4, [r4, #0]
 8012a88:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012a8a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012a8e:	2400      	movs	r4, #0
 8012a90:	9303      	str	r3, [sp, #12]
 8012a92:	802c      	strh	r4, [r5, #0]
 8012a94:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012a96:	802c      	strh	r4, [r5, #0]
 8012a98:	601c      	str	r4, [r3, #0]
 8012a9a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012a9e:	f7ff ffbd 	bl	8012a1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012aa2:	f1b9 0f03 	cmp.w	r9, #3
 8012aa6:	f340 80c1 	ble.w	8012c2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012aaa:	4631      	mov	r1, r6
 8012aac:	a80c      	add	r0, sp, #48	; 0x30
 8012aae:	f003 faa3 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ab2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012ab6:	9306      	str	r3, [sp, #24]
 8012ab8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012abc:	9307      	str	r3, [sp, #28]
 8012abe:	9b03      	ldr	r3, [sp, #12]
 8012ac0:	f8d3 a000 	ldr.w	sl, [r3]
 8012ac4:	f1ba 0f00 	cmp.w	sl, #0
 8012ac8:	f000 80b3 	beq.w	8012c32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012acc:	4651      	mov	r1, sl
 8012ace:	a810      	add	r0, sp, #64	; 0x40
 8012ad0:	f003 fa92 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ad4:	2002      	movs	r0, #2
 8012ad6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012ada:	9b01      	ldr	r3, [sp, #4]
 8012adc:	9a06      	ldr	r2, [sp, #24]
 8012ade:	fb91 f1f0 	sdiv	r1, r1, r0
 8012ae2:	189d      	adds	r5, r3, r2
 8012ae4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012ae8:	9a07      	ldr	r2, [sp, #28]
 8012aea:	4419      	add	r1, r3
 8012aec:	9b02      	ldr	r3, [sp, #8]
 8012aee:	4413      	add	r3, r2
 8012af0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012af4:	1a6d      	subs	r5, r5, r1
 8012af6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012afa:	fb92 f2f0 	sdiv	r2, r2, r0
 8012afe:	440a      	add	r2, r1
 8012b00:	1a9b      	subs	r3, r3, r2
 8012b02:	435b      	muls	r3, r3
 8012b04:	fb05 3505 	mla	r5, r5, r5, r3
 8012b08:	4f4c      	ldr	r7, [pc, #304]	; (8012c3c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012b0a:	ac10      	add	r4, sp, #64	; 0x40
 8012b0c:	f1b9 0f0c 	cmp.w	r9, #12
 8012b10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b1c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012b24:	f04f 0303 	mov.w	r3, #3
 8012b28:	bfd8      	it	le
 8012b2a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012b2e:	f04f 0400 	mov.w	r4, #0
 8012b32:	f8cd 9000 	str.w	r9, [sp]
 8012b36:	bfcc      	ite	gt
 8012b38:	4698      	movgt	r8, r3
 8012b3a:	fb92 f8f3 	sdivle	r8, r2, r3
 8012b3e:	1c63      	adds	r3, r4, #1
 8012b40:	aa10      	add	r2, sp, #64	; 0x40
 8012b42:	f004 0401 	and.w	r4, r4, #1
 8012b46:	f04f 0b00 	mov.w	fp, #0
 8012b4a:	9308      	str	r3, [sp, #32]
 8012b4c:	9b00      	ldr	r3, [sp, #0]
 8012b4e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012b52:	fb93 f3f8 	sdiv	r3, r3, r8
 8012b56:	3404      	adds	r4, #4
 8012b58:	b29b      	uxth	r3, r3
 8012b5a:	9304      	str	r3, [sp, #16]
 8012b5c:	9a04      	ldr	r2, [sp, #16]
 8012b5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012b62:	fb13 f302 	smulbb	r3, r3, r2
 8012b66:	9a01      	ldr	r2, [sp, #4]
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	1899      	adds	r1, r3, r2
 8012b6c:	9305      	str	r3, [sp, #20]
 8012b6e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012b72:	b209      	sxth	r1, r1
 8012b74:	4299      	cmp	r1, r3
 8012b76:	db4d      	blt.n	8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b78:	8932      	ldrh	r2, [r6, #8]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	b21b      	sxth	r3, r3
 8012b7e:	4299      	cmp	r1, r3
 8012b80:	da48      	bge.n	8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b82:	9b04      	ldr	r3, [sp, #16]
 8012b84:	6827      	ldr	r7, [r4, #0]
 8012b86:	fb17 f703 	smulbb	r7, r7, r3
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	b2bf      	uxth	r7, r7
 8012b8e:	18fa      	adds	r2, r7, r3
 8012b90:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012b94:	b212      	sxth	r2, r2
 8012b96:	429a      	cmp	r2, r3
 8012b98:	db3c      	blt.n	8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012b9a:	8970      	ldrh	r0, [r6, #10]
 8012b9c:	4403      	add	r3, r0
 8012b9e:	b21b      	sxth	r3, r3
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	da37      	bge.n	8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012baa:	ab0b      	add	r3, sp, #44	; 0x2c
 8012bac:	f7ff ff36 	bl	8012a1c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012bb2:	b37a      	cbz	r2, 8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012bb4:	4552      	cmp	r2, sl
 8012bb6:	d02d      	beq.n	8012c14 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012bb8:	4611      	mov	r1, r2
 8012bba:	a80e      	add	r0, sp, #56	; 0x38
 8012bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8012bbe:	f003 fa1b 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012bc2:	f04f 0e02 	mov.w	lr, #2
 8012bc6:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012bca:	9a06      	ldr	r2, [sp, #24]
 8012bcc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012bd0:	9b01      	ldr	r3, [sp, #4]
 8012bd2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012bd6:	4413      	add	r3, r2
 8012bd8:	9a07      	ldr	r2, [sp, #28]
 8012bda:	fb91 f1fe 	sdiv	r1, r1, lr
 8012bde:	fb9c fcfe 	sdiv	ip, ip, lr
 8012be2:	4401      	add	r1, r0
 8012be4:	1a58      	subs	r0, r3, r1
 8012be6:	9b02      	ldr	r3, [sp, #8]
 8012be8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012bec:	4413      	add	r3, r2
 8012bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bf0:	448c      	add	ip, r1
 8012bf2:	eba3 030c 	sub.w	r3, r3, ip
 8012bf6:	435b      	muls	r3, r3
 8012bf8:	fb00 3300 	mla	r3, r0, r0, r3
 8012bfc:	42ab      	cmp	r3, r5
 8012bfe:	d208      	bcs.n	8012c12 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c02:	461d      	mov	r5, r3
 8012c04:	9803      	ldr	r0, [sp, #12]
 8012c06:	6001      	str	r1, [r0, #0]
 8012c08:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012c0a:	9805      	ldr	r0, [sp, #20]
 8012c0c:	8008      	strh	r0, [r1, #0]
 8012c0e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012c10:	800f      	strh	r7, [r1, #0]
 8012c12:	4692      	mov	sl, r2
 8012c14:	f10b 0b01 	add.w	fp, fp, #1
 8012c18:	3408      	adds	r4, #8
 8012c1a:	f1bb 0f04 	cmp.w	fp, #4
 8012c1e:	d19d      	bne.n	8012b5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012c20:	9b00      	ldr	r3, [sp, #0]
 8012c22:	9c08      	ldr	r4, [sp, #32]
 8012c24:	444b      	add	r3, r9
 8012c26:	4544      	cmp	r4, r8
 8012c28:	9300      	str	r3, [sp, #0]
 8012c2a:	d188      	bne.n	8012b3e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012c2c:	b021      	add	sp, #132	; 0x84
 8012c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c32:	f04f 35ff 	mov.w	r5, #4294967295
 8012c36:	e767      	b.n	8012b08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012c38:	2400ae74 	.word	0x2400ae74
 8012c3c:	0802507c 	.word	0x0802507c

08012c40 <_ZN8touchgfx4RectaNERKS0_>:
 8012c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c44:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012c48:	888c      	ldrh	r4, [r1, #4]
 8012c4a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012c4e:	443c      	add	r4, r7
 8012c50:	b2a4      	uxth	r4, r4
 8012c52:	fa0f f884 	sxth.w	r8, r4
 8012c56:	45c1      	cmp	r9, r8
 8012c58:	da2f      	bge.n	8012cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c5a:	8882      	ldrh	r2, [r0, #4]
 8012c5c:	444a      	add	r2, r9
 8012c5e:	b292      	uxth	r2, r2
 8012c60:	fa0f fe82 	sxth.w	lr, r2
 8012c64:	4577      	cmp	r7, lr
 8012c66:	da28      	bge.n	8012cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c68:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012c6c:	88cb      	ldrh	r3, [r1, #6]
 8012c6e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012c72:	442b      	add	r3, r5
 8012c74:	b21b      	sxth	r3, r3
 8012c76:	429e      	cmp	r6, r3
 8012c78:	da1f      	bge.n	8012cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c7a:	88c3      	ldrh	r3, [r0, #6]
 8012c7c:	4433      	add	r3, r6
 8012c7e:	b29b      	uxth	r3, r3
 8012c80:	fa0f fc83 	sxth.w	ip, r3
 8012c84:	4565      	cmp	r5, ip
 8012c86:	da18      	bge.n	8012cba <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012c88:	454f      	cmp	r7, r9
 8012c8a:	bfb8      	it	lt
 8012c8c:	464f      	movlt	r7, r9
 8012c8e:	42b5      	cmp	r5, r6
 8012c90:	bfb8      	it	lt
 8012c92:	4635      	movlt	r5, r6
 8012c94:	45f0      	cmp	r8, lr
 8012c96:	bfd8      	it	le
 8012c98:	4622      	movle	r2, r4
 8012c9a:	1bd2      	subs	r2, r2, r7
 8012c9c:	8082      	strh	r2, [r0, #4]
 8012c9e:	884a      	ldrh	r2, [r1, #2]
 8012ca0:	88c9      	ldrh	r1, [r1, #6]
 8012ca2:	8007      	strh	r7, [r0, #0]
 8012ca4:	440a      	add	r2, r1
 8012ca6:	8045      	strh	r5, [r0, #2]
 8012ca8:	b292      	uxth	r2, r2
 8012caa:	b211      	sxth	r1, r2
 8012cac:	458c      	cmp	ip, r1
 8012cae:	bfa8      	it	ge
 8012cb0:	4613      	movge	r3, r2
 8012cb2:	1b5b      	subs	r3, r3, r5
 8012cb4:	80c3      	strh	r3, [r0, #6]
 8012cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cba:	2300      	movs	r3, #0
 8012cbc:	8003      	strh	r3, [r0, #0]
 8012cbe:	8043      	strh	r3, [r0, #2]
 8012cc0:	8083      	strh	r3, [r0, #4]
 8012cc2:	80c3      	strh	r3, [r0, #6]
 8012cc4:	e7f7      	b.n	8012cb6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012cc6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	dd06      	ble.n	8012cdc <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012cce:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	bfcc      	ite	gt
 8012cd6:	2000      	movgt	r0, #0
 8012cd8:	2001      	movle	r0, #1
 8012cda:	4770      	bx	lr
 8012cdc:	2001      	movs	r0, #1
 8012cde:	4770      	bx	lr

08012ce0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4604      	mov	r4, r0
 8012ce8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012cea:	8003      	strh	r3, [r0, #0]
 8012cec:	8043      	strh	r3, [r0, #2]
 8012cee:	8083      	strh	r3, [r0, #4]
 8012cf0:	80c3      	strh	r3, [r0, #6]
 8012cf2:	2d00      	cmp	r5, #0
 8012cf4:	d040      	beq.n	8012d78 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012cf6:	1d28      	adds	r0, r5, #4
 8012cf8:	f7ff ffe5 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cfc:	b988      	cbnz	r0, 8012d22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012cfe:	4620      	mov	r0, r4
 8012d00:	f7ff ffe1 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012d08:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012d0c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012d10:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012d14:	b138      	cbz	r0, 8012d26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012d16:	8022      	strh	r2, [r4, #0]
 8012d18:	8063      	strh	r3, [r4, #2]
 8012d1a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012d1e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012d22:	69ad      	ldr	r5, [r5, #24]
 8012d24:	e7e5      	b.n	8012cf2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012d26:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012d2a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012d2e:	4290      	cmp	r0, r2
 8012d30:	4607      	mov	r7, r0
 8012d32:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012d36:	460e      	mov	r6, r1
 8012d38:	bfa8      	it	ge
 8012d3a:	4617      	movge	r7, r2
 8012d3c:	4299      	cmp	r1, r3
 8012d3e:	4472      	add	r2, lr
 8012d40:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012d44:	bfa8      	it	ge
 8012d46:	461e      	movge	r6, r3
 8012d48:	4440      	add	r0, r8
 8012d4a:	4471      	add	r1, lr
 8012d4c:	4463      	add	r3, ip
 8012d4e:	b200      	sxth	r0, r0
 8012d50:	8027      	strh	r7, [r4, #0]
 8012d52:	b212      	sxth	r2, r2
 8012d54:	8066      	strh	r6, [r4, #2]
 8012d56:	b209      	sxth	r1, r1
 8012d58:	b21b      	sxth	r3, r3
 8012d5a:	4290      	cmp	r0, r2
 8012d5c:	bfac      	ite	ge
 8012d5e:	ebc7 0200 	rsbge	r2, r7, r0
 8012d62:	ebc7 0202 	rsblt	r2, r7, r2
 8012d66:	4299      	cmp	r1, r3
 8012d68:	bfac      	ite	ge
 8012d6a:	ebc6 0301 	rsbge	r3, r6, r1
 8012d6e:	ebc6 0303 	rsblt	r3, r6, r3
 8012d72:	80a2      	strh	r2, [r4, #4]
 8012d74:	80e3      	strh	r3, [r4, #6]
 8012d76:	e7d4      	b.n	8012d22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012d78:	4620      	mov	r0, r4
 8012d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012d7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012d82:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012d86:	b383      	cbz	r3, 8012dea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012d88:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012d8a:	b374      	cbz	r4, 8012dea <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012d8c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012d90:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012d94:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012d98:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012d9c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012da0:	b303      	cbz	r3, 8012de4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012da2:	4668      	mov	r0, sp
 8012da4:	1d21      	adds	r1, r4, #4
 8012da6:	f8ad 5000 	strh.w	r5, [sp]
 8012daa:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012dae:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012db2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012db6:	f7ff ff43 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8012dba:	4668      	mov	r0, sp
 8012dbc:	f7ff ff83 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012dc0:	b980      	cbnz	r0, 8012de4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012dc2:	f8bd 3000 	ldrh.w	r3, [sp]
 8012dc6:	4669      	mov	r1, sp
 8012dc8:	88a2      	ldrh	r2, [r4, #4]
 8012dca:	4620      	mov	r0, r4
 8012dcc:	1a9b      	subs	r3, r3, r2
 8012dce:	88e2      	ldrh	r2, [r4, #6]
 8012dd0:	f8ad 3000 	strh.w	r3, [sp]
 8012dd4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012dd8:	1a9b      	subs	r3, r3, r2
 8012dda:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012dde:	6823      	ldr	r3, [r4, #0]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	4798      	blx	r3
 8012de4:	69a4      	ldr	r4, [r4, #24]
 8012de6:	2c00      	cmp	r4, #0
 8012de8:	d1d8      	bne.n	8012d9c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012dea:	b002      	add	sp, #8
 8012dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012df0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012df2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012df6:	460d      	mov	r5, r1
 8012df8:	4616      	mov	r6, r2
 8012dfa:	b323      	cbz	r3, 8012e46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012dfc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012dfe:	b314      	cbz	r4, 8012e46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012e00:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012e04:	b1eb      	cbz	r3, 8012e42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012e06:	6828      	ldr	r0, [r5, #0]
 8012e08:	466b      	mov	r3, sp
 8012e0a:	6869      	ldr	r1, [r5, #4]
 8012e0c:	c303      	stmia	r3!, {r0, r1}
 8012e0e:	4668      	mov	r0, sp
 8012e10:	1d21      	adds	r1, r4, #4
 8012e12:	f7ff ff15 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8012e16:	4668      	mov	r0, sp
 8012e18:	f7ff ff55 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e1c:	b988      	cbnz	r0, 8012e42 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012e1e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012e22:	4669      	mov	r1, sp
 8012e24:	88a2      	ldrh	r2, [r4, #4]
 8012e26:	4620      	mov	r0, r4
 8012e28:	1a9b      	subs	r3, r3, r2
 8012e2a:	88e2      	ldrh	r2, [r4, #6]
 8012e2c:	f8ad 3000 	strh.w	r3, [sp]
 8012e30:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	4632      	mov	r2, r6
 8012e38:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e40:	4798      	blx	r3
 8012e42:	69a4      	ldr	r4, [r4, #24]
 8012e44:	e7db      	b.n	8012dfe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012e46:	b002      	add	sp, #8
 8012e48:	bd70      	pop	{r4, r5, r6, pc}

08012e4a <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8012e4a:	4770      	bx	lr

08012e4c <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012e4c:	4770      	bx	lr

08012e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012e4e:	6803      	ldr	r3, [r0, #0]
 8012e50:	b513      	push	{r0, r1, r4, lr}
 8012e52:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8012e56:	2300      	movs	r3, #0
 8012e58:	e9cd 3300 	strd	r3, r3, [sp]
 8012e5c:	466b      	mov	r3, sp
 8012e5e:	47a0      	blx	r4
 8012e60:	b002      	add	sp, #8
 8012e62:	bd10      	pop	{r4, pc}

08012e64 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012e64:	2301      	movs	r3, #1
 8012e66:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012e6a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012e6e:	4770      	bx	lr

08012e70 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012e70:	2301      	movs	r3, #1
 8012e72:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012e76:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012e7a:	4770      	bx	lr

08012e7c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012e7c:	6843      	ldr	r3, [r0, #4]
 8012e7e:	2201      	movs	r2, #1
 8012e80:	725a      	strb	r2, [r3, #9]
 8012e82:	6840      	ldr	r0, [r0, #4]
 8012e84:	6803      	ldr	r3, [r0, #0]
 8012e86:	691b      	ldr	r3, [r3, #16]
 8012e88:	4718      	bx	r3

08012e8a <_ZN8touchgfx3HAL8flushDMAEv>:
 8012e8a:	6840      	ldr	r0, [r0, #4]
 8012e8c:	6803      	ldr	r3, [r0, #0]
 8012e8e:	689b      	ldr	r3, [r3, #8]
 8012e90:	4718      	bx	r3

08012e92 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012e92:	b530      	push	{r4, r5, lr}
 8012e94:	b08b      	sub	sp, #44	; 0x2c
 8012e96:	6804      	ldr	r4, [r0, #0]
 8012e98:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012e9c:	9509      	str	r5, [sp, #36]	; 0x24
 8012e9e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012ea2:	9508      	str	r5, [sp, #32]
 8012ea4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012ea8:	9507      	str	r5, [sp, #28]
 8012eaa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012eae:	9506      	str	r5, [sp, #24]
 8012eb0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012eb4:	9505      	str	r5, [sp, #20]
 8012eb6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012eba:	9504      	str	r5, [sp, #16]
 8012ebc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012ec0:	9503      	str	r5, [sp, #12]
 8012ec2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012ec6:	9502      	str	r5, [sp, #8]
 8012ec8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012ecc:	e9cd 3500 	strd	r3, r5, [sp]
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	47a0      	blx	r4
 8012ed8:	b00b      	add	sp, #44	; 0x2c
 8012eda:	bd30      	pop	{r4, r5, pc}

08012edc <_ZN8touchgfx3HAL10beginFrameEv>:
 8012edc:	4b04      	ldr	r3, [pc, #16]	; (8012ef0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	b123      	cbz	r3, 8012eec <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012ee2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012ee6:	f080 0001 	eor.w	r0, r0, #1
 8012eea:	4770      	bx	lr
 8012eec:	2001      	movs	r0, #1
 8012eee:	4770      	bx	lr
 8012ef0:	2400ae72 	.word	0x2400ae72

08012ef4 <_ZN8touchgfx3HAL8endFrameEv>:
 8012ef4:	b510      	push	{r4, lr}
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	6840      	ldr	r0, [r0, #4]
 8012efa:	6803      	ldr	r3, [r0, #0]
 8012efc:	689b      	ldr	r3, [r3, #8]
 8012efe:	4798      	blx	r3
 8012f00:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012f04:	b113      	cbz	r3, 8012f0c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012f06:	2301      	movs	r3, #1
 8012f08:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012f0c:	bd10      	pop	{r4, pc}

08012f0e <_ZN8touchgfx3HAL10initializeEv>:
 8012f0e:	b510      	push	{r4, lr}
 8012f10:	4604      	mov	r4, r0
 8012f12:	f7ee ffbf 	bl	8001e94 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012f16:	6860      	ldr	r0, [r4, #4]
 8012f18:	6803      	ldr	r3, [r0, #0]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	4798      	blx	r3
 8012f1e:	68e0      	ldr	r0, [r4, #12]
 8012f20:	6803      	ldr	r3, [r0, #0]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	4798      	blx	r3
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	4620      	mov	r0, r4
 8012f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f30:	4718      	bx	r3

08012f32 <_ZN8touchgfx3HAL9taskEntryEv>:
 8012f32:	b508      	push	{r3, lr}
 8012f34:	6803      	ldr	r3, [r0, #0]
 8012f36:	4604      	mov	r4, r0
 8012f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012f3c:	4798      	blx	r3
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f42:	4620      	mov	r0, r4
 8012f44:	4798      	blx	r3
 8012f46:	f7ef f81b 	bl	8001f80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8012f4a:	6823      	ldr	r3, [r4, #0]
 8012f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f4e:	e7f8      	b.n	8012f42 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08012f50 <_ZN8touchgfx3HAL4tickEv>:
 8012f50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012f52:	6803      	ldr	r3, [r0, #0]
 8012f54:	4604      	mov	r4, r0
 8012f56:	4d5b      	ldr	r5, [pc, #364]	; (80130c4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012f5c:	4798      	blx	r3
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	f000 8095 	beq.w	801308e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012f64:	2001      	movs	r0, #1
 8012f66:	2600      	movs	r6, #0
 8012f68:	f7ee fc2a 	bl	80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012f6c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012f70:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012f74:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012f78:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012f7c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012f80:	b133      	cbz	r3, 8012f90 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	4620      	mov	r0, r4
 8012f86:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012f8a:	4798      	blx	r3
 8012f8c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012f90:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012f94:	2601      	movs	r6, #1
 8012f96:	6862      	ldr	r2, [r4, #4]
 8012f98:	f083 0301 	eor.w	r3, r3, #1
 8012f9c:	702e      	strb	r6, [r5, #0]
 8012f9e:	7253      	strb	r3, [r2, #9]
 8012fa0:	f001 fff6 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8012fa4:	6803      	ldr	r3, [r0, #0]
 8012fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fa8:	4798      	blx	r3
 8012faa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012fae:	b90b      	cbnz	r3, 8012fb4 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012fb0:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8012fb4:	f001 ffec 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8012fb8:	6803      	ldr	r3, [r0, #0]
 8012fba:	695b      	ldr	r3, [r3, #20]
 8012fbc:	4798      	blx	r3
 8012fbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fc0:	6803      	ldr	r3, [r0, #0]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	4798      	blx	r3
 8012fc6:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012fca:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012fd6:	b10a      	cbz	r2, 8012fdc <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d1eb      	bne.n	8012fb4 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012fdc:	4a3a      	ldr	r2, [pc, #232]	; (80130c8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012fde:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012fe2:	7813      	ldrb	r3, [r2, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	b25b      	sxtb	r3, r3
 8012fe8:	4299      	cmp	r1, r3
 8012fea:	7013      	strb	r3, [r2, #0]
 8012fec:	dc10      	bgt.n	8013010 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012fee:	2300      	movs	r3, #0
 8012ff0:	68e0      	ldr	r0, [r4, #12]
 8012ff2:	a902      	add	r1, sp, #8
 8012ff4:	7013      	strb	r3, [r2, #0]
 8012ff6:	aa03      	add	r2, sp, #12
 8012ff8:	6803      	ldr	r3, [r0, #0]
 8012ffa:	68db      	ldr	r3, [r3, #12]
 8012ffc:	4798      	blx	r3
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	2800      	cmp	r0, #0
 8013002:	d050      	beq.n	80130a6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8013004:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013008:	4620      	mov	r0, r4
 801300a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801300e:	4798      	blx	r3
 8013010:	2300      	movs	r3, #0
 8013012:	6960      	ldr	r0, [r4, #20]
 8013014:	f88d 3007 	strb.w	r3, [sp, #7]
 8013018:	b158      	cbz	r0, 8013032 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801301a:	6803      	ldr	r3, [r0, #0]
 801301c:	f10d 0107 	add.w	r1, sp, #7
 8013020:	68db      	ldr	r3, [r3, #12]
 8013022:	4798      	blx	r3
 8013024:	b128      	cbz	r0, 8013032 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8013026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013028:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801302c:	6803      	ldr	r3, [r0, #0]
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	4798      	blx	r3
 8013032:	f104 001c 	add.w	r0, r4, #28
 8013036:	f010 f861 	bl	80230fc <_ZN8touchgfx8Gestures4tickEv>
 801303a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801303e:	b30b      	cbz	r3, 8013084 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013040:	6920      	ldr	r0, [r4, #16]
 8013042:	6803      	ldr	r3, [r0, #0]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	4798      	blx	r3
 8013048:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801304a:	4606      	mov	r6, r0
 801304c:	b903      	cbnz	r3, 8013050 <_ZN8touchgfx3HAL4tickEv+0x100>
 801304e:	6720      	str	r0, [r4, #112]	; 0x70
 8013050:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013052:	4a1e      	ldr	r2, [pc, #120]	; (80130cc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013054:	1af3      	subs	r3, r6, r3
 8013056:	4293      	cmp	r3, r2
 8013058:	d914      	bls.n	8013084 <_ZN8touchgfx3HAL4tickEv+0x134>
 801305a:	6920      	ldr	r0, [r4, #16]
 801305c:	6803      	ldr	r3, [r0, #0]
 801305e:	699b      	ldr	r3, [r3, #24]
 8013060:	4798      	blx	r3
 8013062:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013064:	2264      	movs	r2, #100	; 0x64
 8013066:	1af3      	subs	r3, r6, r3
 8013068:	fbb3 f3f2 	udiv	r3, r3, r2
 801306c:	fbb0 f0f3 	udiv	r0, r0, r3
 8013070:	2800      	cmp	r0, #0
 8013072:	dc1d      	bgt.n	80130b0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8013074:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013078:	6920      	ldr	r0, [r4, #16]
 801307a:	2100      	movs	r1, #0
 801307c:	6803      	ldr	r3, [r0, #0]
 801307e:	69db      	ldr	r3, [r3, #28]
 8013080:	4798      	blx	r3
 8013082:	6726      	str	r6, [r4, #112]	; 0x70
 8013084:	f001 ff84 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8013088:	6803      	ldr	r3, [r0, #0]
 801308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308c:	4798      	blx	r3
 801308e:	6823      	ldr	r3, [r4, #0]
 8013090:	4620      	mov	r0, r4
 8013092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013096:	4798      	blx	r3
 8013098:	2001      	movs	r0, #1
 801309a:	f7ee fbed 	bl	8001878 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801309e:	2300      	movs	r3, #0
 80130a0:	702b      	strb	r3, [r5, #0]
 80130a2:	b004      	add	sp, #16
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
 80130a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80130aa:	4620      	mov	r0, r4
 80130ac:	4798      	blx	r3
 80130ae:	e7af      	b.n	8013010 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80130b0:	2863      	cmp	r0, #99	; 0x63
 80130b2:	bfcb      	itete	gt
 80130b4:	2300      	movgt	r3, #0
 80130b6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80130ba:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80130be:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80130c2:	e7d9      	b.n	8013078 <_ZN8touchgfx3HAL4tickEv+0x128>
 80130c4:	2400ae78 	.word	0x2400ae78
 80130c8:	2400ae79 	.word	0x2400ae79
 80130cc:	05f5e100 	.word	0x05f5e100

080130d0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80130d0:	f7ee bf22 	b.w	8001f18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080130d4 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80130d4:	6581      	str	r1, [r0, #88]	; 0x58
 80130d6:	301c      	adds	r0, #28
 80130d8:	f010 b80e 	b.w	80230f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080130dc <_ZN8touchgfx3HAL5touchEll>:
 80130dc:	b530      	push	{r4, r5, lr}
 80130de:	b087      	sub	sp, #28
 80130e0:	4604      	mov	r4, r0
 80130e2:	a804      	add	r0, sp, #16
 80130e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80130e8:	f001 fcd8 	bl	8014a9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80130ec:	9b04      	ldr	r3, [sp, #16]
 80130ee:	a906      	add	r1, sp, #24
 80130f0:	a803      	add	r0, sp, #12
 80130f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80130f6:	9b05      	ldr	r3, [sp, #20]
 80130f8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80130fc:	f001 fd20 	bl	8014b40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8013100:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8013104:	f104 001c 	add.w	r0, r4, #28
 8013108:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801310c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8013110:	b189      	cbz	r1, 8013136 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8013112:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8013116:	9300      	str	r3, [sp, #0]
 8013118:	4613      	mov	r3, r2
 801311a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801311e:	462a      	mov	r2, r5
 8013120:	f00f fffa 	bl	8023118 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8013124:	b128      	cbz	r0, 8013132 <_ZN8touchgfx3HAL5touchEll+0x56>
 8013126:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801312a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801312c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013130:	6623      	str	r3, [r4, #96]	; 0x60
 8013132:	b007      	add	sp, #28
 8013134:	bd30      	pop	{r4, r5, pc}
 8013136:	f010 f82f 	bl	8023198 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801313a:	2301      	movs	r3, #1
 801313c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8013140:	e7f1      	b.n	8013126 <_ZN8touchgfx3HAL5touchEll+0x4a>

08013142 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8013142:	b510      	push	{r4, lr}
 8013144:	2b00      	cmp	r3, #0
 8013146:	d046      	beq.n	80131d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013148:	ea81 0002 	eor.w	r0, r1, r2
 801314c:	07c4      	lsls	r4, r0, #31
 801314e:	d508      	bpl.n	8013162 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8013150:	440b      	add	r3, r1
 8013152:	3a01      	subs	r2, #1
 8013154:	428b      	cmp	r3, r1
 8013156:	d93e      	bls.n	80131d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013158:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801315c:	f801 0b01 	strb.w	r0, [r1], #1
 8013160:	e7f8      	b.n	8013154 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8013162:	07d0      	lsls	r0, r2, #31
 8013164:	bf42      	ittt	mi
 8013166:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801316a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801316e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8013172:	2b01      	cmp	r3, #1
 8013174:	d911      	bls.n	801319a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013176:	ea81 0402 	eor.w	r4, r1, r2
 801317a:	4610      	mov	r0, r2
 801317c:	07a4      	lsls	r4, r4, #30
 801317e:	d022      	beq.n	80131c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8013180:	f023 0401 	bic.w	r4, r3, #1
 8013184:	440c      	add	r4, r1
 8013186:	428c      	cmp	r4, r1
 8013188:	4602      	mov	r2, r0
 801318a:	d904      	bls.n	8013196 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801318c:	8812      	ldrh	r2, [r2, #0]
 801318e:	3002      	adds	r0, #2
 8013190:	f821 2b02 	strh.w	r2, [r1], #2
 8013194:	e7f7      	b.n	8013186 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013196:	f003 0301 	and.w	r3, r3, #1
 801319a:	f023 0003 	bic.w	r0, r3, #3
 801319e:	4408      	add	r0, r1
 80131a0:	4288      	cmp	r0, r1
 80131a2:	4614      	mov	r4, r2
 80131a4:	d904      	bls.n	80131b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80131a6:	6824      	ldr	r4, [r4, #0]
 80131a8:	3204      	adds	r2, #4
 80131aa:	f841 4b04 	str.w	r4, [r1], #4
 80131ae:	e7f7      	b.n	80131a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80131b0:	f003 0303 	and.w	r3, r3, #3
 80131b4:	3a01      	subs	r2, #1
 80131b6:	440b      	add	r3, r1
 80131b8:	428b      	cmp	r3, r1
 80131ba:	d90c      	bls.n	80131d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80131bc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80131c0:	f801 0b01 	strb.w	r0, [r1], #1
 80131c4:	e7f8      	b.n	80131b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80131c6:	0790      	lsls	r0, r2, #30
 80131c8:	d0e7      	beq.n	801319a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80131ca:	f832 0b02 	ldrh.w	r0, [r2], #2
 80131ce:	3b02      	subs	r3, #2
 80131d0:	f821 0b02 	strh.w	r0, [r1], #2
 80131d4:	e7e1      	b.n	801319a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80131d6:	2001      	movs	r0, #1
 80131d8:	bd10      	pop	{r4, pc}

080131da <_ZN8touchgfx3HAL7noTouchEv>:
 80131da:	b510      	push	{r4, lr}
 80131dc:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80131e0:	4604      	mov	r4, r0
 80131e2:	b153      	cbz	r3, 80131fa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80131e4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80131e8:	2101      	movs	r1, #1
 80131ea:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80131ee:	301c      	adds	r0, #28
 80131f0:	f00f ffd2 	bl	8023198 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80131f4:	2300      	movs	r3, #0
 80131f6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80131fa:	bd10      	pop	{r4, pc}

080131fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80131fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013200:	b085      	sub	sp, #20
 8013202:	4604      	mov	r4, r0
 8013204:	2000      	movs	r0, #0
 8013206:	4699      	mov	r9, r3
 8013208:	ad04      	add	r5, sp, #16
 801320a:	460f      	mov	r7, r1
 801320c:	4690      	mov	r8, r2
 801320e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013212:	69a0      	ldr	r0, [r4, #24]
 8013214:	6806      	ldr	r6, [r0, #0]
 8013216:	9501      	str	r5, [sp, #4]
 8013218:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801321c:	9500      	str	r5, [sp, #0]
 801321e:	6835      	ldr	r5, [r6, #0]
 8013220:	47a8      	blx	r5
 8013222:	4d10      	ldr	r5, [pc, #64]	; (8013264 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8013224:	4606      	mov	r6, r0
 8013226:	f8a5 9000 	strh.w	r9, [r5]
 801322a:	f7f0 fdd3 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 801322e:	6803      	ldr	r3, [r0, #0]
 8013230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013232:	4798      	blx	r3
 8013234:	b128      	cbz	r0, 8013242 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013236:	2801      	cmp	r0, #1
 8013238:	d00b      	beq.n	8013252 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801323a:	4630      	mov	r0, r6
 801323c:	b005      	add	sp, #20
 801323e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013242:	882b      	ldrh	r3, [r5, #0]
 8013244:	fb08 7203 	mla	r2, r8, r3, r7
 8013248:	9b03      	ldr	r3, [sp, #12]
 801324a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801324e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013250:	e7f3      	b.n	801323a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013252:	882a      	ldrh	r2, [r5, #0]
 8013254:	9b03      	ldr	r3, [sp, #12]
 8013256:	fb08 7202 	mla	r2, r8, r2, r7
 801325a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801325e:	1a9a      	subs	r2, r3, r2
 8013260:	63e2      	str	r2, [r4, #60]	; 0x3c
 8013262:	e7ea      	b.n	801323a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013264:	2400ae6e 	.word	0x2400ae6e

08013268 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801326a:	b08b      	sub	sp, #44	; 0x2c
 801326c:	4617      	mov	r7, r2
 801326e:	4604      	mov	r4, r0
 8013270:	460e      	mov	r6, r1
 8013272:	461d      	mov	r5, r3
 8013274:	f7f0 fdae 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8013278:	6803      	ldr	r3, [r0, #0]
 801327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327c:	4798      	blx	r3
 801327e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013282:	9007      	str	r0, [sp, #28]
 8013284:	4631      	mov	r1, r6
 8013286:	6822      	ldr	r2, [r4, #0]
 8013288:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801328c:	4b0c      	ldr	r3, [pc, #48]	; (80132c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801328e:	4620      	mov	r0, r4
 8013290:	881b      	ldrh	r3, [r3, #0]
 8013292:	9306      	str	r3, [sp, #24]
 8013294:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013298:	9305      	str	r3, [sp, #20]
 801329a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801329e:	9304      	str	r3, [sp, #16]
 80132a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80132a4:	9303      	str	r3, [sp, #12]
 80132a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80132aa:	9302      	str	r3, [sp, #8]
 80132ac:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80132b0:	e9cd 5300 	strd	r5, r3, [sp]
 80132b4:	463b      	mov	r3, r7
 80132b6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80132b8:	2200      	movs	r2, #0
 80132ba:	47a8      	blx	r5
 80132bc:	b00b      	add	sp, #44	; 0x2c
 80132be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132c0:	2400ae6e 	.word	0x2400ae6e

080132c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80132c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132c8:	4698      	mov	r8, r3
 80132ca:	6803      	ldr	r3, [r0, #0]
 80132cc:	b08b      	sub	sp, #44	; 0x2c
 80132ce:	4617      	mov	r7, r2
 80132d0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80132d2:	460e      	mov	r6, r1
 80132d4:	4b13      	ldr	r3, [pc, #76]	; (8013324 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80132d6:	4604      	mov	r4, r0
 80132d8:	f8b3 9000 	ldrh.w	r9, [r3]
 80132dc:	f7f0 fd7a 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 80132e0:	6803      	ldr	r3, [r0, #0]
 80132e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e4:	4798      	blx	r3
 80132e6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80132ea:	2200      	movs	r2, #0
 80132ec:	4631      	mov	r1, r6
 80132ee:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80132f2:	2302      	movs	r3, #2
 80132f4:	4620      	mov	r0, r4
 80132f6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80132fa:	2301      	movs	r3, #1
 80132fc:	9305      	str	r3, [sp, #20]
 80132fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013302:	9304      	str	r3, [sp, #16]
 8013304:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013308:	9303      	str	r3, [sp, #12]
 801330a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801330e:	9302      	str	r3, [sp, #8]
 8013310:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013314:	e9cd 8300 	strd	r8, r3, [sp]
 8013318:	463b      	mov	r3, r7
 801331a:	47a8      	blx	r5
 801331c:	b00b      	add	sp, #44	; 0x2c
 801331e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013322:	bf00      	nop
 8013324:	2400ae6e 	.word	0x2400ae6e

08013328 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801332c:	4698      	mov	r8, r3
 801332e:	6803      	ldr	r3, [r0, #0]
 8013330:	b087      	sub	sp, #28
 8013332:	460e      	mov	r6, r1
 8013334:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013336:	4617      	mov	r7, r2
 8013338:	4b0f      	ldr	r3, [pc, #60]	; (8013378 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801333a:	4604      	mov	r4, r0
 801333c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013340:	f7f0 fd48 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8013344:	6803      	ldr	r3, [r0, #0]
 8013346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013348:	4798      	blx	r3
 801334a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801334e:	463a      	mov	r2, r7
 8013350:	4631      	mov	r1, r6
 8013352:	f8cd 900c 	str.w	r9, [sp, #12]
 8013356:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801335a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801335e:	4620      	mov	r0, r4
 8013360:	9302      	str	r3, [sp, #8]
 8013362:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013366:	9301      	str	r3, [sp, #4]
 8013368:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	4643      	mov	r3, r8
 8013370:	47a8      	blx	r5
 8013372:	b007      	add	sp, #28
 8013374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013378:	2400ae6e 	.word	0x2400ae6e

0801337c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013380:	4604      	mov	r4, r0
 8013382:	b08f      	sub	sp, #60	; 0x3c
 8013384:	4610      	mov	r0, r2
 8013386:	460d      	mov	r5, r1
 8013388:	4691      	mov	r9, r2
 801338a:	461e      	mov	r6, r3
 801338c:	f004 f8fe 	bl	801758c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013390:	2800      	cmp	r0, #0
 8013392:	f000 809d 	beq.w	80134d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013396:	6823      	ldr	r3, [r4, #0]
 8013398:	4620      	mov	r0, r4
 801339a:	f8df b198 	ldr.w	fp, [pc, #408]	; 8013534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801339e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80133a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133a4:	4798      	blx	r3
 80133a6:	6823      	ldr	r3, [r4, #0]
 80133a8:	4620      	mov	r0, r4
 80133aa:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80133ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b0:	4798      	blx	r3
 80133b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80133b6:	4f5c      	ldr	r7, [pc, #368]	; (8013528 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	f8ba 3000 	ldrh.w	r3, [sl]
 80133be:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80133c2:	4640      	mov	r0, r8
 80133c4:	9302      	str	r3, [sp, #8]
 80133c6:	883b      	ldrh	r3, [r7, #0]
 80133c8:	9303      	str	r3, [sp, #12]
 80133ca:	4b58      	ldr	r3, [pc, #352]	; (801352c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80133cc:	881a      	ldrh	r2, [r3, #0]
 80133ce:	9305      	str	r3, [sp, #20]
 80133d0:	9204      	str	r2, [sp, #16]
 80133d2:	f004 f96f 	bl	80176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80133d6:	8038      	strh	r0, [r7, #0]
 80133d8:	4640      	mov	r0, r8
 80133da:	f004 f99f 	bl	801771c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80133de:	9b05      	ldr	r3, [sp, #20]
 80133e0:	b280      	uxth	r0, r0
 80133e2:	8018      	strh	r0, [r3, #0]
 80133e4:	4b52      	ldr	r3, [pc, #328]	; (8013530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d174      	bne.n	80134d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80133ec:	883b      	ldrh	r3, [r7, #0]
 80133ee:	f8aa 0000 	strh.w	r0, [sl]
 80133f2:	f8ab 3000 	strh.w	r3, [fp]
 80133f6:	4648      	mov	r0, r9
 80133f8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80133fc:	f004 f8c6 	bl	801758c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013400:	2200      	movs	r2, #0
 8013402:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013406:	4611      	mov	r1, r2
 8013408:	4628      	mov	r0, r5
 801340a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801340e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013412:	f7f1 fcde 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
 8013416:	2301      	movs	r3, #1
 8013418:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801341c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013420:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013424:	2b00      	cmp	r3, #0
 8013426:	dd5c      	ble.n	80134e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013428:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801342c:	2b00      	cmp	r3, #0
 801342e:	dd58      	ble.n	80134e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013430:	462a      	mov	r2, r5
 8013432:	ab0a      	add	r3, sp, #40	; 0x28
 8013434:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013438:	6851      	ldr	r1, [r2, #4]
 801343a:	c303      	stmia	r3!, {r0, r1}
 801343c:	4631      	mov	r1, r6
 801343e:	a80a      	add	r0, sp, #40	; 0x28
 8013440:	f7ff fbfe 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8013444:	4b38      	ldr	r3, [pc, #224]	; (8013528 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013446:	2100      	movs	r1, #0
 8013448:	f9b3 2000 	ldrsh.w	r2, [r3]
 801344c:	4b37      	ldr	r3, [pc, #220]	; (801352c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801344e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013452:	aa0a      	add	r2, sp, #40	; 0x28
 8013454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013458:	910c      	str	r1, [sp, #48]	; 0x30
 801345a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801345e:	ab08      	add	r3, sp, #32
 8013460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013464:	e883 0003 	stmia.w	r3, {r0, r1}
 8013468:	4618      	mov	r0, r3
 801346a:	a90c      	add	r1, sp, #48	; 0x30
 801346c:	f7ff fbe8 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8013470:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013472:	2b00      	cmp	r3, #0
 8013474:	d13c      	bne.n	80134f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013476:	2000      	movs	r0, #0
 8013478:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801347c:	2600      	movs	r6, #0
 801347e:	696b      	ldr	r3, [r5, #20]
 8013480:	a908      	add	r1, sp, #32
 8013482:	682a      	ldr	r2, [r5, #0]
 8013484:	4628      	mov	r0, r5
 8013486:	9305      	str	r3, [sp, #20]
 8013488:	616e      	str	r6, [r5, #20]
 801348a:	6892      	ldr	r2, [r2, #8]
 801348c:	4790      	blx	r2
 801348e:	9b05      	ldr	r3, [sp, #20]
 8013490:	4652      	mov	r2, sl
 8013492:	4649      	mov	r1, r9
 8013494:	616b      	str	r3, [r5, #20]
 8013496:	4628      	mov	r0, r5
 8013498:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801349c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80134a0:	f7f1 fc97 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
 80134a4:	9a01      	ldr	r2, [sp, #4]
 80134a6:	4b23      	ldr	r3, [pc, #140]	; (8013534 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80134a8:	4620      	mov	r0, r4
 80134aa:	801a      	strh	r2, [r3, #0]
 80134ac:	9a02      	ldr	r2, [sp, #8]
 80134ae:	4b22      	ldr	r3, [pc, #136]	; (8013538 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80134b0:	801a      	strh	r2, [r3, #0]
 80134b2:	9a03      	ldr	r2, [sp, #12]
 80134b4:	4b1c      	ldr	r3, [pc, #112]	; (8013528 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80134b6:	801a      	strh	r2, [r3, #0]
 80134b8:	4b1c      	ldr	r3, [pc, #112]	; (801352c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80134ba:	9a04      	ldr	r2, [sp, #16]
 80134bc:	801a      	strh	r2, [r3, #0]
 80134be:	6823      	ldr	r3, [r4, #0]
 80134c0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80134c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134c6:	4798      	blx	r3
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	4620      	mov	r0, r4
 80134cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ce:	4798      	blx	r3
 80134d0:	b00f      	add	sp, #60	; 0x3c
 80134d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134d6:	883b      	ldrh	r3, [r7, #0]
 80134d8:	f8ab 0000 	strh.w	r0, [fp]
 80134dc:	f8aa 3000 	strh.w	r3, [sl]
 80134e0:	e789      	b.n	80133f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80134e2:	462a      	mov	r2, r5
 80134e4:	ab0a      	add	r3, sp, #40	; 0x28
 80134e6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80134ea:	6851      	ldr	r1, [r2, #4]
 80134ec:	c303      	stmia	r3!, {r0, r1}
 80134ee:	e7a9      	b.n	8013444 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80134f0:	a807      	add	r0, sp, #28
 80134f2:	f004 fa4f 	bl	8017994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80134f6:	4606      	mov	r6, r0
 80134f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80134fa:	6803      	ldr	r3, [r0, #0]
 80134fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fe:	4798      	blx	r3
 8013500:	4286      	cmp	r6, r0
 8013502:	d1b8      	bne.n	8013476 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013504:	f7f0 fc66 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8013508:	6803      	ldr	r3, [r0, #0]
 801350a:	4606      	mov	r6, r0
 801350c:	a807      	add	r0, sp, #28
 801350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013510:	9305      	str	r3, [sp, #20]
 8013512:	f004 fa3f 	bl	8017994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013516:	9b05      	ldr	r3, [sp, #20]
 8013518:	4601      	mov	r1, r0
 801351a:	4630      	mov	r0, r6
 801351c:	4798      	blx	r3
 801351e:	f080 0001 	eor.w	r0, r0, #1
 8013522:	b2c0      	uxtb	r0, r0
 8013524:	e7a8      	b.n	8013478 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013526:	bf00      	nop
 8013528:	2400ae68 	.word	0x2400ae68
 801352c:	2400ae6a 	.word	0x2400ae6a
 8013530:	2400ae6c 	.word	0x2400ae6c
 8013534:	2400ae6e 	.word	0x2400ae6e
 8013538:	2400ae70 	.word	0x2400ae70

0801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801353c:	4b07      	ldr	r3, [pc, #28]	; (801355c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801353e:	b510      	push	{r4, lr}
 8013540:	781b      	ldrb	r3, [r3, #0]
 8013542:	4604      	mov	r4, r0
 8013544:	b13b      	cbz	r3, 8013556 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013546:	6803      	ldr	r3, [r0, #0]
 8013548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801354a:	4798      	blx	r3
 801354c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801354e:	4283      	cmp	r3, r0
 8013550:	d101      	bne.n	8013556 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013552:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013554:	bd10      	pop	{r4, pc}
 8013556:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013558:	e7fc      	b.n	8013554 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801355a:	bf00      	nop
 801355c:	2400ae72 	.word	0x2400ae72

08013560 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013564:	461d      	mov	r5, r3
 8013566:	b08a      	sub	sp, #40	; 0x28
 8013568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801356c:	4690      	mov	r8, r2
 801356e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013572:	2400      	movs	r4, #0
 8013574:	4607      	mov	r7, r0
 8013576:	fb06 8505 	mla	r5, r6, r5, r8
 801357a:	9404      	str	r4, [sp, #16]
 801357c:	f88d 4020 	strb.w	r4, [sp, #32]
 8013580:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013584:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013588:	f8ad 3018 	strh.w	r3, [sp, #24]
 801358c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013590:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013594:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013598:	f8ad 301c 	strh.w	r3, [sp, #28]
 801359c:	f7ff ffce 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80135a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80135aa:	a901      	add	r1, sp, #4
 80135ac:	9505      	str	r5, [sp, #20]
 80135ae:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80135b2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80135b6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80135ba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	4798      	blx	r3
 80135c4:	b00a      	add	sp, #40	; 0x28
 80135c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135ca <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80135ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135ce:	b08b      	sub	sp, #44	; 0x2c
 80135d0:	2400      	movs	r4, #0
 80135d2:	4691      	mov	r9, r2
 80135d4:	461d      	mov	r5, r3
 80135d6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80135da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135de:	4688      	mov	r8, r1
 80135e0:	4607      	mov	r7, r0
 80135e2:	9404      	str	r4, [sp, #16]
 80135e4:	fb06 9505 	mla	r5, r6, r5, r9
 80135e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135ec:	f7ff ffa6 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80135f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80135f4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80135fe:	a901      	add	r1, sp, #4
 8013600:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013604:	9505      	str	r5, [sp, #20]
 8013606:	f8ad 301a 	strh.w	r3, [sp, #26]
 801360a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801360e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013612:	f8cd 8010 	str.w	r8, [sp, #16]
 8013616:	f8ad 4020 	strh.w	r4, [sp, #32]
 801361a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801361e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013622:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013626:	6803      	ldr	r3, [r0, #0]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	4798      	blx	r3
 801362c:	b00b      	add	sp, #44	; 0x2c
 801362e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013634 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	b08a      	sub	sp, #40	; 0x28
 801363a:	4698      	mov	r8, r3
 801363c:	2300      	movs	r3, #0
 801363e:	4606      	mov	r6, r0
 8013640:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013644:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8013648:	2d0b      	cmp	r5, #11
 801364a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801364e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8013652:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8013656:	9304      	str	r3, [sp, #16]
 8013658:	d137      	bne.n	80136ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801365a:	2380      	movs	r3, #128	; 0x80
 801365c:	f88d 0020 	strb.w	r0, [sp, #32]
 8013660:	4630      	mov	r0, r6
 8013662:	9203      	str	r2, [sp, #12]
 8013664:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013668:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801366c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013670:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013674:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013678:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801367c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013680:	f7ff ff5c 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013684:	2c0b      	cmp	r4, #11
 8013686:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801368a:	f8ad 701e 	strh.w	r7, [sp, #30]
 801368e:	bf94      	ite	ls
 8013690:	4b19      	ldrls	r3, [pc, #100]	; (80136f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8013692:	2100      	movhi	r1, #0
 8013694:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8013698:	bf98      	it	ls
 801369a:	5d19      	ldrbls	r1, [r3, r4]
 801369c:	fb02 8307 	mla	r3, r2, r7, r8
 80136a0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80136a4:	10c9      	asrs	r1, r1, #3
 80136a6:	fb01 0003 	mla	r0, r1, r3, r0
 80136aa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80136ae:	a901      	add	r1, sp, #4
 80136b0:	9005      	str	r0, [sp, #20]
 80136b2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80136b6:	2300      	movs	r3, #0
 80136b8:	6870      	ldr	r0, [r6, #4]
 80136ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80136be:	6803      	ldr	r3, [r0, #0]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	4798      	blx	r3
 80136c4:	b00a      	add	sp, #40	; 0x28
 80136c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ca:	2d02      	cmp	r5, #2
 80136cc:	d109      	bne.n	80136e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80136ce:	28ff      	cmp	r0, #255	; 0xff
 80136d0:	d105      	bne.n	80136de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80136d2:	f1bc 0f00 	cmp.w	ip, #0
 80136d6:	bf14      	ite	ne
 80136d8:	2340      	movne	r3, #64	; 0x40
 80136da:	2320      	moveq	r3, #32
 80136dc:	e7be      	b.n	801365c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80136de:	2340      	movs	r3, #64	; 0x40
 80136e0:	e7bc      	b.n	801365c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80136e2:	28ff      	cmp	r0, #255	; 0xff
 80136e4:	d105      	bne.n	80136f2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80136e6:	f1bc 0f00 	cmp.w	ip, #0
 80136ea:	bf14      	ite	ne
 80136ec:	2304      	movne	r3, #4
 80136ee:	2301      	moveq	r3, #1
 80136f0:	e7b4      	b.n	801365c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80136f2:	2304      	movs	r3, #4
 80136f4:	e7b2      	b.n	801365c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80136f6:	bf00      	nop
 80136f8:	08025b48 	.word	0x08025b48

080136fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	b08b      	sub	sp, #44	; 0x2c
 8013702:	461d      	mov	r5, r3
 8013704:	2400      	movs	r4, #0
 8013706:	4688      	mov	r8, r1
 8013708:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801370c:	4693      	mov	fp, r2
 801370e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8013712:	4607      	mov	r7, r0
 8013714:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013718:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801371c:	9404      	str	r4, [sp, #16]
 801371e:	bf14      	ite	ne
 8013720:	2308      	movne	r3, #8
 8013722:	2302      	moveq	r3, #2
 8013724:	fb05 b50a 	mla	r5, r5, sl, fp
 8013728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801372c:	f7ff ff06 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013730:	2e0b      	cmp	r6, #11
 8013732:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013736:	a901      	add	r1, sp, #4
 8013738:	bf98      	it	ls
 801373a:	4b13      	ldrls	r3, [pc, #76]	; (8013788 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801373c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013740:	bf98      	it	ls
 8013742:	5d9c      	ldrbls	r4, [r3, r6]
 8013744:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013748:	10e4      	asrs	r4, r4, #3
 801374a:	f8cd 8010 	str.w	r8, [sp, #16]
 801374e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013752:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013756:	fb04 0405 	mla	r4, r4, r5, r0
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013760:	2300      	movs	r3, #0
 8013762:	9405      	str	r4, [sp, #20]
 8013764:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013768:	f88d 9020 	strb.w	r9, [sp, #32]
 801376c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013770:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013774:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013778:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801377c:	6803      	ldr	r3, [r0, #0]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	4798      	blx	r3
 8013782:	b00b      	add	sp, #44	; 0x2c
 8013784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013788:	08025b48 	.word	0x08025b48

0801378c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801378c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013790:	461e      	mov	r6, r3
 8013792:	4b0a      	ldr	r3, [pc, #40]	; (80137bc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013794:	460f      	mov	r7, r1
 8013796:	4690      	mov	r8, r2
 8013798:	881d      	ldrh	r5, [r3, #0]
 801379a:	f7f0 fb1b 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 801379e:	6803      	ldr	r3, [r0, #0]
 80137a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a2:	4798      	blx	r3
 80137a4:	280b      	cmp	r0, #11
 80137a6:	bf96      	itet	ls
 80137a8:	4b05      	ldrls	r3, [pc, #20]	; (80137c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80137aa:	2400      	movhi	r4, #0
 80137ac:	5c1c      	ldrbls	r4, [r3, r0]
 80137ae:	fb08 7005 	mla	r0, r8, r5, r7
 80137b2:	10e4      	asrs	r4, r4, #3
 80137b4:	fb04 6000 	mla	r0, r4, r0, r6
 80137b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137bc:	2400ae6e 	.word	0x2400ae6e
 80137c0:	08025b48 	.word	0x08025b48

080137c4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80137c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137c6:	b08b      	sub	sp, #44	; 0x2c
 80137c8:	461f      	mov	r7, r3
 80137ca:	4604      	mov	r4, r0
 80137cc:	4616      	mov	r6, r2
 80137ce:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80137d2:	2500      	movs	r5, #0
 80137d4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80137d8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80137dc:	9504      	str	r5, [sp, #16]
 80137de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80137e2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80137e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80137ea:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80137ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80137f2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80137f6:	f88d 3020 	strb.w	r3, [sp, #32]
 80137fa:	f7ff fe9f 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137fe:	463a      	mov	r2, r7
 8013800:	4631      	mov	r1, r6
 8013802:	4603      	mov	r3, r0
 8013804:	4620      	mov	r0, r4
 8013806:	f7ff ffc1 	bl	801378c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801380a:	4b0e      	ldr	r3, [pc, #56]	; (8013844 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801380c:	9005      	str	r0, [sp, #20]
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013814:	f7f0 fade 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8013818:	6803      	ldr	r3, [r0, #0]
 801381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801381c:	4798      	blx	r3
 801381e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013820:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013824:	a901      	add	r1, sp, #4
 8013826:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801382a:	9304      	str	r3, [sp, #16]
 801382c:	6860      	ldr	r0, [r4, #4]
 801382e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013832:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013836:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801383a:	6803      	ldr	r3, [r0, #0]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	4798      	blx	r3
 8013840:	b00b      	add	sp, #44	; 0x2c
 8013842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013844:	2400ae6e 	.word	0x2400ae6e

08013848 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801384a:	b08d      	sub	sp, #52	; 0x34
 801384c:	2501      	movs	r5, #1
 801384e:	4604      	mov	r4, r0
 8013850:	466b      	mov	r3, sp
 8013852:	9503      	str	r5, [sp, #12]
 8013854:	e883 0006 	stmia.w	r3, {r1, r2}
 8013858:	2300      	movs	r3, #0
 801385a:	f8bd 6000 	ldrh.w	r6, [sp]
 801385e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013862:	9306      	str	r3, [sp, #24]
 8013864:	6803      	ldr	r3, [r0, #0]
 8013866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013868:	4798      	blx	r3
 801386a:	463a      	mov	r2, r7
 801386c:	4631      	mov	r1, r6
 801386e:	4603      	mov	r3, r0
 8013870:	4620      	mov	r0, r4
 8013872:	f7ff ff8b 	bl	801378c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013878:	9004      	str	r0, [sp, #16]
 801387a:	9307      	str	r3, [sp, #28]
 801387c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013880:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013884:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013888:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801388c:	4b0e      	ldr	r3, [pc, #56]	; (80138c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801388e:	881b      	ldrh	r3, [r3, #0]
 8013890:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013894:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013898:	f7f0 fa9c 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 801389c:	6803      	ldr	r3, [r0, #0]
 801389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a0:	4798      	blx	r3
 80138a2:	23ff      	movs	r3, #255	; 0xff
 80138a4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80138a8:	a903      	add	r1, sp, #12
 80138aa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80138ae:	6860      	ldr	r0, [r4, #4]
 80138b0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80138b4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80138b8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80138bc:	6803      	ldr	r3, [r0, #0]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	4798      	blx	r3
 80138c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80138c4:	b00d      	add	sp, #52	; 0x34
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	2400ae6e 	.word	0x2400ae6e

080138cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80138cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d0:	b08c      	sub	sp, #48	; 0x30
 80138d2:	461e      	mov	r6, r3
 80138d4:	2300      	movs	r3, #0
 80138d6:	4604      	mov	r4, r0
 80138d8:	466d      	mov	r5, sp
 80138da:	9306      	str	r3, [sp, #24]
 80138dc:	6803      	ldr	r3, [r0, #0]
 80138de:	e885 0006 	stmia.w	r5, {r1, r2}
 80138e2:	2501      	movs	r5, #1
 80138e4:	f8bd 7000 	ldrh.w	r7, [sp]
 80138e8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80138ec:	9503      	str	r5, [sp, #12]
 80138ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f0:	4798      	blx	r3
 80138f2:	4642      	mov	r2, r8
 80138f4:	4639      	mov	r1, r7
 80138f6:	4603      	mov	r3, r0
 80138f8:	4620      	mov	r0, r4
 80138fa:	f7ff ff47 	bl	801378c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80138fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013902:	9004      	str	r0, [sp, #16]
 8013904:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013908:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801390c:	9607      	str	r6, [sp, #28]
 801390e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013912:	4b10      	ldr	r3, [pc, #64]	; (8013954 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013914:	881b      	ldrh	r3, [r3, #0]
 8013916:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801391a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801391c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013920:	f7f0 fa58 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 8013924:	6803      	ldr	r3, [r0, #0]
 8013926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013928:	4798      	blx	r3
 801392a:	23ff      	movs	r3, #255	; 0xff
 801392c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013930:	a903      	add	r1, sp, #12
 8013932:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013936:	6860      	ldr	r0, [r4, #4]
 8013938:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801393c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013940:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013944:	6803      	ldr	r3, [r0, #0]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	4798      	blx	r3
 801394a:	4630      	mov	r0, r6
 801394c:	b00c      	add	sp, #48	; 0x30
 801394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013952:	bf00      	nop
 8013954:	2400ae6e 	.word	0x2400ae6e

08013958 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801395a:	b085      	sub	sp, #20
 801395c:	4605      	mov	r5, r0
 801395e:	ac02      	add	r4, sp, #8
 8013960:	e884 0006 	stmia.w	r4, {r1, r2}
 8013964:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013968:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801396c:	f7ff fde6 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013970:	4631      	mov	r1, r6
 8013972:	4603      	mov	r3, r0
 8013974:	463a      	mov	r2, r7
 8013976:	4628      	mov	r0, r5
 8013978:	f7ff ff08 	bl	801378c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801397c:	4a05      	ldr	r2, [pc, #20]	; (8013994 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801397e:	682b      	ldr	r3, [r5, #0]
 8013980:	8812      	ldrh	r2, [r2, #0]
 8013982:	9200      	str	r2, [sp, #0]
 8013984:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013986:	4603      	mov	r3, r0
 8013988:	4628      	mov	r0, r5
 801398a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801398e:	47b0      	blx	r6
 8013990:	b005      	add	sp, #20
 8013992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013994:	2400ae6e 	.word	0x2400ae6e

08013998 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801399e:	4604      	mov	r4, r0
 80139a0:	b19b      	cbz	r3, 80139ca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80139a2:	2002      	movs	r0, #2
 80139a4:	f7ed ffc4 	bl	8001930 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80139a8:	2300      	movs	r3, #0
 80139aa:	4620      	mov	r0, r4
 80139ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80139b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80139b4:	6823      	ldr	r3, [r4, #0]
 80139b6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80139ba:	f7ff fdbf 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80139be:	4601      	mov	r1, r0
 80139c0:	4620      	mov	r0, r4
 80139c2:	462b      	mov	r3, r5
 80139c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139c8:	4718      	bx	r3
 80139ca:	bd70      	pop	{r4, r5, r6, pc}

080139cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80139d2:	4604      	mov	r4, r0
 80139d4:	460d      	mov	r5, r1
 80139d6:	428b      	cmp	r3, r1
 80139d8:	d006      	beq.n	80139e8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80139da:	6803      	ldr	r3, [r0, #0]
 80139dc:	b929      	cbnz	r1, 80139ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80139de:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80139e2:	4798      	blx	r3
 80139e4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80139e8:	bd38      	pop	{r3, r4, r5, pc}
 80139ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80139ee:	e7f8      	b.n	80139e2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080139f0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80139f0:	4b0d      	ldr	r3, [pc, #52]	; (8013a28 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80139f2:	b510      	push	{r4, lr}
 80139f4:	781b      	ldrb	r3, [r3, #0]
 80139f6:	4604      	mov	r4, r0
 80139f8:	b95b      	cbnz	r3, 8013a12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80139fa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80139fe:	2b02      	cmp	r3, #2
 8013a00:	d007      	beq.n	8013a12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013a02:	6840      	ldr	r0, [r0, #4]
 8013a04:	f000 f90e 	bl	8013c24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013a08:	b118      	cbz	r0, 8013a12 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013a0a:	6862      	ldr	r2, [r4, #4]
 8013a0c:	7a53      	ldrb	r3, [r2, #9]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0fc      	beq.n	8013a0c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013a12:	f7ee fa73 	bl	8001efc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013a16:	4620      	mov	r0, r4
 8013a18:	2100      	movs	r1, #0
 8013a1a:	f7ff ffd7 	bl	80139cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f7ff fd8c 	bl	801353c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a24:	bd10      	pop	{r4, pc}
 8013a26:	bf00      	nop
 8013a28:	2400ae72 	.word	0x2400ae72

08013a2c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013a2c:	4770      	bx	lr

08013a2e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013a2e:	2000      	movs	r0, #0
 8013a30:	4770      	bx	lr

08013a32 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013a32:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013a36:	1a13      	subs	r3, r2, r0
 8013a38:	4258      	negs	r0, r3
 8013a3a:	4158      	adcs	r0, r3
 8013a3c:	4770      	bx	lr

08013a3e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013a3e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013a42:	1a9b      	subs	r3, r3, r2
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	bfdc      	itt	le
 8013a48:	6882      	ldrle	r2, [r0, #8]
 8013a4a:	189b      	addle	r3, r3, r2
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	bfcc      	ite	gt
 8013a50:	2000      	movgt	r0, #0
 8013a52:	2001      	movle	r0, #1
 8013a54:	4770      	bx	lr

08013a56 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013a56:	6902      	ldr	r2, [r0, #16]
 8013a58:	6843      	ldr	r3, [r0, #4]
 8013a5a:	2024      	movs	r0, #36	; 0x24
 8013a5c:	fb00 3002 	mla	r0, r0, r2, r3
 8013a60:	4770      	bx	lr

08013a62 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013a62:	6803      	ldr	r3, [r0, #0]
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	4718      	bx	r3

08013a68 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013a68:	2301      	movs	r3, #1
 8013a6a:	b570      	push	{r4, r5, r6, lr}
 8013a6c:	7203      	strb	r3, [r0, #8]
 8013a6e:	4604      	mov	r4, r0
 8013a70:	6840      	ldr	r0, [r0, #4]
 8013a72:	6803      	ldr	r3, [r0, #0]
 8013a74:	699b      	ldr	r3, [r3, #24]
 8013a76:	4798      	blx	r3
 8013a78:	6803      	ldr	r3, [r0, #0]
 8013a7a:	4605      	mov	r5, r0
 8013a7c:	2b40      	cmp	r3, #64	; 0x40
 8013a7e:	d00c      	beq.n	8013a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013a80:	d810      	bhi.n	8013aa4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013a82:	2b04      	cmp	r3, #4
 8013a84:	d01d      	beq.n	8013ac2 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013a86:	d804      	bhi.n	8013a92 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d006      	beq.n	8013a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013a8c:	2b02      	cmp	r3, #2
 8013a8e:	d02c      	beq.n	8013aea <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013a90:	bd70      	pop	{r4, r5, r6, pc}
 8013a92:	2b08      	cmp	r3, #8
 8013a94:	d01d      	beq.n	8013ad2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013a96:	2b20      	cmp	r3, #32
 8013a98:	d1fa      	bne.n	8013a90 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013a9a:	6823      	ldr	r3, [r4, #0]
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013aa0:	4798      	blx	r3
 8013aa2:	e013      	b.n	8013acc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013aa8:	d0f7      	beq.n	8013a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013aaa:	d804      	bhi.n	8013ab6 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013aac:	2b80      	cmp	r3, #128	; 0x80
 8013aae:	d0f4      	beq.n	8013a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ab4:	e7f0      	b.n	8013a98 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013aba:	d0ee      	beq.n	8013a9a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ac0:	e7e5      	b.n	8013a8e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013ac2:	6823      	ldr	r3, [r4, #0]
 8013ac4:	7f01      	ldrb	r1, [r0, #28]
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aca:	4798      	blx	r3
 8013acc:	6823      	ldr	r3, [r4, #0]
 8013ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ad0:	e006      	b.n	8013ae0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013ad2:	6823      	ldr	r3, [r4, #0]
 8013ad4:	7f01      	ldrb	r1, [r0, #28]
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ada:	4798      	blx	r3
 8013adc:	6823      	ldr	r3, [r4, #0]
 8013ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ae0:	4629      	mov	r1, r5
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ae8:	4718      	bx	r3
 8013aea:	6823      	ldr	r3, [r4, #0]
 8013aec:	4620      	mov	r0, r4
 8013aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013af0:	4798      	blx	r3
 8013af2:	e7f3      	b.n	8013adc <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013af4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013af4:	4770      	bx	lr

08013af6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013af6:	4770      	bx	lr

08013af8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013af8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013afc:	b510      	push	{r4, lr}
 8013afe:	1ad2      	subs	r2, r2, r3
 8013b00:	2a00      	cmp	r2, #0
 8013b02:	bfdc      	itt	le
 8013b04:	6884      	ldrle	r4, [r0, #8]
 8013b06:	1912      	addle	r2, r2, r4
 8013b08:	2a01      	cmp	r2, #1
 8013b0a:	dd16      	ble.n	8013b3a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013b0c:	6842      	ldr	r2, [r0, #4]
 8013b0e:	2424      	movs	r4, #36	; 0x24
 8013b10:	fb04 2303 	mla	r3, r4, r3, r2
 8013b14:	f101 0220 	add.w	r2, r1, #32
 8013b18:	f851 4b04 	ldr.w	r4, [r1], #4
 8013b1c:	4291      	cmp	r1, r2
 8013b1e:	f843 4b04 	str.w	r4, [r3], #4
 8013b22:	d1f9      	bne.n	8013b18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013b24:	780a      	ldrb	r2, [r1, #0]
 8013b26:	701a      	strb	r2, [r3, #0]
 8013b28:	68c3      	ldr	r3, [r0, #12]
 8013b2a:	6882      	ldr	r2, [r0, #8]
 8013b2c:	f3bf 8f5b 	dmb	ish
 8013b30:	3301      	adds	r3, #1
 8013b32:	429a      	cmp	r2, r3
 8013b34:	bfd8      	it	le
 8013b36:	1a9b      	suble	r3, r3, r2
 8013b38:	60c3      	str	r3, [r0, #12]
 8013b3a:	bd10      	pop	{r4, pc}

08013b3c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013b3c:	6903      	ldr	r3, [r0, #16]
 8013b3e:	6882      	ldr	r2, [r0, #8]
 8013b40:	f3bf 8f5b 	dmb	ish
 8013b44:	3301      	adds	r3, #1
 8013b46:	429a      	cmp	r2, r3
 8013b48:	bfd8      	it	le
 8013b4a:	1a9b      	suble	r3, r3, r2
 8013b4c:	6103      	str	r3, [r0, #16]
 8013b4e:	4770      	bx	lr

08013b50 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013b50:	b570      	push	{r4, r5, r6, lr}
 8013b52:	4604      	mov	r4, r0
 8013b54:	460e      	mov	r6, r1
 8013b56:	6860      	ldr	r0, [r4, #4]
 8013b58:	6803      	ldr	r3, [r0, #0]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	4798      	blx	r3
 8013b5e:	2800      	cmp	r0, #0
 8013b60:	d1f9      	bne.n	8013b56 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013b62:	4d0d      	ldr	r5, [pc, #52]	; (8013b98 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013b64:	6828      	ldr	r0, [r5, #0]
 8013b66:	6803      	ldr	r3, [r0, #0]
 8013b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b6a:	4798      	blx	r3
 8013b6c:	f7ee f9e0 	bl	8001f30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013b70:	6828      	ldr	r0, [r5, #0]
 8013b72:	2101      	movs	r1, #1
 8013b74:	f7ff ff2a 	bl	80139cc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013b78:	6860      	ldr	r0, [r4, #4]
 8013b7a:	4631      	mov	r1, r6
 8013b7c:	6803      	ldr	r3, [r0, #0]
 8013b7e:	689b      	ldr	r3, [r3, #8]
 8013b80:	4798      	blx	r3
 8013b82:	6823      	ldr	r3, [r4, #0]
 8013b84:	4620      	mov	r0, r4
 8013b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b88:	4798      	blx	r3
 8013b8a:	6828      	ldr	r0, [r5, #0]
 8013b8c:	6803      	ldr	r3, [r0, #0]
 8013b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b94:	4718      	bx	r3
 8013b96:	bf00      	nop
 8013b98:	2400ae74 	.word	0x2400ae74

08013b9c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013b9c:	b508      	push	{r3, lr}
 8013b9e:	f7ee f9ad 	bl	8001efc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013ba6:	f7ee b9b7 	b.w	8001f18 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013baa <_ZN8touchgfx13DMA_Interface5startEv>:
 8013baa:	b510      	push	{r4, lr}
 8013bac:	4604      	mov	r4, r0
 8013bae:	6840      	ldr	r0, [r0, #4]
 8013bb0:	6803      	ldr	r3, [r0, #0]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	4798      	blx	r3
 8013bb6:	b948      	cbnz	r0, 8013bcc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013bb8:	7a63      	ldrb	r3, [r4, #9]
 8013bba:	b13b      	cbz	r3, 8013bcc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013bbc:	7a23      	ldrb	r3, [r4, #8]
 8013bbe:	b92b      	cbnz	r3, 8013bcc <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013bc0:	6823      	ldr	r3, [r4, #0]
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bca:	4718      	bx	r3
 8013bcc:	bd10      	pop	{r4, pc}

08013bce <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013bce:	b570      	push	{r4, r5, r6, lr}
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	6840      	ldr	r0, [r0, #4]
 8013bd4:	6803      	ldr	r3, [r0, #0]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4798      	blx	r3
 8013bda:	4605      	mov	r5, r0
 8013bdc:	b930      	cbnz	r0, 8013bec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013bde:	7a23      	ldrb	r3, [r4, #8]
 8013be0:	b123      	cbz	r3, 8013bec <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013be2:	6860      	ldr	r0, [r4, #4]
 8013be4:	6803      	ldr	r3, [r0, #0]
 8013be6:	695b      	ldr	r3, [r3, #20]
 8013be8:	4798      	blx	r3
 8013bea:	7225      	strb	r5, [r4, #8]
 8013bec:	6860      	ldr	r0, [r4, #4]
 8013bee:	6803      	ldr	r3, [r0, #0]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4798      	blx	r3
 8013bf4:	b928      	cbnz	r0, 8013c02 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	4620      	mov	r0, r4
 8013bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c00:	4718      	bx	r3
 8013c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c06:	f7ee b99f 	b.w	8001f48 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013c0c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013c0c:	b510      	push	{r4, lr}
 8013c0e:	6082      	str	r2, [r0, #8]
 8013c10:	2200      	movs	r2, #0
 8013c12:	4c03      	ldr	r4, [pc, #12]	; (8013c20 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013c14:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013c18:	e9c0 4100 	strd	r4, r1, [r0]
 8013c1c:	bd10      	pop	{r4, pc}
 8013c1e:	bf00      	nop
 8013c20:	08025c84 	.word	0x08025c84

08013c24 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013c24:	6840      	ldr	r0, [r0, #4]
 8013c26:	6803      	ldr	r3, [r0, #0]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	4718      	bx	r3

08013c2c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013c2c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013c30:	4770      	bx	lr

08013c32 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013c32:	b510      	push	{r4, lr}
 8013c34:	4604      	mov	r4, r0
 8013c36:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013c38:	b150      	cbz	r0, 8013c50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013c3a:	6803      	ldr	r3, [r0, #0]
 8013c3c:	68db      	ldr	r3, [r3, #12]
 8013c3e:	4798      	blx	r3
 8013c40:	b130      	cbz	r0, 8013c50 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013c42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013c44:	4621      	mov	r1, r4
 8013c46:	6803      	ldr	r3, [r0, #0]
 8013c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c4c:	689b      	ldr	r3, [r3, #8]
 8013c4e:	4718      	bx	r3
 8013c50:	bd10      	pop	{r4, pc}

08013c52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013c52:	790b      	ldrb	r3, [r1, #4]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	bf0c      	ite	eq
 8013c58:	2301      	moveq	r3, #1
 8013c5a:	2300      	movne	r3, #0
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	4604      	mov	r4, r0
 8013c60:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013c64:	460e      	mov	r6, r1
 8013c66:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8013c6a:	d109      	bne.n	8013c80 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013c6c:	b14d      	cbz	r5, 8013c82 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013c6e:	7933      	ldrb	r3, [r6, #4]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d10c      	bne.n	8013c8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013c74:	6823      	ldr	r3, [r4, #0]
 8013c76:	4620      	mov	r0, r4
 8013c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c7e:	4718      	bx	r3
 8013c80:	b12d      	cbz	r5, 8013c8e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013c82:	6823      	ldr	r3, [r4, #0]
 8013c84:	4620      	mov	r0, r4
 8013c86:	695b      	ldr	r3, [r3, #20]
 8013c88:	4798      	blx	r3
 8013c8a:	2d00      	cmp	r5, #0
 8013c8c:	d1ef      	bne.n	8013c6e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013c8e:	bd70      	pop	{r4, r5, r6, pc}

08013c90 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013c90:	2300      	movs	r3, #0
 8013c92:	8083      	strh	r3, [r0, #4]
 8013c94:	80c3      	strh	r3, [r0, #6]
 8013c96:	8003      	strh	r3, [r0, #0]
 8013c98:	8043      	strh	r3, [r0, #2]
 8013c9a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013c9e:	2bff      	cmp	r3, #255	; 0xff
 8013ca0:	bf01      	itttt	eq
 8013ca2:	890b      	ldrheq	r3, [r1, #8]
 8013ca4:	8083      	strheq	r3, [r0, #4]
 8013ca6:	894b      	ldrheq	r3, [r1, #10]
 8013ca8:	80c3      	strheq	r3, [r0, #6]
 8013caa:	4770      	bx	lr

08013cac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cae:	4604      	mov	r4, r0
 8013cb0:	466b      	mov	r3, sp
 8013cb2:	6808      	ldr	r0, [r1, #0]
 8013cb4:	6849      	ldr	r1, [r1, #4]
 8013cb6:	c303      	stmia	r3!, {r0, r1}
 8013cb8:	6823      	ldr	r3, [r4, #0]
 8013cba:	4669      	mov	r1, sp
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cc0:	4798      	blx	r3
 8013cc2:	4b08      	ldr	r3, [pc, #32]	; (8013ce4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013cca:	b10a      	cbz	r2, 8013cd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013ccc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013cce:	b900      	cbnz	r0, 8013cd2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013cd0:	6898      	ldr	r0, [r3, #8]
 8013cd2:	6803      	ldr	r3, [r0, #0]
 8013cd4:	4669      	mov	r1, sp
 8013cd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013cd8:	6a1d      	ldr	r5, [r3, #32]
 8013cda:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013cde:	47a8      	blx	r5
 8013ce0:	b003      	add	sp, #12
 8013ce2:	bd30      	pop	{r4, r5, pc}
 8013ce4:	2400ae74 	.word	0x2400ae74

08013ce8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013ce8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013cec:	b12a      	cbz	r2, 8013cfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013cee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013cf2:	b112      	cbz	r2, 8013cfa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013cf4:	6803      	ldr	r3, [r0, #0]
 8013cf6:	695b      	ldr	r3, [r3, #20]
 8013cf8:	4718      	bx	r3
 8013cfa:	4770      	bx	lr

08013cfc <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013cfc:	b570      	push	{r4, r5, r6, lr}
 8013cfe:	880b      	ldrh	r3, [r1, #0]
 8013d00:	4605      	mov	r5, r0
 8013d02:	4604      	mov	r4, r0
 8013d04:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013d06:	8813      	ldrh	r3, [r2, #0]
 8013d08:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f003 fcd1 	bl	80176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d12:	4606      	mov	r6, r0
 8013d14:	4628      	mov	r0, r5
 8013d16:	f003 fd01 	bl	801771c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d1a:	6823      	ldr	r3, [r4, #0]
 8013d1c:	4605      	mov	r5, r0
 8013d1e:	4631      	mov	r1, r6
 8013d20:	4620      	mov	r0, r4
 8013d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d24:	4798      	blx	r3
 8013d26:	6823      	ldr	r3, [r4, #0]
 8013d28:	4629      	mov	r1, r5
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d32:	4718      	bx	r3

08013d34 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013d34:	b510      	push	{r4, lr}
 8013d36:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	2bff      	cmp	r3, #255	; 0xff
 8013d3e:	d006      	beq.n	8013d4e <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013d40:	2300      	movs	r3, #0
 8013d42:	8003      	strh	r3, [r0, #0]
 8013d44:	8043      	strh	r3, [r0, #2]
 8013d46:	8083      	strh	r3, [r0, #4]
 8013d48:	80c3      	strh	r3, [r0, #6]
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	bd10      	pop	{r4, pc}
 8013d4e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8013d52:	b11b      	cbz	r3, 8013d5c <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013d54:	3130      	adds	r1, #48	; 0x30
 8013d56:	f003 fd15 	bl	8017784 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013d5a:	e7f6      	b.n	8013d4a <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013d5c:	312e      	adds	r1, #46	; 0x2e
 8013d5e:	e7fa      	b.n	8013d56 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013d60 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013d68:	b08a      	sub	sp, #40	; 0x28
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	4688      	mov	r8, r1
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d066      	beq.n	8013e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013d72:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013d74:	a805      	add	r0, sp, #20
 8013d76:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d7a:	f003 fc9b 	bl	80176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013d7e:	4607      	mov	r7, r0
 8013d80:	a805      	add	r0, sp, #20
 8013d82:	f003 fccb 	bl	801771c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013d86:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013d8a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013d8e:	2300      	movs	r3, #0
 8013d90:	4432      	add	r2, r6
 8013d92:	9306      	str	r3, [sp, #24]
 8013d94:	b292      	uxth	r2, r2
 8013d96:	fa0f fc82 	sxth.w	ip, r2
 8013d9a:	459c      	cmp	ip, r3
 8013d9c:	dd52      	ble.n	8013e44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013d9e:	42b7      	cmp	r7, r6
 8013da0:	dd50      	ble.n	8013e44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013da2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013da6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013daa:	442b      	add	r3, r5
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	b219      	sxth	r1, r3
 8013db0:	2900      	cmp	r1, #0
 8013db2:	dd47      	ble.n	8013e44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013db4:	42a8      	cmp	r0, r5
 8013db6:	dd45      	ble.n	8013e44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013db8:	4567      	cmp	r7, ip
 8013dba:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013dbe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013dc2:	bfb8      	it	lt
 8013dc4:	b2ba      	uxthlt	r2, r7
 8013dc6:	4288      	cmp	r0, r1
 8013dc8:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013dcc:	bfb8      	it	lt
 8013dce:	b283      	uxthlt	r3, r0
 8013dd0:	1b92      	subs	r2, r2, r6
 8013dd2:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013dd6:	1b5b      	subs	r3, r3, r5
 8013dd8:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013ddc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013de0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d026      	beq.n	8013e3a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013dec:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	dd22      	ble.n	8013e3a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013df4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	dd1e      	ble.n	8013e3a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	a908      	add	r1, sp, #32
 8013e00:	4620      	mov	r0, r4
 8013e02:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013e06:	6823      	ldr	r3, [r4, #0]
 8013e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0a:	4798      	blx	r3
 8013e0c:	4b0f      	ldr	r3, [pc, #60]	; (8013e4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013e14:	b10a      	cbz	r2, 8013e1a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013e16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013e18:	b900      	cbnz	r0, 8013e1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013e1a:	6898      	ldr	r0, [r3, #8]
 8013e1c:	2501      	movs	r5, #1
 8013e1e:	6801      	ldr	r1, [r0, #0]
 8013e20:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013e24:	9502      	str	r5, [sp, #8]
 8013e26:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013e2a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013e2e:	9401      	str	r4, [sp, #4]
 8013e30:	ac06      	add	r4, sp, #24
 8013e32:	9400      	str	r4, [sp, #0]
 8013e34:	688c      	ldr	r4, [r1, #8]
 8013e36:	a905      	add	r1, sp, #20
 8013e38:	47a0      	blx	r4
 8013e3a:	b00a      	add	sp, #40	; 0x28
 8013e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e40:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013e42:	e797      	b.n	8013d74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013e44:	2300      	movs	r3, #0
 8013e46:	9307      	str	r3, [sp, #28]
 8013e48:	e7ca      	b.n	8013de0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013e4a:	bf00      	nop
 8013e4c:	2400ae74 	.word	0x2400ae74

08013e50 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013e50:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8013e54:	b12a      	cbz	r2, 8013e62 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013e56:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013e5a:	b112      	cbz	r2, 8013e62 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013e5c:	6803      	ldr	r3, [r0, #0]
 8013e5e:	695b      	ldr	r3, [r3, #20]
 8013e60:	4718      	bx	r3
 8013e62:	4770      	bx	lr

08013e64 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013e64:	b510      	push	{r4, lr}
 8013e66:	6803      	ldr	r3, [r0, #0]
 8013e68:	460c      	mov	r4, r1
 8013e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e6c:	4798      	blx	r3
 8013e6e:	1b03      	subs	r3, r0, r4
 8013e70:	4258      	negs	r0, r3
 8013e72:	4158      	adcs	r0, r3
 8013e74:	bd10      	pop	{r4, pc}
	...

08013e78 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013e78:	4b01      	ldr	r3, [pc, #4]	; (8013e80 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013e7a:	6019      	str	r1, [r3, #0]
 8013e7c:	4770      	bx	lr
 8013e7e:	bf00      	nop
 8013e80:	2400ae7c 	.word	0x2400ae7c

08013e84 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e88:	4696      	mov	lr, r2
 8013e8a:	b097      	sub	sp, #92	; 0x5c
 8013e8c:	4605      	mov	r5, r0
 8013e8e:	4614      	mov	r4, r2
 8013e90:	460e      	mov	r6, r1
 8013e92:	461f      	mov	r7, r3
 8013e94:	f10d 0c1c 	add.w	ip, sp, #28
 8013e98:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013e9c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013ea0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013ea4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ea8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013eac:	f8de 3000 	ldr.w	r3, [lr]
 8013eb0:	f104 0e14 	add.w	lr, r4, #20
 8013eb4:	f8cc 3000 	str.w	r3, [ip]
 8013eb8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013ebc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ec0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ec4:	f8de 3000 	ldr.w	r3, [lr]
 8013ec8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013ecc:	f8cc 3000 	str.w	r3, [ip]
 8013ed0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013ed4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ed8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013edc:	f8de 3000 	ldr.w	r3, [lr]
 8013ee0:	4631      	mov	r1, r6
 8013ee2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013ee4:	4628      	mov	r0, r5
 8013ee6:	f8cc 3000 	str.w	r3, [ip]
 8013eea:	682b      	ldr	r3, [r5, #0]
 8013eec:	9201      	str	r2, [sp, #4]
 8013eee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013ef0:	f8cd 8008 	str.w	r8, [sp, #8]
 8013ef4:	9200      	str	r2, [sp, #0]
 8013ef6:	aa07      	add	r2, sp, #28
 8013ef8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013efc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8013f00:	463b      	mov	r3, r7
 8013f02:	47d8      	blx	fp
 8013f04:	46a6      	mov	lr, r4
 8013f06:	f10d 0c1c 	add.w	ip, sp, #28
 8013f0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f12:	f8de 3000 	ldr.w	r3, [lr]
 8013f16:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f1a:	343c      	adds	r4, #60	; 0x3c
 8013f1c:	f8cc 3000 	str.w	r3, [ip]
 8013f20:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f2c:	f8de 3000 	ldr.w	r3, [lr]
 8013f30:	f8cc 3000 	str.w	r3, [ip]
 8013f34:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f3e:	6823      	ldr	r3, [r4, #0]
 8013f40:	4631      	mov	r1, r6
 8013f42:	4628      	mov	r0, r5
 8013f44:	f8cc 3000 	str.w	r3, [ip]
 8013f48:	682b      	ldr	r3, [r5, #0]
 8013f4a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013f4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f50:	f8cd 8008 	str.w	r8, [sp, #8]
 8013f54:	9201      	str	r2, [sp, #4]
 8013f56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f58:	9200      	str	r2, [sp, #0]
 8013f5a:	aa07      	add	r2, sp, #28
 8013f5c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8013f5e:	463b      	mov	r3, r7
 8013f60:	47a0      	blx	r4
 8013f62:	b017      	add	sp, #92	; 0x5c
 8013f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013f68 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013f68:	2000      	movs	r0, #0
 8013f6a:	4770      	bx	lr

08013f6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8013f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f70:	b08d      	sub	sp, #52	; 0x34
 8013f72:	4688      	mov	r8, r1
 8013f74:	f8d3 c000 	ldr.w	ip, [r3]
 8013f78:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013f7a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8013f7e:	680f      	ldr	r7, [r1, #0]
 8013f80:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8013f84:	eba7 070c 	sub.w	r7, r7, ip
 8013f88:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8013f8c:	edd3 6a07 	vldr	s13, [r3, #28]
 8013f90:	42bc      	cmp	r4, r7
 8013f92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f94:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8013f98:	bfa8      	it	ge
 8013f9a:	463c      	movge	r4, r7
 8013f9c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013fa0:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013fa4:	ee07 4a90 	vmov	s15, r4
 8013fa8:	eb09 0e0c 	add.w	lr, r9, ip
 8013fac:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8013fb0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013fb4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013fb8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8013fbc:	4571      	cmp	r1, lr
 8013fbe:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013fc2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013fc6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013fca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fce:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8013fd2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8013fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013fda:	ee36 0a84 	vadd.f32	s0, s13, s8
 8013fde:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013fe2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013fe6:	f340 808c 	ble.w	8014102 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8013fea:	eba1 060e 	sub.w	r6, r1, lr
 8013fee:	fb96 f5f4 	sdiv	r5, r6, r4
 8013ff2:	ee07 5a10 	vmov	s14, r5
 8013ff6:	2d00      	cmp	r5, #0
 8013ff8:	fb04 6615 	mls	r6, r4, r5, r6
 8013ffc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014000:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014004:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014008:	eea7 1a05 	vfma.f32	s2, s14, s10
 801400c:	dd12      	ble.n	8014034 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801400e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014012:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014016:	ee31 2a45 	vsub.f32	s4, s2, s10
 801401a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014022:	bf14      	ite	ne
 8014024:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014028:	eeb0 7a67 	vmoveq.f32	s14, s15
 801402c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014030:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014034:	fb05 f204 	mul.w	r2, r5, r4
 8014038:	1abf      	subs	r7, r7, r2
 801403a:	4494      	add	ip, r2
 801403c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014040:	4411      	add	r1, r2
 8014042:	eb09 020c 	add.w	r2, r9, ip
 8014046:	b209      	sxth	r1, r1
 8014048:	443a      	add	r2, r7
 801404a:	428a      	cmp	r2, r1
 801404c:	bfc4      	itt	gt
 801404e:	eba1 0209 	subgt.w	r2, r1, r9
 8014052:	eba2 070c 	subgt.w	r7, r2, ip
 8014056:	2f00      	cmp	r7, #0
 8014058:	dd50      	ble.n	80140fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801405a:	fb97 f1f4 	sdiv	r1, r7, r4
 801405e:	fb04 7211 	mls	r2, r4, r1, r7
 8014062:	b90a      	cbnz	r2, 8014068 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014064:	3901      	subs	r1, #1
 8014066:	4622      	mov	r2, r4
 8014068:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801406c:	6840      	ldr	r0, [r0, #4]
 801406e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014072:	44b6      	add	lr, r6
 8014074:	f8d0 a000 	ldr.w	sl, [r0]
 8014078:	2900      	cmp	r1, #0
 801407a:	bfcc      	ite	gt
 801407c:	46a1      	movgt	r9, r4
 801407e:	4691      	movle	r9, r2
 8014080:	900b      	str	r0, [sp, #44]	; 0x2c
 8014082:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014084:	fb04 e505 	mla	r5, r4, r5, lr
 8014088:	eef0 6a42 	vmov.f32	s13, s4
 801408c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014090:	9008      	str	r0, [sp, #32]
 8014092:	eeb0 7a61 	vmov.f32	s14, s3
 8014096:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014098:	695b      	ldr	r3, [r3, #20]
 801409a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801409e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80140a2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80140a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80140a8:	445b      	add	r3, fp
 80140aa:	9307      	str	r3, [sp, #28]
 80140ac:	ee16 3a90 	vmov	r3, s13
 80140b0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80140b4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80140b8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80140bc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80140c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80140c4:	ee17 7a90 	vmov	r7, s15
 80140c8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80140cc:	fb97 f7f4 	sdiv	r7, r7, r4
 80140d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80140d4:	ee17 ca90 	vmov	ip, s15
 80140d8:	fb9c fcf4 	sdiv	ip, ip, r4
 80140dc:	fb0c 3306 	mla	r3, ip, r6, r3
 80140e0:	9302      	str	r3, [sp, #8]
 80140e2:	ee17 3a10 	vmov	r3, s14
 80140e6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80140ea:	fb07 3706 	mla	r7, r7, r6, r3
 80140ee:	eba9 0306 	sub.w	r3, r9, r6
 80140f2:	e9cd 4700 	strd	r4, r7, [sp]
 80140f6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80140fa:	47a0      	blx	r4
 80140fc:	b00d      	add	sp, #52	; 0x34
 80140fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014102:	2500      	movs	r5, #0
 8014104:	462e      	mov	r6, r5
 8014106:	e799      	b.n	801403c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801410c:	b0db      	sub	sp, #364	; 0x16c
 801410e:	461d      	mov	r5, r3
 8014110:	4614      	mov	r4, r2
 8014112:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014116:	910f      	str	r1, [sp, #60]	; 0x3c
 8014118:	4629      	mov	r1, r5
 801411a:	930a      	str	r3, [sp, #40]	; 0x28
 801411c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014120:	9009      	str	r0, [sp, #36]	; 0x24
 8014122:	930b      	str	r3, [sp, #44]	; 0x2c
 8014124:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014128:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801412c:	9310      	str	r3, [sp, #64]	; 0x40
 801412e:	6803      	ldr	r3, [r0, #0]
 8014130:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014136:	47b8      	blx	r7
 8014138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801413a:	6058      	str	r0, [r3, #4]
 801413c:	2800      	cmp	r0, #0
 801413e:	f000 83a1 	beq.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014142:	682b      	ldr	r3, [r5, #0]
 8014144:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014148:	ed94 7a02 	vldr	s14, [r4, #8]
 801414c:	9314      	str	r3, [sp, #80]	; 0x50
 801414e:	686b      	ldr	r3, [r5, #4]
 8014150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014154:	9315      	str	r3, [sp, #84]	; 0x54
 8014156:	4bc1      	ldr	r3, [pc, #772]	; (801445c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014158:	7819      	ldrb	r1, [r3, #0]
 801415a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801415e:	2900      	cmp	r1, #0
 8014160:	bf16      	itet	ne
 8014162:	4619      	movne	r1, r3
 8014164:	4611      	moveq	r1, r2
 8014166:	4613      	movne	r3, r2
 8014168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416c:	9116      	str	r1, [sp, #88]	; 0x58
 801416e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014172:	f240 8387 	bls.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014176:	ed94 7a07 	vldr	s14, [r4, #28]
 801417a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014182:	f240 837f 	bls.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014186:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801418a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	f240 8377 	bls.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014196:	6822      	ldr	r2, [r4, #0]
 8014198:	4bb1      	ldr	r3, [pc, #708]	; (8014460 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801419a:	429a      	cmp	r2, r3
 801419c:	f2c0 8372 	blt.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141a0:	49b0      	ldr	r1, [pc, #704]	; (8014464 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80141a2:	6963      	ldr	r3, [r4, #20]
 80141a4:	428a      	cmp	r2, r1
 80141a6:	f300 836d 	bgt.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141aa:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80141ae:	48ae      	ldr	r0, [pc, #696]	; (8014468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80141b0:	33ff      	adds	r3, #255	; 0xff
 80141b2:	4283      	cmp	r3, r0
 80141b4:	f200 8366 	bhi.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80141ba:	4dac      	ldr	r5, [pc, #688]	; (801446c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80141bc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80141c0:	33ff      	adds	r3, #255	; 0xff
 80141c2:	42ab      	cmp	r3, r5
 80141c4:	f200 835e 	bhi.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141c8:	6862      	ldr	r2, [r4, #4]
 80141ca:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80141ce:	33ff      	adds	r3, #255	; 0xff
 80141d0:	4283      	cmp	r3, r0
 80141d2:	f200 8357 	bhi.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141d6:	69a1      	ldr	r1, [r4, #24]
 80141d8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80141dc:	33ff      	adds	r3, #255	; 0xff
 80141de:	4283      	cmp	r3, r0
 80141e0:	f200 8350 	bhi.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80141e6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80141ea:	30ff      	adds	r0, #255	; 0xff
 80141ec:	42a8      	cmp	r0, r5
 80141ee:	f200 8349 	bhi.w	8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80141f2:	428a      	cmp	r2, r1
 80141f4:	f280 8110 	bge.w	8014418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80141f8:	429a      	cmp	r2, r3
 80141fa:	f300 8119 	bgt.w	8014430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80141fe:	4299      	cmp	r1, r3
 8014200:	f280 811d 	bge.w	801443e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014204:	2502      	movs	r5, #2
 8014206:	2701      	movs	r7, #1
 8014208:	46a9      	mov	r9, r5
 801420a:	46b8      	mov	r8, r7
 801420c:	f04f 0a00 	mov.w	sl, #0
 8014210:	4621      	mov	r1, r4
 8014212:	a849      	add	r0, sp, #292	; 0x124
 8014214:	f002 ff86 	bl	8017124 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014218:	4622      	mov	r2, r4
 801421a:	4653      	mov	r3, sl
 801421c:	a949      	add	r1, sp, #292	; 0x124
 801421e:	f8cd 9000 	str.w	r9, [sp]
 8014222:	a819      	add	r0, sp, #100	; 0x64
 8014224:	f003 f8ae 	bl	8017384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014228:	4622      	mov	r2, r4
 801422a:	4653      	mov	r3, sl
 801422c:	a949      	add	r1, sp, #292	; 0x124
 801422e:	f8cd 8000 	str.w	r8, [sp]
 8014232:	a829      	add	r0, sp, #164	; 0xa4
 8014234:	f003 f8a6 	bl	8017384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014238:	4643      	mov	r3, r8
 801423a:	4622      	mov	r2, r4
 801423c:	a949      	add	r1, sp, #292	; 0x124
 801423e:	f8cd 9000 	str.w	r9, [sp]
 8014242:	a839      	add	r0, sp, #228	; 0xe4
 8014244:	f003 f89e 	bl	8017384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014248:	42af      	cmp	r7, r5
 801424a:	af12      	add	r7, sp, #72	; 0x48
 801424c:	bfb7      	itett	lt
 801424e:	2300      	movlt	r3, #0
 8014250:	2301      	movge	r3, #1
 8014252:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014254:	ac19      	addlt	r4, sp, #100	; 0x64
 8014256:	bfb1      	iteee	lt
 8014258:	930e      	strlt	r3, [sp, #56]	; 0x38
 801425a:	ad19      	addge	r5, sp, #100	; 0x64
 801425c:	930e      	strge	r3, [sp, #56]	; 0x38
 801425e:	ac29      	addge	r4, sp, #164	; 0xa4
 8014260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014266:	e887 0003 	stmia.w	r7, {r0, r1}
 801426a:	b928      	cbnz	r0, 8014278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801426c:	4b80      	ldr	r3, [pc, #512]	; (8014470 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	6803      	ldr	r3, [r0, #0]
 8014272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014274:	4798      	blx	r3
 8014276:	6038      	str	r0, [r7, #0]
 8014278:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801427a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801427e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014282:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014284:	930c      	str	r3, [sp, #48]	; 0x30
 8014286:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014288:	6963      	ldr	r3, [r4, #20]
 801428a:	440b      	add	r3, r1
 801428c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8014290:	4408      	add	r0, r1
 8014292:	b200      	sxth	r0, r0
 8014294:	4283      	cmp	r3, r0
 8014296:	900d      	str	r0, [sp, #52]	; 0x34
 8014298:	f280 80dd 	bge.w	8014456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801429c:	428b      	cmp	r3, r1
 801429e:	da08      	bge.n	80142b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80142a0:	2a00      	cmp	r2, #0
 80142a2:	dd06      	ble.n	80142b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80142a4:	1acb      	subs	r3, r1, r3
 80142a6:	429a      	cmp	r2, r3
 80142a8:	f2c0 80e4 	blt.w	8014474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	f300 80e2 	bgt.w	8014476 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80142b2:	6967      	ldr	r7, [r4, #20]
 80142b4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80142b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ba:	443b      	add	r3, r7
 80142bc:	461f      	mov	r7, r3
 80142be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142c0:	1bdf      	subs	r7, r3, r7
 80142c2:	4297      	cmp	r7, r2
 80142c4:	bfa8      	it	ge
 80142c6:	4617      	movge	r7, r2
 80142c8:	2f00      	cmp	r7, #0
 80142ca:	f340 8166 	ble.w	801459a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80142ce:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80142d0:	6829      	ldr	r1, [r5, #0]
 80142d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80142d6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80142da:	4411      	add	r1, r2
 80142dc:	6820      	ldr	r0, [r4, #0]
 80142de:	4299      	cmp	r1, r3
 80142e0:	dd1a      	ble.n	8014318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80142e2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80142e6:	4402      	add	r2, r0
 80142e8:	440b      	add	r3, r1
 80142ea:	b21b      	sxth	r3, r3
 80142ec:	429a      	cmp	r2, r3
 80142ee:	dc13      	bgt.n	8014318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80142f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142f2:	a912      	add	r1, sp, #72	; 0x48
 80142f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	9206      	str	r2, [sp, #24]
 80142fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142fe:	9500      	str	r5, [sp, #0]
 8014300:	9205      	str	r2, [sp, #20]
 8014302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014304:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014308:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801430a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801430e:	aa49      	add	r2, sp, #292	; 0x124
 8014310:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014314:	4623      	mov	r3, r4
 8014316:	47c8      	blx	r9
 8014318:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801431c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014320:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014328:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801432c:	68a1      	ldr	r1, [r4, #8]
 801432e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014332:	ed94 6a08 	vldr	s12, [r4, #32]
 8014336:	edd4 6a07 	vldr	s13, [r4, #28]
 801433a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801433e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014342:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014346:	e9d4 2300 	ldrd	r2, r3, [r4]
 801434a:	edc4 6a07 	vstr	s13, [r4, #28]
 801434e:	441a      	add	r2, r3
 8014350:	6963      	ldr	r3, [r4, #20]
 8014352:	3301      	adds	r3, #1
 8014354:	6022      	str	r2, [r4, #0]
 8014356:	6163      	str	r3, [r4, #20]
 8014358:	69a3      	ldr	r3, [r4, #24]
 801435a:	3b01      	subs	r3, #1
 801435c:	61a3      	str	r3, [r4, #24]
 801435e:	6923      	ldr	r3, [r4, #16]
 8014360:	440b      	add	r3, r1
 8014362:	68e1      	ldr	r1, [r4, #12]
 8014364:	428b      	cmp	r3, r1
 8014366:	6123      	str	r3, [r4, #16]
 8014368:	db15      	blt.n	8014396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801436a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801436e:	3201      	adds	r2, #1
 8014370:	1a5b      	subs	r3, r3, r1
 8014372:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014376:	6022      	str	r2, [r4, #0]
 8014378:	6123      	str	r3, [r4, #16]
 801437a:	edc4 6a07 	vstr	s13, [r4, #28]
 801437e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8014382:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014386:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801438a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801438e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014392:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014396:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801439a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801439e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80143a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143a6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80143aa:	68a9      	ldr	r1, [r5, #8]
 80143ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143b0:	ed95 6a08 	vldr	s12, [r5, #32]
 80143b4:	edd5 6a07 	vldr	s13, [r5, #28]
 80143b8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80143bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80143c0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80143c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80143c8:	edc5 6a07 	vstr	s13, [r5, #28]
 80143cc:	441a      	add	r2, r3
 80143ce:	696b      	ldr	r3, [r5, #20]
 80143d0:	3301      	adds	r3, #1
 80143d2:	602a      	str	r2, [r5, #0]
 80143d4:	616b      	str	r3, [r5, #20]
 80143d6:	69ab      	ldr	r3, [r5, #24]
 80143d8:	3b01      	subs	r3, #1
 80143da:	61ab      	str	r3, [r5, #24]
 80143dc:	692b      	ldr	r3, [r5, #16]
 80143de:	440b      	add	r3, r1
 80143e0:	68e9      	ldr	r1, [r5, #12]
 80143e2:	428b      	cmp	r3, r1
 80143e4:	612b      	str	r3, [r5, #16]
 80143e6:	db15      	blt.n	8014414 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80143e8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80143ec:	3201      	adds	r2, #1
 80143ee:	1a5b      	subs	r3, r3, r1
 80143f0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80143f4:	602a      	str	r2, [r5, #0]
 80143f6:	612b      	str	r3, [r5, #16]
 80143f8:	edc5 6a07 	vstr	s13, [r5, #28]
 80143fc:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8014400:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014404:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014408:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801440c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014410:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014414:	3f01      	subs	r7, #1
 8014416:	e757      	b.n	80142c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014418:	4299      	cmp	r1, r3
 801441a:	dc13      	bgt.n	8014444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801441c:	429a      	cmp	r2, r3
 801441e:	da14      	bge.n	801444a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014420:	2502      	movs	r5, #2
 8014422:	2703      	movs	r7, #3
 8014424:	f04f 0800 	mov.w	r8, #0
 8014428:	46a9      	mov	r9, r5
 801442a:	f04f 0a01 	mov.w	sl, #1
 801442e:	e6ef      	b.n	8014210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014430:	2501      	movs	r5, #1
 8014432:	2700      	movs	r7, #0
 8014434:	46a9      	mov	r9, r5
 8014436:	46b8      	mov	r8, r7
 8014438:	f04f 0a02 	mov.w	sl, #2
 801443c:	e6e8      	b.n	8014210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801443e:	2501      	movs	r5, #1
 8014440:	2702      	movs	r7, #2
 8014442:	e6e1      	b.n	8014208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014444:	2500      	movs	r5, #0
 8014446:	2701      	movs	r7, #1
 8014448:	e7f4      	b.n	8014434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801444a:	2702      	movs	r7, #2
 801444c:	2503      	movs	r5, #3
 801444e:	f04f 0900 	mov.w	r9, #0
 8014452:	46b8      	mov	r8, r7
 8014454:	e7e9      	b.n	801442a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014456:	4613      	mov	r3, r2
 8014458:	e728      	b.n	80142ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801445a:	bf00      	nop
 801445c:	2400ae6c 	.word	0x2400ae6c
 8014460:	fffd8f01 	.word	0xfffd8f01
 8014464:	00027100 	.word	0x00027100
 8014468:	0004e1ff 	.word	0x0004e1ff
 801446c:	0004e1fe 	.word	0x0004e1fe
 8014470:	2400ae74 	.word	0x2400ae74
 8014474:	4613      	mov	r3, r2
 8014476:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014478:	469e      	mov	lr, r3
 801447a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801447c:	469c      	mov	ip, r3
 801447e:	9111      	str	r1, [sp, #68]	; 0x44
 8014480:	f04f 0900 	mov.w	r9, #0
 8014484:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014488:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801448c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8014490:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014494:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014498:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801449c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80144a0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80144a4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80144a8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80144ac:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80144b0:	f1bc 0f00 	cmp.w	ip, #0
 80144b4:	d147      	bne.n	8014546 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80144b6:	eb03 0c07 	add.w	ip, r3, r7
 80144ba:	1ad7      	subs	r7, r2, r3
 80144bc:	f1b9 0f00 	cmp.w	r9, #0
 80144c0:	d009      	beq.n	80144d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80144c2:	9029      	str	r0, [sp, #164]	; 0xa4
 80144c4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80144c8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80144cc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80144d0:	912d      	str	r1, [sp, #180]	; 0xb4
 80144d2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80144d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80144d8:	f04f 0800 	mov.w	r8, #0
 80144dc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80144e0:	9111      	str	r1, [sp, #68]	; 0x44
 80144e2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80144e6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80144ea:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80144ee:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80144f2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80144f6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80144fa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80144fe:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8014502:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8014506:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801450a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801450e:	f1be 0f00 	cmp.w	lr, #0
 8014512:	d031      	beq.n	8014578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014514:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014516:	4450      	add	r0, sl
 8014518:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801451c:	4431      	add	r1, r6
 801451e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014522:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014526:	4549      	cmp	r1, r9
 8014528:	db08      	blt.n	801453c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801452a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801452e:	3001      	adds	r0, #1
 8014530:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014534:	eba1 0109 	sub.w	r1, r1, r9
 8014538:	ee37 7a06 	vadd.f32	s14, s14, s12
 801453c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014540:	f04f 0801 	mov.w	r8, #1
 8014544:	e7e3      	b.n	801450e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014546:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014548:	4450      	add	r0, sl
 801454a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801454e:	4431      	add	r1, r6
 8014550:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014554:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014558:	4541      	cmp	r1, r8
 801455a:	db08      	blt.n	801456e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801455c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014560:	3001      	adds	r0, #1
 8014562:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014566:	eba1 0108 	sub.w	r1, r1, r8
 801456a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801456e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014572:	f04f 0901 	mov.w	r9, #1
 8014576:	e79b      	b.n	80144b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014578:	449c      	add	ip, r3
 801457a:	1aff      	subs	r7, r7, r3
 801457c:	f1b8 0f00 	cmp.w	r8, #0
 8014580:	d009      	beq.n	8014596 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014582:	9019      	str	r0, [sp, #100]	; 0x64
 8014584:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014588:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801458c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014590:	911d      	str	r1, [sp, #116]	; 0x74
 8014592:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014596:	1ad2      	subs	r2, r2, r3
 8014598:	e68b      	b.n	80142b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801459a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801459c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f000 80d1 	beq.w	8014746 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80145a4:	ad19      	add	r5, sp, #100	; 0x64
 80145a6:	ac39      	add	r4, sp, #228	; 0xe4
 80145a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80145aa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80145ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145b2:	930c      	str	r3, [sp, #48]	; 0x30
 80145b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80145b6:	6963      	ldr	r3, [r4, #20]
 80145b8:	440b      	add	r3, r1
 80145ba:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80145be:	4408      	add	r0, r1
 80145c0:	b200      	sxth	r0, r0
 80145c2:	4283      	cmp	r3, r0
 80145c4:	900d      	str	r0, [sp, #52]	; 0x34
 80145c6:	f280 80c1 	bge.w	801474c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80145ca:	428b      	cmp	r3, r1
 80145cc:	da08      	bge.n	80145e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80145ce:	2a00      	cmp	r2, #0
 80145d0:	dd06      	ble.n	80145e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80145d2:	1acb      	subs	r3, r1, r3
 80145d4:	429a      	cmp	r2, r3
 80145d6:	f2c0 80bb 	blt.w	8014750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80145da:	2b00      	cmp	r3, #0
 80145dc:	f300 80b9 	bgt.w	8014752 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80145e0:	6967      	ldr	r7, [r4, #20]
 80145e2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80145e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145e8:	443b      	add	r3, r7
 80145ea:	461f      	mov	r7, r3
 80145ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ee:	1bdf      	subs	r7, r3, r7
 80145f0:	4297      	cmp	r7, r2
 80145f2:	bfa8      	it	ge
 80145f4:	4617      	movge	r7, r2
 80145f6:	2f00      	cmp	r7, #0
 80145f8:	f340 813c 	ble.w	8014874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80145fc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80145fe:	6829      	ldr	r1, [r5, #0]
 8014600:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014604:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014608:	4411      	add	r1, r2
 801460a:	6820      	ldr	r0, [r4, #0]
 801460c:	4299      	cmp	r1, r3
 801460e:	dd1a      	ble.n	8014646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014610:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014614:	4402      	add	r2, r0
 8014616:	440b      	add	r3, r1
 8014618:	b21b      	sxth	r3, r3
 801461a:	429a      	cmp	r2, r3
 801461c:	dc13      	bgt.n	8014646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801461e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014620:	a912      	add	r1, sp, #72	; 0x48
 8014622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	9206      	str	r2, [sp, #24]
 801462a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801462c:	9500      	str	r5, [sp, #0]
 801462e:	9205      	str	r2, [sp, #20]
 8014630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014632:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014636:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014638:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801463c:	aa49      	add	r2, sp, #292	; 0x124
 801463e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8014642:	4623      	mov	r3, r4
 8014644:	47c8      	blx	r9
 8014646:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801464a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801464e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8014652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014656:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801465a:	68a1      	ldr	r1, [r4, #8]
 801465c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014660:	ed94 6a08 	vldr	s12, [r4, #32]
 8014664:	edd4 6a07 	vldr	s13, [r4, #28]
 8014668:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801466c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014670:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014674:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014678:	edc4 6a07 	vstr	s13, [r4, #28]
 801467c:	441a      	add	r2, r3
 801467e:	6963      	ldr	r3, [r4, #20]
 8014680:	3301      	adds	r3, #1
 8014682:	6022      	str	r2, [r4, #0]
 8014684:	6163      	str	r3, [r4, #20]
 8014686:	69a3      	ldr	r3, [r4, #24]
 8014688:	3b01      	subs	r3, #1
 801468a:	61a3      	str	r3, [r4, #24]
 801468c:	6923      	ldr	r3, [r4, #16]
 801468e:	440b      	add	r3, r1
 8014690:	68e1      	ldr	r1, [r4, #12]
 8014692:	428b      	cmp	r3, r1
 8014694:	6123      	str	r3, [r4, #16]
 8014696:	db15      	blt.n	80146c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014698:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801469c:	3201      	adds	r2, #1
 801469e:	1a5b      	subs	r3, r3, r1
 80146a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80146a4:	6022      	str	r2, [r4, #0]
 80146a6:	6123      	str	r3, [r4, #16]
 80146a8:	edc4 6a07 	vstr	s13, [r4, #28]
 80146ac:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80146b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80146b4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80146b8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80146bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80146c4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80146c8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80146cc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80146d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146d4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80146d8:	68a9      	ldr	r1, [r5, #8]
 80146da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146de:	ed95 6a08 	vldr	s12, [r5, #32]
 80146e2:	edd5 6a07 	vldr	s13, [r5, #28]
 80146e6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80146ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80146ee:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80146f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80146f6:	edc5 6a07 	vstr	s13, [r5, #28]
 80146fa:	441a      	add	r2, r3
 80146fc:	696b      	ldr	r3, [r5, #20]
 80146fe:	3301      	adds	r3, #1
 8014700:	602a      	str	r2, [r5, #0]
 8014702:	616b      	str	r3, [r5, #20]
 8014704:	69ab      	ldr	r3, [r5, #24]
 8014706:	3b01      	subs	r3, #1
 8014708:	61ab      	str	r3, [r5, #24]
 801470a:	692b      	ldr	r3, [r5, #16]
 801470c:	440b      	add	r3, r1
 801470e:	68e9      	ldr	r1, [r5, #12]
 8014710:	428b      	cmp	r3, r1
 8014712:	612b      	str	r3, [r5, #16]
 8014714:	db15      	blt.n	8014742 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014716:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801471a:	3201      	adds	r2, #1
 801471c:	1a5b      	subs	r3, r3, r1
 801471e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014722:	602a      	str	r2, [r5, #0]
 8014724:	612b      	str	r3, [r5, #16]
 8014726:	edc5 6a07 	vstr	s13, [r5, #28]
 801472a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801472e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014732:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014736:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801473a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801473e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014742:	3f01      	subs	r7, #1
 8014744:	e757      	b.n	80145f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014746:	ad39      	add	r5, sp, #228	; 0xe4
 8014748:	ac19      	add	r4, sp, #100	; 0x64
 801474a:	e72d      	b.n	80145a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801474c:	4613      	mov	r3, r2
 801474e:	e744      	b.n	80145da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014750:	4613      	mov	r3, r2
 8014752:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8014754:	469e      	mov	lr, r3
 8014756:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801475a:	461f      	mov	r7, r3
 801475c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8014760:	f04f 0900 	mov.w	r9, #0
 8014764:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8014768:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801476c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8014770:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8014774:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8014778:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801477a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801477e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8014782:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8014786:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801478a:	960e      	str	r6, [sp, #56]	; 0x38
 801478c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8014790:	2f00      	cmp	r7, #0
 8014792:	d146      	bne.n	8014822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014794:	449c      	add	ip, r3
 8014796:	1ad7      	subs	r7, r2, r3
 8014798:	f1b9 0f00 	cmp.w	r9, #0
 801479c:	d009      	beq.n	80147b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801479e:	9039      	str	r0, [sp, #228]	; 0xe4
 80147a0:	913d      	str	r1, [sp, #244]	; 0xf4
 80147a2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80147a6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80147aa:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80147ae:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80147b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80147b4:	f04f 0800 	mov.w	r8, #0
 80147b8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80147bc:	910e      	str	r1, [sp, #56]	; 0x38
 80147be:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80147c2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80147c6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80147ca:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80147ce:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80147d2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80147d6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80147da:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80147de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80147e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80147e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80147ea:	f1be 0f00 	cmp.w	lr, #0
 80147ee:	d030      	beq.n	8014852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80147f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80147f2:	4450      	add	r0, sl
 80147f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80147f8:	4431      	add	r1, r6
 80147fa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80147fe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014802:	4549      	cmp	r1, r9
 8014804:	db08      	blt.n	8014818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014806:	ee77 7a85 	vadd.f32	s15, s15, s10
 801480a:	3001      	adds	r0, #1
 801480c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014810:	eba1 0109 	sub.w	r1, r1, r9
 8014814:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014818:	f10e 3eff 	add.w	lr, lr, #4294967295
 801481c:	f04f 0801 	mov.w	r8, #1
 8014820:	e7e3      	b.n	80147ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014822:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014824:	4450      	add	r0, sl
 8014826:	ee37 7a24 	vadd.f32	s14, s14, s9
 801482a:	4431      	add	r1, r6
 801482c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014830:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014834:	4541      	cmp	r1, r8
 8014836:	db08      	blt.n	801484a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014838:	ee76 6a85 	vadd.f32	s13, s13, s10
 801483c:	3001      	adds	r0, #1
 801483e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014842:	eba1 0108 	sub.w	r1, r1, r8
 8014846:	ee77 7a86 	vadd.f32	s15, s15, s12
 801484a:	3f01      	subs	r7, #1
 801484c:	f04f 0901 	mov.w	r9, #1
 8014850:	e79e      	b.n	8014790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014852:	449c      	add	ip, r3
 8014854:	1aff      	subs	r7, r7, r3
 8014856:	f1b8 0f00 	cmp.w	r8, #0
 801485a:	d009      	beq.n	8014870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801485c:	9019      	str	r0, [sp, #100]	; 0x64
 801485e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014862:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014866:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801486a:	911d      	str	r1, [sp, #116]	; 0x74
 801486c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014870:	1ad2      	subs	r2, r2, r3
 8014872:	e6b5      	b.n	80145e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	b923      	cbnz	r3, 8014884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801487a:	4b04      	ldr	r3, [pc, #16]	; (801488c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801487c:	6818      	ldr	r0, [r3, #0]
 801487e:	6803      	ldr	r3, [r0, #0]
 8014880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014882:	4798      	blx	r3
 8014884:	b05b      	add	sp, #364	; 0x16c
 8014886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488a:	bf00      	nop
 801488c:	2400ae74 	.word	0x2400ae74

08014890 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8014890:	2b03      	cmp	r3, #3
 8014892:	d818      	bhi.n	80148c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8014894:	e8df f003 	tbb	[pc, r3]
 8014898:	130d0602 	.word	0x130d0602
 801489c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80148a0:	1850      	adds	r0, r2, r1
 80148a2:	4770      	bx	lr
 80148a4:	8803      	ldrh	r3, [r0, #0]
 80148a6:	8880      	ldrh	r0, [r0, #4]
 80148a8:	4418      	add	r0, r3
 80148aa:	b200      	sxth	r0, r0
 80148ac:	1a80      	subs	r0, r0, r2
 80148ae:	3801      	subs	r0, #1
 80148b0:	4770      	bx	lr
 80148b2:	8803      	ldrh	r3, [r0, #0]
 80148b4:	8880      	ldrh	r0, [r0, #4]
 80148b6:	4418      	add	r0, r3
 80148b8:	b200      	sxth	r0, r0
 80148ba:	1a40      	subs	r0, r0, r1
 80148bc:	e7f7      	b.n	80148ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80148be:	f9b0 0000 	ldrsh.w	r0, [r0]
 80148c2:	4410      	add	r0, r2
 80148c4:	4770      	bx	lr
 80148c6:	2000      	movs	r0, #0
 80148c8:	4770      	bx	lr

080148ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80148ca:	2b03      	cmp	r3, #3
 80148cc:	d817      	bhi.n	80148fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80148ce:	e8df f003 	tbb	[pc, r3]
 80148d2:	0602      	.short	0x0602
 80148d4:	1009      	.short	0x1009
 80148d6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80148da:	1850      	adds	r0, r2, r1
 80148dc:	4770      	bx	lr
 80148de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80148e2:	e7fa      	b.n	80148da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80148e4:	8843      	ldrh	r3, [r0, #2]
 80148e6:	88c0      	ldrh	r0, [r0, #6]
 80148e8:	4418      	add	r0, r3
 80148ea:	b200      	sxth	r0, r0
 80148ec:	1a80      	subs	r0, r0, r2
 80148ee:	3801      	subs	r0, #1
 80148f0:	4770      	bx	lr
 80148f2:	8843      	ldrh	r3, [r0, #2]
 80148f4:	88c0      	ldrh	r0, [r0, #6]
 80148f6:	4418      	add	r0, r3
 80148f8:	b200      	sxth	r0, r0
 80148fa:	1a40      	subs	r0, r0, r1
 80148fc:	e7f7      	b.n	80148ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80148fe:	2000      	movs	r0, #0
 8014900:	4770      	bx	lr
	...

08014904 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014904:	4b01      	ldr	r3, [pc, #4]	; (801490c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8014906:	2200      	movs	r2, #0
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	4770      	bx	lr
 801490c:	2400ae7c 	.word	0x2400ae7c

08014910 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8014910:	4603      	mov	r3, r0
 8014912:	b1c8      	cbz	r0, 8014948 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014914:	0c02      	lsrs	r2, r0, #16
 8014916:	0412      	lsls	r2, r2, #16
 8014918:	b9a2      	cbnz	r2, 8014944 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801491a:	0403      	lsls	r3, r0, #16
 801491c:	2010      	movs	r0, #16
 801491e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014922:	bf04      	itt	eq
 8014924:	021b      	lsleq	r3, r3, #8
 8014926:	3008      	addeq	r0, #8
 8014928:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801492c:	bf04      	itt	eq
 801492e:	011b      	lsleq	r3, r3, #4
 8014930:	3004      	addeq	r0, #4
 8014932:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014936:	bf04      	itt	eq
 8014938:	009b      	lsleq	r3, r3, #2
 801493a:	3002      	addeq	r0, #2
 801493c:	2b00      	cmp	r3, #0
 801493e:	db04      	blt.n	801494a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014940:	3001      	adds	r0, #1
 8014942:	4770      	bx	lr
 8014944:	2000      	movs	r0, #0
 8014946:	e7ea      	b.n	801491e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014948:	2020      	movs	r0, #32
 801494a:	4770      	bx	lr

0801494c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014950:	b087      	sub	sp, #28
 8014952:	4681      	mov	r9, r0
 8014954:	4698      	mov	r8, r3
 8014956:	4610      	mov	r0, r2
 8014958:	460d      	mov	r5, r1
 801495a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801495e:	b981      	cbnz	r1, 8014982 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8014960:	b14b      	cbz	r3, 8014976 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8014962:	460b      	mov	r3, r1
 8014964:	464a      	mov	r2, r9
 8014966:	4641      	mov	r1, r8
 8014968:	e9cd 4700 	strd	r4, r7, [sp]
 801496c:	f7ff ffee 	bl	801494c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014970:	b007      	add	sp, #28
 8014972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014976:	f04f 33ff 	mov.w	r3, #4294967295
 801497a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801497e:	603b      	str	r3, [r7, #0]
 8014980:	e7f6      	b.n	8014970 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014982:	fa32 fa01 	lsrs.w	sl, r2, r1
 8014986:	d107      	bne.n	8014998 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8014988:	fb09 f602 	mul.w	r6, r9, r2
 801498c:	fbb6 f0f4 	udiv	r0, r6, r4
 8014990:	fb04 6610 	mls	r6, r4, r0, r6
 8014994:	603e      	str	r6, [r7, #0]
 8014996:	e7eb      	b.n	8014970 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014998:	2601      	movs	r6, #1
 801499a:	fa09 fb01 	lsl.w	fp, r9, r1
 801499e:	408e      	lsls	r6, r1
 80149a0:	fbbb f3f4 	udiv	r3, fp, r4
 80149a4:	3e01      	subs	r6, #1
 80149a6:	9302      	str	r3, [sp, #8]
 80149a8:	fb0a f303 	mul.w	r3, sl, r3
 80149ac:	4016      	ands	r6, r2
 80149ae:	9303      	str	r3, [sp, #12]
 80149b0:	4630      	mov	r0, r6
 80149b2:	f7ff ffad 	bl	8014910 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80149b6:	464a      	mov	r2, r9
 80149b8:	460b      	mov	r3, r1
 80149ba:	4601      	mov	r1, r0
 80149bc:	4630      	mov	r0, r6
 80149be:	e9cd 4700 	strd	r4, r7, [sp]
 80149c2:	f7ff ffc3 	bl	801494c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80149c6:	9b02      	ldr	r3, [sp, #8]
 80149c8:	4606      	mov	r6, r0
 80149ca:	eb05 0108 	add.w	r1, r5, r8
 80149ce:	fb04 bb13 	mls	fp, r4, r3, fp
 80149d2:	4658      	mov	r0, fp
 80149d4:	f7ff ff9c 	bl	8014910 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80149d8:	ab05      	add	r3, sp, #20
 80149da:	465a      	mov	r2, fp
 80149dc:	e9cd 4300 	strd	r4, r3, [sp]
 80149e0:	4603      	mov	r3, r0
 80149e2:	4650      	mov	r0, sl
 80149e4:	f7ff ffb2 	bl	801494c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80149e8:	6839      	ldr	r1, [r7, #0]
 80149ea:	9a05      	ldr	r2, [sp, #20]
 80149ec:	9b03      	ldr	r3, [sp, #12]
 80149ee:	4411      	add	r1, r2
 80149f0:	fbb1 f2f4 	udiv	r2, r1, r4
 80149f4:	18d3      	adds	r3, r2, r3
 80149f6:	fb04 1412 	mls	r4, r4, r2, r1
 80149fa:	441e      	add	r6, r3
 80149fc:	603c      	str	r4, [r7, #0]
 80149fe:	4430      	add	r0, r6
 8014a00:	e7b6      	b.n	8014970 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014a02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a06:	b085      	sub	sp, #20
 8014a08:	f1b0 0900 	subs.w	r9, r0, #0
 8014a0c:	461d      	mov	r5, r3
 8014a0e:	4617      	mov	r7, r2
 8014a10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014a12:	bfbb      	ittet	lt
 8014a14:	f1c9 0900 	rsblt	r9, r9, #0
 8014a18:	f04f 36ff 	movlt.w	r6, #4294967295
 8014a1c:	2601      	movge	r6, #1
 8014a1e:	6823      	ldrlt	r3, [r4, #0]
 8014a20:	bfbc      	itt	lt
 8014a22:	425b      	neglt	r3, r3
 8014a24:	6023      	strlt	r3, [r4, #0]
 8014a26:	2a00      	cmp	r2, #0
 8014a28:	da04      	bge.n	8014a34 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014a2a:	6823      	ldr	r3, [r4, #0]
 8014a2c:	4257      	negs	r7, r2
 8014a2e:	4276      	negs	r6, r6
 8014a30:	425b      	negs	r3, r3
 8014a32:	6023      	str	r3, [r4, #0]
 8014a34:	2d00      	cmp	r5, #0
 8014a36:	4638      	mov	r0, r7
 8014a38:	bfba      	itte	lt
 8014a3a:	426d      	neglt	r5, r5
 8014a3c:	f04f 38ff 	movlt.w	r8, #4294967295
 8014a40:	f04f 0801 	movge.w	r8, #1
 8014a44:	f7ff ff64 	bl	8014910 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014a48:	ab03      	add	r3, sp, #12
 8014a4a:	463a      	mov	r2, r7
 8014a4c:	e9cd 5300 	strd	r5, r3, [sp]
 8014a50:	4603      	mov	r3, r0
 8014a52:	4648      	mov	r0, r9
 8014a54:	f7ff ff7a 	bl	801494c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014a58:	6823      	ldr	r3, [r4, #0]
 8014a5a:	9a03      	ldr	r2, [sp, #12]
 8014a5c:	4546      	cmp	r6, r8
 8014a5e:	441a      	add	r2, r3
 8014a60:	fb92 f3f5 	sdiv	r3, r2, r5
 8014a64:	4418      	add	r0, r3
 8014a66:	fb05 2313 	mls	r3, r5, r3, r2
 8014a6a:	bf18      	it	ne
 8014a6c:	4240      	negne	r0, r0
 8014a6e:	1c72      	adds	r2, r6, #1
 8014a70:	6023      	str	r3, [r4, #0]
 8014a72:	d105      	bne.n	8014a80 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	f1c3 0200 	rsb	r2, r3, #0
 8014a7a:	db0b      	blt.n	8014a94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014a7c:	6022      	str	r2, [r4, #0]
 8014a7e:	e006      	b.n	8014a8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a80:	2e01      	cmp	r6, #1
 8014a82:	d104      	bne.n	8014a8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	da02      	bge.n	8014a8e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014a88:	442b      	add	r3, r5
 8014a8a:	3801      	subs	r0, #1
 8014a8c:	6023      	str	r3, [r4, #0]
 8014a8e:	b005      	add	sp, #20
 8014a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a94:	3801      	subs	r0, #1
 8014a96:	1b52      	subs	r2, r2, r5
 8014a98:	e7f0      	b.n	8014a7c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08014a9c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014a9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014aa0:	4c1c      	ldr	r4, [pc, #112]	; (8014b14 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8014aa2:	4605      	mov	r5, r0
 8014aa4:	6807      	ldr	r7, [r0, #0]
 8014aa6:	69a3      	ldr	r3, [r4, #24]
 8014aa8:	b92b      	cbnz	r3, 8014ab6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014aaa:	6840      	ldr	r0, [r0, #4]
 8014aac:	e9c5 7000 	strd	r7, r0, [r5]
 8014ab0:	b004      	add	sp, #16
 8014ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab6:	f04f 0802 	mov.w	r8, #2
 8014aba:	68a2      	ldr	r2, [r4, #8]
 8014abc:	ae04      	add	r6, sp, #16
 8014abe:	6820      	ldr	r0, [r4, #0]
 8014ac0:	fb93 f1f8 	sdiv	r1, r3, r8
 8014ac4:	440a      	add	r2, r1
 8014ac6:	69e1      	ldr	r1, [r4, #28]
 8014ac8:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014acc:	463a      	mov	r2, r7
 8014ace:	9600      	str	r6, [sp, #0]
 8014ad0:	f7ff ff97 	bl	8014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014ad4:	69a3      	ldr	r3, [r4, #24]
 8014ad6:	4607      	mov	r7, r0
 8014ad8:	686a      	ldr	r2, [r5, #4]
 8014ada:	6a21      	ldr	r1, [r4, #32]
 8014adc:	9600      	str	r6, [sp, #0]
 8014ade:	6860      	ldr	r0, [r4, #4]
 8014ae0:	f7ff ff8f 	bl	8014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014ae4:	69a3      	ldr	r3, [r4, #24]
 8014ae6:	6962      	ldr	r2, [r4, #20]
 8014ae8:	4407      	add	r7, r0
 8014aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014aec:	9600      	str	r6, [sp, #0]
 8014aee:	68e0      	ldr	r0, [r4, #12]
 8014af0:	fb93 f8f8 	sdiv	r8, r3, r8
 8014af4:	4442      	add	r2, r8
 8014af6:	9203      	str	r2, [sp, #12]
 8014af8:	682a      	ldr	r2, [r5, #0]
 8014afa:	f7ff ff82 	bl	8014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014afe:	4680      	mov	r8, r0
 8014b00:	9600      	str	r6, [sp, #0]
 8014b02:	69a3      	ldr	r3, [r4, #24]
 8014b04:	686a      	ldr	r2, [r5, #4]
 8014b06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014b08:	6920      	ldr	r0, [r4, #16]
 8014b0a:	f7ff ff7a 	bl	8014a02 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014b0e:	4440      	add	r0, r8
 8014b10:	e7cc      	b.n	8014aac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014b12:	bf00      	nop
 8014b14:	2400ae80 	.word	0x2400ae80

08014b18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014b18:	4b07      	ldr	r3, [pc, #28]	; (8014b38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d109      	bne.n	8014b34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014b20:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014b24:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014b28:	8003      	strh	r3, [r0, #0]
 8014b2a:	4b04      	ldr	r3, [pc, #16]	; (8014b3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014b2c:	881b      	ldrh	r3, [r3, #0]
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	1a9b      	subs	r3, r3, r2
 8014b32:	800b      	strh	r3, [r1, #0]
 8014b34:	4770      	bx	lr
 8014b36:	bf00      	nop
 8014b38:	2400ae6c 	.word	0x2400ae6c
 8014b3c:	2400ae68 	.word	0x2400ae68

08014b40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014b40:	4b07      	ldr	r3, [pc, #28]	; (8014b60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014b42:	b510      	push	{r4, lr}
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d108      	bne.n	8014b5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014b4a:	4b06      	ldr	r3, [pc, #24]	; (8014b64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014b4c:	880c      	ldrh	r4, [r1, #0]
 8014b4e:	881b      	ldrh	r3, [r3, #0]
 8014b50:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	1b1b      	subs	r3, r3, r4
 8014b58:	8003      	strh	r3, [r0, #0]
 8014b5a:	800a      	strh	r2, [r1, #0]
 8014b5c:	bd10      	pop	{r4, pc}
 8014b5e:	bf00      	nop
 8014b60:	2400ae6c 	.word	0x2400ae6c
 8014b64:	2400ae68 	.word	0x2400ae68

08014b68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014b68:	4b0a      	ldr	r3, [pc, #40]	; (8014b94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014b6a:	b510      	push	{r4, lr}
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	d10e      	bne.n	8014b90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014b72:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014b76:	8843      	ldrh	r3, [r0, #2]
 8014b78:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014b7c:	18ca      	adds	r2, r1, r3
 8014b7e:	4b06      	ldr	r3, [pc, #24]	; (8014b98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014b80:	8044      	strh	r4, [r0, #2]
 8014b82:	881b      	ldrh	r3, [r3, #0]
 8014b84:	1a9b      	subs	r3, r3, r2
 8014b86:	8003      	strh	r3, [r0, #0]
 8014b88:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014b8c:	8081      	strh	r1, [r0, #4]
 8014b8e:	80c3      	strh	r3, [r0, #6]
 8014b90:	bd10      	pop	{r4, pc}
 8014b92:	bf00      	nop
 8014b94:	2400ae6c 	.word	0x2400ae6c
 8014b98:	2400ae68 	.word	0x2400ae68

08014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014b9c:	4b08      	ldr	r3, [pc, #32]	; (8014bc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	2b01      	cmp	r3, #1
 8014ba2:	d10c      	bne.n	8014bbe <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014ba4:	8803      	ldrh	r3, [r0, #0]
 8014ba6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014baa:	8842      	ldrh	r2, [r0, #2]
 8014bac:	8002      	strh	r2, [r0, #0]
 8014bae:	185a      	adds	r2, r3, r1
 8014bb0:	4b04      	ldr	r3, [pc, #16]	; (8014bc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8014bb2:	881b      	ldrh	r3, [r3, #0]
 8014bb4:	1a9b      	subs	r3, r3, r2
 8014bb6:	8043      	strh	r3, [r0, #2]
 8014bb8:	88c3      	ldrh	r3, [r0, #6]
 8014bba:	80c1      	strh	r1, [r0, #6]
 8014bbc:	8083      	strh	r3, [r0, #4]
 8014bbe:	4770      	bx	lr
 8014bc0:	2400ae6c 	.word	0x2400ae6c
 8014bc4:	2400ae68 	.word	0x2400ae68

08014bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014bc8:	4b07      	ldr	r3, [pc, #28]	; (8014be8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014bca:	b510      	push	{r4, lr}
 8014bcc:	781b      	ldrb	r3, [r3, #0]
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d108      	bne.n	8014be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014bd2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014bd6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014bda:	8003      	strh	r3, [r0, #0]
 8014bdc:	8893      	ldrh	r3, [r2, #4]
 8014bde:	3b01      	subs	r3, #1
 8014be0:	1b1b      	subs	r3, r3, r4
 8014be2:	800b      	strh	r3, [r1, #0]
 8014be4:	bd10      	pop	{r4, pc}
 8014be6:	bf00      	nop
 8014be8:	2400ae6c 	.word	0x2400ae6c

08014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014bec:	4b0a      	ldr	r3, [pc, #40]	; (8014c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014bee:	460a      	mov	r2, r1
 8014bf0:	b510      	push	{r4, lr}
 8014bf2:	781b      	ldrb	r3, [r3, #0]
 8014bf4:	2b01      	cmp	r3, #1
 8014bf6:	d10d      	bne.n	8014c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014bf8:	8881      	ldrh	r1, [r0, #4]
 8014bfa:	8803      	ldrh	r3, [r0, #0]
 8014bfc:	440b      	add	r3, r1
 8014bfe:	4601      	mov	r1, r0
 8014c00:	3b01      	subs	r3, #1
 8014c02:	f821 3b02 	strh.w	r3, [r1], #2
 8014c06:	f7ff ffdf 	bl	8014bc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014c0a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014c0e:	88c2      	ldrh	r2, [r0, #6]
 8014c10:	80c3      	strh	r3, [r0, #6]
 8014c12:	8082      	strh	r2, [r0, #4]
 8014c14:	bd10      	pop	{r4, pc}
 8014c16:	bf00      	nop
 8014c18:	2400ae6c 	.word	0x2400ae6c

08014c1c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8014c1c:	b570      	push	{r4, r5, r6, lr}
 8014c1e:	2300      	movs	r3, #0
 8014c20:	4c0a      	ldr	r4, [pc, #40]	; (8014c4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014c22:	4605      	mov	r5, r0
 8014c24:	460e      	mov	r6, r1
 8014c26:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8014c2a:	6820      	ldr	r0, [r4, #0]
 8014c2c:	b110      	cbz	r0, 8014c34 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8014c2e:	6803      	ldr	r3, [r0, #0]
 8014c30:	695b      	ldr	r3, [r3, #20]
 8014c32:	4798      	blx	r3
 8014c34:	6026      	str	r6, [r4, #0]
 8014c36:	4630      	mov	r0, r6
 8014c38:	6833      	ldr	r3, [r6, #0]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	4798      	blx	r3
 8014c3e:	682b      	ldr	r3, [r5, #0]
 8014c40:	4628      	mov	r0, r5
 8014c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c48:	4718      	bx	r3
 8014c4a:	bf00      	nop
 8014c4c:	2400aeb0 	.word	0x2400aeb0

08014c50 <_ZN8touchgfx11Application13requestRedrawEv>:
 8014c50:	4b06      	ldr	r3, [pc, #24]	; (8014c6c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014c52:	2100      	movs	r1, #0
 8014c54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c58:	4b05      	ldr	r3, [pc, #20]	; (8014c70 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014c5a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8014c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c62:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8014c66:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8014c6a:	4770      	bx	lr
 8014c6c:	2400ae68 	.word	0x2400ae68
 8014c70:	2400ae6a 	.word	0x2400ae6a

08014c74 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014c74:	4b03      	ldr	r3, [pc, #12]	; (8014c84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014c76:	6818      	ldr	r0, [r3, #0]
 8014c78:	b110      	cbz	r0, 8014c80 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014c7a:	6803      	ldr	r3, [r0, #0]
 8014c7c:	699b      	ldr	r3, [r3, #24]
 8014c7e:	4718      	bx	r3
 8014c80:	4770      	bx	lr
 8014c82:	bf00      	nop
 8014c84:	2400aeb0 	.word	0x2400aeb0

08014c88 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014c88:	4770      	bx	lr
	...

08014c8c <_ZN8touchgfx11Application4drawEv>:
 8014c8c:	4b09      	ldr	r3, [pc, #36]	; (8014cb4 <_ZN8touchgfx11Application4drawEv+0x28>)
 8014c8e:	b507      	push	{r0, r1, r2, lr}
 8014c90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c94:	2100      	movs	r1, #0
 8014c96:	4b08      	ldr	r3, [pc, #32]	; (8014cb8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014c98:	9100      	str	r1, [sp, #0]
 8014c9a:	4669      	mov	r1, sp
 8014c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ca0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014ca4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014ca8:	6803      	ldr	r3, [r0, #0]
 8014caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cac:	4798      	blx	r3
 8014cae:	b003      	add	sp, #12
 8014cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cb4:	2400ae68 	.word	0x2400ae68
 8014cb8:	2400ae6a 	.word	0x2400ae6a

08014cbc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014cbc:	4b03      	ldr	r3, [pc, #12]	; (8014ccc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014cbe:	6818      	ldr	r0, [r3, #0]
 8014cc0:	b110      	cbz	r0, 8014cc8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014cc2:	6803      	ldr	r3, [r0, #0]
 8014cc4:	69db      	ldr	r3, [r3, #28]
 8014cc6:	4718      	bx	r3
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	2400aeb0 	.word	0x2400aeb0

08014cd0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014cd0:	4b03      	ldr	r3, [pc, #12]	; (8014ce0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014cd2:	6818      	ldr	r0, [r3, #0]
 8014cd4:	b110      	cbz	r0, 8014cdc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014cd6:	6803      	ldr	r3, [r0, #0]
 8014cd8:	6a1b      	ldr	r3, [r3, #32]
 8014cda:	4718      	bx	r3
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	2400aeb0 	.word	0x2400aeb0

08014ce4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8014cea:	4770      	bx	lr

08014cec <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014cec:	4b03      	ldr	r3, [pc, #12]	; (8014cfc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014cee:	6818      	ldr	r0, [r3, #0]
 8014cf0:	b110      	cbz	r0, 8014cf8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014cf2:	6803      	ldr	r3, [r0, #0]
 8014cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cf6:	4718      	bx	r3
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	2400aeb0 	.word	0x2400aeb0

08014d00 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014d00:	b570      	push	{r4, r5, r6, lr}
 8014d02:	4d32      	ldr	r5, [pc, #200]	; (8014dcc <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8014d04:	4604      	mov	r4, r0
 8014d06:	6828      	ldr	r0, [r5, #0]
 8014d08:	b140      	cbz	r0, 8014d1c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014d0a:	7a03      	ldrb	r3, [r0, #8]
 8014d0c:	b933      	cbnz	r3, 8014d1c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014d0e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8014d12:	6803      	ldr	r3, [r0, #0]
 8014d14:	689b      	ldr	r3, [r3, #8]
 8014d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d1a:	4718      	bx	r3
 8014d1c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8014d20:	b97b      	cbnz	r3, 8014d42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014d22:	b170      	cbz	r0, 8014d42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014d24:	7a03      	ldrb	r3, [r0, #8]
 8014d26:	b163      	cbz	r3, 8014d42 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014d28:	4b29      	ldr	r3, [pc, #164]	; (8014dd0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8014d2a:	6818      	ldr	r0, [r3, #0]
 8014d2c:	b110      	cbz	r0, 8014d34 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014d2e:	6803      	ldr	r3, [r0, #0]
 8014d30:	691b      	ldr	r3, [r3, #16]
 8014d32:	4798      	blx	r3
 8014d34:	6828      	ldr	r0, [r5, #0]
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	68db      	ldr	r3, [r3, #12]
 8014d3a:	4798      	blx	r3
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8014d42:	2500      	movs	r5, #0
 8014d44:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8014d48:	42a8      	cmp	r0, r5
 8014d4a:	dd0c      	ble.n	8014d66 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8014d4c:	1963      	adds	r3, r4, r5
 8014d4e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8014d52:	b132      	cbz	r2, 8014d62 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8014d54:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8014d58:	4413      	add	r3, r2
 8014d5a:	6858      	ldr	r0, [r3, #4]
 8014d5c:	6803      	ldr	r3, [r0, #0]
 8014d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d60:	4798      	blx	r3
 8014d62:	3501      	adds	r5, #1
 8014d64:	e7ee      	b.n	8014d44 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8014d66:	2300      	movs	r3, #0
 8014d68:	461a      	mov	r2, r3
 8014d6a:	4298      	cmp	r0, r3
 8014d6c:	d015      	beq.n	8014d9a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8014d6e:	18e1      	adds	r1, r4, r3
 8014d70:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8014d74:	b16d      	cbz	r5, 8014d92 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d00a      	beq.n	8014d90 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8014d7a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8014d7e:	4431      	add	r1, r6
 8014d80:	684e      	ldr	r6, [r1, #4]
 8014d82:	b291      	uxth	r1, r2
 8014d84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014d88:	604e      	str	r6, [r1, #4]
 8014d8a:	18a1      	adds	r1, r4, r2
 8014d8c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8014d90:	3201      	adds	r2, #1
 8014d92:	3301      	adds	r3, #1
 8014d94:	e7e9      	b.n	8014d6a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8014d96:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8014d9a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8014d9e:	4295      	cmp	r5, r2
 8014da0:	dd0d      	ble.n	8014dbe <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8014da2:	1e6b      	subs	r3, r5, #1
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8014daa:	4618      	mov	r0, r3
 8014dac:	3104      	adds	r1, #4
 8014dae:	4285      	cmp	r5, r0
 8014db0:	ddf1      	ble.n	8014d96 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8014db2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8014db6:	3001      	adds	r0, #1
 8014db8:	f841 6c04 	str.w	r6, [r1, #-4]
 8014dbc:	e7f7      	b.n	8014dae <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8014dbe:	4b04      	ldr	r3, [pc, #16]	; (8014dd0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	b110      	cbz	r0, 8014dca <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8014dc4:	6803      	ldr	r3, [r0, #0]
 8014dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc8:	e7a5      	b.n	8014d16 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8014dca:	bd70      	pop	{r4, r5, r6, pc}
 8014dcc:	2400aeb4 	.word	0x2400aeb4
 8014dd0:	2400aeb0 	.word	0x2400aeb0

08014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014dd4:	b510      	push	{r4, lr}
 8014dd6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014dda:	888a      	ldrh	r2, [r1, #4]
 8014ddc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014de0:	4422      	add	r2, r4
 8014de2:	b212      	sxth	r2, r2
 8014de4:	4293      	cmp	r3, r2
 8014de6:	da15      	bge.n	8014e14 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014de8:	8882      	ldrh	r2, [r0, #4]
 8014dea:	4413      	add	r3, r2
 8014dec:	b21b      	sxth	r3, r3
 8014dee:	429c      	cmp	r4, r3
 8014df0:	da10      	bge.n	8014e14 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014df2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014df6:	88c9      	ldrh	r1, [r1, #6]
 8014df8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014dfc:	4419      	add	r1, r3
 8014dfe:	b209      	sxth	r1, r1
 8014e00:	428a      	cmp	r2, r1
 8014e02:	da07      	bge.n	8014e14 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014e04:	88c0      	ldrh	r0, [r0, #6]
 8014e06:	4410      	add	r0, r2
 8014e08:	b200      	sxth	r0, r0
 8014e0a:	4283      	cmp	r3, r0
 8014e0c:	bfac      	ite	ge
 8014e0e:	2000      	movge	r0, #0
 8014e10:	2001      	movlt	r0, #1
 8014e12:	bd10      	pop	{r4, pc}
 8014e14:	2000      	movs	r0, #0
 8014e16:	e7fc      	b.n	8014e12 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014e18 <_ZN8touchgfx4Rect10restrictToEss>:
 8014e18:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	b510      	push	{r4, lr}
 8014e20:	da04      	bge.n	8014e2c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014e22:	8884      	ldrh	r4, [r0, #4]
 8014e24:	4423      	add	r3, r4
 8014e26:	8083      	strh	r3, [r0, #4]
 8014e28:	2300      	movs	r3, #0
 8014e2a:	8003      	strh	r3, [r0, #0]
 8014e2c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014e30:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014e34:	1b09      	subs	r1, r1, r4
 8014e36:	428b      	cmp	r3, r1
 8014e38:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014e3c:	bfc8      	it	gt
 8014e3e:	8081      	strhgt	r1, [r0, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	da04      	bge.n	8014e4e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014e44:	88c1      	ldrh	r1, [r0, #6]
 8014e46:	440b      	add	r3, r1
 8014e48:	80c3      	strh	r3, [r0, #6]
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	8043      	strh	r3, [r0, #2]
 8014e4e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014e52:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014e56:	1a52      	subs	r2, r2, r1
 8014e58:	4293      	cmp	r3, r2
 8014e5a:	bfc8      	it	gt
 8014e5c:	80c2      	strhgt	r2, [r0, #6]
 8014e5e:	bd10      	pop	{r4, pc}

08014e60 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014e60:	4b10      	ldr	r3, [pc, #64]	; (8014ea4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014e62:	b510      	push	{r4, lr}
 8014e64:	460c      	mov	r4, r1
 8014e66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014e6a:	4b0f      	ldr	r3, [pc, #60]	; (8014ea8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014e72:	f7ff ffd1 	bl	8014e18 <_ZN8touchgfx4Rect10restrictToEss>
 8014e76:	4b0d      	ldr	r3, [pc, #52]	; (8014eac <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014e78:	6818      	ldr	r0, [r3, #0]
 8014e7a:	b190      	cbz	r0, 8014ea2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	4621      	mov	r1, r4
 8014e80:	689b      	ldr	r3, [r3, #8]
 8014e82:	4798      	blx	r3
 8014e84:	4b0a      	ldr	r3, [pc, #40]	; (8014eb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014e86:	6818      	ldr	r0, [r3, #0]
 8014e88:	b118      	cbz	r0, 8014e92 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014e8a:	6803      	ldr	r3, [r0, #0]
 8014e8c:	4621      	mov	r1, r4
 8014e8e:	689b      	ldr	r3, [r3, #8]
 8014e90:	4798      	blx	r3
 8014e92:	4b08      	ldr	r3, [pc, #32]	; (8014eb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014e94:	4621      	mov	r1, r4
 8014e96:	6818      	ldr	r0, [r3, #0]
 8014e98:	6803      	ldr	r3, [r0, #0]
 8014e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e9e:	69db      	ldr	r3, [r3, #28]
 8014ea0:	4718      	bx	r3
 8014ea2:	bd10      	pop	{r4, pc}
 8014ea4:	2400ae6a 	.word	0x2400ae6a
 8014ea8:	2400ae68 	.word	0x2400ae68
 8014eac:	2400aeb0 	.word	0x2400aeb0
 8014eb0:	2400aeac 	.word	0x2400aeac
 8014eb4:	2400ae74 	.word	0x2400ae74

08014eb8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eba:	4606      	mov	r6, r0
 8014ebc:	4608      	mov	r0, r1
 8014ebe:	460f      	mov	r7, r1
 8014ec0:	f7fd ff01 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014ec4:	b9e8      	cbnz	r0, 8014f02 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014ec6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8014eca:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014ece:	42a5      	cmp	r5, r4
 8014ed0:	db17      	blt.n	8014f02 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014ed2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014ed6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	db11      	blt.n	8014f02 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014ede:	88b9      	ldrh	r1, [r7, #4]
 8014ee0:	440d      	add	r5, r1
 8014ee2:	88b1      	ldrh	r1, [r6, #4]
 8014ee4:	440c      	add	r4, r1
 8014ee6:	b22d      	sxth	r5, r5
 8014ee8:	b224      	sxth	r4, r4
 8014eea:	42a5      	cmp	r5, r4
 8014eec:	dc09      	bgt.n	8014f02 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014eee:	88f8      	ldrh	r0, [r7, #6]
 8014ef0:	4410      	add	r0, r2
 8014ef2:	88f2      	ldrh	r2, [r6, #6]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	b200      	sxth	r0, r0
 8014ef8:	b21b      	sxth	r3, r3
 8014efa:	4298      	cmp	r0, r3
 8014efc:	bfcc      	ite	gt
 8014efe:	2000      	movgt	r0, #0
 8014f00:	2001      	movle	r0, #1
 8014f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014f04 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f06:	4604      	mov	r4, r0
 8014f08:	4608      	mov	r0, r1
 8014f0a:	460d      	mov	r5, r1
 8014f0c:	f7fd fedb 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f10:	b978      	cbnz	r0, 8014f32 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014f12:	4620      	mov	r0, r4
 8014f14:	f7fd fed7 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f18:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014f1c:	b150      	cbz	r0, 8014f34 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014f1e:	8026      	strh	r6, [r4, #0]
 8014f20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014f24:	8063      	strh	r3, [r4, #2]
 8014f26:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014f2a:	80a3      	strh	r3, [r4, #4]
 8014f2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014f30:	80e3      	strh	r3, [r4, #6]
 8014f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f34:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014f38:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014f3c:	42b1      	cmp	r1, r6
 8014f3e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014f42:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8014f46:	460f      	mov	r7, r1
 8014f48:	88ed      	ldrh	r5, [r5, #6]
 8014f4a:	bfa8      	it	ge
 8014f4c:	4637      	movge	r7, r6
 8014f4e:	4293      	cmp	r3, r2
 8014f50:	4618      	mov	r0, r3
 8014f52:	4466      	add	r6, ip
 8014f54:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014f58:	bfa8      	it	ge
 8014f5a:	4610      	movge	r0, r2
 8014f5c:	442a      	add	r2, r5
 8014f5e:	88e5      	ldrh	r5, [r4, #6]
 8014f60:	4461      	add	r1, ip
 8014f62:	b236      	sxth	r6, r6
 8014f64:	8027      	strh	r7, [r4, #0]
 8014f66:	442b      	add	r3, r5
 8014f68:	b209      	sxth	r1, r1
 8014f6a:	b212      	sxth	r2, r2
 8014f6c:	8060      	strh	r0, [r4, #2]
 8014f6e:	b21b      	sxth	r3, r3
 8014f70:	428e      	cmp	r6, r1
 8014f72:	bfac      	ite	ge
 8014f74:	ebc7 0106 	rsbge	r1, r7, r6
 8014f78:	ebc7 0101 	rsblt	r1, r7, r1
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	bfac      	ite	ge
 8014f80:	ebc0 0202 	rsbge	r2, r0, r2
 8014f84:	ebc0 0203 	rsblt	r2, r0, r3
 8014f88:	80a1      	strh	r1, [r4, #4]
 8014f8a:	80e2      	strh	r2, [r4, #6]
 8014f8c:	e7d1      	b.n	8014f32 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014f90 <_ZN8touchgfx11Application11getInstanceEv>:
 8014f90:	4b01      	ldr	r3, [pc, #4]	; (8014f98 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014f92:	6818      	ldr	r0, [r3, #0]
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	2400aec0 	.word	0x2400aec0

08014f9c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8014fa2:	30a8      	adds	r0, #168	; 0xa8
 8014fa4:	f820 3c24 	strh.w	r3, [r0, #-36]
 8014fa8:	f802 3b01 	strb.w	r3, [r2], #1
 8014fac:	4282      	cmp	r2, r0
 8014fae:	d1fb      	bne.n	8014fa8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8014fb0:	4770      	bx	lr

08014fb2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8014fb8:	2200      	movs	r2, #0
 8014fba:	801a      	strh	r2, [r3, #0]
 8014fbc:	3308      	adds	r3, #8
 8014fbe:	f823 2c06 	strh.w	r2, [r3, #-6]
 8014fc2:	f823 2c04 	strh.w	r2, [r3, #-4]
 8014fc6:	f823 2c02 	strh.w	r2, [r3, #-2]
 8014fca:	428b      	cmp	r3, r1
 8014fcc:	d1f5      	bne.n	8014fba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8014fce:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8014fd2:	4770      	bx	lr

08014fd4 <_ZN8touchgfx11ApplicationC1Ev>:
 8014fd4:	b570      	push	{r4, r5, r6, lr}
 8014fd6:	4b19      	ldr	r3, [pc, #100]	; (801503c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8014fd8:	2500      	movs	r5, #0
 8014fda:	4604      	mov	r4, r0
 8014fdc:	30a8      	adds	r0, #168	; 0xa8
 8014fde:	f840 3ca8 	str.w	r3, [r0, #-168]
 8014fe2:	f820 5c24 	strh.w	r5, [r0, #-36]
 8014fe6:	f7ff ffe4 	bl	8014fb2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014fea:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8014fee:	f7ff ffe0 	bl	8014fb2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014ff2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8014ff6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8014ffa:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8014ffe:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8015002:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8015006:	490e      	ldr	r1, [pc, #56]	; (8015040 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8015008:	480e      	ldr	r0, [pc, #56]	; (8015044 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801500a:	f00e f823 	bl	8023054 <CRC_Lock>
 801500e:	4e0e      	ldr	r6, [pc, #56]	; (8015048 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8015010:	4b0e      	ldr	r3, [pc, #56]	; (801504c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015012:	b158      	cbz	r0, 801502c <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8015014:	801d      	strh	r5, [r3, #0]
 8015016:	2300      	movs	r3, #0
 8015018:	4a0d      	ldr	r2, [pc, #52]	; (8015050 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801501a:	4620      	mov	r0, r4
 801501c:	6013      	str	r3, [r2, #0]
 801501e:	4a0d      	ldr	r2, [pc, #52]	; (8015054 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015020:	6033      	str	r3, [r6, #0]
 8015022:	6013      	str	r3, [r2, #0]
 8015024:	f7ff ffba 	bl	8014f9c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8015028:	4620      	mov	r0, r4
 801502a:	bd70      	pop	{r4, r5, r6, pc}
 801502c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015030:	2002      	movs	r0, #2
 8015032:	801a      	strh	r2, [r3, #0]
 8015034:	6030      	str	r0, [r6, #0]
 8015036:	f001 fa15 	bl	8016464 <_ZN8touchgfx6Screen4drawEv>
 801503a:	e7ec      	b.n	8015016 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801503c:	08025e4c 	.word	0x08025e4c
 8015040:	b5e8b5cd 	.word	0xb5e8b5cd
 8015044:	f407a5c2 	.word	0xf407a5c2
 8015048:	2400aeb0 	.word	0x2400aeb0
 801504c:	2400004e 	.word	0x2400004e
 8015050:	2400aec0 	.word	0x2400aec0
 8015054:	2400aeb4 	.word	0x2400aeb4

08015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015058:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801505c:	3b01      	subs	r3, #1
 801505e:	b29b      	uxth	r3, r3
 8015060:	428b      	cmp	r3, r1
 8015062:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015066:	b510      	push	{r4, lr}
 8015068:	d908      	bls.n	801507c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801506a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801506e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015072:	681a      	ldr	r2, [r3, #0]
 8015074:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015078:	685a      	ldr	r2, [r3, #4]
 801507a:	6062      	str	r2, [r4, #4]
 801507c:	bd10      	pop	{r4, pc}
	...

08015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015084:	b08f      	sub	sp, #60	; 0x3c
 8015086:	4b94      	ldr	r3, [pc, #592]	; (80152d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8015088:	4683      	mov	fp, r0
 801508a:	ac0a      	add	r4, sp, #40	; 0x28
 801508c:	e884 0006 	stmia.w	r4, {r1, r2}
 8015090:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015094:	4620      	mov	r0, r4
 8015096:	4b91      	ldr	r3, [pc, #580]	; (80152dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8015098:	f9b3 1000 	ldrsh.w	r1, [r3]
 801509c:	f7ff febc 	bl	8014e18 <_ZN8touchgfx4Rect10restrictToEss>
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7fd fe10 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d16a      	bne.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80150aa:	9403      	str	r4, [sp, #12]
 80150ac:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80150b0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80150b4:	2400      	movs	r4, #0
 80150b6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80150ba:	9301      	str	r3, [sp, #4]
 80150bc:	36a0      	adds	r6, #160	; 0xa0
 80150be:	42a5      	cmp	r5, r4
 80150c0:	d00d      	beq.n	80150de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80150c2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80150c6:	9803      	ldr	r0, [sp, #12]
 80150c8:	f7ff fef6 	bl	8014eb8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80150cc:	b128      	cbz	r0, 80150da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80150ce:	1e69      	subs	r1, r5, #1
 80150d0:	9801      	ldr	r0, [sp, #4]
 80150d2:	1b09      	subs	r1, r1, r4
 80150d4:	b289      	uxth	r1, r1
 80150d6:	f7ff ffbf 	bl	8015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80150da:	3401      	adds	r4, #1
 80150dc:	e7ef      	b.n	80150be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80150de:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80150e2:	1e7b      	subs	r3, r7, #1
 80150e4:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80150e8:	9704      	str	r7, [sp, #16]
 80150ea:	9302      	str	r3, [sp, #8]
 80150ec:	2400      	movs	r4, #0
 80150ee:	4655      	mov	r5, sl
 80150f0:	9705      	str	r7, [sp, #20]
 80150f2:	4626      	mov	r6, r4
 80150f4:	9b05      	ldr	r3, [sp, #20]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d078      	beq.n	80151ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80150fa:	9903      	ldr	r1, [sp, #12]
 80150fc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015100:	f7ff fe68 	bl	8014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015104:	b360      	cbz	r0, 8015160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8015106:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801510a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801510e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 8015112:	45e6      	cmp	lr, ip
 8015114:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 8015118:	db35      	blt.n	8015186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801511a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801511e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015122:	4472      	add	r2, lr
 8015124:	4463      	add	r3, ip
 8015126:	b212      	sxth	r2, r2
 8015128:	b21b      	sxth	r3, r3
 801512a:	429a      	cmp	r2, r3
 801512c:	dc2b      	bgt.n	8015186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801512e:	fa1f f288 	uxth.w	r2, r8
 8015132:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015136:	45c1      	cmp	r9, r8
 8015138:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801513c:	4413      	add	r3, r2
 801513e:	fa1f fc89 	uxth.w	ip, r9
 8015142:	b29b      	uxth	r3, r3
 8015144:	fa0f fe83 	sxth.w	lr, r3
 8015148:	db0f      	blt.n	801516a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801514a:	eba3 030c 	sub.w	r3, r3, ip
 801514e:	1ac9      	subs	r1, r1, r3
 8015150:	b209      	sxth	r1, r1
 8015152:	2900      	cmp	r1, #0
 8015154:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015158:	dd12      	ble.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801515a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801515e:	4604      	mov	r4, r0
 8015160:	9b05      	ldr	r3, [sp, #20]
 8015162:	3d08      	subs	r5, #8
 8015164:	3b01      	subs	r3, #1
 8015166:	9305      	str	r3, [sp, #20]
 8015168:	e7c4      	b.n	80150f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801516a:	4461      	add	r1, ip
 801516c:	b209      	sxth	r1, r1
 801516e:	4571      	cmp	r1, lr
 8015170:	dc3a      	bgt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015172:	eba2 020c 	sub.w	r2, r2, ip
 8015176:	b212      	sxth	r2, r2
 8015178:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801517c:	2a00      	cmp	r2, #0
 801517e:	dcee      	bgt.n	801515e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8015180:	b00f      	add	sp, #60	; 0x3c
 8015182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015186:	45c1      	cmp	r9, r8
 8015188:	db2e      	blt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801518a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801518e:	4499      	add	r9, r3
 8015190:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015194:	4498      	add	r8, r3
 8015196:	fa0f f989 	sxth.w	r9, r9
 801519a:	fa0f f888 	sxth.w	r8, r8
 801519e:	45c1      	cmp	r9, r8
 80151a0:	dc22      	bgt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80151a2:	fa1f f28c 	uxth.w	r2, ip
 80151a6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80151aa:	45e6      	cmp	lr, ip
 80151ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80151b0:	4413      	add	r3, r2
 80151b2:	fa1f f88e 	uxth.w	r8, lr
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	fa0f f983 	sxth.w	r9, r3
 80151bc:	db0a      	blt.n	80151d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80151be:	eba3 0308 	sub.w	r3, r3, r8
 80151c2:	1ac9      	subs	r1, r1, r3
 80151c4:	b209      	sxth	r1, r1
 80151c6:	2900      	cmp	r1, #0
 80151c8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80151cc:	ddd8      	ble.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80151ce:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80151d2:	e7c4      	b.n	801515e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80151d4:	4441      	add	r1, r8
 80151d6:	b209      	sxth	r1, r1
 80151d8:	4549      	cmp	r1, r9
 80151da:	dc05      	bgt.n	80151e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80151dc:	eba2 0208 	sub.w	r2, r2, r8
 80151e0:	b212      	sxth	r2, r2
 80151e2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80151e6:	e7c9      	b.n	801517c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80151e8:	4606      	mov	r6, r0
 80151ea:	e7b9      	b.n	8015160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80151ec:	2c00      	cmp	r4, #0
 80151ee:	f47f af7d 	bne.w	80150ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 80151f2:	2e00      	cmp	r6, #0
 80151f4:	f000 81e1 	beq.w	80155ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80151f8:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80151fc:	4655      	mov	r5, sl
 80151fe:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8015202:	b2b9      	uxth	r1, r7
 8015204:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8015208:	b2b3      	uxth	r3, r6
 801520a:	9105      	str	r1, [sp, #20]
 801520c:	9805      	ldr	r0, [sp, #20]
 801520e:	441a      	add	r2, r3
 8015210:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015214:	b292      	uxth	r2, r2
 8015216:	4401      	add	r1, r0
 8015218:	fa0f f882 	sxth.w	r8, r2
 801521c:	b289      	uxth	r1, r1
 801521e:	9106      	str	r1, [sp, #24]
 8015220:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 8015224:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015228:	9b04      	ldr	r3, [sp, #16]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d058      	beq.n	80152e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801522e:	9903      	ldr	r1, [sp, #12]
 8015230:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015234:	f7ff fdce 	bl	8014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015238:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801523c:	b1d8      	cbz	r0, 8015276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801523e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8015242:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8015246:	4576      	cmp	r6, lr
 8015248:	dc26      	bgt.n	8015298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801524a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801524e:	44f4      	add	ip, lr
 8015250:	fa0f fc8c 	sxth.w	ip, ip
 8015254:	45e0      	cmp	r8, ip
 8015256:	db1f      	blt.n	8015298 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015258:	428f      	cmp	r7, r1
 801525a:	fa1f fc81 	uxth.w	ip, r1
 801525e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8015262:	dc0f      	bgt.n	8015284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8015264:	9806      	ldr	r0, [sp, #24]
 8015266:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801526a:	eba0 0c0c 	sub.w	ip, r0, ip
 801526e:	eba1 010c 	sub.w	r1, r1, ip
 8015272:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8015276:	4620      	mov	r0, r4
 8015278:	9904      	ldr	r1, [sp, #16]
 801527a:	3d08      	subs	r5, #8
 801527c:	4604      	mov	r4, r0
 801527e:	3901      	subs	r1, #1
 8015280:	9104      	str	r1, [sp, #16]
 8015282:	e7cf      	b.n	8015224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8015284:	4461      	add	r1, ip
 8015286:	b209      	sxth	r1, r1
 8015288:	4549      	cmp	r1, r9
 801528a:	dcf5      	bgt.n	8015278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801528c:	9905      	ldr	r1, [sp, #20]
 801528e:	eba1 0c0c 	sub.w	ip, r1, ip
 8015292:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8015296:	e7ee      	b.n	8015276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015298:	428f      	cmp	r7, r1
 801529a:	dced      	bgt.n	8015278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801529c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80152a0:	4461      	add	r1, ip
 80152a2:	b209      	sxth	r1, r1
 80152a4:	4589      	cmp	r9, r1
 80152a6:	dbe7      	blt.n	8015278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80152a8:	4576      	cmp	r6, lr
 80152aa:	fa1f fc8e 	uxth.w	ip, lr
 80152ae:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80152b2:	dc08      	bgt.n	80152c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80152b4:	eba2 0c0c 	sub.w	ip, r2, ip
 80152b8:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80152bc:	eba1 010c 	sub.w	r1, r1, ip
 80152c0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80152c4:	e7d7      	b.n	8015276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80152c6:	4461      	add	r1, ip
 80152c8:	b209      	sxth	r1, r1
 80152ca:	4588      	cmp	r8, r1
 80152cc:	dbd4      	blt.n	8015278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80152ce:	eba3 0c0c 	sub.w	ip, r3, ip
 80152d2:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80152d6:	e7ce      	b.n	8015276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80152d8:	2400ae6a 	.word	0x2400ae6a
 80152dc:	2400ae68 	.word	0x2400ae68
 80152e0:	2c00      	cmp	r4, #0
 80152e2:	f000 816a 	beq.w	80155ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80152e6:	9b02      	ldr	r3, [sp, #8]
 80152e8:	3301      	adds	r3, #1
 80152ea:	f000 8166 	beq.w	80155ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80152ee:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80152f2:	9803      	ldr	r0, [sp, #12]
 80152f4:	4621      	mov	r1, r4
 80152f6:	f7ff fddf 	bl	8014eb8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80152fa:	b120      	cbz	r0, 8015306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 80152fc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015300:	9801      	ldr	r0, [sp, #4]
 8015302:	f7ff fea9 	bl	8015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015306:	9903      	ldr	r1, [sp, #12]
 8015308:	4620      	mov	r0, r4
 801530a:	f7ff fd63 	bl	8014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801530e:	2800      	cmp	r0, #0
 8015310:	f000 809b 	beq.w	801544a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015314:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 8015318:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801531c:	b281      	uxth	r1, r0
 801531e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8015322:	9309      	str	r3, [sp, #36]	; 0x24
 8015324:	eb01 0c03 	add.w	ip, r1, r3
 8015328:	b2ab      	uxth	r3, r5
 801532a:	4285      	cmp	r5, r0
 801532c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8015330:	fa1f f98c 	uxth.w	r9, ip
 8015334:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015338:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801533c:	eb03 040c 	add.w	r4, r3, ip
 8015340:	b2a4      	uxth	r4, r4
 8015342:	9405      	str	r4, [sp, #20]
 8015344:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8015348:	9404      	str	r4, [sp, #16]
 801534a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801534e:	f340 809a 	ble.w	8015486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 8015352:	1a5b      	subs	r3, r3, r1
 8015354:	4596      	cmp	lr, r2
 8015356:	fa0f f589 	sxth.w	r5, r9
 801535a:	b29b      	uxth	r3, r3
 801535c:	b21e      	sxth	r6, r3
 801535e:	dd2e      	ble.n	80153be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8015360:	9f02      	ldr	r7, [sp, #8]
 8015362:	fa1f fe8e 	uxth.w	lr, lr
 8015366:	b292      	uxth	r2, r2
 8015368:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801536c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015370:	9f04      	ldr	r7, [sp, #16]
 8015372:	ebae 0102 	sub.w	r1, lr, r2
 8015376:	4486      	add	lr, r0
 8015378:	1b7f      	subs	r7, r7, r5
 801537a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801537e:	b289      	uxth	r1, r1
 8015380:	442a      	add	r2, r5
 8015382:	fa0f fe8e 	sxth.w	lr, lr
 8015386:	b20c      	sxth	r4, r1
 8015388:	b212      	sxth	r2, r2
 801538a:	4367      	muls	r7, r4
 801538c:	ebae 0202 	sub.w	r2, lr, r2
 8015390:	4372      	muls	r2, r6
 8015392:	4297      	cmp	r7, r2
 8015394:	db09      	blt.n	80153aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8015396:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801539a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801539e:	449c      	add	ip, r3
 80153a0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80153a4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80153a8:	e680      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80153aa:	4401      	add	r1, r0
 80153ac:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80153b0:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 80153b4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80153b8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80153bc:	e676      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80153be:	9f04      	ldr	r7, [sp, #16]
 80153c0:	42bd      	cmp	r5, r7
 80153c2:	da27      	bge.n	8015414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80153c4:	9902      	ldr	r1, [sp, #8]
 80153c6:	1b7f      	subs	r7, r7, r5
 80153c8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80153cc:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 80153d0:	eb04 010e 	add.w	r1, r4, lr
 80153d4:	fa1f f881 	uxth.w	r8, r1
 80153d8:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80153dc:	4411      	add	r1, r2
 80153de:	fa0f f988 	sxth.w	r9, r8
 80153e2:	eba2 020e 	sub.w	r2, r2, lr
 80153e6:	eba1 0108 	sub.w	r1, r1, r8
 80153ea:	4372      	muls	r2, r6
 80153ec:	b289      	uxth	r1, r1
 80153ee:	fa0f f881 	sxth.w	r8, r1
 80153f2:	fb08 f707 	mul.w	r7, r8, r7
 80153f6:	42ba      	cmp	r2, r7
 80153f8:	dc06      	bgt.n	8015408 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80153fa:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 80153fe:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 8015402:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 8015406:	e7ca      	b.n	801539e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8015408:	4421      	add	r1, r4
 801540a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801540e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015412:	e64b      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015414:	9d05      	ldr	r5, [sp, #20]
 8015416:	2c06      	cmp	r4, #6
 8015418:	eba9 0505 	sub.w	r5, r9, r5
 801541c:	b2ad      	uxth	r5, r5
 801541e:	fa0f fe85 	sxth.w	lr, r5
 8015422:	d818      	bhi.n	8015456 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8015424:	9b04      	ldr	r3, [sp, #16]
 8015426:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801542a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801542e:	1c63      	adds	r3, r4, #1
 8015430:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8015434:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015438:	9b01      	ldr	r3, [sp, #4]
 801543a:	9d01      	ldr	r5, [sp, #4]
 801543c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015440:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8015444:	805a      	strh	r2, [r3, #2]
 8015446:	809e      	strh	r6, [r3, #4]
 8015448:	80d9      	strh	r1, [r3, #6]
 801544a:	9b02      	ldr	r3, [sp, #8]
 801544c:	f1aa 0a08 	sub.w	sl, sl, #8
 8015450:	3b01      	subs	r3, #1
 8015452:	9302      	str	r3, [sp, #8]
 8015454:	e747      	b.n	80152e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8015456:	9a02      	ldr	r2, [sp, #8]
 8015458:	45b6      	cmp	lr, r6
 801545a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801545e:	db0d      	blt.n	801547c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8015460:	449c      	add	ip, r3
 8015462:	445a      	add	r2, fp
 8015464:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8015468:	fa1f fc8c 	uxth.w	ip, ip
 801546c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8015470:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015474:	448c      	add	ip, r1
 8015476:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801547a:	e617      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801547c:	445a      	add	r2, fp
 801547e:	44ac      	add	ip, r5
 8015480:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8015484:	e78e      	b.n	80153a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015486:	fa1f f18e 	uxth.w	r1, lr
 801548a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801548e:	b293      	uxth	r3, r2
 8015490:	4596      	cmp	lr, r2
 8015492:	eb01 0806 	add.w	r8, r1, r6
 8015496:	9306      	str	r3, [sp, #24]
 8015498:	fa1f f888 	uxth.w	r8, r8
 801549c:	9f06      	ldr	r7, [sp, #24]
 801549e:	fa0f f388 	sxth.w	r3, r8
 80154a2:	9307      	str	r3, [sp, #28]
 80154a4:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 80154a8:	443b      	add	r3, r7
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	9308      	str	r3, [sp, #32]
 80154ae:	da25      	bge.n	80154fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 80154b0:	9905      	ldr	r1, [sp, #20]
 80154b2:	eba3 0308 	sub.w	r3, r3, r8
 80154b6:	eba2 020e 	sub.w	r2, r2, lr
 80154ba:	1b40      	subs	r0, r0, r5
 80154bc:	eba9 0401 	sub.w	r4, r9, r1
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	b2a4      	uxth	r4, r4
 80154c4:	b219      	sxth	r1, r3
 80154c6:	fa0f f984 	sxth.w	r9, r4
 80154ca:	4348      	muls	r0, r1
 80154cc:	fb09 f202 	mul.w	r2, r9, r2
 80154d0:	4282      	cmp	r2, r0
 80154d2:	9a02      	ldr	r2, [sp, #8]
 80154d4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80154d8:	445a      	add	r2, fp
 80154da:	dc06      	bgt.n	80154ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80154dc:	9b07      	ldr	r3, [sp, #28]
 80154de:	44a4      	add	ip, r4
 80154e0:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 80154e4:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 80154e8:	e75c      	b.n	80153a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80154ea:	9904      	ldr	r1, [sp, #16]
 80154ec:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80154f0:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80154f4:	4433      	add	r3, r6
 80154f6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80154fa:	e5d7      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80154fc:	9f06      	ldr	r7, [sp, #24]
 80154fe:	9b04      	ldr	r3, [sp, #16]
 8015500:	1bc9      	subs	r1, r1, r7
 8015502:	fa0f f789 	sxth.w	r7, r9
 8015506:	b289      	uxth	r1, r1
 8015508:	429f      	cmp	r7, r3
 801550a:	fa0f fe81 	sxth.w	lr, r1
 801550e:	dd22      	ble.n	8015556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 8015510:	9a05      	ldr	r2, [sp, #20]
 8015512:	1b40      	subs	r0, r0, r5
 8015514:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015518:	eba9 0202 	sub.w	r2, r9, r2
 801551c:	9d07      	ldr	r5, [sp, #28]
 801551e:	fb0e f000 	mul.w	r0, lr, r0
 8015522:	b292      	uxth	r2, r2
 8015524:	eba5 0a03 	sub.w	sl, r5, r3
 8015528:	9b02      	ldr	r3, [sp, #8]
 801552a:	b214      	sxth	r4, r2
 801552c:	00db      	lsls	r3, r3, #3
 801552e:	fb04 fa0a 	mul.w	sl, r4, sl
 8015532:	445b      	add	r3, fp
 8015534:	4550      	cmp	r0, sl
 8015536:	db03      	blt.n	8015540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8015538:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801553c:	4494      	add	ip, r2
 801553e:	e731      	b.n	80153a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015540:	9a04      	ldr	r2, [sp, #16]
 8015542:	4431      	add	r1, r6
 8015544:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8015548:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801554c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8015550:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015554:	e75b      	b.n	801540e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8015556:	9b08      	ldr	r3, [sp, #32]
 8015558:	2c06      	cmp	r4, #6
 801555a:	eba3 0308 	sub.w	r3, r3, r8
 801555e:	b29b      	uxth	r3, r3
 8015560:	b21d      	sxth	r5, r3
 8015562:	d813      	bhi.n	801558c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8015564:	9b07      	ldr	r3, [sp, #28]
 8015566:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801556a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801556e:	1c63      	adds	r3, r4, #1
 8015570:	9901      	ldr	r1, [sp, #4]
 8015572:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015576:	9b01      	ldr	r3, [sp, #4]
 8015578:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801557c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015580:	805a      	strh	r2, [r3, #2]
 8015582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015584:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015588:	809a      	strh	r2, [r3, #4]
 801558a:	e75e      	b.n	801544a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801558c:	9802      	ldr	r0, [sp, #8]
 801558e:	4575      	cmp	r5, lr
 8015590:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8015594:	db0d      	blt.n	80155b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8015596:	4431      	add	r1, r6
 8015598:	9b06      	ldr	r3, [sp, #24]
 801559a:	4458      	add	r0, fp
 801559c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80155a0:	b289      	uxth	r1, r1
 80155a2:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 80155a6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80155aa:	4419      	add	r1, r3
 80155ac:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 80155b0:	e57c      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80155b2:	4458      	add	r0, fp
 80155b4:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 80155b8:	e79c      	b.n	80154f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 80155ba:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 80155be:	2e07      	cmp	r6, #7
 80155c0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80155c4:	d812      	bhi.n	80155ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 80155c6:	1c75      	adds	r5, r6, #1
 80155c8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80155cc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80155d0:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80155d4:	9d01      	ldr	r5, [sp, #4]
 80155d6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80155da:	442c      	add	r4, r5
 80155dc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80155e0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80155e4:	8061      	strh	r1, [r4, #2]
 80155e6:	80a2      	strh	r2, [r4, #4]
 80155e8:	80e3      	strh	r3, [r4, #6]
 80155ea:	e5c9      	b.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80155ec:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80155f0:	3e01      	subs	r6, #1
 80155f2:	445c      	add	r4, fp
 80155f4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80155f8:	f04f 37ff 	mov.w	r7, #4294967295
 80155fc:	2500      	movs	r5, #0
 80155fe:	9305      	str	r3, [sp, #20]
 8015600:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8015604:	1e72      	subs	r2, r6, #1
 8015606:	9302      	str	r3, [sp, #8]
 8015608:	4691      	mov	r9, r2
 801560a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801560e:	9304      	str	r3, [sp, #16]
 8015610:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 8015614:	f1b9 3fff 	cmp.w	r9, #4294967295
 8015618:	6818      	ldr	r0, [r3, #0]
 801561a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801561e:	9207      	str	r2, [sp, #28]
 8015620:	bf16      	itet	ne
 8015622:	9905      	ldrne	r1, [sp, #20]
 8015624:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8015628:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801562c:	9306      	str	r3, [sp, #24]
 801562e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8015632:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015636:	fb18 f801 	smulbb	r8, r8, r1
 801563a:	6859      	ldr	r1, [r3, #4]
 801563c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8015640:	4671      	mov	r1, lr
 8015642:	a80c      	add	r0, sp, #48	; 0x30
 8015644:	f7ff fc5e 	bl	8014f04 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015648:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801564c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015650:	f04f 0c08 	mov.w	ip, #8
 8015654:	9b04      	ldr	r3, [sp, #16]
 8015656:	9a02      	ldr	r2, [sp, #8]
 8015658:	fb10 f001 	smulbb	r0, r0, r1
 801565c:	fb02 8803 	mla	r8, r2, r3, r8
 8015660:	eba0 0108 	sub.w	r1, r0, r8
 8015664:	fb90 f0fc 	sdiv	r0, r0, ip
 8015668:	4288      	cmp	r0, r1
 801566a:	dc20      	bgt.n	80156ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801566c:	4551      	cmp	r1, sl
 801566e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015672:	da03      	bge.n	801567c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8015674:	b1d9      	cbz	r1, 80156ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8015676:	468a      	mov	sl, r1
 8015678:	464f      	mov	r7, r9
 801567a:	4635      	mov	r5, r6
 801567c:	f109 39ff 	add.w	r9, r9, #4294967295
 8015680:	f119 0f02 	cmn.w	r9, #2
 8015684:	d1c6      	bne.n	8015614 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8015686:	4616      	mov	r6, r2
 8015688:	3201      	adds	r2, #1
 801568a:	f1a4 0408 	sub.w	r4, r4, #8
 801568e:	d1b7      	bne.n	8015600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8015690:	9b01      	ldr	r3, [sp, #4]
 8015692:	b2ac      	uxth	r4, r5
 8015694:	00ed      	lsls	r5, r5, #3
 8015696:	1958      	adds	r0, r3, r5
 8015698:	1c7b      	adds	r3, r7, #1
 801569a:	d10b      	bne.n	80156b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801569c:	4601      	mov	r1, r0
 801569e:	9803      	ldr	r0, [sp, #12]
 80156a0:	f7ff fc30 	bl	8014f04 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80156a4:	4621      	mov	r1, r4
 80156a6:	9801      	ldr	r0, [sp, #4]
 80156a8:	f7ff fcd6 	bl	8015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80156ac:	e4fe      	b.n	80150ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80156ae:	464f      	mov	r7, r9
 80156b0:	4635      	mov	r5, r6
 80156b2:	e7ed      	b.n	8015690 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80156b4:	9b01      	ldr	r3, [sp, #4]
 80156b6:	00ff      	lsls	r7, r7, #3
 80156b8:	445d      	add	r5, fp
 80156ba:	19d9      	adds	r1, r3, r7
 80156bc:	445f      	add	r7, fp
 80156be:	f7ff fc21 	bl	8014f04 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80156c2:	9b03      	ldr	r3, [sp, #12]
 80156c4:	cb03      	ldmia	r3!, {r0, r1}
 80156c6:	9b03      	ldr	r3, [sp, #12]
 80156c8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 80156cc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80156d0:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80156d4:	6869      	ldr	r1, [r5, #4]
 80156d6:	c303      	stmia	r3!, {r0, r1}
 80156d8:	e7e4      	b.n	80156a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80156da:	bf00      	nop

080156dc <_ZN8touchgfx11Application10invalidateEv>:
 80156dc:	4b09      	ldr	r3, [pc, #36]	; (8015704 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80156de:	b082      	sub	sp, #8
 80156e0:	2100      	movs	r1, #0
 80156e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156e6:	4b08      	ldr	r3, [pc, #32]	; (8015708 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80156e8:	9100      	str	r1, [sp, #0]
 80156ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156ee:	f8ad 2004 	strh.w	r2, [sp, #4]
 80156f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80156f6:	ab02      	add	r3, sp, #8
 80156f8:	e913 0006 	ldmdb	r3, {r1, r2}
 80156fc:	b002      	add	sp, #8
 80156fe:	f7ff bcbf 	b.w	8015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015702:	bf00      	nop
 8015704:	2400ae68 	.word	0x2400ae68
 8015708:	2400ae6a 	.word	0x2400ae6a

0801570c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801570c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015710:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8015714:	b09b      	sub	sp, #108	; 0x6c
 8015716:	4604      	mov	r4, r0
 8015718:	4630      	mov	r0, r6
 801571a:	f7fd fad4 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801571e:	4605      	mov	r5, r0
 8015720:	b940      	cbnz	r0, 8015734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8015722:	4620      	mov	r0, r4
 8015724:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015728:	f7ff fcaa 	bl	8015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801572c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8015730:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8015734:	4bc8      	ldr	r3, [pc, #800]	; (8015a58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d03e      	beq.n	80157ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801573c:	4dc7      	ldr	r5, [pc, #796]	; (8015a5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801573e:	4628      	mov	r0, r5
 8015740:	f7fd fac1 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015744:	4606      	mov	r6, r0
 8015746:	2800      	cmp	r0, #0
 8015748:	d137      	bne.n	80157ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801574a:	4628      	mov	r0, r5
 801574c:	f7ff fa0c 	bl	8014b68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015750:	6829      	ldr	r1, [r5, #0]
 8015752:	686a      	ldr	r2, [r5, #4]
 8015754:	4620      	mov	r0, r4
 8015756:	f7ff fc93 	bl	8015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801575a:	802e      	strh	r6, [r5, #0]
 801575c:	806e      	strh	r6, [r5, #2]
 801575e:	80ae      	strh	r6, [r5, #4]
 8015760:	80ee      	strh	r6, [r5, #6]
 8015762:	ae09      	add	r6, sp, #36	; 0x24
 8015764:	4630      	mov	r0, r6
 8015766:	f7ff fc24 	bl	8014fb2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801576a:	4abd      	ldr	r2, [pc, #756]	; (8015a60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801576c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8015770:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8015774:	8815      	ldrh	r5, [r2, #0]
 8015776:	9202      	str	r2, [sp, #8]
 8015778:	462b      	mov	r3, r5
 801577a:	429f      	cmp	r7, r3
 801577c:	d924      	bls.n	80157c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801577e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8015782:	2907      	cmp	r1, #7
 8015784:	d816      	bhi.n	80157b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8015786:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801578a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801578e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8015792:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8015796:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801579a:	1c4a      	adds	r2, r1, #1
 801579c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 80157a0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 80157a4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 80157a8:	f8a2 9002 	strh.w	r9, [r2, #2]
 80157ac:	f8a2 e004 	strh.w	lr, [r2, #4]
 80157b0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80157b4:	3301      	adds	r3, #1
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	e7df      	b.n	801577a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 80157ba:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d1cf      	bne.n	8015762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 80157c2:	b01b      	add	sp, #108	; 0x6c
 80157c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c8:	462f      	mov	r7, r5
 80157ca:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80157ce:	42bb      	cmp	r3, r7
 80157d0:	d90b      	bls.n	80157ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 80157d2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80157d6:	3701      	adds	r7, #1
 80157d8:	4620      	mov	r0, r4
 80157da:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80157de:	b2bf      	uxth	r7, r7
 80157e0:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80157e4:	f7ff fc4c 	bl	8015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80157e8:	e7ef      	b.n	80157ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80157ea:	4a9e      	ldr	r2, [pc, #632]	; (8015a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80157ec:	6813      	ldr	r3, [r2, #0]
 80157ee:	4690      	mov	r8, r2
 80157f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157f4:	2b01      	cmp	r3, #1
 80157f6:	f040 80e4 	bne.w	80159c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80157fa:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80157fe:	4629      	mov	r1, r5
 8015800:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8015804:	2500      	movs	r5, #0
 8015806:	33aa      	adds	r3, #170	; 0xaa
 8015808:	428f      	cmp	r7, r1
 801580a:	f103 0308 	add.w	r3, r3, #8
 801580e:	dd0a      	ble.n	8015826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8015810:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8015814:	3101      	adds	r1, #1
 8015816:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801581a:	4402      	add	r2, r0
 801581c:	b212      	sxth	r2, r2
 801581e:	4295      	cmp	r5, r2
 8015820:	bfb8      	it	lt
 8015822:	4615      	movlt	r5, r2
 8015824:	e7f0      	b.n	8015808 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8015826:	4b90      	ldr	r3, [pc, #576]	; (8015a68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8015828:	f8df b238 	ldr.w	fp, [pc, #568]	; 8015a64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801582c:	881b      	ldrh	r3, [r3, #0]
 801582e:	46d8      	mov	r8, fp
 8015830:	2b0f      	cmp	r3, #15
 8015832:	bf8c      	ite	hi
 8015834:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8015838:	f04f 0a01 	movls.w	sl, #1
 801583c:	2300      	movs	r3, #0
 801583e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015842:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8015846:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801584a:	4438      	add	r0, r7
 801584c:	b207      	sxth	r7, r0
 801584e:	f8db 0000 	ldr.w	r0, [fp]
 8015852:	42bd      	cmp	r5, r7
 8015854:	6803      	ldr	r3, [r0, #0]
 8015856:	f340 8084 	ble.w	8015962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801585a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801585e:	4798      	blx	r3
 8015860:	eb07 030a 	add.w	r3, r7, sl
 8015864:	4298      	cmp	r0, r3
 8015866:	da07      	bge.n	8015878 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8015868:	4285      	cmp	r5, r0
 801586a:	dd05      	ble.n	8015878 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801586c:	4287      	cmp	r7, r0
 801586e:	dd6d      	ble.n	801594c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015870:	2f00      	cmp	r7, #0
 8015872:	dd6b      	ble.n	801594c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015874:	4628      	mov	r0, r5
 8015876:	e004      	b.n	8015882 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8015878:	4287      	cmp	r7, r0
 801587a:	dcfb      	bgt.n	8015874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801587c:	42a8      	cmp	r0, r5
 801587e:	bfa8      	it	ge
 8015880:	4628      	movge	r0, r5
 8015882:	4b7a      	ldr	r3, [pc, #488]	; (8015a6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8015884:	1bc0      	subs	r0, r0, r7
 8015886:	2200      	movs	r2, #0
 8015888:	f8ad 7016 	strh.w	r7, [sp, #22]
 801588c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015890:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015894:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015898:	9b02      	ldr	r3, [sp, #8]
 801589a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801589e:	881f      	ldrh	r7, [r3, #0]
 80158a0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80158a4:	42bb      	cmp	r3, r7
 80158a6:	d9cc      	bls.n	8015842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80158a8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80158ac:	ab07      	add	r3, sp, #28
 80158ae:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80158b2:	6851      	ldr	r1, [r2, #4]
 80158b4:	c303      	stmia	r3!, {r0, r1}
 80158b6:	a905      	add	r1, sp, #20
 80158b8:	a807      	add	r0, sp, #28
 80158ba:	f7ff fa8b 	bl	8014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80158be:	2800      	cmp	r0, #0
 80158c0:	d04c      	beq.n	801595c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80158c2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80158c6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80158ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 80158ce:	4686      	mov	lr, r0
 80158d0:	4290      	cmp	r0, r2
 80158d2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80158d6:	4448      	add	r0, r9
 80158d8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80158dc:	bfb8      	it	lt
 80158de:	4696      	movlt	lr, r2
 80158e0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80158e4:	444a      	add	r2, r9
 80158e6:	b280      	uxth	r0, r0
 80158e8:	4299      	cmp	r1, r3
 80158ea:	468c      	mov	ip, r1
 80158ec:	b292      	uxth	r2, r2
 80158ee:	9303      	str	r3, [sp, #12]
 80158f0:	bfb8      	it	lt
 80158f2:	469c      	movlt	ip, r3
 80158f4:	b203      	sxth	r3, r0
 80158f6:	fa0f f982 	sxth.w	r9, r2
 80158fa:	f8ad e01c 	strh.w	lr, [sp, #28]
 80158fe:	f8ad c01e 	strh.w	ip, [sp, #30]
 8015902:	454b      	cmp	r3, r9
 8015904:	bfb8      	it	lt
 8015906:	4602      	movlt	r2, r0
 8015908:	9b03      	ldr	r3, [sp, #12]
 801590a:	eba2 020e 	sub.w	r2, r2, lr
 801590e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015912:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8015916:	4411      	add	r1, r2
 8015918:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801591c:	4413      	add	r3, r2
 801591e:	b289      	uxth	r1, r1
 8015920:	b29b      	uxth	r3, r3
 8015922:	b208      	sxth	r0, r1
 8015924:	b21a      	sxth	r2, r3
 8015926:	4290      	cmp	r0, r2
 8015928:	bfb8      	it	lt
 801592a:	460b      	movlt	r3, r1
 801592c:	eba3 030c 	sub.w	r3, r3, ip
 8015930:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015934:	a807      	add	r0, sp, #28
 8015936:	f7fd f9c6 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801593a:	b920      	cbnz	r0, 8015946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801593c:	6823      	ldr	r3, [r4, #0]
 801593e:	a907      	add	r1, sp, #28
 8015940:	4620      	mov	r0, r4
 8015942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015944:	4798      	blx	r3
 8015946:	3701      	adds	r7, #1
 8015948:	b2bf      	uxth	r7, r7
 801594a:	e7a9      	b.n	80158a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801594c:	f8d8 0000 	ldr.w	r0, [r8]
 8015950:	2101      	movs	r1, #1
 8015952:	6803      	ldr	r3, [r0, #0]
 8015954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015958:	4798      	blx	r3
 801595a:	e772      	b.n	8015842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801595c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015960:	e7e8      	b.n	8015934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8015962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015964:	4798      	blx	r3
 8015966:	4b42      	ldr	r3, [pc, #264]	; (8015a70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	f43f af29 	beq.w	80157c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015970:	2300      	movs	r3, #0
 8015972:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8015976:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801597a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801597e:	9b02      	ldr	r3, [sp, #8]
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	429d      	cmp	r5, r3
 8015984:	f67f af1d 	bls.w	80157c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015988:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801598c:	2907      	cmp	r1, #7
 801598e:	d815      	bhi.n	80159bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8015990:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8015994:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8015998:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801599c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80159a0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80159a4:	1c4a      	adds	r2, r1, #1
 80159a6:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 80159aa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80159ae:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 80159b2:	f8a2 e002 	strh.w	lr, [r2, #2]
 80159b6:	f8a2 c004 	strh.w	ip, [r2, #4]
 80159ba:	80d7      	strh	r7, [r2, #6]
 80159bc:	3301      	adds	r3, #1
 80159be:	b29b      	uxth	r3, r3
 80159c0:	e7df      	b.n	8015982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	f040 8135 	bne.w	8015c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80159c8:	4b2a      	ldr	r3, [pc, #168]	; (8015a74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 80159ca:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	f000 809c 	beq.w	8015b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80159d6:	9b02      	ldr	r3, [sp, #8]
 80159d8:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 80159dc:	f8b3 b000 	ldrh.w	fp, [r3]
 80159e0:	f10b 0b01 	add.w	fp, fp, #1
 80159e4:	fa1f fb8b 	uxth.w	fp, fp
 80159e8:	2a00      	cmp	r2, #0
 80159ea:	d0bc      	beq.n	8015966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80159ec:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 80159f0:	4659      	mov	r1, fp
 80159f2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 80159f6:	f04f 0800 	mov.w	r8, #0
 80159fa:	441d      	add	r5, r3
 80159fc:	b22d      	sxth	r5, r5
 80159fe:	b28b      	uxth	r3, r1
 8015a00:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015a04:	429a      	cmp	r2, r3
 8015a06:	f240 80c0 	bls.w	8015b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8015a0a:	4427      	add	r7, r4
 8015a0c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8015a10:	4608      	mov	r0, r1
 8015a12:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8015a16:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8015a1a:	4563      	cmp	r3, ip
 8015a1c:	f340 80a2 	ble.w	8015b64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8015a20:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8015a24:	4465      	add	r5, ip
 8015a26:	b22d      	sxth	r5, r5
 8015a28:	429d      	cmp	r5, r3
 8015a2a:	bfa8      	it	ge
 8015a2c:	461d      	movge	r5, r3
 8015a2e:	3101      	adds	r1, #1
 8015a30:	4680      	mov	r8, r0
 8015a32:	e7e4      	b.n	80159fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8015a34:	d10b      	bne.n	8015a4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8015a36:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8015a3a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8015a3e:	458c      	cmp	ip, r1
 8015a40:	bfb4      	ite	lt
 8015a42:	469c      	movlt	ip, r3
 8015a44:	46bc      	movge	ip, r7
 8015a46:	4572      	cmp	r2, lr
 8015a48:	bfb8      	it	lt
 8015a4a:	4672      	movlt	r2, lr
 8015a4c:	e087      	b.n	8015b5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015a4e:	428a      	cmp	r2, r1
 8015a50:	46bc      	mov	ip, r7
 8015a52:	bfb8      	it	lt
 8015a54:	460a      	movlt	r2, r1
 8015a56:	e082      	b.n	8015b5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015a58:	2400aeac 	.word	0x2400aeac
 8015a5c:	2400aeb8 	.word	0x2400aeb8
 8015a60:	2400004e 	.word	0x2400004e
 8015a64:	2400ae74 	.word	0x2400ae74
 8015a68:	2400ae6a 	.word	0x2400ae6a
 8015a6c:	2400ae68 	.word	0x2400ae68
 8015a70:	2400ae72 	.word	0x2400ae72
 8015a74:	2400ae6c 	.word	0x2400ae6c
 8015a78:	1961      	adds	r1, r4, r5
 8015a7a:	ab07      	add	r3, sp, #28
 8015a7c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8015a80:	6849      	ldr	r1, [r1, #4]
 8015a82:	c303      	stmia	r3!, {r0, r1}
 8015a84:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015a88:	a807      	add	r0, sp, #28
 8015a8a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015a8e:	2b13      	cmp	r3, #19
 8015a90:	440b      	add	r3, r1
 8015a92:	bfd8      	it	le
 8015a94:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015a98:	1a9b      	subs	r3, r3, r2
 8015a9a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015a9e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015aa2:	f7ff f87b 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015aa6:	a807      	add	r0, sp, #28
 8015aa8:	f7fd f90d 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015aac:	bb78      	cbnz	r0, 8015b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015aae:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015ab2:	4425      	add	r5, r4
 8015ab4:	f8d8 0000 	ldr.w	r0, [r8]
 8015ab8:	f1bc 0f14 	cmp.w	ip, #20
 8015abc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8015ac4:	bfa8      	it	ge
 8015ac6:	f04f 0c14 	movge.w	ip, #20
 8015aca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015ace:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015ad2:	fa1f fc8c 	uxth.w	ip, ip
 8015ad6:	f8cd c000 	str.w	ip, [sp]
 8015ada:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8015ade:	47d0      	blx	sl
 8015ae0:	4682      	mov	sl, r0
 8015ae2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015ae6:	a807      	add	r0, sp, #28
 8015ae8:	f7ff f83e 	bl	8014b68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015aec:	6823      	ldr	r3, [r4, #0]
 8015aee:	4620      	mov	r0, r4
 8015af0:	a907      	add	r1, sp, #28
 8015af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015af4:	4798      	blx	r3
 8015af6:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8015afa:	eba0 000a 	sub.w	r0, r0, sl
 8015afe:	b200      	sxth	r0, r0
 8015b00:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8015b04:	b918      	cbnz	r0, 8015b0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015b06:	b2b9      	uxth	r1, r7
 8015b08:	4648      	mov	r0, r9
 8015b0a:	f7ff faa5 	bl	8015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015b0e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8015b12:	f1bb 0f00 	cmp.w	fp, #0
 8015b16:	f43f af26 	beq.w	8015966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015b1a:	9b02      	ldr	r3, [sp, #8]
 8015b1c:	2700      	movs	r7, #0
 8015b1e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8015b22:	881b      	ldrh	r3, [r3, #0]
 8015b24:	3301      	adds	r3, #1
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	b299      	uxth	r1, r3
 8015b2a:	00fd      	lsls	r5, r7, #3
 8015b2c:	458b      	cmp	fp, r1
 8015b2e:	d9a3      	bls.n	8015a78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8015b30:	4425      	add	r5, r4
 8015b32:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8015b36:	469c      	mov	ip, r3
 8015b38:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8015b3c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8015b40:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8015b44:	4408      	add	r0, r1
 8015b46:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8015b4a:	4471      	add	r1, lr
 8015b4c:	b200      	sxth	r0, r0
 8015b4e:	b209      	sxth	r1, r1
 8015b50:	4288      	cmp	r0, r1
 8015b52:	f6bf af6f 	bge.w	8015a34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8015b56:	4586      	cmp	lr, r0
 8015b58:	4672      	mov	r2, lr
 8015b5a:	bfb8      	it	lt
 8015b5c:	4602      	movlt	r2, r0
 8015b5e:	3301      	adds	r3, #1
 8015b60:	4667      	mov	r7, ip
 8015b62:	e7e1      	b.n	8015b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8015b64:	d10c      	bne.n	8015b80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8015b66:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8015b6a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8015b6e:	4287      	cmp	r7, r0
 8015b70:	bfb4      	ite	lt
 8015b72:	4608      	movlt	r0, r1
 8015b74:	4640      	movge	r0, r8
 8015b76:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8015b7a:	443b      	add	r3, r7
 8015b7c:	b21b      	sxth	r3, r3
 8015b7e:	e753      	b.n	8015a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8015b80:	4565      	cmp	r5, ip
 8015b82:	4640      	mov	r0, r8
 8015b84:	bfa8      	it	ge
 8015b86:	4665      	movge	r5, ip
 8015b88:	e751      	b.n	8015a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8015b8a:	eb09 0007 	add.w	r0, r9, r7
 8015b8e:	4427      	add	r7, r4
 8015b90:	9203      	str	r2, [sp, #12]
 8015b92:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8015b96:	f1ba 0f13 	cmp.w	sl, #19
 8015b9a:	bfde      	ittt	le
 8015b9c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8015ba0:	4455      	addle	r5, sl
 8015ba2:	b22d      	sxthle	r5, r5
 8015ba4:	f7fd f88f 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ba8:	9a03      	ldr	r2, [sp, #12]
 8015baa:	2800      	cmp	r0, #0
 8015bac:	f47f af1c 	bne.w	80159e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8015bb0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8015bb4:	fa1f fa8a 	uxth.w	sl, sl
 8015bb8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015bbc:	1aad      	subs	r5, r5, r2
 8015bbe:	4829      	ldr	r0, [pc, #164]	; (8015c64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8015bc0:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8015bc4:	2d14      	cmp	r5, #20
 8015bc6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8015bca:	6800      	ldr	r0, [r0, #0]
 8015bcc:	bfa8      	it	ge
 8015bce:	2514      	movge	r5, #20
 8015bd0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015bd4:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015bd8:	b289      	uxth	r1, r1
 8015bda:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015bde:	b2ad      	uxth	r5, r5
 8015be0:	f8d0 c000 	ldr.w	ip, [r0]
 8015be4:	b292      	uxth	r2, r2
 8015be6:	4555      	cmp	r5, sl
 8015be8:	bf94      	ite	ls
 8015bea:	9500      	strls	r5, [sp, #0]
 8015bec:	f8cd a000 	strhi.w	sl, [sp]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8015bf6:	47a8      	blx	r5
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015bfe:	a907      	add	r1, sp, #28
 8015c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c02:	4620      	mov	r0, r4
 8015c04:	4798      	blx	r3
 8015c06:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015c0a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8015c0e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8015c12:	1a5b      	subs	r3, r3, r1
 8015c14:	440a      	add	r2, r1
 8015c16:	b21b      	sxth	r3, r3
 8015c18:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8015c1c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	f47f aed8 	bne.w	80159d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015c26:	fa1f f188 	uxth.w	r1, r8
 8015c2a:	4648      	mov	r0, r9
 8015c2c:	f7ff fa14 	bl	8015058 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c30:	e6d1      	b.n	80159d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015c32:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015c36:	42ab      	cmp	r3, r5
 8015c38:	f67f ae95 	bls.w	8015966 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015c3c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015c40:	ab07      	add	r3, sp, #28
 8015c42:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015c46:	6851      	ldr	r1, [r2, #4]
 8015c48:	c303      	stmia	r3!, {r0, r1}
 8015c4a:	a807      	add	r0, sp, #28
 8015c4c:	f7fd f83b 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c50:	b920      	cbnz	r0, 8015c5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8015c52:	6823      	ldr	r3, [r4, #0]
 8015c54:	a907      	add	r1, sp, #28
 8015c56:	4620      	mov	r0, r4
 8015c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c5a:	4798      	blx	r3
 8015c5c:	3501      	adds	r5, #1
 8015c5e:	b2ad      	uxth	r5, r5
 8015c60:	e7e7      	b.n	8015c32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015c62:	bf00      	nop
 8015c64:	2400ae74 	.word	0x2400ae74

08015c68 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015c68:	4b03      	ldr	r3, [pc, #12]	; (8015c78 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	801a      	strh	r2, [r3, #0]
 8015c6e:	805a      	strh	r2, [r3, #2]
 8015c70:	809a      	strh	r2, [r3, #4]
 8015c72:	80da      	strh	r2, [r3, #6]
 8015c74:	4770      	bx	lr
 8015c76:	bf00      	nop
 8015c78:	2400aeb8 	.word	0x2400aeb8

08015c7c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c80:	b09d      	sub	sp, #116	; 0x74
 8015c82:	4606      	mov	r6, r0
 8015c84:	4614      	mov	r4, r2
 8015c86:	468a      	mov	sl, r1
 8015c88:	a803      	add	r0, sp, #12
 8015c8a:	461d      	mov	r5, r3
 8015c8c:	f000 fd64 	bl	8016758 <_ZN8touchgfx12TextProviderC1Ev>
 8015c90:	6833      	ldr	r3, [r6, #0]
 8015c92:	4630      	mov	r0, r6
 8015c94:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8015c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c9a:	4798      	blx	r3
 8015c9c:	6833      	ldr	r3, [r6, #0]
 8015c9e:	4607      	mov	r7, r0
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ca4:	4798      	blx	r3
 8015ca6:	462a      	mov	r2, r5
 8015ca8:	2500      	movs	r5, #0
 8015caa:	4621      	mov	r1, r4
 8015cac:	9000      	str	r0, [sp, #0]
 8015cae:	463b      	mov	r3, r7
 8015cb0:	462c      	mov	r4, r5
 8015cb2:	46a9      	mov	r9, r5
 8015cb4:	46a8      	mov	r8, r5
 8015cb6:	a803      	add	r0, sp, #12
 8015cb8:	f000 fda1 	bl	80167fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	9302      	str	r3, [sp, #8]
 8015cc0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015cc4:	429c      	cmp	r4, r3
 8015cc6:	d002      	beq.n	8015cce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015cc8:	455c      	cmp	r4, fp
 8015cca:	bf18      	it	ne
 8015ccc:	4625      	movne	r5, r4
 8015cce:	ab02      	add	r3, sp, #8
 8015cd0:	4632      	mov	r2, r6
 8015cd2:	4651      	mov	r1, sl
 8015cd4:	a803      	add	r0, sp, #12
 8015cd6:	f001 f887 	bl	8016de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015cda:	4604      	mov	r4, r0
 8015cdc:	b108      	cbz	r0, 8015ce2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015cde:	280a      	cmp	r0, #10
 8015ce0:	d10a      	bne.n	8015cf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015ce2:	45c1      	cmp	r9, r8
 8015ce4:	bf38      	it	cc
 8015ce6:	46c1      	movcc	r9, r8
 8015ce8:	f04f 0800 	mov.w	r8, #0
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	d1e5      	bne.n	8015cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015cf0:	4648      	mov	r0, r9
 8015cf2:	b01d      	add	sp, #116	; 0x74
 8015cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf8:	9a02      	ldr	r2, [sp, #8]
 8015cfa:	2a00      	cmp	r2, #0
 8015cfc:	d0de      	beq.n	8015cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015cfe:	7b57      	ldrb	r7, [r2, #13]
 8015d00:	4629      	mov	r1, r5
 8015d02:	6833      	ldr	r3, [r6, #0]
 8015d04:	007f      	lsls	r7, r7, #1
 8015d06:	8894      	ldrh	r4, [r2, #4]
 8015d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d0a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8015d0e:	7a97      	ldrb	r7, [r2, #10]
 8015d10:	4307      	orrs	r7, r0
 8015d12:	4630      	mov	r0, r6
 8015d14:	4798      	blx	r3
 8015d16:	4438      	add	r0, r7
 8015d18:	4480      	add	r8, r0
 8015d1a:	fa1f f888 	uxth.w	r8, r8
 8015d1e:	e7e5      	b.n	8015cec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015d20 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015d20:	b508      	push	{r3, lr}
 8015d22:	6803      	ldr	r3, [r0, #0]
 8015d24:	68db      	ldr	r3, [r3, #12]
 8015d26:	4798      	blx	r3
 8015d28:	b128      	cbz	r0, 8015d36 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015d2a:	7b43      	ldrb	r3, [r0, #13]
 8015d2c:	7a80      	ldrb	r0, [r0, #10]
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d34:	4318      	orrs	r0, r3
 8015d36:	bd08      	pop	{r3, pc}

08015d38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015d38:	b40e      	push	{r1, r2, r3}
 8015d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3c:	b09e      	sub	sp, #120	; 0x78
 8015d3e:	4605      	mov	r5, r0
 8015d40:	ab23      	add	r3, sp, #140	; 0x8c
 8015d42:	a805      	add	r0, sp, #20
 8015d44:	f853 4b04 	ldr.w	r4, [r3], #4
 8015d48:	9303      	str	r3, [sp, #12]
 8015d4a:	f000 fd05 	bl	8016758 <_ZN8touchgfx12TextProviderC1Ev>
 8015d4e:	682b      	ldr	r3, [r5, #0]
 8015d50:	4628      	mov	r0, r5
 8015d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d54:	4798      	blx	r3
 8015d56:	682b      	ldr	r3, [r5, #0]
 8015d58:	4606      	mov	r6, r0
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015d5e:	4798      	blx	r3
 8015d60:	4633      	mov	r3, r6
 8015d62:	4621      	mov	r1, r4
 8015d64:	ae1e      	add	r6, sp, #120	; 0x78
 8015d66:	2400      	movs	r4, #0
 8015d68:	9000      	str	r0, [sp, #0]
 8015d6a:	9a03      	ldr	r2, [sp, #12]
 8015d6c:	a805      	add	r0, sp, #20
 8015d6e:	f000 fd46 	bl	80167fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015d72:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015d76:	462a      	mov	r2, r5
 8015d78:	4633      	mov	r3, r6
 8015d7a:	4621      	mov	r1, r4
 8015d7c:	a805      	add	r0, sp, #20
 8015d7e:	f001 f833 	bl	8016de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015d82:	b300      	cbz	r0, 8015dc6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015d84:	280a      	cmp	r0, #10
 8015d86:	d01a      	beq.n	8015dbe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015d88:	9f04      	ldr	r7, [sp, #16]
 8015d8a:	b1c7      	cbz	r7, 8015dbe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015d8c:	7b78      	ldrb	r0, [r7, #13]
 8015d8e:	7a3b      	ldrb	r3, [r7, #8]
 8015d90:	00c1      	lsls	r1, r0, #3
 8015d92:	88aa      	ldrh	r2, [r5, #4]
 8015d94:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015d98:	4319      	orrs	r1, r3
 8015d9a:	0643      	lsls	r3, r0, #25
 8015d9c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015da0:	bf48      	it	mi
 8015da2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8015da6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015daa:	bf48      	it	mi
 8015dac:	b219      	sxthmi	r1, r3
 8015dae:	79fb      	ldrb	r3, [r7, #7]
 8015db0:	4303      	orrs	r3, r0
 8015db2:	4413      	add	r3, r2
 8015db4:	1a5b      	subs	r3, r3, r1
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	42a3      	cmp	r3, r4
 8015dba:	bfc8      	it	gt
 8015dbc:	b21c      	sxthgt	r4, r3
 8015dbe:	4633      	mov	r3, r6
 8015dc0:	462a      	mov	r2, r5
 8015dc2:	2100      	movs	r1, #0
 8015dc4:	e7da      	b.n	8015d7c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015dc6:	b2a0      	uxth	r0, r4
 8015dc8:	b01e      	add	sp, #120	; 0x78
 8015dca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015dce:	b003      	add	sp, #12
 8015dd0:	4770      	bx	lr

08015dd2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015dd2:	b40e      	push	{r1, r2, r3}
 8015dd4:	b570      	push	{r4, r5, r6, lr}
 8015dd6:	b09d      	sub	sp, #116	; 0x74
 8015dd8:	4604      	mov	r4, r0
 8015dda:	ab21      	add	r3, sp, #132	; 0x84
 8015ddc:	a803      	add	r0, sp, #12
 8015dde:	f853 5b04 	ldr.w	r5, [r3], #4
 8015de2:	9302      	str	r3, [sp, #8]
 8015de4:	f000 fcb8 	bl	8016758 <_ZN8touchgfx12TextProviderC1Ev>
 8015de8:	6823      	ldr	r3, [r4, #0]
 8015dea:	4620      	mov	r0, r4
 8015dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dee:	4798      	blx	r3
 8015df0:	6823      	ldr	r3, [r4, #0]
 8015df2:	4606      	mov	r6, r0
 8015df4:	4620      	mov	r0, r4
 8015df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015df8:	2401      	movs	r4, #1
 8015dfa:	4798      	blx	r3
 8015dfc:	4633      	mov	r3, r6
 8015dfe:	9000      	str	r0, [sp, #0]
 8015e00:	4629      	mov	r1, r5
 8015e02:	9a02      	ldr	r2, [sp, #8]
 8015e04:	a803      	add	r0, sp, #12
 8015e06:	f000 fcfa 	bl	80167fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e0a:	a803      	add	r0, sp, #12
 8015e0c:	f001 f86c 	bl	8016ee8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e10:	b2a3      	uxth	r3, r4
 8015e12:	b138      	cbz	r0, 8015e24 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015e14:	280a      	cmp	r0, #10
 8015e16:	a803      	add	r0, sp, #12
 8015e18:	bf04      	itt	eq
 8015e1a:	3301      	addeq	r3, #1
 8015e1c:	b21c      	sxtheq	r4, r3
 8015e1e:	f001 f863 	bl	8016ee8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e22:	e7f5      	b.n	8015e10 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015e24:	4618      	mov	r0, r3
 8015e26:	b01d      	add	sp, #116	; 0x74
 8015e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e2c:	b003      	add	sp, #12
 8015e2e:	4770      	bx	lr

08015e30 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015e30:	b40e      	push	{r1, r2, r3}
 8015e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e34:	b09e      	sub	sp, #120	; 0x78
 8015e36:	4604      	mov	r4, r0
 8015e38:	ab23      	add	r3, sp, #140	; 0x8c
 8015e3a:	a805      	add	r0, sp, #20
 8015e3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015e40:	9303      	str	r3, [sp, #12]
 8015e42:	f000 fc89 	bl	8016758 <_ZN8touchgfx12TextProviderC1Ev>
 8015e46:	6823      	ldr	r3, [r4, #0]
 8015e48:	4620      	mov	r0, r4
 8015e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e4c:	4798      	blx	r3
 8015e4e:	6823      	ldr	r3, [r4, #0]
 8015e50:	4606      	mov	r6, r0
 8015e52:	4620      	mov	r0, r4
 8015e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e56:	4798      	blx	r3
 8015e58:	4633      	mov	r3, r6
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	9000      	str	r0, [sp, #0]
 8015e5e:	9a03      	ldr	r2, [sp, #12]
 8015e60:	a805      	add	r0, sp, #20
 8015e62:	f000 fccc 	bl	80167fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e66:	ad1e      	add	r5, sp, #120	; 0x78
 8015e68:	2100      	movs	r1, #0
 8015e6a:	26ff      	movs	r6, #255	; 0xff
 8015e6c:	4622      	mov	r2, r4
 8015e6e:	a805      	add	r0, sp, #20
 8015e70:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015e74:	462b      	mov	r3, r5
 8015e76:	f000 ffb7 	bl	8016de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015e7a:	b1d8      	cbz	r0, 8015eb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8015e7c:	280a      	cmp	r0, #10
 8015e7e:	d012      	beq.n	8015ea6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015e80:	9804      	ldr	r0, [sp, #16]
 8015e82:	b180      	cbz	r0, 8015ea6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015e84:	7b47      	ldrb	r7, [r0, #13]
 8015e86:	7922      	ldrb	r2, [r4, #4]
 8015e88:	00fb      	lsls	r3, r7, #3
 8015e8a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015e8e:	7a03      	ldrb	r3, [r0, #8]
 8015e90:	430b      	orrs	r3, r1
 8015e92:	0679      	lsls	r1, r7, #25
 8015e94:	bf44      	itt	mi
 8015e96:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015e9a:	b21b      	sxthmi	r3, r3
 8015e9c:	1ad3      	subs	r3, r2, r3
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	429e      	cmp	r6, r3
 8015ea2:	bf28      	it	cs
 8015ea4:	461e      	movcs	r6, r3
 8015ea6:	462b      	mov	r3, r5
 8015ea8:	4622      	mov	r2, r4
 8015eaa:	2100      	movs	r1, #0
 8015eac:	a805      	add	r0, sp, #20
 8015eae:	f000 ff9b 	bl	8016de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015eb2:	e7e2      	b.n	8015e7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8015eb4:	4630      	mov	r0, r6
 8015eb6:	b01e      	add	sp, #120	; 0x78
 8015eb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ebc:	b003      	add	sp, #12
 8015ebe:	4770      	bx	lr

08015ec0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015ec0:	b513      	push	{r0, r1, r4, lr}
 8015ec2:	6803      	ldr	r3, [r0, #0]
 8015ec4:	2400      	movs	r4, #0
 8015ec6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015eca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015ece:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015ed2:	4669      	mov	r1, sp
 8015ed4:	691b      	ldr	r3, [r3, #16]
 8015ed6:	9400      	str	r4, [sp, #0]
 8015ed8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015edc:	4798      	blx	r3
 8015ede:	b002      	add	sp, #8
 8015ee0:	bd10      	pop	{r4, pc}

08015ee2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015ee2:	b538      	push	{r3, r4, r5, lr}
 8015ee4:	680b      	ldr	r3, [r1, #0]
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	4605      	mov	r5, r0
 8015eea:	68db      	ldr	r3, [r3, #12]
 8015eec:	4798      	blx	r3
 8015eee:	6823      	ldr	r3, [r4, #0]
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	4629      	mov	r1, r5
 8015ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ef6:	4798      	blx	r3
 8015ef8:	4628      	mov	r0, r5
 8015efa:	bd38      	pop	{r3, r4, r5, pc}

08015efc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015efc:	b410      	push	{r4}
 8015efe:	880a      	ldrh	r2, [r1, #0]
 8015f00:	8884      	ldrh	r4, [r0, #4]
 8015f02:	4422      	add	r2, r4
 8015f04:	800a      	strh	r2, [r1, #0]
 8015f06:	884a      	ldrh	r2, [r1, #2]
 8015f08:	88c4      	ldrh	r4, [r0, #6]
 8015f0a:	4422      	add	r2, r4
 8015f0c:	804a      	strh	r2, [r1, #2]
 8015f0e:	6940      	ldr	r0, [r0, #20]
 8015f10:	b120      	cbz	r0, 8015f1c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015f12:	6803      	ldr	r3, [r0, #0]
 8015f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f1a:	4718      	bx	r3
 8015f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f20:	4770      	bx	lr

08015f22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015f22:	b570      	push	{r4, r5, r6, lr}
 8015f24:	8882      	ldrh	r2, [r0, #4]
 8015f26:	460c      	mov	r4, r1
 8015f28:	880b      	ldrh	r3, [r1, #0]
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	4413      	add	r3, r2
 8015f2e:	800b      	strh	r3, [r1, #0]
 8015f30:	884b      	ldrh	r3, [r1, #2]
 8015f32:	88c2      	ldrh	r2, [r0, #6]
 8015f34:	4413      	add	r3, r2
 8015f36:	804b      	strh	r3, [r1, #2]
 8015f38:	1d01      	adds	r1, r0, #4
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	f7fc fe80 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8015f40:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	dd0b      	ble.n	8015f60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015f48:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	dd07      	ble.n	8015f60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015f50:	6968      	ldr	r0, [r5, #20]
 8015f52:	b128      	cbz	r0, 8015f60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015f54:	6803      	ldr	r3, [r0, #0]
 8015f56:	4621      	mov	r1, r4
 8015f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f5e:	4718      	bx	r3
 8015f60:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015f64:	b570      	push	{r4, r5, r6, lr}
 8015f66:	8882      	ldrh	r2, [r0, #4]
 8015f68:	460c      	mov	r4, r1
 8015f6a:	880b      	ldrh	r3, [r1, #0]
 8015f6c:	4605      	mov	r5, r0
 8015f6e:	4413      	add	r3, r2
 8015f70:	800b      	strh	r3, [r1, #0]
 8015f72:	884b      	ldrh	r3, [r1, #2]
 8015f74:	88c2      	ldrh	r2, [r0, #6]
 8015f76:	4413      	add	r3, r2
 8015f78:	804b      	strh	r3, [r1, #2]
 8015f7a:	1d01      	adds	r1, r0, #4
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	f7fc fe5f 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8015f82:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	dd18      	ble.n	8015fbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8015f8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	dd14      	ble.n	8015fbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8015f92:	6968      	ldr	r0, [r5, #20]
 8015f94:	b128      	cbz	r0, 8015fa2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015f96:	6803      	ldr	r3, [r0, #0]
 8015f98:	4621      	mov	r1, r4
 8015f9a:	691b      	ldr	r3, [r3, #16]
 8015f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fa0:	4718      	bx	r3
 8015fa2:	4b07      	ldr	r3, [pc, #28]	; (8015fc0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3304      	adds	r3, #4
 8015fa8:	429d      	cmp	r5, r3
 8015faa:	d107      	bne.n	8015fbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8015fac:	f7fe fff0 	bl	8014f90 <_ZN8touchgfx11Application11getInstanceEv>
 8015fb0:	6821      	ldr	r1, [r4, #0]
 8015fb2:	6862      	ldr	r2, [r4, #4]
 8015fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fb8:	f7ff b862 	b.w	8015080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015fbc:	bd70      	pop	{r4, r5, r6, pc}
 8015fbe:	bf00      	nop
 8015fc0:	2400aeb0 	.word	0x2400aeb0

08015fc4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015fc4:	b570      	push	{r4, r5, r6, lr}
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	4616      	mov	r6, r2
 8015fca:	460d      	mov	r5, r1
 8015fcc:	b901      	cbnz	r1, 8015fd0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015fce:	b192      	cbz	r2, 8015ff6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015fd0:	6823      	ldr	r3, [r4, #0]
 8015fd2:	4620      	mov	r0, r4
 8015fd4:	699b      	ldr	r3, [r3, #24]
 8015fd6:	4798      	blx	r3
 8015fd8:	88e2      	ldrh	r2, [r4, #6]
 8015fda:	88a1      	ldrh	r1, [r4, #4]
 8015fdc:	4620      	mov	r0, r4
 8015fde:	4432      	add	r2, r6
 8015fe0:	4429      	add	r1, r5
 8015fe2:	b212      	sxth	r2, r2
 8015fe4:	b209      	sxth	r1, r1
 8015fe6:	f7ee fef4 	bl	8004dd2 <_ZN8touchgfx8Drawable5setXYEss>
 8015fea:	6823      	ldr	r3, [r4, #0]
 8015fec:	4620      	mov	r0, r4
 8015fee:	699b      	ldr	r3, [r3, #24]
 8015ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ff4:	4718      	bx	r3
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}

08015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015ff8:	b510      	push	{r4, lr}
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	4604      	mov	r4, r0
 8015ffe:	4608      	mov	r0, r1
 8016000:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016004:	8023      	strh	r3, [r4, #0]
 8016006:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801600a:	8063      	strh	r3, [r4, #2]
 801600c:	6803      	ldr	r3, [r0, #0]
 801600e:	80a1      	strh	r1, [r4, #4]
 8016010:	4621      	mov	r1, r4
 8016012:	80e2      	strh	r2, [r4, #6]
 8016014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016016:	4798      	blx	r3
 8016018:	4620      	mov	r0, r4
 801601a:	bd10      	pop	{r4, pc}

0801601c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801601c:	b530      	push	{r4, r5, lr}
 801601e:	8083      	strh	r3, [r0, #4]
 8016020:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016024:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8016028:	7183      	strb	r3, [r0, #6]
 801602a:	79c3      	ldrb	r3, [r0, #7]
 801602c:	6101      	str	r1, [r0, #16]
 801602e:	f365 0306 	bfi	r3, r5, #0, #7
 8016032:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8016036:	8282      	strh	r2, [r0, #20]
 8016038:	f365 13c7 	bfi	r3, r5, #7, #1
 801603c:	71c3      	strb	r3, [r0, #7]
 801603e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8016042:	7203      	strb	r3, [r0, #8]
 8016044:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016048:	7243      	strb	r3, [r0, #9]
 801604a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801604e:	8143      	strh	r3, [r0, #10]
 8016050:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016054:	8183      	strh	r3, [r0, #12]
 8016056:	4b01      	ldr	r3, [pc, #4]	; (801605c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8016058:	6003      	str	r3, [r0, #0]
 801605a:	bd30      	pop	{r4, r5, pc}
 801605c:	08025f00 	.word	0x08025f00

08016060 <_ZNK8touchgfx9ConstFont4findEt>:
 8016060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016062:	6904      	ldr	r4, [r0, #16]
 8016064:	b3bc      	cbz	r4, 80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016066:	88a3      	ldrh	r3, [r4, #4]
 8016068:	8a82      	ldrh	r2, [r0, #20]
 801606a:	1acb      	subs	r3, r1, r3
 801606c:	f102 32ff 	add.w	r2, r2, #4294967295
 8016070:	d431      	bmi.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016072:	4293      	cmp	r3, r2
 8016074:	dd0c      	ble.n	8016090 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016076:	230e      	movs	r3, #14
 8016078:	fb03 4302 	mla	r3, r3, r2, r4
 801607c:	889b      	ldrh	r3, [r3, #4]
 801607e:	1a5b      	subs	r3, r3, r1
 8016080:	1ad3      	subs	r3, r2, r3
 8016082:	429a      	cmp	r2, r3
 8016084:	db27      	blt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016086:	2b00      	cmp	r3, #0
 8016088:	bfbc      	itt	lt
 801608a:	2302      	movlt	r3, #2
 801608c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8016090:	2500      	movs	r5, #0
 8016092:	260e      	movs	r6, #14
 8016094:	4295      	cmp	r5, r2
 8016096:	dc1e      	bgt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016098:	fb06 4003 	mla	r0, r6, r3, r4
 801609c:	8887      	ldrh	r7, [r0, #4]
 801609e:	42b9      	cmp	r1, r7
 80160a0:	d01a      	beq.n	80160d8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80160a2:	d20d      	bcs.n	80160c0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80160a4:	1e5a      	subs	r2, r3, #1
 80160a6:	4295      	cmp	r5, r2
 80160a8:	dc15      	bgt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160aa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80160ae:	1a5b      	subs	r3, r3, r1
 80160b0:	1ad3      	subs	r3, r2, r3
 80160b2:	429a      	cmp	r2, r3
 80160b4:	db0f      	blt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160b6:	429d      	cmp	r5, r3
 80160b8:	ddec      	ble.n	8016094 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80160ba:	1953      	adds	r3, r2, r5
 80160bc:	105b      	asrs	r3, r3, #1
 80160be:	e7e9      	b.n	8016094 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80160c0:	1c5d      	adds	r5, r3, #1
 80160c2:	42aa      	cmp	r2, r5
 80160c4:	db07      	blt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160c6:	8a43      	ldrh	r3, [r0, #18]
 80160c8:	1acb      	subs	r3, r1, r3
 80160ca:	442b      	add	r3, r5
 80160cc:	429d      	cmp	r5, r3
 80160ce:	dc02      	bgt.n	80160d6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80160d0:	429a      	cmp	r2, r3
 80160d2:	dadf      	bge.n	8016094 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80160d4:	e7f1      	b.n	80160ba <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80160d6:	2000      	movs	r0, #0
 80160d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080160da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80160da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160dc:	4604      	mov	r4, r0
 80160de:	4617      	mov	r7, r2
 80160e0:	461e      	mov	r6, r3
 80160e2:	b911      	cbnz	r1, 80160ea <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80160e4:	2500      	movs	r5, #0
 80160e6:	4628      	mov	r0, r5
 80160e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ea:	290a      	cmp	r1, #10
 80160ec:	d0fa      	beq.n	80160e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80160ee:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80160f2:	4291      	cmp	r1, r2
 80160f4:	d0f6      	beq.n	80160e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80160f6:	f242 020b 	movw	r2, #8203	; 0x200b
 80160fa:	4291      	cmp	r1, r2
 80160fc:	d0f2      	beq.n	80160e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80160fe:	f7ff ffaf 	bl	8016060 <_ZNK8touchgfx9ConstFont4findEt>
 8016102:	4605      	mov	r5, r0
 8016104:	b950      	cbnz	r0, 801611c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016106:	6823      	ldr	r3, [r4, #0]
 8016108:	4620      	mov	r0, r4
 801610a:	691b      	ldr	r3, [r3, #16]
 801610c:	4798      	blx	r3
 801610e:	4601      	mov	r1, r0
 8016110:	4620      	mov	r0, r4
 8016112:	f7ff ffa5 	bl	8016060 <_ZNK8touchgfx9ConstFont4findEt>
 8016116:	4605      	mov	r5, r0
 8016118:	2800      	cmp	r0, #0
 801611a:	d0e3      	beq.n	80160e4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801611c:	6823      	ldr	r3, [r4, #0]
 801611e:	4629      	mov	r1, r5
 8016120:	4620      	mov	r0, r4
 8016122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016124:	4798      	blx	r3
 8016126:	6038      	str	r0, [r7, #0]
 8016128:	6823      	ldr	r3, [r4, #0]
 801612a:	4620      	mov	r0, r4
 801612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801612e:	4798      	blx	r3
 8016130:	7030      	strb	r0, [r6, #0]
 8016132:	e7d8      	b.n	80160e6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016134 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016134:	2000      	movs	r0, #0
 8016136:	4770      	bx	lr

08016138 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016138:	2001      	movs	r0, #1
 801613a:	4770      	bx	lr

0801613c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801613c:	2002      	movs	r0, #2
 801613e:	4770      	bx	lr

08016140 <_ZN8touchgfx12GestureEventD1Ev>:
 8016140:	4770      	bx	lr

08016142 <_ZN8touchgfx9DragEventD1Ev>:
 8016142:	4770      	bx	lr

08016144 <_ZN8touchgfx10ClickEventD1Ev>:
 8016144:	4770      	bx	lr

08016146 <_ZN8touchgfx10ClickEventD0Ev>:
 8016146:	b510      	push	{r4, lr}
 8016148:	4604      	mov	r4, r0
 801614a:	210c      	movs	r1, #12
 801614c:	f00d f88b 	bl	8023266 <_ZdlPvj>
 8016150:	4620      	mov	r0, r4
 8016152:	bd10      	pop	{r4, pc}

08016154 <_ZN8touchgfx9DragEventD0Ev>:
 8016154:	b510      	push	{r4, lr}
 8016156:	4604      	mov	r4, r0
 8016158:	2110      	movs	r1, #16
 801615a:	f00d f884 	bl	8023266 <_ZdlPvj>
 801615e:	4620      	mov	r0, r4
 8016160:	bd10      	pop	{r4, pc}

08016162 <_ZN8touchgfx12GestureEventD0Ev>:
 8016162:	b510      	push	{r4, lr}
 8016164:	4604      	mov	r4, r0
 8016166:	210c      	movs	r1, #12
 8016168:	f00d f87d 	bl	8023266 <_ZdlPvj>
 801616c:	4620      	mov	r0, r4
 801616e:	bd10      	pop	{r4, pc}

08016170 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016170:	b530      	push	{r4, r5, lr}
 8016172:	460d      	mov	r5, r1
 8016174:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016176:	b087      	sub	sp, #28
 8016178:	4604      	mov	r4, r0
 801617a:	b301      	cbz	r1, 80161be <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801617c:	a801      	add	r0, sp, #4
 801617e:	f7ff ff3b 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016182:	892a      	ldrh	r2, [r5, #8]
 8016184:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016188:	7928      	ldrb	r0, [r5, #4]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801618e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016192:	441a      	add	r2, r3
 8016194:	896b      	ldrh	r3, [r5, #10]
 8016196:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801619a:	f88d 0010 	strb.w	r0, [sp, #16]
 801619e:	1b5b      	subs	r3, r3, r5
 80161a0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80161a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80161a4:	442b      	add	r3, r5
 80161a6:	4d07      	ldr	r5, [pc, #28]	; (80161c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80161a8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80161ac:	a903      	add	r1, sp, #12
 80161ae:	9503      	str	r5, [sp, #12]
 80161b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80161b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80161b8:	6803      	ldr	r3, [r0, #0]
 80161ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80161bc:	4798      	blx	r3
 80161be:	b007      	add	sp, #28
 80161c0:	bd30      	pop	{r4, r5, pc}
 80161c2:	bf00      	nop
 80161c4:	08025f80 	.word	0x08025f80

080161c8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80161c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80161ce:	b08a      	sub	sp, #40	; 0x28
 80161d0:	4604      	mov	r4, r0
 80161d2:	460d      	mov	r5, r1
 80161d4:	b113      	cbz	r3, 80161dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80161d6:	790b      	ldrb	r3, [r1, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d044      	beq.n	8016266 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80161dc:	f104 0804 	add.w	r8, r4, #4
 80161e0:	a803      	add	r0, sp, #12
 80161e2:	4641      	mov	r1, r8
 80161e4:	f7ff ff08 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161e8:	792b      	ldrb	r3, [r5, #4]
 80161ea:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80161ee:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80161f2:	b983      	cbnz	r3, 8016216 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80161f4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80161f8:	892a      	ldrh	r2, [r5, #8]
 80161fa:	88e9      	ldrh	r1, [r5, #6]
 80161fc:	4640      	mov	r0, r8
 80161fe:	1b92      	subs	r2, r2, r6
 8016200:	9301      	str	r3, [sp, #4]
 8016202:	1bc9      	subs	r1, r1, r7
 8016204:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8016208:	b212      	sxth	r2, r2
 801620a:	9300      	str	r3, [sp, #0]
 801620c:	b209      	sxth	r1, r1
 801620e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016212:	f7fc fc33 	bl	8012a7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8016216:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016218:	b329      	cbz	r1, 8016266 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801621a:	a805      	add	r0, sp, #20
 801621c:	f7ff feec 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016220:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8016224:	792b      	ldrb	r3, [r5, #4]
 8016226:	a907      	add	r1, sp, #28
 8016228:	1abf      	subs	r7, r7, r2
 801622a:	88ea      	ldrh	r2, [r5, #6]
 801622c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801622e:	4417      	add	r7, r2
 8016230:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8016232:	f88d 3020 	strb.w	r3, [sp, #32]
 8016236:	4417      	add	r7, r2
 8016238:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801623c:	1ab6      	subs	r6, r6, r2
 801623e:	892a      	ldrh	r2, [r5, #8]
 8016240:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016244:	4416      	add	r6, r2
 8016246:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016248:	4416      	add	r6, r2
 801624a:	4a08      	ldr	r2, [pc, #32]	; (801626c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801624c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8016250:	2600      	movs	r6, #0
 8016252:	9207      	str	r2, [sp, #28]
 8016254:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016258:	6803      	ldr	r3, [r0, #0]
 801625a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801625c:	4798      	blx	r3
 801625e:	792b      	ldrb	r3, [r5, #4]
 8016260:	b10b      	cbz	r3, 8016266 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016262:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016266:	b00a      	add	sp, #40	; 0x28
 8016268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801626c:	08025f58 	.word	0x08025f58

08016270 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016274:	460c      	mov	r4, r1
 8016276:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016278:	b088      	sub	sp, #32
 801627a:	4605      	mov	r5, r0
 801627c:	2900      	cmp	r1, #0
 801627e:	d06d      	beq.n	801635c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016280:	4668      	mov	r0, sp
 8016282:	f7ff feb9 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016286:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016288:	88e3      	ldrh	r3, [r4, #6]
 801628a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801628e:	440b      	add	r3, r1
 8016290:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016294:	b21b      	sxth	r3, r3
 8016296:	4543      	cmp	r3, r8
 8016298:	db31      	blt.n	80162fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801629a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801629e:	44c4      	add	ip, r8
 80162a0:	fa0f fc8c 	sxth.w	ip, ip
 80162a4:	4563      	cmp	r3, ip
 80162a6:	da2a      	bge.n	80162fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80162a8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80162aa:	8926      	ldrh	r6, [r4, #8]
 80162ac:	4416      	add	r6, r2
 80162ae:	b236      	sxth	r6, r6
 80162b0:	42be      	cmp	r6, r7
 80162b2:	db24      	blt.n	80162fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80162b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80162b8:	4438      	add	r0, r7
 80162ba:	b200      	sxth	r0, r0
 80162bc:	4286      	cmp	r6, r0
 80162be:	da1e      	bge.n	80162fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80162c0:	8963      	ldrh	r3, [r4, #10]
 80162c2:	4419      	add	r1, r3
 80162c4:	b209      	sxth	r1, r1
 80162c6:	4541      	cmp	r1, r8
 80162c8:	db08      	blt.n	80162dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80162ca:	4561      	cmp	r1, ip
 80162cc:	da06      	bge.n	80162dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80162ce:	89a3      	ldrh	r3, [r4, #12]
 80162d0:	441a      	add	r2, r3
 80162d2:	b212      	sxth	r2, r2
 80162d4:	42ba      	cmp	r2, r7
 80162d6:	db01      	blt.n	80162dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80162d8:	4282      	cmp	r2, r0
 80162da:	db10      	blt.n	80162fe <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80162dc:	4b21      	ldr	r3, [pc, #132]	; (8016364 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80162de:	a904      	add	r1, sp, #16
 80162e0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80162e2:	9304      	str	r3, [sp, #16]
 80162e4:	2302      	movs	r3, #2
 80162e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80162ea:	2300      	movs	r3, #0
 80162ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80162f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80162f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80162f8:	6803      	ldr	r3, [r0, #0]
 80162fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162fc:	4798      	blx	r3
 80162fe:	1d29      	adds	r1, r5, #4
 8016300:	a802      	add	r0, sp, #8
 8016302:	f7ff fe79 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016306:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801630a:	88e0      	ldrh	r0, [r4, #6]
 801630c:	eba3 0808 	sub.w	r8, r3, r8
 8016310:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016314:	7921      	ldrb	r1, [r4, #4]
 8016316:	fa1f f888 	uxth.w	r8, r8
 801631a:	1bdf      	subs	r7, r3, r7
 801631c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8016320:	b2bb      	uxth	r3, r7
 8016322:	4440      	add	r0, r8
 8016324:	8922      	ldrh	r2, [r4, #8]
 8016326:	8967      	ldrh	r7, [r4, #10]
 8016328:	4460      	add	r0, ip
 801632a:	89a4      	ldrh	r4, [r4, #12]
 801632c:	441a      	add	r2, r3
 801632e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8016330:	44b8      	add	r8, r7
 8016332:	4423      	add	r3, r4
 8016334:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016338:	4432      	add	r2, r6
 801633a:	44e0      	add	r8, ip
 801633c:	4433      	add	r3, r6
 801633e:	4c0a      	ldr	r4, [pc, #40]	; (8016368 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016340:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016342:	f88d 1014 	strb.w	r1, [sp, #20]
 8016346:	a904      	add	r1, sp, #16
 8016348:	9404      	str	r4, [sp, #16]
 801634a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801634e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016352:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016356:	6803      	ldr	r3, [r0, #0]
 8016358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801635a:	4798      	blx	r3
 801635c:	b008      	add	sp, #32
 801635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016362:	bf00      	nop
 8016364:	08025f58 	.word	0x08025f58
 8016368:	08025f6c 	.word	0x08025f6c

0801636c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801636c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801636e:	4604      	mov	r4, r0
 8016370:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016374:	3201      	adds	r2, #1
 8016376:	d112      	bne.n	801639e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016378:	2500      	movs	r5, #0
 801637a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801637e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016382:	6803      	ldr	r3, [r0, #0]
 8016384:	9500      	str	r5, [sp, #0]
 8016386:	466d      	mov	r5, sp
 8016388:	f8ad 1004 	strh.w	r1, [sp, #4]
 801638c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016390:	4629      	mov	r1, r5
 8016392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016394:	4798      	blx	r3
 8016396:	e895 0003 	ldmia.w	r5, {r0, r1}
 801639a:	e884 0003 	stmia.w	r4, {r0, r1}
 801639e:	4620      	mov	r0, r4
 80163a0:	b003      	add	sp, #12
 80163a2:	bd30      	pop	{r4, r5, pc}

080163a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80163a4:	b513      	push	{r0, r1, r4, lr}
 80163a6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80163aa:	4604      	mov	r4, r0
 80163ac:	3301      	adds	r3, #1
 80163ae:	d109      	bne.n	80163c4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80163b0:	4601      	mov	r1, r0
 80163b2:	4668      	mov	r0, sp
 80163b4:	f7ff fe20 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80163b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80163bc:	8423      	strh	r3, [r4, #32]
 80163be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80163c2:	8463      	strh	r3, [r4, #34]	; 0x22
 80163c4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80163c8:	b002      	add	sp, #8
 80163ca:	bd10      	pop	{r4, pc}

080163cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80163cc:	b513      	push	{r0, r1, r4, lr}
 80163ce:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80163d2:	4604      	mov	r4, r0
 80163d4:	3301      	adds	r3, #1
 80163d6:	d109      	bne.n	80163ec <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80163d8:	4601      	mov	r1, r0
 80163da:	4668      	mov	r0, sp
 80163dc:	f7ff fe0c 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80163e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80163e4:	8423      	strh	r3, [r4, #32]
 80163e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80163ea:	8463      	strh	r3, [r4, #34]	; 0x22
 80163ec:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80163f0:	b002      	add	sp, #8
 80163f2:	bd10      	pop	{r4, pc}

080163f4 <_ZN8touchgfx6ScreenC1Ev>:
 80163f4:	b570      	push	{r4, r5, r6, lr}
 80163f6:	4b17      	ldr	r3, [pc, #92]	; (8016454 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80163f8:	4605      	mov	r5, r0
 80163fa:	4a17      	ldr	r2, [pc, #92]	; (8016458 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80163fc:	2101      	movs	r1, #1
 80163fe:	f845 3b04 	str.w	r3, [r5], #4
 8016402:	2300      	movs	r3, #0
 8016404:	6042      	str	r2, [r0, #4]
 8016406:	4604      	mov	r4, r0
 8016408:	8103      	strh	r3, [r0, #8]
 801640a:	8143      	strh	r3, [r0, #10]
 801640c:	8183      	strh	r3, [r0, #12]
 801640e:	81c3      	strh	r3, [r0, #14]
 8016410:	8203      	strh	r3, [r0, #16]
 8016412:	8243      	strh	r3, [r0, #18]
 8016414:	8283      	strh	r3, [r0, #20]
 8016416:	82c3      	strh	r3, [r0, #22]
 8016418:	6203      	str	r3, [r0, #32]
 801641a:	8483      	strh	r3, [r0, #36]	; 0x24
 801641c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801641e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8016422:	6343      	str	r3, [r0, #52]	; 0x34
 8016424:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8016428:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801642c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016430:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8016434:	4b09      	ldr	r3, [pc, #36]	; (801645c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016436:	4628      	mov	r0, r5
 8016438:	f9b3 6000 	ldrsh.w	r6, [r3]
 801643c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801643e:	4a08      	ldr	r2, [pc, #32]	; (8016460 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016440:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016444:	4798      	blx	r3
 8016446:	6863      	ldr	r3, [r4, #4]
 8016448:	4628      	mov	r0, r5
 801644a:	4631      	mov	r1, r6
 801644c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801644e:	4798      	blx	r3
 8016450:	4620      	mov	r0, r4
 8016452:	bd70      	pop	{r4, r5, r6, pc}
 8016454:	08025f94 	.word	0x08025f94
 8016458:	08025ac0 	.word	0x08025ac0
 801645c:	2400ae6a 	.word	0x2400ae6a
 8016460:	2400ae68 	.word	0x2400ae68

08016464 <_ZN8touchgfx6Screen4drawEv>:
 8016464:	4b09      	ldr	r3, [pc, #36]	; (801648c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016466:	b507      	push	{r0, r1, r2, lr}
 8016468:	f9b3 2000 	ldrsh.w	r2, [r3]
 801646c:	2100      	movs	r1, #0
 801646e:	4b08      	ldr	r3, [pc, #32]	; (8016490 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016470:	9100      	str	r1, [sp, #0]
 8016472:	4669      	mov	r1, sp
 8016474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016478:	f8ad 2004 	strh.w	r2, [sp, #4]
 801647c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016480:	6803      	ldr	r3, [r0, #0]
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	4798      	blx	r3
 8016486:	b003      	add	sp, #12
 8016488:	f85d fb04 	ldr.w	pc, [sp], #4
 801648c:	2400ae68 	.word	0x2400ae68
 8016490:	2400ae6a 	.word	0x2400ae6a

08016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016498:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801649c:	b089      	sub	sp, #36	; 0x24
 801649e:	4680      	mov	r8, r0
 80164a0:	460c      	mov	r4, r1
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	4615      	mov	r5, r2
 80164a6:	dd0e      	ble.n	80164c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80164a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	dd0a      	ble.n	80164c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80164b0:	4628      	mov	r0, r5
 80164b2:	f7ff ff5b 	bl	801636c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80164b6:	4621      	mov	r1, r4
 80164b8:	f7fe fc8c 	bl	8014dd4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80164bc:	69eb      	ldr	r3, [r5, #28]
 80164be:	b928      	cbnz	r0, 80164cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80164c0:	461d      	mov	r5, r3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d1f4      	bne.n	80164b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80164c6:	b009      	add	sp, #36	; 0x24
 80164c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164cc:	ae04      	add	r6, sp, #16
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f000 80b5 	beq.w	801663e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80164d4:	682b      	ldr	r3, [r5, #0]
 80164d6:	4629      	mov	r1, r5
 80164d8:	a802      	add	r0, sp, #8
 80164da:	68db      	ldr	r3, [r3, #12]
 80164dc:	4798      	blx	r3
 80164de:	4628      	mov	r0, r5
 80164e0:	f7ff ff60 	bl	80163a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80164e4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80164e8:	4407      	add	r7, r0
 80164ea:	4628      	mov	r0, r5
 80164ec:	f7ff ff6e 	bl	80163cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80164f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80164f4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80164f8:	b23f      	sxth	r7, r7
 80164fa:	4418      	add	r0, r3
 80164fc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016500:	4621      	mov	r1, r4
 8016502:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016506:	f8ad 0012 	strh.w	r0, [sp, #18]
 801650a:	4630      	mov	r0, r6
 801650c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016510:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016514:	f7fc fb94 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8016518:	4628      	mov	r0, r5
 801651a:	f7ff ff27 	bl	801636c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801651e:	ab06      	add	r3, sp, #24
 8016520:	4602      	mov	r2, r0
 8016522:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016526:	e883 0003 	stmia.w	r3, {r0, r1}
 801652a:	4611      	mov	r1, r2
 801652c:	4618      	mov	r0, r3
 801652e:	f7fc fb87 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8016532:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016536:	f9b4 1000 	ldrsh.w	r1, [r4]
 801653a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801653e:	4299      	cmp	r1, r3
 8016540:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016544:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016548:	d10b      	bne.n	8016562 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801654a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801654e:	4552      	cmp	r2, sl
 8016550:	d107      	bne.n	8016562 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016552:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016556:	455a      	cmp	r2, fp
 8016558:	d103      	bne.n	8016562 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801655a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801655e:	454a      	cmp	r2, r9
 8016560:	d06d      	beq.n	801663e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016562:	f1bb 0f00 	cmp.w	fp, #0
 8016566:	dd65      	ble.n	8016634 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016568:	f1b9 0f00 	cmp.w	r9, #0
 801656c:	dd62      	ble.n	8016634 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801656e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016572:	fa1f f08a 	uxth.w	r0, sl
 8016576:	4552      	cmp	r2, sl
 8016578:	9000      	str	r0, [sp, #0]
 801657a:	da12      	bge.n	80165a2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801657c:	9301      	str	r3, [sp, #4]
 801657e:	9b00      	ldr	r3, [sp, #0]
 8016580:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016584:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016588:	1a9a      	subs	r2, r3, r2
 801658a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801658e:	4631      	mov	r1, r6
 8016590:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016594:	4640      	mov	r0, r8
 8016596:	f8ad 2016 	strh.w	r2, [sp, #22]
 801659a:	69ea      	ldr	r2, [r5, #28]
 801659c:	f7ff ff7a 	bl	8016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80165a0:	9b01      	ldr	r3, [sp, #4]
 80165a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80165a6:	b29f      	uxth	r7, r3
 80165a8:	429a      	cmp	r2, r3
 80165aa:	da0d      	bge.n	80165c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80165ac:	f8ad 2010 	strh.w	r2, [sp, #16]
 80165b0:	1aba      	subs	r2, r7, r2
 80165b2:	f8ad a012 	strh.w	sl, [sp, #18]
 80165b6:	4631      	mov	r1, r6
 80165b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165bc:	4640      	mov	r0, r8
 80165be:	f8ad 9016 	strh.w	r9, [sp, #22]
 80165c2:	69ea      	ldr	r2, [r5, #28]
 80165c4:	f7ff ff66 	bl	8016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80165c8:	8822      	ldrh	r2, [r4, #0]
 80165ca:	445f      	add	r7, fp
 80165cc:	88a3      	ldrh	r3, [r4, #4]
 80165ce:	b2bf      	uxth	r7, r7
 80165d0:	4413      	add	r3, r2
 80165d2:	b23a      	sxth	r2, r7
 80165d4:	b29b      	uxth	r3, r3
 80165d6:	b219      	sxth	r1, r3
 80165d8:	4291      	cmp	r1, r2
 80165da:	dd0d      	ble.n	80165f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80165dc:	1bdb      	subs	r3, r3, r7
 80165de:	f8ad 2010 	strh.w	r2, [sp, #16]
 80165e2:	f8ad a012 	strh.w	sl, [sp, #18]
 80165e6:	4631      	mov	r1, r6
 80165e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165ec:	4640      	mov	r0, r8
 80165ee:	f8ad 9016 	strh.w	r9, [sp, #22]
 80165f2:	69ea      	ldr	r2, [r5, #28]
 80165f4:	f7ff ff4e 	bl	8016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80165f8:	88e2      	ldrh	r2, [r4, #6]
 80165fa:	8863      	ldrh	r3, [r4, #2]
 80165fc:	4413      	add	r3, r2
 80165fe:	9a00      	ldr	r2, [sp, #0]
 8016600:	444a      	add	r2, r9
 8016602:	b29b      	uxth	r3, r3
 8016604:	fa1f f982 	uxth.w	r9, r2
 8016608:	b219      	sxth	r1, r3
 801660a:	fa0f f289 	sxth.w	r2, r9
 801660e:	428a      	cmp	r2, r1
 8016610:	da15      	bge.n	801663e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016612:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016616:	eba3 0309 	sub.w	r3, r3, r9
 801661a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801661e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016622:	4631      	mov	r1, r6
 8016624:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016628:	f8ad 2012 	strh.w	r2, [sp, #18]
 801662c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016630:	69ea      	ldr	r2, [r5, #28]
 8016632:	e001      	b.n	8016638 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016634:	69ea      	ldr	r2, [r5, #28]
 8016636:	4621      	mov	r1, r4
 8016638:	4640      	mov	r0, r8
 801663a:	f7ff ff2b 	bl	8016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801663e:	4628      	mov	r0, r5
 8016640:	f7ff fe94 	bl	801636c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016644:	6861      	ldr	r1, [r4, #4]
 8016646:	4602      	mov	r2, r0
 8016648:	4633      	mov	r3, r6
 801664a:	6820      	ldr	r0, [r4, #0]
 801664c:	c303      	stmia	r3!, {r0, r1}
 801664e:	4611      	mov	r1, r2
 8016650:	4630      	mov	r0, r6
 8016652:	f7fc faf5 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 8016656:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801665a:	2b00      	cmp	r3, #0
 801665c:	f77f af33 	ble.w	80164c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016660:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016664:	2b00      	cmp	r3, #0
 8016666:	f77f af2e 	ble.w	80164c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801666a:	4628      	mov	r0, r5
 801666c:	f7ff fe9a 	bl	80163a4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016670:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016674:	1a18      	subs	r0, r3, r0
 8016676:	f8ad 0010 	strh.w	r0, [sp, #16]
 801667a:	4628      	mov	r0, r5
 801667c:	f7ff fea6 	bl	80163cc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016680:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016684:	4631      	mov	r1, r6
 8016686:	1a18      	subs	r0, r3, r0
 8016688:	f8ad 0012 	strh.w	r0, [sp, #18]
 801668c:	4628      	mov	r0, r5
 801668e:	682b      	ldr	r3, [r5, #0]
 8016690:	689b      	ldr	r3, [r3, #8]
 8016692:	4798      	blx	r3
 8016694:	e717      	b.n	80164c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016696 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016696:	b570      	push	{r4, r5, r6, lr}
 8016698:	1d06      	adds	r6, r0, #4
 801669a:	b086      	sub	sp, #24
 801669c:	460c      	mov	r4, r1
 801669e:	2300      	movs	r3, #0
 80166a0:	4631      	mov	r1, r6
 80166a2:	4605      	mov	r5, r0
 80166a4:	a802      	add	r0, sp, #8
 80166a6:	9301      	str	r3, [sp, #4]
 80166a8:	f7ff fca6 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80166b0:	8822      	ldrh	r2, [r4, #0]
 80166b2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80166b6:	1ad2      	subs	r2, r2, r3
 80166b8:	8863      	ldrh	r3, [r4, #2]
 80166ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80166be:	1a5b      	subs	r3, r3, r1
 80166c0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80166c4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80166c8:	aa01      	add	r2, sp, #4
 80166ca:	f8ad 0014 	strh.w	r0, [sp, #20]
 80166ce:	4630      	mov	r0, r6
 80166d0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80166d4:	a904      	add	r1, sp, #16
 80166d6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80166da:	f7fc fb89 	bl	8012df0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80166de:	9a01      	ldr	r2, [sp, #4]
 80166e0:	b11a      	cbz	r2, 80166ea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80166e2:	4621      	mov	r1, r4
 80166e4:	4628      	mov	r0, r5
 80166e6:	f7ff fed5 	bl	8016494 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80166ea:	b006      	add	sp, #24
 80166ec:	bd70      	pop	{r4, r5, r6, pc}

080166ee <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80166ee:	4602      	mov	r2, r0
 80166f0:	b530      	push	{r4, r5, lr}
 80166f2:	4604      	mov	r4, r0
 80166f4:	b085      	sub	sp, #20
 80166f6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80166fa:	460d      	mov	r5, r1
 80166fc:	466b      	mov	r3, sp
 80166fe:	6851      	ldr	r1, [r2, #4]
 8016700:	c303      	stmia	r3!, {r0, r1}
 8016702:	4629      	mov	r1, r5
 8016704:	4668      	mov	r0, sp
 8016706:	f7fc fa9b 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 801670a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801670e:	b12b      	cbz	r3, 801671c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8016710:	4669      	mov	r1, sp
 8016712:	4620      	mov	r0, r4
 8016714:	f7ff ffbf 	bl	8016696 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016718:	b005      	add	sp, #20
 801671a:	bd30      	pop	{r4, r5, pc}
 801671c:	3404      	adds	r4, #4
 801671e:	a802      	add	r0, sp, #8
 8016720:	4621      	mov	r1, r4
 8016722:	f7ff fc69 	bl	8015ff8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016726:	f8bd 3000 	ldrh.w	r3, [sp]
 801672a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801672e:	4669      	mov	r1, sp
 8016730:	4620      	mov	r0, r4
 8016732:	1a9b      	subs	r3, r3, r2
 8016734:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016738:	f8ad 3000 	strh.w	r3, [sp]
 801673c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016740:	1a9b      	subs	r3, r3, r2
 8016742:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016746:	f7fc fb1a 	bl	8012d7e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801674a:	e7e5      	b.n	8016718 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801674c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801674c:	460b      	mov	r3, r1
 801674e:	680a      	ldr	r2, [r1, #0]
 8016750:	1d01      	adds	r1, r0, #4
 8016752:	6992      	ldr	r2, [r2, #24]
 8016754:	4618      	mov	r0, r3
 8016756:	4710      	bx	r2

08016758 <_ZN8touchgfx12TextProviderC1Ev>:
 8016758:	b538      	push	{r3, r4, r5, lr}
 801675a:	2500      	movs	r5, #0
 801675c:	2302      	movs	r3, #2
 801675e:	4604      	mov	r4, r0
 8016760:	220e      	movs	r2, #14
 8016762:	7403      	strb	r3, [r0, #16]
 8016764:	4629      	mov	r1, r5
 8016766:	6145      	str	r5, [r0, #20]
 8016768:	7605      	strb	r5, [r0, #24]
 801676a:	83c5      	strh	r5, [r0, #30]
 801676c:	8405      	strh	r5, [r0, #32]
 801676e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8016770:	8705      	strh	r5, [r0, #56]	; 0x38
 8016772:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8016774:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8016778:	e9c0 5500 	strd	r5, r5, [r0]
 801677c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8016780:	304c      	adds	r0, #76	; 0x4c
 8016782:	f00c fe2b 	bl	80233dc <memset>
 8016786:	2301      	movs	r3, #1
 8016788:	4620      	mov	r0, r4
 801678a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801678e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016792:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8016796:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801679a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801679e:	f7ef fd33 	bl	8006208 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80167a2:	4620      	mov	r0, r4
 80167a4:	bd38      	pop	{r3, r4, r5, pc}

080167a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80167a6:	b530      	push	{r4, r5, lr}
 80167a8:	2500      	movs	r5, #0
 80167aa:	2401      	movs	r4, #1
 80167ac:	6843      	ldr	r3, [r0, #4]
 80167ae:	b913      	cbnz	r3, 80167b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80167b0:	6803      	ldr	r3, [r0, #0]
 80167b2:	b313      	cbz	r3, 80167fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80167b4:	6043      	str	r3, [r0, #4]
 80167b6:	7e03      	ldrb	r3, [r0, #24]
 80167b8:	b143      	cbz	r3, 80167cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80167ba:	6943      	ldr	r3, [r0, #20]
 80167bc:	b12b      	cbz	r3, 80167ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80167be:	881a      	ldrh	r2, [r3, #0]
 80167c0:	b11a      	cbz	r2, 80167ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80167c2:	1c9a      	adds	r2, r3, #2
 80167c4:	6142      	str	r2, [r0, #20]
 80167c6:	8818      	ldrh	r0, [r3, #0]
 80167c8:	bd30      	pop	{r4, r5, pc}
 80167ca:	7605      	strb	r5, [r0, #24]
 80167cc:	6843      	ldr	r3, [r0, #4]
 80167ce:	8819      	ldrh	r1, [r3, #0]
 80167d0:	b199      	cbz	r1, 80167fa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80167d2:	1c9a      	adds	r2, r3, #2
 80167d4:	2902      	cmp	r1, #2
 80167d6:	6042      	str	r2, [r0, #4]
 80167d8:	d1f5      	bne.n	80167c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80167da:	7c03      	ldrb	r3, [r0, #16]
 80167dc:	2b01      	cmp	r3, #1
 80167de:	d8e5      	bhi.n	80167ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167e0:	1c5a      	adds	r2, r3, #1
 80167e2:	3302      	adds	r3, #2
 80167e4:	7402      	strb	r2, [r0, #16]
 80167e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80167ea:	6143      	str	r3, [r0, #20]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d0dd      	beq.n	80167ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d0da      	beq.n	80167ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167f6:	7604      	strb	r4, [r0, #24]
 80167f8:	e7d8      	b.n	80167ac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80167fa:	2000      	movs	r0, #0
 80167fc:	e7e4      	b.n	80167c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080167fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80167fe:	6001      	str	r1, [r0, #0]
 8016800:	2100      	movs	r1, #0
 8016802:	b430      	push	{r4, r5}
 8016804:	6041      	str	r1, [r0, #4]
 8016806:	6815      	ldr	r5, [r2, #0]
 8016808:	6085      	str	r5, [r0, #8]
 801680a:	6852      	ldr	r2, [r2, #4]
 801680c:	6443      	str	r3, [r0, #68]	; 0x44
 801680e:	9b02      	ldr	r3, [sp, #8]
 8016810:	60c2      	str	r2, [r0, #12]
 8016812:	7401      	strb	r1, [r0, #16]
 8016814:	6141      	str	r1, [r0, #20]
 8016816:	7601      	strb	r1, [r0, #24]
 8016818:	8701      	strh	r1, [r0, #56]	; 0x38
 801681a:	8401      	strh	r1, [r0, #32]
 801681c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8016820:	6483      	str	r3, [r0, #72]	; 0x48
 8016822:	bc30      	pop	{r4, r5}
 8016824:	f7ef bcf0 	b.w	8006208 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016828 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682a:	4605      	mov	r5, r0
 801682c:	4608      	mov	r0, r1
 801682e:	b1f1      	cbz	r1, 801686e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016830:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8016834:	460b      	mov	r3, r1
 8016836:	f101 0708 	add.w	r7, r1, #8
 801683a:	4622      	mov	r2, r4
 801683c:	6818      	ldr	r0, [r3, #0]
 801683e:	3308      	adds	r3, #8
 8016840:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016844:	4626      	mov	r6, r4
 8016846:	42bb      	cmp	r3, r7
 8016848:	c603      	stmia	r6!, {r0, r1}
 801684a:	4634      	mov	r4, r6
 801684c:	d1f6      	bne.n	801683c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801684e:	6818      	ldr	r0, [r3, #0]
 8016850:	6030      	str	r0, [r6, #0]
 8016852:	4610      	mov	r0, r2
 8016854:	889b      	ldrh	r3, [r3, #4]
 8016856:	80b3      	strh	r3, [r6, #4]
 8016858:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801685c:	015b      	lsls	r3, r3, #5
 801685e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016862:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8016866:	430b      	orrs	r3, r1
 8016868:	425b      	negs	r3, r3
 801686a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801686e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016870 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016870:	b538      	push	{r3, r4, r5, lr}
 8016872:	460c      	mov	r4, r1
 8016874:	6811      	ldr	r1, [r2, #0]
 8016876:	4610      	mov	r0, r2
 8016878:	68cd      	ldr	r5, [r1, #12]
 801687a:	4619      	mov	r1, r3
 801687c:	47a8      	blx	r5
 801687e:	2800      	cmp	r0, #0
 8016880:	bf08      	it	eq
 8016882:	4620      	moveq	r0, r4
 8016884:	bd38      	pop	{r3, r4, r5, pc}
	...

08016888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801688a:	4604      	mov	r4, r0
 801688c:	4615      	mov	r5, r2
 801688e:	4608      	mov	r0, r1
 8016890:	b93a      	cbnz	r2, 80168a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016892:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016896:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801689a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801689e:	4628      	mov	r0, r5
 80168a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168a2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80168a6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80168aa:	8893      	ldrh	r3, [r2, #4]
 80168ac:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80168b0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80168b4:	79ee      	ldrb	r6, [r5, #7]
 80168b6:	4316      	orrs	r6, r2
 80168b8:	19da      	adds	r2, r3, r7
 80168ba:	b291      	uxth	r1, r2
 80168bc:	b2b7      	uxth	r7, r6
 80168be:	291d      	cmp	r1, #29
 80168c0:	d87b      	bhi.n	80169ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80168c2:	2201      	movs	r2, #1
 80168c4:	10f6      	asrs	r6, r6, #3
 80168c6:	408a      	lsls	r2, r1
 80168c8:	4974      	ldr	r1, [pc, #464]	; (8016a9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80168ca:	420a      	tst	r2, r1
 80168cc:	d12e      	bne.n	801692c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80168ce:	f412 7f60 	tst.w	r2, #896	; 0x380
 80168d2:	d072      	beq.n	80169ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80168d4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80168d8:	462b      	mov	r3, r5
 80168da:	f105 0e08 	add.w	lr, r5, #8
 80168de:	4615      	mov	r5, r2
 80168e0:	6818      	ldr	r0, [r3, #0]
 80168e2:	3308      	adds	r3, #8
 80168e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80168e8:	4694      	mov	ip, r2
 80168ea:	4573      	cmp	r3, lr
 80168ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80168f0:	4662      	mov	r2, ip
 80168f2:	d1f5      	bne.n	80168e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80168f4:	6818      	ldr	r0, [r3, #0]
 80168f6:	f8cc 0000 	str.w	r0, [ip]
 80168fa:	889b      	ldrh	r3, [r3, #4]
 80168fc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016900:	b2b3      	uxth	r3, r6
 8016902:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016906:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801690a:	1aca      	subs	r2, r1, r3
 801690c:	1bcf      	subs	r7, r1, r7
 801690e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8016912:	b292      	uxth	r2, r2
 8016914:	1afb      	subs	r3, r7, r3
 8016916:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801691a:	10d2      	asrs	r2, r2, #3
 801691c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8016920:	4302      	orrs	r2, r0
 8016922:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8016926:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801692a:	e7b8      	b.n	801689e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801692c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801692e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016932:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8016934:	f640 6333 	movw	r3, #3635	; 0xe33
 8016938:	4299      	cmp	r1, r3
 801693a:	d110      	bne.n	801695e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801693c:	6803      	ldr	r3, [r0, #0]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	4798      	blx	r3
 8016942:	7b41      	ldrb	r1, [r0, #13]
 8016944:	00cb      	lsls	r3, r1, #3
 8016946:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801694a:	7a03      	ldrb	r3, [r0, #8]
 801694c:	0648      	lsls	r0, r1, #25
 801694e:	ea43 0302 	orr.w	r3, r3, r2
 8016952:	bf44      	itt	mi
 8016954:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016958:	b21b      	sxthmi	r3, r3
 801695a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801695e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8016962:	462a      	mov	r2, r5
 8016964:	f105 0c08 	add.w	ip, r5, #8
 8016968:	443b      	add	r3, r7
 801696a:	4433      	add	r3, r6
 801696c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8016970:	b29b      	uxth	r3, r3
 8016972:	4635      	mov	r5, r6
 8016974:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016978:	6810      	ldr	r0, [r2, #0]
 801697a:	3208      	adds	r2, #8
 801697c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016980:	4637      	mov	r7, r6
 8016982:	4562      	cmp	r2, ip
 8016984:	c703      	stmia	r7!, {r0, r1}
 8016986:	463e      	mov	r6, r7
 8016988:	d1f6      	bne.n	8016978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801698a:	6810      	ldr	r0, [r2, #0]
 801698c:	6038      	str	r0, [r7, #0]
 801698e:	8892      	ldrh	r2, [r2, #4]
 8016990:	80ba      	strh	r2, [r7, #4]
 8016992:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016996:	10db      	asrs	r3, r3, #3
 8016998:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801699c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80169a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80169a4:	4313      	orrs	r3, r2
 80169a6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80169aa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80169ae:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80169b2:	1a9b      	subs	r3, r3, r2
 80169b4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80169b8:	e771      	b.n	801689e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80169ba:	f023 0204 	bic.w	r2, r3, #4
 80169be:	f640 611b 	movw	r1, #3611	; 0xe1b
 80169c2:	428a      	cmp	r2, r1
 80169c4:	d003      	beq.n	80169ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80169c6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80169ca:	4293      	cmp	r3, r2
 80169cc:	d120      	bne.n	8016a10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80169ce:	3b01      	subs	r3, #1
 80169d0:	4602      	mov	r2, r0
 80169d2:	4629      	mov	r1, r5
 80169d4:	4620      	mov	r0, r4
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	f7ff ff4a 	bl	8016870 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80169dc:	7b41      	ldrb	r1, [r0, #13]
 80169de:	00cb      	lsls	r3, r1, #3
 80169e0:	0649      	lsls	r1, r1, #25
 80169e2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80169e6:	7a03      	ldrb	r3, [r0, #8]
 80169e8:	ea43 0302 	orr.w	r3, r3, r2
 80169ec:	bf44      	itt	mi
 80169ee:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80169f2:	b21b      	sxthmi	r3, r3
 80169f4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80169f8:	7b6b      	ldrb	r3, [r5, #13]
 80169fa:	7aaa      	ldrb	r2, [r5, #10]
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a02:	4313      	orrs	r3, r2
 8016a04:	115a      	asrs	r2, r3, #5
 8016a06:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016a0a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016a0e:	e035      	b.n	8016a7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016a10:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016a14:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016a18:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016a1c:	7a2a      	ldrb	r2, [r5, #8]
 8016a1e:	ea42 0201 	orr.w	r2, r2, r1
 8016a22:	f640 6109 	movw	r1, #3593	; 0xe09
 8016a26:	bf1c      	itt	ne
 8016a28:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016a2c:	b212      	sxthne	r2, r2
 8016a2e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016a32:	f023 0210 	bic.w	r2, r3, #16
 8016a36:	428a      	cmp	r2, r1
 8016a38:	d003      	beq.n	8016a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016a3a:	f640 6213 	movw	r2, #3603	; 0xe13
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	d129      	bne.n	8016a96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016a42:	7b6e      	ldrb	r6, [r5, #13]
 8016a44:	4629      	mov	r1, r5
 8016a46:	0076      	lsls	r6, r6, #1
 8016a48:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016a4c:	7aae      	ldrb	r6, [r5, #10]
 8016a4e:	4316      	orrs	r6, r2
 8016a50:	f640 6213 	movw	r2, #3603	; 0xe13
 8016a54:	4293      	cmp	r3, r2
 8016a56:	4602      	mov	r2, r0
 8016a58:	4620      	mov	r0, r4
 8016a5a:	bf16      	itet	ne
 8016a5c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016a60:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016a64:	b29b      	uxthne	r3, r3
 8016a66:	f7ff ff03 	bl	8016870 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016a6a:	7b43      	ldrb	r3, [r0, #13]
 8016a6c:	7a82      	ldrb	r2, [r0, #10]
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016a74:	4313      	orrs	r3, r2
 8016a76:	1af6      	subs	r6, r6, r3
 8016a78:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8016a7c:	7b69      	ldrb	r1, [r5, #13]
 8016a7e:	00cb      	lsls	r3, r1, #3
 8016a80:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016a84:	7a2b      	ldrb	r3, [r5, #8]
 8016a86:	4313      	orrs	r3, r2
 8016a88:	064a      	lsls	r2, r1, #25
 8016a8a:	bf44      	itt	mi
 8016a8c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016a90:	b21b      	sxthmi	r3, r3
 8016a92:	1bdb      	subs	r3, r3, r7
 8016a94:	e747      	b.n	8016926 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016a96:	2300      	movs	r3, #0
 8016a98:	e7b7      	b.n	8016a0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8016a9a:	bf00      	nop
 8016a9c:	3fc00079 	.word	0x3fc00079

08016aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aa4:	4604      	mov	r4, r0
 8016aa6:	b942      	cbnz	r2, 8016aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016aac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8016ab0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8016ab4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016ab8:	e047      	b.n	8016b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016aba:	7b51      	ldrb	r1, [r2, #13]
 8016abc:	8893      	ldrh	r3, [r2, #4]
 8016abe:	010d      	lsls	r5, r1, #4
 8016ac0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8016ac4:	79d5      	ldrb	r5, [r2, #7]
 8016ac6:	4305      	orrs	r5, r0
 8016ac8:	2d04      	cmp	r5, #4
 8016aca:	bfcc      	ite	gt
 8016acc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016ad0:	f04f 0e01 	movle.w	lr, #1
 8016ad4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016ad8:	f200 80ab 	bhi.w	8016c32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016adc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016ae0:	4283      	cmp	r3, r0
 8016ae2:	d216      	bcs.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ae4:	f240 605b 	movw	r0, #1627	; 0x65b
 8016ae8:	4283      	cmp	r3, r0
 8016aea:	d859      	bhi.n	8016ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016aec:	f240 6057 	movw	r0, #1623	; 0x657
 8016af0:	4283      	cmp	r3, r0
 8016af2:	d20e      	bcs.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016af4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016af8:	d24a      	bcs.n	8016b90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016afa:	f240 604e 	movw	r0, #1614	; 0x64e
 8016afe:	4283      	cmp	r3, r0
 8016b00:	d207      	bcs.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b02:	f240 601a 	movw	r0, #1562	; 0x61a
 8016b06:	4283      	cmp	r3, r0
 8016b08:	d02a      	beq.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016b0a:	d821      	bhi.n	8016b50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016b0c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016b10:	d35b      	bcc.n	8016bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016b12:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8016b16:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016b1a:	f040 80d0 	bne.w	8016cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b1e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8016b22:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016b26:	f040 80ca 	bne.w	8016cbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016b2a:	00cb      	lsls	r3, r1, #3
 8016b2c:	0649      	lsls	r1, r1, #25
 8016b2e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016b32:	7a13      	ldrb	r3, [r2, #8]
 8016b34:	ea43 0300 	orr.w	r3, r3, r0
 8016b38:	bf44      	itt	mi
 8016b3a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b3e:	b21b      	sxthmi	r3, r3
 8016b40:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016b44:	1b5d      	subs	r5, r3, r5
 8016b46:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016b4a:	4610      	mov	r0, r2
 8016b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b50:	f240 604b 	movw	r0, #1611	; 0x64b
 8016b54:	4283      	cmp	r3, r0
 8016b56:	d338      	bcc.n	8016bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016b58:	f240 604c 	movw	r0, #1612	; 0x64c
 8016b5c:	4283      	cmp	r3, r0
 8016b5e:	d9d8      	bls.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016b60:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8016b64:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8016b68:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016b6c:	f040 80f3 	bne.w	8016d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016b70:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016b74:	f040 80ef 	bne.w	8016d56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016b78:	00cb      	lsls	r3, r1, #3
 8016b7a:	064e      	lsls	r6, r1, #25
 8016b7c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016b80:	7a13      	ldrb	r3, [r2, #8]
 8016b82:	ea43 0300 	orr.w	r3, r3, r0
 8016b86:	bf44      	itt	mi
 8016b88:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b8c:	b21b      	sxthmi	r3, r3
 8016b8e:	e7d9      	b.n	8016b44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016b90:	f240 6054 	movw	r0, #1620	; 0x654
 8016b94:	4283      	cmp	r3, r0
 8016b96:	d8e3      	bhi.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016b98:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016b9c:	d9e0      	bls.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016b9e:	e7b8      	b.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ba0:	f240 6074 	movw	r0, #1652	; 0x674
 8016ba4:	4283      	cmp	r3, r0
 8016ba6:	d0b4      	beq.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ba8:	d82d      	bhi.n	8016c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016baa:	f240 605e 	movw	r0, #1630	; 0x65e
 8016bae:	4283      	cmp	r3, r0
 8016bb0:	d804      	bhi.n	8016bbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016bb2:	f240 605d 	movw	r0, #1629	; 0x65d
 8016bb6:	4283      	cmp	r3, r0
 8016bb8:	d3d2      	bcc.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016bba:	e7aa      	b.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bbc:	f240 605f 	movw	r0, #1631	; 0x65f
 8016bc0:	4283      	cmp	r3, r0
 8016bc2:	d0cd      	beq.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016bc4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016bc8:	d0a3      	beq.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bca:	00cb      	lsls	r3, r1, #3
 8016bcc:	0649      	lsls	r1, r1, #25
 8016bce:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016bd2:	7a13      	ldrb	r3, [r2, #8]
 8016bd4:	ea43 0300 	orr.w	r3, r3, r0
 8016bd8:	bf44      	itt	mi
 8016bda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016bde:	b21b      	sxthmi	r3, r3
 8016be0:	1b5d      	subs	r5, r3, r5
 8016be2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016be6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016bea:	7b53      	ldrb	r3, [r2, #13]
 8016bec:	015b      	lsls	r3, r3, #5
 8016bee:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016bf2:	7993      	ldrb	r3, [r2, #6]
 8016bf4:	430b      	orrs	r3, r1
 8016bf6:	2105      	movs	r1, #5
 8016bf8:	005b      	lsls	r3, r3, #1
 8016bfa:	fb93 f3f1 	sdiv	r3, r3, r1
 8016bfe:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016c02:	440b      	add	r3, r1
 8016c04:	e756      	b.n	8016ab4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016c06:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016c0a:	4283      	cmp	r3, r0
 8016c0c:	d809      	bhi.n	8016c22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016c0e:	f240 60df 	movw	r0, #1759	; 0x6df
 8016c12:	4283      	cmp	r3, r0
 8016c14:	f4bf af7d 	bcs.w	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c18:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016c1c:	2b05      	cmp	r3, #5
 8016c1e:	d8d4      	bhi.n	8016bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c20:	e777      	b.n	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c22:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016c26:	4283      	cmp	r3, r0
 8016c28:	d09a      	beq.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c2a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016c2e:	4283      	cmp	r3, r0
 8016c30:	e7ca      	b.n	8016bc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016c32:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016c36:	d22b      	bcs.n	8016c90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016c38:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016c3c:	4283      	cmp	r3, r0
 8016c3e:	d28f      	bcs.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c40:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016c44:	4283      	cmp	r3, r0
 8016c46:	d816      	bhi.n	8016c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016c48:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016c4c:	4283      	cmp	r3, r0
 8016c4e:	f4bf af60 	bcs.w	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c52:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016c56:	4283      	cmp	r3, r0
 8016c58:	d80a      	bhi.n	8016c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016c5a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016c5e:	4283      	cmp	r3, r0
 8016c60:	f4bf af57 	bcs.w	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c64:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016c68:	4283      	cmp	r3, r0
 8016c6a:	f43f af79 	beq.w	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c6e:	e7ac      	b.n	8016bca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c70:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016c74:	e7f8      	b.n	8016c68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016c76:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016c7a:	4283      	cmp	r3, r0
 8016c7c:	d802      	bhi.n	8016c84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016c7e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016c82:	e798      	b.n	8016bb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016c84:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016c88:	4283      	cmp	r3, r0
 8016c8a:	f47f af42 	bne.w	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c8e:	e767      	b.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c90:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016c94:	4283      	cmp	r3, r0
 8016c96:	f43f af63 	beq.w	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c9a:	d802      	bhi.n	8016ca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016c9c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016ca0:	e7f2      	b.n	8016c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016ca2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016ca6:	4283      	cmp	r3, r0
 8016ca8:	d805      	bhi.n	8016cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016caa:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016cae:	4283      	cmp	r3, r0
 8016cb0:	f4ff af2f 	bcc.w	8016b12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cb4:	e754      	b.n	8016b60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cb6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016cba:	4283      	cmp	r3, r0
 8016cbc:	e7af      	b.n	8016c1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016cbe:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016cc2:	4617      	mov	r7, r2
 8016cc4:	f102 0808 	add.w	r8, r2, #8
 8016cc8:	4666      	mov	r6, ip
 8016cca:	6838      	ldr	r0, [r7, #0]
 8016ccc:	3708      	adds	r7, #8
 8016cce:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016cd2:	46e6      	mov	lr, ip
 8016cd4:	4547      	cmp	r7, r8
 8016cd6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016cda:	46f4      	mov	ip, lr
 8016cdc:	d1f5      	bne.n	8016cca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016cde:	6838      	ldr	r0, [r7, #0]
 8016ce0:	f8ce 0000 	str.w	r0, [lr]
 8016ce4:	88b9      	ldrh	r1, [r7, #4]
 8016ce6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016cea:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016cee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016cf2:	d009      	beq.n	8016d08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016cf4:	7b51      	ldrb	r1, [r2, #13]
 8016cf6:	7992      	ldrb	r2, [r2, #6]
 8016cf8:	0149      	lsls	r1, r1, #5
 8016cfa:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016cfe:	4311      	orrs	r1, r2
 8016d00:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016d04:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016d08:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016d0c:	b2ad      	uxth	r5, r5
 8016d0e:	d00d      	beq.n	8016d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016d10:	442b      	add	r3, r5
 8016d12:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016d1c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016d20:	10db      	asrs	r3, r3, #3
 8016d22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d26:	4313      	orrs	r3, r2
 8016d28:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016d2c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016d30:	00cb      	lsls	r3, r1, #3
 8016d32:	064f      	lsls	r7, r1, #25
 8016d34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016d38:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016d3c:	ea43 0302 	orr.w	r3, r3, r2
 8016d40:	bf44      	itt	mi
 8016d42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016d46:	b21b      	sxthmi	r3, r3
 8016d48:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016d4c:	1b5b      	subs	r3, r3, r5
 8016d4e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016d52:	4632      	mov	r2, r6
 8016d54:	e6f9      	b.n	8016b4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016d56:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016d5a:	4617      	mov	r7, r2
 8016d5c:	f102 0908 	add.w	r9, r2, #8
 8016d60:	4666      	mov	r6, ip
 8016d62:	6838      	ldr	r0, [r7, #0]
 8016d64:	3708      	adds	r7, #8
 8016d66:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016d6a:	46e0      	mov	r8, ip
 8016d6c:	454f      	cmp	r7, r9
 8016d6e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016d72:	46c4      	mov	ip, r8
 8016d74:	d1f5      	bne.n	8016d62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016d76:	6838      	ldr	r0, [r7, #0]
 8016d78:	f8c8 0000 	str.w	r0, [r8]
 8016d7c:	88b9      	ldrh	r1, [r7, #4]
 8016d7e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016d82:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016d86:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016d8a:	d009      	beq.n	8016da0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016d8c:	7b51      	ldrb	r1, [r2, #13]
 8016d8e:	7992      	ldrb	r2, [r2, #6]
 8016d90:	0149      	lsls	r1, r1, #5
 8016d92:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016d96:	4311      	orrs	r1, r2
 8016d98:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016d9c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016da0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016da4:	d00e      	beq.n	8016dc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016da6:	eba3 030e 	sub.w	r3, r3, lr
 8016daa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016db4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016db8:	10db      	asrs	r3, r3, #3
 8016dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016dbe:	4313      	orrs	r3, r2
 8016dc0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016dc4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016dc8:	00cb      	lsls	r3, r1, #3
 8016dca:	0648      	lsls	r0, r1, #25
 8016dcc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016dd0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016dd4:	ea43 0302 	orr.w	r3, r3, r2
 8016dd8:	bf44      	itt	mi
 8016dda:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016dde:	b21b      	sxthmi	r3, r3
 8016de0:	1b5d      	subs	r5, r3, r5
 8016de2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016de6:	e7b4      	b.n	8016d52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016de8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dec:	461e      	mov	r6, r3
 8016dee:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016df0:	4604      	mov	r4, r0
 8016df2:	4617      	mov	r7, r2
 8016df4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016df8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016dfc:	f7ef f95e 	bl	80060bc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016e00:	4605      	mov	r5, r0
 8016e02:	b918      	cbnz	r0, 8016e0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016e04:	6030      	str	r0, [r6, #0]
 8016e06:	4628      	mov	r0, r5
 8016e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	4601      	mov	r1, r0
 8016e10:	4638      	mov	r0, r7
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	4798      	blx	r3
 8016e16:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	6030      	str	r0, [r6, #0]
 8016e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016e22:	d213      	bcs.n	8016e4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016e24:	4643      	mov	r3, r8
 8016e26:	4639      	mov	r1, r7
 8016e28:	4620      	mov	r0, r4
 8016e2a:	f7ff fe39 	bl	8016aa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016e2e:	6030      	str	r0, [r6, #0]
 8016e30:	6833      	ldr	r3, [r6, #0]
 8016e32:	b143      	cbz	r3, 8016e46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016e34:	7b5a      	ldrb	r2, [r3, #13]
 8016e36:	7a9b      	ldrb	r3, [r3, #10]
 8016e38:	0052      	lsls	r2, r2, #1
 8016e3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016e3e:	4313      	orrs	r3, r2
 8016e40:	bf0c      	ite	eq
 8016e42:	2301      	moveq	r3, #1
 8016e44:	2300      	movne	r3, #0
 8016e46:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8016e4a:	e7dc      	b.n	8016e06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016e4c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016e50:	b29b      	uxth	r3, r3
 8016e52:	2b7f      	cmp	r3, #127	; 0x7f
 8016e54:	d804      	bhi.n	8016e60 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016e56:	4639      	mov	r1, r7
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f7ff fd15 	bl	8016888 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016e5e:	e7e6      	b.n	8016e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016e60:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d0e3      	beq.n	8016e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016e68:	f640 1302 	movw	r3, #2306	; 0x902
 8016e6c:	429d      	cmp	r5, r3
 8016e6e:	d1df      	bne.n	8016e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016e70:	4601      	mov	r1, r0
 8016e72:	4620      	mov	r0, r4
 8016e74:	f7ff fcd8 	bl	8016828 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016e78:	e7d9      	b.n	8016e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016e7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016e7a:	b510      	push	{r4, lr}
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8016e82:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016e84:	b1e1      	cbz	r1, 8016ec0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016e86:	2b0a      	cmp	r3, #10
 8016e88:	d02d      	beq.n	8016ee6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016e8a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016e8c:	3901      	subs	r1, #1
 8016e8e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016e92:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8016e94:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8016e98:	1c51      	adds	r1, r2, #1
 8016e9a:	b289      	uxth	r1, r1
 8016e9c:	2901      	cmp	r1, #1
 8016e9e:	bf8a      	itet	hi
 8016ea0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016ea4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8016ea6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8016ea8:	1c5a      	adds	r2, r3, #1
 8016eaa:	8722      	strh	r2, [r4, #56]	; 0x38
 8016eac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016eae:	4413      	add	r3, r2
 8016eb0:	b29b      	uxth	r3, r3
 8016eb2:	2b09      	cmp	r3, #9
 8016eb4:	bf88      	it	hi
 8016eb6:	3b0a      	subhi	r3, #10
 8016eb8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016ebc:	8458      	strh	r0, [r3, #34]	; 0x22
 8016ebe:	e7de      	b.n	8016e7e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016ec0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016ec2:	2b0a      	cmp	r3, #10
 8016ec4:	d00f      	beq.n	8016ee6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016ec6:	4620      	mov	r0, r4
 8016ec8:	f7ff fc6d 	bl	80167a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016ecc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016ece:	1c5a      	adds	r2, r3, #1
 8016ed0:	8722      	strh	r2, [r4, #56]	; 0x38
 8016ed2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016ed4:	4413      	add	r3, r2
 8016ed6:	b29b      	uxth	r3, r3
 8016ed8:	2b09      	cmp	r3, #9
 8016eda:	bf88      	it	hi
 8016edc:	3b0a      	subhi	r3, #10
 8016ede:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016ee2:	8458      	strh	r0, [r3, #34]	; 0x22
 8016ee4:	e7ec      	b.n	8016ec0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016ee6:	bd10      	pop	{r4, pc}

08016ee8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016ee8:	b538      	push	{r3, r4, r5, lr}
 8016eea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016eec:	4604      	mov	r4, r0
 8016eee:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016ef2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8016ef4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8016ef6:	3a01      	subs	r2, #1
 8016ef8:	8702      	strh	r2, [r0, #56]	; 0x38
 8016efa:	1c5a      	adds	r2, r3, #1
 8016efc:	b292      	uxth	r2, r2
 8016efe:	2a09      	cmp	r2, #9
 8016f00:	bf8a      	itet	hi
 8016f02:	3b09      	subhi	r3, #9
 8016f04:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8016f06:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8016f08:	f7ff ffb7 	bl	8016e7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8016f0c:	8c23      	ldrh	r3, [r4, #32]
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	bf9c      	itt	ls
 8016f12:	3301      	addls	r3, #1
 8016f14:	8423      	strhls	r3, [r4, #32]
 8016f16:	8be3      	ldrh	r3, [r4, #30]
 8016f18:	b90b      	cbnz	r3, 8016f1e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8016f1a:	2302      	movs	r3, #2
 8016f1c:	83e3      	strh	r3, [r4, #30]
 8016f1e:	8be3      	ldrh	r3, [r4, #30]
 8016f20:	4628      	mov	r0, r5
 8016f22:	3b01      	subs	r3, #1
 8016f24:	b29b      	uxth	r3, r3
 8016f26:	83e3      	strh	r3, [r4, #30]
 8016f28:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016f2c:	8365      	strh	r5, [r4, #26]
 8016f2e:	bd38      	pop	{r3, r4, r5, pc}

08016f30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016f30:	428a      	cmp	r2, r1
 8016f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f36:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8016f38:	d932      	bls.n	8016fa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8016f3a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8016f3c:	1a54      	subs	r4, r2, r1
 8016f3e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8016f42:	19ee      	adds	r6, r5, r7
 8016f44:	fa1f fe84 	uxth.w	lr, r4
 8016f48:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8016f4c:	3e01      	subs	r6, #1
 8016f4e:	b2b4      	uxth	r4, r6
 8016f50:	eba4 090e 	sub.w	r9, r4, lr
 8016f54:	fa1f f989 	uxth.w	r9, r9
 8016f58:	2c09      	cmp	r4, #9
 8016f5a:	4626      	mov	r6, r4
 8016f5c:	bf88      	it	hi
 8016f5e:	f1a4 060a 	subhi.w	r6, r4, #10
 8016f62:	f1bc 0f00 	cmp.w	ip, #0
 8016f66:	f104 34ff 	add.w	r4, r4, #4294967295
 8016f6a:	bf08      	it	eq
 8016f6c:	f04f 0c02 	moveq.w	ip, #2
 8016f70:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016f74:	b2a4      	uxth	r4, r4
 8016f76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f7a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8016f7e:	454c      	cmp	r4, r9
 8016f80:	fa1f fc8c 	uxth.w	ip, ip
 8016f84:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016f88:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8016f8c:	d1e4      	bne.n	8016f58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8016f8e:	eba5 050e 	sub.w	r5, r5, lr
 8016f92:	eb0e 0408 	add.w	r4, lr, r8
 8016f96:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8016f9a:	8705      	strh	r5, [r0, #56]	; 0x38
 8016f9c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8016fa0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8016fa2:	250a      	movs	r5, #10
 8016fa4:	1a64      	subs	r4, r4, r1
 8016fa6:	4439      	add	r1, r7
 8016fa8:	b289      	uxth	r1, r1
 8016faa:	8704      	strh	r4, [r0, #56]	; 0x38
 8016fac:	2909      	cmp	r1, #9
 8016fae:	bf88      	it	hi
 8016fb0:	390a      	subhi	r1, #10
 8016fb2:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016fb4:	b18a      	cbz	r2, 8016fda <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016fb6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8016fb8:	3a01      	subs	r2, #1
 8016fba:	3101      	adds	r1, #1
 8016fbc:	b292      	uxth	r2, r2
 8016fbe:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016fc2:	8701      	strh	r1, [r0, #56]	; 0x38
 8016fc4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8016fc6:	b901      	cbnz	r1, 8016fca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8016fc8:	86c5      	strh	r5, [r0, #54]	; 0x36
 8016fca:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8016fcc:	3901      	subs	r1, #1
 8016fce:	b289      	uxth	r1, r1
 8016fd0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8016fd2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016fd6:	844c      	strh	r4, [r1, #34]	; 0x22
 8016fd8:	e7ec      	b.n	8016fb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8016fda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fde:	f7ff bf4c 	b.w	8016e7a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016fe2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016fe2:	b570      	push	{r4, r5, r6, lr}
 8016fe4:	2500      	movs	r5, #0
 8016fe6:	4295      	cmp	r5, r2
 8016fe8:	d011      	beq.n	801700e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8016fea:	8bc4      	ldrh	r4, [r0, #30]
 8016fec:	f831 6b02 	ldrh.w	r6, [r1], #2
 8016ff0:	4414      	add	r4, r2
 8016ff2:	3c01      	subs	r4, #1
 8016ff4:	1b64      	subs	r4, r4, r5
 8016ff6:	b2a4      	uxth	r4, r4
 8016ff8:	2c01      	cmp	r4, #1
 8016ffa:	bf88      	it	hi
 8016ffc:	3c02      	subhi	r4, #2
 8016ffe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8017002:	8b64      	ldrh	r4, [r4, #26]
 8017004:	42b4      	cmp	r4, r6
 8017006:	d117      	bne.n	8017038 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8017008:	3501      	adds	r5, #1
 801700a:	b2ad      	uxth	r5, r5
 801700c:	e7eb      	b.n	8016fe6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801700e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017012:	2400      	movs	r4, #0
 8017014:	4413      	add	r3, r2
 8017016:	b2a2      	uxth	r2, r4
 8017018:	429a      	cmp	r2, r3
 801701a:	da0f      	bge.n	801703c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801701c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801701e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8017022:	3401      	adds	r4, #1
 8017024:	4432      	add	r2, r6
 8017026:	b292      	uxth	r2, r2
 8017028:	2a09      	cmp	r2, #9
 801702a:	bf88      	it	hi
 801702c:	3a0a      	subhi	r2, #10
 801702e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8017032:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017034:	42aa      	cmp	r2, r5
 8017036:	d0ee      	beq.n	8017016 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017038:	2000      	movs	r0, #0
 801703a:	bd70      	pop	{r4, r5, r6, pc}
 801703c:	2001      	movs	r0, #1
 801703e:	e7fc      	b.n	801703a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017040 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017044:	4605      	mov	r5, r0
 8017046:	4616      	mov	r6, r2
 8017048:	1c8c      	adds	r4, r1, #2
 801704a:	8809      	ldrh	r1, [r1, #0]
 801704c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017050:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017054:	42b3      	cmp	r3, r6
 8017056:	d124      	bne.n	80170a2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017058:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801705c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017060:	f001 070f 	and.w	r7, r1, #15
 8017064:	4652      	mov	r2, sl
 8017066:	f8cd 8000 	str.w	r8, [sp]
 801706a:	464b      	mov	r3, r9
 801706c:	4621      	mov	r1, r4
 801706e:	4628      	mov	r0, r5
 8017070:	f7ff ffb7 	bl	8016fe2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017074:	4683      	mov	fp, r0
 8017076:	b168      	cbz	r0, 8017094 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017078:	eb0a 0109 	add.w	r1, sl, r9
 801707c:	463a      	mov	r2, r7
 801707e:	4628      	mov	r0, r5
 8017080:	4441      	add	r1, r8
 8017082:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017086:	4649      	mov	r1, r9
 8017088:	f7ff ff52 	bl	8016f30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801708c:	4658      	mov	r0, fp
 801708e:	b003      	add	sp, #12
 8017090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017094:	eb07 010a 	add.w	r1, r7, sl
 8017098:	4449      	add	r1, r9
 801709a:	4441      	add	r1, r8
 801709c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80170a0:	e7d2      	b.n	8017048 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80170a2:	f04f 0b00 	mov.w	fp, #0
 80170a6:	e7f1      	b.n	801708c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080170a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	8810      	ldrh	r0, [r2, #0]
 80170ac:	4298      	cmp	r0, r3
 80170ae:	d817      	bhi.n	80170e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80170b0:	1e48      	subs	r0, r1, #1
 80170b2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80170b6:	4298      	cmp	r0, r3
 80170b8:	d312      	bcc.n	80170e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80170ba:	2400      	movs	r4, #0
 80170bc:	428c      	cmp	r4, r1
 80170be:	d20f      	bcs.n	80170e0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80170c0:	1860      	adds	r0, r4, r1
 80170c2:	1040      	asrs	r0, r0, #1
 80170c4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80170c8:	0085      	lsls	r5, r0, #2
 80170ca:	42b3      	cmp	r3, r6
 80170cc:	d902      	bls.n	80170d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80170ce:	3001      	adds	r0, #1
 80170d0:	b284      	uxth	r4, r0
 80170d2:	e7f3      	b.n	80170bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80170d4:	d201      	bcs.n	80170da <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80170d6:	b281      	uxth	r1, r0
 80170d8:	e7f0      	b.n	80170bc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80170da:	442a      	add	r2, r5
 80170dc:	8850      	ldrh	r0, [r2, #2]
 80170de:	bd70      	pop	{r4, r5, r6, pc}
 80170e0:	2000      	movs	r0, #0
 80170e2:	e7fc      	b.n	80170de <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080170e4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80170e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170e8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80170ea:	4604      	mov	r4, r0
 80170ec:	260b      	movs	r6, #11
 80170ee:	886f      	ldrh	r7, [r5, #2]
 80170f0:	087f      	lsrs	r7, r7, #1
 80170f2:	3e01      	subs	r6, #1
 80170f4:	d013      	beq.n	801711e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80170f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80170f8:	462a      	mov	r2, r5
 80170fa:	4639      	mov	r1, r7
 80170fc:	4620      	mov	r0, r4
 80170fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017102:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8017106:	4643      	mov	r3, r8
 8017108:	f7ff ffce 	bl	80170a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801710c:	b138      	cbz	r0, 801711e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801710e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017112:	4642      	mov	r2, r8
 8017114:	4620      	mov	r0, r4
 8017116:	f7ff ff93 	bl	8017040 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801711a:	2800      	cmp	r0, #0
 801711c:	d1e9      	bne.n	80170f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017124 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8017124:	b570      	push	{r4, r5, r6, lr}
 8017126:	694a      	ldr	r2, [r1, #20]
 8017128:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801712a:	684b      	ldr	r3, [r1, #4]
 801712c:	1b54      	subs	r4, r2, r5
 801712e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8017130:	f000 8106 	beq.w	8017340 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017134:	1b9b      	subs	r3, r3, r6
 8017136:	d003      	beq.n	8017140 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017138:	4363      	muls	r3, r4
 801713a:	2210      	movs	r2, #16
 801713c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017140:	680c      	ldr	r4, [r1, #0]
 8017142:	698a      	ldr	r2, [r1, #24]
 8017144:	1b65      	subs	r5, r4, r5
 8017146:	f000 80fd 	beq.w	8017344 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801714a:	1b92      	subs	r2, r2, r6
 801714c:	d003      	beq.n	8017156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801714e:	436a      	muls	r2, r5
 8017150:	2410      	movs	r4, #16
 8017152:	fb92 f2f4 	sdiv	r2, r2, r4
 8017156:	1a9b      	subs	r3, r3, r2
 8017158:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8017380 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801715c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017160:	460a      	mov	r2, r1
 8017162:	ee07 3a90 	vmov	s15, r3
 8017166:	f100 040c 	add.w	r4, r0, #12
 801716a:	4603      	mov	r3, r0
 801716c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017170:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017174:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017178:	eeb1 6a43 	vneg.f32	s12, s6
 801717c:	edd2 7a02 	vldr	s15, [r2, #8]
 8017180:	3214      	adds	r2, #20
 8017182:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017186:	ece3 6a01 	vstmia	r3!, {s13}
 801718a:	429c      	cmp	r4, r3
 801718c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017190:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017194:	edc3 7a02 	vstr	s15, [r3, #8]
 8017198:	ed52 7a01 	vldr	s15, [r2, #-4]
 801719c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80171a0:	edc3 7a05 	vstr	s15, [r3, #20]
 80171a4:	d1ea      	bne.n	801717c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80171a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80171a8:	698b      	ldr	r3, [r1, #24]
 80171aa:	edd0 4a02 	vldr	s9, [r0, #8]
 80171ae:	1a9b      	subs	r3, r3, r2
 80171b0:	edd0 3a00 	vldr	s7, [r0]
 80171b4:	edd0 6a01 	vldr	s13, [r0, #4]
 80171b8:	ee07 3a90 	vmov	s15, r3
 80171bc:	684b      	ldr	r3, [r1, #4]
 80171be:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80171c2:	ed90 5a05 	vldr	s10, [r0, #20]
 80171c6:	1a9b      	subs	r3, r3, r2
 80171c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171cc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80171d0:	ed90 2a03 	vldr	s4, [r0, #12]
 80171d4:	ee07 3a10 	vmov	s14, r3
 80171d8:	edd0 5a04 	vldr	s11, [r0, #16]
 80171dc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80171e0:	ed90 1a07 	vldr	s2, [r0, #28]
 80171e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80171e8:	edd0 2a06 	vldr	s5, [r0, #24]
 80171ec:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80171f0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80171f4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80171f8:	ee32 5a45 	vsub.f32	s10, s4, s10
 80171fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017200:	ee67 7a83 	vmul.f32	s15, s15, s6
 8017204:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8017208:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801720a:	694a      	ldr	r2, [r1, #20]
 801720c:	1b13      	subs	r3, r2, r4
 801720e:	ee07 3a10 	vmov	s14, r3
 8017212:	680b      	ldr	r3, [r1, #0]
 8017214:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017218:	1b1b      	subs	r3, r3, r4
 801721a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801721e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8017222:	ee07 3a10 	vmov	s14, r3
 8017226:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801722a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801722e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8017232:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017236:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801723a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801723c:	698b      	ldr	r3, [r1, #24]
 801723e:	1a9b      	subs	r3, r3, r2
 8017240:	ee06 3a90 	vmov	s13, r3
 8017244:	684b      	ldr	r3, [r1, #4]
 8017246:	1a9b      	subs	r3, r3, r2
 8017248:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801724c:	ee07 3a10 	vmov	s14, r3
 8017250:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017254:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017258:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801725c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017260:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017264:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017268:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801726c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801726e:	694a      	ldr	r2, [r1, #20]
 8017270:	1b13      	subs	r3, r2, r4
 8017272:	ee07 3a10 	vmov	s14, r3
 8017276:	680b      	ldr	r3, [r1, #0]
 8017278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801727c:	1b1b      	subs	r3, r3, r4
 801727e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017282:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017286:	ee07 3a10 	vmov	s14, r3
 801728a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801728e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017292:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017296:	edd0 5a08 	vldr	s11, [r0, #32]
 801729a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801729e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80172a2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80172a6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80172aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80172ac:	698b      	ldr	r3, [r1, #24]
 80172ae:	1a9b      	subs	r3, r3, r2
 80172b0:	ee07 3a10 	vmov	s14, r3
 80172b4:	684b      	ldr	r3, [r1, #4]
 80172b6:	1a9b      	subs	r3, r3, r2
 80172b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172bc:	ee01 3a90 	vmov	s3, r3
 80172c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80172c4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80172c8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80172cc:	ee61 1a84 	vmul.f32	s3, s3, s8
 80172d0:	eea1 7a21 	vfma.f32	s14, s2, s3
 80172d4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80172d8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80172dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80172de:	694a      	ldr	r2, [r1, #20]
 80172e0:	1b13      	subs	r3, r2, r4
 80172e2:	ee03 3a10 	vmov	s6, r3
 80172e6:	680b      	ldr	r3, [r1, #0]
 80172e8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80172ec:	1b1b      	subs	r3, r3, r4
 80172ee:	ee23 3a04 	vmul.f32	s6, s6, s8
 80172f2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80172f6:	ee03 3a10 	vmov	s6, r3
 80172fa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80172fe:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017302:	eee1 5a04 	vfma.f32	s11, s2, s8
 8017306:	ee25 6a86 	vmul.f32	s12, s11, s12
 801730a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801730e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8017312:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8017316:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801731e:	dd13      	ble.n	8017348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8017320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017324:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8017328:	63c3      	str	r3, [r0, #60]	; 0x3c
 801732a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801732e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017336:	dd15      	ble.n	8017364 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801733c:	6403      	str	r3, [r0, #64]	; 0x40
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	4623      	mov	r3, r4
 8017342:	e6fd      	b.n	8017140 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017344:	462a      	mov	r2, r5
 8017346:	e706      	b.n	8017156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017348:	d502      	bpl.n	8017350 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801734a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801734e:	e7e9      	b.n	8017324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017350:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017354:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017358:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017360:	dade      	bge.n	8017320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017362:	e7f2      	b.n	801734a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017364:	d502      	bpl.n	801736c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017366:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801736a:	e7e7      	b.n	801733c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801736c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017370:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017374:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801737c:	dadc      	bge.n	8017338 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801737e:	e7f2      	b.n	8017366 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017380:	3d800000 	.word	0x3d800000

08017384 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017388:	2714      	movs	r7, #20
 801738a:	435f      	muls	r7, r3
 801738c:	eb02 0c07 	add.w	ip, r2, r7
 8017390:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017394:	f115 0e0f 	adds.w	lr, r5, #15
 8017398:	f100 80a2 	bmi.w	80174e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801739c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80173a0:	9c08      	ldr	r4, [sp, #32]
 80173a2:	2614      	movs	r6, #20
 80173a4:	f8c0 e014 	str.w	lr, [r0, #20]
 80173a8:	4366      	muls	r6, r4
 80173aa:	eb02 0806 	add.w	r8, r2, r6
 80173ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80173b2:	f115 040f 	adds.w	r4, r5, #15
 80173b6:	f100 809f 	bmi.w	80174f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80173ba:	1124      	asrs	r4, r4, #4
 80173bc:	eba4 040e 	sub.w	r4, r4, lr
 80173c0:	6184      	str	r4, [r0, #24]
 80173c2:	2c00      	cmp	r4, #0
 80173c4:	f000 808a 	beq.w	80174dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80173c8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80173cc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80173d0:	5995      	ldr	r5, [r2, r6]
 80173d2:	eba4 0809 	sub.w	r8, r4, r9
 80173d6:	59d4      	ldr	r4, [r2, r7]
 80173d8:	eba5 0a04 	sub.w	sl, r5, r4
 80173dc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80173e0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80173e4:	fb0e fe05 	mul.w	lr, lr, r5
 80173e8:	fb0a ee19 	mls	lr, sl, r9, lr
 80173ec:	fb08 e404 	mla	r4, r8, r4, lr
 80173f0:	3c01      	subs	r4, #1
 80173f2:	19a4      	adds	r4, r4, r6
 80173f4:	f100 808c 	bmi.w	8017510 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80173f8:	fb94 fef6 	sdiv	lr, r4, r6
 80173fc:	fb06 441e 	mls	r4, r6, lr, r4
 8017400:	f8c0 e000 	str.w	lr, [r0]
 8017404:	6104      	str	r4, [r0, #16]
 8017406:	2d00      	cmp	r5, #0
 8017408:	f2c0 8095 	blt.w	8017536 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801740c:	fb95 f4f6 	sdiv	r4, r5, r6
 8017410:	fb06 5514 	mls	r5, r6, r4, r5
 8017414:	6044      	str	r4, [r0, #4]
 8017416:	6085      	str	r5, [r0, #8]
 8017418:	60c6      	str	r6, [r0, #12]
 801741a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801741e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8017422:	6945      	ldr	r5, [r0, #20]
 8017424:	59d2      	ldr	r2, [r2, r7]
 8017426:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801742a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8017558 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801742e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017432:	ee07 4a10 	vmov	s14, r4
 8017436:	6804      	ldr	r4, [r0, #0]
 8017438:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801743c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017440:	ee07 2a90 	vmov	s15, r2
 8017444:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801744c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017450:	edd3 6a00 	vldr	s13, [r3]
 8017454:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017458:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801745c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017460:	edc0 6a07 	vstr	s13, [r0, #28]
 8017464:	edd0 6a01 	vldr	s13, [r0, #4]
 8017468:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801746c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017470:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017474:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017478:	ed80 6a08 	vstr	s12, [r0, #32]
 801747c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801747e:	6242      	str	r2, [r0, #36]	; 0x24
 8017480:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8017484:	ed93 6a03 	vldr	s12, [r3, #12]
 8017488:	eea5 6a87 	vfma.f32	s12, s11, s14
 801748c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017490:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017494:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8017498:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801749c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80174a0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80174a4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 80174a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80174aa:	6302      	str	r2, [r0, #48]	; 0x30
 80174ac:	ed93 6a06 	vldr	s12, [r3, #24]
 80174b0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 80174b4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80174b8:	eeb0 7a46 	vmov.f32	s14, s12
 80174bc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80174c0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80174c4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80174c8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80174cc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80174d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80174d4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80174d8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80174da:	63c3      	str	r3, [r0, #60]	; 0x3c
 80174dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174e0:	2410      	movs	r4, #16
 80174e2:	f1c5 0501 	rsb	r5, r5, #1
 80174e6:	fb9e fef4 	sdiv	lr, lr, r4
 80174ea:	f015 050f 	ands.w	r5, r5, #15
 80174ee:	bf18      	it	ne
 80174f0:	2501      	movne	r5, #1
 80174f2:	ebae 0e05 	sub.w	lr, lr, r5
 80174f6:	e753      	b.n	80173a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80174f8:	f04f 0910 	mov.w	r9, #16
 80174fc:	f1c5 0501 	rsb	r5, r5, #1
 8017500:	fb94 f4f9 	sdiv	r4, r4, r9
 8017504:	f015 050f 	ands.w	r5, r5, #15
 8017508:	bf18      	it	ne
 801750a:	2501      	movne	r5, #1
 801750c:	1b64      	subs	r4, r4, r5
 801750e:	e755      	b.n	80173bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8017510:	4264      	negs	r4, r4
 8017512:	fb94 fef6 	sdiv	lr, r4, r6
 8017516:	f1ce 0800 	rsb	r8, lr, #0
 801751a:	fb06 441e 	mls	r4, r6, lr, r4
 801751e:	f8c0 8000 	str.w	r8, [r0]
 8017522:	6104      	str	r4, [r0, #16]
 8017524:	2c00      	cmp	r4, #0
 8017526:	f43f af6e 	beq.w	8017406 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801752a:	ea6f 0e0e 	mvn.w	lr, lr
 801752e:	1b34      	subs	r4, r6, r4
 8017530:	f8c0 e000 	str.w	lr, [r0]
 8017534:	e766      	b.n	8017404 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017536:	426d      	negs	r5, r5
 8017538:	fb95 f4f6 	sdiv	r4, r5, r6
 801753c:	f1c4 0e00 	rsb	lr, r4, #0
 8017540:	fb06 5514 	mls	r5, r6, r4, r5
 8017544:	f8c0 e004 	str.w	lr, [r0, #4]
 8017548:	6085      	str	r5, [r0, #8]
 801754a:	2d00      	cmp	r5, #0
 801754c:	f43f af64 	beq.w	8017418 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017550:	43e4      	mvns	r4, r4
 8017552:	1b75      	subs	r5, r6, r5
 8017554:	6044      	str	r4, [r0, #4]
 8017556:	e75e      	b.n	8017416 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017558:	3d800000 	.word	0x3d800000

0801755c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801755c:	4b01      	ldr	r3, [pc, #4]	; (8017564 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801755e:	6018      	str	r0, [r3, #0]
 8017560:	4770      	bx	lr
 8017562:	bf00      	nop
 8017564:	2400aed4 	.word	0x2400aed4

08017568 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017568:	4b06      	ldr	r3, [pc, #24]	; (8017584 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801756a:	881a      	ldrh	r2, [r3, #0]
 801756c:	4282      	cmp	r2, r0
 801756e:	d807      	bhi.n	8017580 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017570:	4b05      	ldr	r3, [pc, #20]	; (8017588 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017572:	881b      	ldrh	r3, [r3, #0]
 8017574:	4413      	add	r3, r2
 8017576:	4298      	cmp	r0, r3
 8017578:	bfac      	ite	ge
 801757a:	2000      	movge	r0, #0
 801757c:	2001      	movlt	r0, #1
 801757e:	4770      	bx	lr
 8017580:	2000      	movs	r0, #0
 8017582:	4770      	bx	lr
 8017584:	2400aef4 	.word	0x2400aef4
 8017588:	2400aef8 	.word	0x2400aef8

0801758c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801758c:	b508      	push	{r3, lr}
 801758e:	4601      	mov	r1, r0
 8017590:	f7ff ffea 	bl	8017568 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017594:	b118      	cbz	r0, 801759e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017596:	4b02      	ldr	r3, [pc, #8]	; (80175a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801759e:	bd08      	pop	{r3, pc}
 80175a0:	2400aed8 	.word	0x2400aed8

080175a4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80175a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175a6:	4c24      	ldr	r4, [pc, #144]	; (8017638 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80175a8:	6823      	ldr	r3, [r4, #0]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d042      	beq.n	8017634 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80175ae:	4a23      	ldr	r2, [pc, #140]	; (801763c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80175b0:	4d23      	ldr	r5, [pc, #140]	; (8017640 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80175b2:	8811      	ldrh	r1, [r2, #0]
 80175b4:	f8b5 c000 	ldrh.w	ip, [r5]
 80175b8:	4822      	ldr	r0, [pc, #136]	; (8017644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80175ba:	4461      	add	r1, ip
 80175bc:	1c4a      	adds	r2, r1, #1
 80175be:	008f      	lsls	r7, r1, #2
 80175c0:	f022 0201 	bic.w	r2, r2, #1
 80175c4:	19de      	adds	r6, r3, r7
 80175c6:	0412      	lsls	r2, r2, #16
 80175c8:	6006      	str	r6, [r0, #0]
 80175ca:	4e1f      	ldr	r6, [pc, #124]	; (8017648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80175cc:	0c12      	lsrs	r2, r2, #16
 80175ce:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80175d2:	19da      	adds	r2, r3, r7
 80175d4:	6032      	str	r2, [r6, #0]
 80175d6:	220e      	movs	r2, #14
 80175d8:	fb02 f20c 	mul.w	r2, r2, ip
 80175dc:	3203      	adds	r2, #3
 80175de:	f022 0203 	bic.w	r2, r2, #3
 80175e2:	443a      	add	r2, r7
 80175e4:	4f19      	ldr	r7, [pc, #100]	; (801764c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80175e6:	4413      	add	r3, r2
 80175e8:	603b      	str	r3, [r7, #0]
 80175ea:	2300      	movs	r3, #0
 80175ec:	4f18      	ldr	r7, [pc, #96]	; (8017650 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80175ee:	469c      	mov	ip, r3
 80175f0:	803b      	strh	r3, [r7, #0]
 80175f2:	4f18      	ldr	r7, [pc, #96]	; (8017654 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80175f4:	683f      	ldr	r7, [r7, #0]
 80175f6:	1aba      	subs	r2, r7, r2
 80175f8:	4f17      	ldr	r7, [pc, #92]	; (8017658 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80175fa:	603a      	str	r2, [r7, #0]
 80175fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017600:	4a16      	ldr	r2, [pc, #88]	; (801765c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017602:	8013      	strh	r3, [r2, #0]
 8017604:	428b      	cmp	r3, r1
 8017606:	d10d      	bne.n	8017624 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017608:	882d      	ldrh	r5, [r5, #0]
 801760a:	2300      	movs	r3, #0
 801760c:	6830      	ldr	r0, [r6, #0]
 801760e:	240e      	movs	r4, #14
 8017610:	429d      	cmp	r5, r3
 8017612:	d90f      	bls.n	8017634 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017614:	fb04 0203 	mla	r2, r4, r3, r0
 8017618:	3301      	adds	r3, #1
 801761a:	7b11      	ldrb	r1, [r2, #12]
 801761c:	f36f 1145 	bfc	r1, #5, #1
 8017620:	7311      	strb	r1, [r2, #12]
 8017622:	e7f5      	b.n	8017610 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017624:	6822      	ldr	r2, [r4, #0]
 8017626:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801762a:	6802      	ldr	r2, [r0, #0]
 801762c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017630:	3301      	adds	r3, #1
 8017632:	e7e7      	b.n	8017604 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017636:	bf00      	nop
 8017638:	2400aed8 	.word	0x2400aed8
 801763c:	2400aef4 	.word	0x2400aef4
 8017640:	2400aef8 	.word	0x2400aef8
 8017644:	2400aeec 	.word	0x2400aeec
 8017648:	2400aedc 	.word	0x2400aedc
 801764c:	2400aee4 	.word	0x2400aee4
 8017650:	2400aef6 	.word	0x2400aef6
 8017654:	2400aee0 	.word	0x2400aee0
 8017658:	2400aef0 	.word	0x2400aef0
 801765c:	2400aee8 	.word	0x2400aee8

08017660 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017660:	4b06      	ldr	r3, [pc, #24]	; (801767c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	b943      	cbnz	r3, 8017678 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017666:	b139      	cbz	r1, 8017678 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017668:	4b05      	ldr	r3, [pc, #20]	; (8017680 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801766a:	801a      	strh	r2, [r3, #0]
 801766c:	4b05      	ldr	r3, [pc, #20]	; (8017684 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801766e:	6019      	str	r1, [r3, #0]
 8017670:	4b05      	ldr	r3, [pc, #20]	; (8017688 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017672:	6018      	str	r0, [r3, #0]
 8017674:	f7ff bf96 	b.w	80175a4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017678:	4770      	bx	lr
 801767a:	bf00      	nop
 801767c:	2400aee4 	.word	0x2400aee4
 8017680:	2400aef8 	.word	0x2400aef8
 8017684:	2400aee0 	.word	0x2400aee0
 8017688:	2400aed8 	.word	0x2400aed8

0801768c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801768c:	b470      	push	{r4, r5, r6}
 801768e:	4c07      	ldr	r4, [pc, #28]	; (80176ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017690:	4605      	mov	r5, r0
 8017692:	4610      	mov	r0, r2
 8017694:	9a03      	ldr	r2, [sp, #12]
 8017696:	6826      	ldr	r6, [r4, #0]
 8017698:	b936      	cbnz	r6, 80176a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801769a:	6025      	str	r5, [r4, #0]
 801769c:	4c04      	ldr	r4, [pc, #16]	; (80176b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801769e:	8021      	strh	r1, [r4, #0]
 80176a0:	4619      	mov	r1, r3
 80176a2:	bc70      	pop	{r4, r5, r6}
 80176a4:	f7ff bfdc 	b.w	8017660 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80176a8:	bc70      	pop	{r4, r5, r6}
 80176aa:	4770      	bx	lr
 80176ac:	2400aefc 	.word	0x2400aefc
 80176b0:	2400aef4 	.word	0x2400aef4

080176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80176b4:	4a12      	ldr	r2, [pc, #72]	; (8017700 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80176b6:	8803      	ldrh	r3, [r0, #0]
 80176b8:	8812      	ldrh	r2, [r2, #0]
 80176ba:	4293      	cmp	r3, r2
 80176bc:	d207      	bcs.n	80176ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80176be:	4a11      	ldr	r2, [pc, #68]	; (8017704 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80176c0:	2114      	movs	r1, #20
 80176c2:	6812      	ldr	r2, [r2, #0]
 80176c4:	fb01 2303 	mla	r3, r1, r3, r2
 80176c8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80176cc:	4770      	bx	lr
 80176ce:	490e      	ldr	r1, [pc, #56]	; (8017708 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80176d0:	8809      	ldrh	r1, [r1, #0]
 80176d2:	4411      	add	r1, r2
 80176d4:	428b      	cmp	r3, r1
 80176d6:	da04      	bge.n	80176e2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80176d8:	1a9b      	subs	r3, r3, r2
 80176da:	4a0c      	ldr	r2, [pc, #48]	; (801770c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80176dc:	210e      	movs	r1, #14
 80176de:	6812      	ldr	r2, [r2, #0]
 80176e0:	e7f0      	b.n	80176c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80176e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80176e6:	4293      	cmp	r3, r2
 80176e8:	d108      	bne.n	80176fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80176ea:	4b09      	ldr	r3, [pc, #36]	; (8017710 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	b91b      	cbnz	r3, 80176f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80176f0:	4b08      	ldr	r3, [pc, #32]	; (8017714 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80176f2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80176f6:	4770      	bx	lr
 80176f8:	4b07      	ldr	r3, [pc, #28]	; (8017718 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80176fa:	e7fa      	b.n	80176f2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80176fc:	2000      	movs	r0, #0
 80176fe:	4770      	bx	lr
 8017700:	2400aef4 	.word	0x2400aef4
 8017704:	2400aefc 	.word	0x2400aefc
 8017708:	2400aef8 	.word	0x2400aef8
 801770c:	2400aedc 	.word	0x2400aedc
 8017710:	2400ae6c 	.word	0x2400ae6c
 8017714:	2400ae6e 	.word	0x2400ae6e
 8017718:	2400ae70 	.word	0x2400ae70

0801771c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801771c:	4a12      	ldr	r2, [pc, #72]	; (8017768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801771e:	8803      	ldrh	r3, [r0, #0]
 8017720:	8812      	ldrh	r2, [r2, #0]
 8017722:	4293      	cmp	r3, r2
 8017724:	d207      	bcs.n	8017736 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017726:	4a11      	ldr	r2, [pc, #68]	; (801776c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017728:	2114      	movs	r1, #20
 801772a:	6812      	ldr	r2, [r2, #0]
 801772c:	fb01 2303 	mla	r3, r1, r3, r2
 8017730:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017734:	4770      	bx	lr
 8017736:	490e      	ldr	r1, [pc, #56]	; (8017770 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017738:	8809      	ldrh	r1, [r1, #0]
 801773a:	4411      	add	r1, r2
 801773c:	428b      	cmp	r3, r1
 801773e:	da04      	bge.n	801774a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017740:	1a9b      	subs	r3, r3, r2
 8017742:	4a0c      	ldr	r2, [pc, #48]	; (8017774 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017744:	210e      	movs	r1, #14
 8017746:	6812      	ldr	r2, [r2, #0]
 8017748:	e7f0      	b.n	801772c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801774a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801774e:	4293      	cmp	r3, r2
 8017750:	d108      	bne.n	8017764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017752:	4b09      	ldr	r3, [pc, #36]	; (8017778 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	b91b      	cbnz	r3, 8017760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017758:	4b08      	ldr	r3, [pc, #32]	; (801777c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801775a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801775e:	4770      	bx	lr
 8017760:	4b07      	ldr	r3, [pc, #28]	; (8017780 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017762:	e7fa      	b.n	801775a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017764:	2000      	movs	r0, #0
 8017766:	4770      	bx	lr
 8017768:	2400aef4 	.word	0x2400aef4
 801776c:	2400aefc 	.word	0x2400aefc
 8017770:	2400aef8 	.word	0x2400aef8
 8017774:	2400aedc 	.word	0x2400aedc
 8017778:	2400ae6c 	.word	0x2400ae6c
 801777c:	2400ae70 	.word	0x2400ae70
 8017780:	2400ae6e 	.word	0x2400ae6e

08017784 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017784:	4a1f      	ldr	r2, [pc, #124]	; (8017804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8017786:	b510      	push	{r4, lr}
 8017788:	880b      	ldrh	r3, [r1, #0]
 801778a:	8812      	ldrh	r2, [r2, #0]
 801778c:	4293      	cmp	r3, r2
 801778e:	d213      	bcs.n	80177b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8017790:	4a1d      	ldr	r2, [pc, #116]	; (8017808 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8017792:	2114      	movs	r1, #20
 8017794:	6812      	ldr	r2, [r2, #0]
 8017796:	fb01 2303 	mla	r3, r1, r3, r2
 801779a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801779e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80177a2:	8a1a      	ldrh	r2, [r3, #16]
 80177a4:	8a5b      	ldrh	r3, [r3, #18]
 80177a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80177aa:	8004      	strh	r4, [r0, #0]
 80177ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177b0:	8041      	strh	r1, [r0, #2]
 80177b2:	8082      	strh	r2, [r0, #4]
 80177b4:	80c3      	strh	r3, [r0, #6]
 80177b6:	e00e      	b.n	80177d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80177b8:	4914      	ldr	r1, [pc, #80]	; (801780c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80177ba:	8809      	ldrh	r1, [r1, #0]
 80177bc:	4411      	add	r1, r2
 80177be:	428b      	cmp	r3, r1
 80177c0:	da0a      	bge.n	80177d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80177c2:	1a9b      	subs	r3, r3, r2
 80177c4:	4a12      	ldr	r2, [pc, #72]	; (8017810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80177c6:	210e      	movs	r1, #14
 80177c8:	6812      	ldr	r2, [r2, #0]
 80177ca:	fb01 2303 	mla	r3, r1, r3, r2
 80177ce:	681a      	ldr	r2, [r3, #0]
 80177d0:	6002      	str	r2, [r0, #0]
 80177d2:	685a      	ldr	r2, [r3, #4]
 80177d4:	6042      	str	r2, [r0, #4]
 80177d6:	bd10      	pop	{r4, pc}
 80177d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80177dc:	4293      	cmp	r3, r2
 80177de:	d10b      	bne.n	80177f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80177e0:	4b0c      	ldr	r3, [pc, #48]	; (8017814 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80177e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80177e6:	4b0c      	ldr	r3, [pc, #48]	; (8017818 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80177e8:	8081      	strh	r1, [r0, #4]
 80177ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80177ee:	2300      	movs	r3, #0
 80177f0:	80c2      	strh	r2, [r0, #6]
 80177f2:	8003      	strh	r3, [r0, #0]
 80177f4:	8043      	strh	r3, [r0, #2]
 80177f6:	e7ee      	b.n	80177d6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80177f8:	2300      	movs	r3, #0
 80177fa:	8003      	strh	r3, [r0, #0]
 80177fc:	8043      	strh	r3, [r0, #2]
 80177fe:	8083      	strh	r3, [r0, #4]
 8017800:	e7d8      	b.n	80177b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017802:	bf00      	nop
 8017804:	2400aef4 	.word	0x2400aef4
 8017808:	2400aefc 	.word	0x2400aefc
 801780c:	2400aef8 	.word	0x2400aef8
 8017810:	2400aedc 	.word	0x2400aedc
 8017814:	2400ae68 	.word	0x2400ae68
 8017818:	2400ae6a 	.word	0x2400ae6a

0801781c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801781c:	4a17      	ldr	r2, [pc, #92]	; (801787c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801781e:	8803      	ldrh	r3, [r0, #0]
 8017820:	8812      	ldrh	r2, [r2, #0]
 8017822:	4293      	cmp	r3, r2
 8017824:	d213      	bcs.n	801784e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017826:	4a16      	ldr	r2, [pc, #88]	; (8017880 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017828:	2114      	movs	r1, #20
 801782a:	6812      	ldr	r2, [r2, #0]
 801782c:	fb01 2303 	mla	r3, r1, r3, r2
 8017830:	8a1a      	ldrh	r2, [r3, #16]
 8017832:	8919      	ldrh	r1, [r3, #8]
 8017834:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017838:	428a      	cmp	r2, r1
 801783a:	db1d      	blt.n	8017878 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801783c:	8a58      	ldrh	r0, [r3, #18]
 801783e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017842:	895b      	ldrh	r3, [r3, #10]
 8017844:	4298      	cmp	r0, r3
 8017846:	bfac      	ite	ge
 8017848:	2000      	movge	r0, #0
 801784a:	2001      	movlt	r0, #1
 801784c:	4770      	bx	lr
 801784e:	490d      	ldr	r1, [pc, #52]	; (8017884 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017850:	8809      	ldrh	r1, [r1, #0]
 8017852:	4411      	add	r1, r2
 8017854:	428b      	cmp	r3, r1
 8017856:	da0d      	bge.n	8017874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017858:	1a9b      	subs	r3, r3, r2
 801785a:	4a0b      	ldr	r2, [pc, #44]	; (8017888 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801785c:	210e      	movs	r1, #14
 801785e:	6812      	ldr	r2, [r2, #0]
 8017860:	fb01 2303 	mla	r3, r1, r3, r2
 8017864:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017868:	891a      	ldrh	r2, [r3, #8]
 801786a:	4291      	cmp	r1, r2
 801786c:	db04      	blt.n	8017878 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801786e:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017872:	e7e6      	b.n	8017842 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017874:	2000      	movs	r0, #0
 8017876:	4770      	bx	lr
 8017878:	2001      	movs	r0, #1
 801787a:	4770      	bx	lr
 801787c:	2400aef4 	.word	0x2400aef4
 8017880:	2400aefc 	.word	0x2400aefc
 8017884:	2400aef8 	.word	0x2400aef8
 8017888:	2400aedc 	.word	0x2400aedc

0801788c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801788c:	4a12      	ldr	r2, [pc, #72]	; (80178d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801788e:	8803      	ldrh	r3, [r0, #0]
 8017890:	8811      	ldrh	r1, [r2, #0]
 8017892:	428b      	cmp	r3, r1
 8017894:	d20b      	bcs.n	80178ae <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017896:	4a11      	ldr	r2, [pc, #68]	; (80178dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017898:	6812      	ldr	r2, [r2, #0]
 801789a:	b112      	cbz	r2, 80178a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801789c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80178a0:	b9c0      	cbnz	r0, 80178d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80178a2:	4a0f      	ldr	r2, [pc, #60]	; (80178e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80178a4:	6811      	ldr	r1, [r2, #0]
 80178a6:	2214      	movs	r2, #20
 80178a8:	4353      	muls	r3, r2
 80178aa:	58c8      	ldr	r0, [r1, r3]
 80178ac:	4770      	bx	lr
 80178ae:	4a0d      	ldr	r2, [pc, #52]	; (80178e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80178b0:	8812      	ldrh	r2, [r2, #0]
 80178b2:	440a      	add	r2, r1
 80178b4:	4293      	cmp	r3, r2
 80178b6:	da04      	bge.n	80178c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80178b8:	4a08      	ldr	r2, [pc, #32]	; (80178dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80178ba:	6812      	ldr	r2, [r2, #0]
 80178bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80178c0:	4770      	bx	lr
 80178c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80178c6:	4293      	cmp	r3, r2
 80178c8:	d103      	bne.n	80178d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80178ca:	4b07      	ldr	r3, [pc, #28]	; (80178e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80178d0:	4770      	bx	lr
 80178d2:	2000      	movs	r0, #0
 80178d4:	4770      	bx	lr
 80178d6:	bf00      	nop
 80178d8:	2400aef4 	.word	0x2400aef4
 80178dc:	2400aed8 	.word	0x2400aed8
 80178e0:	2400aefc 	.word	0x2400aefc
 80178e4:	2400aef8 	.word	0x2400aef8
 80178e8:	2400ae74 	.word	0x2400ae74

080178ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80178ec:	4b24      	ldr	r3, [pc, #144]	; (8017980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80178ee:	8802      	ldrh	r2, [r0, #0]
 80178f0:	8818      	ldrh	r0, [r3, #0]
 80178f2:	4282      	cmp	r2, r0
 80178f4:	d221      	bcs.n	801793a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80178f6:	4b23      	ldr	r3, [pc, #140]	; (8017984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80178f8:	6819      	ldr	r1, [r3, #0]
 80178fa:	2314      	movs	r3, #20
 80178fc:	fb03 1302 	mla	r3, r3, r2, r1
 8017900:	6858      	ldr	r0, [r3, #4]
 8017902:	2800      	cmp	r0, #0
 8017904:	d03a      	beq.n	801797c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017906:	4920      	ldr	r1, [pc, #128]	; (8017988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017908:	6809      	ldr	r1, [r1, #0]
 801790a:	2900      	cmp	r1, #0
 801790c:	d036      	beq.n	801797c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801790e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017912:	2900      	cmp	r1, #0
 8017914:	d032      	beq.n	801797c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017916:	891a      	ldrh	r2, [r3, #8]
 8017918:	8958      	ldrh	r0, [r3, #10]
 801791a:	4350      	muls	r0, r2
 801791c:	7c5a      	ldrb	r2, [r3, #17]
 801791e:	7cdb      	ldrb	r3, [r3, #19]
 8017920:	0952      	lsrs	r2, r2, #5
 8017922:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017926:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801792a:	2b0b      	cmp	r3, #11
 801792c:	bf18      	it	ne
 801792e:	0040      	lslne	r0, r0, #1
 8017930:	3003      	adds	r0, #3
 8017932:	f020 0003 	bic.w	r0, r0, #3
 8017936:	4408      	add	r0, r1
 8017938:	4770      	bx	lr
 801793a:	4b14      	ldr	r3, [pc, #80]	; (801798c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801793c:	881b      	ldrh	r3, [r3, #0]
 801793e:	4403      	add	r3, r0
 8017940:	429a      	cmp	r2, r3
 8017942:	da1a      	bge.n	801797a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017944:	4b12      	ldr	r3, [pc, #72]	; (8017990 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017946:	1a10      	subs	r0, r2, r0
 8017948:	210e      	movs	r1, #14
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	fb01 3000 	mla	r0, r1, r0, r3
 8017950:	7b03      	ldrb	r3, [r0, #12]
 8017952:	f003 031f 	and.w	r3, r3, #31
 8017956:	2b0b      	cmp	r3, #11
 8017958:	d10b      	bne.n	8017972 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801795a:	8903      	ldrh	r3, [r0, #8]
 801795c:	8940      	ldrh	r0, [r0, #10]
 801795e:	4358      	muls	r0, r3
 8017960:	4b09      	ldr	r3, [pc, #36]	; (8017988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017962:	3003      	adds	r0, #3
 8017964:	6819      	ldr	r1, [r3, #0]
 8017966:	f020 0303 	bic.w	r3, r0, #3
 801796a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801796e:	4418      	add	r0, r3
 8017970:	4770      	bx	lr
 8017972:	2b0d      	cmp	r3, #13
 8017974:	d101      	bne.n	801797a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017976:	300d      	adds	r0, #13
 8017978:	4770      	bx	lr
 801797a:	2000      	movs	r0, #0
 801797c:	4770      	bx	lr
 801797e:	bf00      	nop
 8017980:	2400aef4 	.word	0x2400aef4
 8017984:	2400aefc 	.word	0x2400aefc
 8017988:	2400aed8 	.word	0x2400aed8
 801798c:	2400aef8 	.word	0x2400aef8
 8017990:	2400aedc 	.word	0x2400aedc

08017994 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017994:	4a17      	ldr	r2, [pc, #92]	; (80179f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8017996:	b510      	push	{r4, lr}
 8017998:	8803      	ldrh	r3, [r0, #0]
 801799a:	8812      	ldrh	r2, [r2, #0]
 801799c:	4293      	cmp	r3, r2
 801799e:	d20c      	bcs.n	80179ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80179a0:	4a15      	ldr	r2, [pc, #84]	; (80179f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80179a2:	2114      	movs	r1, #20
 80179a4:	6812      	ldr	r2, [r2, #0]
 80179a6:	fb01 2303 	mla	r3, r1, r3, r2
 80179aa:	7c58      	ldrb	r0, [r3, #17]
 80179ac:	0942      	lsrs	r2, r0, #5
 80179ae:	7cd8      	ldrb	r0, [r3, #19]
 80179b0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80179b4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80179b8:	bd10      	pop	{r4, pc}
 80179ba:	4910      	ldr	r1, [pc, #64]	; (80179fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80179bc:	8809      	ldrh	r1, [r1, #0]
 80179be:	4411      	add	r1, r2
 80179c0:	428b      	cmp	r3, r1
 80179c2:	da09      	bge.n	80179d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80179c4:	1a9b      	subs	r3, r3, r2
 80179c6:	4a0e      	ldr	r2, [pc, #56]	; (8017a00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80179c8:	210e      	movs	r1, #14
 80179ca:	6812      	ldr	r2, [r2, #0]
 80179cc:	fb01 2303 	mla	r3, r1, r3, r2
 80179d0:	7b18      	ldrb	r0, [r3, #12]
 80179d2:	f000 001f 	and.w	r0, r0, #31
 80179d6:	e7ef      	b.n	80179b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80179d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80179dc:	4293      	cmp	r3, r2
 80179de:	d106      	bne.n	80179ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80179e0:	f7ec f9f8 	bl	8003dd4 <_ZN8touchgfx3HAL3lcdEv>
 80179e4:	6803      	ldr	r3, [r0, #0]
 80179e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ec:	4718      	bx	r3
 80179ee:	2000      	movs	r0, #0
 80179f0:	e7e2      	b.n	80179b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80179f2:	bf00      	nop
 80179f4:	2400aef4 	.word	0x2400aef4
 80179f8:	2400aefc 	.word	0x2400aefc
 80179fc:	2400aef8 	.word	0x2400aef8
 8017a00:	2400aedc 	.word	0x2400aedc

08017a04 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017a04:	2010      	movs	r0, #16
 8017a06:	4770      	bx	lr

08017a08 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017a08:	2000      	movs	r0, #0
 8017a0a:	4770      	bx	lr

08017a0c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8017a0c:	4b02      	ldr	r3, [pc, #8]	; (8017a18 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8017a0e:	8818      	ldrh	r0, [r3, #0]
 8017a10:	0040      	lsls	r0, r0, #1
 8017a12:	b280      	uxth	r0, r0
 8017a14:	4770      	bx	lr
 8017a16:	bf00      	nop
 8017a18:	2400ae6e 	.word	0x2400ae6e

08017a1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017a1c:	2bff      	cmp	r3, #255	; 0xff
 8017a1e:	d050      	beq.n	8017ac2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017a20:	2a0b      	cmp	r2, #11
 8017a22:	d04a      	beq.n	8017aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017a24:	d80e      	bhi.n	8017a44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017a26:	2a03      	cmp	r2, #3
 8017a28:	d03f      	beq.n	8017aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017a2a:	d804      	bhi.n	8017a36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017a2c:	2a01      	cmp	r2, #1
 8017a2e:	d03e      	beq.n	8017aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017a30:	d93f      	bls.n	8017ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017a32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017a34:	4770      	bx	lr
 8017a36:	2a09      	cmp	r2, #9
 8017a38:	d03f      	beq.n	8017aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017a3a:	d83c      	bhi.n	8017ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017a3c:	2a08      	cmp	r2, #8
 8017a3e:	d03a      	beq.n	8017ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017a40:	2000      	movs	r0, #0
 8017a42:	4770      	bx	lr
 8017a44:	2a2f      	cmp	r2, #47	; 0x2f
 8017a46:	d024      	beq.n	8017a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017a48:	d80d      	bhi.n	8017a66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017a4a:	2a2d      	cmp	r2, #45	; 0x2d
 8017a4c:	d014      	beq.n	8017a78 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8017a4e:	d826      	bhi.n	8017a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017a50:	2a2c      	cmp	r2, #44	; 0x2c
 8017a52:	d1f5      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017a54:	684b      	ldr	r3, [r1, #4]
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d018      	beq.n	8017a8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017a5c:	d323      	bcc.n	8017aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017a5e:	2b02      	cmp	r3, #2
 8017a60:	d1ee      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017a62:	6880      	ldr	r0, [r0, #8]
 8017a64:	4770      	bx	lr
 8017a66:	2a31      	cmp	r2, #49	; 0x31
 8017a68:	d004      	beq.n	8017a74 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8017a6a:	d328      	bcc.n	8017abe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017a6c:	2a32      	cmp	r2, #50	; 0x32
 8017a6e:	d026      	beq.n	8017abe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017a70:	2a33      	cmp	r2, #51	; 0x33
 8017a72:	d1e5      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017a74:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017a76:	4770      	bx	lr
 8017a78:	684b      	ldr	r3, [r1, #4]
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	2b01      	cmp	r3, #1
 8017a7e:	d004      	beq.n	8017a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017a80:	d30b      	bcc.n	8017a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017a82:	2b02      	cmp	r3, #2
 8017a84:	d1dc      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017a86:	6900      	ldr	r0, [r0, #16]
 8017a88:	4770      	bx	lr
 8017a8a:	6a00      	ldr	r0, [r0, #32]
 8017a8c:	4770      	bx	lr
 8017a8e:	6980      	ldr	r0, [r0, #24]
 8017a90:	4770      	bx	lr
 8017a92:	684b      	ldr	r3, [r1, #4]
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d1d2      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017a9a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017a9c:	4770      	bx	lr
 8017a9e:	684b      	ldr	r3, [r1, #4]
 8017aa0:	781b      	ldrb	r3, [r3, #0]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d1cc      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017aa6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017aa8:	4770      	bx	lr
 8017aaa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017aac:	4770      	bx	lr
 8017aae:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017ab0:	4770      	bx	lr
 8017ab2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017ab4:	4770      	bx	lr
 8017ab6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017ab8:	4770      	bx	lr
 8017aba:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017abc:	4770      	bx	lr
 8017abe:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017ac0:	4770      	bx	lr
 8017ac2:	2a0b      	cmp	r2, #11
 8017ac4:	d049      	beq.n	8017b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017ac6:	d80e      	bhi.n	8017ae6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017ac8:	2a03      	cmp	r2, #3
 8017aca:	d040      	beq.n	8017b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017acc:	d804      	bhi.n	8017ad8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017ace:	2a01      	cmp	r2, #1
 8017ad0:	d03f      	beq.n	8017b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017ad2:	d940      	bls.n	8017b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017ad4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017ad6:	4770      	bx	lr
 8017ad8:	2a09      	cmp	r2, #9
 8017ada:	d03e      	beq.n	8017b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017adc:	d801      	bhi.n	8017ae2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017ade:	2a08      	cmp	r2, #8
 8017ae0:	d1ae      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017ae2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017ae4:	4770      	bx	lr
 8017ae6:	2a2f      	cmp	r2, #47	; 0x2f
 8017ae8:	d024      	beq.n	8017b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017aea:	d80d      	bhi.n	8017b08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017aec:	2a2d      	cmp	r2, #45	; 0x2d
 8017aee:	d014      	beq.n	8017b1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017af0:	d826      	bhi.n	8017b40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017af2:	2a2c      	cmp	r2, #44	; 0x2c
 8017af4:	d1a4      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017af6:	684b      	ldr	r3, [r1, #4]
 8017af8:	781b      	ldrb	r3, [r3, #0]
 8017afa:	2b01      	cmp	r3, #1
 8017afc:	d018      	beq.n	8017b30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017afe:	d324      	bcc.n	8017b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017b00:	2b02      	cmp	r3, #2
 8017b02:	d19d      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b04:	68c0      	ldr	r0, [r0, #12]
 8017b06:	4770      	bx	lr
 8017b08:	2a31      	cmp	r2, #49	; 0x31
 8017b0a:	d004      	beq.n	8017b16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017b0c:	d327      	bcc.n	8017b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017b0e:	2a32      	cmp	r2, #50	; 0x32
 8017b10:	d025      	beq.n	8017b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017b12:	2a33      	cmp	r2, #51	; 0x33
 8017b14:	d194      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b16:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017b18:	4770      	bx	lr
 8017b1a:	684b      	ldr	r3, [r1, #4]
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d004      	beq.n	8017b2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017b22:	d30b      	bcc.n	8017b3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017b24:	2b02      	cmp	r3, #2
 8017b26:	d18b      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b28:	6940      	ldr	r0, [r0, #20]
 8017b2a:	4770      	bx	lr
 8017b2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017b2e:	4770      	bx	lr
 8017b30:	69c0      	ldr	r0, [r0, #28]
 8017b32:	4770      	bx	lr
 8017b34:	684b      	ldr	r3, [r1, #4]
 8017b36:	781b      	ldrb	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d181      	bne.n	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b3c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017b3e:	4770      	bx	lr
 8017b40:	684b      	ldr	r3, [r1, #4]
 8017b42:	781b      	ldrb	r3, [r3, #0]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	f47f af7b 	bne.w	8017a40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017b4c:	4770      	bx	lr
 8017b4e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017b50:	4770      	bx	lr
 8017b52:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017b54:	4770      	bx	lr
 8017b56:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017b58:	4770      	bx	lr
 8017b5a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017b5c:	4770      	bx	lr
 8017b5e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017b60:	4770      	bx	lr

08017b62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b66:	b087      	sub	sp, #28
 8017b68:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017b6a:	9205      	str	r2, [sp, #20]
 8017b6c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017b70:	9101      	str	r1, [sp, #4]
 8017b72:	9202      	str	r2, [sp, #8]
 8017b74:	6841      	ldr	r1, [r0, #4]
 8017b76:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017b7a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017b7e:	fb01 2404 	mla	r4, r1, r4, r2
 8017b82:	6802      	ldr	r2, [r0, #0]
 8017b84:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017b88:	f8de 2000 	ldr.w	r2, [lr]
 8017b8c:	9203      	str	r2, [sp, #12]
 8017b8e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017b92:	3204      	adds	r2, #4
 8017b94:	9204      	str	r2, [sp, #16]
 8017b96:	9a02      	ldr	r2, [sp, #8]
 8017b98:	43d6      	mvns	r6, r2
 8017b9a:	b2f6      	uxtb	r6, r6
 8017b9c:	9a01      	ldr	r2, [sp, #4]
 8017b9e:	2a00      	cmp	r2, #0
 8017ba0:	dc03      	bgt.n	8017baa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017ba2:	9a05      	ldr	r2, [sp, #20]
 8017ba4:	2a00      	cmp	r2, #0
 8017ba6:	f340 8129 	ble.w	8017dfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017baa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017bac:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017bb0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bb6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017bba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	dd0e      	ble.n	8017be0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017bc2:	1408      	asrs	r0, r1, #16
 8017bc4:	d405      	bmi.n	8017bd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017bc6:	4560      	cmp	r0, ip
 8017bc8:	da03      	bge.n	8017bd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017bca:	1410      	asrs	r0, r2, #16
 8017bcc:	d401      	bmi.n	8017bd2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017bce:	42b8      	cmp	r0, r7
 8017bd0:	db07      	blt.n	8017be2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017bd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017bd4:	3b01      	subs	r3, #1
 8017bd6:	3402      	adds	r4, #2
 8017bd8:	4401      	add	r1, r0
 8017bda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017bdc:	4402      	add	r2, r0
 8017bde:	e7ee      	b.n	8017bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017be0:	d071      	beq.n	8017cc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017be2:	1e58      	subs	r0, r3, #1
 8017be4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017be6:	fb05 1500 	mla	r5, r5, r0, r1
 8017bea:	142d      	asrs	r5, r5, #16
 8017bec:	d45f      	bmi.n	8017cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017bee:	4565      	cmp	r5, ip
 8017bf0:	da5d      	bge.n	8017cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017bf2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017bf4:	fb05 2000 	mla	r0, r5, r0, r2
 8017bf8:	1400      	asrs	r0, r0, #16
 8017bfa:	d458      	bmi.n	8017cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017bfc:	42b8      	cmp	r0, r7
 8017bfe:	da56      	bge.n	8017cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017c00:	4699      	mov	r9, r3
 8017c02:	46a2      	mov	sl, r4
 8017c04:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017c08:	f1b9 0f00 	cmp.w	r9, #0
 8017c0c:	dd57      	ble.n	8017cbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017c0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017c12:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017c16:	9803      	ldr	r0, [sp, #12]
 8017c18:	140d      	asrs	r5, r1, #16
 8017c1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c1e:	fb07 000c 	mla	r0, r7, ip, r0
 8017c22:	5d40      	ldrb	r0, [r0, r5]
 8017c24:	9d04      	ldr	r5, [sp, #16]
 8017c26:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017c2a:	f8ba 5000 	ldrh.w	r5, [sl]
 8017c2e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017c32:	122f      	asrs	r7, r5, #8
 8017c34:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017c38:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017c3c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017c40:	00ed      	lsls	r5, r5, #3
 8017c42:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8017c46:	fb17 f706 	smulbb	r7, r7, r6
 8017c4a:	b2ed      	uxtb	r5, r5
 8017c4c:	fb18 f806 	smulbb	r8, r8, r6
 8017c50:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017c54:	10c7      	asrs	r7, r0, #3
 8017c56:	fb15 f506 	smulbb	r5, r5, r6
 8017c5a:	00c0      	lsls	r0, r0, #3
 8017c5c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017c60:	fa1f fc8c 	uxth.w	ip, ip
 8017c64:	b2c0      	uxtb	r0, r0
 8017c66:	fb07 870b 	mla	r7, r7, fp, r8
 8017c6a:	fb00 500b 	mla	r0, r0, fp, r5
 8017c6e:	f10c 0501 	add.w	r5, ip, #1
 8017c72:	b2bf      	uxth	r7, r7
 8017c74:	b280      	uxth	r0, r0
 8017c76:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017c7a:	f107 0801 	add.w	r8, r7, #1
 8017c7e:	1c45      	adds	r5, r0, #1
 8017c80:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8017c84:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017c88:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017c8c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017c8e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017c92:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017c96:	4401      	add	r1, r0
 8017c98:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017c9c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017c9e:	ea45 0c0c 	orr.w	ip, r5, ip
 8017ca2:	4402      	add	r2, r0
 8017ca4:	ea4c 0c08 	orr.w	ip, ip, r8
 8017ca8:	f82a cb02 	strh.w	ip, [sl], #2
 8017cac:	e7ac      	b.n	8017c08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017cae:	f04f 0800 	mov.w	r8, #0
 8017cb2:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8017cb6:	eb03 0008 	add.w	r0, r3, r8
 8017cba:	2800      	cmp	r0, #0
 8017cbc:	dc41      	bgt.n	8017d42 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017cbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017cc2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017cc6:	9b01      	ldr	r3, [sp, #4]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	f340 8097 	ble.w	8017dfc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017cd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017cdc:	eef0 6a62 	vmov.f32	s13, s5
 8017ce0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017ce4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017ce8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017cec:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017cf0:	eef0 6a43 	vmov.f32	s13, s6
 8017cf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017cf8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017cfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d14:	ee12 2a90 	vmov	r2, s5
 8017d18:	eef0 2a47 	vmov.f32	s5, s14
 8017d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d20:	ee13 2a10 	vmov	r2, s6
 8017d24:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d28:	eeb0 3a67 	vmov.f32	s6, s15
 8017d2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d30:	9314      	str	r3, [sp, #80]	; 0x50
 8017d32:	9b01      	ldr	r3, [sp, #4]
 8017d34:	9a05      	ldr	r2, [sp, #20]
 8017d36:	3b01      	subs	r3, #1
 8017d38:	9301      	str	r3, [sp, #4]
 8017d3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d3c:	bf08      	it	eq
 8017d3e:	4613      	moveq	r3, r2
 8017d40:	e72c      	b.n	8017b9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017d42:	140f      	asrs	r7, r1, #16
 8017d44:	d453      	bmi.n	8017dee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017d46:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017d4a:	42bd      	cmp	r5, r7
 8017d4c:	dd4f      	ble.n	8017dee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017d4e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017d52:	d44c      	bmi.n	8017dee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017d54:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017d58:	4560      	cmp	r0, ip
 8017d5a:	dd48      	ble.n	8017dee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017d5c:	9803      	ldr	r0, [sp, #12]
 8017d5e:	b22d      	sxth	r5, r5
 8017d60:	fb0c 0505 	mla	r5, ip, r5, r0
 8017d64:	5de8      	ldrb	r0, [r5, r7]
 8017d66:	9d04      	ldr	r5, [sp, #16]
 8017d68:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017d6c:	f06f 0501 	mvn.w	r5, #1
 8017d70:	fb05 fb08 	mul.w	fp, r5, r8
 8017d74:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017d78:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017d7c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017d80:	122f      	asrs	r7, r5, #8
 8017d82:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8017d86:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017d8a:	00ed      	lsls	r5, r5, #3
 8017d8c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017d90:	fb17 f706 	smulbb	r7, r7, r6
 8017d94:	b2ed      	uxtb	r5, r5
 8017d96:	fb19 f906 	smulbb	r9, r9, r6
 8017d9a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017d9e:	10c7      	asrs	r7, r0, #3
 8017da0:	fb15 f506 	smulbb	r5, r5, r6
 8017da4:	00c0      	lsls	r0, r0, #3
 8017da6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017daa:	fa1f fc8c 	uxth.w	ip, ip
 8017dae:	b2c0      	uxtb	r0, r0
 8017db0:	fb07 970a 	mla	r7, r7, sl, r9
 8017db4:	fb00 500a 	mla	r0, r0, sl, r5
 8017db8:	f10c 0501 	add.w	r5, ip, #1
 8017dbc:	b2bf      	uxth	r7, r7
 8017dbe:	b280      	uxth	r0, r0
 8017dc0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017dc4:	f107 0901 	add.w	r9, r7, #1
 8017dc8:	1c45      	adds	r5, r0, #1
 8017dca:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017dce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017dd2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017dd6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017dda:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017dde:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017de2:	ea45 0c0c 	orr.w	ip, r5, ip
 8017de6:	ea4c 0c09 	orr.w	ip, ip, r9
 8017dea:	f824 c00b 	strh.w	ip, [r4, fp]
 8017dee:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017df0:	f108 38ff 	add.w	r8, r8, #4294967295
 8017df4:	4401      	add	r1, r0
 8017df6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017df8:	4402      	add	r2, r0
 8017dfa:	e75c      	b.n	8017cb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017dfc:	b007      	add	sp, #28
 8017dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e06:	b085      	sub	sp, #20
 8017e08:	4693      	mov	fp, r2
 8017e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017e0e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017e10:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017e12:	6870      	ldr	r0, [r6, #4]
 8017e14:	9100      	str	r1, [sp, #0]
 8017e16:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017e1a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017e1e:	fb00 2404 	mla	r4, r0, r4, r2
 8017e22:	6832      	ldr	r2, [r6, #0]
 8017e24:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017e28:	682a      	ldr	r2, [r5, #0]
 8017e2a:	9201      	str	r2, [sp, #4]
 8017e2c:	686a      	ldr	r2, [r5, #4]
 8017e2e:	3204      	adds	r2, #4
 8017e30:	9202      	str	r2, [sp, #8]
 8017e32:	9a00      	ldr	r2, [sp, #0]
 8017e34:	2a00      	cmp	r2, #0
 8017e36:	dc03      	bgt.n	8017e40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017e38:	f1bb 0f00 	cmp.w	fp, #0
 8017e3c:	f340 80a0 	ble.w	8017f80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017e42:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017e46:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017e4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017e4c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017e50:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	dd0c      	ble.n	8017e72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017e58:	1406      	asrs	r6, r0, #16
 8017e5a:	d405      	bmi.n	8017e68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017e5c:	454e      	cmp	r6, r9
 8017e5e:	da03      	bge.n	8017e68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017e60:	1416      	asrs	r6, r2, #16
 8017e62:	d401      	bmi.n	8017e68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017e64:	4546      	cmp	r6, r8
 8017e66:	db05      	blt.n	8017e74 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017e68:	4470      	add	r0, lr
 8017e6a:	4462      	add	r2, ip
 8017e6c:	3b01      	subs	r3, #1
 8017e6e:	3402      	adds	r4, #2
 8017e70:	e7f0      	b.n	8017e54 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017e72:	d00f      	beq.n	8017e94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017e74:	1e5e      	subs	r6, r3, #1
 8017e76:	fb0e 0706 	mla	r7, lr, r6, r0
 8017e7a:	143f      	asrs	r7, r7, #16
 8017e7c:	d541      	bpl.n	8017f02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017e7e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017e82:	4698      	mov	r8, r3
 8017e84:	9603      	str	r6, [sp, #12]
 8017e86:	f1b8 0f00 	cmp.w	r8, #0
 8017e8a:	dc59      	bgt.n	8017f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017e90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017e94:	9b00      	ldr	r3, [sp, #0]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	dd72      	ble.n	8017f80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017e9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ea0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017ea4:	eeb0 6a62 	vmov.f32	s12, s5
 8017ea8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017eac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017eb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017eb4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017eb8:	eeb0 6a43 	vmov.f32	s12, s6
 8017ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ec0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017ec4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017ec8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017ecc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017ed0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017ed4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ed8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017edc:	ee12 2a90 	vmov	r2, s5
 8017ee0:	eef0 2a47 	vmov.f32	s5, s14
 8017ee4:	fb92 fef3 	sdiv	lr, r2, r3
 8017ee8:	ee13 2a10 	vmov	r2, s6
 8017eec:	eeb0 3a67 	vmov.f32	s6, s15
 8017ef0:	fb92 fcf3 	sdiv	ip, r2, r3
 8017ef4:	9b00      	ldr	r3, [sp, #0]
 8017ef6:	3b01      	subs	r3, #1
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017efc:	bf08      	it	eq
 8017efe:	465b      	moveq	r3, fp
 8017f00:	e797      	b.n	8017e32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017f02:	454f      	cmp	r7, r9
 8017f04:	dabb      	bge.n	8017e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017f06:	fb0c 2606 	mla	r6, ip, r6, r2
 8017f0a:	1436      	asrs	r6, r6, #16
 8017f0c:	d4b7      	bmi.n	8017e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017f0e:	4546      	cmp	r6, r8
 8017f10:	dab5      	bge.n	8017e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017f12:	461e      	mov	r6, r3
 8017f14:	46a0      	mov	r8, r4
 8017f16:	2e00      	cmp	r6, #0
 8017f18:	ddb8      	ble.n	8017e8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017f1a:	1417      	asrs	r7, r2, #16
 8017f1c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017f20:	9901      	ldr	r1, [sp, #4]
 8017f22:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017f26:	4462      	add	r2, ip
 8017f28:	4470      	add	r0, lr
 8017f2a:	fb0a 1707 	mla	r7, sl, r7, r1
 8017f2e:	9902      	ldr	r1, [sp, #8]
 8017f30:	3e01      	subs	r6, #1
 8017f32:	f817 7009 	ldrb.w	r7, [r7, r9]
 8017f36:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8017f3a:	f828 7b02 	strh.w	r7, [r8], #2
 8017f3e:	e7ea      	b.n	8017f16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017f40:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017f44:	d417      	bmi.n	8017f76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017f46:	68ae      	ldr	r6, [r5, #8]
 8017f48:	454e      	cmp	r6, r9
 8017f4a:	dd14      	ble.n	8017f76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017f4c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017f50:	d411      	bmi.n	8017f76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017f52:	68ef      	ldr	r7, [r5, #12]
 8017f54:	4557      	cmp	r7, sl
 8017f56:	dd0e      	ble.n	8017f76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8017f58:	9f01      	ldr	r7, [sp, #4]
 8017f5a:	b236      	sxth	r6, r6
 8017f5c:	f06f 0101 	mvn.w	r1, #1
 8017f60:	fb0a 7606 	mla	r6, sl, r6, r7
 8017f64:	9f02      	ldr	r7, [sp, #8]
 8017f66:	f816 6009 	ldrb.w	r6, [r6, r9]
 8017f6a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017f6e:	fb01 f608 	mul.w	r6, r1, r8
 8017f72:	9903      	ldr	r1, [sp, #12]
 8017f74:	538f      	strh	r7, [r1, r6]
 8017f76:	4470      	add	r0, lr
 8017f78:	4462      	add	r2, ip
 8017f7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8017f7e:	e782      	b.n	8017e86 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017f80:	b005      	add	sp, #20
 8017f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017f86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f8a:	b087      	sub	sp, #28
 8017f8c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017f8e:	9205      	str	r2, [sp, #20]
 8017f90:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017f94:	9102      	str	r1, [sp, #8]
 8017f96:	9203      	str	r2, [sp, #12]
 8017f98:	6861      	ldr	r1, [r4, #4]
 8017f9a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017f9e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017fa2:	fb01 2000 	mla	r0, r1, r0, r2
 8017fa6:	6822      	ldr	r2, [r4, #0]
 8017fa8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8017fac:	9200      	str	r2, [sp, #0]
 8017fae:	f8dc 2000 	ldr.w	r2, [ip]
 8017fb2:	9204      	str	r2, [sp, #16]
 8017fb4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017fb8:	3204      	adds	r2, #4
 8017fba:	9201      	str	r2, [sp, #4]
 8017fbc:	9a03      	ldr	r2, [sp, #12]
 8017fbe:	43d5      	mvns	r5, r2
 8017fc0:	b2ed      	uxtb	r5, r5
 8017fc2:	9a02      	ldr	r2, [sp, #8]
 8017fc4:	2a00      	cmp	r2, #0
 8017fc6:	dc03      	bgt.n	8017fd0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017fc8:	9a05      	ldr	r2, [sp, #20]
 8017fca:	2a00      	cmp	r2, #0
 8017fcc:	f340 812c 	ble.w	8018228 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8017fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017fd2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017fd6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017fda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017fdc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017fe0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	dd10      	ble.n	801800a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017fe8:	140c      	asrs	r4, r1, #16
 8017fea:	d405      	bmi.n	8017ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017fec:	4574      	cmp	r4, lr
 8017fee:	da03      	bge.n	8017ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017ff0:	1414      	asrs	r4, r2, #16
 8017ff2:	d401      	bmi.n	8017ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017ff4:	42bc      	cmp	r4, r7
 8017ff6:	db09      	blt.n	801800c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017ff8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	9800      	ldr	r0, [sp, #0]
 8017ffe:	4421      	add	r1, r4
 8018000:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018002:	3002      	adds	r0, #2
 8018004:	4422      	add	r2, r4
 8018006:	9000      	str	r0, [sp, #0]
 8018008:	e7ec      	b.n	8017fe4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801800a:	d071      	beq.n	80180f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801800c:	1e5c      	subs	r4, r3, #1
 801800e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018010:	fb06 1604 	mla	r6, r6, r4, r1
 8018014:	1436      	asrs	r6, r6, #16
 8018016:	d45d      	bmi.n	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018018:	4576      	cmp	r6, lr
 801801a:	da5b      	bge.n	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801801c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801801e:	fb06 2404 	mla	r4, r6, r4, r2
 8018022:	1424      	asrs	r4, r4, #16
 8018024:	d456      	bmi.n	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018026:	42bc      	cmp	r4, r7
 8018028:	da54      	bge.n	80180d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801802a:	4698      	mov	r8, r3
 801802c:	f8dd 9000 	ldr.w	r9, [sp]
 8018030:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8018034:	f1b8 0f00 	cmp.w	r8, #0
 8018038:	dd54      	ble.n	80180e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801803a:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801803e:	1414      	asrs	r4, r2, #16
 8018040:	9804      	ldr	r0, [sp, #16]
 8018042:	140e      	asrs	r6, r1, #16
 8018044:	f108 38ff 	add.w	r8, r8, #4294967295
 8018048:	fb07 0404 	mla	r4, r7, r4, r0
 801804c:	9801      	ldr	r0, [sp, #4]
 801804e:	f814 e006 	ldrb.w	lr, [r4, r6]
 8018052:	f8b9 4000 	ldrh.w	r4, [r9]
 8018056:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801805a:	1227      	asrs	r7, r4, #8
 801805c:	eb00 0b0e 	add.w	fp, r0, lr
 8018060:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8018064:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018068:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801806a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801806e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018072:	4401      	add	r1, r0
 8018074:	fb16 f60a 	smulbb	r6, r6, sl
 8018078:	9814      	ldr	r0, [sp, #80]	; 0x50
 801807a:	fb1b fb0a 	smulbb	fp, fp, sl
 801807e:	fb07 6705 	mla	r7, r7, r5, r6
 8018082:	10e6      	asrs	r6, r4, #3
 8018084:	00e4      	lsls	r4, r4, #3
 8018086:	4402      	add	r2, r0
 8018088:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801808c:	b2bf      	uxth	r7, r7
 801808e:	b2e4      	uxtb	r4, r4
 8018090:	fb06 b605 	mla	r6, r6, r5, fp
 8018094:	fb14 f405 	smulbb	r4, r4, r5
 8018098:	b2b6      	uxth	r6, r6
 801809a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801809e:	1c7c      	adds	r4, r7, #1
 80180a0:	f106 0b01 	add.w	fp, r6, #1
 80180a4:	fa1f fe8e 	uxth.w	lr, lr
 80180a8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80180ac:	f10e 0401 	add.w	r4, lr, #1
 80180b0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80180b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80180b8:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80180bc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80180c0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80180c4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80180c8:	4327      	orrs	r7, r4
 80180ca:	ea47 070b 	orr.w	r7, r7, fp
 80180ce:	f829 7b02 	strh.w	r7, [r9], #2
 80180d2:	e7af      	b.n	8018034 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80180d4:	f04f 0e00 	mov.w	lr, #0
 80180d8:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80180dc:	eb03 040e 	add.w	r4, r3, lr
 80180e0:	2c00      	cmp	r4, #0
 80180e2:	dc43      	bgt.n	801816c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80180e4:	9a00      	ldr	r2, [sp, #0]
 80180e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80180ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80180ee:	9300      	str	r3, [sp, #0]
 80180f0:	9b02      	ldr	r3, [sp, #8]
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	f340 8098 	ble.w	8018228 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80180f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80180fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018102:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018106:	eef0 6a62 	vmov.f32	s13, s5
 801810a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801810e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018112:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018116:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801811a:	eef0 6a43 	vmov.f32	s13, s6
 801811e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018122:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8018126:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801812a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801812e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018132:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018136:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801813a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801813e:	ee12 2a90 	vmov	r2, s5
 8018142:	eef0 2a47 	vmov.f32	s5, s14
 8018146:	fb92 f3f3 	sdiv	r3, r2, r3
 801814a:	ee13 2a10 	vmov	r2, s6
 801814e:	9313      	str	r3, [sp, #76]	; 0x4c
 8018150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018152:	eeb0 3a67 	vmov.f32	s6, s15
 8018156:	fb92 f3f3 	sdiv	r3, r2, r3
 801815a:	9314      	str	r3, [sp, #80]	; 0x50
 801815c:	9b02      	ldr	r3, [sp, #8]
 801815e:	9a05      	ldr	r2, [sp, #20]
 8018160:	3b01      	subs	r3, #1
 8018162:	9302      	str	r3, [sp, #8]
 8018164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018166:	bf08      	it	eq
 8018168:	4613      	moveq	r3, r2
 801816a:	e72a      	b.n	8017fc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801816c:	140f      	asrs	r7, r1, #16
 801816e:	d454      	bmi.n	801821a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018170:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018174:	42be      	cmp	r6, r7
 8018176:	dd50      	ble.n	801821a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018178:	ea5f 4822 	movs.w	r8, r2, asr #16
 801817c:	d44d      	bmi.n	801821a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801817e:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8018182:	4544      	cmp	r4, r8
 8018184:	dd49      	ble.n	801821a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018186:	9c04      	ldr	r4, [sp, #16]
 8018188:	b236      	sxth	r6, r6
 801818a:	f06f 0001 	mvn.w	r0, #1
 801818e:	fb08 4606 	mla	r6, r8, r6, r4
 8018192:	9c01      	ldr	r4, [sp, #4]
 8018194:	fb00 fa0e 	mul.w	sl, r0, lr
 8018198:	9800      	ldr	r0, [sp, #0]
 801819a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801819e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80181a2:	eb04 0b08 	add.w	fp, r4, r8
 80181a6:	f830 400a 	ldrh.w	r4, [r0, sl]
 80181aa:	9801      	ldr	r0, [sp, #4]
 80181ac:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80181b0:	1227      	asrs	r7, r4, #8
 80181b2:	f89b b001 	ldrb.w	fp, [fp, #1]
 80181b6:	fb16 f609 	smulbb	r6, r6, r9
 80181ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80181be:	f810 8008 	ldrb.w	r8, [r0, r8]
 80181c2:	fb1b fb09 	smulbb	fp, fp, r9
 80181c6:	fb07 6705 	mla	r7, r7, r5, r6
 80181ca:	10e6      	asrs	r6, r4, #3
 80181cc:	00e4      	lsls	r4, r4, #3
 80181ce:	9800      	ldr	r0, [sp, #0]
 80181d0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80181d4:	b2bf      	uxth	r7, r7
 80181d6:	b2e4      	uxtb	r4, r4
 80181d8:	fb06 b605 	mla	r6, r6, r5, fp
 80181dc:	fb14 f405 	smulbb	r4, r4, r5
 80181e0:	b2b6      	uxth	r6, r6
 80181e2:	fb08 4809 	mla	r8, r8, r9, r4
 80181e6:	1c7c      	adds	r4, r7, #1
 80181e8:	f106 0b01 	add.w	fp, r6, #1
 80181ec:	fa1f f888 	uxth.w	r8, r8
 80181f0:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80181f4:	f108 0401 	add.w	r4, r8, #1
 80181f8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80181fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018200:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8018204:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018208:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801820c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018210:	4327      	orrs	r7, r4
 8018212:	ea47 070b 	orr.w	r7, r7, fp
 8018216:	f820 700a 	strh.w	r7, [r0, sl]
 801821a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801821c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018220:	4401      	add	r1, r0
 8018222:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018224:	4402      	add	r2, r0
 8018226:	e759      	b.n	80180dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018228:	b007      	add	sp, #28
 801822a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018230 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	b085      	sub	sp, #20
 8018236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801823a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801823c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801823e:	9203      	str	r2, [sp, #12]
 8018240:	6870      	ldr	r0, [r6, #4]
 8018242:	686f      	ldr	r7, [r5, #4]
 8018244:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018248:	3704      	adds	r7, #4
 801824a:	9101      	str	r1, [sp, #4]
 801824c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018250:	fb00 2404 	mla	r4, r0, r4, r2
 8018254:	6832      	ldr	r2, [r6, #0]
 8018256:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801825a:	682a      	ldr	r2, [r5, #0]
 801825c:	9202      	str	r2, [sp, #8]
 801825e:	9a01      	ldr	r2, [sp, #4]
 8018260:	2a00      	cmp	r2, #0
 8018262:	dc03      	bgt.n	801826c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018264:	9a03      	ldr	r2, [sp, #12]
 8018266:	2a00      	cmp	r2, #0
 8018268:	f340 80cc 	ble.w	8018404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801826c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801826e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018272:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018276:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018278:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801827c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018280:	2b00      	cmp	r3, #0
 8018282:	dd0d      	ble.n	80182a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018284:	1406      	asrs	r6, r0, #16
 8018286:	d405      	bmi.n	8018294 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018288:	454e      	cmp	r6, r9
 801828a:	da03      	bge.n	8018294 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801828c:	1416      	asrs	r6, r2, #16
 801828e:	d401      	bmi.n	8018294 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018290:	4546      	cmp	r6, r8
 8018292:	db06      	blt.n	80182a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018294:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018296:	4460      	add	r0, ip
 8018298:	3b01      	subs	r3, #1
 801829a:	3402      	adds	r4, #2
 801829c:	4432      	add	r2, r6
 801829e:	e7ef      	b.n	8018280 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80182a0:	d00f      	beq.n	80182c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80182a2:	1e5e      	subs	r6, r3, #1
 80182a4:	fb0c 0e06 	mla	lr, ip, r6, r0
 80182a8:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80182ac:	d543      	bpl.n	8018336 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80182ae:	4698      	mov	r8, r3
 80182b0:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80182b4:	f1b8 0f00 	cmp.w	r8, #0
 80182b8:	dc71      	bgt.n	801839e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80182ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80182be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80182c2:	9b01      	ldr	r3, [sp, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	f340 809d 	ble.w	8018404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80182ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80182ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80182d4:	eeb0 6a62 	vmov.f32	s12, s5
 80182d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80182dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80182e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80182e4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80182e8:	eeb0 6a43 	vmov.f32	s12, s6
 80182ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80182f0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80182f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80182f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80182fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018300:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018304:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018308:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801830c:	ee12 2a90 	vmov	r2, s5
 8018310:	eef0 2a47 	vmov.f32	s5, s14
 8018314:	fb92 fcf3 	sdiv	ip, r2, r3
 8018318:	ee13 2a10 	vmov	r2, s6
 801831c:	eeb0 3a67 	vmov.f32	s6, s15
 8018320:	fb92 f3f3 	sdiv	r3, r2, r3
 8018324:	9312      	str	r3, [sp, #72]	; 0x48
 8018326:	9b01      	ldr	r3, [sp, #4]
 8018328:	9a03      	ldr	r2, [sp, #12]
 801832a:	3b01      	subs	r3, #1
 801832c:	9301      	str	r3, [sp, #4]
 801832e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018330:	bf08      	it	eq
 8018332:	4613      	moveq	r3, r2
 8018334:	e793      	b.n	801825e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018336:	45ce      	cmp	lr, r9
 8018338:	dab9      	bge.n	80182ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801833a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801833c:	fb01 2606 	mla	r6, r1, r6, r2
 8018340:	1436      	asrs	r6, r6, #16
 8018342:	d4b4      	bmi.n	80182ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018344:	4546      	cmp	r6, r8
 8018346:	dab2      	bge.n	80182ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018348:	4698      	mov	r8, r3
 801834a:	46a2      	mov	sl, r4
 801834c:	f1b8 0f00 	cmp.w	r8, #0
 8018350:	ddb3      	ble.n	80182ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018352:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018356:	1416      	asrs	r6, r2, #16
 8018358:	9902      	ldr	r1, [sp, #8]
 801835a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801835e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018362:	4460      	add	r0, ip
 8018364:	fb09 1606 	mla	r6, r9, r6, r1
 8018368:	4928      	ldr	r1, [pc, #160]	; (801840c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801836a:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801836e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018372:	eb07 0b0e 	add.w	fp, r7, lr
 8018376:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801837a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801837e:	00f6      	lsls	r6, r6, #3
 8018380:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8018384:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018386:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801838a:	440a      	add	r2, r1
 801838c:	ea49 0606 	orr.w	r6, r9, r6
 8018390:	f817 900e 	ldrb.w	r9, [r7, lr]
 8018394:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8018398:	f82a 6b02 	strh.w	r6, [sl], #2
 801839c:	e7d6      	b.n	801834c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801839e:	ea5f 4920 	movs.w	r9, r0, asr #16
 80183a2:	d429      	bmi.n	80183f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80183a4:	68ae      	ldr	r6, [r5, #8]
 80183a6:	454e      	cmp	r6, r9
 80183a8:	dd26      	ble.n	80183f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80183aa:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80183ae:	d423      	bmi.n	80183f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80183b0:	68e9      	ldr	r1, [r5, #12]
 80183b2:	4559      	cmp	r1, fp
 80183b4:	dd20      	ble.n	80183f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80183b6:	fa0f fe86 	sxth.w	lr, r6
 80183ba:	9902      	ldr	r1, [sp, #8]
 80183bc:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80183c0:	f06f 0101 	mvn.w	r1, #1
 80183c4:	f81e e009 	ldrb.w	lr, [lr, r9]
 80183c8:	fb01 f908 	mul.w	r9, r1, r8
 80183cc:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80183d0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80183d4:	eb07 060e 	add.w	r6, r7, lr
 80183d8:	f896 b002 	ldrb.w	fp, [r6, #2]
 80183dc:	7876      	ldrb	r6, [r6, #1]
 80183de:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80183e2:	00f6      	lsls	r6, r6, #3
 80183e4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80183e8:	ea4b 0606 	orr.w	r6, fp, r6
 80183ec:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80183f0:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80183f4:	f82a 6009 	strh.w	r6, [sl, r9]
 80183f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80183fa:	4460      	add	r0, ip
 80183fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8018400:	440a      	add	r2, r1
 8018402:	e757      	b.n	80182b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8018404:	b005      	add	sp, #20
 8018406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801840a:	bf00      	nop
 801840c:	fffff800 	.word	0xfffff800

08018410 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018414:	b087      	sub	sp, #28
 8018416:	468b      	mov	fp, r1
 8018418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801841c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801841e:	9204      	str	r2, [sp, #16]
 8018420:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018424:	6841      	ldr	r1, [r0, #4]
 8018426:	9205      	str	r2, [sp, #20]
 8018428:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801842c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8018430:	fb01 2404 	mla	r4, r1, r4, r2
 8018434:	6802      	ldr	r2, [r0, #0]
 8018436:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801843a:	f8dc 2000 	ldr.w	r2, [ip]
 801843e:	9201      	str	r2, [sp, #4]
 8018440:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018444:	3204      	adds	r2, #4
 8018446:	9202      	str	r2, [sp, #8]
 8018448:	f1bb 0f00 	cmp.w	fp, #0
 801844c:	dc03      	bgt.n	8018456 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801844e:	9a04      	ldr	r2, [sp, #16]
 8018450:	2a00      	cmp	r2, #0
 8018452:	f340 8138 	ble.w	80186c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018458:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801845c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018462:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8018466:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801846a:	2b00      	cmp	r3, #0
 801846c:	dd0e      	ble.n	801848c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801846e:	1402      	asrs	r2, r0, #16
 8018470:	d405      	bmi.n	801847e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018472:	42ba      	cmp	r2, r7
 8018474:	da03      	bge.n	801847e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018476:	140a      	asrs	r2, r1, #16
 8018478:	d401      	bmi.n	801847e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801847a:	42b2      	cmp	r2, r6
 801847c:	db07      	blt.n	801848e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801847e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018480:	3b01      	subs	r3, #1
 8018482:	3402      	adds	r4, #2
 8018484:	4410      	add	r0, r2
 8018486:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018488:	4411      	add	r1, r2
 801848a:	e7ee      	b.n	801846a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801848c:	d019      	beq.n	80184c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801848e:	1e5a      	subs	r2, r3, #1
 8018490:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018492:	fb05 0502 	mla	r5, r5, r2, r0
 8018496:	142d      	asrs	r5, r5, #16
 8018498:	d409      	bmi.n	80184ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801849a:	42bd      	cmp	r5, r7
 801849c:	da07      	bge.n	80184ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801849e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80184a0:	fb05 1202 	mla	r2, r5, r2, r1
 80184a4:	1412      	asrs	r2, r2, #16
 80184a6:	d402      	bmi.n	80184ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80184a8:	42b2      	cmp	r2, r6
 80184aa:	f2c0 80ac 	blt.w	8018606 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80184ae:	f04f 0e00 	mov.w	lr, #0
 80184b2:	eb03 020e 	add.w	r2, r3, lr
 80184b6:	2a00      	cmp	r2, #0
 80184b8:	dc3e      	bgt.n	8018538 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80184ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80184be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80184c2:	f1bb 0f00 	cmp.w	fp, #0
 80184c6:	f340 80fe 	ble.w	80186c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80184ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80184ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80184d4:	f1bb 0b01 	subs.w	fp, fp, #1
 80184d8:	eeb0 6a62 	vmov.f32	s12, s5
 80184dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80184e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80184e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80184e8:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80184ec:	eeb0 6a43 	vmov.f32	s12, s6
 80184f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80184f4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80184f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80184fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018500:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018504:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018508:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801850c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018510:	ee12 2a90 	vmov	r2, s5
 8018514:	eef0 2a47 	vmov.f32	s5, s14
 8018518:	fb92 f3f3 	sdiv	r3, r2, r3
 801851c:	ee13 2a10 	vmov	r2, s6
 8018520:	9313      	str	r3, [sp, #76]	; 0x4c
 8018522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018524:	eeb0 3a67 	vmov.f32	s6, s15
 8018528:	fb92 f3f3 	sdiv	r3, r2, r3
 801852c:	9a04      	ldr	r2, [sp, #16]
 801852e:	9314      	str	r3, [sp, #80]	; 0x50
 8018530:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018532:	bf08      	it	eq
 8018534:	4613      	moveq	r3, r2
 8018536:	e787      	b.n	8018448 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018538:	1406      	asrs	r6, r0, #16
 801853a:	d45d      	bmi.n	80185f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801853c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8018540:	42b5      	cmp	r5, r6
 8018542:	dd59      	ble.n	80185f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018544:	140f      	asrs	r7, r1, #16
 8018546:	d457      	bmi.n	80185f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018548:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801854c:	42ba      	cmp	r2, r7
 801854e:	dd53      	ble.n	80185f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018550:	9a01      	ldr	r2, [sp, #4]
 8018552:	b22d      	sxth	r5, r5
 8018554:	fb07 2505 	mla	r5, r7, r5, r2
 8018558:	5daa      	ldrb	r2, [r5, r6]
 801855a:	9d02      	ldr	r5, [sp, #8]
 801855c:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018560:	0e2e      	lsrs	r6, r5, #24
 8018562:	d049      	beq.n	80185f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018564:	f06f 0201 	mvn.w	r2, #1
 8018568:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801856c:	fb02 f20e 	mul.w	r2, r2, lr
 8018570:	f834 8002 	ldrh.w	r8, [r4, r2]
 8018574:	9203      	str	r2, [sp, #12]
 8018576:	9a05      	ldr	r2, [sp, #20]
 8018578:	ea4f 2728 	mov.w	r7, r8, asr #8
 801857c:	4356      	muls	r6, r2
 801857e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018582:	1c72      	adds	r2, r6, #1
 8018584:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018588:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801858c:	b2ed      	uxtb	r5, r5
 801858e:	1212      	asrs	r2, r2, #8
 8018590:	fa1f f982 	uxth.w	r9, r2
 8018594:	43d2      	mvns	r2, r2
 8018596:	fb16 f609 	smulbb	r6, r6, r9
 801859a:	b2d2      	uxtb	r2, r2
 801859c:	fb15 f509 	smulbb	r5, r5, r9
 80185a0:	fb07 6702 	mla	r7, r7, r2, r6
 80185a4:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80185a8:	fb1a fa09 	smulbb	sl, sl, r9
 80185ac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80185b0:	b2bf      	uxth	r7, r7
 80185b2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80185b6:	fa5f f888 	uxtb.w	r8, r8
 80185ba:	fb06 a602 	mla	r6, r6, r2, sl
 80185be:	fb08 5502 	mla	r5, r8, r2, r5
 80185c2:	1c7a      	adds	r2, r7, #1
 80185c4:	b2b6      	uxth	r6, r6
 80185c6:	b2ad      	uxth	r5, r5
 80185c8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80185cc:	9a03      	ldr	r2, [sp, #12]
 80185ce:	f105 0a01 	add.w	sl, r5, #1
 80185d2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80185d6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80185da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80185de:	ea4a 0707 	orr.w	r7, sl, r7
 80185e2:	f106 0a01 	add.w	sl, r6, #1
 80185e6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80185ea:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80185ee:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80185f2:	ea47 070a 	orr.w	r7, r7, sl
 80185f6:	52a7      	strh	r7, [r4, r2]
 80185f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80185fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80185fe:	4410      	add	r0, r2
 8018600:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018602:	4411      	add	r1, r2
 8018604:	e755      	b.n	80184b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018606:	f04f 0800 	mov.w	r8, #0
 801860a:	eba3 0208 	sub.w	r2, r3, r8
 801860e:	2a00      	cmp	r2, #0
 8018610:	f77f af53 	ble.w	80184ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8018614:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8018618:	140a      	asrs	r2, r1, #16
 801861a:	9f01      	ldr	r7, [sp, #4]
 801861c:	1405      	asrs	r5, r0, #16
 801861e:	fb06 7202 	mla	r2, r6, r2, r7
 8018622:	5d52      	ldrb	r2, [r2, r5]
 8018624:	9d02      	ldr	r5, [sp, #8]
 8018626:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801862a:	0e2e      	lsrs	r6, r5, #24
 801862c:	d044      	beq.n	80186b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801862e:	9a05      	ldr	r2, [sp, #20]
 8018630:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018634:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018638:	4356      	muls	r6, r2
 801863a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801863e:	1c72      	adds	r2, r6, #1
 8018640:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018644:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018648:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801864c:	b2ed      	uxtb	r5, r5
 801864e:	1212      	asrs	r2, r2, #8
 8018650:	fa1f f982 	uxth.w	r9, r2
 8018654:	43d2      	mvns	r2, r2
 8018656:	fb16 f609 	smulbb	r6, r6, r9
 801865a:	b2d2      	uxtb	r2, r2
 801865c:	fb15 f509 	smulbb	r5, r5, r9
 8018660:	fb07 6702 	mla	r7, r7, r2, r6
 8018664:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018668:	fb1a fa09 	smulbb	sl, sl, r9
 801866c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018670:	b2bf      	uxth	r7, r7
 8018672:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018676:	fa5f fe8e 	uxtb.w	lr, lr
 801867a:	fb06 a602 	mla	r6, r6, r2, sl
 801867e:	fb0e 5502 	mla	r5, lr, r2, r5
 8018682:	1c7a      	adds	r2, r7, #1
 8018684:	b2b6      	uxth	r6, r6
 8018686:	b2ad      	uxth	r5, r5
 8018688:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801868c:	f105 0a01 	add.w	sl, r5, #1
 8018690:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018694:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018698:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801869c:	ea4a 0707 	orr.w	r7, sl, r7
 80186a0:	f106 0a01 	add.w	sl, r6, #1
 80186a4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80186a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80186ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80186b0:	ea47 070a 	orr.w	r7, r7, sl
 80186b4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80186b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186ba:	f108 0801 	add.w	r8, r8, #1
 80186be:	4410      	add	r0, r2
 80186c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186c2:	4411      	add	r1, r2
 80186c4:	e7a1      	b.n	801860a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80186c6:	b007      	add	sp, #28
 80186c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186cc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80186cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d0:	b085      	sub	sp, #20
 80186d2:	468b      	mov	fp, r1
 80186d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80186d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80186da:	9203      	str	r2, [sp, #12]
 80186dc:	6841      	ldr	r1, [r0, #4]
 80186de:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80186e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80186e6:	fb01 2404 	mla	r4, r1, r4, r2
 80186ea:	6802      	ldr	r2, [r0, #0]
 80186ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80186f0:	f8de 2000 	ldr.w	r2, [lr]
 80186f4:	9200      	str	r2, [sp, #0]
 80186f6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80186fa:	3204      	adds	r2, #4
 80186fc:	9201      	str	r2, [sp, #4]
 80186fe:	f1bb 0f00 	cmp.w	fp, #0
 8018702:	dc03      	bgt.n	801870c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018704:	9a03      	ldr	r2, [sp, #12]
 8018706:	2a00      	cmp	r2, #0
 8018708:	f340 8153 	ble.w	80189b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801870c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801870e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018712:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018716:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018718:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801871c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018720:	2b00      	cmp	r3, #0
 8018722:	dd0e      	ble.n	8018742 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018724:	1408      	asrs	r0, r1, #16
 8018726:	d405      	bmi.n	8018734 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018728:	42b8      	cmp	r0, r7
 801872a:	da03      	bge.n	8018734 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801872c:	1410      	asrs	r0, r2, #16
 801872e:	d401      	bmi.n	8018734 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018730:	42b0      	cmp	r0, r6
 8018732:	db07      	blt.n	8018744 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018734:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018736:	3b01      	subs	r3, #1
 8018738:	3402      	adds	r4, #2
 801873a:	4401      	add	r1, r0
 801873c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801873e:	4402      	add	r2, r0
 8018740:	e7ee      	b.n	8018720 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018742:	d017      	beq.n	8018774 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018744:	1e58      	subs	r0, r3, #1
 8018746:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018748:	fb05 1500 	mla	r5, r5, r0, r1
 801874c:	142d      	asrs	r5, r5, #16
 801874e:	d409      	bmi.n	8018764 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018750:	42bd      	cmp	r5, r7
 8018752:	da07      	bge.n	8018764 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018754:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018756:	fb05 2000 	mla	r0, r5, r0, r2
 801875a:	1400      	asrs	r0, r0, #16
 801875c:	d402      	bmi.n	8018764 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801875e:	42b0      	cmp	r0, r6
 8018760:	f2c0 80bc 	blt.w	80188dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018764:	2600      	movs	r6, #0
 8018766:	1998      	adds	r0, r3, r6
 8018768:	2800      	cmp	r0, #0
 801876a:	dc3e      	bgt.n	80187ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801876c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018770:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018774:	f1bb 0f00 	cmp.w	fp, #0
 8018778:	f340 811b 	ble.w	80189b2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801877c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018782:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018786:	f1bb 0b01 	subs.w	fp, fp, #1
 801878a:	eeb0 6a62 	vmov.f32	s12, s5
 801878e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018792:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801879a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801879e:	eeb0 6a43 	vmov.f32	s12, s6
 80187a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80187aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187c2:	ee12 2a90 	vmov	r2, s5
 80187c6:	eef0 2a47 	vmov.f32	s5, s14
 80187ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80187ce:	ee13 2a10 	vmov	r2, s6
 80187d2:	9311      	str	r3, [sp, #68]	; 0x44
 80187d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187d6:	eeb0 3a67 	vmov.f32	s6, s15
 80187da:	fb92 f3f3 	sdiv	r3, r2, r3
 80187de:	9a03      	ldr	r2, [sp, #12]
 80187e0:	9312      	str	r3, [sp, #72]	; 0x48
 80187e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187e4:	bf08      	it	eq
 80187e6:	4613      	moveq	r3, r2
 80187e8:	e789      	b.n	80186fe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80187ea:	140f      	asrs	r7, r1, #16
 80187ec:	d426      	bmi.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80187ee:	f8de 5008 	ldr.w	r5, [lr, #8]
 80187f2:	42bd      	cmp	r5, r7
 80187f4:	dd22      	ble.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80187f6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80187fa:	d41f      	bmi.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80187fc:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018800:	4560      	cmp	r0, ip
 8018802:	dd1b      	ble.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8018804:	9800      	ldr	r0, [sp, #0]
 8018806:	b22d      	sxth	r5, r5
 8018808:	fb0c 0505 	mla	r5, ip, r5, r0
 801880c:	5de8      	ldrb	r0, [r5, r7]
 801880e:	9d01      	ldr	r5, [sp, #4]
 8018810:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8018814:	0e07      	lsrs	r7, r0, #24
 8018816:	2fff      	cmp	r7, #255	; 0xff
 8018818:	d116      	bne.n	8018848 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801881a:	f06f 0501 	mvn.w	r5, #1
 801881e:	fb05 f706 	mul.w	r7, r5, r6
 8018822:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8018826:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801882a:	0945      	lsrs	r5, r0, #5
 801882c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8018830:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018834:	ea4c 0505 	orr.w	r5, ip, r5
 8018838:	4305      	orrs	r5, r0
 801883a:	53e5      	strh	r5, [r4, r7]
 801883c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801883e:	3e01      	subs	r6, #1
 8018840:	4401      	add	r1, r0
 8018842:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018844:	4402      	add	r2, r0
 8018846:	e78e      	b.n	8018766 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018848:	b2fd      	uxtb	r5, r7
 801884a:	2f00      	cmp	r7, #0
 801884c:	d0f6      	beq.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801884e:	f06f 0701 	mvn.w	r7, #1
 8018852:	fa1f f985 	uxth.w	r9, r5
 8018856:	43ed      	mvns	r5, r5
 8018858:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801885c:	4377      	muls	r7, r6
 801885e:	fb1a fa09 	smulbb	sl, sl, r9
 8018862:	b2ed      	uxtb	r5, r5
 8018864:	f834 8007 	ldrh.w	r8, [r4, r7]
 8018868:	9702      	str	r7, [sp, #8]
 801886a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801886e:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018872:	fb17 f709 	smulbb	r7, r7, r9
 8018876:	b2c0      	uxtb	r0, r0
 8018878:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801887c:	fb10 f009 	smulbb	r0, r0, r9
 8018880:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018884:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8018888:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801888c:	fa1f fc8c 	uxth.w	ip, ip
 8018890:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018894:	fa5f f888 	uxtb.w	r8, r8
 8018898:	fb07 a705 	mla	r7, r7, r5, sl
 801889c:	fb08 0005 	mla	r0, r8, r5, r0
 80188a0:	f10c 0501 	add.w	r5, ip, #1
 80188a4:	b2bf      	uxth	r7, r7
 80188a6:	b280      	uxth	r0, r0
 80188a8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80188ac:	f100 0a01 	add.w	sl, r0, #1
 80188b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80188b4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80188b8:	9802      	ldr	r0, [sp, #8]
 80188ba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80188be:	ea4a 0c0c 	orr.w	ip, sl, ip
 80188c2:	f107 0a01 	add.w	sl, r7, #1
 80188c6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80188ca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80188ce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80188d2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80188d6:	f824 c000 	strh.w	ip, [r4, r0]
 80188da:	e7af      	b.n	801883c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80188dc:	f04f 0800 	mov.w	r8, #0
 80188e0:	eba3 0008 	sub.w	r0, r3, r8
 80188e4:	2800      	cmp	r0, #0
 80188e6:	f77f af41 	ble.w	801876c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80188ea:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80188ee:	1410      	asrs	r0, r2, #16
 80188f0:	9f00      	ldr	r7, [sp, #0]
 80188f2:	140d      	asrs	r5, r1, #16
 80188f4:	fb06 7000 	mla	r0, r6, r0, r7
 80188f8:	5d40      	ldrb	r0, [r0, r5]
 80188fa:	9d01      	ldr	r5, [sp, #4]
 80188fc:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018900:	0e2e      	lsrs	r6, r5, #24
 8018902:	2eff      	cmp	r6, #255	; 0xff
 8018904:	d112      	bne.n	801892c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 8018906:	482c      	ldr	r0, [pc, #176]	; (80189b8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8018908:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801890c:	0968      	lsrs	r0, r5, #5
 801890e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018912:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018916:	4330      	orrs	r0, r6
 8018918:	4328      	orrs	r0, r5
 801891a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801891e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018920:	f108 0801 	add.w	r8, r8, #1
 8018924:	4401      	add	r1, r0
 8018926:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018928:	4402      	add	r2, r0
 801892a:	e7d9      	b.n	80188e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801892c:	b2f0      	uxtb	r0, r6
 801892e:	2e00      	cmp	r6, #0
 8018930:	d0f5      	beq.n	801891e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018932:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018936:	fa1f f980 	uxth.w	r9, r0
 801893a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801893e:	43c0      	mvns	r0, r0
 8018940:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018944:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018948:	fb16 f609 	smulbb	r6, r6, r9
 801894c:	b2c0      	uxtb	r0, r0
 801894e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018952:	b2ed      	uxtb	r5, r5
 8018954:	fb1a fa09 	smulbb	sl, sl, r9
 8018958:	fb07 6700 	mla	r7, r7, r0, r6
 801895c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018960:	fb15 f509 	smulbb	r5, r5, r9
 8018964:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018968:	b2bf      	uxth	r7, r7
 801896a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801896e:	fa5f fc8c 	uxtb.w	ip, ip
 8018972:	fb06 a600 	mla	r6, r6, r0, sl
 8018976:	fb0c 5500 	mla	r5, ip, r0, r5
 801897a:	1c78      	adds	r0, r7, #1
 801897c:	b2b6      	uxth	r6, r6
 801897e:	b2ad      	uxth	r5, r5
 8018980:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018984:	f105 0a01 	add.w	sl, r5, #1
 8018988:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801898c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018990:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018994:	ea4a 0707 	orr.w	r7, sl, r7
 8018998:	f106 0a01 	add.w	sl, r6, #1
 801899c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80189a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80189a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80189a8:	ea47 070a 	orr.w	r7, r7, sl
 80189ac:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80189b0:	e7b5      	b.n	801891e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80189b2:	b005      	add	sp, #20
 80189b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b8:	fffff800 	.word	0xfffff800

080189bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80189bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c0:	b087      	sub	sp, #28
 80189c2:	468b      	mov	fp, r1
 80189c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80189c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80189ca:	9204      	str	r2, [sp, #16]
 80189cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80189d0:	6861      	ldr	r1, [r4, #4]
 80189d2:	9205      	str	r2, [sp, #20]
 80189d4:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80189d8:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80189dc:	fb01 2000 	mla	r0, r1, r0, r2
 80189e0:	6822      	ldr	r2, [r4, #0]
 80189e2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80189e6:	f8de 2000 	ldr.w	r2, [lr]
 80189ea:	9201      	str	r2, [sp, #4]
 80189ec:	f8de 2004 	ldr.w	r2, [lr, #4]
 80189f0:	9202      	str	r2, [sp, #8]
 80189f2:	f1bb 0f00 	cmp.w	fp, #0
 80189f6:	dc03      	bgt.n	8018a00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80189f8:	9a04      	ldr	r2, [sp, #16]
 80189fa:	2a00      	cmp	r2, #0
 80189fc:	f340 8142 	ble.w	8018c84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018a00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018a02:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018a06:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018a0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018a0c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018a10:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	dd0e      	ble.n	8018a36 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018a18:	140c      	asrs	r4, r1, #16
 8018a1a:	d405      	bmi.n	8018a28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018a1c:	42bc      	cmp	r4, r7
 8018a1e:	da03      	bge.n	8018a28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018a20:	1414      	asrs	r4, r2, #16
 8018a22:	d401      	bmi.n	8018a28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018a24:	42b4      	cmp	r4, r6
 8018a26:	db07      	blt.n	8018a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018a28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018a2a:	3b01      	subs	r3, #1
 8018a2c:	3002      	adds	r0, #2
 8018a2e:	4421      	add	r1, r4
 8018a30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018a32:	4422      	add	r2, r4
 8018a34:	e7ee      	b.n	8018a14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018a36:	d019      	beq.n	8018a6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018a38:	1e5c      	subs	r4, r3, #1
 8018a3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018a3c:	fb05 1504 	mla	r5, r5, r4, r1
 8018a40:	142d      	asrs	r5, r5, #16
 8018a42:	d409      	bmi.n	8018a58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018a44:	42bd      	cmp	r5, r7
 8018a46:	da07      	bge.n	8018a58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018a48:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018a4a:	fb05 2404 	mla	r4, r5, r4, r2
 8018a4e:	1424      	asrs	r4, r4, #16
 8018a50:	d402      	bmi.n	8018a58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018a52:	42b4      	cmp	r4, r6
 8018a54:	f2c0 80b1 	blt.w	8018bba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018a58:	f04f 0800 	mov.w	r8, #0
 8018a5c:	eb03 0408 	add.w	r4, r3, r8
 8018a60:	2c00      	cmp	r4, #0
 8018a62:	dc3e      	bgt.n	8018ae2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018a64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018a68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018a6c:	f1bb 0f00 	cmp.w	fp, #0
 8018a70:	f340 8108 	ble.w	8018c84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018a74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018a7e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018a82:	eeb0 6a62 	vmov.f32	s12, s5
 8018a86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018a8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018a8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a92:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018a96:	eeb0 6a43 	vmov.f32	s12, s6
 8018a9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a9e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018aa2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018aa6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018aaa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018aae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ab2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018ab6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018aba:	ee12 2a90 	vmov	r2, s5
 8018abe:	eef0 2a47 	vmov.f32	s5, s14
 8018ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ac6:	ee13 2a10 	vmov	r2, s6
 8018aca:	9313      	str	r3, [sp, #76]	; 0x4c
 8018acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ace:	eeb0 3a67 	vmov.f32	s6, s15
 8018ad2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ad6:	9a04      	ldr	r2, [sp, #16]
 8018ad8:	9314      	str	r3, [sp, #80]	; 0x50
 8018ada:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018adc:	bf08      	it	eq
 8018ade:	4613      	moveq	r3, r2
 8018ae0:	e787      	b.n	80189f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018ae2:	140e      	asrs	r6, r1, #16
 8018ae4:	d462      	bmi.n	8018bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018ae6:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018aea:	42b5      	cmp	r5, r6
 8018aec:	dd5e      	ble.n	8018bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018aee:	1417      	asrs	r7, r2, #16
 8018af0:	d45c      	bmi.n	8018bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018af2:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018af6:	42bc      	cmp	r4, r7
 8018af8:	dd58      	ble.n	8018bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018afa:	b22d      	sxth	r5, r5
 8018afc:	9c02      	ldr	r4, [sp, #8]
 8018afe:	fb07 6505 	mla	r5, r7, r5, r6
 8018b02:	5d66      	ldrb	r6, [r4, r5]
 8018b04:	2e00      	cmp	r6, #0
 8018b06:	d051      	beq.n	8018bac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018b08:	9c01      	ldr	r4, [sp, #4]
 8018b0a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8018b0e:	f06f 0401 	mvn.w	r4, #1
 8018b12:	fb04 f408 	mul.w	r4, r4, r8
 8018b16:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8018b1a:	5b05      	ldrh	r5, [r0, r4]
 8018b1c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018b20:	9403      	str	r4, [sp, #12]
 8018b22:	9c05      	ldr	r4, [sp, #20]
 8018b24:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018b28:	4366      	muls	r6, r4
 8018b2a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018b2e:	1c74      	adds	r4, r6, #1
 8018b30:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018b34:	122e      	asrs	r6, r5, #8
 8018b36:	1224      	asrs	r4, r4, #8
 8018b38:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018b3c:	00ed      	lsls	r5, r5, #3
 8018b3e:	b2a7      	uxth	r7, r4
 8018b40:	43e4      	mvns	r4, r4
 8018b42:	b2ed      	uxtb	r5, r5
 8018b44:	b2e4      	uxtb	r4, r4
 8018b46:	fb16 f604 	smulbb	r6, r6, r4
 8018b4a:	fb15 f504 	smulbb	r5, r5, r4
 8018b4e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018b52:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018b56:	fb1a fa04 	smulbb	sl, sl, r4
 8018b5a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018b5e:	fa1f fc8c 	uxth.w	ip, ip
 8018b62:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018b66:	fa5f f989 	uxtb.w	r9, r9
 8018b6a:	fb06 a607 	mla	r6, r6, r7, sl
 8018b6e:	f10c 0401 	add.w	r4, ip, #1
 8018b72:	fb09 5507 	mla	r5, r9, r7, r5
 8018b76:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018b7a:	9c03      	ldr	r4, [sp, #12]
 8018b7c:	b2ad      	uxth	r5, r5
 8018b7e:	b2b6      	uxth	r6, r6
 8018b80:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018b84:	f105 0a01 	add.w	sl, r5, #1
 8018b88:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018b8c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018b90:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018b94:	f106 0a01 	add.w	sl, r6, #1
 8018b98:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018b9c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018ba0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018ba4:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018ba8:	f820 c004 	strh.w	ip, [r0, r4]
 8018bac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018bae:	f108 38ff 	add.w	r8, r8, #4294967295
 8018bb2:	4421      	add	r1, r4
 8018bb4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018bb6:	4422      	add	r2, r4
 8018bb8:	e750      	b.n	8018a5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018bba:	f04f 0900 	mov.w	r9, #0
 8018bbe:	eba3 0409 	sub.w	r4, r3, r9
 8018bc2:	2c00      	cmp	r4, #0
 8018bc4:	f77f af4e 	ble.w	8018a64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018bc8:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018bcc:	140d      	asrs	r5, r1, #16
 8018bce:	1414      	asrs	r4, r2, #16
 8018bd0:	fb06 5404 	mla	r4, r6, r4, r5
 8018bd4:	9d02      	ldr	r5, [sp, #8]
 8018bd6:	5d2e      	ldrb	r6, [r5, r4]
 8018bd8:	2e00      	cmp	r6, #0
 8018bda:	d04c      	beq.n	8018c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018bdc:	9d01      	ldr	r5, [sp, #4]
 8018bde:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8018be2:	9c05      	ldr	r4, [sp, #20]
 8018be4:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018be8:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018bec:	4366      	muls	r6, r4
 8018bee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018bf2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018bf6:	1c74      	adds	r4, r6, #1
 8018bf8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018bfc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018c00:	122e      	asrs	r6, r5, #8
 8018c02:	1224      	asrs	r4, r4, #8
 8018c04:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018c08:	00ed      	lsls	r5, r5, #3
 8018c0a:	b2a7      	uxth	r7, r4
 8018c0c:	43e4      	mvns	r4, r4
 8018c0e:	b2ed      	uxtb	r5, r5
 8018c10:	b2e4      	uxtb	r4, r4
 8018c12:	fb16 f604 	smulbb	r6, r6, r4
 8018c16:	fb15 f504 	smulbb	r5, r5, r4
 8018c1a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018c1e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018c22:	fb1a fa04 	smulbb	sl, sl, r4
 8018c26:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018c2a:	fa1f fc8c 	uxth.w	ip, ip
 8018c2e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018c32:	fa5f f888 	uxtb.w	r8, r8
 8018c36:	fb06 a607 	mla	r6, r6, r7, sl
 8018c3a:	f10c 0401 	add.w	r4, ip, #1
 8018c3e:	fb08 5507 	mla	r5, r8, r7, r5
 8018c42:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018c46:	b2ad      	uxth	r5, r5
 8018c48:	b2b6      	uxth	r6, r6
 8018c4a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018c4e:	f105 0a01 	add.w	sl, r5, #1
 8018c52:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018c56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018c5a:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018c5e:	f106 0a01 	add.w	sl, r6, #1
 8018c62:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018c66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018c6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018c6e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018c72:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018c76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c78:	f109 0901 	add.w	r9, r9, #1
 8018c7c:	4421      	add	r1, r4
 8018c7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018c80:	4422      	add	r2, r4
 8018c82:	e79c      	b.n	8018bbe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8018c84:	b007      	add	sp, #28
 8018c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c8e:	b085      	sub	sp, #20
 8018c90:	468b      	mov	fp, r1
 8018c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018c96:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c98:	9203      	str	r2, [sp, #12]
 8018c9a:	6861      	ldr	r1, [r4, #4]
 8018c9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018ca0:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8018ca4:	fb01 2000 	mla	r0, r1, r0, r2
 8018ca8:	6822      	ldr	r2, [r4, #0]
 8018caa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018cae:	f8d8 2000 	ldr.w	r2, [r8]
 8018cb2:	9200      	str	r2, [sp, #0]
 8018cb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018cb8:	9201      	str	r2, [sp, #4]
 8018cba:	f1bb 0f00 	cmp.w	fp, #0
 8018cbe:	dc03      	bgt.n	8018cc8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018cc0:	9a03      	ldr	r2, [sp, #12]
 8018cc2:	2a00      	cmp	r2, #0
 8018cc4:	f340 8146 	ble.w	8018f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018cc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018cca:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018cce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018cd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018cd4:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018cd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	dd0e      	ble.n	8018cfe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018ce0:	140c      	asrs	r4, r1, #16
 8018ce2:	d405      	bmi.n	8018cf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018ce4:	42bc      	cmp	r4, r7
 8018ce6:	da03      	bge.n	8018cf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018ce8:	1414      	asrs	r4, r2, #16
 8018cea:	d401      	bmi.n	8018cf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018cec:	42b4      	cmp	r4, r6
 8018cee:	db07      	blt.n	8018d00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018cf0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018cf2:	3b01      	subs	r3, #1
 8018cf4:	3002      	adds	r0, #2
 8018cf6:	4421      	add	r1, r4
 8018cf8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018cfa:	4422      	add	r2, r4
 8018cfc:	e7ee      	b.n	8018cdc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018cfe:	d017      	beq.n	8018d30 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018d00:	1e5c      	subs	r4, r3, #1
 8018d02:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018d04:	fb05 1504 	mla	r5, r5, r4, r1
 8018d08:	142d      	asrs	r5, r5, #16
 8018d0a:	d409      	bmi.n	8018d20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018d0c:	42bd      	cmp	r5, r7
 8018d0e:	da07      	bge.n	8018d20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018d10:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018d12:	fb05 2404 	mla	r4, r5, r4, r2
 8018d16:	1424      	asrs	r4, r4, #16
 8018d18:	d402      	bmi.n	8018d20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018d1a:	42b4      	cmp	r4, r6
 8018d1c:	f2c0 80b3 	blt.w	8018e86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8018d20:	2600      	movs	r6, #0
 8018d22:	199c      	adds	r4, r3, r6
 8018d24:	2c00      	cmp	r4, #0
 8018d26:	dc3e      	bgt.n	8018da6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018d28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018d30:	f1bb 0f00 	cmp.w	fp, #0
 8018d34:	f340 810e 	ble.w	8018f54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018d38:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d42:	f1bb 0b01 	subs.w	fp, fp, #1
 8018d46:	eeb0 6a62 	vmov.f32	s12, s5
 8018d4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018d4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d56:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018d5a:	eeb0 6a43 	vmov.f32	s12, s6
 8018d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d62:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018d66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018d6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018d6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018d76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018d7e:	ee12 2a90 	vmov	r2, s5
 8018d82:	eef0 2a47 	vmov.f32	s5, s14
 8018d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d8a:	ee13 2a10 	vmov	r2, s6
 8018d8e:	9311      	str	r3, [sp, #68]	; 0x44
 8018d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d92:	eeb0 3a67 	vmov.f32	s6, s15
 8018d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8018d9a:	9a03      	ldr	r2, [sp, #12]
 8018d9c:	9312      	str	r3, [sp, #72]	; 0x48
 8018d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018da0:	bf08      	it	eq
 8018da2:	4613      	moveq	r3, r2
 8018da4:	e789      	b.n	8018cba <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8018da6:	140f      	asrs	r7, r1, #16
 8018da8:	d418      	bmi.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018daa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018dae:	42bd      	cmp	r5, r7
 8018db0:	dd14      	ble.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018db2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018db6:	d411      	bmi.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018db8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018dbc:	4564      	cmp	r4, ip
 8018dbe:	dd0d      	ble.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018dc0:	b22d      	sxth	r5, r5
 8018dc2:	9c01      	ldr	r4, [sp, #4]
 8018dc4:	fb0c 7505 	mla	r5, ip, r5, r7
 8018dc8:	5d64      	ldrb	r4, [r4, r5]
 8018dca:	2cff      	cmp	r4, #255	; 0xff
 8018dcc:	d10c      	bne.n	8018de8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018dce:	9c00      	ldr	r4, [sp, #0]
 8018dd0:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8018dd4:	f06f 0401 	mvn.w	r4, #1
 8018dd8:	4374      	muls	r4, r6
 8018dda:	5305      	strh	r5, [r0, r4]
 8018ddc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018dde:	3e01      	subs	r6, #1
 8018de0:	4421      	add	r1, r4
 8018de2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018de4:	4422      	add	r2, r4
 8018de6:	e79c      	b.n	8018d22 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018de8:	2c00      	cmp	r4, #0
 8018dea:	d0f7      	beq.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018dec:	9f00      	ldr	r7, [sp, #0]
 8018dee:	fa1f fc84 	uxth.w	ip, r4
 8018df2:	43e4      	mvns	r4, r4
 8018df4:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8018df8:	f06f 0501 	mvn.w	r5, #1
 8018dfc:	b2e4      	uxtb	r4, r4
 8018dfe:	4375      	muls	r5, r6
 8018e00:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8018e04:	9502      	str	r5, [sp, #8]
 8018e06:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018e0a:	5b45      	ldrh	r5, [r0, r5]
 8018e0c:	122f      	asrs	r7, r5, #8
 8018e0e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018e12:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018e16:	00ed      	lsls	r5, r5, #3
 8018e18:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018e1c:	fb17 f704 	smulbb	r7, r7, r4
 8018e20:	b2ed      	uxtb	r5, r5
 8018e22:	fb1a fa04 	smulbb	sl, sl, r4
 8018e26:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8018e2a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018e2e:	fb15 f504 	smulbb	r5, r5, r4
 8018e32:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018e36:	fa1f fe8e 	uxth.w	lr, lr
 8018e3a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018e3e:	fa5f f989 	uxtb.w	r9, r9
 8018e42:	fb07 a70c 	mla	r7, r7, ip, sl
 8018e46:	f10e 0401 	add.w	r4, lr, #1
 8018e4a:	fb09 550c 	mla	r5, r9, ip, r5
 8018e4e:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018e52:	9c02      	ldr	r4, [sp, #8]
 8018e54:	b2ad      	uxth	r5, r5
 8018e56:	b2bf      	uxth	r7, r7
 8018e58:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018e5c:	f105 0a01 	add.w	sl, r5, #1
 8018e60:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018e64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018e68:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018e6c:	f107 0a01 	add.w	sl, r7, #1
 8018e70:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018e74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018e78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018e7c:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018e80:	f820 e004 	strh.w	lr, [r0, r4]
 8018e84:	e7aa      	b.n	8018ddc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018e86:	f04f 0900 	mov.w	r9, #0
 8018e8a:	eba3 0409 	sub.w	r4, r3, r9
 8018e8e:	2c00      	cmp	r4, #0
 8018e90:	f77f af4a 	ble.w	8018d28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018e94:	1414      	asrs	r4, r2, #16
 8018e96:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018e9a:	140d      	asrs	r5, r1, #16
 8018e9c:	fb06 5504 	mla	r5, r6, r4, r5
 8018ea0:	9c01      	ldr	r4, [sp, #4]
 8018ea2:	5d64      	ldrb	r4, [r4, r5]
 8018ea4:	2cff      	cmp	r4, #255	; 0xff
 8018ea6:	d10b      	bne.n	8018ec0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018ea8:	9c00      	ldr	r4, [sp, #0]
 8018eaa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018eae:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018eb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018eb4:	f109 0901 	add.w	r9, r9, #1
 8018eb8:	4421      	add	r1, r4
 8018eba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018ebc:	4422      	add	r2, r4
 8018ebe:	e7e4      	b.n	8018e8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018ec0:	2c00      	cmp	r4, #0
 8018ec2:	d0f6      	beq.n	8018eb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018ec4:	9e00      	ldr	r6, [sp, #0]
 8018ec6:	b2a7      	uxth	r7, r4
 8018ec8:	43e4      	mvns	r4, r4
 8018eca:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018ece:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018ed2:	b2e4      	uxtb	r4, r4
 8018ed4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018ed8:	122e      	asrs	r6, r5, #8
 8018eda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018ede:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ee2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018ee6:	00ed      	lsls	r5, r5, #3
 8018ee8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018eec:	fb16 f604 	smulbb	r6, r6, r4
 8018ef0:	b2ed      	uxtb	r5, r5
 8018ef2:	fb1a fa04 	smulbb	sl, sl, r4
 8018ef6:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018efa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018efe:	fb15 f504 	smulbb	r5, r5, r4
 8018f02:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018f06:	fa1f fc8c 	uxth.w	ip, ip
 8018f0a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018f0e:	fa5f fe8e 	uxtb.w	lr, lr
 8018f12:	fb06 a607 	mla	r6, r6, r7, sl
 8018f16:	f10c 0401 	add.w	r4, ip, #1
 8018f1a:	fb0e 5507 	mla	r5, lr, r7, r5
 8018f1e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018f22:	b2ad      	uxth	r5, r5
 8018f24:	b2b6      	uxth	r6, r6
 8018f26:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018f2a:	f105 0a01 	add.w	sl, r5, #1
 8018f2e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018f32:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018f36:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018f3a:	f106 0a01 	add.w	sl, r6, #1
 8018f3e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018f42:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018f46:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018f4a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018f4e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018f52:	e7ae      	b.n	8018eb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018f54:	b005      	add	sp, #20
 8018f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5e:	b085      	sub	sp, #20
 8018f60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018f62:	9203      	str	r2, [sp, #12]
 8018f64:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8018f68:	9100      	str	r1, [sp, #0]
 8018f6a:	9201      	str	r2, [sp, #4]
 8018f6c:	6841      	ldr	r1, [r0, #4]
 8018f6e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8018f72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018f76:	fb01 2404 	mla	r4, r1, r4, r2
 8018f7a:	6802      	ldr	r2, [r0, #0]
 8018f7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018f80:	f8de 2000 	ldr.w	r2, [lr]
 8018f84:	9202      	str	r2, [sp, #8]
 8018f86:	9a01      	ldr	r2, [sp, #4]
 8018f88:	43d6      	mvns	r6, r2
 8018f8a:	b2f6      	uxtb	r6, r6
 8018f8c:	9a00      	ldr	r2, [sp, #0]
 8018f8e:	2a00      	cmp	r2, #0
 8018f90:	dc03      	bgt.n	8018f9a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018f92:	9a03      	ldr	r2, [sp, #12]
 8018f94:	2a00      	cmp	r2, #0
 8018f96:	f340 8124 	ble.w	80191e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8018f9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f9c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8018fa0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018fa6:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8018faa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	dd0e      	ble.n	8018fd0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018fb2:	1408      	asrs	r0, r1, #16
 8018fb4:	d405      	bmi.n	8018fc2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018fb6:	4560      	cmp	r0, ip
 8018fb8:	da03      	bge.n	8018fc2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018fba:	1410      	asrs	r0, r2, #16
 8018fbc:	d401      	bmi.n	8018fc2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018fbe:	42b8      	cmp	r0, r7
 8018fc0:	db07      	blt.n	8018fd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018fc2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018fc4:	3b01      	subs	r3, #1
 8018fc6:	3402      	adds	r4, #2
 8018fc8:	4401      	add	r1, r0
 8018fca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018fcc:	4402      	add	r2, r0
 8018fce:	e7ee      	b.n	8018fae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018fd0:	d06e      	beq.n	80190b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018fd2:	1e58      	subs	r0, r3, #1
 8018fd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018fd6:	fb05 1500 	mla	r5, r5, r0, r1
 8018fda:	142d      	asrs	r5, r5, #16
 8018fdc:	d45c      	bmi.n	8019098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018fde:	4565      	cmp	r5, ip
 8018fe0:	da5a      	bge.n	8019098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018fe2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018fe4:	fb05 2000 	mla	r0, r5, r0, r2
 8018fe8:	1400      	asrs	r0, r0, #16
 8018fea:	d455      	bmi.n	8019098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018fec:	42b8      	cmp	r0, r7
 8018fee:	da53      	bge.n	8019098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8018ff0:	4699      	mov	r9, r3
 8018ff2:	46a2      	mov	sl, r4
 8018ff4:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8018ff8:	f1b9 0f00 	cmp.w	r9, #0
 8018ffc:	dd54      	ble.n	80190a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8018ffe:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8019002:	140d      	asrs	r5, r1, #16
 8019004:	1410      	asrs	r0, r2, #16
 8019006:	f109 39ff 	add.w	r9, r9, #4294967295
 801900a:	fb07 5000 	mla	r0, r7, r0, r5
 801900e:	9d02      	ldr	r5, [sp, #8]
 8019010:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8019014:	f8ba 5000 	ldrh.w	r5, [sl]
 8019018:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801901c:	122f      	asrs	r7, r5, #8
 801901e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8019022:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019026:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801902a:	00ed      	lsls	r5, r5, #3
 801902c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8019030:	fb17 f706 	smulbb	r7, r7, r6
 8019034:	b2ed      	uxtb	r5, r5
 8019036:	fb18 f806 	smulbb	r8, r8, r6
 801903a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801903e:	10c7      	asrs	r7, r0, #3
 8019040:	fb15 f506 	smulbb	r5, r5, r6
 8019044:	00c0      	lsls	r0, r0, #3
 8019046:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801904a:	fa1f fc8c 	uxth.w	ip, ip
 801904e:	b2c0      	uxtb	r0, r0
 8019050:	fb07 870b 	mla	r7, r7, fp, r8
 8019054:	fb00 500b 	mla	r0, r0, fp, r5
 8019058:	f10c 0501 	add.w	r5, ip, #1
 801905c:	b2bf      	uxth	r7, r7
 801905e:	b280      	uxth	r0, r0
 8019060:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019064:	f107 0801 	add.w	r8, r7, #1
 8019068:	1c45      	adds	r5, r0, #1
 801906a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801906e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019072:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019076:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019078:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801907c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019080:	4401      	add	r1, r0
 8019082:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019086:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019088:	ea45 0c0c 	orr.w	ip, r5, ip
 801908c:	4402      	add	r2, r0
 801908e:	ea4c 0c08 	orr.w	ip, ip, r8
 8019092:	f82a cb02 	strh.w	ip, [sl], #2
 8019096:	e7af      	b.n	8018ff8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019098:	f04f 0800 	mov.w	r8, #0
 801909c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80190a0:	eb03 0008 	add.w	r0, r3, r8
 80190a4:	2800      	cmp	r0, #0
 80190a6:	dc41      	bgt.n	801912c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80190a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80190b0:	9b00      	ldr	r3, [sp, #0]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	f340 8095 	ble.w	80191e2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80190b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80190bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190c6:	eef0 6a62 	vmov.f32	s13, s5
 80190ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80190ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80190d6:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80190da:	eef0 6a43 	vmov.f32	s13, s6
 80190de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80190e2:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80190e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80190ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80190ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80190f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80190f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80190fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80190fe:	ee12 2a90 	vmov	r2, s5
 8019102:	eef0 2a47 	vmov.f32	s5, s14
 8019106:	fb92 f3f3 	sdiv	r3, r2, r3
 801910a:	ee13 2a10 	vmov	r2, s6
 801910e:	9311      	str	r3, [sp, #68]	; 0x44
 8019110:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019112:	eeb0 3a67 	vmov.f32	s6, s15
 8019116:	fb92 f3f3 	sdiv	r3, r2, r3
 801911a:	9312      	str	r3, [sp, #72]	; 0x48
 801911c:	9b00      	ldr	r3, [sp, #0]
 801911e:	9a03      	ldr	r2, [sp, #12]
 8019120:	3b01      	subs	r3, #1
 8019122:	9300      	str	r3, [sp, #0]
 8019124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019126:	bf08      	it	eq
 8019128:	4613      	moveq	r3, r2
 801912a:	e72f      	b.n	8018f8c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801912c:	140f      	asrs	r7, r1, #16
 801912e:	d451      	bmi.n	80191d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019130:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019134:	42bd      	cmp	r5, r7
 8019136:	dd4d      	ble.n	80191d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019138:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801913c:	d44a      	bmi.n	80191d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801913e:	f8de 000c 	ldr.w	r0, [lr, #12]
 8019142:	4560      	cmp	r0, ip
 8019144:	dd46      	ble.n	80191d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019146:	b22d      	sxth	r5, r5
 8019148:	9802      	ldr	r0, [sp, #8]
 801914a:	fb0c 7505 	mla	r5, ip, r5, r7
 801914e:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8019152:	f06f 0501 	mvn.w	r5, #1
 8019156:	fb05 fb08 	mul.w	fp, r5, r8
 801915a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801915e:	f834 500b 	ldrh.w	r5, [r4, fp]
 8019162:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019166:	122f      	asrs	r7, r5, #8
 8019168:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801916c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019170:	00ed      	lsls	r5, r5, #3
 8019172:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019176:	fb17 f706 	smulbb	r7, r7, r6
 801917a:	b2ed      	uxtb	r5, r5
 801917c:	fb19 f906 	smulbb	r9, r9, r6
 8019180:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019184:	10c7      	asrs	r7, r0, #3
 8019186:	fb15 f506 	smulbb	r5, r5, r6
 801918a:	00c0      	lsls	r0, r0, #3
 801918c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019190:	fa1f fc8c 	uxth.w	ip, ip
 8019194:	b2c0      	uxtb	r0, r0
 8019196:	fb07 970a 	mla	r7, r7, sl, r9
 801919a:	fb00 500a 	mla	r0, r0, sl, r5
 801919e:	f10c 0501 	add.w	r5, ip, #1
 80191a2:	b2bf      	uxth	r7, r7
 80191a4:	b280      	uxth	r0, r0
 80191a6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80191aa:	f107 0901 	add.w	r9, r7, #1
 80191ae:	1c45      	adds	r5, r0, #1
 80191b0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80191b4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80191b8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80191bc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80191c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80191c4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80191c8:	ea45 0c0c 	orr.w	ip, r5, ip
 80191cc:	ea4c 0c09 	orr.w	ip, ip, r9
 80191d0:	f824 c00b 	strh.w	ip, [r4, fp]
 80191d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80191d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80191da:	4401      	add	r1, r0
 80191dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80191de:	4402      	add	r2, r0
 80191e0:	e75e      	b.n	80190a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80191e2:	b005      	add	sp, #20
 80191e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ec:	b085      	sub	sp, #20
 80191ee:	4693      	mov	fp, r2
 80191f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80191f4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80191f6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80191f8:	6870      	ldr	r0, [r6, #4]
 80191fa:	9101      	str	r1, [sp, #4]
 80191fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019200:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8019204:	fb00 2404 	mla	r4, r0, r4, r2
 8019208:	6832      	ldr	r2, [r6, #0]
 801920a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801920e:	682a      	ldr	r2, [r5, #0]
 8019210:	9202      	str	r2, [sp, #8]
 8019212:	9a01      	ldr	r2, [sp, #4]
 8019214:	2a00      	cmp	r2, #0
 8019216:	dc03      	bgt.n	8019220 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019218:	f1bb 0f00 	cmp.w	fp, #0
 801921c:	f340 809a 	ble.w	8019354 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019222:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8019226:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801922a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801922c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8019230:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019234:	2b00      	cmp	r3, #0
 8019236:	dd0c      	ble.n	8019252 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019238:	1406      	asrs	r6, r0, #16
 801923a:	d405      	bmi.n	8019248 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801923c:	454e      	cmp	r6, r9
 801923e:	da03      	bge.n	8019248 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019240:	1416      	asrs	r6, r2, #16
 8019242:	d401      	bmi.n	8019248 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019244:	4546      	cmp	r6, r8
 8019246:	db05      	blt.n	8019254 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019248:	4470      	add	r0, lr
 801924a:	4462      	add	r2, ip
 801924c:	3b01      	subs	r3, #1
 801924e:	3402      	adds	r4, #2
 8019250:	e7f0      	b.n	8019234 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019252:	d00f      	beq.n	8019274 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019254:	1e5e      	subs	r6, r3, #1
 8019256:	fb0e 0706 	mla	r7, lr, r6, r0
 801925a:	143f      	asrs	r7, r7, #16
 801925c:	d541      	bpl.n	80192e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801925e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8019262:	4698      	mov	r8, r3
 8019264:	9603      	str	r6, [sp, #12]
 8019266:	f1b8 0f00 	cmp.w	r8, #0
 801926a:	dc56      	bgt.n	801931a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801926c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019270:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019274:	9b01      	ldr	r3, [sp, #4]
 8019276:	2b00      	cmp	r3, #0
 8019278:	dd6c      	ble.n	8019354 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801927a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801927e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019280:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019284:	eeb0 6a62 	vmov.f32	s12, s5
 8019288:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801928c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019290:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019294:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019298:	eeb0 6a43 	vmov.f32	s12, s6
 801929c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192a0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80192a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80192a8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80192ac:	ee77 2a62 	vsub.f32	s5, s14, s5
 80192b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80192b4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80192b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80192bc:	ee12 2a90 	vmov	r2, s5
 80192c0:	eef0 2a47 	vmov.f32	s5, s14
 80192c4:	fb92 fef3 	sdiv	lr, r2, r3
 80192c8:	ee13 2a10 	vmov	r2, s6
 80192cc:	eeb0 3a67 	vmov.f32	s6, s15
 80192d0:	fb92 fcf3 	sdiv	ip, r2, r3
 80192d4:	9b01      	ldr	r3, [sp, #4]
 80192d6:	3b01      	subs	r3, #1
 80192d8:	9301      	str	r3, [sp, #4]
 80192da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192dc:	bf08      	it	eq
 80192de:	465b      	moveq	r3, fp
 80192e0:	e797      	b.n	8019212 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80192e2:	454f      	cmp	r7, r9
 80192e4:	dabb      	bge.n	801925e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80192e6:	fb0c 2606 	mla	r6, ip, r6, r2
 80192ea:	1436      	asrs	r6, r6, #16
 80192ec:	d4b7      	bmi.n	801925e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80192ee:	4546      	cmp	r6, r8
 80192f0:	dab5      	bge.n	801925e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80192f2:	461e      	mov	r6, r3
 80192f4:	46a0      	mov	r8, r4
 80192f6:	2e00      	cmp	r6, #0
 80192f8:	ddb8      	ble.n	801926c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80192fa:	1417      	asrs	r7, r2, #16
 80192fc:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8019300:	ea4f 4920 	mov.w	r9, r0, asr #16
 8019304:	9902      	ldr	r1, [sp, #8]
 8019306:	4470      	add	r0, lr
 8019308:	4462      	add	r2, ip
 801930a:	fb0a 9707 	mla	r7, sl, r7, r9
 801930e:	3e01      	subs	r6, #1
 8019310:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8019314:	f828 7b02 	strh.w	r7, [r8], #2
 8019318:	e7ed      	b.n	80192f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801931a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801931e:	d414      	bmi.n	801934a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019320:	68ae      	ldr	r6, [r5, #8]
 8019322:	454e      	cmp	r6, r9
 8019324:	dd11      	ble.n	801934a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019326:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801932a:	d40e      	bmi.n	801934a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801932c:	68ef      	ldr	r7, [r5, #12]
 801932e:	4557      	cmp	r7, sl
 8019330:	dd0b      	ble.n	801934a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8019332:	b236      	sxth	r6, r6
 8019334:	f06f 0101 	mvn.w	r1, #1
 8019338:	9f02      	ldr	r7, [sp, #8]
 801933a:	fb0a 9606 	mla	r6, sl, r6, r9
 801933e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8019342:	fb01 f608 	mul.w	r6, r1, r8
 8019346:	9903      	ldr	r1, [sp, #12]
 8019348:	538f      	strh	r7, [r1, r6]
 801934a:	4470      	add	r0, lr
 801934c:	4462      	add	r2, ip
 801934e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019352:	e788      	b.n	8019266 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019354:	b005      	add	sp, #20
 8019356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801935a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801935a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801935e:	b087      	sub	sp, #28
 8019360:	468b      	mov	fp, r1
 8019362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019366:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019368:	9203      	str	r2, [sp, #12]
 801936a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801936e:	6841      	ldr	r1, [r0, #4]
 8019370:	9204      	str	r2, [sp, #16]
 8019372:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8019376:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801937a:	fb01 2505 	mla	r5, r1, r5, r2
 801937e:	6802      	ldr	r2, [r0, #0]
 8019380:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019384:	f8d9 2000 	ldr.w	r2, [r9]
 8019388:	9201      	str	r2, [sp, #4]
 801938a:	f1bb 0f00 	cmp.w	fp, #0
 801938e:	dc03      	bgt.n	8019398 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019390:	9a03      	ldr	r2, [sp, #12]
 8019392:	2a00      	cmp	r2, #0
 8019394:	f340 8158 	ble.w	8019648 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019398:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801939a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801939e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80193a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80193a4:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 80193a8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	dd0e      	ble.n	80193ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80193b0:	1402      	asrs	r2, r0, #16
 80193b2:	d405      	bmi.n	80193c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80193b4:	42ba      	cmp	r2, r7
 80193b6:	da03      	bge.n	80193c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80193b8:	140a      	asrs	r2, r1, #16
 80193ba:	d401      	bmi.n	80193c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80193bc:	42b2      	cmp	r2, r6
 80193be:	db07      	blt.n	80193d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80193c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80193c2:	3b01      	subs	r3, #1
 80193c4:	3502      	adds	r5, #2
 80193c6:	4410      	add	r0, r2
 80193c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80193ca:	4411      	add	r1, r2
 80193cc:	e7ee      	b.n	80193ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80193ce:	d017      	beq.n	8019400 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80193d0:	1e5a      	subs	r2, r3, #1
 80193d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193d4:	fb04 0402 	mla	r4, r4, r2, r0
 80193d8:	1424      	asrs	r4, r4, #16
 80193da:	d409      	bmi.n	80193f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80193dc:	42bc      	cmp	r4, r7
 80193de:	da07      	bge.n	80193f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80193e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80193e2:	fb04 1202 	mla	r2, r4, r2, r1
 80193e6:	1412      	asrs	r2, r2, #16
 80193e8:	d402      	bmi.n	80193f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80193ea:	42b2      	cmp	r2, r6
 80193ec:	f2c0 80bf 	blt.w	801956e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80193f0:	2700      	movs	r7, #0
 80193f2:	19da      	adds	r2, r3, r7
 80193f4:	2a00      	cmp	r2, #0
 80193f6:	dc3e      	bgt.n	8019476 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80193f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80193fc:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019400:	f1bb 0f00 	cmp.w	fp, #0
 8019404:	f340 8120 	ble.w	8019648 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019408:	ee30 0a04 	vadd.f32	s0, s0, s8
 801940c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801940e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019412:	f1bb 0b01 	subs.w	fp, fp, #1
 8019416:	eeb0 6a62 	vmov.f32	s12, s5
 801941a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801941e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019422:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019426:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801942a:	eeb0 6a43 	vmov.f32	s12, s6
 801942e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019432:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019436:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801943a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801943e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019442:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019446:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801944a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801944e:	ee12 2a90 	vmov	r2, s5
 8019452:	eef0 2a47 	vmov.f32	s5, s14
 8019456:	fb92 f3f3 	sdiv	r3, r2, r3
 801945a:	ee13 2a10 	vmov	r2, s6
 801945e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019462:	eeb0 3a67 	vmov.f32	s6, s15
 8019466:	fb92 f3f3 	sdiv	r3, r2, r3
 801946a:	9a03      	ldr	r2, [sp, #12]
 801946c:	9314      	str	r3, [sp, #80]	; 0x50
 801946e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019470:	bf08      	it	eq
 8019472:	4613      	moveq	r3, r2
 8019474:	e789      	b.n	801938a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019476:	1406      	asrs	r6, r0, #16
 8019478:	d42d      	bmi.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801947a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801947e:	42b4      	cmp	r4, r6
 8019480:	dd29      	ble.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019482:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8019486:	d426      	bmi.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019488:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801948c:	4562      	cmp	r2, ip
 801948e:	dd22      	ble.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019490:	b224      	sxth	r4, r4
 8019492:	9a01      	ldr	r2, [sp, #4]
 8019494:	fb0c 6404 	mla	r4, ip, r4, r6
 8019498:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801949c:	0e22      	lsrs	r2, r4, #24
 801949e:	d01a      	beq.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80194a0:	9e04      	ldr	r6, [sp, #16]
 80194a2:	4372      	muls	r2, r6
 80194a4:	1c56      	adds	r6, r2, #1
 80194a6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80194aa:	0a26      	lsrs	r6, r4, #8
 80194ac:	1212      	asrs	r2, r2, #8
 80194ae:	9605      	str	r6, [sp, #20]
 80194b0:	2aff      	cmp	r2, #255	; 0xff
 80194b2:	d116      	bne.n	80194e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80194b4:	f06f 0201 	mvn.w	r2, #1
 80194b8:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80194bc:	fb02 fc07 	mul.w	ip, r2, r7
 80194c0:	0962      	lsrs	r2, r4, #5
 80194c2:	f026 0607 	bic.w	r6, r6, #7
 80194c6:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80194ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80194ce:	4316      	orrs	r6, r2
 80194d0:	4326      	orrs	r6, r4
 80194d2:	f825 600c 	strh.w	r6, [r5, ip]
 80194d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80194d8:	3f01      	subs	r7, #1
 80194da:	4410      	add	r0, r2
 80194dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80194de:	4411      	add	r1, r2
 80194e0:	e787      	b.n	80193f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80194e2:	f06f 0601 	mvn.w	r6, #1
 80194e6:	fa1f fa82 	uxth.w	sl, r2
 80194ea:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80194ee:	43d2      	mvns	r2, r2
 80194f0:	437e      	muls	r6, r7
 80194f2:	b2e4      	uxtb	r4, r4
 80194f4:	fb1c fc0a 	smulbb	ip, ip, sl
 80194f8:	b2d2      	uxtb	r2, r2
 80194fa:	f835 8006 	ldrh.w	r8, [r5, r6]
 80194fe:	fb14 f40a 	smulbb	r4, r4, sl
 8019502:	9602      	str	r6, [sp, #8]
 8019504:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019508:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801950c:	fb16 f60a 	smulbb	r6, r6, sl
 8019510:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019514:	fb0e ce02 	mla	lr, lr, r2, ip
 8019518:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801951c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019520:	fa1f fe8e 	uxth.w	lr, lr
 8019524:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019528:	fa5f f888 	uxtb.w	r8, r8
 801952c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019530:	fb08 4402 	mla	r4, r8, r2, r4
 8019534:	f10e 0201 	add.w	r2, lr, #1
 8019538:	fa1f fc8c 	uxth.w	ip, ip
 801953c:	b2a4      	uxth	r4, r4
 801953e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019542:	9a02      	ldr	r2, [sp, #8]
 8019544:	1c66      	adds	r6, r4, #1
 8019546:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801954a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801954e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019552:	ea46 0e0e 	orr.w	lr, r6, lr
 8019556:	f10c 0601 	add.w	r6, ip, #1
 801955a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801955e:	0976      	lsrs	r6, r6, #5
 8019560:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019564:	ea4e 0e06 	orr.w	lr, lr, r6
 8019568:	f825 e002 	strh.w	lr, [r5, r2]
 801956c:	e7b3      	b.n	80194d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801956e:	f04f 0800 	mov.w	r8, #0
 8019572:	eba3 0208 	sub.w	r2, r3, r8
 8019576:	2a00      	cmp	r2, #0
 8019578:	f77f af3e 	ble.w	80193f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801957c:	1404      	asrs	r4, r0, #16
 801957e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8019582:	140a      	asrs	r2, r1, #16
 8019584:	fb06 4202 	mla	r2, r6, r2, r4
 8019588:	9c01      	ldr	r4, [sp, #4]
 801958a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801958e:	0e22      	lsrs	r2, r4, #24
 8019590:	d015      	beq.n	80195be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019592:	9e04      	ldr	r6, [sp, #16]
 8019594:	4372      	muls	r2, r6
 8019596:	1c56      	adds	r6, r2, #1
 8019598:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801959c:	0a26      	lsrs	r6, r4, #8
 801959e:	1212      	asrs	r2, r2, #8
 80195a0:	2aff      	cmp	r2, #255	; 0xff
 80195a2:	d113      	bne.n	80195cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80195a4:	0962      	lsrs	r2, r4, #5
 80195a6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80195aa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80195ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80195b2:	f026 0607 	bic.w	r6, r6, #7
 80195b6:	4316      	orrs	r6, r2
 80195b8:	4326      	orrs	r6, r4
 80195ba:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80195be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80195c0:	f108 0801 	add.w	r8, r8, #1
 80195c4:	4410      	add	r0, r2
 80195c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80195c8:	4411      	add	r1, r2
 80195ca:	e7d2      	b.n	8019572 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80195cc:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80195d0:	fa1f fa82 	uxth.w	sl, r2
 80195d4:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80195d8:	43d2      	mvns	r2, r2
 80195da:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80195de:	fb17 f70a 	smulbb	r7, r7, sl
 80195e2:	b2d2      	uxtb	r2, r2
 80195e4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80195e8:	b2e4      	uxtb	r4, r4
 80195ea:	b2f6      	uxtb	r6, r6
 80195ec:	fb0c 7c02 	mla	ip, ip, r2, r7
 80195f0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80195f4:	fb14 f40a 	smulbb	r4, r4, sl
 80195f8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80195fc:	fa1f fc8c 	uxth.w	ip, ip
 8019600:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019604:	fb16 f60a 	smulbb	r6, r6, sl
 8019608:	fa5f fe8e 	uxtb.w	lr, lr
 801960c:	fb0e 4402 	mla	r4, lr, r2, r4
 8019610:	fb07 6702 	mla	r7, r7, r2, r6
 8019614:	f10c 0201 	add.w	r2, ip, #1
 8019618:	b2a4      	uxth	r4, r4
 801961a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801961e:	1c66      	adds	r6, r4, #1
 8019620:	b2bf      	uxth	r7, r7
 8019622:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019626:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801962a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801962e:	ea46 0c0c 	orr.w	ip, r6, ip
 8019632:	1c7e      	adds	r6, r7, #1
 8019634:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019638:	0976      	lsrs	r6, r6, #5
 801963a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801963e:	ea4c 0c06 	orr.w	ip, ip, r6
 8019642:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8019646:	e7ba      	b.n	80195be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019648:	b007      	add	sp, #28
 801964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019650 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019654:	b085      	sub	sp, #20
 8019656:	468b      	mov	fp, r1
 8019658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801965c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801965e:	9203      	str	r2, [sp, #12]
 8019660:	6841      	ldr	r1, [r0, #4]
 8019662:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8019666:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801966a:	fb01 2404 	mla	r4, r1, r4, r2
 801966e:	6802      	ldr	r2, [r0, #0]
 8019670:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019674:	f8d8 2000 	ldr.w	r2, [r8]
 8019678:	9201      	str	r2, [sp, #4]
 801967a:	f1bb 0f00 	cmp.w	fp, #0
 801967e:	dc03      	bgt.n	8019688 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8019680:	9a03      	ldr	r2, [sp, #12]
 8019682:	2a00      	cmp	r2, #0
 8019684:	f340 814f 	ble.w	8019926 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801968a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801968e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019692:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019694:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019698:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801969c:	2b00      	cmp	r3, #0
 801969e:	dd0e      	ble.n	80196be <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80196a0:	1408      	asrs	r0, r1, #16
 80196a2:	d405      	bmi.n	80196b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80196a4:	42b8      	cmp	r0, r7
 80196a6:	da03      	bge.n	80196b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80196a8:	1410      	asrs	r0, r2, #16
 80196aa:	d401      	bmi.n	80196b0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80196ac:	42b0      	cmp	r0, r6
 80196ae:	db07      	blt.n	80196c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80196b0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80196b2:	3b01      	subs	r3, #1
 80196b4:	3402      	adds	r4, #2
 80196b6:	4401      	add	r1, r0
 80196b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80196ba:	4402      	add	r2, r0
 80196bc:	e7ee      	b.n	801969c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80196be:	d017      	beq.n	80196f0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80196c0:	1e58      	subs	r0, r3, #1
 80196c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80196c4:	fb05 1500 	mla	r5, r5, r0, r1
 80196c8:	142d      	asrs	r5, r5, #16
 80196ca:	d409      	bmi.n	80196e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80196cc:	42bd      	cmp	r5, r7
 80196ce:	da07      	bge.n	80196e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80196d0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80196d2:	fb05 2000 	mla	r0, r5, r0, r2
 80196d6:	1400      	asrs	r0, r0, #16
 80196d8:	d402      	bmi.n	80196e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80196da:	42b0      	cmp	r0, r6
 80196dc:	f2c0 80ba 	blt.w	8019854 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80196e0:	2600      	movs	r6, #0
 80196e2:	1998      	adds	r0, r3, r6
 80196e4:	2800      	cmp	r0, #0
 80196e6:	dc3e      	bgt.n	8019766 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80196e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80196f0:	f1bb 0f00 	cmp.w	fp, #0
 80196f4:	f340 8117 	ble.w	8019926 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80196f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80196fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019702:	f1bb 0b01 	subs.w	fp, fp, #1
 8019706:	eeb0 6a62 	vmov.f32	s12, s5
 801970a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801970e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019712:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019716:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801971a:	eeb0 6a43 	vmov.f32	s12, s6
 801971e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019722:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019726:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801972a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801972e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019732:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019736:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801973a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801973e:	ee12 2a90 	vmov	r2, s5
 8019742:	eef0 2a47 	vmov.f32	s5, s14
 8019746:	fb92 f3f3 	sdiv	r3, r2, r3
 801974a:	ee13 2a10 	vmov	r2, s6
 801974e:	9311      	str	r3, [sp, #68]	; 0x44
 8019750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019752:	eeb0 3a67 	vmov.f32	s6, s15
 8019756:	fb92 f3f3 	sdiv	r3, r2, r3
 801975a:	9a03      	ldr	r2, [sp, #12]
 801975c:	9312      	str	r3, [sp, #72]	; 0x48
 801975e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019760:	bf08      	it	eq
 8019762:	4613      	moveq	r3, r2
 8019764:	e789      	b.n	801967a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8019766:	140f      	asrs	r7, r1, #16
 8019768:	d424      	bmi.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801976a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801976e:	42bd      	cmp	r5, r7
 8019770:	dd20      	ble.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019772:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019776:	d41d      	bmi.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019778:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801977c:	4560      	cmp	r0, ip
 801977e:	dd19      	ble.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019780:	b22d      	sxth	r5, r5
 8019782:	9801      	ldr	r0, [sp, #4]
 8019784:	fb0c 7505 	mla	r5, ip, r5, r7
 8019788:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801978c:	0e07      	lsrs	r7, r0, #24
 801978e:	2fff      	cmp	r7, #255	; 0xff
 8019790:	d116      	bne.n	80197c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8019792:	f06f 0501 	mvn.w	r5, #1
 8019796:	fb05 f706 	mul.w	r7, r5, r6
 801979a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801979e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80197a2:	0945      	lsrs	r5, r0, #5
 80197a4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80197a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80197ac:	ea4c 0505 	orr.w	r5, ip, r5
 80197b0:	4305      	orrs	r5, r0
 80197b2:	53e5      	strh	r5, [r4, r7]
 80197b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80197b6:	3e01      	subs	r6, #1
 80197b8:	4401      	add	r1, r0
 80197ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80197bc:	4402      	add	r2, r0
 80197be:	e790      	b.n	80196e2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80197c0:	b2fd      	uxtb	r5, r7
 80197c2:	2f00      	cmp	r7, #0
 80197c4:	d0f6      	beq.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80197c6:	f06f 0701 	mvn.w	r7, #1
 80197ca:	fa1f f985 	uxth.w	r9, r5
 80197ce:	43ed      	mvns	r5, r5
 80197d0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80197d4:	4377      	muls	r7, r6
 80197d6:	fb1a fa09 	smulbb	sl, sl, r9
 80197da:	b2ed      	uxtb	r5, r5
 80197dc:	f834 e007 	ldrh.w	lr, [r4, r7]
 80197e0:	9702      	str	r7, [sp, #8]
 80197e2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80197e6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80197ea:	fb17 f709 	smulbb	r7, r7, r9
 80197ee:	b2c0      	uxtb	r0, r0
 80197f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80197f4:	fb10 f009 	smulbb	r0, r0, r9
 80197f8:	fb0c 7c05 	mla	ip, ip, r5, r7
 80197fc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019800:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019804:	fa1f fc8c 	uxth.w	ip, ip
 8019808:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801980c:	fa5f fe8e 	uxtb.w	lr, lr
 8019810:	fb07 a705 	mla	r7, r7, r5, sl
 8019814:	fb0e 0005 	mla	r0, lr, r5, r0
 8019818:	f10c 0501 	add.w	r5, ip, #1
 801981c:	b2bf      	uxth	r7, r7
 801981e:	b280      	uxth	r0, r0
 8019820:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019824:	f100 0a01 	add.w	sl, r0, #1
 8019828:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801982c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8019830:	9802      	ldr	r0, [sp, #8]
 8019832:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019836:	ea4a 0c0c 	orr.w	ip, sl, ip
 801983a:	f107 0a01 	add.w	sl, r7, #1
 801983e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019842:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019846:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801984a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801984e:	f824 c000 	strh.w	ip, [r4, r0]
 8019852:	e7af      	b.n	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019854:	f04f 0e00 	mov.w	lr, #0
 8019858:	eba3 000e 	sub.w	r0, r3, lr
 801985c:	2800      	cmp	r0, #0
 801985e:	f77f af43 	ble.w	80196e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019862:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019866:	140d      	asrs	r5, r1, #16
 8019868:	1410      	asrs	r0, r2, #16
 801986a:	fb06 5000 	mla	r0, r6, r0, r5
 801986e:	9d01      	ldr	r5, [sp, #4]
 8019870:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019874:	0e2e      	lsrs	r6, r5, #24
 8019876:	2eff      	cmp	r6, #255	; 0xff
 8019878:	d112      	bne.n	80198a0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801987a:	482c      	ldr	r0, [pc, #176]	; (801992c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801987c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8019880:	0968      	lsrs	r0, r5, #5
 8019882:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019886:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801988a:	4330      	orrs	r0, r6
 801988c:	4328      	orrs	r0, r5
 801988e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8019892:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019894:	f10e 0e01 	add.w	lr, lr, #1
 8019898:	4401      	add	r1, r0
 801989a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801989c:	4402      	add	r2, r0
 801989e:	e7db      	b.n	8019858 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80198a0:	b2f0      	uxtb	r0, r6
 80198a2:	2e00      	cmp	r6, #0
 80198a4:	d0f5      	beq.n	8019892 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80198a6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80198aa:	fa1f f980 	uxth.w	r9, r0
 80198ae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80198b2:	43c0      	mvns	r0, r0
 80198b4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80198b8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80198bc:	fb16 f609 	smulbb	r6, r6, r9
 80198c0:	b2c0      	uxtb	r0, r0
 80198c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80198c6:	b2ed      	uxtb	r5, r5
 80198c8:	fb1a fa09 	smulbb	sl, sl, r9
 80198cc:	fb07 6700 	mla	r7, r7, r0, r6
 80198d0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80198d4:	fb15 f509 	smulbb	r5, r5, r9
 80198d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80198dc:	b2bf      	uxth	r7, r7
 80198de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80198e2:	fa5f fc8c 	uxtb.w	ip, ip
 80198e6:	fb06 a600 	mla	r6, r6, r0, sl
 80198ea:	fb0c 5500 	mla	r5, ip, r0, r5
 80198ee:	1c78      	adds	r0, r7, #1
 80198f0:	b2b6      	uxth	r6, r6
 80198f2:	b2ad      	uxth	r5, r5
 80198f4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80198f8:	f105 0a01 	add.w	sl, r5, #1
 80198fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019900:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019904:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019908:	ea4a 0707 	orr.w	r7, sl, r7
 801990c:	f106 0a01 	add.w	sl, r6, #1
 8019910:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019914:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019918:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801991c:	ea47 070a 	orr.w	r7, r7, sl
 8019920:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8019924:	e7b5      	b.n	8019892 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019926:	b005      	add	sp, #20
 8019928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992c:	fffff800 	.word	0xfffff800

08019930 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019934:	b087      	sub	sp, #28
 8019936:	468b      	mov	fp, r1
 8019938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801993c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801993e:	9203      	str	r2, [sp, #12]
 8019940:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019944:	6841      	ldr	r1, [r0, #4]
 8019946:	9204      	str	r2, [sp, #16]
 8019948:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801994c:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019950:	fb01 2404 	mla	r4, r1, r4, r2
 8019954:	6802      	ldr	r2, [r0, #0]
 8019956:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801995a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801995e:	3201      	adds	r2, #1
 8019960:	f022 0201 	bic.w	r2, r2, #1
 8019964:	9200      	str	r2, [sp, #0]
 8019966:	f8d9 2000 	ldr.w	r2, [r9]
 801996a:	9201      	str	r2, [sp, #4]
 801996c:	f1bb 0f00 	cmp.w	fp, #0
 8019970:	dc03      	bgt.n	801997a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019972:	9a03      	ldr	r2, [sp, #12]
 8019974:	2a00      	cmp	r2, #0
 8019976:	f340 816a 	ble.w	8019c4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801997a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801997c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019980:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019984:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019986:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801998a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801998e:	2b00      	cmp	r3, #0
 8019990:	dd0e      	ble.n	80199b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019992:	1402      	asrs	r2, r0, #16
 8019994:	d405      	bmi.n	80199a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019996:	42ba      	cmp	r2, r7
 8019998:	da03      	bge.n	80199a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801999a:	140a      	asrs	r2, r1, #16
 801999c:	d401      	bmi.n	80199a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801999e:	42b2      	cmp	r2, r6
 80199a0:	db07      	blt.n	80199b2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80199a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80199a4:	3b01      	subs	r3, #1
 80199a6:	3402      	adds	r4, #2
 80199a8:	4410      	add	r0, r2
 80199aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80199ac:	4411      	add	r1, r2
 80199ae:	e7ee      	b.n	801998e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80199b0:	d017      	beq.n	80199e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80199b2:	1e5a      	subs	r2, r3, #1
 80199b4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80199b6:	fb05 0502 	mla	r5, r5, r2, r0
 80199ba:	142d      	asrs	r5, r5, #16
 80199bc:	d409      	bmi.n	80199d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80199be:	42bd      	cmp	r5, r7
 80199c0:	da07      	bge.n	80199d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80199c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80199c4:	fb05 1202 	mla	r2, r5, r2, r1
 80199c8:	1412      	asrs	r2, r2, #16
 80199ca:	d402      	bmi.n	80199d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80199cc:	42b2      	cmp	r2, r6
 80199ce:	f2c0 80c8 	blt.w	8019b62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80199d2:	2700      	movs	r7, #0
 80199d4:	19da      	adds	r2, r3, r7
 80199d6:	2a00      	cmp	r2, #0
 80199d8:	dc3e      	bgt.n	8019a58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80199da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80199de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80199e2:	f1bb 0f00 	cmp.w	fp, #0
 80199e6:	f340 8132 	ble.w	8019c4e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80199ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80199ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80199f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80199f4:	f1bb 0b01 	subs.w	fp, fp, #1
 80199f8:	eeb0 6a62 	vmov.f32	s12, s5
 80199fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019a00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a08:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019a0c:	eeb0 6a43 	vmov.f32	s12, s6
 8019a10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019a14:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019a18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019a28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019a2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019a30:	ee12 2a90 	vmov	r2, s5
 8019a34:	eef0 2a47 	vmov.f32	s5, s14
 8019a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a3c:	ee13 2a10 	vmov	r2, s6
 8019a40:	9313      	str	r3, [sp, #76]	; 0x4c
 8019a42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a44:	eeb0 3a67 	vmov.f32	s6, s15
 8019a48:	fb92 f3f3 	sdiv	r3, r2, r3
 8019a4c:	9a03      	ldr	r2, [sp, #12]
 8019a4e:	9314      	str	r3, [sp, #80]	; 0x50
 8019a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019a52:	bf08      	it	eq
 8019a54:	4613      	moveq	r3, r2
 8019a56:	e789      	b.n	801996c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019a58:	1405      	asrs	r5, r0, #16
 8019a5a:	d436      	bmi.n	8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019a5c:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019a60:	42aa      	cmp	r2, r5
 8019a62:	dd32      	ble.n	8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019a64:	140e      	asrs	r6, r1, #16
 8019a66:	d430      	bmi.n	8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019a68:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019a6c:	42b2      	cmp	r2, r6
 8019a6e:	dd2c      	ble.n	8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019a70:	9a00      	ldr	r2, [sp, #0]
 8019a72:	fb06 5502 	mla	r5, r6, r2, r5
 8019a76:	9e01      	ldr	r6, [sp, #4]
 8019a78:	086a      	lsrs	r2, r5, #1
 8019a7a:	5cb2      	ldrb	r2, [r6, r2]
 8019a7c:	07ee      	lsls	r6, r5, #31
 8019a7e:	bf54      	ite	pl
 8019a80:	f002 020f 	andpl.w	r2, r2, #15
 8019a84:	1112      	asrmi	r2, r2, #4
 8019a86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019a8a:	b2d2      	uxtb	r2, r2
 8019a8c:	b1ea      	cbz	r2, 8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019a8e:	9d04      	ldr	r5, [sp, #16]
 8019a90:	436a      	muls	r2, r5
 8019a92:	1c55      	adds	r5, r2, #1
 8019a94:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019a98:	4d6e      	ldr	r5, [pc, #440]	; (8019c54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019a9a:	1212      	asrs	r2, r2, #8
 8019a9c:	682d      	ldr	r5, [r5, #0]
 8019a9e:	2aff      	cmp	r2, #255	; 0xff
 8019aa0:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8019aa4:	9605      	str	r6, [sp, #20]
 8019aa6:	d116      	bne.n	8019ad6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019aa8:	f06f 0201 	mvn.w	r2, #1
 8019aac:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019ab0:	fb02 fc07 	mul.w	ip, r2, r7
 8019ab4:	096a      	lsrs	r2, r5, #5
 8019ab6:	f026 0607 	bic.w	r6, r6, #7
 8019aba:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019abe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019ac2:	4316      	orrs	r6, r2
 8019ac4:	432e      	orrs	r6, r5
 8019ac6:	f824 600c 	strh.w	r6, [r4, ip]
 8019aca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019acc:	3f01      	subs	r7, #1
 8019ace:	4410      	add	r0, r2
 8019ad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ad2:	4411      	add	r1, r2
 8019ad4:	e77e      	b.n	80199d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019ad6:	f06f 0601 	mvn.w	r6, #1
 8019ada:	fa1f fa82 	uxth.w	sl, r2
 8019ade:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8019ae2:	43d2      	mvns	r2, r2
 8019ae4:	437e      	muls	r6, r7
 8019ae6:	b2ed      	uxtb	r5, r5
 8019ae8:	fb1c fc0a 	smulbb	ip, ip, sl
 8019aec:	b2d2      	uxtb	r2, r2
 8019aee:	f834 8006 	ldrh.w	r8, [r4, r6]
 8019af2:	fb15 f50a 	smulbb	r5, r5, sl
 8019af6:	9602      	str	r6, [sp, #8]
 8019af8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019afc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019b00:	fb16 f60a 	smulbb	r6, r6, sl
 8019b04:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019b08:	fb0e ce02 	mla	lr, lr, r2, ip
 8019b0c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019b10:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019b14:	fa1f fe8e 	uxth.w	lr, lr
 8019b18:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019b1c:	fa5f f888 	uxtb.w	r8, r8
 8019b20:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019b24:	fb08 5502 	mla	r5, r8, r2, r5
 8019b28:	f10e 0201 	add.w	r2, lr, #1
 8019b2c:	fa1f fc8c 	uxth.w	ip, ip
 8019b30:	b2ad      	uxth	r5, r5
 8019b32:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019b36:	9a02      	ldr	r2, [sp, #8]
 8019b38:	1c6e      	adds	r6, r5, #1
 8019b3a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019b3e:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8019b42:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019b46:	ea46 0e0e 	orr.w	lr, r6, lr
 8019b4a:	f10c 0601 	add.w	r6, ip, #1
 8019b4e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019b52:	0976      	lsrs	r6, r6, #5
 8019b54:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019b58:	ea4e 0e06 	orr.w	lr, lr, r6
 8019b5c:	f824 e002 	strh.w	lr, [r4, r2]
 8019b60:	e7b3      	b.n	8019aca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b62:	f04f 0800 	mov.w	r8, #0
 8019b66:	eba3 0208 	sub.w	r2, r3, r8
 8019b6a:	2a00      	cmp	r2, #0
 8019b6c:	f77f af35 	ble.w	80199da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019b70:	1402      	asrs	r2, r0, #16
 8019b72:	9e00      	ldr	r6, [sp, #0]
 8019b74:	140d      	asrs	r5, r1, #16
 8019b76:	fb06 2505 	mla	r5, r6, r5, r2
 8019b7a:	9e01      	ldr	r6, [sp, #4]
 8019b7c:	086a      	lsrs	r2, r5, #1
 8019b7e:	07ed      	lsls	r5, r5, #31
 8019b80:	5cb2      	ldrb	r2, [r6, r2]
 8019b82:	bf54      	ite	pl
 8019b84:	f002 020f 	andpl.w	r2, r2, #15
 8019b88:	1112      	asrmi	r2, r2, #4
 8019b8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019b8e:	b2d2      	uxtb	r2, r2
 8019b90:	b1c2      	cbz	r2, 8019bc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019b92:	9d04      	ldr	r5, [sp, #16]
 8019b94:	436a      	muls	r2, r5
 8019b96:	1c55      	adds	r5, r2, #1
 8019b98:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019b9c:	4d2d      	ldr	r5, [pc, #180]	; (8019c54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019b9e:	1212      	asrs	r2, r2, #8
 8019ba0:	682e      	ldr	r6, [r5, #0]
 8019ba2:	2aff      	cmp	r2, #255	; 0xff
 8019ba4:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8019ba8:	d113      	bne.n	8019bd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019baa:	0972      	lsrs	r2, r6, #5
 8019bac:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8019bb0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019bb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019bb8:	f025 0507 	bic.w	r5, r5, #7
 8019bbc:	4315      	orrs	r5, r2
 8019bbe:	4335      	orrs	r5, r6
 8019bc0:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8019bc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019bc6:	f108 0801 	add.w	r8, r8, #1
 8019bca:	4410      	add	r0, r2
 8019bcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019bce:	4411      	add	r1, r2
 8019bd0:	e7c9      	b.n	8019b66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8019bd2:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019bd6:	fa1f fa82 	uxth.w	sl, r2
 8019bda:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8019bde:	43d2      	mvns	r2, r2
 8019be0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019be4:	fb17 f70a 	smulbb	r7, r7, sl
 8019be8:	b2d2      	uxtb	r2, r2
 8019bea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019bee:	b2f6      	uxtb	r6, r6
 8019bf0:	b2ed      	uxtb	r5, r5
 8019bf2:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019bf6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019bfa:	fb16 f60a 	smulbb	r6, r6, sl
 8019bfe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019c02:	fa1f fc8c 	uxth.w	ip, ip
 8019c06:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019c0a:	fb15 f50a 	smulbb	r5, r5, sl
 8019c0e:	fa5f fe8e 	uxtb.w	lr, lr
 8019c12:	fb0e 6602 	mla	r6, lr, r2, r6
 8019c16:	fb07 5702 	mla	r7, r7, r2, r5
 8019c1a:	f10c 0201 	add.w	r2, ip, #1
 8019c1e:	b2b6      	uxth	r6, r6
 8019c20:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019c24:	1c75      	adds	r5, r6, #1
 8019c26:	b2bf      	uxth	r7, r7
 8019c28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019c2c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8019c30:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019c34:	ea45 0c0c 	orr.w	ip, r5, ip
 8019c38:	1c7d      	adds	r5, r7, #1
 8019c3a:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8019c3e:	096d      	lsrs	r5, r5, #5
 8019c40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019c44:	ea4c 0c05 	orr.w	ip, ip, r5
 8019c48:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8019c4c:	e7ba      	b.n	8019bc4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019c4e:	b007      	add	sp, #28
 8019c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c54:	2400ae7c 	.word	0x2400ae7c

08019c58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c5c:	b087      	sub	sp, #28
 8019c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c62:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8019f6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8019c66:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019c68:	9101      	str	r1, [sp, #4]
 8019c6a:	9205      	str	r2, [sp, #20]
 8019c6c:	6841      	ldr	r1, [r0, #4]
 8019c6e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019c72:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019c76:	fb01 2404 	mla	r4, r1, r4, r2
 8019c7a:	6802      	ldr	r2, [r0, #0]
 8019c7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019c80:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019c84:	3201      	adds	r2, #1
 8019c86:	f022 0201 	bic.w	r2, r2, #1
 8019c8a:	9202      	str	r2, [sp, #8]
 8019c8c:	f8db 2000 	ldr.w	r2, [fp]
 8019c90:	9203      	str	r2, [sp, #12]
 8019c92:	9a01      	ldr	r2, [sp, #4]
 8019c94:	2a00      	cmp	r2, #0
 8019c96:	dc03      	bgt.n	8019ca0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019c98:	9a05      	ldr	r2, [sp, #20]
 8019c9a:	2a00      	cmp	r2, #0
 8019c9c:	f340 8162 	ble.w	8019f64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019ca0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ca2:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8019ca6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019caa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019cac:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8019cb0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	dd0e      	ble.n	8019cd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019cb8:	1402      	asrs	r2, r0, #16
 8019cba:	d405      	bmi.n	8019cc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019cbc:	42ba      	cmp	r2, r7
 8019cbe:	da03      	bge.n	8019cc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019cc0:	140a      	asrs	r2, r1, #16
 8019cc2:	d401      	bmi.n	8019cc8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019cc4:	42b2      	cmp	r2, r6
 8019cc6:	db07      	blt.n	8019cd8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019cca:	3b01      	subs	r3, #1
 8019ccc:	3402      	adds	r4, #2
 8019cce:	4410      	add	r0, r2
 8019cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019cd2:	4411      	add	r1, r2
 8019cd4:	e7ee      	b.n	8019cb4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019cd6:	d017      	beq.n	8019d08 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019cd8:	1e5a      	subs	r2, r3, #1
 8019cda:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019cdc:	fb05 0502 	mla	r5, r5, r2, r0
 8019ce0:	142d      	asrs	r5, r5, #16
 8019ce2:	d409      	bmi.n	8019cf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019ce4:	42bd      	cmp	r5, r7
 8019ce6:	da07      	bge.n	8019cf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019ce8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019cea:	fb05 1202 	mla	r2, r5, r2, r1
 8019cee:	1412      	asrs	r2, r2, #16
 8019cf0:	d402      	bmi.n	8019cf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019cf2:	42b2      	cmp	r2, r6
 8019cf4:	f2c0 80c3 	blt.w	8019e7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019cf8:	2500      	movs	r5, #0
 8019cfa:	195a      	adds	r2, r3, r5
 8019cfc:	2a00      	cmp	r2, #0
 8019cfe:	dc3f      	bgt.n	8019d80 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019d00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019d08:	9b01      	ldr	r3, [sp, #4]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	f340 812a 	ble.w	8019f64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019d10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d1a:	eeb0 6a62 	vmov.f32	s12, s5
 8019d1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019d22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d2a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019d2e:	eeb0 6a43 	vmov.f32	s12, s6
 8019d32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d36:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019d3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d52:	ee12 2a90 	vmov	r2, s5
 8019d56:	eef0 2a47 	vmov.f32	s5, s14
 8019d5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d5e:	ee13 2a10 	vmov	r2, s6
 8019d62:	9313      	str	r3, [sp, #76]	; 0x4c
 8019d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d66:	eeb0 3a67 	vmov.f32	s6, s15
 8019d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d6e:	9314      	str	r3, [sp, #80]	; 0x50
 8019d70:	9b01      	ldr	r3, [sp, #4]
 8019d72:	9a05      	ldr	r2, [sp, #20]
 8019d74:	3b01      	subs	r3, #1
 8019d76:	9301      	str	r3, [sp, #4]
 8019d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d7a:	bf08      	it	eq
 8019d7c:	4613      	moveq	r3, r2
 8019d7e:	e788      	b.n	8019c92 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019d80:	1406      	asrs	r6, r0, #16
 8019d82:	d42c      	bmi.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019d84:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019d88:	42b2      	cmp	r2, r6
 8019d8a:	dd28      	ble.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019d8c:	140f      	asrs	r7, r1, #16
 8019d8e:	d426      	bmi.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019d90:	f8db 200c 	ldr.w	r2, [fp, #12]
 8019d94:	42ba      	cmp	r2, r7
 8019d96:	dd22      	ble.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019d98:	9a02      	ldr	r2, [sp, #8]
 8019d9a:	fb07 6602 	mla	r6, r7, r2, r6
 8019d9e:	9f03      	ldr	r7, [sp, #12]
 8019da0:	0872      	lsrs	r2, r6, #1
 8019da2:	07f6      	lsls	r6, r6, #31
 8019da4:	5cba      	ldrb	r2, [r7, r2]
 8019da6:	bf54      	ite	pl
 8019da8:	f002 020f 	andpl.w	r2, r2, #15
 8019dac:	1112      	asrmi	r2, r2, #4
 8019dae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019db2:	b2d2      	uxtb	r2, r2
 8019db4:	2aff      	cmp	r2, #255	; 0xff
 8019db6:	d118      	bne.n	8019dea <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019db8:	f06f 0601 	mvn.w	r6, #1
 8019dbc:	f8d8 2000 	ldr.w	r2, [r8]
 8019dc0:	fb06 f705 	mul.w	r7, r6, r5
 8019dc4:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8019dc8:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019dcc:	0956      	lsrs	r6, r2, #5
 8019dce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019dd2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019dd6:	ea4c 0606 	orr.w	r6, ip, r6
 8019dda:	4316      	orrs	r6, r2
 8019ddc:	53e6      	strh	r6, [r4, r7]
 8019dde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019de0:	3d01      	subs	r5, #1
 8019de2:	4410      	add	r0, r2
 8019de4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019de6:	4411      	add	r1, r2
 8019de8:	e787      	b.n	8019cfa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019dea:	2a00      	cmp	r2, #0
 8019dec:	d0f7      	beq.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019dee:	f06f 0601 	mvn.w	r6, #1
 8019df2:	f8d8 c000 	ldr.w	ip, [r8]
 8019df6:	fa1f f982 	uxth.w	r9, r2
 8019dfa:	43d2      	mvns	r2, r2
 8019dfc:	436e      	muls	r6, r5
 8019dfe:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8019e02:	b2d2      	uxtb	r2, r2
 8019e04:	f834 e006 	ldrh.w	lr, [r4, r6]
 8019e08:	fb1a fa09 	smulbb	sl, sl, r9
 8019e0c:	9604      	str	r6, [sp, #16]
 8019e0e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8019e12:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019e16:	fb16 f609 	smulbb	r6, r6, r9
 8019e1a:	fa5f fc8c 	uxtb.w	ip, ip
 8019e1e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019e22:	fb1c fc09 	smulbb	ip, ip, r9
 8019e26:	fb07 6702 	mla	r7, r7, r2, r6
 8019e2a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019e2e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019e32:	b2bf      	uxth	r7, r7
 8019e34:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019e38:	fa5f fe8e 	uxtb.w	lr, lr
 8019e3c:	fb06 a602 	mla	r6, r6, r2, sl
 8019e40:	fb0e cc02 	mla	ip, lr, r2, ip
 8019e44:	1c7a      	adds	r2, r7, #1
 8019e46:	b2b6      	uxth	r6, r6
 8019e48:	fa1f fc8c 	uxth.w	ip, ip
 8019e4c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019e50:	9a04      	ldr	r2, [sp, #16]
 8019e52:	f10c 0a01 	add.w	sl, ip, #1
 8019e56:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e5a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019e5e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019e62:	ea4a 0707 	orr.w	r7, sl, r7
 8019e66:	f106 0a01 	add.w	sl, r6, #1
 8019e6a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019e6e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019e72:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019e76:	ea47 070a 	orr.w	r7, r7, sl
 8019e7a:	52a7      	strh	r7, [r4, r2]
 8019e7c:	e7af      	b.n	8019dde <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019e7e:	f04f 0e00 	mov.w	lr, #0
 8019e82:	eba3 020e 	sub.w	r2, r3, lr
 8019e86:	2a00      	cmp	r2, #0
 8019e88:	f77f af3a 	ble.w	8019d00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019e8c:	1402      	asrs	r2, r0, #16
 8019e8e:	9e02      	ldr	r6, [sp, #8]
 8019e90:	140d      	asrs	r5, r1, #16
 8019e92:	fb06 2505 	mla	r5, r6, r5, r2
 8019e96:	9e03      	ldr	r6, [sp, #12]
 8019e98:	086a      	lsrs	r2, r5, #1
 8019e9a:	07ed      	lsls	r5, r5, #31
 8019e9c:	5cb2      	ldrb	r2, [r6, r2]
 8019e9e:	bf54      	ite	pl
 8019ea0:	f002 020f 	andpl.w	r2, r2, #15
 8019ea4:	1112      	asrmi	r2, r2, #4
 8019ea6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019eaa:	b2d2      	uxtb	r2, r2
 8019eac:	2aff      	cmp	r2, #255	; 0xff
 8019eae:	d115      	bne.n	8019edc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019eb0:	f8d8 5000 	ldr.w	r5, [r8]
 8019eb4:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8019eb8:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019ebc:	096a      	lsrs	r2, r5, #5
 8019ebe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019ec2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019ec6:	4332      	orrs	r2, r6
 8019ec8:	432a      	orrs	r2, r5
 8019eca:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019ece:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019ed0:	f10e 0e01 	add.w	lr, lr, #1
 8019ed4:	4410      	add	r0, r2
 8019ed6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ed8:	4411      	add	r1, r2
 8019eda:	e7d2      	b.n	8019e82 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019edc:	2a00      	cmp	r2, #0
 8019ede:	d0f6      	beq.n	8019ece <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019ee0:	f8d8 7000 	ldr.w	r7, [r8]
 8019ee4:	fa1f f982 	uxth.w	r9, r2
 8019ee8:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019eec:	43d2      	mvns	r2, r2
 8019eee:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8019ef2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019ef6:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019efa:	fb15 f509 	smulbb	r5, r5, r9
 8019efe:	b2d2      	uxtb	r2, r2
 8019f00:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019f04:	b2ff      	uxtb	r7, r7
 8019f06:	fb1a fa09 	smulbb	sl, sl, r9
 8019f0a:	fb06 5602 	mla	r6, r6, r2, r5
 8019f0e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019f12:	fb17 f709 	smulbb	r7, r7, r9
 8019f16:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019f1a:	b2b6      	uxth	r6, r6
 8019f1c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019f20:	fa5f fc8c 	uxtb.w	ip, ip
 8019f24:	fb05 a502 	mla	r5, r5, r2, sl
 8019f28:	fb0c 7702 	mla	r7, ip, r2, r7
 8019f2c:	1c72      	adds	r2, r6, #1
 8019f2e:	b2ad      	uxth	r5, r5
 8019f30:	b2bf      	uxth	r7, r7
 8019f32:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8019f36:	f107 0a01 	add.w	sl, r7, #1
 8019f3a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019f3e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8019f42:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019f46:	ea4a 0606 	orr.w	r6, sl, r6
 8019f4a:	f105 0a01 	add.w	sl, r5, #1
 8019f4e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8019f52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019f56:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019f5a:	ea46 060a 	orr.w	r6, r6, sl
 8019f5e:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8019f62:	e7b4      	b.n	8019ece <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019f64:	b007      	add	sp, #28
 8019f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f6a:	bf00      	nop
 8019f6c:	2400ae7c 	.word	0x2400ae7c

08019f70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019f70:	4770      	bx	lr

08019f72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019f72:	4770      	bx	lr

08019f74 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019f74:	4770      	bx	lr

08019f76 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8019f76:	4770      	bx	lr

08019f78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019f78:	4770      	bx	lr

08019f7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019f7a:	4770      	bx	lr

08019f7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019f7c:	4770      	bx	lr

08019f7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019f7e:	4770      	bx	lr

08019f80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019f80:	4770      	bx	lr

08019f82 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019f82:	4770      	bx	lr

08019f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019f84:	4770      	bx	lr

08019f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019f86:	4770      	bx	lr

08019f88 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019f88:	4770      	bx	lr

08019f8a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019f8a:	4770      	bx	lr

08019f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019f8c:	4770      	bx	lr

08019f8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019f8e:	4770      	bx	lr

08019f90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8019f90:	4770      	bx	lr

08019f92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8019f92:	4770      	bx	lr

08019f94 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8019f94:	4770      	bx	lr

08019f96 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019f96:	4770      	bx	lr

08019f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019f98:	4770      	bx	lr

08019f9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019f9a:	4770      	bx	lr

08019f9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019f9c:	4770      	bx	lr

08019f9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019f9e:	4770      	bx	lr

08019fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019fa0:	4770      	bx	lr

08019fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8019fa2:	4770      	bx	lr

08019fa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019fa4:	4770      	bx	lr

08019fa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8019fa6:	4770      	bx	lr

08019fa8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fac:	b088      	sub	sp, #32
 8019fae:	4606      	mov	r6, r0
 8019fb0:	4688      	mov	r8, r1
 8019fb2:	4691      	mov	r9, r2
 8019fb4:	ac08      	add	r4, sp, #32
 8019fb6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019fba:	4620      	mov	r0, r4
 8019fbc:	f7fd fc66 	bl	801788c <_ZNK8touchgfx6Bitmap7getDataEv>
 8019fc0:	6833      	ldr	r3, [r6, #0]
 8019fc2:	4605      	mov	r5, r0
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	699f      	ldr	r7, [r3, #24]
 8019fc8:	f7fd fb74 	bl	80176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019fcc:	4682      	mov	sl, r0
 8019fce:	4620      	mov	r0, r4
 8019fd0:	f7fd fba4 	bl	801771c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019fd4:	9500      	str	r5, [sp, #0]
 8019fd6:	464b      	mov	r3, r9
 8019fd8:	4642      	mov	r2, r8
 8019fda:	4631      	mov	r1, r6
 8019fdc:	e9cd a001 	strd	sl, r0, [sp, #4]
 8019fe0:	a806      	add	r0, sp, #24
 8019fe2:	47b8      	blx	r7
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	b008      	add	sp, #32
 8019fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019fec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	9300      	str	r3, [sp, #0]
 8019ff4:	4b3d      	ldr	r3, [pc, #244]	; (801a0ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d137      	bne.n	801a06c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8019ffc:	4a3c      	ldr	r2, [pc, #240]	; (801a0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8019ffe:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a002:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d132      	bne.n	801a070 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801a00a:	4b3a      	ldr	r3, [pc, #232]	; (801a0f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a00c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a010:	ac02      	add	r4, sp, #8
 801a012:	6808      	ldr	r0, [r1, #0]
 801a014:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a018:	ab02      	add	r3, sp, #8
 801a01a:	6849      	ldr	r1, [r1, #4]
 801a01c:	4d36      	ldr	r5, [pc, #216]	; (801a0f8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801a01e:	c303      	stmia	r3!, {r0, r1}
 801a020:	4669      	mov	r1, sp
 801a022:	4620      	mov	r0, r4
 801a024:	f7fa fde2 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a028:	4668      	mov	r0, sp
 801a02a:	f7fa fdb7 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a02e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a032:	f8bd 2000 	ldrh.w	r2, [sp]
 801a036:	462f      	mov	r7, r5
 801a038:	6828      	ldr	r0, [r5, #0]
 801a03a:	4413      	add	r3, r2
 801a03c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a040:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a044:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a048:	4413      	add	r3, r2
 801a04a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a04e:	6803      	ldr	r3, [r0, #0]
 801a050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a052:	4798      	blx	r3
 801a054:	f010 0f01 	tst.w	r0, #1
 801a058:	d00c      	beq.n	801a074 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801a05a:	6828      	ldr	r0, [r5, #0]
 801a05c:	6803      	ldr	r3, [r0, #0]
 801a05e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a064:	4798      	blx	r3
 801a066:	b004      	add	sp, #16
 801a068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a06c:	4a21      	ldr	r2, [pc, #132]	; (801a0f4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a06e:	e7c6      	b.n	8019ffe <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a070:	4b1f      	ldr	r3, [pc, #124]	; (801a0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a072:	e7cb      	b.n	801a00c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a074:	6838      	ldr	r0, [r7, #0]
 801a076:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801a07a:	6803      	ldr	r3, [r0, #0]
 801a07c:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801a080:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a086:	4798      	blx	r3
 801a088:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a08c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a090:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801a094:	fb16 3602 	smlabb	r6, r6, r2, r3
 801a098:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a09c:	6838      	ldr	r0, [r7, #0]
 801a09e:	6803      	ldr	r3, [r0, #0]
 801a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0a2:	4798      	blx	r3
 801a0a4:	4a12      	ldr	r2, [pc, #72]	; (801a0f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a0a6:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801a0aa:	8813      	ldrh	r3, [r2, #0]
 801a0ac:	4691      	mov	r9, r2
 801a0ae:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a0b2:	435d      	muls	r5, r3
 801a0b4:	fb03 1404 	mla	r4, r3, r4, r1
 801a0b8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a0bc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a0c0:	6838      	ldr	r0, [r7, #0]
 801a0c2:	42ac      	cmp	r4, r5
 801a0c4:	6803      	ldr	r3, [r0, #0]
 801a0c6:	d20e      	bcs.n	801a0e6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801a0c8:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801a0cc:	4632      	mov	r2, r6
 801a0ce:	4643      	mov	r3, r8
 801a0d0:	4621      	mov	r1, r4
 801a0d2:	47d0      	blx	sl
 801a0d4:	f8b9 3000 	ldrh.w	r3, [r9]
 801a0d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a0dc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a0e0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a0e4:	e7ec      	b.n	801a0c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0e8:	4798      	blx	r3
 801a0ea:	e7bc      	b.n	801a066 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a0ec:	2400ae6c 	.word	0x2400ae6c
 801a0f0:	2400ae6e 	.word	0x2400ae6e
 801a0f4:	2400ae70 	.word	0x2400ae70
 801a0f8:	2400ae74 	.word	0x2400ae74

0801a0fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a100:	b08b      	sub	sp, #44	; 0x2c
 801a102:	460f      	mov	r7, r1
 801a104:	4616      	mov	r6, r2
 801a106:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801a10a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801a10e:	f1bb 0f00 	cmp.w	fp, #0
 801a112:	d049      	beq.n	801a1a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a114:	6810      	ldr	r0, [r2, #0]
 801a116:	ad06      	add	r5, sp, #24
 801a118:	6851      	ldr	r1, [r2, #4]
 801a11a:	c503      	stmia	r5!, {r0, r1}
 801a11c:	6818      	ldr	r0, [r3, #0]
 801a11e:	ad08      	add	r5, sp, #32
 801a120:	6859      	ldr	r1, [r3, #4]
 801a122:	c503      	stmia	r5!, {r0, r1}
 801a124:	a806      	add	r0, sp, #24
 801a126:	f7fa fd39 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a12a:	4631      	mov	r1, r6
 801a12c:	a808      	add	r0, sp, #32
 801a12e:	f7fa fd5d 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a132:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a136:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a13a:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a13e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801a142:	fb16 2103 	smlabb	r1, r6, r3, r2
 801a146:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801a14a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801a14e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a152:	4f5f      	ldr	r7, [pc, #380]	; (801a2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a154:	440a      	add	r2, r1
 801a156:	6838      	ldr	r0, [r7, #0]
 801a158:	46b9      	mov	r9, r7
 801a15a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a15e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a162:	4413      	add	r3, r2
 801a164:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a168:	6803      	ldr	r3, [r0, #0]
 801a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a16c:	4798      	blx	r3
 801a16e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a172:	d01c      	beq.n	801a1ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801a174:	f010 0f04 	tst.w	r0, #4
 801a178:	d01d      	beq.n	801a1b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a17a:	f8d9 0000 	ldr.w	r0, [r9]
 801a17e:	2700      	movs	r7, #0
 801a180:	b2ad      	uxth	r5, r5
 801a182:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a186:	6801      	ldr	r1, [r0, #0]
 801a188:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a18c:	f8cd b00c 	str.w	fp, [sp, #12]
 801a190:	9501      	str	r5, [sp, #4]
 801a192:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801a196:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801a19a:	9402      	str	r4, [sp, #8]
 801a19c:	fa1f f488 	uxth.w	r4, r8
 801a1a0:	9400      	str	r4, [sp, #0]
 801a1a2:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801a1a4:	4631      	mov	r1, r6
 801a1a6:	47a0      	blx	r4
 801a1a8:	b00b      	add	sp, #44	; 0x2c
 801a1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ae:	b914      	cbnz	r4, 801a1b6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a1b0:	f010 0f01 	tst.w	r0, #1
 801a1b4:	e7e0      	b.n	801a178 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801a1b6:	f8d9 0000 	ldr.w	r0, [r9]
 801a1ba:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801a1be:	6803      	ldr	r3, [r0, #0]
 801a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1c2:	4798      	blx	r3
 801a1c4:	4b43      	ldr	r3, [pc, #268]	; (801a2d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801a1c6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801a1ca:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a1ce:	881a      	ldrh	r2, [r3, #0]
 801a1d0:	469a      	mov	sl, r3
 801a1d2:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a1d6:	fb05 f502 	mul.w	r5, r5, r2
 801a1da:	fb02 1404 	mla	r4, r2, r4, r1
 801a1de:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a1e2:	d059      	beq.n	801a298 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801a1e4:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801a1e8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a1ec:	fa1f f28b 	uxth.w	r2, fp
 801a1f0:	469e      	mov	lr, r3
 801a1f2:	fa1f f989 	uxth.w	r9, r9
 801a1f6:	42ac      	cmp	r4, r5
 801a1f8:	d264      	bcs.n	801a2c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a1fa:	eb04 0a07 	add.w	sl, r4, r7
 801a1fe:	4554      	cmp	r4, sl
 801a200:	d23d      	bcs.n	801a27e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801a202:	8821      	ldrh	r1, [r4, #0]
 801a204:	f836 3b02 	ldrh.w	r3, [r6], #2
 801a208:	1208      	asrs	r0, r1, #8
 801a20a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a20e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a212:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801a216:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a21a:	00c9      	lsls	r1, r1, #3
 801a21c:	fb10 f009 	smulbb	r0, r0, r9
 801a220:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a224:	b2c9      	uxtb	r1, r1
 801a226:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a22a:	10d8      	asrs	r0, r3, #3
 801a22c:	fb1b fb09 	smulbb	fp, fp, r9
 801a230:	00db      	lsls	r3, r3, #3
 801a232:	fa1f fc8c 	uxth.w	ip, ip
 801a236:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a23a:	fb11 f109 	smulbb	r1, r1, r9
 801a23e:	b2db      	uxtb	r3, r3
 801a240:	fb00 b002 	mla	r0, r0, r2, fp
 801a244:	f10c 0b01 	add.w	fp, ip, #1
 801a248:	fb03 1302 	mla	r3, r3, r2, r1
 801a24c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a250:	b29b      	uxth	r3, r3
 801a252:	b280      	uxth	r0, r0
 801a254:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801a258:	f103 0c01 	add.w	ip, r3, #1
 801a25c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a260:	1c43      	adds	r3, r0, #1
 801a262:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a266:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a26a:	0940      	lsrs	r0, r0, #5
 801a26c:	ea4c 0c0b 	orr.w	ip, ip, fp
 801a270:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a274:	ea4c 0c00 	orr.w	ip, ip, r0
 801a278:	f824 cb02 	strh.w	ip, [r4], #2
 801a27c:	e7bf      	b.n	801a1fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801a27e:	f8be 3000 	ldrh.w	r3, [lr]
 801a282:	eba3 0308 	sub.w	r3, r3, r8
 801a286:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a28a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a28e:	eba3 0308 	sub.w	r3, r3, r8
 801a292:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a296:	e7ae      	b.n	801a1f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801a298:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a29c:	f8d9 0000 	ldr.w	r0, [r9]
 801a2a0:	42ac      	cmp	r4, r5
 801a2a2:	6803      	ldr	r3, [r0, #0]
 801a2a4:	d20e      	bcs.n	801a2c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a2a6:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801a2aa:	4632      	mov	r2, r6
 801a2ac:	463b      	mov	r3, r7
 801a2ae:	4621      	mov	r1, r4
 801a2b0:	47c0      	blx	r8
 801a2b2:	f8ba 3000 	ldrh.w	r3, [sl]
 801a2b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a2ba:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a2be:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a2c2:	e7eb      	b.n	801a29c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801a2c4:	4b02      	ldr	r3, [pc, #8]	; (801a2d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a2c6:	6818      	ldr	r0, [r3, #0]
 801a2c8:	6803      	ldr	r3, [r0, #0]
 801a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2cc:	4798      	blx	r3
 801a2ce:	e76b      	b.n	801a1a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a2d0:	2400ae74 	.word	0x2400ae74
 801a2d4:	2400ae6e 	.word	0x2400ae6e

0801a2d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	2104      	movs	r1, #4
 801a2de:	f008 ffc2 	bl	8023266 <_ZdlPvj>
 801a2e2:	4620      	mov	r0, r4
 801a2e4:	bd10      	pop	{r4, pc}

0801a2e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a2e6:	b510      	push	{r4, lr}
 801a2e8:	4604      	mov	r4, r0
 801a2ea:	2104      	movs	r1, #4
 801a2ec:	f008 ffbb 	bl	8023266 <_ZdlPvj>
 801a2f0:	4620      	mov	r0, r4
 801a2f2:	bd10      	pop	{r4, pc}

0801a2f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a2f4:	b510      	push	{r4, lr}
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	2104      	movs	r1, #4
 801a2fa:	f008 ffb4 	bl	8023266 <_ZdlPvj>
 801a2fe:	4620      	mov	r0, r4
 801a300:	bd10      	pop	{r4, pc}

0801a302 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a302:	b510      	push	{r4, lr}
 801a304:	4604      	mov	r4, r0
 801a306:	2104      	movs	r1, #4
 801a308:	f008 ffad 	bl	8023266 <_ZdlPvj>
 801a30c:	4620      	mov	r0, r4
 801a30e:	bd10      	pop	{r4, pc}

0801a310 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a310:	b510      	push	{r4, lr}
 801a312:	4604      	mov	r4, r0
 801a314:	2104      	movs	r1, #4
 801a316:	f008 ffa6 	bl	8023266 <_ZdlPvj>
 801a31a:	4620      	mov	r0, r4
 801a31c:	bd10      	pop	{r4, pc}

0801a31e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a31e:	b510      	push	{r4, lr}
 801a320:	4604      	mov	r4, r0
 801a322:	2104      	movs	r1, #4
 801a324:	f008 ff9f 	bl	8023266 <_ZdlPvj>
 801a328:	4620      	mov	r0, r4
 801a32a:	bd10      	pop	{r4, pc}

0801a32c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a32c:	b510      	push	{r4, lr}
 801a32e:	4604      	mov	r4, r0
 801a330:	2104      	movs	r1, #4
 801a332:	f008 ff98 	bl	8023266 <_ZdlPvj>
 801a336:	4620      	mov	r0, r4
 801a338:	bd10      	pop	{r4, pc}

0801a33a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a33a:	b510      	push	{r4, lr}
 801a33c:	4604      	mov	r4, r0
 801a33e:	2104      	movs	r1, #4
 801a340:	f008 ff91 	bl	8023266 <_ZdlPvj>
 801a344:	4620      	mov	r0, r4
 801a346:	bd10      	pop	{r4, pc}

0801a348 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a348:	b510      	push	{r4, lr}
 801a34a:	4604      	mov	r4, r0
 801a34c:	2104      	movs	r1, #4
 801a34e:	f008 ff8a 	bl	8023266 <_ZdlPvj>
 801a352:	4620      	mov	r0, r4
 801a354:	bd10      	pop	{r4, pc}

0801a356 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a356:	b510      	push	{r4, lr}
 801a358:	4604      	mov	r4, r0
 801a35a:	2104      	movs	r1, #4
 801a35c:	f008 ff83 	bl	8023266 <_ZdlPvj>
 801a360:	4620      	mov	r0, r4
 801a362:	bd10      	pop	{r4, pc}

0801a364 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a364:	b510      	push	{r4, lr}
 801a366:	4604      	mov	r4, r0
 801a368:	2104      	movs	r1, #4
 801a36a:	f008 ff7c 	bl	8023266 <_ZdlPvj>
 801a36e:	4620      	mov	r0, r4
 801a370:	bd10      	pop	{r4, pc}

0801a372 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a372:	b510      	push	{r4, lr}
 801a374:	4604      	mov	r4, r0
 801a376:	2104      	movs	r1, #4
 801a378:	f008 ff75 	bl	8023266 <_ZdlPvj>
 801a37c:	4620      	mov	r0, r4
 801a37e:	bd10      	pop	{r4, pc}

0801a380 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a380:	b510      	push	{r4, lr}
 801a382:	4604      	mov	r4, r0
 801a384:	2104      	movs	r1, #4
 801a386:	f008 ff6e 	bl	8023266 <_ZdlPvj>
 801a38a:	4620      	mov	r0, r4
 801a38c:	bd10      	pop	{r4, pc}

0801a38e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a38e:	b510      	push	{r4, lr}
 801a390:	4604      	mov	r4, r0
 801a392:	2104      	movs	r1, #4
 801a394:	f008 ff67 	bl	8023266 <_ZdlPvj>
 801a398:	4620      	mov	r0, r4
 801a39a:	bd10      	pop	{r4, pc}

0801a39c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a39c:	b510      	push	{r4, lr}
 801a39e:	4604      	mov	r4, r0
 801a3a0:	2104      	movs	r1, #4
 801a3a2:	f008 ff60 	bl	8023266 <_ZdlPvj>
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	bd10      	pop	{r4, pc}

0801a3aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a3aa:	b510      	push	{r4, lr}
 801a3ac:	4604      	mov	r4, r0
 801a3ae:	2104      	movs	r1, #4
 801a3b0:	f008 ff59 	bl	8023266 <_ZdlPvj>
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	bd10      	pop	{r4, pc}

0801a3b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a3b8:	b510      	push	{r4, lr}
 801a3ba:	4604      	mov	r4, r0
 801a3bc:	2104      	movs	r1, #4
 801a3be:	f008 ff52 	bl	8023266 <_ZdlPvj>
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	bd10      	pop	{r4, pc}

0801a3c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a3c6:	b510      	push	{r4, lr}
 801a3c8:	4604      	mov	r4, r0
 801a3ca:	2104      	movs	r1, #4
 801a3cc:	f008 ff4b 	bl	8023266 <_ZdlPvj>
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	bd10      	pop	{r4, pc}

0801a3d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a3d4:	b510      	push	{r4, lr}
 801a3d6:	4604      	mov	r4, r0
 801a3d8:	2104      	movs	r1, #4
 801a3da:	f008 ff44 	bl	8023266 <_ZdlPvj>
 801a3de:	4620      	mov	r0, r4
 801a3e0:	bd10      	pop	{r4, pc}

0801a3e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a3e2:	b510      	push	{r4, lr}
 801a3e4:	4604      	mov	r4, r0
 801a3e6:	2104      	movs	r1, #4
 801a3e8:	f008 ff3d 	bl	8023266 <_ZdlPvj>
 801a3ec:	4620      	mov	r0, r4
 801a3ee:	bd10      	pop	{r4, pc}

0801a3f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a3f0:	b510      	push	{r4, lr}
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	2104      	movs	r1, #4
 801a3f6:	f008 ff36 	bl	8023266 <_ZdlPvj>
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	bd10      	pop	{r4, pc}

0801a3fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a3fe:	b510      	push	{r4, lr}
 801a400:	4604      	mov	r4, r0
 801a402:	2104      	movs	r1, #4
 801a404:	f008 ff2f 	bl	8023266 <_ZdlPvj>
 801a408:	4620      	mov	r0, r4
 801a40a:	bd10      	pop	{r4, pc}

0801a40c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a40c:	b510      	push	{r4, lr}
 801a40e:	4604      	mov	r4, r0
 801a410:	2104      	movs	r1, #4
 801a412:	f008 ff28 	bl	8023266 <_ZdlPvj>
 801a416:	4620      	mov	r0, r4
 801a418:	bd10      	pop	{r4, pc}

0801a41a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a41a:	b510      	push	{r4, lr}
 801a41c:	4604      	mov	r4, r0
 801a41e:	2104      	movs	r1, #4
 801a420:	f008 ff21 	bl	8023266 <_ZdlPvj>
 801a424:	4620      	mov	r0, r4
 801a426:	bd10      	pop	{r4, pc}

0801a428 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a428:	b510      	push	{r4, lr}
 801a42a:	4604      	mov	r4, r0
 801a42c:	2104      	movs	r1, #4
 801a42e:	f008 ff1a 	bl	8023266 <_ZdlPvj>
 801a432:	4620      	mov	r0, r4
 801a434:	bd10      	pop	{r4, pc}

0801a436 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a436:	b510      	push	{r4, lr}
 801a438:	4604      	mov	r4, r0
 801a43a:	2104      	movs	r1, #4
 801a43c:	f008 ff13 	bl	8023266 <_ZdlPvj>
 801a440:	4620      	mov	r0, r4
 801a442:	bd10      	pop	{r4, pc}

0801a444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a444:	b510      	push	{r4, lr}
 801a446:	4604      	mov	r4, r0
 801a448:	2104      	movs	r1, #4
 801a44a:	f008 ff0c 	bl	8023266 <_ZdlPvj>
 801a44e:	4620      	mov	r0, r4
 801a450:	bd10      	pop	{r4, pc}

0801a452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a452:	b510      	push	{r4, lr}
 801a454:	4604      	mov	r4, r0
 801a456:	2104      	movs	r1, #4
 801a458:	f008 ff05 	bl	8023266 <_ZdlPvj>
 801a45c:	4620      	mov	r0, r4
 801a45e:	bd10      	pop	{r4, pc}

0801a460 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a464:	b091      	sub	sp, #68	; 0x44
 801a466:	469b      	mov	fp, r3
 801a468:	4616      	mov	r6, r2
 801a46a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a46e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a476:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801a47a:	4604      	mov	r4, r0
 801a47c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801a480:	4640      	mov	r0, r8
 801a482:	460d      	mov	r5, r1
 801a484:	4659      	mov	r1, fp
 801a486:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a48a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a48e:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801a492:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801a496:	f7f8 fbd3 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 801a49a:	4631      	mov	r1, r6
 801a49c:	4640      	mov	r0, r8
 801a49e:	f7f8 fbcf 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 801a4a2:	4b74      	ldr	r3, [pc, #464]	; (801a674 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801a4a4:	8818      	ldrh	r0, [r3, #0]
 801a4a6:	4b74      	ldr	r3, [pc, #464]	; (801a678 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801a4a8:	b202      	sxth	r2, r0
 801a4aa:	8819      	ldrh	r1, [r3, #0]
 801a4ac:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a4b0:	b20e      	sxth	r6, r1
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	da07      	bge.n	801a4c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801a4b6:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a4ba:	4463      	add	r3, ip
 801a4bc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a4c0:	2300      	movs	r3, #0
 801a4c2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a4c6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a4ca:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a4ce:	1ad2      	subs	r2, r2, r3
 801a4d0:	4594      	cmp	ip, r2
 801a4d2:	bfc4      	itt	gt
 801a4d4:	1ac2      	subgt	r2, r0, r3
 801a4d6:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801a4da:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a4de:	2a00      	cmp	r2, #0
 801a4e0:	da07      	bge.n	801a4f2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801a4e2:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801a4e6:	4462      	add	r2, ip
 801a4e8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a4f2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801a4f6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a4fa:	eba6 060a 	sub.w	r6, r6, sl
 801a4fe:	42b2      	cmp	r2, r6
 801a500:	bfc4      	itt	gt
 801a502:	eba1 020a 	subgt.w	r2, r1, sl
 801a506:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801a50a:	4a5c      	ldr	r2, [pc, #368]	; (801a67c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801a50c:	7812      	ldrb	r2, [r2, #0]
 801a50e:	b9a2      	cbnz	r2, 801a53a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801a510:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801a514:	4286      	cmp	r6, r0
 801a516:	4640      	mov	r0, r8
 801a518:	9303      	str	r3, [sp, #12]
 801a51a:	bf14      	ite	ne
 801a51c:	2600      	movne	r6, #0
 801a51e:	2601      	moveq	r6, #1
 801a520:	f7f8 fbd1 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a524:	9b03      	ldr	r3, [sp, #12]
 801a526:	b160      	cbz	r0, 801a542 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801a528:	2300      	movs	r3, #0
 801a52a:	8023      	strh	r3, [r4, #0]
 801a52c:	8063      	strh	r3, [r4, #2]
 801a52e:	80a3      	strh	r3, [r4, #4]
 801a530:	4620      	mov	r0, r4
 801a532:	80e3      	strh	r3, [r4, #6]
 801a534:	b011      	add	sp, #68	; 0x44
 801a536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a53a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a53e:	428e      	cmp	r6, r1
 801a540:	e7e9      	b.n	801a516 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801a542:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a546:	a90e      	add	r1, sp, #56	; 0x38
 801a548:	900e      	str	r0, [sp, #56]	; 0x38
 801a54a:	a80c      	add	r0, sp, #48	; 0x30
 801a54c:	9205      	str	r2, [sp, #20]
 801a54e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a552:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801a556:	9206      	str	r2, [sp, #24]
 801a558:	f8bb 2000 	ldrh.w	r2, [fp]
 801a55c:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801a560:	1a9b      	subs	r3, r3, r2
 801a562:	b21b      	sxth	r3, r3
 801a564:	9303      	str	r3, [sp, #12]
 801a566:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a56a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a56e:	ebaa 0a03 	sub.w	sl, sl, r3
 801a572:	fa0f f38a 	sxth.w	r3, sl
 801a576:	9304      	str	r3, [sp, #16]
 801a578:	9b03      	ldr	r3, [sp, #12]
 801a57a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a57e:	9b04      	ldr	r3, [sp, #16]
 801a580:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a584:	9b05      	ldr	r3, [sp, #20]
 801a586:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a58a:	9b06      	ldr	r3, [sp, #24]
 801a58c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a590:	f7fa fb2c 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a594:	4640      	mov	r0, r8
 801a596:	f7fa fb01 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a59a:	a80e      	add	r0, sp, #56	; 0x38
 801a59c:	f7fa fafe 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a5a0:	4b37      	ldr	r3, [pc, #220]	; (801a680 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a5a2:	4628      	mov	r0, r5
 801a5a4:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a5a8:	881b      	ldrh	r3, [r3, #0]
 801a5aa:	9307      	str	r3, [sp, #28]
 801a5ac:	682b      	ldr	r3, [r5, #0]
 801a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5b0:	4798      	blx	r3
 801a5b2:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801a5b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a5ba:	4681      	mov	r9, r0
 801a5bc:	f8db 0000 	ldr.w	r0, [fp]
 801a5c0:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801a5c4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a5c6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a5ca:	6803      	ldr	r3, [r0, #0]
 801a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a5ce:	4798      	blx	r3
 801a5d0:	4607      	mov	r7, r0
 801a5d2:	f8db 0000 	ldr.w	r0, [fp]
 801a5d6:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a5da:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a5de:	6803      	ldr	r3, [r0, #0]
 801a5e0:	9109      	str	r1, [sp, #36]	; 0x24
 801a5e2:	9208      	str	r2, [sp, #32]
 801a5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5e6:	4798      	blx	r3
 801a5e8:	f010 0f01 	tst.w	r0, #1
 801a5ec:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a5f0:	d012      	beq.n	801a618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801a5f2:	f8db 0000 	ldr.w	r0, [fp]
 801a5f6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a5fa:	6803      	ldr	r3, [r0, #0]
 801a5fc:	9200      	str	r2, [sp, #0]
 801a5fe:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a600:	462b      	mov	r3, r5
 801a602:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a606:	47b0      	blx	r6
 801a608:	9b03      	ldr	r3, [sp, #12]
 801a60a:	8023      	strh	r3, [r4, #0]
 801a60c:	9b04      	ldr	r3, [sp, #16]
 801a60e:	8063      	strh	r3, [r4, #2]
 801a610:	9b05      	ldr	r3, [sp, #20]
 801a612:	80a3      	strh	r3, [r4, #4]
 801a614:	9b06      	ldr	r3, [sp, #24]
 801a616:	e78b      	b.n	801a530 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801a618:	fb09 f202 	mul.w	r2, r9, r2
 801a61c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a620:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a624:	440f      	add	r7, r1
 801a626:	b166      	cbz	r6, 801a642 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a628:	9a07      	ldr	r2, [sp, #28]
 801a62a:	4592      	cmp	sl, r2
 801a62c:	d109      	bne.n	801a642 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a62e:	f8db 0000 	ldr.w	r0, [fp]
 801a632:	fb09 f303 	mul.w	r3, r9, r3
 801a636:	4629      	mov	r1, r5
 801a638:	6802      	ldr	r2, [r0, #0]
 801a63a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801a63c:	463a      	mov	r2, r7
 801a63e:	47b0      	blx	r6
 801a640:	e7e2      	b.n	801a608 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a642:	fb0a f303 	mul.w	r3, sl, r3
 801a646:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801a64a:	f8df b038 	ldr.w	fp, [pc, #56]	; 801a684 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a64e:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801a652:	4545      	cmp	r5, r8
 801a654:	d2d8      	bcs.n	801a608 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a656:	f8db 0000 	ldr.w	r0, [fp]
 801a65a:	4629      	mov	r1, r5
 801a65c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a660:	4435      	add	r5, r6
 801a662:	6802      	ldr	r2, [r0, #0]
 801a664:	005b      	lsls	r3, r3, #1
 801a666:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a66a:	463a      	mov	r2, r7
 801a66c:	47d0      	blx	sl
 801a66e:	444f      	add	r7, r9
 801a670:	e7ef      	b.n	801a652 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801a672:	bf00      	nop
 801a674:	2400ae68 	.word	0x2400ae68
 801a678:	2400ae6a 	.word	0x2400ae6a
 801a67c:	2400ae6c 	.word	0x2400ae6c
 801a680:	2400ae6e 	.word	0x2400ae6e
 801a684:	2400ae74 	.word	0x2400ae74

0801a688 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a68a:	4606      	mov	r6, r0
 801a68c:	b087      	sub	sp, #28
 801a68e:	460c      	mov	r4, r1
 801a690:	4617      	mov	r7, r2
 801a692:	461d      	mov	r5, r3
 801a694:	b333      	cbz	r3, 801a6e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a696:	4608      	mov	r0, r1
 801a698:	f7f8 fb15 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a69c:	bb10      	cbnz	r0, 801a6e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a69e:	6820      	ldr	r0, [r4, #0]
 801a6a0:	ab04      	add	r3, sp, #16
 801a6a2:	6861      	ldr	r1, [r4, #4]
 801a6a4:	4c1b      	ldr	r4, [pc, #108]	; (801a714 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801a6a6:	c303      	stmia	r3!, {r0, r1}
 801a6a8:	a804      	add	r0, sp, #16
 801a6aa:	f7fa fa77 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a6ae:	6820      	ldr	r0, [r4, #0]
 801a6b0:	6803      	ldr	r3, [r0, #0]
 801a6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6b4:	4798      	blx	r3
 801a6b6:	2dff      	cmp	r5, #255	; 0xff
 801a6b8:	d016      	beq.n	801a6e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801a6ba:	f010 0f08 	tst.w	r0, #8
 801a6be:	6820      	ldr	r0, [r4, #0]
 801a6c0:	d015      	beq.n	801a6ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a6c2:	2400      	movs	r4, #0
 801a6c4:	6801      	ldr	r1, [r0, #0]
 801a6c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a6ca:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a6ce:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a6d2:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a6d6:	9401      	str	r4, [sp, #4]
 801a6d8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a6dc:	9400      	str	r4, [sp, #0]
 801a6de:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801a6e0:	4639      	mov	r1, r7
 801a6e2:	47a0      	blx	r4
 801a6e4:	b007      	add	sp, #28
 801a6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6e8:	f010 0f02 	tst.w	r0, #2
 801a6ec:	e7e7      	b.n	801a6be <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a6ee:	6803      	ldr	r3, [r0, #0]
 801a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6f2:	4798      	blx	r3
 801a6f4:	4b08      	ldr	r3, [pc, #32]	; (801a718 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a6f6:	4601      	mov	r1, r0
 801a6f8:	4630      	mov	r0, r6
 801a6fa:	881a      	ldrh	r2, [r3, #0]
 801a6fc:	6833      	ldr	r3, [r6, #0]
 801a6fe:	e9cd 7500 	strd	r7, r5, [sp]
 801a702:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a704:	ab04      	add	r3, sp, #16
 801a706:	47a8      	blx	r5
 801a708:	6820      	ldr	r0, [r4, #0]
 801a70a:	6803      	ldr	r3, [r0, #0]
 801a70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70e:	4798      	blx	r3
 801a710:	e7e8      	b.n	801a6e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a712:	bf00      	nop
 801a714:	2400ae74 	.word	0x2400ae74
 801a718:	2400ae6e 	.word	0x2400ae6e

0801a71c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a720:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801a724:	4688      	mov	r8, r1
 801a726:	4614      	mov	r4, r2
 801a728:	461d      	mov	r5, r3
 801a72a:	9e08      	ldr	r6, [sp, #32]
 801a72c:	2f00      	cmp	r7, #0
 801a72e:	f000 80ab 	beq.w	801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a732:	4618      	mov	r0, r3
 801a734:	f7f8 fac7 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a738:	2800      	cmp	r0, #0
 801a73a:	f040 80a5 	bne.w	801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a73e:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a742:	2fff      	cmp	r7, #255	; 0xff
 801a744:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a748:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801a74c:	fb04 1303 	mla	r3, r4, r3, r1
 801a750:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801a754:	eba4 0200 	sub.w	r2, r4, r0
 801a758:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801a75c:	fb04 f505 	mul.w	r5, r4, r5
 801a760:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801a764:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a768:	d04a      	beq.n	801a800 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801a76a:	b2bc      	uxth	r4, r7
 801a76c:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801a770:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801a774:	fa5f f788 	uxtb.w	r7, r8
 801a778:	b2f3      	uxtb	r3, r6
 801a77a:	0040      	lsls	r0, r0, #1
 801a77c:	fb0e fe04 	mul.w	lr, lr, r4
 801a780:	4367      	muls	r7, r4
 801a782:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a786:	4363      	muls	r3, r4
 801a788:	fa1f fc8c 	uxth.w	ip, ip
 801a78c:	42a9      	cmp	r1, r5
 801a78e:	d27b      	bcs.n	801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a790:	eb01 0900 	add.w	r9, r1, r0
 801a794:	4549      	cmp	r1, r9
 801a796:	d231      	bcs.n	801a7fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801a798:	880a      	ldrh	r2, [r1, #0]
 801a79a:	1214      	asrs	r4, r2, #8
 801a79c:	10d6      	asrs	r6, r2, #3
 801a79e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a7a2:	00d2      	lsls	r2, r2, #3
 801a7a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a7a8:	b2d2      	uxtb	r2, r2
 801a7aa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a7ae:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a7b2:	fb14 f40c 	smulbb	r4, r4, ip
 801a7b6:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801a7ba:	fb12 f20c 	smulbb	r2, r2, ip
 801a7be:	fb16 f60c 	smulbb	r6, r6, ip
 801a7c2:	4474      	add	r4, lr
 801a7c4:	441a      	add	r2, r3
 801a7c6:	b2a4      	uxth	r4, r4
 801a7c8:	443e      	add	r6, r7
 801a7ca:	b292      	uxth	r2, r2
 801a7cc:	f104 0a01 	add.w	sl, r4, #1
 801a7d0:	b2b6      	uxth	r6, r6
 801a7d2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a7d6:	f102 0a01 	add.w	sl, r2, #1
 801a7da:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801a7de:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a7e2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a7e6:	4322      	orrs	r2, r4
 801a7e8:	1c74      	adds	r4, r6, #1
 801a7ea:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801a7ee:	0976      	lsrs	r6, r6, #5
 801a7f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a7f4:	4332      	orrs	r2, r6
 801a7f6:	f821 2b02 	strh.w	r2, [r1], #2
 801a7fa:	e7cb      	b.n	801a794 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801a7fc:	4441      	add	r1, r8
 801a7fe:	e7c5      	b.n	801a78c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801a800:	0973      	lsrs	r3, r6, #5
 801a802:	4f22      	ldr	r7, [pc, #136]	; (801a88c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801a804:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a808:	ea08 0707 	and.w	r7, r8, r7
 801a80c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a810:	433b      	orrs	r3, r7
 801a812:	07e7      	lsls	r7, r4, #31
 801a814:	ea43 0306 	orr.w	r3, r3, r6
 801a818:	b29b      	uxth	r3, r3
 801a81a:	d50b      	bpl.n	801a834 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801a81c:	0040      	lsls	r0, r0, #1
 801a81e:	0052      	lsls	r2, r2, #1
 801a820:	42a9      	cmp	r1, r5
 801a822:	d231      	bcs.n	801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a824:	180c      	adds	r4, r1, r0
 801a826:	42a1      	cmp	r1, r4
 801a828:	d202      	bcs.n	801a830 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801a82a:	f821 3b02 	strh.w	r3, [r1], #2
 801a82e:	e7fa      	b.n	801a826 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801a830:	4411      	add	r1, r2
 801a832:	e7f5      	b.n	801a820 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801a834:	078e      	lsls	r6, r1, #30
 801a836:	d008      	beq.n	801a84a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801a838:	0066      	lsls	r6, r4, #1
 801a83a:	460a      	mov	r2, r1
 801a83c:	42aa      	cmp	r2, r5
 801a83e:	d202      	bcs.n	801a846 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801a840:	8013      	strh	r3, [r2, #0]
 801a842:	4432      	add	r2, r6
 801a844:	e7fa      	b.n	801a83c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801a846:	3102      	adds	r1, #2
 801a848:	3801      	subs	r0, #1
 801a84a:	07c2      	lsls	r2, r0, #31
 801a84c:	d50b      	bpl.n	801a866 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801a84e:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801a852:	0066      	lsls	r6, r4, #1
 801a854:	3a01      	subs	r2, #1
 801a856:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801a85a:	42aa      	cmp	r2, r5
 801a85c:	d202      	bcs.n	801a864 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801a85e:	8013      	strh	r3, [r2, #0]
 801a860:	4432      	add	r2, r6
 801a862:	e7fa      	b.n	801a85a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801a864:	3801      	subs	r0, #1
 801a866:	b178      	cbz	r0, 801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a868:	1040      	asrs	r0, r0, #1
 801a86a:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801a86e:	0080      	lsls	r0, r0, #2
 801a870:	0064      	lsls	r4, r4, #1
 801a872:	42a9      	cmp	r1, r5
 801a874:	d208      	bcs.n	801a888 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a876:	180e      	adds	r6, r1, r0
 801a878:	460a      	mov	r2, r1
 801a87a:	42b2      	cmp	r2, r6
 801a87c:	d202      	bcs.n	801a884 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801a87e:	f842 3b04 	str.w	r3, [r2], #4
 801a882:	e7fa      	b.n	801a87a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801a884:	4421      	add	r1, r4
 801a886:	e7f4      	b.n	801a872 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a88c:	00fff800 	.word	0x00fff800

0801a890 <_ZN8touchgfx8LCD16bppC1Ev>:
 801a890:	2200      	movs	r2, #0
 801a892:	4910      	ldr	r1, [pc, #64]	; (801a8d4 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801a894:	6042      	str	r2, [r0, #4]
 801a896:	6001      	str	r1, [r0, #0]
 801a898:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a89c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a8a0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a8a4:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a8a8:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a8ac:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a8b0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a8b4:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a8b8:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a8bc:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a8c0:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a8c4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a8c8:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801a8cc:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801a8d0:	4770      	bx	lr
 801a8d2:	bf00      	nop
 801a8d4:	080261f8 	.word	0x080261f8

0801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8dc:	b08d      	sub	sp, #52	; 0x34
 801a8de:	460d      	mov	r5, r1
 801a8e0:	4604      	mov	r4, r0
 801a8e2:	4699      	mov	r9, r3
 801a8e4:	6808      	ldr	r0, [r1, #0]
 801a8e6:	ab08      	add	r3, sp, #32
 801a8e8:	6849      	ldr	r1, [r1, #4]
 801a8ea:	c303      	stmia	r3!, {r0, r1}
 801a8ec:	6810      	ldr	r0, [r2, #0]
 801a8ee:	ab0a      	add	r3, sp, #40	; 0x28
 801a8f0:	6851      	ldr	r1, [r2, #4]
 801a8f2:	c303      	stmia	r3!, {r0, r1}
 801a8f4:	a808      	add	r0, sp, #32
 801a8f6:	f7fa f951 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a8fa:	4629      	mov	r1, r5
 801a8fc:	a80a      	add	r0, sp, #40	; 0x28
 801a8fe:	4d67      	ldr	r5, [pc, #412]	; (801aa9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a900:	f7fa f974 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a904:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a908:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801a90c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a910:	6828      	ldr	r0, [r5, #0]
 801a912:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a916:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801a91a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a91e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a922:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a926:	440a      	add	r2, r1
 801a928:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a92c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a930:	4413      	add	r3, r2
 801a932:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a936:	6803      	ldr	r3, [r0, #0]
 801a938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a93a:	4798      	blx	r3
 801a93c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a940:	d119      	bne.n	801a976 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801a942:	f010 0f20 	tst.w	r0, #32
 801a946:	6828      	ldr	r0, [r5, #0]
 801a948:	d018      	beq.n	801a97c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801a94a:	2500      	movs	r5, #0
 801a94c:	6801      	ldr	r1, [r0, #0]
 801a94e:	b2b6      	uxth	r6, r6
 801a950:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801a954:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a958:	9601      	str	r6, [sp, #4]
 801a95a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801a95e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801a962:	9502      	str	r5, [sp, #8]
 801a964:	fa1f f588 	uxth.w	r5, r8
 801a968:	9500      	str	r5, [sp, #0]
 801a96a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801a96c:	4621      	mov	r1, r4
 801a96e:	47a8      	blx	r5
 801a970:	b00d      	add	sp, #52	; 0x34
 801a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a976:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a97a:	e7e4      	b.n	801a946 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801a97c:	6803      	ldr	r3, [r0, #0]
 801a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a980:	4798      	blx	r3
 801a982:	4947      	ldr	r1, [pc, #284]	; (801aaa0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801a984:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a988:	880b      	ldrh	r3, [r1, #0]
 801a98a:	468a      	mov	sl, r1
 801a98c:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a990:	fb03 5202 	mla	r2, r3, r2, r5
 801a994:	4373      	muls	r3, r6
 801a996:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801a99a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a99e:	9307      	str	r3, [sp, #28]
 801a9a0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801a9a4:	9306      	str	r3, [sp, #24]
 801a9a6:	9b07      	ldr	r3, [sp, #28]
 801a9a8:	4298      	cmp	r0, r3
 801a9aa:	d270      	bcs.n	801aa8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801a9ac:	9b06      	ldr	r3, [sp, #24]
 801a9ae:	4621      	mov	r1, r4
 801a9b0:	eb00 0b03 	add.w	fp, r0, r3
 801a9b4:	4558      	cmp	r0, fp
 801a9b6:	d25d      	bcs.n	801aa74 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801a9b8:	f851 4b04 	ldr.w	r4, [r1], #4
 801a9bc:	0e23      	lsrs	r3, r4, #24
 801a9be:	d014      	beq.n	801a9ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801a9c0:	2bff      	cmp	r3, #255	; 0xff
 801a9c2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801a9c6:	d112      	bne.n	801a9ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a9c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a9cc:	d10f      	bne.n	801a9ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801a9ce:	0963      	lsrs	r3, r4, #5
 801a9d0:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801a9d4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801a9d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a9dc:	f02c 0c07 	bic.w	ip, ip, #7
 801a9e0:	ea43 0c0c 	orr.w	ip, r3, ip
 801a9e4:	ea4c 0404 	orr.w	r4, ip, r4
 801a9e8:	8004      	strh	r4, [r0, #0]
 801a9ea:	3002      	adds	r0, #2
 801a9ec:	e7e2      	b.n	801a9b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801a9ee:	fb09 f303 	mul.w	r3, r9, r3
 801a9f2:	8807      	ldrh	r7, [r0, #0]
 801a9f4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801a9f8:	fa5f fc8c 	uxtb.w	ip, ip
 801a9fc:	1c5a      	adds	r2, r3, #1
 801a9fe:	123e      	asrs	r6, r7, #8
 801aa00:	10fd      	asrs	r5, r7, #3
 801aa02:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801aa06:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aa0a:	00ff      	lsls	r7, r7, #3
 801aa0c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801aa10:	1212      	asrs	r2, r2, #8
 801aa12:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801aa16:	b293      	uxth	r3, r2
 801aa18:	43d2      	mvns	r2, r2
 801aa1a:	b2ff      	uxtb	r7, r7
 801aa1c:	fb1e fe03 	smulbb	lr, lr, r3
 801aa20:	b2d2      	uxtb	r2, r2
 801aa22:	fb1c fc03 	smulbb	ip, ip, r3
 801aa26:	b2e4      	uxtb	r4, r4
 801aa28:	fb06 e602 	mla	r6, r6, r2, lr
 801aa2c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801aa30:	fb14 f403 	smulbb	r4, r4, r3
 801aa34:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801aa38:	b2b6      	uxth	r6, r6
 801aa3a:	fb05 c502 	mla	r5, r5, r2, ip
 801aa3e:	fb07 4702 	mla	r7, r7, r2, r4
 801aa42:	f106 0e01 	add.w	lr, r6, #1
 801aa46:	b2ad      	uxth	r5, r5
 801aa48:	b2bf      	uxth	r7, r7
 801aa4a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801aa4e:	f105 0c01 	add.w	ip, r5, #1
 801aa52:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801aa56:	1c7e      	adds	r6, r7, #1
 801aa58:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801aa5c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801aa60:	096d      	lsrs	r5, r5, #5
 801aa62:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801aa66:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801aa6a:	ea46 060e 	orr.w	r6, r6, lr
 801aa6e:	432e      	orrs	r6, r5
 801aa70:	8006      	strh	r6, [r0, #0]
 801aa72:	e7ba      	b.n	801a9ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801aa74:	f8ba 3000 	ldrh.w	r3, [sl]
 801aa78:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801aa7c:	eba3 0308 	sub.w	r3, r3, r8
 801aa80:	eba4 0408 	sub.w	r4, r4, r8
 801aa84:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801aa88:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801aa8c:	e78b      	b.n	801a9a6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801aa8e:	4b03      	ldr	r3, [pc, #12]	; (801aa9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801aa90:	6818      	ldr	r0, [r3, #0]
 801aa92:	6803      	ldr	r3, [r0, #0]
 801aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa96:	4798      	blx	r3
 801aa98:	e76a      	b.n	801a970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801aa9a:	bf00      	nop
 801aa9c:	2400ae74 	.word	0x2400ae74
 801aaa0:	2400ae6e 	.word	0x2400ae6e

0801aaa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801aaa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aaa8:	b085      	sub	sp, #20
 801aaaa:	6810      	ldr	r0, [r2, #0]
 801aaac:	460c      	mov	r4, r1
 801aaae:	6851      	ldr	r1, [r2, #4]
 801aab0:	466d      	mov	r5, sp
 801aab2:	4616      	mov	r6, r2
 801aab4:	c503      	stmia	r5!, {r0, r1}
 801aab6:	6818      	ldr	r0, [r3, #0]
 801aab8:	6859      	ldr	r1, [r3, #4]
 801aaba:	c503      	stmia	r5!, {r0, r1}
 801aabc:	4668      	mov	r0, sp
 801aabe:	4d2e      	ldr	r5, [pc, #184]	; (801ab78 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801aac0:	f7fa f86c 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aac4:	4631      	mov	r1, r6
 801aac6:	a802      	add	r0, sp, #8
 801aac8:	4e2c      	ldr	r6, [pc, #176]	; (801ab7c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801aaca:	f7fa f88f 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aace:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801aad2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801aad6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801aada:	6828      	ldr	r0, [r5, #0]
 801aadc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aae0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801aae4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801aae8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801aaec:	f8bd 1000 	ldrh.w	r1, [sp]
 801aaf0:	440a      	add	r2, r1
 801aaf2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801aaf6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801aafa:	4413      	add	r3, r2
 801aafc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ab00:	6803      	ldr	r3, [r0, #0]
 801ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab04:	4798      	blx	r3
 801ab06:	8833      	ldrh	r3, [r6, #0]
 801ab08:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801ab0c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801ab10:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801ab14:	f8df e068 	ldr.w	lr, [pc, #104]	; 801ab80 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801ab18:	fb03 1202 	mla	r2, r3, r2, r1
 801ab1c:	fb08 f303 	mul.w	r3, r8, r3
 801ab20:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ab24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ab28:	4298      	cmp	r0, r3
 801ab2a:	d21d      	bcs.n	801ab68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801ab2c:	eb00 080c 	add.w	r8, r0, ip
 801ab30:	4540      	cmp	r0, r8
 801ab32:	d20f      	bcs.n	801ab54 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801ab34:	f854 1b04 	ldr.w	r1, [r4], #4
 801ab38:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801ab3c:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801ab40:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ab44:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ab48:	ea42 0209 	orr.w	r2, r2, r9
 801ab4c:	430a      	orrs	r2, r1
 801ab4e:	f820 2b02 	strh.w	r2, [r0], #2
 801ab52:	e7ed      	b.n	801ab30 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801ab54:	8832      	ldrh	r2, [r6, #0]
 801ab56:	1bd2      	subs	r2, r2, r7
 801ab58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ab5c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ab60:	1bd2      	subs	r2, r2, r7
 801ab62:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ab66:	e7df      	b.n	801ab28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ab68:	6828      	ldr	r0, [r5, #0]
 801ab6a:	6803      	ldr	r3, [r0, #0]
 801ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab6e:	4798      	blx	r3
 801ab70:	b005      	add	sp, #20
 801ab72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab76:	bf00      	nop
 801ab78:	2400ae74 	.word	0x2400ae74
 801ab7c:	2400ae6e 	.word	0x2400ae6e
 801ab80:	fffff800 	.word	0xfffff800

0801ab84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab88:	b08e      	sub	sp, #56	; 0x38
 801ab8a:	460e      	mov	r6, r1
 801ab8c:	4604      	mov	r4, r0
 801ab8e:	461d      	mov	r5, r3
 801ab90:	6808      	ldr	r0, [r1, #0]
 801ab92:	ab0a      	add	r3, sp, #40	; 0x28
 801ab94:	6849      	ldr	r1, [r1, #4]
 801ab96:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801ad6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801ab9a:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ad70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801ab9e:	c303      	stmia	r3!, {r0, r1}
 801aba0:	6810      	ldr	r0, [r2, #0]
 801aba2:	ab0c      	add	r3, sp, #48	; 0x30
 801aba4:	6851      	ldr	r1, [r2, #4]
 801aba6:	c303      	stmia	r3!, {r0, r1}
 801aba8:	a80a      	add	r0, sp, #40	; 0x28
 801abaa:	f7f9 fff7 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801abae:	4631      	mov	r1, r6
 801abb0:	a80c      	add	r0, sp, #48	; 0x30
 801abb2:	f7fa f81b 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801abb6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801abba:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801abbe:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801abc2:	f8d8 0000 	ldr.w	r0, [r8]
 801abc6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801abca:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801abce:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801abd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801abd6:	440c      	add	r4, r1
 801abd8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801abdc:	440a      	add	r2, r1
 801abde:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801abe2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801abe6:	4413      	add	r3, r2
 801abe8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801abec:	6803      	ldr	r3, [r0, #0]
 801abee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abf0:	4798      	blx	r3
 801abf2:	2dff      	cmp	r5, #255	; 0xff
 801abf4:	d124      	bne.n	801ac40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801abf6:	f010 0f01 	tst.w	r0, #1
 801abfa:	f8d8 0000 	ldr.w	r0, [r8]
 801abfe:	d022      	beq.n	801ac46 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801ac00:	2100      	movs	r1, #0
 801ac02:	f04f 0e01 	mov.w	lr, #1
 801ac06:	f8d0 c000 	ldr.w	ip, [r0]
 801ac0a:	b2b6      	uxth	r6, r6
 801ac0c:	f8cd e018 	str.w	lr, [sp, #24]
 801ac10:	b2bf      	uxth	r7, r7
 801ac12:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ac16:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ac1a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801ac1e:	f8b9 e000 	ldrh.w	lr, [r9]
 801ac22:	9503      	str	r5, [sp, #12]
 801ac24:	9601      	str	r6, [sp, #4]
 801ac26:	9700      	str	r7, [sp, #0]
 801ac28:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801ac2c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ac30:	9102      	str	r1, [sp, #8]
 801ac32:	4621      	mov	r1, r4
 801ac34:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801ac38:	47a8      	blx	r5
 801ac3a:	b00e      	add	sp, #56	; 0x38
 801ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac40:	f010 0f04 	tst.w	r0, #4
 801ac44:	e7d9      	b.n	801abfa <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ac46:	6803      	ldr	r3, [r0, #0]
 801ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac4a:	4798      	blx	r3
 801ac4c:	f8b9 3000 	ldrh.w	r3, [r9]
 801ac50:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ac54:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801ac58:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ac5c:	435e      	muls	r6, r3
 801ac5e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ac62:	2dff      	cmp	r5, #255	; 0xff
 801ac64:	fb03 1202 	mla	r2, r3, r2, r1
 801ac68:	ebac 0c07 	sub.w	ip, ip, r7
 801ac6c:	eba3 0707 	sub.w	r7, r3, r7
 801ac70:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ac74:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ac78:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ac7c:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801ac80:	d049      	beq.n	801ad16 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801ac82:	43eb      	mvns	r3, r5
 801ac84:	fa1f f985 	uxth.w	r9, r5
 801ac88:	b2db      	uxtb	r3, r3
 801ac8a:	42b0      	cmp	r0, r6
 801ac8c:	d266      	bcs.n	801ad5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ac8e:	eb00 0a0e 	add.w	sl, r0, lr
 801ac92:	4550      	cmp	r0, sl
 801ac94:	4621      	mov	r1, r4
 801ac96:	f104 0403 	add.w	r4, r4, #3
 801ac9a:	d25b      	bcs.n	801ad54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801ac9c:	8802      	ldrh	r2, [r0, #0]
 801ac9e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801aca2:	ea4f 2822 	mov.w	r8, r2, asr #8
 801aca6:	fb11 f109 	smulbb	r1, r1, r9
 801acaa:	10d5      	asrs	r5, r2, #3
 801acac:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801acb0:	00d2      	lsls	r2, r2, #3
 801acb2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801acb6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801acba:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801acbe:	fb08 1803 	mla	r8, r8, r3, r1
 801acc2:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801acc6:	b2d2      	uxtb	r2, r2
 801acc8:	fb11 f109 	smulbb	r1, r1, r9
 801accc:	fa1f f888 	uxth.w	r8, r8
 801acd0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801acd4:	fb05 1503 	mla	r5, r5, r3, r1
 801acd8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801acdc:	fb11 f109 	smulbb	r1, r1, r9
 801ace0:	b2ad      	uxth	r5, r5
 801ace2:	fb02 1203 	mla	r2, r2, r3, r1
 801ace6:	f108 0101 	add.w	r1, r8, #1
 801acea:	b292      	uxth	r2, r2
 801acec:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801acf0:	1c51      	adds	r1, r2, #1
 801acf2:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801acf6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801acfa:	1c69      	adds	r1, r5, #1
 801acfc:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ad00:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ad04:	096d      	lsrs	r5, r5, #5
 801ad06:	ea42 0208 	orr.w	r2, r2, r8
 801ad0a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ad0e:	432a      	orrs	r2, r5
 801ad10:	f820 2b02 	strh.w	r2, [r0], #2
 801ad14:	e7bd      	b.n	801ac92 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ad16:	4a14      	ldr	r2, [pc, #80]	; (801ad68 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ad18:	42b0      	cmp	r0, r6
 801ad1a:	d21f      	bcs.n	801ad5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ad1c:	eb00 050e 	add.w	r5, r0, lr
 801ad20:	42a8      	cmp	r0, r5
 801ad22:	4621      	mov	r1, r4
 801ad24:	f104 0403 	add.w	r4, r4, #3
 801ad28:	d210      	bcs.n	801ad4c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ad2a:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ad2e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ad32:	00db      	lsls	r3, r3, #3
 801ad34:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ad38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ad3c:	430b      	orrs	r3, r1
 801ad3e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ad42:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ad46:	f820 3b02 	strh.w	r3, [r0], #2
 801ad4a:	e7e9      	b.n	801ad20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ad4c:	4438      	add	r0, r7
 801ad4e:	eb01 040c 	add.w	r4, r1, ip
 801ad52:	e7e1      	b.n	801ad18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ad54:	4438      	add	r0, r7
 801ad56:	eb01 040c 	add.w	r4, r1, ip
 801ad5a:	e796      	b.n	801ac8a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ad5c:	4b03      	ldr	r3, [pc, #12]	; (801ad6c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ad5e:	6818      	ldr	r0, [r3, #0]
 801ad60:	6803      	ldr	r3, [r0, #0]
 801ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad64:	4798      	blx	r3
 801ad66:	e768      	b.n	801ac3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ad68:	fffff800 	.word	0xfffff800
 801ad6c:	2400ae74 	.word	0x2400ae74
 801ad70:	2400ae6e 	.word	0x2400ae6e

0801ad74 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ad74:	b4f0      	push	{r4, r5, r6, r7}
 801ad76:	4616      	mov	r6, r2
 801ad78:	461c      	mov	r4, r3
 801ad7a:	460d      	mov	r5, r1
 801ad7c:	9a04      	ldr	r2, [sp, #16]
 801ad7e:	2e01      	cmp	r6, #1
 801ad80:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ad84:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ad88:	d012      	beq.n	801adb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801ad8a:	d303      	bcc.n	801ad94 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801ad8c:	2e02      	cmp	r6, #2
 801ad8e:	d00a      	beq.n	801ada6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801ad90:	bcf0      	pop	{r4, r5, r6, r7}
 801ad92:	4770      	bx	lr
 801ad94:	6805      	ldr	r5, [r0, #0]
 801ad96:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801ad9a:	68ed      	ldr	r5, [r5, #12]
 801ad9c:	4613      	mov	r3, r2
 801ad9e:	4622      	mov	r2, r4
 801ada0:	46ac      	mov	ip, r5
 801ada2:	bcf0      	pop	{r4, r5, r6, r7}
 801ada4:	4760      	bx	ip
 801ada6:	4621      	mov	r1, r4
 801ada8:	4628      	mov	r0, r5
 801adaa:	bcf0      	pop	{r4, r5, r6, r7}
 801adac:	f7ff bd94 	b.w	801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801adb0:	4621      	mov	r1, r4
 801adb2:	4628      	mov	r0, r5
 801adb4:	bcf0      	pop	{r4, r5, r6, r7}
 801adb6:	f7ff bee5 	b.w	801ab84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801adbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc0:	b093      	sub	sp, #76	; 0x4c
 801adc2:	4681      	mov	r9, r0
 801adc4:	4688      	mov	r8, r1
 801adc6:	6810      	ldr	r0, [r2, #0]
 801adc8:	6851      	ldr	r1, [r2, #4]
 801adca:	ac0e      	add	r4, sp, #56	; 0x38
 801adcc:	4616      	mov	r6, r2
 801adce:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801add2:	4f6b      	ldr	r7, [pc, #428]	; (801af80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801add4:	c403      	stmia	r4!, {r0, r1}
 801add6:	6818      	ldr	r0, [r3, #0]
 801add8:	ac10      	add	r4, sp, #64	; 0x40
 801adda:	6859      	ldr	r1, [r3, #4]
 801addc:	c403      	stmia	r4!, {r0, r1}
 801adde:	a80e      	add	r0, sp, #56	; 0x38
 801ade0:	f7f9 fedc 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ade4:	4631      	mov	r1, r6
 801ade6:	a810      	add	r0, sp, #64	; 0x40
 801ade8:	4e66      	ldr	r6, [pc, #408]	; (801af84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801adea:	f7f9 feff 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801adee:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801adf2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801adf6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801adfa:	6830      	ldr	r0, [r6, #0]
 801adfc:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ae00:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801ae04:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801ae08:	4489      	add	r9, r1
 801ae0a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801ae0e:	440a      	add	r2, r1
 801ae10:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801ae14:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801ae18:	4413      	add	r3, r2
 801ae1a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ae1e:	6803      	ldr	r3, [r0, #0]
 801ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae22:	4798      	blx	r3
 801ae24:	f010 0f80 	tst.w	r0, #128	; 0x80
 801ae28:	6830      	ldr	r0, [r6, #0]
 801ae2a:	d01d      	beq.n	801ae68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	6801      	ldr	r1, [r0, #0]
 801ae30:	b2a4      	uxth	r4, r4
 801ae32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801ae36:	b2ad      	uxth	r5, r5
 801ae38:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801ae3c:	220b      	movs	r2, #11
 801ae3e:	9207      	str	r2, [sp, #28]
 801ae40:	883a      	ldrh	r2, [r7, #0]
 801ae42:	9502      	str	r5, [sp, #8]
 801ae44:	9206      	str	r2, [sp, #24]
 801ae46:	2201      	movs	r2, #1
 801ae48:	9401      	str	r4, [sp, #4]
 801ae4a:	e9cd a204 	strd	sl, r2, [sp, #16]
 801ae4e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801ae52:	9203      	str	r2, [sp, #12]
 801ae54:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801ae58:	9200      	str	r2, [sp, #0]
 801ae5a:	4642      	mov	r2, r8
 801ae5c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801ae5e:	4649      	mov	r1, r9
 801ae60:	47a0      	blx	r4
 801ae62:	b013      	add	sp, #76	; 0x4c
 801ae64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae68:	6803      	ldr	r3, [r0, #0]
 801ae6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae6c:	4798      	blx	r3
 801ae6e:	883b      	ldrh	r3, [r7, #0]
 801ae70:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801ae74:	f04f 0e04 	mov.w	lr, #4
 801ae78:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801ae7c:	435d      	muls	r5, r3
 801ae7e:	fb03 1202 	mla	r2, r3, r2, r1
 801ae82:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ae86:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801ae8a:	920c      	str	r2, [sp, #48]	; 0x30
 801ae8c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801ae90:	1b12      	subs	r2, r2, r4
 801ae92:	920d      	str	r2, [sp, #52]	; 0x34
 801ae94:	0062      	lsls	r2, r4, #1
 801ae96:	1b1c      	subs	r4, r3, r4
 801ae98:	920a      	str	r2, [sp, #40]	; 0x28
 801ae9a:	0063      	lsls	r3, r4, #1
 801ae9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aea0:	4298      	cmp	r0, r3
 801aea2:	d266      	bcs.n	801af72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801aea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aea6:	eb00 0b03 	add.w	fp, r0, r3
 801aeaa:	4558      	cmp	r0, fp
 801aeac:	d25c      	bcs.n	801af68 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801aeae:	f819 3b01 	ldrb.w	r3, [r9], #1
 801aeb2:	fb1e e303 	smlabb	r3, lr, r3, lr
 801aeb6:	f858 2003 	ldr.w	r2, [r8, r3]
 801aeba:	0e11      	lsrs	r1, r2, #24
 801aebc:	d012      	beq.n	801aee4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801aebe:	29ff      	cmp	r1, #255	; 0xff
 801aec0:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801aec4:	d110      	bne.n	801aee8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801aec6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801aeca:	d10d      	bne.n	801aee8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801aecc:	0953      	lsrs	r3, r2, #5
 801aece:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801aed2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801aed6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aeda:	f027 0707 	bic.w	r7, r7, #7
 801aede:	431f      	orrs	r7, r3
 801aee0:	433a      	orrs	r2, r7
 801aee2:	8002      	strh	r2, [r0, #0]
 801aee4:	3002      	adds	r0, #2
 801aee6:	e7e0      	b.n	801aeaa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801aee8:	fb0a f101 	mul.w	r1, sl, r1
 801aeec:	8806      	ldrh	r6, [r0, #0]
 801aeee:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801aef2:	b2d2      	uxtb	r2, r2
 801aef4:	1c4b      	adds	r3, r1, #1
 801aef6:	1235      	asrs	r5, r6, #8
 801aef8:	10f4      	asrs	r4, r6, #3
 801aefa:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801aefe:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801af02:	00f6      	lsls	r6, r6, #3
 801af04:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801af08:	121b      	asrs	r3, r3, #8
 801af0a:	b2f6      	uxtb	r6, r6
 801af0c:	b299      	uxth	r1, r3
 801af0e:	43db      	mvns	r3, r3
 801af10:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801af14:	fb1c fc01 	smulbb	ip, ip, r1
 801af18:	b2db      	uxtb	r3, r3
 801af1a:	fb12 f201 	smulbb	r2, r2, r1
 801af1e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801af22:	fb05 c503 	mla	r5, r5, r3, ip
 801af26:	b2ff      	uxtb	r7, r7
 801af28:	fb06 2203 	mla	r2, r6, r3, r2
 801af2c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801af30:	fb17 f701 	smulbb	r7, r7, r1
 801af34:	b2ad      	uxth	r5, r5
 801af36:	b292      	uxth	r2, r2
 801af38:	fb04 7403 	mla	r4, r4, r3, r7
 801af3c:	f105 0c01 	add.w	ip, r5, #1
 801af40:	1c57      	adds	r7, r2, #1
 801af42:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801af46:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801af4a:	b2a4      	uxth	r4, r4
 801af4c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801af50:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801af54:	433d      	orrs	r5, r7
 801af56:	1c67      	adds	r7, r4, #1
 801af58:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801af5c:	0964      	lsrs	r4, r4, #5
 801af5e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801af62:	4325      	orrs	r5, r4
 801af64:	8005      	strh	r5, [r0, #0]
 801af66:	e7bd      	b.n	801aee4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801af68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af6a:	4418      	add	r0, r3
 801af6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af6e:	4499      	add	r9, r3
 801af70:	e795      	b.n	801ae9e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801af72:	4b04      	ldr	r3, [pc, #16]	; (801af84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801af74:	6818      	ldr	r0, [r3, #0]
 801af76:	6803      	ldr	r3, [r0, #0]
 801af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af7a:	4798      	blx	r3
 801af7c:	e771      	b.n	801ae62 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801af7e:	bf00      	nop
 801af80:	2400ae6e 	.word	0x2400ae6e
 801af84:	2400ae74 	.word	0x2400ae74

0801af88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af8c:	b087      	sub	sp, #28
 801af8e:	4680      	mov	r8, r0
 801af90:	460d      	mov	r5, r1
 801af92:	4614      	mov	r4, r2
 801af94:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801af98:	2e00      	cmp	r6, #0
 801af9a:	f000 80b9 	beq.w	801b110 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801af9e:	6810      	ldr	r0, [r2, #0]
 801afa0:	af02      	add	r7, sp, #8
 801afa2:	6851      	ldr	r1, [r2, #4]
 801afa4:	c703      	stmia	r7!, {r0, r1}
 801afa6:	6818      	ldr	r0, [r3, #0]
 801afa8:	af04      	add	r7, sp, #16
 801afaa:	6859      	ldr	r1, [r3, #4]
 801afac:	c703      	stmia	r7!, {r0, r1}
 801afae:	a802      	add	r0, sp, #8
 801afb0:	f7f9 fdf4 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afb4:	4621      	mov	r1, r4
 801afb6:	a804      	add	r0, sp, #16
 801afb8:	f7f9 fe18 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801afbc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801afc0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801afc4:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801afc8:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801afcc:	fb14 2103 	smlabb	r1, r4, r3, r2
 801afd0:	eb08 0401 	add.w	r4, r8, r1
 801afd4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801afd8:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801afdc:	440a      	add	r2, r1
 801afde:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801afe2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801afe6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801afea:	4413      	add	r3, r2
 801afec:	f8ad 3012 	strh.w	r3, [sp, #18]
 801aff0:	4b49      	ldr	r3, [pc, #292]	; (801b118 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801aff2:	6818      	ldr	r0, [r3, #0]
 801aff4:	6803      	ldr	r3, [r0, #0]
 801aff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aff8:	4798      	blx	r3
 801affa:	4b48      	ldr	r3, [pc, #288]	; (801b11c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801affc:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801b000:	2eff      	cmp	r6, #255	; 0xff
 801b002:	881a      	ldrh	r2, [r3, #0]
 801b004:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801b008:	fb02 c101 	mla	r1, r2, r1, ip
 801b00c:	fb02 f207 	mul.w	r2, r2, r7
 801b010:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801b014:	f105 0104 	add.w	r1, r5, #4
 801b018:	461d      	mov	r5, r3
 801b01a:	d05a      	beq.n	801b0d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801b01c:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801b020:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b024:	b2b6      	uxth	r6, r6
 801b026:	9301      	str	r3, [sp, #4]
 801b028:	fa1f fe8e 	uxth.w	lr, lr
 801b02c:	4282      	cmp	r2, r0
 801b02e:	d96a      	bls.n	801b106 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b030:	eb00 0b0a 	add.w	fp, r0, sl
 801b034:	4583      	cmp	fp, r0
 801b036:	d940      	bls.n	801b0ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801b038:	8805      	ldrh	r5, [r0, #0]
 801b03a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b03e:	122f      	asrs	r7, r5, #8
 801b040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b044:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b048:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b04c:	00ed      	lsls	r5, r5, #3
 801b04e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b052:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b056:	fb17 f70e 	smulbb	r7, r7, lr
 801b05a:	b2ed      	uxtb	r5, r5
 801b05c:	fb19 f90e 	smulbb	r9, r9, lr
 801b060:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b064:	fb15 f50e 	smulbb	r5, r5, lr
 801b068:	fb0c 7c06 	mla	ip, ip, r6, r7
 801b06c:	10df      	asrs	r7, r3, #3
 801b06e:	00db      	lsls	r3, r3, #3
 801b070:	fa1f fc8c 	uxth.w	ip, ip
 801b074:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b078:	b2db      	uxtb	r3, r3
 801b07a:	fb07 9706 	mla	r7, r7, r6, r9
 801b07e:	f10c 0901 	add.w	r9, ip, #1
 801b082:	fb03 5306 	mla	r3, r3, r6, r5
 801b086:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b08a:	b29b      	uxth	r3, r3
 801b08c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801b090:	b2bf      	uxth	r7, r7
 801b092:	f103 0c01 	add.w	ip, r3, #1
 801b096:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b09a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b09e:	ea4c 0c09 	orr.w	ip, ip, r9
 801b0a2:	f107 0901 	add.w	r9, r7, #1
 801b0a6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801b0aa:	097f      	lsrs	r7, r7, #5
 801b0ac:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b0b0:	ea4c 0c07 	orr.w	ip, ip, r7
 801b0b4:	f820 cb02 	strh.w	ip, [r0], #2
 801b0b8:	e7bc      	b.n	801b034 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801b0ba:	9b01      	ldr	r3, [sp, #4]
 801b0bc:	881b      	ldrh	r3, [r3, #0]
 801b0be:	eba3 0308 	sub.w	r3, r3, r8
 801b0c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b0c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b0ca:	eba3 0308 	sub.w	r3, r3, r8
 801b0ce:	441c      	add	r4, r3
 801b0d0:	e7ac      	b.n	801b02c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801b0d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b0d6:	4282      	cmp	r2, r0
 801b0d8:	d915      	bls.n	801b106 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b0da:	eb00 060a 	add.w	r6, r0, sl
 801b0de:	4286      	cmp	r6, r0
 801b0e0:	d906      	bls.n	801b0f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801b0e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b0e6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b0ea:	f820 3b02 	strh.w	r3, [r0], #2
 801b0ee:	e7f6      	b.n	801b0de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801b0f0:	882b      	ldrh	r3, [r5, #0]
 801b0f2:	eba3 0308 	sub.w	r3, r3, r8
 801b0f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b0fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b0fe:	eba3 0308 	sub.w	r3, r3, r8
 801b102:	441c      	add	r4, r3
 801b104:	e7e7      	b.n	801b0d6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801b106:	4b04      	ldr	r3, [pc, #16]	; (801b118 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801b108:	6818      	ldr	r0, [r3, #0]
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b10e:	4798      	blx	r3
 801b110:	b007      	add	sp, #28
 801b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b116:	bf00      	nop
 801b118:	2400ae74 	.word	0x2400ae74
 801b11c:	2400ae6e 	.word	0x2400ae6e

0801b120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b124:	b091      	sub	sp, #68	; 0x44
 801b126:	4680      	mov	r8, r0
 801b128:	460f      	mov	r7, r1
 801b12a:	4614      	mov	r4, r2
 801b12c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801b130:	2d00      	cmp	r5, #0
 801b132:	d051      	beq.n	801b1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b134:	6810      	ldr	r0, [r2, #0]
 801b136:	ae0c      	add	r6, sp, #48	; 0x30
 801b138:	6851      	ldr	r1, [r2, #4]
 801b13a:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801b33c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801b13e:	c603      	stmia	r6!, {r0, r1}
 801b140:	6818      	ldr	r0, [r3, #0]
 801b142:	ae0e      	add	r6, sp, #56	; 0x38
 801b144:	6859      	ldr	r1, [r3, #4]
 801b146:	c603      	stmia	r6!, {r0, r1}
 801b148:	a80c      	add	r0, sp, #48	; 0x30
 801b14a:	f7f9 fd27 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b14e:	4621      	mov	r1, r4
 801b150:	a80e      	add	r0, sp, #56	; 0x38
 801b152:	f7f9 fd4b 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b156:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b15a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b15e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b162:	f8d9 0000 	ldr.w	r0, [r9]
 801b166:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b16a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801b16e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b172:	eb08 0401 	add.w	r4, r8, r1
 801b176:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b17a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801b340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801b17e:	440a      	add	r2, r1
 801b180:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b184:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b188:	4413      	add	r3, r2
 801b18a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b18e:	6803      	ldr	r3, [r0, #0]
 801b190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b192:	4798      	blx	r3
 801b194:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b198:	f8d9 0000 	ldr.w	r0, [r9]
 801b19c:	d01f      	beq.n	801b1de <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b19e:	2200      	movs	r2, #0
 801b1a0:	6801      	ldr	r1, [r0, #0]
 801b1a2:	b2b6      	uxth	r6, r6
 801b1a4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b1a8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801b1ac:	220b      	movs	r2, #11
 801b1ae:	9207      	str	r2, [sp, #28]
 801b1b0:	f8b8 2000 	ldrh.w	r2, [r8]
 801b1b4:	9601      	str	r6, [sp, #4]
 801b1b6:	9206      	str	r2, [sp, #24]
 801b1b8:	2201      	movs	r2, #1
 801b1ba:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801b1be:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b1c2:	9203      	str	r2, [sp, #12]
 801b1c4:	fa1f f28a 	uxth.w	r2, sl
 801b1c8:	9202      	str	r2, [sp, #8]
 801b1ca:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b1ce:	9200      	str	r2, [sp, #0]
 801b1d0:	463a      	mov	r2, r7
 801b1d2:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801b1d4:	4621      	mov	r1, r4
 801b1d6:	47a8      	blx	r5
 801b1d8:	b011      	add	sp, #68	; 0x44
 801b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1de:	6803      	ldr	r3, [r0, #0]
 801b1e0:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801b1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1e6:	4798      	blx	r3
 801b1e8:	f8b8 2000 	ldrh.w	r2, [r8]
 801b1ec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b1f0:	2dff      	cmp	r5, #255	; 0xff
 801b1f2:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b1f6:	fb0a fa02 	mul.w	sl, sl, r2
 801b1fa:	fb02 1303 	mla	r3, r2, r3, r1
 801b1fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b202:	d062      	beq.n	801b2ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801b204:	ea6f 0c05 	mvn.w	ip, r5
 801b208:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801b20c:	b2ad      	uxth	r5, r5
 801b20e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801b212:	fa5f fc8c 	uxtb.w	ip, ip
 801b216:	930a      	str	r3, [sp, #40]	; 0x28
 801b218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b21a:	4298      	cmp	r0, r3
 801b21c:	f080 8085 	bcs.w	801b32a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b220:	eb00 0b09 	add.w	fp, r0, r9
 801b224:	4558      	cmp	r0, fp
 801b226:	d246      	bcs.n	801b2b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801b228:	f814 eb01 	ldrb.w	lr, [r4], #1
 801b22c:	2303      	movs	r3, #3
 801b22e:	2204      	movs	r2, #4
 801b230:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801b234:	8803      	ldrh	r3, [r0, #0]
 801b236:	eb07 0a0e 	add.w	sl, r7, lr
 801b23a:	1219      	asrs	r1, r3, #8
 801b23c:	10da      	asrs	r2, r3, #3
 801b23e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b242:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801b246:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b24a:	00db      	lsls	r3, r3, #3
 801b24c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b250:	fb18 f805 	smulbb	r8, r8, r5
 801b254:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801b258:	fb1e fe05 	smulbb	lr, lr, r5
 801b25c:	b2db      	uxtb	r3, r3
 801b25e:	fb01 810c 	mla	r1, r1, ip, r8
 801b262:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b266:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b26a:	fb18 f805 	smulbb	r8, r8, r5
 801b26e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b272:	b289      	uxth	r1, r1
 801b274:	fb02 820c 	mla	r2, r2, ip, r8
 801b278:	fb03 e30c 	mla	r3, r3, ip, lr
 801b27c:	f101 0801 	add.w	r8, r1, #1
 801b280:	b292      	uxth	r2, r2
 801b282:	b29b      	uxth	r3, r3
 801b284:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b288:	f102 0801 	add.w	r8, r2, #1
 801b28c:	f103 0e01 	add.w	lr, r3, #1
 801b290:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801b294:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801b298:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801b29c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b2a0:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b2a4:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b2a8:	ea4e 0101 	orr.w	r1, lr, r1
 801b2ac:	ea41 0108 	orr.w	r1, r1, r8
 801b2b0:	f820 1b02 	strh.w	r1, [r0], #2
 801b2b4:	e7b6      	b.n	801b224 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801b2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2b8:	881b      	ldrh	r3, [r3, #0]
 801b2ba:	1b9b      	subs	r3, r3, r6
 801b2bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b2c0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b2c4:	1b9b      	subs	r3, r3, r6
 801b2c6:	441c      	add	r4, r3
 801b2c8:	e7a6      	b.n	801b218 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801b2ca:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801b2ce:	2203      	movs	r2, #3
 801b2d0:	2504      	movs	r5, #4
 801b2d2:	4919      	ldr	r1, [pc, #100]	; (801b338 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801b2d4:	4550      	cmp	r0, sl
 801b2d6:	d228      	bcs.n	801b32a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b2d8:	eb00 0c09 	add.w	ip, r0, r9
 801b2dc:	4560      	cmp	r0, ip
 801b2de:	4623      	mov	r3, r4
 801b2e0:	d219      	bcs.n	801b316 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801b2e2:	f893 e000 	ldrb.w	lr, [r3]
 801b2e6:	3401      	adds	r4, #1
 801b2e8:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801b2ec:	eb07 0b0e 	add.w	fp, r7, lr
 801b2f0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b2f4:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b2f8:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b2fc:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801b300:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801b304:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b308:	ea43 030b 	orr.w	r3, r3, fp
 801b30c:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801b310:	f820 3b02 	strh.w	r3, [r0], #2
 801b314:	e7e2      	b.n	801b2dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801b316:	f8b8 3000 	ldrh.w	r3, [r8]
 801b31a:	1b9b      	subs	r3, r3, r6
 801b31c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b320:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b324:	1b9b      	subs	r3, r3, r6
 801b326:	441c      	add	r4, r3
 801b328:	e7d4      	b.n	801b2d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b32a:	4b04      	ldr	r3, [pc, #16]	; (801b33c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801b32c:	6818      	ldr	r0, [r3, #0]
 801b32e:	6803      	ldr	r3, [r0, #0]
 801b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b332:	4798      	blx	r3
 801b334:	e750      	b.n	801b1d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b336:	bf00      	nop
 801b338:	fffff800 	.word	0xfffff800
 801b33c:	2400ae74 	.word	0x2400ae74
 801b340:	2400ae6e 	.word	0x2400ae6e

0801b344 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b344:	b430      	push	{r4, r5}
 801b346:	780d      	ldrb	r5, [r1, #0]
 801b348:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b34c:	2d01      	cmp	r5, #1
 801b34e:	d00a      	beq.n	801b366 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801b350:	d305      	bcc.n	801b35e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b352:	2d02      	cmp	r5, #2
 801b354:	d10b      	bne.n	801b36e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801b356:	9402      	str	r4, [sp, #8]
 801b358:	bc30      	pop	{r4, r5}
 801b35a:	f7ff be15 	b.w	801af88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801b35e:	9402      	str	r4, [sp, #8]
 801b360:	bc30      	pop	{r4, r5}
 801b362:	f7ff bd2b 	b.w	801adbc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b366:	9402      	str	r4, [sp, #8]
 801b368:	bc30      	pop	{r4, r5}
 801b36a:	f7ff bed9 	b.w	801b120 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b36e:	bc30      	pop	{r4, r5}
 801b370:	4770      	bx	lr
	...

0801b374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b378:	b087      	sub	sp, #28
 801b37a:	4604      	mov	r4, r0
 801b37c:	460e      	mov	r6, r1
 801b37e:	6810      	ldr	r0, [r2, #0]
 801b380:	6851      	ldr	r1, [r2, #4]
 801b382:	ad02      	add	r5, sp, #8
 801b384:	4617      	mov	r7, r2
 801b386:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801b38a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801b5bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801b38e:	c503      	stmia	r5!, {r0, r1}
 801b390:	6818      	ldr	r0, [r3, #0]
 801b392:	ad04      	add	r5, sp, #16
 801b394:	6859      	ldr	r1, [r3, #4]
 801b396:	c503      	stmia	r5!, {r0, r1}
 801b398:	a802      	add	r0, sp, #8
 801b39a:	f7f9 fbff 	bl	8014b9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b39e:	4639      	mov	r1, r7
 801b3a0:	a804      	add	r0, sp, #16
 801b3a2:	f7f9 fc23 	bl	8014bec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b3a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b3aa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b3ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b3b2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b3b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b3ba:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b3be:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b3c2:	440e      	add	r6, r1
 801b3c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b3c8:	440a      	add	r2, r1
 801b3ca:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b3ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b3d2:	4413      	add	r3, r2
 801b3d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b3d8:	4b77      	ldr	r3, [pc, #476]	; (801b5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b3da:	6818      	ldr	r0, [r3, #0]
 801b3dc:	6803      	ldr	r3, [r0, #0]
 801b3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b3e0:	4798      	blx	r3
 801b3e2:	f8b9 b000 	ldrh.w	fp, [r9]
 801b3e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b3ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b3ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b3f2:	fb05 f50b 	mul.w	r5, r5, fp
 801b3f6:	fb0b 2303 	mla	r3, fp, r3, r2
 801b3fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b3fe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b402:	9300      	str	r3, [sp, #0]
 801b404:	d069      	beq.n	801b4da <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801b406:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801b40a:	4558      	cmp	r0, fp
 801b40c:	f080 80cc 	bcs.w	801b5a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b410:	9b00      	ldr	r3, [sp, #0]
 801b412:	4631      	mov	r1, r6
 801b414:	18c3      	adds	r3, r0, r3
 801b416:	9301      	str	r3, [sp, #4]
 801b418:	9b01      	ldr	r3, [sp, #4]
 801b41a:	4298      	cmp	r0, r3
 801b41c:	d24f      	bcs.n	801b4be <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801b41e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b422:	2a00      	cmp	r2, #0
 801b424:	d048      	beq.n	801b4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b426:	fb0a f202 	mul.w	r2, sl, r2
 801b42a:	1c53      	adds	r3, r2, #1
 801b42c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b430:	121b      	asrs	r3, r3, #8
 801b432:	d041      	beq.n	801b4b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b434:	8802      	ldrh	r2, [r0, #0]
 801b436:	b29e      	uxth	r6, r3
 801b438:	f8b4 c000 	ldrh.w	ip, [r4]
 801b43c:	43db      	mvns	r3, r3
 801b43e:	1215      	asrs	r5, r2, #8
 801b440:	b2db      	uxtb	r3, r3
 801b442:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b446:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b44a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b44e:	fb15 f503 	smulbb	r5, r5, r3
 801b452:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b456:	00d2      	lsls	r2, r2, #3
 801b458:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b45c:	fb07 5706 	mla	r7, r7, r6, r5
 801b460:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b464:	b2d2      	uxtb	r2, r2
 801b466:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b46a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b46e:	fb1e fe03 	smulbb	lr, lr, r3
 801b472:	b2bf      	uxth	r7, r7
 801b474:	fb12 f203 	smulbb	r2, r2, r3
 801b478:	fa5f fc8c 	uxtb.w	ip, ip
 801b47c:	fb05 e506 	mla	r5, r5, r6, lr
 801b480:	f107 0e01 	add.w	lr, r7, #1
 801b484:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b488:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b48c:	fa1f fc8c 	uxth.w	ip, ip
 801b490:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801b494:	b2ad      	uxth	r5, r5
 801b496:	f10c 0701 	add.w	r7, ip, #1
 801b49a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b49e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b4a2:	ea47 070e 	orr.w	r7, r7, lr
 801b4a6:	f105 0e01 	add.w	lr, r5, #1
 801b4aa:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b4ae:	096d      	lsrs	r5, r5, #5
 801b4b0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b4b4:	432f      	orrs	r7, r5
 801b4b6:	8007      	strh	r7, [r0, #0]
 801b4b8:	3002      	adds	r0, #2
 801b4ba:	3402      	adds	r4, #2
 801b4bc:	e7ac      	b.n	801b418 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b4be:	f8b9 3000 	ldrh.w	r3, [r9]
 801b4c2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b4c6:	eba3 0308 	sub.w	r3, r3, r8
 801b4ca:	eba6 0608 	sub.w	r6, r6, r8
 801b4ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b4d2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b4d6:	440e      	add	r6, r1
 801b4d8:	e797      	b.n	801b40a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b4da:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b4de:	42a8      	cmp	r0, r5
 801b4e0:	d262      	bcs.n	801b5a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b4e2:	9b00      	ldr	r3, [sp, #0]
 801b4e4:	4631      	mov	r1, r6
 801b4e6:	eb00 0b03 	add.w	fp, r0, r3
 801b4ea:	4558      	cmp	r0, fp
 801b4ec:	d24e      	bcs.n	801b58c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4f2:	b12b      	cbz	r3, 801b500 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b4f4:	2bff      	cmp	r3, #255	; 0xff
 801b4f6:	f8b4 e000 	ldrh.w	lr, [r4]
 801b4fa:	d104      	bne.n	801b506 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801b4fc:	f8a0 e000 	strh.w	lr, [r0]
 801b500:	3002      	adds	r0, #2
 801b502:	3402      	adds	r4, #2
 801b504:	e7f1      	b.n	801b4ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801b506:	8802      	ldrh	r2, [r0, #0]
 801b508:	b29f      	uxth	r7, r3
 801b50a:	43db      	mvns	r3, r3
 801b50c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b510:	1216      	asrs	r6, r2, #8
 801b512:	b2db      	uxtb	r3, r3
 801b514:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b518:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b51c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b520:	00d2      	lsls	r2, r2, #3
 801b522:	fb16 f603 	smulbb	r6, r6, r3
 801b526:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b52a:	b2d2      	uxtb	r2, r2
 801b52c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b530:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b534:	fb1a fa03 	smulbb	sl, sl, r3
 801b538:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b53c:	fa1f fc8c 	uxth.w	ip, ip
 801b540:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b544:	fb12 f303 	smulbb	r3, r2, r3
 801b548:	fa5f fe8e 	uxtb.w	lr, lr
 801b54c:	fb06 a607 	mla	r6, r6, r7, sl
 801b550:	f10c 0201 	add.w	r2, ip, #1
 801b554:	fb0e 3307 	mla	r3, lr, r7, r3
 801b558:	b2b6      	uxth	r6, r6
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b560:	f106 0a01 	add.w	sl, r6, #1
 801b564:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801b568:	f103 0c01 	add.w	ip, r3, #1
 801b56c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b570:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b574:	0976      	lsrs	r6, r6, #5
 801b576:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b57a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b57e:	ea4c 0c02 	orr.w	ip, ip, r2
 801b582:	ea4c 0c06 	orr.w	ip, ip, r6
 801b586:	f8a0 c000 	strh.w	ip, [r0]
 801b58a:	e7b9      	b.n	801b500 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b58c:	f8b9 3000 	ldrh.w	r3, [r9]
 801b590:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b594:	eba3 0308 	sub.w	r3, r3, r8
 801b598:	eba6 0608 	sub.w	r6, r6, r8
 801b59c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b5a0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b5a4:	440e      	add	r6, r1
 801b5a6:	e79a      	b.n	801b4de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801b5a8:	4b03      	ldr	r3, [pc, #12]	; (801b5b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b5aa:	6818      	ldr	r0, [r3, #0]
 801b5ac:	6803      	ldr	r3, [r0, #0]
 801b5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5b0:	4798      	blx	r3
 801b5b2:	b007      	add	sp, #28
 801b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5b8:	2400ae74 	.word	0x2400ae74
 801b5bc:	2400ae6e 	.word	0x2400ae6e

0801b5c0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5c4:	b089      	sub	sp, #36	; 0x24
 801b5c6:	4682      	mov	sl, r0
 801b5c8:	460f      	mov	r7, r1
 801b5ca:	4691      	mov	r9, r2
 801b5cc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b5d0:	4698      	mov	r8, r3
 801b5d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b5d4:	2e00      	cmp	r6, #0
 801b5d6:	d036      	beq.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b5d8:	4608      	mov	r0, r1
 801b5da:	f7fc f86b 	bl	80176b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b5de:	4605      	mov	r5, r0
 801b5e0:	4638      	mov	r0, r7
 801b5e2:	f7fc f89b 	bl	801771c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b5e6:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b5ea:	4638      	mov	r0, r7
 801b5ec:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b5f0:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b5f4:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b5f8:	f7fc f948 	bl	801788c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b5fc:	4605      	mov	r5, r0
 801b5fe:	4638      	mov	r0, r7
 801b600:	f7fc f974 	bl	80178ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b604:	4681      	mov	r9, r0
 801b606:	4638      	mov	r0, r7
 801b608:	f7fc f9c4 	bl	8017994 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b60c:	280b      	cmp	r0, #11
 801b60e:	d81a      	bhi.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b610:	e8df f000 	tbb	[pc, r0]
 801b614:	1906aebd 	.word	0x1906aebd
 801b618:	19191919 	.word	0x19191919
 801b61c:	b5191919 	.word	0xb5191919
 801b620:	4bb0      	ldr	r3, [pc, #704]	; (801b8e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801b622:	6818      	ldr	r0, [r3, #0]
 801b624:	6803      	ldr	r3, [r0, #0]
 801b626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b628:	4798      	blx	r3
 801b62a:	2eff      	cmp	r6, #255	; 0xff
 801b62c:	d121      	bne.n	801b672 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b62e:	0683      	lsls	r3, r0, #26
 801b630:	d41f      	bmi.n	801b672 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b632:	4638      	mov	r0, r7
 801b634:	f7fc f8f2 	bl	801781c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b638:	b940      	cbnz	r0, 801b64c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801b63a:	4623      	mov	r3, r4
 801b63c:	aa02      	add	r2, sp, #8
 801b63e:	4629      	mov	r1, r5
 801b640:	4650      	mov	r0, sl
 801b642:	f7ff fa2f 	bl	801aaa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b646:	b009      	add	sp, #36	; 0x24
 801b648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64c:	f10d 0818 	add.w	r8, sp, #24
 801b650:	4639      	mov	r1, r7
 801b652:	af04      	add	r7, sp, #16
 801b654:	4640      	mov	r0, r8
 801b656:	f7fc f895 	bl	8017784 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b65a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b65e:	e887 0003 	stmia.w	r7, {r0, r1}
 801b662:	4638      	mov	r0, r7
 801b664:	4621      	mov	r1, r4
 801b666:	f7f7 faeb 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 801b66a:	4638      	mov	r0, r7
 801b66c:	f7f7 fb2b 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b670:	b130      	cbz	r0, 801b680 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b672:	4633      	mov	r3, r6
 801b674:	4622      	mov	r2, r4
 801b676:	a902      	add	r1, sp, #8
 801b678:	4628      	mov	r0, r5
 801b67a:	f7ff f92d 	bl	801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b67e:	e7e2      	b.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b680:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b684:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b688:	4293      	cmp	r3, r2
 801b68a:	dd12      	ble.n	801b6b2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801b68c:	1a9b      	subs	r3, r3, r2
 801b68e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b692:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b696:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b69a:	4628      	mov	r0, r5
 801b69c:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b6a0:	4642      	mov	r2, r8
 801b6a2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b6a6:	a902      	add	r1, sp, #8
 801b6a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b6ac:	4633      	mov	r3, r6
 801b6ae:	f7ff f913 	bl	801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b6b2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b6b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b6ba:	4293      	cmp	r3, r2
 801b6bc:	dd12      	ble.n	801b6e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801b6be:	1a9b      	subs	r3, r3, r2
 801b6c0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b6c4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b6c8:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b6cc:	4642      	mov	r2, r8
 801b6ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b6d2:	4628      	mov	r0, r5
 801b6d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b6d8:	23ff      	movs	r3, #255	; 0xff
 801b6da:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b6de:	a902      	add	r1, sp, #8
 801b6e0:	f7ff f8fa 	bl	801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b6e4:	463b      	mov	r3, r7
 801b6e6:	aa02      	add	r2, sp, #8
 801b6e8:	4629      	mov	r1, r5
 801b6ea:	4650      	mov	r0, sl
 801b6ec:	f7ff f9da 	bl	801aaa4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b6f0:	88a2      	ldrh	r2, [r4, #4]
 801b6f2:	8823      	ldrh	r3, [r4, #0]
 801b6f4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b6f8:	4413      	add	r3, r2
 801b6fa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b6fe:	440a      	add	r2, r1
 801b700:	b29b      	uxth	r3, r3
 801b702:	b292      	uxth	r2, r2
 801b704:	b218      	sxth	r0, r3
 801b706:	b211      	sxth	r1, r2
 801b708:	4288      	cmp	r0, r1
 801b70a:	dd12      	ble.n	801b732 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801b70c:	1a9b      	subs	r3, r3, r2
 801b70e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b712:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b716:	4642      	mov	r2, r8
 801b718:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b71c:	a902      	add	r1, sp, #8
 801b71e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b722:	23ff      	movs	r3, #255	; 0xff
 801b724:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b728:	4628      	mov	r0, r5
 801b72a:	f8ad 601a 	strh.w	r6, [sp, #26]
 801b72e:	f7ff f8d3 	bl	801a8d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b732:	88e2      	ldrh	r2, [r4, #6]
 801b734:	8863      	ldrh	r3, [r4, #2]
 801b736:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b73a:	4413      	add	r3, r2
 801b73c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b740:	440a      	add	r2, r1
 801b742:	b29b      	uxth	r3, r3
 801b744:	b292      	uxth	r2, r2
 801b746:	b218      	sxth	r0, r3
 801b748:	b211      	sxth	r1, r2
 801b74a:	4288      	cmp	r0, r1
 801b74c:	f77f af7b 	ble.w	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b750:	1a9b      	subs	r3, r3, r2
 801b752:	f9b4 6000 	ldrsh.w	r6, [r4]
 801b756:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b75a:	4642      	mov	r2, r8
 801b75c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b760:	23ff      	movs	r3, #255	; 0xff
 801b762:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b766:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b76a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b76e:	e782      	b.n	801b676 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801b770:	4633      	mov	r3, r6
 801b772:	4622      	mov	r2, r4
 801b774:	a902      	add	r1, sp, #8
 801b776:	4628      	mov	r0, r5
 801b778:	f7ff fa04 	bl	801ab84 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b77c:	e763      	b.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b77e:	9600      	str	r6, [sp, #0]
 801b780:	4623      	mov	r3, r4
 801b782:	aa02      	add	r2, sp, #8
 801b784:	4649      	mov	r1, r9
 801b786:	4628      	mov	r0, r5
 801b788:	f7ff fddc 	bl	801b344 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b78c:	e75b      	b.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b78e:	4638      	mov	r0, r7
 801b790:	f7fc f844 	bl	801781c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b794:	b950      	cbnz	r0, 801b7ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801b796:	f8da 3000 	ldr.w	r3, [sl]
 801b79a:	aa02      	add	r2, sp, #8
 801b79c:	4629      	mov	r1, r5
 801b79e:	e9cd 6000 	strd	r6, r0, [sp]
 801b7a2:	4650      	mov	r0, sl
 801b7a4:	68de      	ldr	r6, [r3, #12]
 801b7a6:	4623      	mov	r3, r4
 801b7a8:	47b0      	blx	r6
 801b7aa:	e74c      	b.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b7ac:	f10d 0818 	add.w	r8, sp, #24
 801b7b0:	4639      	mov	r1, r7
 801b7b2:	af04      	add	r7, sp, #16
 801b7b4:	4640      	mov	r0, r8
 801b7b6:	f7fb ffe5 	bl	8017784 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b7ba:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b7be:	e887 0003 	stmia.w	r7, {r0, r1}
 801b7c2:	4638      	mov	r0, r7
 801b7c4:	4621      	mov	r1, r4
 801b7c6:	f7f7 fa3b 	bl	8012c40 <_ZN8touchgfx4RectaNERKS0_>
 801b7ca:	4638      	mov	r0, r7
 801b7cc:	f7f7 fa7b 	bl	8012cc6 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7d0:	b138      	cbz	r0, 801b7e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801b7d2:	4623      	mov	r3, r4
 801b7d4:	9600      	str	r6, [sp, #0]
 801b7d6:	aa02      	add	r2, sp, #8
 801b7d8:	4649      	mov	r1, r9
 801b7da:	4628      	mov	r0, r5
 801b7dc:	f7ff fdca 	bl	801b374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b7e0:	e731      	b.n	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b7e2:	f8da 3000 	ldr.w	r3, [sl]
 801b7e6:	aa02      	add	r2, sp, #8
 801b7e8:	4629      	mov	r1, r5
 801b7ea:	e9cd 6000 	strd	r6, r0, [sp]
 801b7ee:	4650      	mov	r0, sl
 801b7f0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b7f4:	463b      	mov	r3, r7
 801b7f6:	47d8      	blx	fp
 801b7f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b7fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b800:	4293      	cmp	r3, r2
 801b802:	dd13      	ble.n	801b82c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801b804:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b808:	1a9b      	subs	r3, r3, r2
 801b80a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b80e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b812:	4628      	mov	r0, r5
 801b814:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b818:	aa02      	add	r2, sp, #8
 801b81a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b81e:	4649      	mov	r1, r9
 801b820:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b824:	4643      	mov	r3, r8
 801b826:	9600      	str	r6, [sp, #0]
 801b828:	f7ff fda4 	bl	801b374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b82c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b830:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b834:	4293      	cmp	r3, r2
 801b836:	dd13      	ble.n	801b860 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801b838:	1a9b      	subs	r3, r3, r2
 801b83a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b83e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b842:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b846:	aa02      	add	r2, sp, #8
 801b848:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b84c:	4628      	mov	r0, r5
 801b84e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b852:	4643      	mov	r3, r8
 801b854:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b858:	4649      	mov	r1, r9
 801b85a:	9600      	str	r6, [sp, #0]
 801b85c:	f7ff fd8a 	bl	801b374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b860:	88a2      	ldrh	r2, [r4, #4]
 801b862:	8823      	ldrh	r3, [r4, #0]
 801b864:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b868:	4413      	add	r3, r2
 801b86a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b86e:	440a      	add	r2, r1
 801b870:	b29b      	uxth	r3, r3
 801b872:	b292      	uxth	r2, r2
 801b874:	b218      	sxth	r0, r3
 801b876:	b211      	sxth	r1, r2
 801b878:	4288      	cmp	r0, r1
 801b87a:	dd13      	ble.n	801b8a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801b87c:	1a9b      	subs	r3, r3, r2
 801b87e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b882:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801b886:	aa02      	add	r2, sp, #8
 801b888:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b88c:	4649      	mov	r1, r9
 801b88e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b892:	4643      	mov	r3, r8
 801b894:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b898:	4628      	mov	r0, r5
 801b89a:	9600      	str	r6, [sp, #0]
 801b89c:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b8a0:	f7ff fd68 	bl	801b374 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b8a4:	88e2      	ldrh	r2, [r4, #6]
 801b8a6:	8863      	ldrh	r3, [r4, #2]
 801b8a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b8ac:	4413      	add	r3, r2
 801b8ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b8b2:	440a      	add	r2, r1
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	b292      	uxth	r2, r2
 801b8b8:	b218      	sxth	r0, r3
 801b8ba:	b211      	sxth	r1, r2
 801b8bc:	4288      	cmp	r0, r1
 801b8be:	f77f aec2 	ble.w	801b646 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b8c2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b8c6:	1a9b      	subs	r3, r3, r2
 801b8c8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b8cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b8d0:	4643      	mov	r3, r8
 801b8d2:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b8d6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b8da:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b8de:	9600      	str	r6, [sp, #0]
 801b8e0:	e779      	b.n	801b7d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801b8e2:	bf00      	nop
 801b8e4:	2400ae74 	.word	0x2400ae74

0801b8e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b8e8:	b180      	cbz	r0, 801b90c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801b8ea:	2903      	cmp	r1, #3
 801b8ec:	d81c      	bhi.n	801b928 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b8ee:	e8df f001 	tbb	[pc, r1]
 801b8f2:	1d02      	.short	0x1d02
 801b8f4:	1f08      	.short	0x1f08
 801b8f6:	4b10      	ldr	r3, [pc, #64]	; (801b938 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b8f8:	8818      	ldrh	r0, [r3, #0]
 801b8fa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b8fe:	4240      	negs	r0, r0
 801b900:	4770      	bx	lr
 801b902:	4b0d      	ldr	r3, [pc, #52]	; (801b938 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b904:	8818      	ldrh	r0, [r3, #0]
 801b906:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b90a:	4770      	bx	lr
 801b90c:	2903      	cmp	r1, #3
 801b90e:	d80b      	bhi.n	801b928 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b910:	a301      	add	r3, pc, #4	; (adr r3, 801b918 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801b912:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b916:	bf00      	nop
 801b918:	0801b92d 	.word	0x0801b92d
 801b91c:	0801b903 	.word	0x0801b903
 801b920:	0801b931 	.word	0x0801b931
 801b924:	0801b8f7 	.word	0x0801b8f7
 801b928:	2000      	movs	r0, #0
 801b92a:	4770      	bx	lr
 801b92c:	2001      	movs	r0, #1
 801b92e:	4770      	bx	lr
 801b930:	f04f 30ff 	mov.w	r0, #4294967295
 801b934:	4770      	bx	lr
 801b936:	bf00      	nop
 801b938:	2400ae6e 	.word	0x2400ae6e

0801b93c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801b93c:	b180      	cbz	r0, 801b960 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801b93e:	2903      	cmp	r1, #3
 801b940:	d81c      	bhi.n	801b97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b942:	e8df f001 	tbb	[pc, r1]
 801b946:	021d      	.short	0x021d
 801b948:	071f      	.short	0x071f
 801b94a:	4b10      	ldr	r3, [pc, #64]	; (801b98c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b94c:	8818      	ldrh	r0, [r3, #0]
 801b94e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b952:	4770      	bx	lr
 801b954:	4b0d      	ldr	r3, [pc, #52]	; (801b98c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801b956:	8818      	ldrh	r0, [r3, #0]
 801b958:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b95c:	4240      	negs	r0, r0
 801b95e:	4770      	bx	lr
 801b960:	2903      	cmp	r1, #3
 801b962:	d80b      	bhi.n	801b97c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801b964:	a301      	add	r3, pc, #4	; (adr r3, 801b96c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801b966:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b96a:	bf00      	nop
 801b96c:	0801b94b 	.word	0x0801b94b
 801b970:	0801b985 	.word	0x0801b985
 801b974:	0801b955 	.word	0x0801b955
 801b978:	0801b981 	.word	0x0801b981
 801b97c:	2000      	movs	r0, #0
 801b97e:	4770      	bx	lr
 801b980:	2001      	movs	r0, #1
 801b982:	4770      	bx	lr
 801b984:	f04f 30ff 	mov.w	r0, #4294967295
 801b988:	4770      	bx	lr
 801b98a:	bf00      	nop
 801b98c:	2400ae6e 	.word	0x2400ae6e

0801b990 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801b990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b994:	b099      	sub	sp, #100	; 0x64
 801b996:	910b      	str	r1, [sp, #44]	; 0x2c
 801b998:	a914      	add	r1, sp, #80	; 0x50
 801b99a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801b99e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801b9a2:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801b9a6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801b9aa:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801b9ae:	e881 000c 	stmia.w	r1, {r2, r3}
 801b9b2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801b9b6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801b9ba:	9309      	str	r3, [sp, #36]	; 0x24
 801b9bc:	f891 900d 	ldrb.w	r9, [r1, #13]
 801b9c0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801b9c4:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801b9c8:	9310      	str	r3, [sp, #64]	; 0x40
 801b9ca:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801b9ce:	930c      	str	r3, [sp, #48]	; 0x30
 801b9d0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801b9d4:	798f      	ldrb	r7, [r1, #6]
 801b9d6:	431f      	orrs	r7, r3
 801b9d8:	f000 8195 	beq.w	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b9dc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801b9e0:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801b9e4:	f891 9007 	ldrb.w	r9, [r1, #7]
 801b9e8:	ea59 0903 	orrs.w	r9, r9, r3
 801b9ec:	f000 818b 	beq.w	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801b9f0:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801b9f4:	b29b      	uxth	r3, r3
 801b9f6:	2d00      	cmp	r5, #0
 801b9f8:	f000 812e 	beq.w	801bc58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801b9fc:	1aed      	subs	r5, r5, r3
 801b9fe:	b2ad      	uxth	r5, r5
 801ba00:	042b      	lsls	r3, r5, #16
 801ba02:	d502      	bpl.n	801ba0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801ba04:	1b64      	subs	r4, r4, r5
 801ba06:	2500      	movs	r5, #0
 801ba08:	b224      	sxth	r4, r4
 801ba0a:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ba0e:	a814      	add	r0, sp, #80	; 0x50
 801ba10:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801ba14:	428c      	cmp	r4, r1
 801ba16:	b28b      	uxth	r3, r1
 801ba18:	bfbf      	itttt	lt
 801ba1a:	18ed      	addlt	r5, r5, r3
 801ba1c:	1b2c      	sublt	r4, r5, r4
 801ba1e:	b2a5      	uxthlt	r5, r4
 801ba20:	460c      	movlt	r4, r1
 801ba22:	8891      	ldrh	r1, [r2, #4]
 801ba24:	440b      	add	r3, r1
 801ba26:	4621      	mov	r1, r4
 801ba28:	b21b      	sxth	r3, r3
 801ba2a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba2c:	88d3      	ldrh	r3, [r2, #6]
 801ba2e:	8852      	ldrh	r2, [r2, #2]
 801ba30:	4413      	add	r3, r2
 801ba32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba34:	b21b      	sxth	r3, r3
 801ba36:	930d      	str	r3, [sp, #52]	; 0x34
 801ba38:	4bbd      	ldr	r3, [pc, #756]	; (801bd30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801ba3a:	f893 b000 	ldrb.w	fp, [r3]
 801ba3e:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ba42:	f1dc 0300 	rsbs	r3, ip, #0
 801ba46:	eb43 030c 	adc.w	r3, r3, ip
 801ba4a:	930e      	str	r3, [sp, #56]	; 0x38
 801ba4c:	4653      	mov	r3, sl
 801ba4e:	f7f8 ff1f 	bl	8014890 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ba52:	4621      	mov	r1, r4
 801ba54:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801ba58:	4653      	mov	r3, sl
 801ba5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba5c:	a814      	add	r0, sp, #80	; 0x50
 801ba5e:	f7f8 ff34 	bl	80148ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ba62:	a918      	add	r1, sp, #96	; 0x60
 801ba64:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ba68:	a817      	add	r0, sp, #92	; 0x5c
 801ba6a:	f7f9 f855 	bl	8014b18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ba6e:	f1ba 0f00 	cmp.w	sl, #0
 801ba72:	f040 80f4 	bne.w	801bc5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801ba76:	f1bb 0f01 	cmp.w	fp, #1
 801ba7a:	f040 80f8 	bne.w	801bc6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ba7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	f040 8145 	bne.w	801bd10 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801ba86:	b2ba      	uxth	r2, r7
 801ba88:	b905      	cbnz	r5, 801ba8c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801ba8a:	b16e      	cbz	r6, 801baa8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801ba8c:	fb06 5302 	mla	r3, r6, r2, r5
 801ba90:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801ba92:	4631      	mov	r1, r6
 801ba94:	fb08 f303 	mul.w	r3, r8, r3
 801ba98:	f003 0607 	and.w	r6, r3, #7
 801ba9c:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801baa0:	9328      	str	r3, [sp, #160]	; 0xa0
 801baa2:	eba9 0301 	sub.w	r3, r9, r1
 801baa6:	930a      	str	r3, [sp, #40]	; 0x28
 801baa8:	4651      	mov	r1, sl
 801baaa:	980e      	ldr	r0, [sp, #56]	; 0x38
 801baac:	f7ff ff1c 	bl	801b8e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801bab0:	4681      	mov	r9, r0
 801bab2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bab4:	f7ff ff42 	bl	801b93c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801bab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801baba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801babc:	4683      	mov	fp, r0
 801babe:	eba3 0a01 	sub.w	sl, r3, r1
 801bac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bac4:	459a      	cmp	sl, r3
 801bac6:	bfa8      	it	ge
 801bac8:	469a      	movge	sl, r3
 801baca:	f1ba 0f00 	cmp.w	sl, #0
 801bace:	f340 811a 	ble.w	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bad2:	1b64      	subs	r4, r4, r5
 801bad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bad6:	1b1c      	subs	r4, r3, r4
 801bad8:	42bc      	cmp	r4, r7
 801bada:	bfd4      	ite	le
 801badc:	ebc5 0504 	rsble	r5, r5, r4
 801bae0:	ebc5 0507 	rsbgt	r5, r5, r7
 801bae4:	2d00      	cmp	r5, #0
 801bae6:	f340 810e 	ble.w	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801baea:	1b52      	subs	r2, r2, r5
 801baec:	fb08 f302 	mul.w	r3, r8, r2
 801baf0:	930f      	str	r3, [sp, #60]	; 0x3c
 801baf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	f040 8116 	bne.w	801bd26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bafa:	4b8e      	ldr	r3, [pc, #568]	; (801bd34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801bafc:	6818      	ldr	r0, [r3, #0]
 801bafe:	6803      	ldr	r3, [r0, #0]
 801bb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb02:	4798      	blx	r3
 801bb04:	2301      	movs	r3, #1
 801bb06:	4a8c      	ldr	r2, [pc, #560]	; (801bd38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801bb08:	fa03 f308 	lsl.w	r3, r3, r8
 801bb0c:	8811      	ldrh	r1, [r2, #0]
 801bb0e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bb12:	3b01      	subs	r3, #1
 801bb14:	b2db      	uxtb	r3, r3
 801bb16:	930e      	str	r3, [sp, #56]	; 0x38
 801bb18:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801bb1c:	fb01 2303 	mla	r3, r1, r3, r2
 801bb20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bb24:	930a      	str	r3, [sp, #40]	; 0x28
 801bb26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801bb2c:	9313      	str	r3, [sp, #76]	; 0x4c
 801bb2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb30:	0a19      	lsrs	r1, r3, #8
 801bb32:	b2cb      	uxtb	r3, r1
 801bb34:	9312      	str	r3, [sp, #72]	; 0x48
 801bb36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb38:	b2db      	uxtb	r3, r3
 801bb3a:	9311      	str	r3, [sp, #68]	; 0x44
 801bb3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bb3e:	095a      	lsrs	r2, r3, #5
 801bb40:	4b7e      	ldr	r3, [pc, #504]	; (801bd3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801bb42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bb46:	400b      	ands	r3, r1
 801bb48:	4313      	orrs	r3, r2
 801bb4a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bb4c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bb50:	4313      	orrs	r3, r2
 801bb52:	b29b      	uxth	r3, r3
 801bb54:	9310      	str	r3, [sp, #64]	; 0x40
 801bb56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bb58:	781a      	ldrb	r2, [r3, #0]
 801bb5a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801bb5e:	fb05 b919 	mls	r9, r5, r9, fp
 801bb62:	4132      	asrs	r2, r6
 801bb64:	fb03 fb05 	mul.w	fp, r3, r5
 801bb68:	930d      	str	r3, [sp, #52]	; 0x34
 801bb6a:	b2d2      	uxtb	r2, r2
 801bb6c:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801bb70:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801bb74:	f0c0 80f5 	bcc.w	801bd62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801bb78:	46ae      	mov	lr, r5
 801bb7a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801bb7e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801bb82:	f0c0 80dd 	bcc.w	801bd40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801bb86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb88:	4013      	ands	r3, r2
 801bb8a:	d055      	beq.n	801bc38 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801bb8c:	20ff      	movs	r0, #255	; 0xff
 801bb8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bb90:	fb90 f1f1 	sdiv	r1, r0, r1
 801bb94:	434b      	muls	r3, r1
 801bb96:	2bfe      	cmp	r3, #254	; 0xfe
 801bb98:	dd03      	ble.n	801bba2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801bb9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bb9c:	4281      	cmp	r1, r0
 801bb9e:	f000 80c4 	beq.w	801bd2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801bba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bba4:	f8bc 4000 	ldrh.w	r4, [ip]
 801bba8:	fb11 f303 	smulbb	r3, r1, r3
 801bbac:	1220      	asrs	r0, r4, #8
 801bbae:	b29b      	uxth	r3, r3
 801bbb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bbb4:	1c59      	adds	r1, r3, #1
 801bbb6:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bbba:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bbbe:	10e1      	asrs	r1, r4, #3
 801bbc0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bbc4:	00e4      	lsls	r4, r4, #3
 801bbc6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bbca:	b29f      	uxth	r7, r3
 801bbcc:	43db      	mvns	r3, r3
 801bbce:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801bbd2:	b2db      	uxtb	r3, r3
 801bbd4:	b2e4      	uxtb	r4, r4
 801bbd6:	9309      	str	r3, [sp, #36]	; 0x24
 801bbd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbda:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801bbde:	fb13 f907 	smulbb	r9, r3, r7
 801bbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbe4:	fb00 9003 	mla	r0, r0, r3, r9
 801bbe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bbea:	fb13 f907 	smulbb	r9, r3, r7
 801bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbf0:	b280      	uxth	r0, r0
 801bbf2:	fb01 9103 	mla	r1, r1, r3, r9
 801bbf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bbf8:	fb13 f707 	smulbb	r7, r3, r7
 801bbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbfe:	b289      	uxth	r1, r1
 801bc00:	fb04 7403 	mla	r4, r4, r3, r7
 801bc04:	1c43      	adds	r3, r0, #1
 801bc06:	b2a4      	uxth	r4, r4
 801bc08:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bc0c:	f104 0901 	add.w	r9, r4, #1
 801bc10:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bc14:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801bc18:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801bc1c:	ea49 0000 	orr.w	r0, r9, r0
 801bc20:	f101 0901 	add.w	r9, r1, #1
 801bc24:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801bc28:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bc2c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bc30:	ea40 0009 	orr.w	r0, r0, r9
 801bc34:	f8ac 0000 	strh.w	r0, [ip]
 801bc38:	4446      	add	r6, r8
 801bc3a:	b2b6      	uxth	r6, r6
 801bc3c:	2e07      	cmp	r6, #7
 801bc3e:	bf89      	itett	hi
 801bc40:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801bc42:	fa42 f208 	asrls.w	r2, r2, r8
 801bc46:	2600      	movhi	r6, #0
 801bc48:	785a      	ldrbhi	r2, [r3, #1]
 801bc4a:	bf8a      	itet	hi
 801bc4c:	3301      	addhi	r3, #1
 801bc4e:	b2d2      	uxtbls	r2, r2
 801bc50:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801bc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc54:	449c      	add	ip, r3
 801bc56:	e792      	b.n	801bb7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801bc58:	441c      	add	r4, r3
 801bc5a:	b224      	sxth	r4, r4
 801bc5c:	e6d5      	b.n	801ba0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801bc5e:	f1ba 0f01 	cmp.w	sl, #1
 801bc62:	f47f af0c 	bne.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bc66:	f1bb 0f01 	cmp.w	fp, #1
 801bc6a:	f47f af08 	bne.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bc6e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801bd34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801bc72:	f8db 0000 	ldr.w	r0, [fp]
 801bc76:	6803      	ldr	r3, [r0, #0]
 801bc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc7a:	4798      	blx	r3
 801bc7c:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801bc80:	465a      	mov	r2, fp
 801bc82:	d006      	beq.n	801bc92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bc84:	f1b8 0f04 	cmp.w	r8, #4
 801bc88:	d140      	bne.n	801bd0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801bc8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc8c:	3300      	adds	r3, #0
 801bc8e:	bf18      	it	ne
 801bc90:	2301      	movne	r3, #1
 801bc92:	0580      	lsls	r0, r0, #22
 801bc94:	d56e      	bpl.n	801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bc96:	f1b8 0f08 	cmp.w	r8, #8
 801bc9a:	d16b      	bne.n	801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	bf0c      	ite	eq
 801bca0:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801bca4:	f44f 7180 	movne.w	r1, #256	; 0x100
 801bca8:	2d00      	cmp	r5, #0
 801bcaa:	f47f aee8 	bne.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bcae:	2e00      	cmp	r6, #0
 801bcb0:	f47f aee5 	bne.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bcb4:	19e3      	adds	r3, r4, r7
 801bcb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bcb8:	4283      	cmp	r3, r0
 801bcba:	f73f aee0 	bgt.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bcc2:	444b      	add	r3, r9
 801bcc4:	4283      	cmp	r3, r0
 801bcc6:	f73f aeda 	bgt.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bcca:	b2bf      	uxth	r7, r7
 801bccc:	f1b8 0f08 	cmp.w	r8, #8
 801bcd0:	6810      	ldr	r0, [r2, #0]
 801bcd2:	f04f 0500 	mov.w	r5, #0
 801bcd6:	bf18      	it	ne
 801bcd8:	3701      	addne	r7, #1
 801bcda:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801bcde:	6804      	ldr	r4, [r0, #0]
 801bce0:	bf18      	it	ne
 801bce2:	f027 0701 	bicne.w	r7, r7, #1
 801bce6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801bcea:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801bcee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bcf0:	bf18      	it	ne
 801bcf2:	b2bf      	uxthne	r7, r7
 801bcf4:	9104      	str	r1, [sp, #16]
 801bcf6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bcf8:	e9cd 7900 	strd	r7, r9, [sp]
 801bcfc:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bd00:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bd02:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801bd04:	47a0      	blx	r4
 801bd06:	b019      	add	sp, #100	; 0x64
 801bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	e7c0      	b.n	801bc92 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bd10:	2208      	movs	r2, #8
 801bd12:	fb92 f3f8 	sdiv	r3, r2, r8
 801bd16:	1e5a      	subs	r2, r3, #1
 801bd18:	443a      	add	r2, r7
 801bd1a:	fb92 f2f3 	sdiv	r2, r2, r3
 801bd1e:	fb12 f203 	smulbb	r2, r2, r3
 801bd22:	b292      	uxth	r2, r2
 801bd24:	e6b0      	b.n	801ba88 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801bd26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bd28:	e6ec      	b.n	801bb04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801bd2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bd2c:	e782      	b.n	801bc34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801bd2e:	bf00      	nop
 801bd30:	2400ae6c 	.word	0x2400ae6c
 801bd34:	2400ae74 	.word	0x2400ae74
 801bd38:	2400ae6e 	.word	0x2400ae6e
 801bd3c:	00fff800 	.word	0x00fff800
 801bd40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd42:	b153      	cbz	r3, 801bd5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801bd44:	441e      	add	r6, r3
 801bd46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bd48:	b2b6      	uxth	r6, r6
 801bd4a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801bd4e:	f006 0607 	and.w	r6, r6, #7
 801bd52:	781a      	ldrb	r2, [r3, #0]
 801bd54:	9328      	str	r3, [sp, #160]	; 0xa0
 801bd56:	4132      	asrs	r2, r6
 801bd58:	b2d2      	uxtb	r2, r2
 801bd5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd5c:	445b      	add	r3, fp
 801bd5e:	930a      	str	r3, [sp, #40]	; 0x28
 801bd60:	e706      	b.n	801bb70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801bd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d1ce      	bne.n	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bd68:	4b05      	ldr	r3, [pc, #20]	; (801bd80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801bd6a:	6818      	ldr	r0, [r3, #0]
 801bd6c:	6803      	ldr	r3, [r0, #0]
 801bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd70:	4798      	blx	r3
 801bd72:	e7c8      	b.n	801bd06 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	f43f ae82 	beq.w	801ba7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bd7e:	e793      	b.n	801bca8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801bd80:	2400ae74 	.word	0x2400ae74

0801bd84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801bd84:	b538      	push	{r3, r4, r5, lr}
 801bd86:	4c15      	ldr	r4, [pc, #84]	; (801bddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801bd88:	4605      	mov	r5, r0
 801bd8a:	7823      	ldrb	r3, [r4, #0]
 801bd8c:	f3bf 8f5b 	dmb	ish
 801bd90:	07da      	lsls	r2, r3, #31
 801bd92:	d40b      	bmi.n	801bdac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bd94:	4620      	mov	r0, r4
 801bd96:	f007 fa68 	bl	802326a <__cxa_guard_acquire>
 801bd9a:	b138      	cbz	r0, 801bdac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f007 fa70 	bl	8023282 <__cxa_guard_release>
 801bda2:	4a0f      	ldr	r2, [pc, #60]	; (801bde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bda4:	490f      	ldr	r1, [pc, #60]	; (801bde4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801bda6:	4810      	ldr	r0, [pc, #64]	; (801bde8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bda8:	f007 fa58 	bl	802325c <__aeabi_atexit>
 801bdac:	4c0f      	ldr	r4, [pc, #60]	; (801bdec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801bdae:	7823      	ldrb	r3, [r4, #0]
 801bdb0:	f3bf 8f5b 	dmb	ish
 801bdb4:	07db      	lsls	r3, r3, #31
 801bdb6:	d40b      	bmi.n	801bdd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bdb8:	4620      	mov	r0, r4
 801bdba:	f007 fa56 	bl	802326a <__cxa_guard_acquire>
 801bdbe:	b138      	cbz	r0, 801bdd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	f007 fa5e 	bl	8023282 <__cxa_guard_release>
 801bdc6:	4a06      	ldr	r2, [pc, #24]	; (801bde0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801bdc8:	4909      	ldr	r1, [pc, #36]	; (801bdf0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801bdca:	480a      	ldr	r0, [pc, #40]	; (801bdf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bdcc:	f007 fa46 	bl	802325c <__aeabi_atexit>
 801bdd0:	4b05      	ldr	r3, [pc, #20]	; (801bde8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801bdd2:	612b      	str	r3, [r5, #16]
 801bdd4:	4b07      	ldr	r3, [pc, #28]	; (801bdf4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bdd6:	616b      	str	r3, [r5, #20]
 801bdd8:	bd38      	pop	{r3, r4, r5, pc}
 801bdda:	bf00      	nop
 801bddc:	2400af40 	.word	0x2400af40
 801bde0:	24000000 	.word	0x24000000
 801bde4:	08019fa3 	.word	0x08019fa3
 801bde8:	24000090 	.word	0x24000090
 801bdec:	2400af44 	.word	0x2400af44
 801bdf0:	08019fa1 	.word	0x08019fa1
 801bdf4:	24000094 	.word	0x24000094

0801bdf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801bdf8:	b538      	push	{r3, r4, r5, lr}
 801bdfa:	4c15      	ldr	r4, [pc, #84]	; (801be50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	7823      	ldrb	r3, [r4, #0]
 801be00:	f3bf 8f5b 	dmb	ish
 801be04:	07da      	lsls	r2, r3, #31
 801be06:	d40b      	bmi.n	801be20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801be08:	4620      	mov	r0, r4
 801be0a:	f007 fa2e 	bl	802326a <__cxa_guard_acquire>
 801be0e:	b138      	cbz	r0, 801be20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801be10:	4620      	mov	r0, r4
 801be12:	f007 fa36 	bl	8023282 <__cxa_guard_release>
 801be16:	4a0f      	ldr	r2, [pc, #60]	; (801be54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801be18:	490f      	ldr	r1, [pc, #60]	; (801be58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801be1a:	4810      	ldr	r0, [pc, #64]	; (801be5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801be1c:	f007 fa1e 	bl	802325c <__aeabi_atexit>
 801be20:	4c0f      	ldr	r4, [pc, #60]	; (801be60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801be22:	7823      	ldrb	r3, [r4, #0]
 801be24:	f3bf 8f5b 	dmb	ish
 801be28:	07db      	lsls	r3, r3, #31
 801be2a:	d40b      	bmi.n	801be44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801be2c:	4620      	mov	r0, r4
 801be2e:	f007 fa1c 	bl	802326a <__cxa_guard_acquire>
 801be32:	b138      	cbz	r0, 801be44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801be34:	4620      	mov	r0, r4
 801be36:	f007 fa24 	bl	8023282 <__cxa_guard_release>
 801be3a:	4a06      	ldr	r2, [pc, #24]	; (801be54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801be3c:	4909      	ldr	r1, [pc, #36]	; (801be64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801be3e:	480a      	ldr	r0, [pc, #40]	; (801be68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801be40:	f007 fa0c 	bl	802325c <__aeabi_atexit>
 801be44:	4b05      	ldr	r3, [pc, #20]	; (801be5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801be46:	60ab      	str	r3, [r5, #8]
 801be48:	4b07      	ldr	r3, [pc, #28]	; (801be68 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801be4a:	60eb      	str	r3, [r5, #12]
 801be4c:	bd38      	pop	{r3, r4, r5, pc}
 801be4e:	bf00      	nop
 801be50:	2400af18 	.word	0x2400af18
 801be54:	24000000 	.word	0x24000000
 801be58:	08019fa7 	.word	0x08019fa7
 801be5c:	24000068 	.word	0x24000068
 801be60:	2400af1c 	.word	0x2400af1c
 801be64:	08019fa5 	.word	0x08019fa5
 801be68:	2400006c 	.word	0x2400006c

0801be6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801be6c:	b510      	push	{r4, lr}
 801be6e:	4604      	mov	r4, r0
 801be70:	f7ff ff88 	bl	801bd84 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801be74:	4620      	mov	r0, r4
 801be76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be7a:	f7ff bfbd 	b.w	801bdf8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801be80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801be80:	b538      	push	{r3, r4, r5, lr}
 801be82:	4c15      	ldr	r4, [pc, #84]	; (801bed8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801be84:	4605      	mov	r5, r0
 801be86:	7823      	ldrb	r3, [r4, #0]
 801be88:	f3bf 8f5b 	dmb	ish
 801be8c:	07da      	lsls	r2, r3, #31
 801be8e:	d40b      	bmi.n	801bea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801be90:	4620      	mov	r0, r4
 801be92:	f007 f9ea 	bl	802326a <__cxa_guard_acquire>
 801be96:	b138      	cbz	r0, 801bea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801be98:	4620      	mov	r0, r4
 801be9a:	f007 f9f2 	bl	8023282 <__cxa_guard_release>
 801be9e:	4a0f      	ldr	r2, [pc, #60]	; (801bedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bea0:	490f      	ldr	r1, [pc, #60]	; (801bee0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bea2:	4810      	ldr	r0, [pc, #64]	; (801bee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bea4:	f007 f9da 	bl	802325c <__aeabi_atexit>
 801bea8:	4c0f      	ldr	r4, [pc, #60]	; (801bee8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801beaa:	7823      	ldrb	r3, [r4, #0]
 801beac:	f3bf 8f5b 	dmb	ish
 801beb0:	07db      	lsls	r3, r3, #31
 801beb2:	d40b      	bmi.n	801becc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801beb4:	4620      	mov	r0, r4
 801beb6:	f007 f9d8 	bl	802326a <__cxa_guard_acquire>
 801beba:	b138      	cbz	r0, 801becc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bebc:	4620      	mov	r0, r4
 801bebe:	f007 f9e0 	bl	8023282 <__cxa_guard_release>
 801bec2:	4a06      	ldr	r2, [pc, #24]	; (801bedc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bec4:	4909      	ldr	r1, [pc, #36]	; (801beec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bec6:	480a      	ldr	r0, [pc, #40]	; (801bef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bec8:	f007 f9c8 	bl	802325c <__aeabi_atexit>
 801becc:	4b05      	ldr	r3, [pc, #20]	; (801bee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bece:	622b      	str	r3, [r5, #32]
 801bed0:	4b07      	ldr	r3, [pc, #28]	; (801bef0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bed2:	626b      	str	r3, [r5, #36]	; 0x24
 801bed4:	bd38      	pop	{r3, r4, r5, pc}
 801bed6:	bf00      	nop
 801bed8:	2400af48 	.word	0x2400af48
 801bedc:	24000000 	.word	0x24000000
 801bee0:	08019f9b 	.word	0x08019f9b
 801bee4:	24000098 	.word	0x24000098
 801bee8:	2400af4c 	.word	0x2400af4c
 801beec:	08019f99 	.word	0x08019f99
 801bef0:	2400009c 	.word	0x2400009c

0801bef4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bef4:	b538      	push	{r3, r4, r5, lr}
 801bef6:	4c15      	ldr	r4, [pc, #84]	; (801bf4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bef8:	4605      	mov	r5, r0
 801befa:	7823      	ldrb	r3, [r4, #0]
 801befc:	f3bf 8f5b 	dmb	ish
 801bf00:	07da      	lsls	r2, r3, #31
 801bf02:	d40b      	bmi.n	801bf1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bf04:	4620      	mov	r0, r4
 801bf06:	f007 f9b0 	bl	802326a <__cxa_guard_acquire>
 801bf0a:	b138      	cbz	r0, 801bf1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f007 f9b8 	bl	8023282 <__cxa_guard_release>
 801bf12:	4a0f      	ldr	r2, [pc, #60]	; (801bf50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bf14:	490f      	ldr	r1, [pc, #60]	; (801bf54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bf16:	4810      	ldr	r0, [pc, #64]	; (801bf58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bf18:	f007 f9a0 	bl	802325c <__aeabi_atexit>
 801bf1c:	4c0f      	ldr	r4, [pc, #60]	; (801bf5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bf1e:	7823      	ldrb	r3, [r4, #0]
 801bf20:	f3bf 8f5b 	dmb	ish
 801bf24:	07db      	lsls	r3, r3, #31
 801bf26:	d40b      	bmi.n	801bf40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bf28:	4620      	mov	r0, r4
 801bf2a:	f007 f99e 	bl	802326a <__cxa_guard_acquire>
 801bf2e:	b138      	cbz	r0, 801bf40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bf30:	4620      	mov	r0, r4
 801bf32:	f007 f9a6 	bl	8023282 <__cxa_guard_release>
 801bf36:	4a06      	ldr	r2, [pc, #24]	; (801bf50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bf38:	4909      	ldr	r1, [pc, #36]	; (801bf60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801bf3a:	480a      	ldr	r0, [pc, #40]	; (801bf64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bf3c:	f007 f98e 	bl	802325c <__aeabi_atexit>
 801bf40:	4b05      	ldr	r3, [pc, #20]	; (801bf58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bf42:	61ab      	str	r3, [r5, #24]
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801bf46:	61eb      	str	r3, [r5, #28]
 801bf48:	bd38      	pop	{r3, r4, r5, pc}
 801bf4a:	bf00      	nop
 801bf4c:	2400af20 	.word	0x2400af20
 801bf50:	24000000 	.word	0x24000000
 801bf54:	08019f9f 	.word	0x08019f9f
 801bf58:	24000070 	.word	0x24000070
 801bf5c:	2400af24 	.word	0x2400af24
 801bf60:	08019f9d 	.word	0x08019f9d
 801bf64:	24000074 	.word	0x24000074

0801bf68 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801bf68:	b510      	push	{r4, lr}
 801bf6a:	4604      	mov	r4, r0
 801bf6c:	f7ff ff88 	bl	801be80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801bf70:	4620      	mov	r0, r4
 801bf72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf76:	f7ff bfbd 	b.w	801bef4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801bf7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801bf7c:	b538      	push	{r3, r4, r5, lr}
 801bf7e:	4c15      	ldr	r4, [pc, #84]	; (801bfd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801bf80:	4605      	mov	r5, r0
 801bf82:	7823      	ldrb	r3, [r4, #0]
 801bf84:	f3bf 8f5b 	dmb	ish
 801bf88:	07da      	lsls	r2, r3, #31
 801bf8a:	d40b      	bmi.n	801bfa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	f007 f96c 	bl	802326a <__cxa_guard_acquire>
 801bf92:	b138      	cbz	r0, 801bfa4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801bf94:	4620      	mov	r0, r4
 801bf96:	f007 f974 	bl	8023282 <__cxa_guard_release>
 801bf9a:	4a0f      	ldr	r2, [pc, #60]	; (801bfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bf9c:	490f      	ldr	r1, [pc, #60]	; (801bfdc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801bf9e:	4810      	ldr	r0, [pc, #64]	; (801bfe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bfa0:	f007 f95c 	bl	802325c <__aeabi_atexit>
 801bfa4:	4c0f      	ldr	r4, [pc, #60]	; (801bfe4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801bfa6:	7823      	ldrb	r3, [r4, #0]
 801bfa8:	f3bf 8f5b 	dmb	ish
 801bfac:	07db      	lsls	r3, r3, #31
 801bfae:	d40b      	bmi.n	801bfc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bfb0:	4620      	mov	r0, r4
 801bfb2:	f007 f95a 	bl	802326a <__cxa_guard_acquire>
 801bfb6:	b138      	cbz	r0, 801bfc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801bfb8:	4620      	mov	r0, r4
 801bfba:	f007 f962 	bl	8023282 <__cxa_guard_release>
 801bfbe:	4a06      	ldr	r2, [pc, #24]	; (801bfd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801bfc0:	4909      	ldr	r1, [pc, #36]	; (801bfe8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801bfc2:	480a      	ldr	r0, [pc, #40]	; (801bfec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bfc4:	f007 f94a 	bl	802325c <__aeabi_atexit>
 801bfc8:	4b05      	ldr	r3, [pc, #20]	; (801bfe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801bfca:	632b      	str	r3, [r5, #48]	; 0x30
 801bfcc:	4b07      	ldr	r3, [pc, #28]	; (801bfec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801bfce:	636b      	str	r3, [r5, #52]	; 0x34
 801bfd0:	bd38      	pop	{r3, r4, r5, pc}
 801bfd2:	bf00      	nop
 801bfd4:	2400af58 	.word	0x2400af58
 801bfd8:	24000000 	.word	0x24000000
 801bfdc:	08019f93 	.word	0x08019f93
 801bfe0:	240000a8 	.word	0x240000a8
 801bfe4:	2400af5c 	.word	0x2400af5c
 801bfe8:	08019f91 	.word	0x08019f91
 801bfec:	240000ac 	.word	0x240000ac

0801bff0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801bff0:	b538      	push	{r3, r4, r5, lr}
 801bff2:	4c15      	ldr	r4, [pc, #84]	; (801c048 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801bff4:	4605      	mov	r5, r0
 801bff6:	7823      	ldrb	r3, [r4, #0]
 801bff8:	f3bf 8f5b 	dmb	ish
 801bffc:	07da      	lsls	r2, r3, #31
 801bffe:	d40b      	bmi.n	801c018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c000:	4620      	mov	r0, r4
 801c002:	f007 f932 	bl	802326a <__cxa_guard_acquire>
 801c006:	b138      	cbz	r0, 801c018 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c008:	4620      	mov	r0, r4
 801c00a:	f007 f93a 	bl	8023282 <__cxa_guard_release>
 801c00e:	4a0f      	ldr	r2, [pc, #60]	; (801c04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c010:	490f      	ldr	r1, [pc, #60]	; (801c050 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c012:	4810      	ldr	r0, [pc, #64]	; (801c054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c014:	f007 f922 	bl	802325c <__aeabi_atexit>
 801c018:	4c0f      	ldr	r4, [pc, #60]	; (801c058 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c01a:	7823      	ldrb	r3, [r4, #0]
 801c01c:	f3bf 8f5b 	dmb	ish
 801c020:	07db      	lsls	r3, r3, #31
 801c022:	d40b      	bmi.n	801c03c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c024:	4620      	mov	r0, r4
 801c026:	f007 f920 	bl	802326a <__cxa_guard_acquire>
 801c02a:	b138      	cbz	r0, 801c03c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c02c:	4620      	mov	r0, r4
 801c02e:	f007 f928 	bl	8023282 <__cxa_guard_release>
 801c032:	4a06      	ldr	r2, [pc, #24]	; (801c04c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c034:	4909      	ldr	r1, [pc, #36]	; (801c05c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c036:	480a      	ldr	r0, [pc, #40]	; (801c060 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c038:	f007 f910 	bl	802325c <__aeabi_atexit>
 801c03c:	4b05      	ldr	r3, [pc, #20]	; (801c054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c03e:	62ab      	str	r3, [r5, #40]	; 0x28
 801c040:	4b07      	ldr	r3, [pc, #28]	; (801c060 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c042:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c044:	bd38      	pop	{r3, r4, r5, pc}
 801c046:	bf00      	nop
 801c048:	2400af28 	.word	0x2400af28
 801c04c:	24000000 	.word	0x24000000
 801c050:	08019f97 	.word	0x08019f97
 801c054:	24000078 	.word	0x24000078
 801c058:	2400af2c 	.word	0x2400af2c
 801c05c:	08019f95 	.word	0x08019f95
 801c060:	2400007c 	.word	0x2400007c

0801c064 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c064:	b510      	push	{r4, lr}
 801c066:	4604      	mov	r4, r0
 801c068:	f7ff ff88 	bl	801bf7c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c06c:	4620      	mov	r0, r4
 801c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c072:	f7ff bfbd 	b.w	801bff0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801c078:	b538      	push	{r3, r4, r5, lr}
 801c07a:	4c15      	ldr	r4, [pc, #84]	; (801c0d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801c07c:	4605      	mov	r5, r0
 801c07e:	7823      	ldrb	r3, [r4, #0]
 801c080:	f3bf 8f5b 	dmb	ish
 801c084:	07da      	lsls	r2, r3, #31
 801c086:	d40b      	bmi.n	801c0a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c088:	4620      	mov	r0, r4
 801c08a:	f007 f8ee 	bl	802326a <__cxa_guard_acquire>
 801c08e:	b138      	cbz	r0, 801c0a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c090:	4620      	mov	r0, r4
 801c092:	f007 f8f6 	bl	8023282 <__cxa_guard_release>
 801c096:	4a0f      	ldr	r2, [pc, #60]	; (801c0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c098:	490f      	ldr	r1, [pc, #60]	; (801c0d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801c09a:	4810      	ldr	r0, [pc, #64]	; (801c0dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c09c:	f007 f8de 	bl	802325c <__aeabi_atexit>
 801c0a0:	4c0f      	ldr	r4, [pc, #60]	; (801c0e0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801c0a2:	7823      	ldrb	r3, [r4, #0]
 801c0a4:	f3bf 8f5b 	dmb	ish
 801c0a8:	07db      	lsls	r3, r3, #31
 801c0aa:	d40b      	bmi.n	801c0c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	f007 f8dc 	bl	802326a <__cxa_guard_acquire>
 801c0b2:	b138      	cbz	r0, 801c0c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f007 f8e4 	bl	8023282 <__cxa_guard_release>
 801c0ba:	4a06      	ldr	r2, [pc, #24]	; (801c0d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c0bc:	4909      	ldr	r1, [pc, #36]	; (801c0e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801c0be:	480a      	ldr	r0, [pc, #40]	; (801c0e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c0c0:	f007 f8cc 	bl	802325c <__aeabi_atexit>
 801c0c4:	4b05      	ldr	r3, [pc, #20]	; (801c0dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c0c6:	652b      	str	r3, [r5, #80]	; 0x50
 801c0c8:	4b07      	ldr	r3, [pc, #28]	; (801c0e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c0ca:	656b      	str	r3, [r5, #84]	; 0x54
 801c0cc:	bd38      	pop	{r3, r4, r5, pc}
 801c0ce:	bf00      	nop
 801c0d0:	2400af60 	.word	0x2400af60
 801c0d4:	24000000 	.word	0x24000000
 801c0d8:	08019f83 	.word	0x08019f83
 801c0dc:	240000b0 	.word	0x240000b0
 801c0e0:	2400af64 	.word	0x2400af64
 801c0e4:	08019f81 	.word	0x08019f81
 801c0e8:	240000b4 	.word	0x240000b4

0801c0ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801c0ec:	b538      	push	{r3, r4, r5, lr}
 801c0ee:	4c15      	ldr	r4, [pc, #84]	; (801c144 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801c0f0:	4605      	mov	r5, r0
 801c0f2:	7823      	ldrb	r3, [r4, #0]
 801c0f4:	f3bf 8f5b 	dmb	ish
 801c0f8:	07da      	lsls	r2, r3, #31
 801c0fa:	d40b      	bmi.n	801c114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f007 f8b4 	bl	802326a <__cxa_guard_acquire>
 801c102:	b138      	cbz	r0, 801c114 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c104:	4620      	mov	r0, r4
 801c106:	f007 f8bc 	bl	8023282 <__cxa_guard_release>
 801c10a:	4a0f      	ldr	r2, [pc, #60]	; (801c148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c10c:	490f      	ldr	r1, [pc, #60]	; (801c14c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801c10e:	4810      	ldr	r0, [pc, #64]	; (801c150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c110:	f007 f8a4 	bl	802325c <__aeabi_atexit>
 801c114:	4c0f      	ldr	r4, [pc, #60]	; (801c154 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801c116:	7823      	ldrb	r3, [r4, #0]
 801c118:	f3bf 8f5b 	dmb	ish
 801c11c:	07db      	lsls	r3, r3, #31
 801c11e:	d40b      	bmi.n	801c138 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c120:	4620      	mov	r0, r4
 801c122:	f007 f8a2 	bl	802326a <__cxa_guard_acquire>
 801c126:	b138      	cbz	r0, 801c138 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c128:	4620      	mov	r0, r4
 801c12a:	f007 f8aa 	bl	8023282 <__cxa_guard_release>
 801c12e:	4a06      	ldr	r2, [pc, #24]	; (801c148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c130:	4909      	ldr	r1, [pc, #36]	; (801c158 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801c132:	480a      	ldr	r0, [pc, #40]	; (801c15c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c134:	f007 f892 	bl	802325c <__aeabi_atexit>
 801c138:	4b05      	ldr	r3, [pc, #20]	; (801c150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c13a:	64ab      	str	r3, [r5, #72]	; 0x48
 801c13c:	4b07      	ldr	r3, [pc, #28]	; (801c15c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c13e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c140:	bd38      	pop	{r3, r4, r5, pc}
 801c142:	bf00      	nop
 801c144:	2400af68 	.word	0x2400af68
 801c148:	24000000 	.word	0x24000000
 801c14c:	08019f87 	.word	0x08019f87
 801c150:	240000b8 	.word	0x240000b8
 801c154:	2400af6c 	.word	0x2400af6c
 801c158:	08019f85 	.word	0x08019f85
 801c15c:	240000bc 	.word	0x240000bc

0801c160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801c160:	b538      	push	{r3, r4, r5, lr}
 801c162:	4c15      	ldr	r4, [pc, #84]	; (801c1b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801c164:	4605      	mov	r5, r0
 801c166:	7823      	ldrb	r3, [r4, #0]
 801c168:	f3bf 8f5b 	dmb	ish
 801c16c:	07da      	lsls	r2, r3, #31
 801c16e:	d40b      	bmi.n	801c188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c170:	4620      	mov	r0, r4
 801c172:	f007 f87a 	bl	802326a <__cxa_guard_acquire>
 801c176:	b138      	cbz	r0, 801c188 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c178:	4620      	mov	r0, r4
 801c17a:	f007 f882 	bl	8023282 <__cxa_guard_release>
 801c17e:	4a0f      	ldr	r2, [pc, #60]	; (801c1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c180:	490f      	ldr	r1, [pc, #60]	; (801c1c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801c182:	4810      	ldr	r0, [pc, #64]	; (801c1c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c184:	f007 f86a 	bl	802325c <__aeabi_atexit>
 801c188:	4c0f      	ldr	r4, [pc, #60]	; (801c1c8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801c18a:	7823      	ldrb	r3, [r4, #0]
 801c18c:	f3bf 8f5b 	dmb	ish
 801c190:	07db      	lsls	r3, r3, #31
 801c192:	d40b      	bmi.n	801c1ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c194:	4620      	mov	r0, r4
 801c196:	f007 f868 	bl	802326a <__cxa_guard_acquire>
 801c19a:	b138      	cbz	r0, 801c1ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c19c:	4620      	mov	r0, r4
 801c19e:	f007 f870 	bl	8023282 <__cxa_guard_release>
 801c1a2:	4a06      	ldr	r2, [pc, #24]	; (801c1bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c1a4:	4909      	ldr	r1, [pc, #36]	; (801c1cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801c1a6:	480a      	ldr	r0, [pc, #40]	; (801c1d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c1a8:	f007 f858 	bl	802325c <__aeabi_atexit>
 801c1ac:	4b05      	ldr	r3, [pc, #20]	; (801c1c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c1ae:	642b      	str	r3, [r5, #64]	; 0x40
 801c1b0:	4b07      	ldr	r3, [pc, #28]	; (801c1d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c1b2:	646b      	str	r3, [r5, #68]	; 0x44
 801c1b4:	bd38      	pop	{r3, r4, r5, pc}
 801c1b6:	bf00      	nop
 801c1b8:	2400af30 	.word	0x2400af30
 801c1bc:	24000000 	.word	0x24000000
 801c1c0:	08019f8b 	.word	0x08019f8b
 801c1c4:	24000080 	.word	0x24000080
 801c1c8:	2400af34 	.word	0x2400af34
 801c1cc:	08019f89 	.word	0x08019f89
 801c1d0:	24000084 	.word	0x24000084

0801c1d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801c1d4:	b538      	push	{r3, r4, r5, lr}
 801c1d6:	4c15      	ldr	r4, [pc, #84]	; (801c22c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801c1d8:	4605      	mov	r5, r0
 801c1da:	7823      	ldrb	r3, [r4, #0]
 801c1dc:	f3bf 8f5b 	dmb	ish
 801c1e0:	07da      	lsls	r2, r3, #31
 801c1e2:	d40b      	bmi.n	801c1fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c1e4:	4620      	mov	r0, r4
 801c1e6:	f007 f840 	bl	802326a <__cxa_guard_acquire>
 801c1ea:	b138      	cbz	r0, 801c1fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f007 f848 	bl	8023282 <__cxa_guard_release>
 801c1f2:	4a0f      	ldr	r2, [pc, #60]	; (801c230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c1f4:	490f      	ldr	r1, [pc, #60]	; (801c234 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801c1f6:	4810      	ldr	r0, [pc, #64]	; (801c238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c1f8:	f007 f830 	bl	802325c <__aeabi_atexit>
 801c1fc:	4c0f      	ldr	r4, [pc, #60]	; (801c23c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801c1fe:	7823      	ldrb	r3, [r4, #0]
 801c200:	f3bf 8f5b 	dmb	ish
 801c204:	07db      	lsls	r3, r3, #31
 801c206:	d40b      	bmi.n	801c220 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c208:	4620      	mov	r0, r4
 801c20a:	f007 f82e 	bl	802326a <__cxa_guard_acquire>
 801c20e:	b138      	cbz	r0, 801c220 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c210:	4620      	mov	r0, r4
 801c212:	f007 f836 	bl	8023282 <__cxa_guard_release>
 801c216:	4a06      	ldr	r2, [pc, #24]	; (801c230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c218:	4909      	ldr	r1, [pc, #36]	; (801c240 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801c21a:	480a      	ldr	r0, [pc, #40]	; (801c244 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c21c:	f007 f81e 	bl	802325c <__aeabi_atexit>
 801c220:	4b05      	ldr	r3, [pc, #20]	; (801c238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c222:	63ab      	str	r3, [r5, #56]	; 0x38
 801c224:	4b07      	ldr	r3, [pc, #28]	; (801c244 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c226:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c228:	bd38      	pop	{r3, r4, r5, pc}
 801c22a:	bf00      	nop
 801c22c:	2400af50 	.word	0x2400af50
 801c230:	24000000 	.word	0x24000000
 801c234:	08019f8f 	.word	0x08019f8f
 801c238:	240000a0 	.word	0x240000a0
 801c23c:	2400af54 	.word	0x2400af54
 801c240:	08019f8d 	.word	0x08019f8d
 801c244:	240000a4 	.word	0x240000a4

0801c248 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801c248:	b510      	push	{r4, lr}
 801c24a:	4604      	mov	r4, r0
 801c24c:	f7ff ff14 	bl	801c078 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801c250:	4620      	mov	r0, r4
 801c252:	f7ff ff85 	bl	801c160 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801c256:	4620      	mov	r0, r4
 801c258:	f7ff ff48 	bl	801c0ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801c25c:	4620      	mov	r0, r4
 801c25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c262:	f7ff bfb7 	b.w	801c1d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801c268 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c268:	b538      	push	{r3, r4, r5, lr}
 801c26a:	4c15      	ldr	r4, [pc, #84]	; (801c2c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c26c:	4605      	mov	r5, r0
 801c26e:	7823      	ldrb	r3, [r4, #0]
 801c270:	f3bf 8f5b 	dmb	ish
 801c274:	07da      	lsls	r2, r3, #31
 801c276:	d40b      	bmi.n	801c290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c278:	4620      	mov	r0, r4
 801c27a:	f006 fff6 	bl	802326a <__cxa_guard_acquire>
 801c27e:	b138      	cbz	r0, 801c290 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c280:	4620      	mov	r0, r4
 801c282:	f006 fffe 	bl	8023282 <__cxa_guard_release>
 801c286:	4a0f      	ldr	r2, [pc, #60]	; (801c2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c288:	490f      	ldr	r1, [pc, #60]	; (801c2c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c28a:	4810      	ldr	r0, [pc, #64]	; (801c2cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c28c:	f006 ffe6 	bl	802325c <__aeabi_atexit>
 801c290:	4c0f      	ldr	r4, [pc, #60]	; (801c2d0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c292:	7823      	ldrb	r3, [r4, #0]
 801c294:	f3bf 8f5b 	dmb	ish
 801c298:	07db      	lsls	r3, r3, #31
 801c29a:	d40b      	bmi.n	801c2b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c29c:	4620      	mov	r0, r4
 801c29e:	f006 ffe4 	bl	802326a <__cxa_guard_acquire>
 801c2a2:	b138      	cbz	r0, 801c2b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	f006 ffec 	bl	8023282 <__cxa_guard_release>
 801c2aa:	4a06      	ldr	r2, [pc, #24]	; (801c2c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c2ac:	4909      	ldr	r1, [pc, #36]	; (801c2d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c2ae:	480a      	ldr	r0, [pc, #40]	; (801c2d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c2b0:	f006 ffd4 	bl	802325c <__aeabi_atexit>
 801c2b4:	4b05      	ldr	r3, [pc, #20]	; (801c2cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c2b6:	662b      	str	r3, [r5, #96]	; 0x60
 801c2b8:	4b07      	ldr	r3, [pc, #28]	; (801c2d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c2ba:	666b      	str	r3, [r5, #100]	; 0x64
 801c2bc:	bd38      	pop	{r3, r4, r5, pc}
 801c2be:	bf00      	nop
 801c2c0:	2400af38 	.word	0x2400af38
 801c2c4:	24000000 	.word	0x24000000
 801c2c8:	08019f7b 	.word	0x08019f7b
 801c2cc:	24000088 	.word	0x24000088
 801c2d0:	2400af3c 	.word	0x2400af3c
 801c2d4:	08019f79 	.word	0x08019f79
 801c2d8:	2400008c 	.word	0x2400008c

0801c2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c2dc:	b538      	push	{r3, r4, r5, lr}
 801c2de:	4c15      	ldr	r4, [pc, #84]	; (801c334 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c2e0:	4605      	mov	r5, r0
 801c2e2:	7823      	ldrb	r3, [r4, #0]
 801c2e4:	f3bf 8f5b 	dmb	ish
 801c2e8:	07da      	lsls	r2, r3, #31
 801c2ea:	d40b      	bmi.n	801c304 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f006 ffbc 	bl	802326a <__cxa_guard_acquire>
 801c2f2:	b138      	cbz	r0, 801c304 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c2f4:	4620      	mov	r0, r4
 801c2f6:	f006 ffc4 	bl	8023282 <__cxa_guard_release>
 801c2fa:	4a0f      	ldr	r2, [pc, #60]	; (801c338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c2fc:	490f      	ldr	r1, [pc, #60]	; (801c33c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c2fe:	4810      	ldr	r0, [pc, #64]	; (801c340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c300:	f006 ffac 	bl	802325c <__aeabi_atexit>
 801c304:	4c0f      	ldr	r4, [pc, #60]	; (801c344 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c306:	7823      	ldrb	r3, [r4, #0]
 801c308:	f3bf 8f5b 	dmb	ish
 801c30c:	07db      	lsls	r3, r3, #31
 801c30e:	d40b      	bmi.n	801c328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c310:	4620      	mov	r0, r4
 801c312:	f006 ffaa 	bl	802326a <__cxa_guard_acquire>
 801c316:	b138      	cbz	r0, 801c328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c318:	4620      	mov	r0, r4
 801c31a:	f006 ffb2 	bl	8023282 <__cxa_guard_release>
 801c31e:	4a06      	ldr	r2, [pc, #24]	; (801c338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c320:	4909      	ldr	r1, [pc, #36]	; (801c348 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c322:	480a      	ldr	r0, [pc, #40]	; (801c34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c324:	f006 ff9a 	bl	802325c <__aeabi_atexit>
 801c328:	4b05      	ldr	r3, [pc, #20]	; (801c340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c32a:	65ab      	str	r3, [r5, #88]	; 0x58
 801c32c:	4b07      	ldr	r3, [pc, #28]	; (801c34c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c32e:	65eb      	str	r3, [r5, #92]	; 0x5c
 801c330:	bd38      	pop	{r3, r4, r5, pc}
 801c332:	bf00      	nop
 801c334:	2400af10 	.word	0x2400af10
 801c338:	24000000 	.word	0x24000000
 801c33c:	08019f7f 	.word	0x08019f7f
 801c340:	24000060 	.word	0x24000060
 801c344:	2400af14 	.word	0x2400af14
 801c348:	08019f7d 	.word	0x08019f7d
 801c34c:	24000064 	.word	0x24000064

0801c350 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801c350:	b510      	push	{r4, lr}
 801c352:	4604      	mov	r4, r0
 801c354:	f7ff ff88 	bl	801c268 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c358:	4620      	mov	r0, r4
 801c35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c35e:	f7ff bfbd 	b.w	801c2dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c364:	b538      	push	{r3, r4, r5, lr}
 801c366:	4c15      	ldr	r4, [pc, #84]	; (801c3bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c368:	4605      	mov	r5, r0
 801c36a:	7823      	ldrb	r3, [r4, #0]
 801c36c:	f3bf 8f5b 	dmb	ish
 801c370:	07da      	lsls	r2, r3, #31
 801c372:	d40b      	bmi.n	801c38c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c374:	4620      	mov	r0, r4
 801c376:	f006 ff78 	bl	802326a <__cxa_guard_acquire>
 801c37a:	b138      	cbz	r0, 801c38c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c37c:	4620      	mov	r0, r4
 801c37e:	f006 ff80 	bl	8023282 <__cxa_guard_release>
 801c382:	4a0f      	ldr	r2, [pc, #60]	; (801c3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c384:	490f      	ldr	r1, [pc, #60]	; (801c3c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c386:	4810      	ldr	r0, [pc, #64]	; (801c3c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c388:	f006 ff68 	bl	802325c <__aeabi_atexit>
 801c38c:	4c0f      	ldr	r4, [pc, #60]	; (801c3cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c38e:	7823      	ldrb	r3, [r4, #0]
 801c390:	f3bf 8f5b 	dmb	ish
 801c394:	07db      	lsls	r3, r3, #31
 801c396:	d40b      	bmi.n	801c3b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c398:	4620      	mov	r0, r4
 801c39a:	f006 ff66 	bl	802326a <__cxa_guard_acquire>
 801c39e:	b138      	cbz	r0, 801c3b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c3a0:	4620      	mov	r0, r4
 801c3a2:	f006 ff6e 	bl	8023282 <__cxa_guard_release>
 801c3a6:	4a06      	ldr	r2, [pc, #24]	; (801c3c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c3a8:	4909      	ldr	r1, [pc, #36]	; (801c3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c3aa:	480a      	ldr	r0, [pc, #40]	; (801c3d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c3ac:	f006 ff56 	bl	802325c <__aeabi_atexit>
 801c3b0:	4b05      	ldr	r3, [pc, #20]	; (801c3c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c3b2:	672b      	str	r3, [r5, #112]	; 0x70
 801c3b4:	4b07      	ldr	r3, [pc, #28]	; (801c3d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c3b6:	676b      	str	r3, [r5, #116]	; 0x74
 801c3b8:	bd38      	pop	{r3, r4, r5, pc}
 801c3ba:	bf00      	nop
 801c3bc:	2400af08 	.word	0x2400af08
 801c3c0:	24000000 	.word	0x24000000
 801c3c4:	08019f73 	.word	0x08019f73
 801c3c8:	24000058 	.word	0x24000058
 801c3cc:	2400af0c 	.word	0x2400af0c
 801c3d0:	08019f71 	.word	0x08019f71
 801c3d4:	2400005c 	.word	0x2400005c

0801c3d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c3d8:	b538      	push	{r3, r4, r5, lr}
 801c3da:	4c15      	ldr	r4, [pc, #84]	; (801c430 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c3dc:	4605      	mov	r5, r0
 801c3de:	7823      	ldrb	r3, [r4, #0]
 801c3e0:	f3bf 8f5b 	dmb	ish
 801c3e4:	07da      	lsls	r2, r3, #31
 801c3e6:	d40b      	bmi.n	801c400 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c3e8:	4620      	mov	r0, r4
 801c3ea:	f006 ff3e 	bl	802326a <__cxa_guard_acquire>
 801c3ee:	b138      	cbz	r0, 801c400 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	f006 ff46 	bl	8023282 <__cxa_guard_release>
 801c3f6:	4a0f      	ldr	r2, [pc, #60]	; (801c434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c3f8:	490f      	ldr	r1, [pc, #60]	; (801c438 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c3fa:	4810      	ldr	r0, [pc, #64]	; (801c43c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c3fc:	f006 ff2e 	bl	802325c <__aeabi_atexit>
 801c400:	4c0f      	ldr	r4, [pc, #60]	; (801c440 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c402:	7823      	ldrb	r3, [r4, #0]
 801c404:	f3bf 8f5b 	dmb	ish
 801c408:	07db      	lsls	r3, r3, #31
 801c40a:	d40b      	bmi.n	801c424 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c40c:	4620      	mov	r0, r4
 801c40e:	f006 ff2c 	bl	802326a <__cxa_guard_acquire>
 801c412:	b138      	cbz	r0, 801c424 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c414:	4620      	mov	r0, r4
 801c416:	f006 ff34 	bl	8023282 <__cxa_guard_release>
 801c41a:	4a06      	ldr	r2, [pc, #24]	; (801c434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c41c:	4909      	ldr	r1, [pc, #36]	; (801c444 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c41e:	480a      	ldr	r0, [pc, #40]	; (801c448 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c420:	f006 ff1c 	bl	802325c <__aeabi_atexit>
 801c424:	4b05      	ldr	r3, [pc, #20]	; (801c43c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c426:	66ab      	str	r3, [r5, #104]	; 0x68
 801c428:	4b07      	ldr	r3, [pc, #28]	; (801c448 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c42a:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c42c:	bd38      	pop	{r3, r4, r5, pc}
 801c42e:	bf00      	nop
 801c430:	2400af00 	.word	0x2400af00
 801c434:	24000000 	.word	0x24000000
 801c438:	08019f77 	.word	0x08019f77
 801c43c:	24000050 	.word	0x24000050
 801c440:	2400af04 	.word	0x2400af04
 801c444:	08019f75 	.word	0x08019f75
 801c448:	24000054 	.word	0x24000054

0801c44c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c44c:	b510      	push	{r4, lr}
 801c44e:	4604      	mov	r4, r0
 801c450:	f7ff ff88 	bl	801c364 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c454:	4620      	mov	r0, r4
 801c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c45a:	f7ff bfbd 	b.w	801c3d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c45e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c45e:	b510      	push	{r4, lr}
 801c460:	4604      	mov	r4, r0
 801c462:	f7ff fff3 	bl	801c44c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c466:	4620      	mov	r0, r4
 801c468:	f7ff ff72 	bl	801c350 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c46c:	4620      	mov	r0, r4
 801c46e:	f7ff fdf9 	bl	801c064 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c472:	4620      	mov	r0, r4
 801c474:	f7ff fcfa 	bl	801be6c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c478:	4620      	mov	r0, r4
 801c47a:	f7ff fd75 	bl	801bf68 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c47e:	4620      	mov	r0, r4
 801c480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c484:	f7ff bee0 	b.w	801c248 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c488 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c48c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801c490:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801c494:	2d00      	cmp	r5, #0
 801c496:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801c49a:	fb05 4c0e 	mla	ip, r5, lr, r4
 801c49e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801c4a2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801c4a6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c4aa:	eb02 0a0c 	add.w	sl, r2, ip
 801c4ae:	8808      	ldrh	r0, [r1, #0]
 801c4b0:	f2c0 80b0 	blt.w	801c614 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c4b4:	45ab      	cmp	fp, r5
 801c4b6:	f340 80ad 	ble.w	801c614 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c4ba:	2c00      	cmp	r4, #0
 801c4bc:	f2c0 80a8 	blt.w	801c610 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c4c0:	45a6      	cmp	lr, r4
 801c4c2:	f340 80a5 	ble.w	801c610 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c4c6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c4ca:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801c4ce:	1c62      	adds	r2, r4, #1
 801c4d0:	f100 80a3 	bmi.w	801c61a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c4d4:	4596      	cmp	lr, r2
 801c4d6:	f340 80a0 	ble.w	801c61a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c4da:	f1b9 0f00 	cmp.w	r9, #0
 801c4de:	f000 809c 	beq.w	801c61a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c4e2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c4e6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c4ea:	3501      	adds	r5, #1
 801c4ec:	f100 8099 	bmi.w	801c622 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c4f0:	45ab      	cmp	fp, r5
 801c4f2:	f340 8096 	ble.w	801c622 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c4f6:	2f00      	cmp	r7, #0
 801c4f8:	f000 8093 	beq.w	801c622 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c4fc:	2c00      	cmp	r4, #0
 801c4fe:	f2c0 808e 	blt.w	801c61e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c502:	45a6      	cmp	lr, r4
 801c504:	f340 808b 	ble.w	801c61e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c508:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801c50c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801c510:	3401      	adds	r4, #1
 801c512:	f100 8089 	bmi.w	801c628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c516:	45a6      	cmp	lr, r4
 801c518:	f340 8086 	ble.w	801c628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c51c:	f1b9 0f00 	cmp.w	r9, #0
 801c520:	f000 8082 	beq.w	801c628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c524:	44d6      	add	lr, sl
 801c526:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c52a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c52e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c532:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c536:	fb19 fe07 	smulbb	lr, r9, r7
 801c53a:	f1c7 0210 	rsb	r2, r7, #16
 801c53e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c542:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c546:	eba2 0209 	sub.w	r2, r2, r9
 801c54a:	ea44 0808 	orr.w	r8, r4, r8
 801c54e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c552:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c556:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c55a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c55e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c562:	ea44 0c0c 	orr.w	ip, r4, ip
 801c566:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c56a:	fb04 f40c 	mul.w	r4, r4, ip
 801c56e:	fb02 4808 	mla	r8, r2, r8, r4
 801c572:	041a      	lsls	r2, r3, #16
 801c574:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c578:	b2b4      	uxth	r4, r6
 801c57a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c57e:	43f6      	mvns	r6, r6
 801c580:	4313      	orrs	r3, r2
 801c582:	042a      	lsls	r2, r5, #16
 801c584:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c588:	b2f6      	uxtb	r6, r6
 801c58a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c58e:	fb0e 8303 	mla	r3, lr, r3, r8
 801c592:	432a      	orrs	r2, r5
 801c594:	fb07 3202 	mla	r2, r7, r2, r3
 801c598:	10c7      	asrs	r7, r0, #3
 801c59a:	0d53      	lsrs	r3, r2, #21
 801c59c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c5a0:	0952      	lsrs	r2, r2, #5
 801c5a2:	fb17 f706 	smulbb	r7, r7, r6
 801c5a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c5aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c5ae:	431a      	orrs	r2, r3
 801c5b0:	b293      	uxth	r3, r2
 801c5b2:	1202      	asrs	r2, r0, #8
 801c5b4:	121d      	asrs	r5, r3, #8
 801c5b6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c5ba:	00c0      	lsls	r0, r0, #3
 801c5bc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c5c0:	fb12 f206 	smulbb	r2, r2, r6
 801c5c4:	b2c0      	uxtb	r0, r0
 801c5c6:	fb05 2504 	mla	r5, r5, r4, r2
 801c5ca:	10da      	asrs	r2, r3, #3
 801c5cc:	fb10 f006 	smulbb	r0, r0, r6
 801c5d0:	00db      	lsls	r3, r3, #3
 801c5d2:	b2ad      	uxth	r5, r5
 801c5d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c5d8:	b2db      	uxtb	r3, r3
 801c5da:	fb02 7204 	mla	r2, r2, r4, r7
 801c5de:	fb03 0004 	mla	r0, r3, r4, r0
 801c5e2:	1c6b      	adds	r3, r5, #1
 801c5e4:	b292      	uxth	r2, r2
 801c5e6:	b280      	uxth	r0, r0
 801c5e8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c5ec:	1c43      	adds	r3, r0, #1
 801c5ee:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c5f2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c5f6:	1c50      	adds	r0, r2, #1
 801c5f8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c5fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c600:	0952      	lsrs	r2, r2, #5
 801c602:	432b      	orrs	r3, r5
 801c604:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c608:	4313      	orrs	r3, r2
 801c60a:	800b      	strh	r3, [r1, #0]
 801c60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c610:	4680      	mov	r8, r0
 801c612:	e75c      	b.n	801c4ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801c614:	4684      	mov	ip, r0
 801c616:	4680      	mov	r8, r0
 801c618:	e767      	b.n	801c4ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c61a:	4684      	mov	ip, r0
 801c61c:	e765      	b.n	801c4ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c61e:	4605      	mov	r5, r0
 801c620:	e776      	b.n	801c510 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801c622:	4603      	mov	r3, r0
 801c624:	4605      	mov	r5, r0
 801c626:	e782      	b.n	801c52e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c628:	4603      	mov	r3, r0
 801c62a:	e780      	b.n	801c52e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801c62c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c630:	b099      	sub	sp, #100	; 0x64
 801c632:	9215      	str	r2, [sp, #84]	; 0x54
 801c634:	9309      	str	r3, [sp, #36]	; 0x24
 801c636:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c638:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801c63c:	9016      	str	r0, [sp, #88]	; 0x58
 801c63e:	930d      	str	r3, [sp, #52]	; 0x34
 801c640:	6850      	ldr	r0, [r2, #4]
 801c642:	910c      	str	r1, [sp, #48]	; 0x30
 801c644:	6812      	ldr	r2, [r2, #0]
 801c646:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c64a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801c64e:	fb00 1303 	mla	r3, r0, r3, r1
 801c652:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c656:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c65c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c65e:	685e      	ldr	r6, [r3, #4]
 801c660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c662:	3604      	adds	r6, #4
 801c664:	43db      	mvns	r3, r3
 801c666:	b2db      	uxtb	r3, r3
 801c668:	930a      	str	r3, [sp, #40]	; 0x28
 801c66a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	dc03      	bgt.n	801c678 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c672:	2b00      	cmp	r3, #0
 801c674:	f340 8225 	ble.w	801cac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c678:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c67a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c67e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c682:	1e48      	subs	r0, r1, #1
 801c684:	1e57      	subs	r7, r2, #1
 801c686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c688:	2b00      	cmp	r3, #0
 801c68a:	f340 80e3 	ble.w	801c854 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c68e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c692:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c696:	d406      	bmi.n	801c6a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c698:	4584      	cmp	ip, r0
 801c69a:	da04      	bge.n	801c6a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	db02      	blt.n	801c6a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c6a0:	42bb      	cmp	r3, r7
 801c6a2:	f2c0 80d8 	blt.w	801c856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c6a6:	f11c 0c01 	adds.w	ip, ip, #1
 801c6aa:	f100 80c9 	bmi.w	801c840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c6ae:	4561      	cmp	r1, ip
 801c6b0:	f2c0 80c6 	blt.w	801c840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c6b4:	3301      	adds	r3, #1
 801c6b6:	f100 80c3 	bmi.w	801c840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c6ba:	429a      	cmp	r2, r3
 801c6bc:	f2c0 80c0 	blt.w	801c840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c6c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c6c4:	4647      	mov	r7, r8
 801c6c6:	f1bb 0f00 	cmp.w	fp, #0
 801c6ca:	f340 80e3 	ble.w	801c894 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c6ce:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c6d0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c6d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c6d6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c6da:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c6de:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c6e2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c6e6:	689b      	ldr	r3, [r3, #8]
 801c6e8:	f100 8121 	bmi.w	801c92e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c6ec:	f103 39ff 	add.w	r9, r3, #4294967295
 801c6f0:	454a      	cmp	r2, r9
 801c6f2:	f280 811c 	bge.w	801c92e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c6f6:	f1bc 0f00 	cmp.w	ip, #0
 801c6fa:	f2c0 8118 	blt.w	801c92e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c6fe:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c702:	45cc      	cmp	ip, r9
 801c704:	f280 8113 	bge.w	801c92e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c708:	b21b      	sxth	r3, r3
 801c70a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c70c:	fb0c 2203 	mla	r2, ip, r3, r2
 801c710:	eb04 0902 	add.w	r9, r4, r2
 801c714:	5ca2      	ldrb	r2, [r4, r2]
 801c716:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c71a:	2800      	cmp	r0, #0
 801c71c:	f000 80fe 	beq.w	801c91c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c720:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c724:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c728:	9211      	str	r2, [sp, #68]	; 0x44
 801c72a:	b151      	cbz	r1, 801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c72c:	eb09 0203 	add.w	r2, r9, r3
 801c730:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c734:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c738:	930f      	str	r3, [sp, #60]	; 0x3c
 801c73a:	7853      	ldrb	r3, [r2, #1]
 801c73c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c740:	9312      	str	r3, [sp, #72]	; 0x48
 801c742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c744:	fb10 f201 	smulbb	r2, r0, r1
 801c748:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c74a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c74e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c752:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801c756:	10d2      	asrs	r2, r2, #3
 801c758:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c75c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c760:	ea4c 0c03 	orr.w	ip, ip, r3
 801c764:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c766:	041b      	lsls	r3, r3, #16
 801c768:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c76c:	4323      	orrs	r3, r4
 801c76e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c770:	4353      	muls	r3, r2
 801c772:	fb09 330c 	mla	r3, r9, ip, r3
 801c776:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c77a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c77e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c782:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c786:	f1c1 0c10 	rsb	ip, r1, #16
 801c78a:	ebac 0c00 	sub.w	ip, ip, r0
 801c78e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c792:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c796:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c79c:	0418      	lsls	r0, r3, #16
 801c79e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c7a2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c7a6:	4318      	orrs	r0, r3
 801c7a8:	fb02 c200 	mla	r2, r2, r0, ip
 801c7ac:	8838      	ldrh	r0, [r7, #0]
 801c7ae:	0d53      	lsrs	r3, r2, #21
 801c7b0:	0952      	lsrs	r2, r2, #5
 801c7b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c7b6:	1201      	asrs	r1, r0, #8
 801c7b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c7bc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c7c0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c7c4:	00c0      	lsls	r0, r0, #3
 801c7c6:	431a      	orrs	r2, r3
 801c7c8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c7cc:	fb11 f104 	smulbb	r1, r1, r4
 801c7d0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c7d4:	b292      	uxth	r2, r2
 801c7d6:	fb1e fe04 	smulbb	lr, lr, r4
 801c7da:	b2c0      	uxtb	r0, r0
 801c7dc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c7e0:	fb10 f004 	smulbb	r0, r0, r4
 801c7e4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c7e8:	fb0c 1c03 	mla	ip, ip, r3, r1
 801c7ec:	10d1      	asrs	r1, r2, #3
 801c7ee:	00d2      	lsls	r2, r2, #3
 801c7f0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c7f4:	fa1f fc8c 	uxth.w	ip, ip
 801c7f8:	b2d2      	uxtb	r2, r2
 801c7fa:	fb01 e103 	mla	r1, r1, r3, lr
 801c7fe:	fb02 0303 	mla	r3, r2, r3, r0
 801c802:	b289      	uxth	r1, r1
 801c804:	b29a      	uxth	r2, r3
 801c806:	f10c 0301 	add.w	r3, ip, #1
 801c80a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c80e:	1c53      	adds	r3, r2, #1
 801c810:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c814:	1c4a      	adds	r2, r1, #1
 801c816:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c81a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c81e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c822:	0949      	lsrs	r1, r1, #5
 801c824:	ea43 030c 	orr.w	r3, r3, ip
 801c828:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c82c:	430b      	orrs	r3, r1
 801c82e:	803b      	strh	r3, [r7, #0]
 801c830:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c832:	3702      	adds	r7, #2
 801c834:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c838:	449a      	add	sl, r3
 801c83a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c83c:	441d      	add	r5, r3
 801c83e:	e742      	b.n	801c6c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c840:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c842:	f108 0802 	add.w	r8, r8, #2
 801c846:	449a      	add	sl, r3
 801c848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c84a:	441d      	add	r5, r3
 801c84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c84e:	3b01      	subs	r3, #1
 801c850:	9309      	str	r3, [sp, #36]	; 0x24
 801c852:	e718      	b.n	801c686 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c854:	d023      	beq.n	801c89e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c858:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c85a:	3b01      	subs	r3, #1
 801c85c:	fb00 a003 	mla	r0, r0, r3, sl
 801c860:	1400      	asrs	r0, r0, #16
 801c862:	f53f af2d 	bmi.w	801c6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c866:	3901      	subs	r1, #1
 801c868:	4288      	cmp	r0, r1
 801c86a:	f6bf af29 	bge.w	801c6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c86e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c870:	fb01 5303 	mla	r3, r1, r3, r5
 801c874:	141b      	asrs	r3, r3, #16
 801c876:	f53f af23 	bmi.w	801c6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c87a:	3a01      	subs	r2, #1
 801c87c:	4293      	cmp	r3, r2
 801c87e:	f6bf af1f 	bge.w	801c6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c882:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c886:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c88a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c88e:	f1be 0f00 	cmp.w	lr, #0
 801c892:	dc6c      	bgt.n	801c96e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c896:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c89a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	f340 810e 	ble.w	801cac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c8a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c8aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c8ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c8b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c8b4:	eef0 6a62 	vmov.f32	s13, s5
 801c8b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c8bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8c4:	ee16 aa90 	vmov	sl, s13
 801c8c8:	eef0 6a43 	vmov.f32	s13, s6
 801c8cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8d0:	ee16 5a90 	vmov	r5, s13
 801c8d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8ec:	ee12 2a90 	vmov	r2, s5
 801c8f0:	eef0 2a47 	vmov.f32	s5, s14
 801c8f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8f8:	ee13 2a10 	vmov	r2, s6
 801c8fc:	9325      	str	r3, [sp, #148]	; 0x94
 801c8fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c900:	eeb0 3a67 	vmov.f32	s6, s15
 801c904:	fb92 f3f3 	sdiv	r3, r2, r3
 801c908:	9326      	str	r3, [sp, #152]	; 0x98
 801c90a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c90c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c90e:	3b01      	subs	r3, #1
 801c910:	930c      	str	r3, [sp, #48]	; 0x30
 801c912:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c914:	bf08      	it	eq
 801c916:	4613      	moveq	r3, r2
 801c918:	9309      	str	r3, [sp, #36]	; 0x24
 801c91a:	e6a6      	b.n	801c66a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c91c:	2900      	cmp	r1, #0
 801c91e:	f43f af10 	beq.w	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c922:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c926:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c92a:	930f      	str	r3, [sp, #60]	; 0x3c
 801c92c:	e709      	b.n	801c742 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c92e:	f112 0901 	adds.w	r9, r2, #1
 801c932:	f53f af7d 	bmi.w	801c830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c936:	454b      	cmp	r3, r9
 801c938:	f6ff af7a 	blt.w	801c830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c93c:	f11c 0901 	adds.w	r9, ip, #1
 801c940:	f53f af76 	bmi.w	801c830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c944:	45ce      	cmp	lr, r9
 801c946:	f6ff af73 	blt.w	801c830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c94a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c94c:	b21b      	sxth	r3, r3
 801c94e:	9202      	str	r2, [sp, #8]
 801c950:	fa0f f28e 	sxth.w	r2, lr
 801c954:	9300      	str	r3, [sp, #0]
 801c956:	4633      	mov	r3, r6
 801c958:	9201      	str	r2, [sp, #4]
 801c95a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c95c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c960:	e9cd c003 	strd	ip, r0, [sp, #12]
 801c964:	4639      	mov	r1, r7
 801c966:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c968:	f7ff fd8e 	bl	801c488 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801c96c:	e760      	b.n	801c830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801c96e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c970:	ea4f 422a 	mov.w	r2, sl, asr #16
 801c974:	1429      	asrs	r1, r5, #16
 801c976:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c978:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801c97c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801c980:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c984:	fb03 2101 	mla	r1, r3, r1, r2
 801c988:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c98a:	440a      	add	r2, r1
 801c98c:	5c61      	ldrb	r1, [r4, r1]
 801c98e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801c992:	f1bc 0f00 	cmp.w	ip, #0
 801c996:	f000 808c 	beq.w	801cab2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801c99a:	7857      	ldrb	r7, [r2, #1]
 801c99c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801c9a0:	9413      	str	r4, [sp, #76]	; 0x4c
 801c9a2:	b140      	cbz	r0, 801c9b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c9a4:	18d7      	adds	r7, r2, r3
 801c9a6:	5cd3      	ldrb	r3, [r2, r3]
 801c9a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9ac:	9310      	str	r3, [sp, #64]	; 0x40
 801c9ae:	787b      	ldrb	r3, [r7, #1]
 801c9b0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9b4:	9314      	str	r3, [sp, #80]	; 0x50
 801c9b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c9b8:	fb1c f200 	smulbb	r2, ip, r0
 801c9bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c9be:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c9c2:	041f      	lsls	r7, r3, #16
 801c9c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c9c8:	10d2      	asrs	r2, r2, #3
 801c9ca:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801c9ce:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c9d2:	431f      	orrs	r7, r3
 801c9d4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801c9d8:	9317      	str	r3, [sp, #92]	; 0x5c
 801c9da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c9dc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801c9de:	041b      	lsls	r3, r3, #16
 801c9e0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c9e4:	ea43 030b 	orr.w	r3, r3, fp
 801c9e8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c9ec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c9f0:	4353      	muls	r3, r2
 801c9f2:	fb04 3707 	mla	r7, r4, r7, r3
 801c9f6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801c9fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c9fc:	ea43 0b01 	orr.w	fp, r3, r1
 801ca00:	f1c0 0110 	rsb	r1, r0, #16
 801ca04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ca06:	eba1 0c0c 	sub.w	ip, r1, ip
 801ca0a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801ca0e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801ca12:	fb0c 770b 	mla	r7, ip, fp, r7
 801ca16:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ca1a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801ca1e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ca22:	ea4c 0c0b 	orr.w	ip, ip, fp
 801ca26:	fb02 770c 	mla	r7, r2, ip, r7
 801ca2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca2c:	0d79      	lsrs	r1, r7, #21
 801ca2e:	8812      	ldrh	r2, [r2, #0]
 801ca30:	097f      	lsrs	r7, r7, #5
 801ca32:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ca36:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801ca3a:	430f      	orrs	r7, r1
 801ca3c:	1211      	asrs	r1, r2, #8
 801ca3e:	b2bb      	uxth	r3, r7
 801ca40:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ca44:	10d7      	asrs	r7, r2, #3
 801ca46:	fb11 f104 	smulbb	r1, r1, r4
 801ca4a:	1218      	asrs	r0, r3, #8
 801ca4c:	00d2      	lsls	r2, r2, #3
 801ca4e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ca52:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ca56:	fb17 f704 	smulbb	r7, r7, r4
 801ca5a:	b2d2      	uxtb	r2, r2
 801ca5c:	fb00 1009 	mla	r0, r0, r9, r1
 801ca60:	10d9      	asrs	r1, r3, #3
 801ca62:	fb12 f204 	smulbb	r2, r2, r4
 801ca66:	00db      	lsls	r3, r3, #3
 801ca68:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ca6c:	b280      	uxth	r0, r0
 801ca6e:	b2db      	uxtb	r3, r3
 801ca70:	fb01 7109 	mla	r1, r1, r9, r7
 801ca74:	fb03 2309 	mla	r3, r3, r9, r2
 801ca78:	1c42      	adds	r2, r0, #1
 801ca7a:	b289      	uxth	r1, r1
 801ca7c:	b29b      	uxth	r3, r3
 801ca7e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ca82:	1c4f      	adds	r7, r1, #1
 801ca84:	1c5a      	adds	r2, r3, #1
 801ca86:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801ca8a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ca8e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ca92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca94:	0949      	lsrs	r1, r1, #5
 801ca96:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ca9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ca9e:	4310      	orrs	r0, r2
 801caa0:	4308      	orrs	r0, r1
 801caa2:	f823 0b02 	strh.w	r0, [r3], #2
 801caa6:	930e      	str	r3, [sp, #56]	; 0x38
 801caa8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801caaa:	449a      	add	sl, r3
 801caac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801caae:	441d      	add	r5, r3
 801cab0:	e6ed      	b.n	801c88e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801cab2:	2800      	cmp	r0, #0
 801cab4:	f43f af7f 	beq.w	801c9b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cab8:	5cd3      	ldrb	r3, [r2, r3]
 801caba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cabe:	9310      	str	r3, [sp, #64]	; 0x40
 801cac0:	e779      	b.n	801c9b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cac2:	b019      	add	sp, #100	; 0x64
 801cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cac8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801cac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cacc:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801cad0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801cad4:	f1b8 0f00 	cmp.w	r8, #0
 801cad8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801cadc:	fb08 470e 	mla	r7, r8, lr, r4
 801cae0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cae4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801cae8:	eb02 0907 	add.w	r9, r2, r7
 801caec:	8808      	ldrh	r0, [r1, #0]
 801caee:	db67      	blt.n	801cbc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801caf0:	45c2      	cmp	sl, r8
 801caf2:	dd65      	ble.n	801cbc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801caf4:	2c00      	cmp	r4, #0
 801caf6:	db61      	blt.n	801cbbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801caf8:	45a6      	cmp	lr, r4
 801cafa:	dd5f      	ble.n	801cbbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801cafc:	5dd2      	ldrb	r2, [r2, r7]
 801cafe:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801cb02:	1c62      	adds	r2, r4, #1
 801cb04:	d45f      	bmi.n	801cbc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cb06:	4596      	cmp	lr, r2
 801cb08:	dd5d      	ble.n	801cbc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cb0a:	2d00      	cmp	r5, #0
 801cb0c:	d05b      	beq.n	801cbc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cb0e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cb12:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801cb16:	f118 0801 	adds.w	r8, r8, #1
 801cb1a:	d458      	bmi.n	801cbce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cb1c:	45c2      	cmp	sl, r8
 801cb1e:	dd56      	ble.n	801cbce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cb20:	2e00      	cmp	r6, #0
 801cb22:	d054      	beq.n	801cbce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cb24:	2c00      	cmp	r4, #0
 801cb26:	db50      	blt.n	801cbca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801cb28:	45a6      	cmp	lr, r4
 801cb2a:	dd4e      	ble.n	801cbca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801cb2c:	f819 200e 	ldrb.w	r2, [r9, lr]
 801cb30:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801cb34:	3401      	adds	r4, #1
 801cb36:	d407      	bmi.n	801cb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cb38:	45a6      	cmp	lr, r4
 801cb3a:	dd05      	ble.n	801cb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cb3c:	b125      	cbz	r5, 801cb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cb3e:	44ce      	add	lr, r9
 801cb40:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801cb44:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801cb48:	fb15 f406 	smulbb	r4, r5, r6
 801cb4c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801cb50:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801cb54:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cb58:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cb5c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801cb60:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cb64:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cb68:	ea43 0c0c 	orr.w	ip, r3, ip
 801cb6c:	f1c6 0310 	rsb	r3, r6, #16
 801cb70:	ea4e 0707 	orr.w	r7, lr, r7
 801cb74:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801cb78:	1b5b      	subs	r3, r3, r5
 801cb7a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801cb7e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cb82:	437d      	muls	r5, r7
 801cb84:	fb03 5c0c 	mla	ip, r3, ip, r5
 801cb88:	0403      	lsls	r3, r0, #16
 801cb8a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cb8e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cb92:	4318      	orrs	r0, r3
 801cb94:	0413      	lsls	r3, r2, #16
 801cb96:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cb9a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cb9e:	fb04 c000 	mla	r0, r4, r0, ip
 801cba2:	4313      	orrs	r3, r2
 801cba4:	fb06 0003 	mla	r0, r6, r3, r0
 801cba8:	0d43      	lsrs	r3, r0, #21
 801cbaa:	0940      	lsrs	r0, r0, #5
 801cbac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cbb0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cbb4:	4318      	orrs	r0, r3
 801cbb6:	8008      	strh	r0, [r1, #0]
 801cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbbc:	4684      	mov	ip, r0
 801cbbe:	e7a0      	b.n	801cb02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801cbc0:	4607      	mov	r7, r0
 801cbc2:	4684      	mov	ip, r0
 801cbc4:	e7a7      	b.n	801cb16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801cbc6:	4607      	mov	r7, r0
 801cbc8:	e7a5      	b.n	801cb16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801cbca:	4602      	mov	r2, r0
 801cbcc:	e7b2      	b.n	801cb34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801cbce:	4602      	mov	r2, r0
 801cbd0:	e7ba      	b.n	801cb48 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801cbd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbd6:	b093      	sub	sp, #76	; 0x4c
 801cbd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cbdc:	920f      	str	r2, [sp, #60]	; 0x3c
 801cbde:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cbe0:	9010      	str	r0, [sp, #64]	; 0x40
 801cbe2:	9108      	str	r1, [sp, #32]
 801cbe4:	6850      	ldr	r0, [r2, #4]
 801cbe6:	9306      	str	r3, [sp, #24]
 801cbe8:	6812      	ldr	r2, [r2, #0]
 801cbea:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801cbee:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801cbf2:	fb00 1303 	mla	r3, r0, r3, r1
 801cbf6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801cbfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	9307      	str	r3, [sp, #28]
 801cc00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc02:	685f      	ldr	r7, [r3, #4]
 801cc04:	3704      	adds	r7, #4
 801cc06:	9b08      	ldr	r3, [sp, #32]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	dc03      	bgt.n	801cc14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801cc0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	f340 81b2 	ble.w	801cf78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801cc14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cc1e:	1e48      	subs	r0, r1, #1
 801cc20:	f102 3cff 	add.w	ip, r2, #4294967295
 801cc24:	9b06      	ldr	r3, [sp, #24]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	f340 80a9 	ble.w	801cd7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801cc2c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801cc30:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cc34:	d406      	bmi.n	801cc44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc36:	4586      	cmp	lr, r0
 801cc38:	da04      	bge.n	801cc44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	db02      	blt.n	801cc44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc3e:	4563      	cmp	r3, ip
 801cc40:	f2c0 809e 	blt.w	801cd80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801cc44:	f11e 0e01 	adds.w	lr, lr, #1
 801cc48:	f100 808f 	bmi.w	801cd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc4c:	4571      	cmp	r1, lr
 801cc4e:	f2c0 808c 	blt.w	801cd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc52:	3301      	adds	r3, #1
 801cc54:	f100 8089 	bmi.w	801cd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc58:	429a      	cmp	r2, r3
 801cc5a:	f2c0 8086 	blt.w	801cd6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cc5e:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cc62:	46c8      	mov	r8, r9
 801cc64:	f1bb 0f00 	cmp.w	fp, #0
 801cc68:	f340 80a6 	ble.w	801cdb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cc6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cc6e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801cc72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc74:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801cc78:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801cc7c:	1422      	asrs	r2, r4, #16
 801cc7e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cc82:	689b      	ldr	r3, [r3, #8]
 801cc84:	f100 80e3 	bmi.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cc88:	f103 3aff 	add.w	sl, r3, #4294967295
 801cc8c:	4552      	cmp	r2, sl
 801cc8e:	f280 80de 	bge.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cc92:	f1bc 0f00 	cmp.w	ip, #0
 801cc96:	f2c0 80da 	blt.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cc9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 801cc9e:	45d4      	cmp	ip, sl
 801cca0:	f280 80d5 	bge.w	801ce4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cca4:	b21b      	sxth	r3, r3
 801cca6:	9d07      	ldr	r5, [sp, #28]
 801cca8:	fb0c 2203 	mla	r2, ip, r3, r2
 801ccac:	eb05 0a02 	add.w	sl, r5, r2
 801ccb0:	5caa      	ldrb	r2, [r5, r2]
 801ccb2:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	f000 80c0 	beq.w	801ce3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801ccbc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ccc0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801ccc4:	920b      	str	r2, [sp, #44]	; 0x2c
 801ccc6:	b151      	cbz	r1, 801ccde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ccc8:	eb0a 0203 	add.w	r2, sl, r3
 801cccc:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ccd0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ccd4:	9309      	str	r3, [sp, #36]	; 0x24
 801ccd6:	7853      	ldrb	r3, [r2, #1]
 801ccd8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ccdc:	930c      	str	r3, [sp, #48]	; 0x30
 801ccde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cce0:	fb10 f201 	smulbb	r2, r0, r1
 801cce4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cce6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801ccea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ccee:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ccf2:	10d2      	asrs	r2, r2, #3
 801ccf4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801ccf8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801ccfc:	ea4c 0c03 	orr.w	ip, ip, r3
 801cd00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd02:	041b      	lsls	r3, r3, #16
 801cd04:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cd08:	432b      	orrs	r3, r5
 801cd0a:	4353      	muls	r3, r2
 801cd0c:	fb0a 330c 	mla	r3, sl, ip, r3
 801cd10:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801cd14:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801cd18:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cd1c:	ea4c 0e0e 	orr.w	lr, ip, lr
 801cd20:	f1c1 0c10 	rsb	ip, r1, #16
 801cd24:	ebac 0c00 	sub.w	ip, ip, r0
 801cd28:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801cd2c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801cd30:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801cd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd36:	0418      	lsls	r0, r3, #16
 801cd38:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cd3c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801cd40:	4318      	orrs	r0, r3
 801cd42:	fb02 c200 	mla	r2, r2, r0, ip
 801cd46:	0d53      	lsrs	r3, r2, #21
 801cd48:	0952      	lsrs	r2, r2, #5
 801cd4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cd4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cd52:	431a      	orrs	r2, r3
 801cd54:	f8a8 2000 	strh.w	r2, [r8]
 801cd58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd5a:	f108 0802 	add.w	r8, r8, #2
 801cd5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cd62:	441c      	add	r4, r3
 801cd64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd66:	441e      	add	r6, r3
 801cd68:	e77c      	b.n	801cc64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cd6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd6c:	f109 0902 	add.w	r9, r9, #2
 801cd70:	441c      	add	r4, r3
 801cd72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd74:	441e      	add	r6, r3
 801cd76:	9b06      	ldr	r3, [sp, #24]
 801cd78:	3b01      	subs	r3, #1
 801cd7a:	9306      	str	r3, [sp, #24]
 801cd7c:	e752      	b.n	801cc24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801cd7e:	d020      	beq.n	801cdc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cd80:	9b06      	ldr	r3, [sp, #24]
 801cd82:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cd84:	3b01      	subs	r3, #1
 801cd86:	fb00 4003 	mla	r0, r0, r3, r4
 801cd8a:	1400      	asrs	r0, r0, #16
 801cd8c:	f53f af67 	bmi.w	801cc5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cd90:	3901      	subs	r1, #1
 801cd92:	4288      	cmp	r0, r1
 801cd94:	f6bf af63 	bge.w	801cc5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cd98:	9920      	ldr	r1, [sp, #128]	; 0x80
 801cd9a:	fb01 6303 	mla	r3, r1, r3, r6
 801cd9e:	141b      	asrs	r3, r3, #16
 801cda0:	f53f af5d 	bmi.w	801cc5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cda4:	3a01      	subs	r2, #1
 801cda6:	4293      	cmp	r3, r2
 801cda8:	f6bf af59 	bge.w	801cc5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801cdac:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801cdb0:	46ca      	mov	sl, r9
 801cdb2:	f1b8 0f00 	cmp.w	r8, #0
 801cdb6:	dc67      	bgt.n	801ce88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801cdb8:	9b06      	ldr	r3, [sp, #24]
 801cdba:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801cdbe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801cdc2:	9b08      	ldr	r3, [sp, #32]
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	f340 80d7 	ble.w	801cf78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801cdca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cdce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cdd0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cdd4:	eeb0 6a62 	vmov.f32	s12, s5
 801cdd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cddc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cde0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cde4:	ee16 4a10 	vmov	r4, s12
 801cde8:	eeb0 6a43 	vmov.f32	s12, s6
 801cdec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cdf0:	ee16 6a10 	vmov	r6, s12
 801cdf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cdf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cdfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce0c:	ee12 2a90 	vmov	r2, s5
 801ce10:	eef0 2a47 	vmov.f32	s5, s14
 801ce14:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce18:	ee13 2a10 	vmov	r2, s6
 801ce1c:	931f      	str	r3, [sp, #124]	; 0x7c
 801ce1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce20:	eeb0 3a67 	vmov.f32	s6, s15
 801ce24:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce28:	9320      	str	r3, [sp, #128]	; 0x80
 801ce2a:	9b08      	ldr	r3, [sp, #32]
 801ce2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce2e:	3b01      	subs	r3, #1
 801ce30:	9308      	str	r3, [sp, #32]
 801ce32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce34:	bf08      	it	eq
 801ce36:	4613      	moveq	r3, r2
 801ce38:	9306      	str	r3, [sp, #24]
 801ce3a:	e6e4      	b.n	801cc06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ce3c:	2900      	cmp	r1, #0
 801ce3e:	f43f af4e 	beq.w	801ccde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ce42:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801ce46:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ce4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ce4c:	e747      	b.n	801ccde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801ce4e:	f112 0a01 	adds.w	sl, r2, #1
 801ce52:	d481      	bmi.n	801cd58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce54:	4553      	cmp	r3, sl
 801ce56:	f6ff af7f 	blt.w	801cd58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce5a:	f11c 0a01 	adds.w	sl, ip, #1
 801ce5e:	f53f af7b 	bmi.w	801cd58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce62:	45d6      	cmp	lr, sl
 801ce64:	f6ff af78 	blt.w	801cd58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce68:	b21b      	sxth	r3, r3
 801ce6a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801ce6e:	fa0f f28e 	sxth.w	r2, lr
 801ce72:	9300      	str	r3, [sp, #0]
 801ce74:	463b      	mov	r3, r7
 801ce76:	9201      	str	r2, [sp, #4]
 801ce78:	9a07      	ldr	r2, [sp, #28]
 801ce7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ce7e:	4641      	mov	r1, r8
 801ce80:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ce82:	f7ff fe21 	bl	801cac8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ce86:	e767      	b.n	801cd58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ce88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ce8a:	1422      	asrs	r2, r4, #16
 801ce8c:	1431      	asrs	r1, r6, #16
 801ce8e:	9d07      	ldr	r5, [sp, #28]
 801ce90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ce94:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801ce98:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ce9c:	fb03 2101 	mla	r1, r3, r1, r2
 801cea0:	9a07      	ldr	r2, [sp, #28]
 801cea2:	440a      	add	r2, r1
 801cea4:	5c69      	ldrb	r1, [r5, r1]
 801cea6:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801ceaa:	f1be 0f00 	cmp.w	lr, #0
 801ceae:	d05c      	beq.n	801cf6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801ceb0:	f892 c001 	ldrb.w	ip, [r2, #1]
 801ceb4:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801ceb8:	950d      	str	r5, [sp, #52]	; 0x34
 801ceba:	b150      	cbz	r0, 801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cebc:	eb02 0c03 	add.w	ip, r2, r3
 801cec0:	5cd3      	ldrb	r3, [r2, r3]
 801cec2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cec6:	930a      	str	r3, [sp, #40]	; 0x28
 801cec8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cecc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801ced0:	930e      	str	r3, [sp, #56]	; 0x38
 801ced2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ced4:	fb1e f200 	smulbb	r2, lr, r0
 801ced8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ceda:	f108 38ff 	add.w	r8, r8, #4294967295
 801cede:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cee2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cee6:	10d2      	asrs	r2, r2, #3
 801cee8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801ceec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cef0:	ea4c 0c03 	orr.w	ip, ip, r3
 801cef4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cef8:	9311      	str	r3, [sp, #68]	; 0x44
 801cefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cefc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cefe:	041b      	lsls	r3, r3, #16
 801cf00:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cf04:	ea43 030b 	orr.w	r3, r3, fp
 801cf08:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cf0c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cf10:	4353      	muls	r3, r2
 801cf12:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cf16:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cf1a:	ea43 0b01 	orr.w	fp, r3, r1
 801cf1e:	f1c0 0110 	rsb	r1, r0, #16
 801cf22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf24:	eba1 0e0e 	sub.w	lr, r1, lr
 801cf28:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801cf2c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cf30:	fb0e cc0b 	mla	ip, lr, fp, ip
 801cf34:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801cf38:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801cf3c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cf40:	ea4b 0e0e 	orr.w	lr, fp, lr
 801cf44:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cf48:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801cf4c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801cf50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cf54:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cf58:	ea43 0c0c 	orr.w	ip, r3, ip
 801cf5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cf5e:	441c      	add	r4, r3
 801cf60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cf62:	f82a cb02 	strh.w	ip, [sl], #2
 801cf66:	441e      	add	r6, r3
 801cf68:	e723      	b.n	801cdb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801cf6a:	2800      	cmp	r0, #0
 801cf6c:	d0b1      	beq.n	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cf6e:	5cd3      	ldrb	r3, [r2, r3]
 801cf70:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf74:	930a      	str	r3, [sp, #40]	; 0x28
 801cf76:	e7ac      	b.n	801ced2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cf78:	b013      	add	sp, #76	; 0x4c
 801cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801cf7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf82:	880d      	ldrh	r5, [r1, #0]
 801cf84:	b087      	sub	sp, #28
 801cf86:	10ef      	asrs	r7, r5, #3
 801cf88:	9103      	str	r1, [sp, #12]
 801cf8a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801cf8e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801cf92:	00ed      	lsls	r5, r5, #3
 801cf94:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cf98:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801cf9c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801cfa0:	b2ed      	uxtb	r5, r5
 801cfa2:	9701      	str	r7, [sp, #4]
 801cfa4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801cfa8:	9502      	str	r5, [sp, #8]
 801cfaa:	9d01      	ldr	r5, [sp, #4]
 801cfac:	9902      	ldr	r1, [sp, #8]
 801cfae:	022d      	lsls	r5, r5, #8
 801cfb0:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801cfb4:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801cfb8:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801cfbc:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801cfc0:	430d      	orrs	r5, r1
 801cfc2:	fb06 0709 	mla	r7, r6, r9, r0
 801cfc6:	2e00      	cmp	r6, #0
 801cfc8:	9505      	str	r5, [sp, #20]
 801cfca:	eb02 0c07 	add.w	ip, r2, r7
 801cfce:	f2c0 80b6 	blt.w	801d13e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cfd2:	45b3      	cmp	fp, r6
 801cfd4:	f340 80b3 	ble.w	801d13e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801cfd8:	2800      	cmp	r0, #0
 801cfda:	f2c0 80ae 	blt.w	801d13a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cfde:	4581      	cmp	r9, r0
 801cfe0:	f340 80ab 	ble.w	801d13a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801cfe4:	5dd7      	ldrb	r7, [r2, r7]
 801cfe6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cfea:	441f      	add	r7, r3
 801cfec:	1c42      	adds	r2, r0, #1
 801cfee:	f100 80a9 	bmi.w	801d144 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cff2:	4591      	cmp	r9, r2
 801cff4:	f340 80a6 	ble.w	801d144 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cff8:	2c00      	cmp	r4, #0
 801cffa:	f000 80a3 	beq.w	801d144 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801cffe:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d006:	441d      	add	r5, r3
 801d008:	3601      	adds	r6, #1
 801d00a:	f100 809f 	bmi.w	801d14c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d00e:	45b3      	cmp	fp, r6
 801d010:	f340 809c 	ble.w	801d14c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d014:	f1be 0f00 	cmp.w	lr, #0
 801d018:	f000 8098 	beq.w	801d14c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d01c:	2800      	cmp	r0, #0
 801d01e:	f2c0 8093 	blt.w	801d148 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d022:	4581      	cmp	r9, r0
 801d024:	f340 8090 	ble.w	801d148 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d028:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801d02c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d030:	441e      	add	r6, r3
 801d032:	3001      	adds	r0, #1
 801d034:	f100 808d 	bmi.w	801d152 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d038:	4581      	cmp	r9, r0
 801d03a:	f340 808a 	ble.w	801d152 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d03e:	2c00      	cmp	r4, #0
 801d040:	f000 8087 	beq.w	801d152 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d044:	44e1      	add	r9, ip
 801d046:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d04a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d04e:	4413      	add	r3, r2
 801d050:	b2a4      	uxth	r4, r4
 801d052:	f897 c002 	ldrb.w	ip, [r7, #2]
 801d056:	fa1f fe8e 	uxth.w	lr, lr
 801d05a:	9901      	ldr	r1, [sp, #4]
 801d05c:	fb04 fb0e 	mul.w	fp, r4, lr
 801d060:	0124      	lsls	r4, r4, #4
 801d062:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801d066:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801d06a:	eba4 040b 	sub.w	r4, r4, fp
 801d06e:	fa1f f08e 	uxth.w	r0, lr
 801d072:	b2a2      	uxth	r2, r4
 801d074:	78ac      	ldrb	r4, [r5, #2]
 801d076:	eba9 0900 	sub.w	r9, r9, r0
 801d07a:	fa1f fe88 	uxth.w	lr, r8
 801d07e:	4354      	muls	r4, r2
 801d080:	ea6f 0808 	mvn.w	r8, r8
 801d084:	fa1f f989 	uxth.w	r9, r9
 801d088:	fa5f f888 	uxtb.w	r8, r8
 801d08c:	fb09 440c 	mla	r4, r9, ip, r4
 801d090:	f896 c002 	ldrb.w	ip, [r6, #2]
 801d094:	fb1a fa08 	smulbb	sl, sl, r8
 801d098:	fb00 440c 	mla	r4, r0, ip, r4
 801d09c:	f893 c002 	ldrb.w	ip, [r3, #2]
 801d0a0:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d0a4:	787c      	ldrb	r4, [r7, #1]
 801d0a6:	783f      	ldrb	r7, [r7, #0]
 801d0a8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d0ac:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d0b0:	f895 a001 	ldrb.w	sl, [r5, #1]
 801d0b4:	782d      	ldrb	r5, [r5, #0]
 801d0b6:	fb02 fa0a 	mul.w	sl, r2, sl
 801d0ba:	fa1f fc8c 	uxth.w	ip, ip
 801d0be:	436a      	muls	r2, r5
 801d0c0:	7835      	ldrb	r5, [r6, #0]
 801d0c2:	fb09 aa04 	mla	sl, r9, r4, sl
 801d0c6:	7874      	ldrb	r4, [r6, #1]
 801d0c8:	fb09 2207 	mla	r2, r9, r7, r2
 801d0cc:	fb00 aa04 	mla	sl, r0, r4, sl
 801d0d0:	785c      	ldrb	r4, [r3, #1]
 801d0d2:	fb00 2005 	mla	r0, r0, r5, r2
 801d0d6:	781b      	ldrb	r3, [r3, #0]
 801d0d8:	fb0b a404 	mla	r4, fp, r4, sl
 801d0dc:	fb11 fa08 	smulbb	sl, r1, r8
 801d0e0:	fb0b 0b03 	mla	fp, fp, r3, r0
 801d0e4:	9b02      	ldr	r3, [sp, #8]
 801d0e6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d0ea:	fb13 f808 	smulbb	r8, r3, r8
 801d0ee:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801d0f2:	fb04 a40e 	mla	r4, r4, lr, sl
 801d0f6:	f10c 0301 	add.w	r3, ip, #1
 801d0fa:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801d0fe:	b2a4      	uxth	r4, r4
 801d100:	fa1f fe8e 	uxth.w	lr, lr
 801d104:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d108:	f104 0a01 	add.w	sl, r4, #1
 801d10c:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801d110:	f10e 0c01 	add.w	ip, lr, #1
 801d114:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d118:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d11c:	0964      	lsrs	r4, r4, #5
 801d11e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d122:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d126:	ea4c 0c03 	orr.w	ip, ip, r3
 801d12a:	9b03      	ldr	r3, [sp, #12]
 801d12c:	ea4c 0c04 	orr.w	ip, ip, r4
 801d130:	f8a3 c000 	strh.w	ip, [r3]
 801d134:	b007      	add	sp, #28
 801d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d13a:	af05      	add	r7, sp, #20
 801d13c:	e756      	b.n	801cfec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801d13e:	ad05      	add	r5, sp, #20
 801d140:	462f      	mov	r7, r5
 801d142:	e761      	b.n	801d008 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d144:	ad05      	add	r5, sp, #20
 801d146:	e75f      	b.n	801d008 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d148:	ae05      	add	r6, sp, #20
 801d14a:	e772      	b.n	801d032 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801d14c:	ab05      	add	r3, sp, #20
 801d14e:	461e      	mov	r6, r3
 801d150:	e77e      	b.n	801d050 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801d152:	ab05      	add	r3, sp, #20
 801d154:	e77c      	b.n	801d050 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801d156 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d15a:	b095      	sub	sp, #84	; 0x54
 801d15c:	9212      	str	r2, [sp, #72]	; 0x48
 801d15e:	9309      	str	r3, [sp, #36]	; 0x24
 801d160:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d162:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d166:	9013      	str	r0, [sp, #76]	; 0x4c
 801d168:	930f      	str	r3, [sp, #60]	; 0x3c
 801d16a:	6850      	ldr	r0, [r2, #4]
 801d16c:	910e      	str	r1, [sp, #56]	; 0x38
 801d16e:	6812      	ldr	r2, [r2, #0]
 801d170:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801d174:	fb00 1303 	mla	r3, r0, r3, r1
 801d178:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d17c:	930a      	str	r3, [sp, #40]	; 0x28
 801d17e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	930d      	str	r3, [sp, #52]	; 0x34
 801d184:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d186:	685c      	ldr	r4, [r3, #4]
 801d188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d18a:	3404      	adds	r4, #4
 801d18c:	43db      	mvns	r3, r3
 801d18e:	b2db      	uxtb	r3, r3
 801d190:	930b      	str	r3, [sp, #44]	; 0x2c
 801d192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d194:	2b00      	cmp	r3, #0
 801d196:	dc03      	bgt.n	801d1a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d198:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	f340 8255 	ble.w	801d64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d1a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d1a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d1a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d1aa:	1e48      	subs	r0, r1, #1
 801d1ac:	1e55      	subs	r5, r2, #1
 801d1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	f340 80f9 	ble.w	801d3a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d1b6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801d1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d1ba:	1436      	asrs	r6, r6, #16
 801d1bc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d1c0:	d406      	bmi.n	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d1c2:	4286      	cmp	r6, r0
 801d1c4:	da04      	bge.n	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	db02      	blt.n	801d1d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d1ca:	42ab      	cmp	r3, r5
 801d1cc:	f2c0 80ed 	blt.w	801d3aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d1d0:	3601      	adds	r6, #1
 801d1d2:	f100 80da 	bmi.w	801d38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d1d6:	42b1      	cmp	r1, r6
 801d1d8:	f2c0 80d7 	blt.w	801d38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d1dc:	3301      	adds	r3, #1
 801d1de:	f100 80d4 	bmi.w	801d38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d1e2:	429a      	cmp	r2, r3
 801d1e4:	f2c0 80d1 	blt.w	801d38a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1ea:	9311      	str	r3, [sp, #68]	; 0x44
 801d1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1ee:	930c      	str	r3, [sp, #48]	; 0x30
 801d1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	f340 80fa 	ble.w	801d3ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d1f8:	9826      	ldr	r0, [sp, #152]	; 0x98
 801d1fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d1fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d1fe:	68c6      	ldr	r6, [r0, #12]
 801d200:	141d      	asrs	r5, r3, #16
 801d202:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d204:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d208:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d20a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d20c:	1400      	asrs	r0, r0, #16
 801d20e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d212:	6892      	ldr	r2, [r2, #8]
 801d214:	f100 813e 	bmi.w	801d494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d218:	1e57      	subs	r7, r2, #1
 801d21a:	42b8      	cmp	r0, r7
 801d21c:	f280 813a 	bge.w	801d494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d220:	2d00      	cmp	r5, #0
 801d222:	f2c0 8137 	blt.w	801d494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d226:	1e77      	subs	r7, r6, #1
 801d228:	42bd      	cmp	r5, r7
 801d22a:	f280 8133 	bge.w	801d494 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d22e:	b212      	sxth	r2, r2
 801d230:	fb05 0002 	mla	r0, r5, r2, r0
 801d234:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d236:	f815 a000 	ldrb.w	sl, [r5, r0]
 801d23a:	182e      	adds	r6, r5, r0
 801d23c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801d240:	eb04 050a 	add.w	r5, r4, sl
 801d244:	2b00      	cmp	r3, #0
 801d246:	f000 8117 	beq.w	801d478 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d24a:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d24e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d252:	44a4      	add	ip, r4
 801d254:	2900      	cmp	r1, #0
 801d256:	f000 8117 	beq.w	801d488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d25a:	18b0      	adds	r0, r6, r2
 801d25c:	5cb2      	ldrb	r2, [r6, r2]
 801d25e:	7840      	ldrb	r0, [r0, #1]
 801d260:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d264:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d268:	4422      	add	r2, r4
 801d26a:	4420      	add	r0, r4
 801d26c:	b29b      	uxth	r3, r3
 801d26e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801d272:	b289      	uxth	r1, r1
 801d274:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d278:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d27a:	fb03 f901 	mul.w	r9, r3, r1
 801d27e:	011b      	lsls	r3, r3, #4
 801d280:	f8b6 e000 	ldrh.w	lr, [r6]
 801d284:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d288:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d28c:	eba3 0309 	sub.w	r3, r3, r9
 801d290:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801d294:	b289      	uxth	r1, r1
 801d296:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801d29a:	b29b      	uxth	r3, r3
 801d29c:	eba8 0801 	sub.w	r8, r8, r1
 801d2a0:	435f      	muls	r7, r3
 801d2a2:	fa1f f888 	uxth.w	r8, r8
 801d2a6:	9310      	str	r3, [sp, #64]	; 0x40
 801d2a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2aa:	fb08 770b 	mla	r7, r8, fp, r7
 801d2ae:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d2b2:	fb01 770b 	mla	r7, r1, fp, r7
 801d2b6:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d2ba:	fb09 770b 	mla	r7, r9, fp, r7
 801d2be:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801d2c2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d2c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d2ca:	fb1b fb03 	smulbb	fp, fp, r3
 801d2ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2d0:	fb07 b706 	mla	r7, r7, r6, fp
 801d2d4:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d2d8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d2dc:	f89c c000 	ldrb.w	ip, [ip]
 801d2e0:	b2bf      	uxth	r7, r7
 801d2e2:	435d      	muls	r5, r3
 801d2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2e6:	fb08 550b 	mla	r5, r8, fp, r5
 801d2ea:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d2ee:	fb01 550b 	mla	r5, r1, fp, r5
 801d2f2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d2f6:	fb09 550b 	mla	r5, r9, fp, r5
 801d2fa:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d2fe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d302:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d306:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d30a:	fa5f fe8e 	uxtb.w	lr, lr
 801d30e:	fb1b fb03 	smulbb	fp, fp, r3
 801d312:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d314:	fb03 f30c 	mul.w	r3, r3, ip
 801d318:	f892 c000 	ldrb.w	ip, [r2]
 801d31c:	fb05 b506 	mla	r5, r5, r6, fp
 801d320:	fb08 330a 	mla	r3, r8, sl, r3
 801d324:	b2ad      	uxth	r5, r5
 801d326:	fb01 330c 	mla	r3, r1, ip, r3
 801d32a:	f890 c000 	ldrb.w	ip, [r0]
 801d32e:	f105 0b01 	add.w	fp, r5, #1
 801d332:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d338:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d33c:	fb1e fe03 	smulbb	lr, lr, r3
 801d340:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d344:	1c7b      	adds	r3, r7, #1
 801d346:	096d      	lsrs	r5, r5, #5
 801d348:	fb0c e606 	mla	r6, ip, r6, lr
 801d34c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d350:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d354:	b2b6      	uxth	r6, r6
 801d356:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801d35a:	1c77      	adds	r7, r6, #1
 801d35c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d360:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d364:	431f      	orrs	r7, r3
 801d366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d368:	433d      	orrs	r5, r7
 801d36a:	801d      	strh	r5, [r3, #0]
 801d36c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d36e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d370:	3302      	adds	r3, #2
 801d372:	930c      	str	r3, [sp, #48]	; 0x30
 801d374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d376:	4413      	add	r3, r2
 801d378:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d37a:	931f      	str	r3, [sp, #124]	; 0x7c
 801d37c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d37e:	4413      	add	r3, r2
 801d380:	9320      	str	r3, [sp, #128]	; 0x80
 801d382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d384:	3b01      	subs	r3, #1
 801d386:	9311      	str	r3, [sp, #68]	; 0x44
 801d388:	e732      	b.n	801d1f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d38a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d38c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801d38e:	4433      	add	r3, r6
 801d390:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801d392:	931f      	str	r3, [sp, #124]	; 0x7c
 801d394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d396:	4433      	add	r3, r6
 801d398:	9320      	str	r3, [sp, #128]	; 0x80
 801d39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d39c:	3b01      	subs	r3, #1
 801d39e:	9309      	str	r3, [sp, #36]	; 0x24
 801d3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3a2:	3302      	adds	r3, #2
 801d3a4:	930a      	str	r3, [sp, #40]	; 0x28
 801d3a6:	e702      	b.n	801d1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d3a8:	d027      	beq.n	801d3fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3ac:	9821      	ldr	r0, [sp, #132]	; 0x84
 801d3ae:	3b01      	subs	r3, #1
 801d3b0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d3b2:	fb00 5003 	mla	r0, r0, r3, r5
 801d3b6:	1400      	asrs	r0, r0, #16
 801d3b8:	f53f af16 	bmi.w	801d1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3bc:	3901      	subs	r1, #1
 801d3be:	4288      	cmp	r0, r1
 801d3c0:	f6bf af12 	bge.w	801d1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d3c6:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d3c8:	fb01 0303 	mla	r3, r1, r3, r0
 801d3cc:	141b      	asrs	r3, r3, #16
 801d3ce:	f53f af0b 	bmi.w	801d1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3d2:	3a01      	subs	r2, #1
 801d3d4:	4293      	cmp	r3, r2
 801d3d6:	f6bf af07 	bge.w	801d1e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3dc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801d3e0:	9311      	str	r3, [sp, #68]	; 0x44
 801d3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3e4:	930c      	str	r3, [sp, #48]	; 0x30
 801d3e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	dc70      	bgt.n	801d4ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d3ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d3f8:	930a      	str	r3, [sp, #40]	; 0x28
 801d3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	f340 8124 	ble.w	801d64a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d406:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d408:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d40c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d410:	eef0 6a62 	vmov.f32	s13, s5
 801d414:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d418:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d41c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d420:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801d424:	eef0 6a43 	vmov.f32	s13, s6
 801d428:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d42c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801d430:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d434:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d438:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d43c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d440:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d448:	ee12 2a90 	vmov	r2, s5
 801d44c:	eef0 2a47 	vmov.f32	s5, s14
 801d450:	fb92 f3f3 	sdiv	r3, r2, r3
 801d454:	ee13 2a10 	vmov	r2, s6
 801d458:	9321      	str	r3, [sp, #132]	; 0x84
 801d45a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d45c:	eeb0 3a67 	vmov.f32	s6, s15
 801d460:	fb92 f3f3 	sdiv	r3, r2, r3
 801d464:	9322      	str	r3, [sp, #136]	; 0x88
 801d466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d46a:	3b01      	subs	r3, #1
 801d46c:	930e      	str	r3, [sp, #56]	; 0x38
 801d46e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d470:	bf08      	it	eq
 801d472:	4613      	moveq	r3, r2
 801d474:	9309      	str	r3, [sp, #36]	; 0x24
 801d476:	e68c      	b.n	801d192 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d478:	b149      	cbz	r1, 801d48e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801d47a:	5cb2      	ldrb	r2, [r6, r2]
 801d47c:	4628      	mov	r0, r5
 801d47e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d482:	4422      	add	r2, r4
 801d484:	46ac      	mov	ip, r5
 801d486:	e6f1      	b.n	801d26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d488:	4628      	mov	r0, r5
 801d48a:	462a      	mov	r2, r5
 801d48c:	e6ee      	b.n	801d26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d48e:	4628      	mov	r0, r5
 801d490:	462a      	mov	r2, r5
 801d492:	e7f7      	b.n	801d484 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801d494:	1c47      	adds	r7, r0, #1
 801d496:	f53f af69 	bmi.w	801d36c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d49a:	42ba      	cmp	r2, r7
 801d49c:	f6ff af66 	blt.w	801d36c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4a0:	1c6f      	adds	r7, r5, #1
 801d4a2:	f53f af63 	bmi.w	801d36c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4a6:	42be      	cmp	r6, r7
 801d4a8:	f6ff af60 	blt.w	801d36c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d4ae:	b236      	sxth	r6, r6
 801d4b0:	b212      	sxth	r2, r2
 801d4b2:	9002      	str	r0, [sp, #8]
 801d4b4:	9601      	str	r6, [sp, #4]
 801d4b6:	9200      	str	r2, [sp, #0]
 801d4b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d4ba:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d4be:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d4c2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801d4c6:	4623      	mov	r3, r4
 801d4c8:	f7ff fd59 	bl	801cf7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d4cc:	e74e      	b.n	801d36c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d4ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d4d0:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d4d2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d4d6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d4d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d4da:	1400      	asrs	r0, r0, #16
 801d4dc:	142d      	asrs	r5, r5, #16
 801d4de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d4e4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d4e8:	fb02 5000 	mla	r0, r2, r0, r5
 801d4ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d4ee:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d4f2:	182e      	adds	r6, r5, r0
 801d4f4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d4f8:	eb04 0509 	add.w	r5, r4, r9
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	f000 8096 	beq.w	801d62e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d502:	7877      	ldrb	r7, [r6, #1]
 801d504:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d508:	4427      	add	r7, r4
 801d50a:	2900      	cmp	r1, #0
 801d50c:	f000 8097 	beq.w	801d63e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801d510:	18b0      	adds	r0, r6, r2
 801d512:	5cb2      	ldrb	r2, [r6, r2]
 801d514:	7840      	ldrb	r0, [r0, #1]
 801d516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d51a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d51e:	4422      	add	r2, r4
 801d520:	4420      	add	r0, r4
 801d522:	b29b      	uxth	r3, r3
 801d524:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d526:	b289      	uxth	r1, r1
 801d528:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d52c:	f8b6 c000 	ldrh.w	ip, [r6]
 801d530:	fb03 f801 	mul.w	r8, r3, r1
 801d534:	011b      	lsls	r3, r3, #4
 801d536:	78be      	ldrb	r6, [r7, #2]
 801d538:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d53c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d540:	eba3 0308 	sub.w	r3, r3, r8
 801d544:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d548:	b289      	uxth	r1, r1
 801d54a:	b29b      	uxth	r3, r3
 801d54c:	ebae 0e01 	sub.w	lr, lr, r1
 801d550:	435e      	muls	r6, r3
 801d552:	fa1f fe8e 	uxth.w	lr, lr
 801d556:	9310      	str	r3, [sp, #64]	; 0x40
 801d558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d55a:	fb0e 660b 	mla	r6, lr, fp, r6
 801d55e:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d562:	fb01 660b 	mla	r6, r1, fp, r6
 801d566:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d56a:	fb08 660b 	mla	r6, r8, fp, r6
 801d56e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d572:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d576:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d57a:	fb1b fb03 	smulbb	fp, fp, r3
 801d57e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d580:	fb06 b60a 	mla	r6, r6, sl, fp
 801d584:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d588:	787d      	ldrb	r5, [r7, #1]
 801d58a:	783f      	ldrb	r7, [r7, #0]
 801d58c:	b2b6      	uxth	r6, r6
 801d58e:	435d      	muls	r5, r3
 801d590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d592:	fb0e 550b 	mla	r5, lr, fp, r5
 801d596:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d59a:	fb01 550b 	mla	r5, r1, fp, r5
 801d59e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d5a2:	fb08 550b 	mla	r5, r8, fp, r5
 801d5a6:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d5aa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d5ae:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d5b2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d5b6:	fa5f fc8c 	uxtb.w	ip, ip
 801d5ba:	fb1b fb03 	smulbb	fp, fp, r3
 801d5be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d5c0:	437b      	muls	r3, r7
 801d5c2:	7817      	ldrb	r7, [r2, #0]
 801d5c4:	fb05 b50a 	mla	r5, r5, sl, fp
 801d5c8:	fb0e 3309 	mla	r3, lr, r9, r3
 801d5cc:	b2ad      	uxth	r5, r5
 801d5ce:	fb01 3307 	mla	r3, r1, r7, r3
 801d5d2:	7807      	ldrb	r7, [r0, #0]
 801d5d4:	f105 0b01 	add.w	fp, r5, #1
 801d5d8:	fb08 3707 	mla	r7, r8, r7, r3
 801d5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d5de:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d5e2:	fb1c fc03 	smulbb	ip, ip, r3
 801d5e6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d5ea:	1c73      	adds	r3, r6, #1
 801d5ec:	096d      	lsrs	r5, r5, #5
 801d5ee:	fb07 c70a 	mla	r7, r7, sl, ip
 801d5f2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d5f6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d5fa:	b2bf      	uxth	r7, r7
 801d5fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d5fe:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d602:	1c7a      	adds	r2, r7, #1
 801d604:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d608:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d60c:	4316      	orrs	r6, r2
 801d60e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d610:	432e      	orrs	r6, r5
 801d612:	f823 6b02 	strh.w	r6, [r3], #2
 801d616:	930c      	str	r3, [sp, #48]	; 0x30
 801d618:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d61a:	4413      	add	r3, r2
 801d61c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d61e:	931f      	str	r3, [sp, #124]	; 0x7c
 801d620:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d622:	4413      	add	r3, r2
 801d624:	9320      	str	r3, [sp, #128]	; 0x80
 801d626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d628:	3b01      	subs	r3, #1
 801d62a:	9311      	str	r3, [sp, #68]	; 0x44
 801d62c:	e6db      	b.n	801d3e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801d62e:	b149      	cbz	r1, 801d644 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d630:	5cb2      	ldrb	r2, [r6, r2]
 801d632:	4628      	mov	r0, r5
 801d634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d638:	4422      	add	r2, r4
 801d63a:	462f      	mov	r7, r5
 801d63c:	e771      	b.n	801d522 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d63e:	4628      	mov	r0, r5
 801d640:	462a      	mov	r2, r5
 801d642:	e76e      	b.n	801d522 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d644:	4628      	mov	r0, r5
 801d646:	462a      	mov	r2, r5
 801d648:	e7f7      	b.n	801d63a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801d64a:	b015      	add	sp, #84	; 0x54
 801d64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d654:	880f      	ldrh	r7, [r1, #0]
 801d656:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d65a:	023c      	lsls	r4, r7, #8
 801d65c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d660:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801d664:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801d668:	017c      	lsls	r4, r7, #5
 801d66a:	00ff      	lsls	r7, r7, #3
 801d66c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801d670:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801d674:	b2ff      	uxtb	r7, r7
 801d676:	ea4b 0404 	orr.w	r4, fp, r4
 801d67a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801d67e:	4327      	orrs	r7, r4
 801d680:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d684:	2d00      	cmp	r5, #0
 801d686:	9701      	str	r7, [sp, #4]
 801d688:	eb02 080a 	add.w	r8, r2, sl
 801d68c:	db7e      	blt.n	801d78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d68e:	45a9      	cmp	r9, r5
 801d690:	dd7c      	ble.n	801d78c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d692:	f1bc 0f00 	cmp.w	ip, #0
 801d696:	db77      	blt.n	801d788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d698:	45e6      	cmp	lr, ip
 801d69a:	dd75      	ble.n	801d788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d69c:	f812 700a 	ldrb.w	r7, [r2, sl]
 801d6a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d6a4:	441f      	add	r7, r3
 801d6a6:	f11c 0201 	adds.w	r2, ip, #1
 801d6aa:	d472      	bmi.n	801d792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d6ac:	4596      	cmp	lr, r2
 801d6ae:	dd70      	ble.n	801d792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d6b0:	2800      	cmp	r0, #0
 801d6b2:	d06e      	beq.n	801d792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d6b4:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d6b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6bc:	441c      	add	r4, r3
 801d6be:	3501      	adds	r5, #1
 801d6c0:	d46b      	bmi.n	801d79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d6c2:	45a9      	cmp	r9, r5
 801d6c4:	dd69      	ble.n	801d79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d6c6:	2e00      	cmp	r6, #0
 801d6c8:	d067      	beq.n	801d79a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d6ca:	f1bc 0f00 	cmp.w	ip, #0
 801d6ce:	db62      	blt.n	801d796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d6d0:	45e6      	cmp	lr, ip
 801d6d2:	dd60      	ble.n	801d796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d6d4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d6dc:	441d      	add	r5, r3
 801d6de:	f11c 0201 	adds.w	r2, ip, #1
 801d6e2:	d45d      	bmi.n	801d7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d6e4:	4596      	cmp	lr, r2
 801d6e6:	dd5b      	ble.n	801d7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d6e8:	2800      	cmp	r0, #0
 801d6ea:	d059      	beq.n	801d7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d6ec:	44c6      	add	lr, r8
 801d6ee:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d6f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6f6:	4413      	add	r3, r2
 801d6f8:	b280      	uxth	r0, r0
 801d6fa:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d6fe:	b2b2      	uxth	r2, r6
 801d700:	f897 9000 	ldrb.w	r9, [r7]
 801d704:	787f      	ldrb	r7, [r7, #1]
 801d706:	fb00 f602 	mul.w	r6, r0, r2
 801d70a:	0100      	lsls	r0, r0, #4
 801d70c:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d710:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801d714:	1b80      	subs	r0, r0, r6
 801d716:	fa1f fc82 	uxth.w	ip, r2
 801d71a:	b282      	uxth	r2, r0
 801d71c:	78a0      	ldrb	r0, [r4, #2]
 801d71e:	eba8 080c 	sub.w	r8, r8, ip
 801d722:	4350      	muls	r0, r2
 801d724:	fa1f f888 	uxth.w	r8, r8
 801d728:	fb08 0e0e 	mla	lr, r8, lr, r0
 801d72c:	78a8      	ldrb	r0, [r5, #2]
 801d72e:	fb0c e000 	mla	r0, ip, r0, lr
 801d732:	f893 e002 	ldrb.w	lr, [r3, #2]
 801d736:	fb06 0e0e 	mla	lr, r6, lr, r0
 801d73a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801d73e:	f894 e000 	ldrb.w	lr, [r4]
 801d742:	fb02 fe0e 	mul.w	lr, r2, lr
 801d746:	fb08 e909 	mla	r9, r8, r9, lr
 801d74a:	f895 e000 	ldrb.w	lr, [r5]
 801d74e:	fb0c 990e 	mla	r9, ip, lr, r9
 801d752:	f893 e000 	ldrb.w	lr, [r3]
 801d756:	785b      	ldrb	r3, [r3, #1]
 801d758:	fb06 9e0e 	mla	lr, r6, lr, r9
 801d75c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d760:	ea4e 0e00 	orr.w	lr, lr, r0
 801d764:	7860      	ldrb	r0, [r4, #1]
 801d766:	4350      	muls	r0, r2
 801d768:	786a      	ldrb	r2, [r5, #1]
 801d76a:	fb08 0007 	mla	r0, r8, r7, r0
 801d76e:	fb0c 0202 	mla	r2, ip, r2, r0
 801d772:	fb06 2303 	mla	r3, r6, r3, r2
 801d776:	095b      	lsrs	r3, r3, #5
 801d778:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d77c:	ea4e 0303 	orr.w	r3, lr, r3
 801d780:	800b      	strh	r3, [r1, #0]
 801d782:	b003      	add	sp, #12
 801d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d788:	af01      	add	r7, sp, #4
 801d78a:	e78c      	b.n	801d6a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801d78c:	ac01      	add	r4, sp, #4
 801d78e:	4627      	mov	r7, r4
 801d790:	e795      	b.n	801d6be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d792:	ac01      	add	r4, sp, #4
 801d794:	e793      	b.n	801d6be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d796:	ad01      	add	r5, sp, #4
 801d798:	e7a1      	b.n	801d6de <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801d79a:	ab01      	add	r3, sp, #4
 801d79c:	461d      	mov	r5, r3
 801d79e:	e7ab      	b.n	801d6f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801d7a0:	ab01      	add	r3, sp, #4
 801d7a2:	e7a9      	b.n	801d6f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801d7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a8:	b08f      	sub	sp, #60	; 0x3c
 801d7aa:	920c      	str	r2, [sp, #48]	; 0x30
 801d7ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d7ae:	900d      	str	r0, [sp, #52]	; 0x34
 801d7b0:	910a      	str	r1, [sp, #40]	; 0x28
 801d7b2:	6850      	ldr	r0, [r2, #4]
 801d7b4:	9306      	str	r3, [sp, #24]
 801d7b6:	6812      	ldr	r2, [r2, #0]
 801d7b8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801d7bc:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801d7c0:	fb00 1303 	mla	r3, r0, r3, r1
 801d7c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d7c8:	9307      	str	r3, [sp, #28]
 801d7ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	9308      	str	r3, [sp, #32]
 801d7d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d7d2:	685c      	ldr	r4, [r3, #4]
 801d7d4:	3404      	adds	r4, #4
 801d7d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	dc03      	bgt.n	801d7e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7de:	2b00      	cmp	r3, #0
 801d7e0:	f340 81d5 	ble.w	801db8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d7e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d7e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d7ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d7ee:	1e48      	subs	r0, r1, #1
 801d7f0:	1e56      	subs	r6, r2, #1
 801d7f2:	9b06      	ldr	r3, [sp, #24]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	f340 80b6 	ble.w	801d966 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d7fa:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d7fe:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d802:	d406      	bmi.n	801d812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d804:	4287      	cmp	r7, r0
 801d806:	da04      	bge.n	801d812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d808:	2b00      	cmp	r3, #0
 801d80a:	db02      	blt.n	801d812 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d80c:	42b3      	cmp	r3, r6
 801d80e:	f2c0 80ab 	blt.w	801d968 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d812:	3701      	adds	r7, #1
 801d814:	f100 809c 	bmi.w	801d950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d818:	42b9      	cmp	r1, r7
 801d81a:	f2c0 8099 	blt.w	801d950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d81e:	3301      	adds	r3, #1
 801d820:	f100 8096 	bmi.w	801d950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d824:	429a      	cmp	r2, r3
 801d826:	f2c0 8093 	blt.w	801d950 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d82a:	9b06      	ldr	r3, [sp, #24]
 801d82c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d82e:	9b07      	ldr	r3, [sp, #28]
 801d830:	9309      	str	r3, [sp, #36]	; 0x24
 801d832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d834:	2b00      	cmp	r3, #0
 801d836:	f340 80b4 	ble.w	801d9a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d83a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d83c:	142e      	asrs	r6, r5, #16
 801d83e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d840:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d844:	68c7      	ldr	r7, [r0, #12]
 801d846:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d84a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d84e:	6892      	ldr	r2, [r2, #8]
 801d850:	f100 80fb 	bmi.w	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d854:	f102 3cff 	add.w	ip, r2, #4294967295
 801d858:	4560      	cmp	r0, ip
 801d85a:	f280 80f6 	bge.w	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d85e:	2e00      	cmp	r6, #0
 801d860:	f2c0 80f3 	blt.w	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d864:	f107 3cff 	add.w	ip, r7, #4294967295
 801d868:	4566      	cmp	r6, ip
 801d86a:	f280 80ee 	bge.w	801da4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d86e:	b212      	sxth	r2, r2
 801d870:	fb06 0002 	mla	r0, r6, r2, r0
 801d874:	9e08      	ldr	r6, [sp, #32]
 801d876:	1837      	adds	r7, r6, r0
 801d878:	5c30      	ldrb	r0, [r6, r0]
 801d87a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d87e:	eb04 0c08 	add.w	ip, r4, r8
 801d882:	2b00      	cmp	r3, #0
 801d884:	f000 80d3 	beq.w	801da2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d888:	787e      	ldrb	r6, [r7, #1]
 801d88a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d88e:	4426      	add	r6, r4
 801d890:	2900      	cmp	r1, #0
 801d892:	f000 80d4 	beq.w	801da3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d896:	18b8      	adds	r0, r7, r2
 801d898:	5cba      	ldrb	r2, [r7, r2]
 801d89a:	7840      	ldrb	r0, [r0, #1]
 801d89c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d8a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8a4:	4422      	add	r2, r4
 801d8a6:	4420      	add	r0, r4
 801d8a8:	b29b      	uxth	r3, r3
 801d8aa:	78b7      	ldrb	r7, [r6, #2]
 801d8ac:	b289      	uxth	r1, r1
 801d8ae:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d8b2:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d8b6:	fb03 f901 	mul.w	r9, r3, r1
 801d8ba:	011b      	lsls	r3, r3, #4
 801d8bc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d8c0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d8c4:	eba3 0309 	sub.w	r3, r3, r9
 801d8c8:	b289      	uxth	r1, r1
 801d8ca:	b29b      	uxth	r3, r3
 801d8cc:	ebae 0e01 	sub.w	lr, lr, r1
 801d8d0:	435f      	muls	r7, r3
 801d8d2:	fa1f fe8e 	uxth.w	lr, lr
 801d8d6:	fb0e 770a 	mla	r7, lr, sl, r7
 801d8da:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d8de:	fb01 770a 	mla	r7, r1, sl, r7
 801d8e2:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d8e6:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d8ea:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d8ee:	f896 8000 	ldrb.w	r8, [r6]
 801d8f2:	7876      	ldrb	r6, [r6, #1]
 801d8f4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d8f8:	fb03 f808 	mul.w	r8, r3, r8
 801d8fc:	4373      	muls	r3, r6
 801d8fe:	fb0e 8807 	mla	r8, lr, r7, r8
 801d902:	7817      	ldrb	r7, [r2, #0]
 801d904:	fb0e 330c 	mla	r3, lr, ip, r3
 801d908:	fb01 8807 	mla	r8, r1, r7, r8
 801d90c:	7807      	ldrb	r7, [r0, #0]
 801d90e:	fb09 8707 	mla	r7, r9, r7, r8
 801d912:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d916:	ea47 070a 	orr.w	r7, r7, sl
 801d91a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d91e:	fb01 310a 	mla	r1, r1, sl, r3
 801d922:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d928:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d92c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d930:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d934:	ea47 070a 	orr.w	r7, r7, sl
 801d938:	801f      	strh	r7, [r3, #0]
 801d93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d93c:	3302      	adds	r3, #2
 801d93e:	9309      	str	r3, [sp, #36]	; 0x24
 801d940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d942:	449b      	add	fp, r3
 801d944:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d946:	441d      	add	r5, r3
 801d948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d94a:	3b01      	subs	r3, #1
 801d94c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d94e:	e770      	b.n	801d832 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d950:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d952:	449b      	add	fp, r3
 801d954:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d956:	441d      	add	r5, r3
 801d958:	9b06      	ldr	r3, [sp, #24]
 801d95a:	3b01      	subs	r3, #1
 801d95c:	9306      	str	r3, [sp, #24]
 801d95e:	9b07      	ldr	r3, [sp, #28]
 801d960:	3302      	adds	r3, #2
 801d962:	9307      	str	r3, [sp, #28]
 801d964:	e745      	b.n	801d7f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801d966:	d023      	beq.n	801d9b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d968:	9b06      	ldr	r3, [sp, #24]
 801d96a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801d96c:	3b01      	subs	r3, #1
 801d96e:	fb00 b003 	mla	r0, r0, r3, fp
 801d972:	1400      	asrs	r0, r0, #16
 801d974:	f53f af59 	bmi.w	801d82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d978:	3901      	subs	r1, #1
 801d97a:	4288      	cmp	r0, r1
 801d97c:	f6bf af55 	bge.w	801d82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d980:	991c      	ldr	r1, [sp, #112]	; 0x70
 801d982:	fb01 5303 	mla	r3, r1, r3, r5
 801d986:	141b      	asrs	r3, r3, #16
 801d988:	f53f af4f 	bmi.w	801d82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d98c:	3a01      	subs	r2, #1
 801d98e:	4293      	cmp	r3, r2
 801d990:	f6bf af4b 	bge.w	801d82a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d994:	9b06      	ldr	r3, [sp, #24]
 801d996:	9309      	str	r3, [sp, #36]	; 0x24
 801d998:	9b07      	ldr	r3, [sp, #28]
 801d99a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	dc70      	bgt.n	801da84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801d9a2:	9b06      	ldr	r3, [sp, #24]
 801d9a4:	9a07      	ldr	r2, [sp, #28]
 801d9a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d9aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d9ae:	9307      	str	r3, [sp, #28]
 801d9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	f340 80eb 	ble.w	801db8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d9b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d9bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d9be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d9c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d9c6:	eef0 6a62 	vmov.f32	s13, s5
 801d9ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d9ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d9d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9d6:	ee16 ba90 	vmov	fp, s13
 801d9da:	eef0 6a43 	vmov.f32	s13, s6
 801d9de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d9e2:	ee16 5a90 	vmov	r5, s13
 801d9e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d9ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d9ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d9f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d9f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d9fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d9fe:	ee12 2a90 	vmov	r2, s5
 801da02:	eef0 2a47 	vmov.f32	s5, s14
 801da06:	fb92 f3f3 	sdiv	r3, r2, r3
 801da0a:	ee13 2a10 	vmov	r2, s6
 801da0e:	931b      	str	r3, [sp, #108]	; 0x6c
 801da10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da12:	eeb0 3a67 	vmov.f32	s6, s15
 801da16:	fb92 f3f3 	sdiv	r3, r2, r3
 801da1a:	931c      	str	r3, [sp, #112]	; 0x70
 801da1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da20:	3b01      	subs	r3, #1
 801da22:	930a      	str	r3, [sp, #40]	; 0x28
 801da24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da26:	bf08      	it	eq
 801da28:	4613      	moveq	r3, r2
 801da2a:	9306      	str	r3, [sp, #24]
 801da2c:	e6d3      	b.n	801d7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801da2e:	b149      	cbz	r1, 801da44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801da30:	5cba      	ldrb	r2, [r7, r2]
 801da32:	4660      	mov	r0, ip
 801da34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801da38:	4422      	add	r2, r4
 801da3a:	4666      	mov	r6, ip
 801da3c:	e734      	b.n	801d8a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801da3e:	4660      	mov	r0, ip
 801da40:	4662      	mov	r2, ip
 801da42:	e731      	b.n	801d8a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801da44:	4660      	mov	r0, ip
 801da46:	4662      	mov	r2, ip
 801da48:	e7f7      	b.n	801da3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801da4a:	f110 0c01 	adds.w	ip, r0, #1
 801da4e:	f53f af74 	bmi.w	801d93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801da52:	4562      	cmp	r2, ip
 801da54:	f6ff af71 	blt.w	801d93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801da58:	f116 0c01 	adds.w	ip, r6, #1
 801da5c:	f53f af6d 	bmi.w	801d93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801da60:	4567      	cmp	r7, ip
 801da62:	f6ff af6a 	blt.w	801d93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801da66:	b23f      	sxth	r7, r7
 801da68:	b212      	sxth	r2, r2
 801da6a:	9701      	str	r7, [sp, #4]
 801da6c:	9200      	str	r2, [sp, #0]
 801da6e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801da72:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801da76:	4623      	mov	r3, r4
 801da78:	980d      	ldr	r0, [sp, #52]	; 0x34
 801da7a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801da7e:	f7ff fde7 	bl	801d650 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801da82:	e75a      	b.n	801d93a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801da84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801da86:	ea4f 462b 	mov.w	r6, fp, asr #16
 801da8a:	1428      	asrs	r0, r5, #16
 801da8c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801da90:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801da94:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801da98:	fb02 6000 	mla	r0, r2, r0, r6
 801da9c:	9e08      	ldr	r6, [sp, #32]
 801da9e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801daa2:	1837      	adds	r7, r6, r0
 801daa4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801daa8:	eb04 0c08 	add.w	ip, r4, r8
 801daac:	2b00      	cmp	r3, #0
 801daae:	d060      	beq.n	801db72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801dab0:	787e      	ldrb	r6, [r7, #1]
 801dab2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dab6:	4426      	add	r6, r4
 801dab8:	2900      	cmp	r1, #0
 801daba:	d062      	beq.n	801db82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801dabc:	18b8      	adds	r0, r7, r2
 801dabe:	5cba      	ldrb	r2, [r7, r2]
 801dac0:	7840      	ldrb	r0, [r0, #1]
 801dac2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dac6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801daca:	4422      	add	r2, r4
 801dacc:	4420      	add	r0, r4
 801dace:	b29b      	uxth	r3, r3
 801dad0:	78b7      	ldrb	r7, [r6, #2]
 801dad2:	b289      	uxth	r1, r1
 801dad4:	f89c a002 	ldrb.w	sl, [ip, #2]
 801dad8:	f89c c001 	ldrb.w	ip, [ip, #1]
 801dadc:	fb03 f901 	mul.w	r9, r3, r1
 801dae0:	011b      	lsls	r3, r3, #4
 801dae2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dae6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801daea:	eba3 0309 	sub.w	r3, r3, r9
 801daee:	b289      	uxth	r1, r1
 801daf0:	b29b      	uxth	r3, r3
 801daf2:	ebae 0e01 	sub.w	lr, lr, r1
 801daf6:	435f      	muls	r7, r3
 801daf8:	fa1f fe8e 	uxth.w	lr, lr
 801dafc:	fb0e 770a 	mla	r7, lr, sl, r7
 801db00:	f892 a002 	ldrb.w	sl, [r2, #2]
 801db04:	fb01 770a 	mla	r7, r1, sl, r7
 801db08:	f890 a002 	ldrb.w	sl, [r0, #2]
 801db0c:	fb09 7a0a 	mla	sl, r9, sl, r7
 801db10:	f814 7008 	ldrb.w	r7, [r4, r8]
 801db14:	f896 8000 	ldrb.w	r8, [r6]
 801db18:	7876      	ldrb	r6, [r6, #1]
 801db1a:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801db1e:	fb03 f808 	mul.w	r8, r3, r8
 801db22:	4373      	muls	r3, r6
 801db24:	7856      	ldrb	r6, [r2, #1]
 801db26:	fb0e 8807 	mla	r8, lr, r7, r8
 801db2a:	7817      	ldrb	r7, [r2, #0]
 801db2c:	fb0e 330c 	mla	r3, lr, ip, r3
 801db30:	fb01 8807 	mla	r8, r1, r7, r8
 801db34:	7807      	ldrb	r7, [r0, #0]
 801db36:	fb01 3306 	mla	r3, r1, r6, r3
 801db3a:	fb09 8707 	mla	r7, r9, r7, r8
 801db3e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801db42:	ea47 070a 	orr.w	r7, r7, sl
 801db46:	f890 a001 	ldrb.w	sl, [r0, #1]
 801db4a:	fb09 3a0a 	mla	sl, r9, sl, r3
 801db4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801db50:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db54:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801db58:	ea47 070a 	orr.w	r7, r7, sl
 801db5c:	f823 7b02 	strh.w	r7, [r3], #2
 801db60:	930b      	str	r3, [sp, #44]	; 0x2c
 801db62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801db64:	449b      	add	fp, r3
 801db66:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801db68:	441d      	add	r5, r3
 801db6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db6c:	3b01      	subs	r3, #1
 801db6e:	9309      	str	r3, [sp, #36]	; 0x24
 801db70:	e714      	b.n	801d99c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801db72:	b149      	cbz	r1, 801db88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801db74:	5cba      	ldrb	r2, [r7, r2]
 801db76:	4660      	mov	r0, ip
 801db78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db7c:	4422      	add	r2, r4
 801db7e:	4666      	mov	r6, ip
 801db80:	e7a5      	b.n	801dace <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801db82:	4660      	mov	r0, ip
 801db84:	4662      	mov	r2, ip
 801db86:	e7a2      	b.n	801dace <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801db88:	4660      	mov	r0, ip
 801db8a:	4662      	mov	r2, ip
 801db8c:	e7f7      	b.n	801db7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801db8e:	b00f      	add	sp, #60	; 0x3c
 801db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db98:	b085      	sub	sp, #20
 801db9a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801db9e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801dba2:	9102      	str	r1, [sp, #8]
 801dba4:	2c00      	cmp	r4, #0
 801dba6:	fb04 710c 	mla	r1, r4, ip, r7
 801dbaa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801dbae:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801dbb2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801dbb6:	eb02 0e01 	add.w	lr, r2, r1
 801dbba:	f2c0 8122 	blt.w	801de02 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801dbbe:	45a0      	cmp	r8, r4
 801dbc0:	f340 811f 	ble.w	801de02 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801dbc4:	2f00      	cmp	r7, #0
 801dbc6:	f2c0 811a 	blt.w	801ddfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801dbca:	45bc      	cmp	ip, r7
 801dbcc:	f340 8117 	ble.w	801ddfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801dbd0:	5c52      	ldrb	r2, [r2, r1]
 801dbd2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801dbd6:	1c7a      	adds	r2, r7, #1
 801dbd8:	f100 8116 	bmi.w	801de08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801dbdc:	4594      	cmp	ip, r2
 801dbde:	f340 8113 	ble.w	801de08 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801dbe2:	2e00      	cmp	r6, #0
 801dbe4:	f000 8112 	beq.w	801de0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801dbe8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801dbec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dbf0:	3401      	adds	r4, #1
 801dbf2:	f100 810f 	bmi.w	801de14 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dbf6:	45a0      	cmp	r8, r4
 801dbf8:	f340 810c 	ble.w	801de14 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dbfc:	2800      	cmp	r0, #0
 801dbfe:	f000 810c 	beq.w	801de1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801dc02:	2f00      	cmp	r7, #0
 801dc04:	f2c0 8104 	blt.w	801de10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801dc08:	45bc      	cmp	ip, r7
 801dc0a:	f340 8101 	ble.w	801de10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801dc0e:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801dc12:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801dc16:	3701      	adds	r7, #1
 801dc18:	f100 8102 	bmi.w	801de20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801dc1c:	45bc      	cmp	ip, r7
 801dc1e:	f340 80ff 	ble.w	801de20 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801dc22:	2e00      	cmp	r6, #0
 801dc24:	f000 80fe 	beq.w	801de24 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801dc28:	44f4      	add	ip, lr
 801dc2a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dc2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801dc32:	b2b6      	uxth	r6, r6
 801dc34:	b280      	uxth	r0, r0
 801dc36:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801dc3a:	fb00 fe06 	mul.w	lr, r0, r6
 801dc3e:	0136      	lsls	r6, r6, #4
 801dc40:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801dc44:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801dc48:	eba6 070e 	sub.w	r7, r6, lr
 801dc4c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801dc50:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801dc54:	b280      	uxth	r0, r0
 801dc56:	b2bf      	uxth	r7, r7
 801dc58:	1a1b      	subs	r3, r3, r0
 801dc5a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dc5e:	fb0a f607 	mul.w	r6, sl, r7
 801dc62:	b29b      	uxth	r3, r3
 801dc64:	fb0b 6603 	mla	r6, fp, r3, r6
 801dc68:	fb00 6609 	mla	r6, r0, r9, r6
 801dc6c:	fb0e 6608 	mla	r6, lr, r8, r6
 801dc70:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801dc74:	9600      	str	r6, [sp, #0]
 801dc76:	2e00      	cmp	r6, #0
 801dc78:	f000 80be 	beq.w	801ddf8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801dc7c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801dc80:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dc84:	9e02      	ldr	r6, [sp, #8]
 801dc86:	fb0b fc0c 	mul.w	ip, fp, ip
 801dc8a:	fb0b f505 	mul.w	r5, fp, r5
 801dc8e:	8836      	ldrh	r6, [r6, #0]
 801dc90:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801dc94:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dc98:	9501      	str	r5, [sp, #4]
 801dc9a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801dc9e:	44dc      	add	ip, fp
 801dca0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dca4:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801dca8:	9503      	str	r5, [sp, #12]
 801dcaa:	9d01      	ldr	r5, [sp, #4]
 801dcac:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801dcb0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801dcb4:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801dcb8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dcbc:	fb0a fc0c 	mul.w	ip, sl, ip
 801dcc0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801dcc4:	fb0a fa01 	mul.w	sl, sl, r1
 801dcc8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801dccc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dcd0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801dcd4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dcd8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801dcdc:	4465      	add	r5, ip
 801dcde:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dce2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dce6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcea:	fb09 fc0c 	mul.w	ip, r9, ip
 801dcee:	0a2d      	lsrs	r5, r5, #8
 801dcf0:	fb09 f904 	mul.w	r9, r9, r4
 801dcf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcf8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801dcfc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dd00:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801dd04:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dd08:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801dd0c:	437d      	muls	r5, r7
 801dd0e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801dd12:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801dd16:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dd1a:	4461      	add	r1, ip
 801dd1c:	fb08 f404 	mul.w	r4, r8, r4
 801dd20:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dd24:	fb08 f802 	mul.w	r8, r8, r2
 801dd28:	0a09      	lsrs	r1, r1, #8
 801dd2a:	0a22      	lsrs	r2, r4, #8
 801dd2c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801dd30:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801dd34:	fb07 f70a 	mul.w	r7, r7, sl
 801dd38:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dd3c:	4414      	add	r4, r2
 801dd3e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801dd42:	0a24      	lsrs	r4, r4, #8
 801dd44:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dd48:	9a03      	ldr	r2, [sp, #12]
 801dd4a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dd4e:	fb02 5503 	mla	r5, r2, r3, r5
 801dd52:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dd56:	9a00      	ldr	r2, [sp, #0]
 801dd58:	fb04 540e 	mla	r4, r4, lr, r5
 801dd5c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dd60:	1235      	asrs	r5, r6, #8
 801dd62:	fb01 4100 	mla	r1, r1, r0, r4
 801dd66:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801dd6a:	0a09      	lsrs	r1, r1, #8
 801dd6c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801dd70:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801dd74:	fb03 7101 	mla	r1, r3, r1, r7
 801dd78:	fb0e 1e08 	mla	lr, lr, r8, r1
 801dd7c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801dd80:	fb00 e101 	mla	r1, r0, r1, lr
 801dd84:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801dd88:	b287      	uxth	r7, r0
 801dd8a:	0a09      	lsrs	r1, r1, #8
 801dd8c:	437a      	muls	r2, r7
 801dd8e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dd92:	1c53      	adds	r3, r2, #1
 801dd94:	4321      	orrs	r1, r4
 801dd96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dd9a:	0c0a      	lsrs	r2, r1, #16
 801dd9c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801dda0:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801dda4:	b2c8      	uxtb	r0, r1
 801dda6:	fb12 f207 	smulbb	r2, r2, r7
 801ddaa:	fb14 f407 	smulbb	r4, r4, r7
 801ddae:	b2db      	uxtb	r3, r3
 801ddb0:	fb10 f007 	smulbb	r0, r0, r7
 801ddb4:	fb05 2503 	mla	r5, r5, r3, r2
 801ddb8:	10f2      	asrs	r2, r6, #3
 801ddba:	00f6      	lsls	r6, r6, #3
 801ddbc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ddc0:	b2ad      	uxth	r5, r5
 801ddc2:	b2f6      	uxtb	r6, r6
 801ddc4:	fb02 4203 	mla	r2, r2, r3, r4
 801ddc8:	fb06 0303 	mla	r3, r6, r3, r0
 801ddcc:	b294      	uxth	r4, r2
 801ddce:	b299      	uxth	r1, r3
 801ddd0:	1c6b      	adds	r3, r5, #1
 801ddd2:	1c62      	adds	r2, r4, #1
 801ddd4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ddd8:	1c4b      	adds	r3, r1, #1
 801ddda:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ddde:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801dde2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801dde6:	0952      	lsrs	r2, r2, #5
 801dde8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ddec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ddf0:	432b      	orrs	r3, r5
 801ddf2:	4313      	orrs	r3, r2
 801ddf4:	9a02      	ldr	r2, [sp, #8]
 801ddf6:	8013      	strh	r3, [r2, #0]
 801ddf8:	b005      	add	sp, #20
 801ddfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddfe:	2500      	movs	r5, #0
 801de00:	e6e9      	b.n	801dbd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801de02:	2100      	movs	r1, #0
 801de04:	460d      	mov	r5, r1
 801de06:	e6f3      	b.n	801dbf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801de08:	2100      	movs	r1, #0
 801de0a:	e6f1      	b.n	801dbf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801de0c:	4631      	mov	r1, r6
 801de0e:	e6ef      	b.n	801dbf0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801de10:	2400      	movs	r4, #0
 801de12:	e700      	b.n	801dc16 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801de14:	2200      	movs	r2, #0
 801de16:	4614      	mov	r4, r2
 801de18:	e70b      	b.n	801dc32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801de1a:	4602      	mov	r2, r0
 801de1c:	4604      	mov	r4, r0
 801de1e:	e708      	b.n	801dc32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801de20:	2200      	movs	r2, #0
 801de22:	e706      	b.n	801dc32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801de24:	4632      	mov	r2, r6
 801de26:	e704      	b.n	801dc32 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801de28 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de2c:	b09f      	sub	sp, #124	; 0x7c
 801de2e:	921b      	str	r2, [sp, #108]	; 0x6c
 801de30:	9309      	str	r3, [sp, #36]	; 0x24
 801de32:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801de34:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801de38:	901d      	str	r0, [sp, #116]	; 0x74
 801de3a:	931c      	str	r3, [sp, #112]	; 0x70
 801de3c:	6850      	ldr	r0, [r2, #4]
 801de3e:	9119      	str	r1, [sp, #100]	; 0x64
 801de40:	6812      	ldr	r2, [r2, #0]
 801de42:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801de44:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801de48:	fb00 1303 	mla	r3, r0, r3, r1
 801de4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801de50:	930c      	str	r3, [sp, #48]	; 0x30
 801de52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	9312      	str	r3, [sp, #72]	; 0x48
 801de58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de5a:	685e      	ldr	r6, [r3, #4]
 801de5c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801de60:	3604      	adds	r6, #4
 801de62:	930d      	str	r3, [sp, #52]	; 0x34
 801de64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801de66:	2b00      	cmp	r3, #0
 801de68:	dc03      	bgt.n	801de72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801de6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	f340 8387 	ble.w	801e580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801de72:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801de74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de7c:	1e48      	subs	r0, r1, #1
 801de7e:	1e57      	subs	r7, r2, #1
 801de80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de82:	2b00      	cmp	r3, #0
 801de84:	f340 8194 	ble.w	801e1b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801de88:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801de8a:	142b      	asrs	r3, r5, #16
 801de8c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801de90:	d406      	bmi.n	801dea0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de92:	4584      	cmp	ip, r0
 801de94:	da04      	bge.n	801dea0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de96:	2b00      	cmp	r3, #0
 801de98:	db02      	blt.n	801dea0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801de9a:	42bb      	cmp	r3, r7
 801de9c:	f2c0 8189 	blt.w	801e1b2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801dea0:	f11c 0c01 	adds.w	ip, ip, #1
 801dea4:	f100 8177 	bmi.w	801e196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801dea8:	4561      	cmp	r1, ip
 801deaa:	f2c0 8174 	blt.w	801e196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801deae:	3301      	adds	r3, #1
 801deb0:	f100 8171 	bmi.w	801e196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801deb4:	429a      	cmp	r2, r3
 801deb6:	f2c0 816e 	blt.w	801e196 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801deba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801debc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801debe:	931a      	str	r3, [sp, #104]	; 0x68
 801dec0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	f340 8193 	ble.w	801e1ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801dec8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801deca:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dece:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ded2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ded6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ded8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dedc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dede:	141b      	asrs	r3, r3, #16
 801dee0:	f100 81d6 	bmi.w	801e290 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dee4:	f100 38ff 	add.w	r8, r0, #4294967295
 801dee8:	4543      	cmp	r3, r8
 801deea:	f280 81d1 	bge.w	801e290 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801deee:	f1bc 0f00 	cmp.w	ip, #0
 801def2:	f2c0 81cd 	blt.w	801e290 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801def6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801defa:	45c4      	cmp	ip, r8
 801defc:	f280 81c8 	bge.w	801e290 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801df00:	b200      	sxth	r0, r0
 801df02:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df04:	fb0c 3300 	mla	r3, ip, r0, r3
 801df08:	eb04 0803 	add.w	r8, r4, r3
 801df0c:	5ce3      	ldrb	r3, [r4, r3]
 801df0e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801df12:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801df16:	2a00      	cmp	r2, #0
 801df18:	f000 81af 	beq.w	801e27a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801df1c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801df20:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801df24:	940e      	str	r4, [sp, #56]	; 0x38
 801df26:	0e24      	lsrs	r4, r4, #24
 801df28:	9415      	str	r4, [sp, #84]	; 0x54
 801df2a:	b179      	cbz	r1, 801df4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801df2c:	eb08 0c00 	add.w	ip, r8, r0
 801df30:	f818 0000 	ldrb.w	r0, [r8, r0]
 801df34:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df38:	900a      	str	r0, [sp, #40]	; 0x28
 801df3a:	0e00      	lsrs	r0, r0, #24
 801df3c:	9013      	str	r0, [sp, #76]	; 0x4c
 801df3e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801df42:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df46:	900f      	str	r0, [sp, #60]	; 0x3c
 801df48:	0e00      	lsrs	r0, r0, #24
 801df4a:	9016      	str	r0, [sp, #88]	; 0x58
 801df4c:	b292      	uxth	r2, r2
 801df4e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df50:	b289      	uxth	r1, r1
 801df52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801df54:	fb02 f901 	mul.w	r9, r2, r1
 801df58:	0112      	lsls	r2, r2, #4
 801df5a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801df5e:	eba2 0809 	sub.w	r8, r2, r9
 801df62:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801df66:	b289      	uxth	r1, r1
 801df68:	fa1f f888 	uxth.w	r8, r8
 801df6c:	1a52      	subs	r2, r2, r1
 801df6e:	fb08 f000 	mul.w	r0, r8, r0
 801df72:	b292      	uxth	r2, r2
 801df74:	fb02 000e 	mla	r0, r2, lr, r0
 801df78:	fb01 0004 	mla	r0, r1, r4, r0
 801df7c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801df7e:	fb09 0004 	mla	r0, r9, r4, r0
 801df82:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801df86:	2800      	cmp	r0, #0
 801df88:	f000 80fa 	beq.w	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801df8c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801df90:	d01b      	beq.n	801dfca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801df92:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801df96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df9a:	fb0e fa0a 	mul.w	sl, lr, sl
 801df9e:	fb0e fe03 	mul.w	lr, lr, r3
 801dfa2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dfa6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dfaa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801dfae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfb2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dfb6:	4453      	add	r3, sl
 801dfb8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfbc:	0a1b      	lsrs	r3, r3, #8
 801dfbe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dfc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dfc6:	ea43 030c 	orr.w	r3, r3, ip
 801dfca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dfcc:	2cff      	cmp	r4, #255	; 0xff
 801dfce:	d021      	beq.n	801e014 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801dfd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dfd2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dfd6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dfd8:	fb04 fb0b 	mul.w	fp, r4, fp
 801dfdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dfde:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dfe2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dfe4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dfe8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dfec:	fb04 fa0a 	mul.w	sl, r4, sl
 801dff0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dff4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dff8:	44de      	add	lr, fp
 801dffa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dffe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e002:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e006:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e00a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e00e:	ea4e 040a 	orr.w	r4, lr, sl
 801e012:	940e      	str	r4, [sp, #56]	; 0x38
 801e014:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e016:	2cff      	cmp	r4, #255	; 0xff
 801e018:	d021      	beq.n	801e05e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e01a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e01c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e020:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e022:	fb04 fb0b 	mul.w	fp, r4, fp
 801e026:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e028:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e02c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e02e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e032:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e036:	fb04 fa0a 	mul.w	sl, r4, sl
 801e03a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e03e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e042:	44de      	add	lr, fp
 801e044:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e048:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e04c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e050:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e054:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e058:	ea4e 040a 	orr.w	r4, lr, sl
 801e05c:	940a      	str	r4, [sp, #40]	; 0x28
 801e05e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e060:	2cff      	cmp	r4, #255	; 0xff
 801e062:	d021      	beq.n	801e0a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801e064:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e066:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e06a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e06c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e070:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e072:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e076:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e078:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e07c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e080:	fb04 fa0a 	mul.w	sl, r4, sl
 801e084:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e088:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e08c:	44de      	add	lr, fp
 801e08e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e092:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e096:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e09a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e09e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e0a2:	ea4e 040a 	orr.w	r4, lr, sl
 801e0a6:	940f      	str	r4, [sp, #60]	; 0x3c
 801e0a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e0aa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e0ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e0b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e0b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e0b8:	fb08 fc0c 	mul.w	ip, r8, ip
 801e0bc:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e0c0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e0c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e0c6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e0ca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e0ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e0d0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e0d4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e0d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e0da:	fb08 f80e 	mul.w	r8, r8, lr
 801e0de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0e2:	fb02 8303 	mla	r3, r2, r3, r8
 801e0e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e0ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e0f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e0f2:	fb01 330a 	mla	r3, r1, sl, r3
 801e0f6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e0fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e0fc:	fb09 3901 	mla	r9, r9, r1, r3
 801e100:	883b      	ldrh	r3, [r7, #0]
 801e102:	4342      	muls	r2, r0
 801e104:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e108:	1c50      	adds	r0, r2, #1
 801e10a:	1219      	asrs	r1, r3, #8
 801e10c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e110:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e114:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e118:	ea4c 0c09 	orr.w	ip, ip, r9
 801e11c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e120:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801e124:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801e128:	b2c0      	uxtb	r0, r0
 801e12a:	fb12 f204 	smulbb	r2, r2, r4
 801e12e:	fa5f fc8c 	uxtb.w	ip, ip
 801e132:	fb1e fe04 	smulbb	lr, lr, r4
 801e136:	fb01 2100 	mla	r1, r1, r0, r2
 801e13a:	10da      	asrs	r2, r3, #3
 801e13c:	fb1c fc04 	smulbb	ip, ip, r4
 801e140:	00db      	lsls	r3, r3, #3
 801e142:	b289      	uxth	r1, r1
 801e144:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e148:	b2db      	uxtb	r3, r3
 801e14a:	fb02 e200 	mla	r2, r2, r0, lr
 801e14e:	fb03 c300 	mla	r3, r3, r0, ip
 801e152:	b292      	uxth	r2, r2
 801e154:	fa1f fc83 	uxth.w	ip, r3
 801e158:	1c4b      	adds	r3, r1, #1
 801e15a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e15e:	f10c 0301 	add.w	r3, ip, #1
 801e162:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801e166:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e16a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e16e:	430b      	orrs	r3, r1
 801e170:	1c51      	adds	r1, r2, #1
 801e172:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e176:	0952      	lsrs	r2, r2, #5
 801e178:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e17c:	4313      	orrs	r3, r2
 801e17e:	803b      	strh	r3, [r7, #0]
 801e180:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e182:	3702      	adds	r7, #2
 801e184:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e186:	441a      	add	r2, r3
 801e188:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e18a:	441d      	add	r5, r3
 801e18c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e18e:	9229      	str	r2, [sp, #164]	; 0xa4
 801e190:	3b01      	subs	r3, #1
 801e192:	931a      	str	r3, [sp, #104]	; 0x68
 801e194:	e694      	b.n	801dec0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e196:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e198:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e19a:	441c      	add	r4, r3
 801e19c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e19e:	441d      	add	r5, r3
 801e1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1a2:	9429      	str	r4, [sp, #164]	; 0xa4
 801e1a4:	3b01      	subs	r3, #1
 801e1a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1aa:	3302      	adds	r3, #2
 801e1ac:	930c      	str	r3, [sp, #48]	; 0x30
 801e1ae:	e667      	b.n	801de80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e1b0:	d024      	beq.n	801e1fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801e1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1b4:	982b      	ldr	r0, [sp, #172]	; 0xac
 801e1b6:	3b01      	subs	r3, #1
 801e1b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e1ba:	fb00 4003 	mla	r0, r0, r3, r4
 801e1be:	1400      	asrs	r0, r0, #16
 801e1c0:	f53f ae7b 	bmi.w	801deba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e1c4:	3901      	subs	r1, #1
 801e1c6:	4288      	cmp	r0, r1
 801e1c8:	f6bf ae77 	bge.w	801deba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e1cc:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e1ce:	fb01 5303 	mla	r3, r1, r3, r5
 801e1d2:	141b      	asrs	r3, r3, #16
 801e1d4:	f53f ae71 	bmi.w	801deba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e1d8:	3a01      	subs	r2, #1
 801e1da:	4293      	cmp	r3, r2
 801e1dc:	f6bf ae6d 	bge.w	801deba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e1e0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e1e4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801e1e8:	f1bb 0f00 	cmp.w	fp, #0
 801e1ec:	dc70      	bgt.n	801e2d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801e1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e1f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e1f6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e1fa:	930c      	str	r3, [sp, #48]	; 0x30
 801e1fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	f340 81be 	ble.w	801e580 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801e204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e208:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e20a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e20e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e212:	eef0 6a62 	vmov.f32	s13, s5
 801e216:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e21a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e21e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e222:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801e226:	eef0 6a43 	vmov.f32	s13, s6
 801e22a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e22e:	ee16 5a90 	vmov	r5, s13
 801e232:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e236:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e23a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e23e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e242:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e246:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e24a:	ee12 2a90 	vmov	r2, s5
 801e24e:	eef0 2a47 	vmov.f32	s5, s14
 801e252:	fb92 f3f3 	sdiv	r3, r2, r3
 801e256:	ee13 2a10 	vmov	r2, s6
 801e25a:	932b      	str	r3, [sp, #172]	; 0xac
 801e25c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e25e:	eeb0 3a67 	vmov.f32	s6, s15
 801e262:	fb92 f3f3 	sdiv	r3, r2, r3
 801e266:	932c      	str	r3, [sp, #176]	; 0xb0
 801e268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e26a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e26c:	3b01      	subs	r3, #1
 801e26e:	9319      	str	r3, [sp, #100]	; 0x64
 801e270:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e272:	bf08      	it	eq
 801e274:	4613      	moveq	r3, r2
 801e276:	9309      	str	r3, [sp, #36]	; 0x24
 801e278:	e5f4      	b.n	801de64 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e27a:	2900      	cmp	r1, #0
 801e27c:	f43f ae66 	beq.w	801df4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e280:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e284:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e288:	900a      	str	r0, [sp, #40]	; 0x28
 801e28a:	0e00      	lsrs	r0, r0, #24
 801e28c:	9013      	str	r0, [sp, #76]	; 0x4c
 801e28e:	e65d      	b.n	801df4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e290:	f113 0801 	adds.w	r8, r3, #1
 801e294:	f53f af74 	bmi.w	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e298:	4540      	cmp	r0, r8
 801e29a:	f6ff af71 	blt.w	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e29e:	f11c 0801 	adds.w	r8, ip, #1
 801e2a2:	f53f af6d 	bmi.w	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e2a6:	45c6      	cmp	lr, r8
 801e2a8:	f6ff af6a 	blt.w	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e2ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e2ae:	b200      	sxth	r0, r0
 801e2b0:	9302      	str	r3, [sp, #8]
 801e2b2:	fa0f f38e 	sxth.w	r3, lr
 801e2b6:	9000      	str	r0, [sp, #0]
 801e2b8:	9301      	str	r3, [sp, #4]
 801e2ba:	4633      	mov	r3, r6
 801e2bc:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e2be:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e2c2:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e2c6:	4639      	mov	r1, r7
 801e2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2ca:	f7ff fc63 	bl	801db94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e2ce:	e757      	b.n	801e180 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e2d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e2d2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e2d6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e2d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e2dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e2de:	1427      	asrs	r7, r4, #16
 801e2e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e2e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e2e6:	142b      	asrs	r3, r5, #16
 801e2e8:	fb01 7303 	mla	r3, r1, r3, r7
 801e2ec:	18e7      	adds	r7, r4, r3
 801e2ee:	5ce3      	ldrb	r3, [r4, r3]
 801e2f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e2f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e2f8:	2a00      	cmp	r2, #0
 801e2fa:	f000 8137 	beq.w	801e56c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801e2fe:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e302:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e306:	9410      	str	r4, [sp, #64]	; 0x40
 801e308:	0e24      	lsrs	r4, r4, #24
 801e30a:	9417      	str	r4, [sp, #92]	; 0x5c
 801e30c:	b170      	cbz	r0, 801e32c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e30e:	eb07 0e01 	add.w	lr, r7, r1
 801e312:	5c79      	ldrb	r1, [r7, r1]
 801e314:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e318:	910b      	str	r1, [sp, #44]	; 0x2c
 801e31a:	0e09      	lsrs	r1, r1, #24
 801e31c:	9114      	str	r1, [sp, #80]	; 0x50
 801e31e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e322:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e326:	9111      	str	r1, [sp, #68]	; 0x44
 801e328:	0e09      	lsrs	r1, r1, #24
 801e32a:	9118      	str	r1, [sp, #96]	; 0x60
 801e32c:	b292      	uxth	r2, r2
 801e32e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e330:	b280      	uxth	r0, r0
 801e332:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e334:	fb02 f800 	mul.w	r8, r2, r0
 801e338:	0112      	lsls	r2, r2, #4
 801e33a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e33e:	eba2 0e08 	sub.w	lr, r2, r8
 801e342:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e346:	b280      	uxth	r0, r0
 801e348:	fa1f fe8e 	uxth.w	lr, lr
 801e34c:	1a12      	subs	r2, r2, r0
 801e34e:	fb0e f101 	mul.w	r1, lr, r1
 801e352:	b292      	uxth	r2, r2
 801e354:	fb02 110c 	mla	r1, r2, ip, r1
 801e358:	fb00 1104 	mla	r1, r0, r4, r1
 801e35c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e35e:	fb08 1104 	mla	r1, r8, r4, r1
 801e362:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e366:	2900      	cmp	r1, #0
 801e368:	f000 80f5 	beq.w	801e556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801e36c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e370:	d019      	beq.n	801e3a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e372:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e37a:	fb0c fa0a 	mul.w	sl, ip, sl
 801e37e:	fb0c fc03 	mul.w	ip, ip, r3
 801e382:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e386:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e38a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e38e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e392:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e396:	4453      	add	r3, sl
 801e398:	0a3f      	lsrs	r7, r7, #8
 801e39a:	0a1b      	lsrs	r3, r3, #8
 801e39c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e3a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e3a4:	433b      	orrs	r3, r7
 801e3a6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e3a8:	2cff      	cmp	r4, #255	; 0xff
 801e3aa:	d020      	beq.n	801e3ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801e3ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e3ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e3b2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e3b4:	4367      	muls	r7, r4
 801e3b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e3b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e3bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e3c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e3c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e3c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801e3ce:	44bc      	add	ip, r7
 801e3d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e3d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e3dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e3e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e3e8:	ea4c 040a 	orr.w	r4, ip, sl
 801e3ec:	9410      	str	r4, [sp, #64]	; 0x40
 801e3ee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3f0:	2cff      	cmp	r4, #255	; 0xff
 801e3f2:	d020      	beq.n	801e436 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801e3f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e3f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e3fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e3fc:	4367      	muls	r7, r4
 801e3fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e400:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e404:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e408:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e40a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e40e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e412:	fb04 fa0a 	mul.w	sl, r4, sl
 801e416:	44bc      	add	ip, r7
 801e418:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e41c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e420:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e424:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e428:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e42c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e430:	ea4c 040a 	orr.w	r4, ip, sl
 801e434:	940b      	str	r4, [sp, #44]	; 0x2c
 801e436:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e438:	2cff      	cmp	r4, #255	; 0xff
 801e43a:	d020      	beq.n	801e47e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801e43c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e43e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e442:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e444:	4367      	muls	r7, r4
 801e446:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e448:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e44c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e450:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e452:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e456:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e45a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e45e:	44bc      	add	ip, r7
 801e460:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e464:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e468:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e46c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e470:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e474:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e478:	ea4c 040a 	orr.w	r4, ip, sl
 801e47c:	9411      	str	r4, [sp, #68]	; 0x44
 801e47e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e480:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e488:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e48c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e48e:	fb0e f707 	mul.w	r7, lr, r7
 801e492:	fb02 770c 	mla	r7, r2, ip, r7
 801e496:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e49a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e49c:	fb00 770c 	mla	r7, r0, ip, r7
 801e4a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e4a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e4a6:	fb08 770c 	mla	r7, r8, ip, r7
 801e4aa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e4ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e4b0:	fb0e fe0c 	mul.w	lr, lr, ip
 801e4b4:	0a3f      	lsrs	r7, r7, #8
 801e4b6:	fb02 e303 	mla	r3, r2, r3, lr
 801e4ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e4bc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e4c0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e4c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e4c6:	fb00 330a 	mla	r3, r0, sl, r3
 801e4ca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e4ce:	f8b9 0000 	ldrh.w	r0, [r9]
 801e4d2:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4d8:	1202      	asrs	r2, r0, #8
 801e4da:	434b      	muls	r3, r1
 801e4dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4e0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e4e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e4e8:	1c59      	adds	r1, r3, #1
 801e4ea:	ea47 070c 	orr.w	r7, r7, ip
 801e4ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e4f2:	0c3b      	lsrs	r3, r7, #16
 801e4f4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e4f8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e4fc:	b2ff      	uxtb	r7, r7
 801e4fe:	fb13 f304 	smulbb	r3, r3, r4
 801e502:	b2c9      	uxtb	r1, r1
 801e504:	fb1c fc04 	smulbb	ip, ip, r4
 801e508:	fb02 3201 	mla	r2, r2, r1, r3
 801e50c:	10c3      	asrs	r3, r0, #3
 801e50e:	fb17 f704 	smulbb	r7, r7, r4
 801e512:	00c0      	lsls	r0, r0, #3
 801e514:	b292      	uxth	r2, r2
 801e516:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e51a:	b2c0      	uxtb	r0, r0
 801e51c:	fb03 c301 	mla	r3, r3, r1, ip
 801e520:	f102 0c01 	add.w	ip, r2, #1
 801e524:	fb00 7001 	mla	r0, r0, r1, r7
 801e528:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e52c:	b280      	uxth	r0, r0
 801e52e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e532:	b29b      	uxth	r3, r3
 801e534:	1c42      	adds	r2, r0, #1
 801e536:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e53a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e53e:	ea42 020c 	orr.w	r2, r2, ip
 801e542:	f103 0c01 	add.w	ip, r3, #1
 801e546:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e54a:	095b      	lsrs	r3, r3, #5
 801e54c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e550:	431a      	orrs	r2, r3
 801e552:	f8a9 2000 	strh.w	r2, [r9]
 801e556:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e558:	f109 0902 	add.w	r9, r9, #2
 801e55c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e55e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e562:	441a      	add	r2, r3
 801e564:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e566:	9229      	str	r2, [sp, #164]	; 0xa4
 801e568:	441d      	add	r5, r3
 801e56a:	e63d      	b.n	801e1e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e56c:	2800      	cmp	r0, #0
 801e56e:	f43f aedd 	beq.w	801e32c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e572:	5c79      	ldrb	r1, [r7, r1]
 801e574:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e578:	910b      	str	r1, [sp, #44]	; 0x2c
 801e57a:	0e09      	lsrs	r1, r1, #24
 801e57c:	9114      	str	r1, [sp, #80]	; 0x50
 801e57e:	e6d5      	b.n	801e32c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e580:	b01f      	add	sp, #124	; 0x7c
 801e582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e586 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e58a:	b089      	sub	sp, #36	; 0x24
 801e58c:	9101      	str	r1, [sp, #4]
 801e58e:	9801      	ldr	r0, [sp, #4]
 801e590:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801e594:	8800      	ldrh	r0, [r0, #0]
 801e596:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801e59a:	1206      	asrs	r6, r0, #8
 801e59c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801e5a0:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801e5a4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e5a8:	9602      	str	r6, [sp, #8]
 801e5aa:	10c6      	asrs	r6, r0, #3
 801e5ac:	00c0      	lsls	r0, r0, #3
 801e5ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e5b2:	b2c0      	uxtb	r0, r0
 801e5b4:	9603      	str	r6, [sp, #12]
 801e5b6:	9004      	str	r0, [sp, #16]
 801e5b8:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801e5bc:	fb07 100c 	mla	r0, r7, ip, r1
 801e5c0:	2f00      	cmp	r7, #0
 801e5c2:	eb02 0e00 	add.w	lr, r2, r0
 801e5c6:	f2c0 810a 	blt.w	801e7de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e5ca:	45b8      	cmp	r8, r7
 801e5cc:	f340 8107 	ble.w	801e7de <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e5d0:	2900      	cmp	r1, #0
 801e5d2:	f2c0 8102 	blt.w	801e7da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e5d6:	458c      	cmp	ip, r1
 801e5d8:	f340 80ff 	ble.w	801e7da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e5dc:	5c12      	ldrb	r2, [r2, r0]
 801e5de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e5e2:	1c4a      	adds	r2, r1, #1
 801e5e4:	f100 80fe 	bmi.w	801e7e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e5e8:	4594      	cmp	ip, r2
 801e5ea:	f340 80fb 	ble.w	801e7e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e5ee:	2d00      	cmp	r5, #0
 801e5f0:	f000 80fa 	beq.w	801e7e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801e5f4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e5f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e5fc:	3701      	adds	r7, #1
 801e5fe:	f100 80f7 	bmi.w	801e7f0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e602:	45b8      	cmp	r8, r7
 801e604:	f340 80f4 	ble.w	801e7f0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e608:	2c00      	cmp	r4, #0
 801e60a:	f000 80f4 	beq.w	801e7f6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801e60e:	2900      	cmp	r1, #0
 801e610:	eb0e 020c 	add.w	r2, lr, ip
 801e614:	f2c0 80ea 	blt.w	801e7ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e618:	458c      	cmp	ip, r1
 801e61a:	f340 80e7 	ble.w	801e7ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e61e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801e622:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801e626:	3101      	adds	r1, #1
 801e628:	f100 80e8 	bmi.w	801e7fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e62c:	458c      	cmp	ip, r1
 801e62e:	f340 80e5 	ble.w	801e7fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e632:	2d00      	cmp	r5, #0
 801e634:	f000 80e4 	beq.w	801e800 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801e638:	7852      	ldrb	r2, [r2, #1]
 801e63a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e63e:	0e0b      	lsrs	r3, r1, #24
 801e640:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e644:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e648:	9300      	str	r3, [sp, #0]
 801e64a:	b2a4      	uxth	r4, r4
 801e64c:	b2ab      	uxth	r3, r5
 801e64e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e652:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e656:	fb03 f904 	mul.w	r9, r3, r4
 801e65a:	011b      	lsls	r3, r3, #4
 801e65c:	fb0a f505 	mul.w	r5, sl, r5
 801e660:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801e664:	eba3 0e09 	sub.w	lr, r3, r9
 801e668:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801e66c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e670:	0a28      	lsrs	r0, r5, #8
 801e672:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e676:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e67a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e67e:	fb0a f303 	mul.w	r3, sl, r3
 801e682:	fb08 f707 	mul.w	r7, r8, r7
 801e686:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801e68a:	4405      	add	r5, r0
 801e68c:	fb08 fc0c 	mul.w	ip, r8, ip
 801e690:	b2a4      	uxth	r4, r4
 801e692:	0a2d      	lsrs	r5, r5, #8
 801e694:	fa1f fe8e 	uxth.w	lr, lr
 801e698:	1b12      	subs	r2, r2, r4
 801e69a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801e69e:	b292      	uxth	r2, r2
 801e6a0:	9005      	str	r0, [sp, #20]
 801e6a2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801e6a6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e6aa:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801e6ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e6b2:	0a1b      	lsrs	r3, r3, #8
 801e6b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e6b8:	9306      	str	r3, [sp, #24]
 801e6ba:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801e6be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e6c2:	4460      	add	r0, ip
 801e6c4:	fb0b f303 	mul.w	r3, fp, r3
 801e6c8:	fb0b f606 	mul.w	r6, fp, r6
 801e6cc:	0a00      	lsrs	r0, r0, #8
 801e6ce:	0a1d      	lsrs	r5, r3, #8
 801e6d0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e6d4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e6d8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e6dc:	441d      	add	r5, r3
 801e6de:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801e6e2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e6e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e6ea:	0a2d      	lsrs	r5, r5, #8
 801e6ec:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801e6f0:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801e6f4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e6f8:	0a36      	lsrs	r6, r6, #8
 801e6fa:	0a1b      	lsrs	r3, r3, #8
 801e6fc:	fb05 f50e 	mul.w	r5, r5, lr
 801e700:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e704:	9307      	str	r3, [sp, #28]
 801e706:	0e0b      	lsrs	r3, r1, #24
 801e708:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e70c:	fb0e f606 	mul.w	r6, lr, r6
 801e710:	435f      	muls	r7, r3
 801e712:	4359      	muls	r1, r3
 801e714:	9b05      	ldr	r3, [sp, #20]
 801e716:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e71a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e71e:	fb03 5502 	mla	r5, r3, r2, r5
 801e722:	9b06      	ldr	r3, [sp, #24]
 801e724:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e728:	fb0e fe0b 	mul.w	lr, lr, fp
 801e72c:	44bc      	add	ip, r7
 801e72e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801e732:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e736:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e73a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e73e:	0a09      	lsrs	r1, r1, #8
 801e740:	fb0c 5509 	mla	r5, ip, r9, r5
 801e744:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e748:	fb00 5504 	mla	r5, r0, r4, r5
 801e74c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801e750:	9b07      	ldr	r3, [sp, #28]
 801e752:	fb02 6000 	mla	r0, r2, r0, r6
 801e756:	0a2d      	lsrs	r5, r5, #8
 801e758:	fb02 e20a 	mla	r2, r2, sl, lr
 801e75c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e760:	fb09 0001 	mla	r0, r9, r1, r0
 801e764:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e768:	fb04 0003 	mla	r0, r4, r3, r0
 801e76c:	9b00      	ldr	r3, [sp, #0]
 801e76e:	fb04 2408 	mla	r4, r4, r8, r2
 801e772:	9a04      	ldr	r2, [sp, #16]
 801e774:	0a00      	lsrs	r0, r0, #8
 801e776:	fb09 4903 	mla	r9, r9, r3, r4
 801e77a:	9b02      	ldr	r3, [sp, #8]
 801e77c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e780:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801e784:	4305      	orrs	r5, r0
 801e786:	fa5f f989 	uxtb.w	r9, r9
 801e78a:	fb03 f109 	mul.w	r1, r3, r9
 801e78e:	9b03      	ldr	r3, [sp, #12]
 801e790:	fb03 f309 	mul.w	r3, r3, r9
 801e794:	fb02 f909 	mul.w	r9, r2, r9
 801e798:	1c4a      	adds	r2, r1, #1
 801e79a:	1c58      	adds	r0, r3, #1
 801e79c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e7a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e7a4:	0c2a      	lsrs	r2, r5, #16
 801e7a6:	0a2b      	lsrs	r3, r5, #8
 801e7a8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e7ac:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e7b0:	0212      	lsls	r2, r2, #8
 801e7b2:	00db      	lsls	r3, r3, #3
 801e7b4:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e7b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e7bc:	4313      	orrs	r3, r2
 801e7be:	f109 0201 	add.w	r2, r9, #1
 801e7c2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e7c6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801e7ca:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e7ce:	431d      	orrs	r5, r3
 801e7d0:	9b01      	ldr	r3, [sp, #4]
 801e7d2:	801d      	strh	r5, [r3, #0]
 801e7d4:	b009      	add	sp, #36	; 0x24
 801e7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7da:	2000      	movs	r0, #0
 801e7dc:	e701      	b.n	801e5e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801e7de:	2600      	movs	r6, #0
 801e7e0:	4630      	mov	r0, r6
 801e7e2:	e70b      	b.n	801e5fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e7e4:	2600      	movs	r6, #0
 801e7e6:	e709      	b.n	801e5fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e7e8:	462e      	mov	r6, r5
 801e7ea:	e707      	b.n	801e5fc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e7ec:	2700      	movs	r7, #0
 801e7ee:	e71a      	b.n	801e626 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801e7f0:	2100      	movs	r1, #0
 801e7f2:	460f      	mov	r7, r1
 801e7f4:	e723      	b.n	801e63e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e7f6:	4621      	mov	r1, r4
 801e7f8:	4627      	mov	r7, r4
 801e7fa:	e720      	b.n	801e63e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e7fc:	2100      	movs	r1, #0
 801e7fe:	e71e      	b.n	801e63e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e800:	4629      	mov	r1, r5
 801e802:	e71c      	b.n	801e63e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801e804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e808:	b09b      	sub	sp, #108	; 0x6c
 801e80a:	9218      	str	r2, [sp, #96]	; 0x60
 801e80c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e80e:	9019      	str	r0, [sp, #100]	; 0x64
 801e810:	9116      	str	r1, [sp, #88]	; 0x58
 801e812:	6850      	ldr	r0, [r2, #4]
 801e814:	9307      	str	r3, [sp, #28]
 801e816:	6812      	ldr	r2, [r2, #0]
 801e818:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801e81a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e81e:	fb00 1303 	mla	r3, r0, r3, r1
 801e822:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e826:	930a      	str	r3, [sp, #40]	; 0x28
 801e828:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	930f      	str	r3, [sp, #60]	; 0x3c
 801e82e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e830:	685e      	ldr	r6, [r3, #4]
 801e832:	3604      	adds	r6, #4
 801e834:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e836:	2b00      	cmp	r3, #0
 801e838:	dc03      	bgt.n	801e842 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e83a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	f340 8373 	ble.w	801ef28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e842:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e844:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e848:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e84c:	1e48      	subs	r0, r1, #1
 801e84e:	1e57      	subs	r7, r2, #1
 801e850:	9b07      	ldr	r3, [sp, #28]
 801e852:	2b00      	cmp	r3, #0
 801e854:	f340 818f 	ble.w	801eb76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801e858:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e85a:	142b      	asrs	r3, r5, #16
 801e85c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e860:	d406      	bmi.n	801e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e862:	4584      	cmp	ip, r0
 801e864:	da04      	bge.n	801e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e866:	2b00      	cmp	r3, #0
 801e868:	db02      	blt.n	801e870 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e86a:	42bb      	cmp	r3, r7
 801e86c:	f2c0 8184 	blt.w	801eb78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801e870:	f11c 0c01 	adds.w	ip, ip, #1
 801e874:	f100 8172 	bmi.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e878:	4561      	cmp	r1, ip
 801e87a:	f2c0 816f 	blt.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e87e:	3301      	adds	r3, #1
 801e880:	f100 816c 	bmi.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e884:	429a      	cmp	r2, r3
 801e886:	f2c0 8169 	blt.w	801eb5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e88a:	9b07      	ldr	r3, [sp, #28]
 801e88c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e88e:	9317      	str	r3, [sp, #92]	; 0x5c
 801e890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e892:	2b00      	cmp	r3, #0
 801e894:	f340 818e 	ble.w	801ebb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e898:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e89a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e89e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e8a8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e8ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e8ae:	141b      	asrs	r3, r3, #16
 801e8b0:	f100 81d1 	bmi.w	801ec56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e8b4:	f101 38ff 	add.w	r8, r1, #4294967295
 801e8b8:	4543      	cmp	r3, r8
 801e8ba:	f280 81cc 	bge.w	801ec56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e8be:	f1bc 0f00 	cmp.w	ip, #0
 801e8c2:	f2c0 81c8 	blt.w	801ec56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e8c6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e8ca:	45c4      	cmp	ip, r8
 801e8cc:	f280 81c3 	bge.w	801ec56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e8d0:	b209      	sxth	r1, r1
 801e8d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e8d4:	fb0c 3301 	mla	r3, ip, r1, r3
 801e8d8:	eb04 0803 	add.w	r8, r4, r3
 801e8dc:	5ce3      	ldrb	r3, [r4, r3]
 801e8de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e8e2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e8e6:	2a00      	cmp	r2, #0
 801e8e8:	f000 81aa 	beq.w	801ec40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801e8ec:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e8f0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e8f4:	940b      	str	r4, [sp, #44]	; 0x2c
 801e8f6:	0e24      	lsrs	r4, r4, #24
 801e8f8:	9412      	str	r4, [sp, #72]	; 0x48
 801e8fa:	b178      	cbz	r0, 801e91c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e8fc:	eb08 0c01 	add.w	ip, r8, r1
 801e900:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e904:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e908:	9108      	str	r1, [sp, #32]
 801e90a:	0e09      	lsrs	r1, r1, #24
 801e90c:	9110      	str	r1, [sp, #64]	; 0x40
 801e90e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e912:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e916:	910c      	str	r1, [sp, #48]	; 0x30
 801e918:	0e09      	lsrs	r1, r1, #24
 801e91a:	9113      	str	r1, [sp, #76]	; 0x4c
 801e91c:	b292      	uxth	r2, r2
 801e91e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e920:	b280      	uxth	r0, r0
 801e922:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e924:	fb02 f900 	mul.w	r9, r2, r0
 801e928:	0112      	lsls	r2, r2, #4
 801e92a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e92e:	eba2 0809 	sub.w	r8, r2, r9
 801e932:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e936:	b280      	uxth	r0, r0
 801e938:	fa1f f888 	uxth.w	r8, r8
 801e93c:	1a12      	subs	r2, r2, r0
 801e93e:	fb08 f101 	mul.w	r1, r8, r1
 801e942:	b292      	uxth	r2, r2
 801e944:	fb02 110e 	mla	r1, r2, lr, r1
 801e948:	fb00 1104 	mla	r1, r0, r4, r1
 801e94c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e94e:	fb09 1104 	mla	r1, r9, r4, r1
 801e952:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e956:	2900      	cmp	r1, #0
 801e958:	f000 80f5 	beq.w	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801e95c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e960:	d01b      	beq.n	801e99a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e962:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e96a:	fb0e fa0a 	mul.w	sl, lr, sl
 801e96e:	fb0e fe03 	mul.w	lr, lr, r3
 801e972:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e976:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e97a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e97e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e982:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e986:	4453      	add	r3, sl
 801e988:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e98c:	0a1b      	lsrs	r3, r3, #8
 801e98e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e992:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e996:	ea43 030c 	orr.w	r3, r3, ip
 801e99a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e99c:	2cff      	cmp	r4, #255	; 0xff
 801e99e:	d021      	beq.n	801e9e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e9a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9a2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e9a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9a8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e9ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9ae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e9b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e9b8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e9bc:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e9c4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e9c8:	44de      	add	lr, fp
 801e9ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e9ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e9d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e9da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e9de:	ea4e 040a 	orr.w	r4, lr, sl
 801e9e2:	940b      	str	r4, [sp, #44]	; 0x2c
 801e9e4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e9e6:	2cff      	cmp	r4, #255	; 0xff
 801e9e8:	d021      	beq.n	801ea2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801e9ea:	9c08      	ldr	r4, [sp, #32]
 801e9ec:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e9f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e9f2:	fb04 fb0b 	mul.w	fp, r4, fp
 801e9f6:	9c08      	ldr	r4, [sp, #32]
 801e9f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e9fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e9fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea02:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea06:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea0a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea0e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea12:	44de      	add	lr, fp
 801ea14:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea18:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea24:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea28:	ea4e 040a 	orr.w	r4, lr, sl
 801ea2c:	9408      	str	r4, [sp, #32]
 801ea2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea30:	2cff      	cmp	r4, #255	; 0xff
 801ea32:	d021      	beq.n	801ea78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801ea34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea36:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea3c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea48:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea4c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea50:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea58:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea5c:	44de      	add	lr, fp
 801ea5e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea6a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea6e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea72:	ea4e 040a 	orr.w	r4, lr, sl
 801ea76:	940c      	str	r4, [sp, #48]	; 0x30
 801ea78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ea7a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ea7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea82:	43c9      	mvns	r1, r1
 801ea84:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ea88:	9c08      	ldr	r4, [sp, #32]
 801ea8a:	fb08 fc0c 	mul.w	ip, r8, ip
 801ea8e:	fb02 cc0e 	mla	ip, r2, lr, ip
 801ea92:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ea96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea98:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ea9c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eaa0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eaa2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eaa6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801eaaa:	fb08 f80e 	mul.w	r8, r8, lr
 801eaae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eab2:	fa5f fe81 	uxtb.w	lr, r1
 801eab6:	fb02 8303 	mla	r3, r2, r3, r8
 801eaba:	9a08      	ldr	r2, [sp, #32]
 801eabc:	f8b7 8000 	ldrh.w	r8, [r7]
 801eac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eac4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801eac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eaca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801eace:	fb00 330a 	mla	r3, r0, sl, r3
 801ead2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801ead6:	ea4f 2228 	mov.w	r2, r8, asr #8
 801eada:	fb09 3900 	mla	r9, r9, r0, r3
 801eade:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801eae2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801eae6:	b2c9      	uxtb	r1, r1
 801eae8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eaec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eaf0:	fb02 f20e 	mul.w	r2, r2, lr
 801eaf4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801eaf8:	fb00 f00e 	mul.w	r0, r0, lr
 801eafc:	1c53      	adds	r3, r2, #1
 801eafe:	fb01 f10e 	mul.w	r1, r1, lr
 801eb02:	ea4c 0c09 	orr.w	ip, ip, r9
 801eb06:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eb0a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801eb0e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eb12:	4a60      	ldr	r2, [pc, #384]	; (801ec94 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801eb14:	b2db      	uxtb	r3, r3
 801eb16:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801eb1a:	1c43      	adds	r3, r0, #1
 801eb1c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801eb20:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801eb24:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801eb28:	00db      	lsls	r3, r3, #3
 801eb2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb2e:	4313      	orrs	r3, r2
 801eb30:	1c4a      	adds	r2, r1, #1
 801eb32:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eb36:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801eb3a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801eb3e:	ea4c 0c03 	orr.w	ip, ip, r3
 801eb42:	f8a7 c000 	strh.w	ip, [r7]
 801eb46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb48:	3702      	adds	r7, #2
 801eb4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801eb4c:	441a      	add	r2, r3
 801eb4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb50:	441d      	add	r5, r3
 801eb52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801eb54:	9225      	str	r2, [sp, #148]	; 0x94
 801eb56:	3b01      	subs	r3, #1
 801eb58:	9317      	str	r3, [sp, #92]	; 0x5c
 801eb5a:	e699      	b.n	801e890 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eb5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eb5e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801eb60:	441c      	add	r4, r3
 801eb62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eb64:	441d      	add	r5, r3
 801eb66:	9b07      	ldr	r3, [sp, #28]
 801eb68:	9425      	str	r4, [sp, #148]	; 0x94
 801eb6a:	3b01      	subs	r3, #1
 801eb6c:	9307      	str	r3, [sp, #28]
 801eb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb70:	3302      	adds	r3, #2
 801eb72:	930a      	str	r3, [sp, #40]	; 0x28
 801eb74:	e66c      	b.n	801e850 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801eb76:	d024      	beq.n	801ebc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801eb78:	9b07      	ldr	r3, [sp, #28]
 801eb7a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801eb80:	fb00 4003 	mla	r0, r0, r3, r4
 801eb84:	1400      	asrs	r0, r0, #16
 801eb86:	f53f ae80 	bmi.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eb8a:	3901      	subs	r1, #1
 801eb8c:	4288      	cmp	r0, r1
 801eb8e:	f6bf ae7c 	bge.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eb92:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801eb94:	fb01 5303 	mla	r3, r1, r3, r5
 801eb98:	141b      	asrs	r3, r3, #16
 801eb9a:	f53f ae76 	bmi.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eb9e:	3a01      	subs	r2, #1
 801eba0:	4293      	cmp	r3, r2
 801eba2:	f6bf ae72 	bge.w	801e88a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801eba6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ebaa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ebae:	f1bb 0f00 	cmp.w	fp, #0
 801ebb2:	dc71      	bgt.n	801ec98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ebb4:	9b07      	ldr	r3, [sp, #28]
 801ebb6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ebba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ebbc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ebc0:	930a      	str	r3, [sp, #40]	; 0x28
 801ebc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	f340 81af 	ble.w	801ef28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801ebca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ebce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ebd0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebd8:	eef0 6a62 	vmov.f32	s13, s5
 801ebdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ebe0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebe8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801ebec:	eef0 6a43 	vmov.f32	s13, s6
 801ebf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebf4:	ee16 5a90 	vmov	r5, s13
 801ebf8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec10:	ee12 2a90 	vmov	r2, s5
 801ec14:	eef0 2a47 	vmov.f32	s5, s14
 801ec18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec1c:	ee13 2a10 	vmov	r2, s6
 801ec20:	9327      	str	r3, [sp, #156]	; 0x9c
 801ec22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec24:	eeb0 3a67 	vmov.f32	s6, s15
 801ec28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec2c:	9328      	str	r3, [sp, #160]	; 0xa0
 801ec2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ec32:	3b01      	subs	r3, #1
 801ec34:	9316      	str	r3, [sp, #88]	; 0x58
 801ec36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec38:	bf08      	it	eq
 801ec3a:	4613      	moveq	r3, r2
 801ec3c:	9307      	str	r3, [sp, #28]
 801ec3e:	e5f9      	b.n	801e834 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ec40:	2800      	cmp	r0, #0
 801ec42:	f43f ae6b 	beq.w	801e91c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ec46:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ec4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ec4e:	9108      	str	r1, [sp, #32]
 801ec50:	0e09      	lsrs	r1, r1, #24
 801ec52:	9110      	str	r1, [sp, #64]	; 0x40
 801ec54:	e662      	b.n	801e91c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ec56:	f113 0801 	adds.w	r8, r3, #1
 801ec5a:	f53f af74 	bmi.w	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec5e:	4541      	cmp	r1, r8
 801ec60:	f6ff af71 	blt.w	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec64:	f11c 0801 	adds.w	r8, ip, #1
 801ec68:	f53f af6d 	bmi.w	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec6c:	45c6      	cmp	lr, r8
 801ec6e:	f6ff af6a 	blt.w	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec72:	b209      	sxth	r1, r1
 801ec74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ec78:	fa0f f38e 	sxth.w	r3, lr
 801ec7c:	9100      	str	r1, [sp, #0]
 801ec7e:	4639      	mov	r1, r7
 801ec80:	9301      	str	r3, [sp, #4]
 801ec82:	4633      	mov	r3, r6
 801ec84:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ec88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ec8c:	f7ff fc7b 	bl	801e586 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ec90:	e759      	b.n	801eb46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ec92:	bf00      	nop
 801ec94:	fffff800 	.word	0xfffff800
 801ec98:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ec9a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ec9e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801eca0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801eca4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eca6:	1427      	asrs	r7, r4, #16
 801eca8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ecaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ecae:	142b      	asrs	r3, r5, #16
 801ecb0:	fb01 7303 	mla	r3, r1, r3, r7
 801ecb4:	18e7      	adds	r7, r4, r3
 801ecb6:	5ce3      	ldrb	r3, [r4, r3]
 801ecb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ecbc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ecc0:	2a00      	cmp	r2, #0
 801ecc2:	f000 8127 	beq.w	801ef14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ecc6:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ecca:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ecce:	940d      	str	r4, [sp, #52]	; 0x34
 801ecd0:	0e24      	lsrs	r4, r4, #24
 801ecd2:	9414      	str	r4, [sp, #80]	; 0x50
 801ecd4:	b170      	cbz	r0, 801ecf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ecd6:	eb07 0e01 	add.w	lr, r7, r1
 801ecda:	5c79      	ldrb	r1, [r7, r1]
 801ecdc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ece0:	9109      	str	r1, [sp, #36]	; 0x24
 801ece2:	0e09      	lsrs	r1, r1, #24
 801ece4:	9111      	str	r1, [sp, #68]	; 0x44
 801ece6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801ecea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ecee:	910e      	str	r1, [sp, #56]	; 0x38
 801ecf0:	0e09      	lsrs	r1, r1, #24
 801ecf2:	9115      	str	r1, [sp, #84]	; 0x54
 801ecf4:	b292      	uxth	r2, r2
 801ecf6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ecf8:	b280      	uxth	r0, r0
 801ecfa:	fb02 f800 	mul.w	r8, r2, r0
 801ecfe:	0112      	lsls	r2, r2, #4
 801ed00:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801ed04:	eba2 0e08 	sub.w	lr, r2, r8
 801ed08:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ed0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed0e:	b280      	uxth	r0, r0
 801ed10:	fa1f fe8e 	uxth.w	lr, lr
 801ed14:	1a09      	subs	r1, r1, r0
 801ed16:	fb0e f202 	mul.w	r2, lr, r2
 801ed1a:	b289      	uxth	r1, r1
 801ed1c:	fb01 220c 	mla	r2, r1, ip, r2
 801ed20:	fb00 2204 	mla	r2, r0, r4, r2
 801ed24:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ed26:	fb08 2204 	mla	r2, r8, r4, r2
 801ed2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ed2e:	2a00      	cmp	r2, #0
 801ed30:	f000 80e5 	beq.w	801eefe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801ed34:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ed38:	d019      	beq.n	801ed6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801ed3a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ed3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed42:	fb0c fa0a 	mul.w	sl, ip, sl
 801ed46:	fb0c fc03 	mul.w	ip, ip, r3
 801ed4a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ed4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ed52:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ed56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed5a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ed5e:	4453      	add	r3, sl
 801ed60:	0a3f      	lsrs	r7, r7, #8
 801ed62:	0a1b      	lsrs	r3, r3, #8
 801ed64:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ed68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed6c:	433b      	orrs	r3, r7
 801ed6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ed70:	2cff      	cmp	r4, #255	; 0xff
 801ed72:	d020      	beq.n	801edb6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801ed74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ed76:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ed7a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ed7c:	4367      	muls	r7, r4
 801ed7e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ed80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ed84:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ed88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ed8a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ed8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed92:	fb04 fa0a 	mul.w	sl, r4, sl
 801ed96:	44bc      	add	ip, r7
 801ed98:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ed9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eda0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eda4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eda8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801edb0:	ea4c 040a 	orr.w	r4, ip, sl
 801edb4:	940d      	str	r4, [sp, #52]	; 0x34
 801edb6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edb8:	2cff      	cmp	r4, #255	; 0xff
 801edba:	d020      	beq.n	801edfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801edbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801edbe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801edc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edc4:	4367      	muls	r7, r4
 801edc6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801edc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801edcc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801edd0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edd2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801edd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edda:	fb04 fa0a 	mul.w	sl, r4, sl
 801edde:	44bc      	add	ip, r7
 801ede0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ede4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ede8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801edec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801edf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801edf8:	ea4c 040a 	orr.w	r4, ip, sl
 801edfc:	9409      	str	r4, [sp, #36]	; 0x24
 801edfe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee00:	2cff      	cmp	r4, #255	; 0xff
 801ee02:	d020      	beq.n	801ee46 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801ee04:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee0a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee0c:	4367      	muls	r7, r4
 801ee0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee18:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee22:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee26:	44bc      	add	ip, r7
 801ee28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee40:	ea4c 040a 	orr.w	r4, ip, sl
 801ee44:	940e      	str	r4, [sp, #56]	; 0x38
 801ee46:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee48:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ee4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee50:	43d2      	mvns	r2, r2
 801ee52:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee56:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee58:	b2d2      	uxtb	r2, r2
 801ee5a:	fb0e f707 	mul.w	r7, lr, r7
 801ee5e:	fb01 770c 	mla	r7, r1, ip, r7
 801ee62:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ee66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee68:	fb00 770c 	mla	r7, r0, ip, r7
 801ee6c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ee70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee72:	fb08 770c 	mla	r7, r8, ip, r7
 801ee76:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ee7a:	fb0e fe0c 	mul.w	lr, lr, ip
 801ee7e:	0a3f      	lsrs	r7, r7, #8
 801ee80:	fb01 e303 	mla	r3, r1, r3, lr
 801ee84:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee86:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ee8a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ee8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ee90:	fb00 330a 	mla	r3, r0, sl, r3
 801ee94:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ee98:	fb08 3c0c 	mla	ip, r8, ip, r3
 801ee9c:	f8b9 3000 	ldrh.w	r3, [r9]
 801eea0:	1218      	asrs	r0, r3, #8
 801eea2:	10d9      	asrs	r1, r3, #3
 801eea4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eea8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eeac:	00db      	lsls	r3, r3, #3
 801eeae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eeb2:	4350      	muls	r0, r2
 801eeb4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801eeb8:	b2db      	uxtb	r3, r3
 801eeba:	4351      	muls	r1, r2
 801eebc:	ea47 070c 	orr.w	r7, r7, ip
 801eec0:	4353      	muls	r3, r2
 801eec2:	1c42      	adds	r2, r0, #1
 801eec4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eec8:	0c3a      	lsrs	r2, r7, #16
 801eeca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eece:	4a18      	ldr	r2, [pc, #96]	; (801ef30 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801eed0:	b2c0      	uxtb	r0, r0
 801eed2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801eed6:	1c4a      	adds	r2, r1, #1
 801eed8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eedc:	0a3a      	lsrs	r2, r7, #8
 801eede:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801eee2:	00c9      	lsls	r1, r1, #3
 801eee4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eee8:	4301      	orrs	r1, r0
 801eeea:	1c58      	adds	r0, r3, #1
 801eeec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801eef0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801eef4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801eef8:	4308      	orrs	r0, r1
 801eefa:	f8a9 0000 	strh.w	r0, [r9]
 801eefe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ef00:	f109 0902 	add.w	r9, r9, #2
 801ef04:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ef06:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ef0a:	441a      	add	r2, r3
 801ef0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ef0e:	9225      	str	r2, [sp, #148]	; 0x94
 801ef10:	441d      	add	r5, r3
 801ef12:	e64c      	b.n	801ebae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801ef14:	2800      	cmp	r0, #0
 801ef16:	f43f aeed 	beq.w	801ecf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ef1a:	5c79      	ldrb	r1, [r7, r1]
 801ef1c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ef20:	9109      	str	r1, [sp, #36]	; 0x24
 801ef22:	0e09      	lsrs	r1, r1, #24
 801ef24:	9111      	str	r1, [sp, #68]	; 0x44
 801ef26:	e6e5      	b.n	801ecf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801ef28:	b01b      	add	sp, #108	; 0x6c
 801ef2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef2e:	bf00      	nop
 801ef30:	fffff800 	.word	0xfffff800

0801ef34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801ef34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef38:	b085      	sub	sp, #20
 801ef3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801ef3e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801ef42:	2800      	cmp	r0, #0
 801ef44:	9103      	str	r1, [sp, #12]
 801ef46:	fb00 7406 	mla	r4, r0, r6, r7
 801ef4a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801ef4e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801ef52:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801ef56:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801ef5a:	eb03 0904 	add.w	r9, r3, r4
 801ef5e:	9501      	str	r5, [sp, #4]
 801ef60:	f2c0 8150 	blt.w	801f204 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801ef64:	4583      	cmp	fp, r0
 801ef66:	f340 814d 	ble.w	801f204 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801ef6a:	2f00      	cmp	r7, #0
 801ef6c:	f2c0 8146 	blt.w	801f1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ef70:	42be      	cmp	r6, r7
 801ef72:	f340 8143 	ble.w	801f1fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801ef76:	f813 c004 	ldrb.w	ip, [r3, r4]
 801ef7a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801ef7e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801ef82:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ef86:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801ef8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ef8e:	4355      	muls	r5, r2
 801ef90:	fb0c f203 	mul.w	r2, ip, r3
 801ef94:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801ef98:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801ef9c:	441d      	add	r5, r3
 801ef9e:	f102 0320 	add.w	r3, r2, #32
 801efa2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801efa6:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801efaa:	0a1b      	lsrs	r3, r3, #8
 801efac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801efb0:	431c      	orrs	r4, r3
 801efb2:	1c7b      	adds	r3, r7, #1
 801efb4:	f100 812b 	bmi.w	801f20e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801efb8:	429e      	cmp	r6, r3
 801efba:	f340 8128 	ble.w	801f20e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801efbe:	2900      	cmp	r1, #0
 801efc0:	f000 8128 	beq.w	801f214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801efc4:	9a01      	ldr	r2, [sp, #4]
 801efc6:	f899 3001 	ldrb.w	r3, [r9, #1]
 801efca:	8855      	ldrh	r5, [r2, #2]
 801efcc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801efd0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801efd4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801efd8:	fb08 f802 	mul.w	r8, r8, r2
 801efdc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801efe0:	435d      	muls	r5, r3
 801efe2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801efe6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801efea:	44d0      	add	r8, sl
 801efec:	f105 0a20 	add.w	sl, r5, #32
 801eff0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801eff4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801eff8:	0a2d      	lsrs	r5, r5, #8
 801effa:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801effe:	432a      	orrs	r2, r5
 801f000:	3001      	adds	r0, #1
 801f002:	f100 810d 	bmi.w	801f220 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f006:	4583      	cmp	fp, r0
 801f008:	f340 810a 	ble.w	801f220 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f00c:	f1be 0f00 	cmp.w	lr, #0
 801f010:	f000 810b 	beq.w	801f22a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801f014:	2f00      	cmp	r7, #0
 801f016:	f2c0 8100 	blt.w	801f21a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f01a:	42be      	cmp	r6, r7
 801f01c:	f340 80fd 	ble.w	801f21a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f020:	9801      	ldr	r0, [sp, #4]
 801f022:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f026:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f02a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801f02e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f032:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801f036:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f03a:	fb0a fa00 	mul.w	sl, sl, r0
 801f03e:	fb05 f808 	mul.w	r8, r5, r8
 801f042:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801f046:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f04a:	4482      	add	sl, r0
 801f04c:	f108 0020 	add.w	r0, r8, #32
 801f050:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f054:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801f058:	0a00      	lsrs	r0, r0, #8
 801f05a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f05e:	ea4b 0b00 	orr.w	fp, fp, r0
 801f062:	3701      	adds	r7, #1
 801f064:	f100 80e6 	bmi.w	801f234 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f068:	42be      	cmp	r6, r7
 801f06a:	f340 80e3 	ble.w	801f234 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f06e:	2900      	cmp	r1, #0
 801f070:	f000 80e3 	beq.w	801f23a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801f074:	3601      	adds	r6, #1
 801f076:	9801      	ldr	r0, [sp, #4]
 801f078:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f07c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801f080:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801f084:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801f088:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f08c:	fb09 f906 	mul.w	r9, r9, r6
 801f090:	fb07 f800 	mul.w	r8, r7, r0
 801f094:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801f098:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801f09c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801f0a0:	44d1      	add	r9, sl
 801f0a2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801f0a6:	f108 0020 	add.w	r0, r8, #32
 801f0aa:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f0ae:	0a00      	lsrs	r0, r0, #8
 801f0b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f0b4:	4330      	orrs	r0, r6
 801f0b6:	b28e      	uxth	r6, r1
 801f0b8:	fa1f f98e 	uxth.w	r9, lr
 801f0bc:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801f0c0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f0c4:	fb06 f809 	mul.w	r8, r6, r9
 801f0c8:	0136      	lsls	r6, r6, #4
 801f0ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f0ce:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f0d2:	9601      	str	r6, [sp, #4]
 801f0d4:	ea4a 0404 	orr.w	r4, sl, r4
 801f0d8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f0dc:	fa1f f689 	uxth.w	r6, r9
 801f0e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f0e4:	fb11 f90e 	smulbb	r9, r1, lr
 801f0e8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f0ec:	9602      	str	r6, [sp, #8]
 801f0ee:	4626      	mov	r6, r4
 801f0f0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801f0f4:	f1ce 0410 	rsb	r4, lr, #16
 801f0f8:	ea4a 0202 	orr.w	r2, sl, r2
 801f0fc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f100:	1a64      	subs	r4, r4, r1
 801f102:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801f106:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f10a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f10e:	434a      	muls	r2, r1
 801f110:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801f114:	ea4a 0000 	orr.w	r0, sl, r0
 801f118:	9903      	ldr	r1, [sp, #12]
 801f11a:	fb04 2406 	mla	r4, r4, r6, r2
 801f11e:	9e02      	ldr	r6, [sp, #8]
 801f120:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f124:	fb09 4200 	mla	r2, r9, r0, r4
 801f128:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801f12c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f130:	8808      	ldrh	r0, [r1, #0]
 801f132:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f136:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801f13a:	ea44 0b0b 	orr.w	fp, r4, fp
 801f13e:	9c01      	ldr	r4, [sp, #4]
 801f140:	b289      	uxth	r1, r1
 801f142:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801f146:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801f14a:	1ba4      	subs	r4, r4, r6
 801f14c:	9e01      	ldr	r6, [sp, #4]
 801f14e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f152:	eba6 0608 	sub.w	r6, r6, r8
 801f156:	b2a4      	uxth	r4, r4
 801f158:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f15c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f160:	b2b6      	uxth	r6, r6
 801f162:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f166:	4373      	muls	r3, r6
 801f168:	ea42 0e0e 	orr.w	lr, r2, lr
 801f16c:	fb0c 3304 	mla	r3, ip, r4, r3
 801f170:	9c02      	ldr	r4, [sp, #8]
 801f172:	fa1f f28e 	uxth.w	r2, lr
 801f176:	fb04 3505 	mla	r5, r4, r5, r3
 801f17a:	10d4      	asrs	r4, r2, #3
 801f17c:	fb08 5707 	mla	r7, r8, r7, r5
 801f180:	1215      	asrs	r5, r2, #8
 801f182:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f186:	00d2      	lsls	r2, r2, #3
 801f188:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f18c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f190:	b2d2      	uxtb	r2, r2
 801f192:	434f      	muls	r7, r1
 801f194:	1c7b      	adds	r3, r7, #1
 801f196:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f19a:	1203      	asrs	r3, r0, #8
 801f19c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801f1a0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f1a4:	b2ff      	uxtb	r7, r7
 801f1a6:	fb13 f307 	smulbb	r3, r3, r7
 801f1aa:	fb05 3501 	mla	r5, r5, r1, r3
 801f1ae:	10c3      	asrs	r3, r0, #3
 801f1b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f1b4:	b2ad      	uxth	r5, r5
 801f1b6:	fb13 f307 	smulbb	r3, r3, r7
 801f1ba:	fb04 3401 	mla	r4, r4, r1, r3
 801f1be:	00c3      	lsls	r3, r0, #3
 801f1c0:	b2db      	uxtb	r3, r3
 801f1c2:	b2a4      	uxth	r4, r4
 801f1c4:	fb13 f307 	smulbb	r3, r3, r7
 801f1c8:	fb02 3101 	mla	r1, r2, r1, r3
 801f1cc:	1c6b      	adds	r3, r5, #1
 801f1ce:	1c62      	adds	r2, r4, #1
 801f1d0:	b289      	uxth	r1, r1
 801f1d2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f1d6:	1c4b      	adds	r3, r1, #1
 801f1d8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801f1dc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f1e0:	9a03      	ldr	r2, [sp, #12]
 801f1e2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f1e6:	0964      	lsrs	r4, r4, #5
 801f1e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f1ec:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f1f0:	432b      	orrs	r3, r5
 801f1f2:	4323      	orrs	r3, r4
 801f1f4:	8013      	strh	r3, [r2, #0]
 801f1f6:	b005      	add	sp, #20
 801f1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1fc:	f04f 0c00 	mov.w	ip, #0
 801f200:	4664      	mov	r4, ip
 801f202:	e6d6      	b.n	801efb2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801f204:	2300      	movs	r3, #0
 801f206:	469c      	mov	ip, r3
 801f208:	461a      	mov	r2, r3
 801f20a:	461c      	mov	r4, r3
 801f20c:	e6f8      	b.n	801f000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f20e:	2300      	movs	r3, #0
 801f210:	461a      	mov	r2, r3
 801f212:	e6f5      	b.n	801f000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f214:	460b      	mov	r3, r1
 801f216:	460a      	mov	r2, r1
 801f218:	e6f2      	b.n	801f000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f21a:	2500      	movs	r5, #0
 801f21c:	46ab      	mov	fp, r5
 801f21e:	e720      	b.n	801f062 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801f220:	2700      	movs	r7, #0
 801f222:	463d      	mov	r5, r7
 801f224:	4638      	mov	r0, r7
 801f226:	46bb      	mov	fp, r7
 801f228:	e745      	b.n	801f0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f22a:	4677      	mov	r7, lr
 801f22c:	4675      	mov	r5, lr
 801f22e:	4670      	mov	r0, lr
 801f230:	46f3      	mov	fp, lr
 801f232:	e740      	b.n	801f0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f234:	2700      	movs	r7, #0
 801f236:	4638      	mov	r0, r7
 801f238:	e73d      	b.n	801f0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f23a:	460f      	mov	r7, r1
 801f23c:	4608      	mov	r0, r1
 801f23e:	e73a      	b.n	801f0b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801f240 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	b097      	sub	sp, #92	; 0x5c
 801f246:	9214      	str	r2, [sp, #80]	; 0x50
 801f248:	9308      	str	r3, [sp, #32]
 801f24a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f24c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f250:	9015      	str	r0, [sp, #84]	; 0x54
 801f252:	9312      	str	r3, [sp, #72]	; 0x48
 801f254:	6850      	ldr	r0, [r2, #4]
 801f256:	9111      	str	r1, [sp, #68]	; 0x44
 801f258:	6812      	ldr	r2, [r2, #0]
 801f25a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f25e:	fb00 1303 	mla	r3, r0, r3, r1
 801f262:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f266:	9309      	str	r3, [sp, #36]	; 0x24
 801f268:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f26a:	681b      	ldr	r3, [r3, #0]
 801f26c:	930b      	str	r3, [sp, #44]	; 0x2c
 801f26e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f270:	685b      	ldr	r3, [r3, #4]
 801f272:	930c      	str	r3, [sp, #48]	; 0x30
 801f274:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801f278:	930a      	str	r3, [sp, #40]	; 0x28
 801f27a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	dc03      	bgt.n	801f288 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f282:	2b00      	cmp	r3, #0
 801f284:	f340 83cd 	ble.w	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f288:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f28a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f28e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f292:	1e48      	subs	r0, r1, #1
 801f294:	1e55      	subs	r5, r2, #1
 801f296:	9b08      	ldr	r3, [sp, #32]
 801f298:	2b00      	cmp	r3, #0
 801f29a:	f340 81a5 	ble.w	801f5e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801f29e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2a2:	1436      	asrs	r6, r6, #16
 801f2a4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f2a8:	d406      	bmi.n	801f2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2aa:	4286      	cmp	r6, r0
 801f2ac:	da04      	bge.n	801f2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2ae:	2b00      	cmp	r3, #0
 801f2b0:	db02      	blt.n	801f2b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f2b2:	42ab      	cmp	r3, r5
 801f2b4:	f2c0 8199 	blt.w	801f5ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f2b8:	3601      	adds	r6, #1
 801f2ba:	f100 8186 	bmi.w	801f5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f2be:	42b1      	cmp	r1, r6
 801f2c0:	f2c0 8183 	blt.w	801f5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f2c4:	3301      	adds	r3, #1
 801f2c6:	f100 8180 	bmi.w	801f5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f2ca:	429a      	cmp	r2, r3
 801f2cc:	f2c0 817d 	blt.w	801f5ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f2d0:	9b08      	ldr	r3, [sp, #32]
 801f2d2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f2d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f2d8:	9313      	str	r3, [sp, #76]	; 0x4c
 801f2da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	f340 81a6 	ble.w	801f62e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f2e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2e4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f2e6:	1418      	asrs	r0, r3, #16
 801f2e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f2ea:	142d      	asrs	r5, r5, #16
 801f2ec:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f2f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f2f2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f2f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f2fc:	f100 81fa 	bmi.w	801f6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f300:	f102 3eff 	add.w	lr, r2, #4294967295
 801f304:	4575      	cmp	r5, lr
 801f306:	f280 81f5 	bge.w	801f6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f30a:	2800      	cmp	r0, #0
 801f30c:	f2c0 81f2 	blt.w	801f6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f310:	f103 3eff 	add.w	lr, r3, #4294967295
 801f314:	4570      	cmp	r0, lr
 801f316:	f280 81ed 	bge.w	801f6f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f31a:	b212      	sxth	r2, r2
 801f31c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f31e:	fa1f fe81 	uxth.w	lr, r1
 801f322:	fb00 5002 	mla	r0, r0, r2, r5
 801f326:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f32a:	eb03 0a00 	add.w	sl, r3, r0
 801f32e:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f332:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f336:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f33a:	b29b      	uxth	r3, r3
 801f33c:	f1bc 0f00 	cmp.w	ip, #0
 801f340:	f000 81bb 	beq.w	801f6ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801f344:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f348:	eb0a 0b02 	add.w	fp, sl, r2
 801f34c:	fa1f fa8c 	uxth.w	sl, ip
 801f350:	940d      	str	r4, [sp, #52]	; 0x34
 801f352:	fb0a fe0e 	mul.w	lr, sl, lr
 801f356:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f35a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f35e:	eba5 050e 	sub.w	r5, r5, lr
 801f362:	940e      	str	r4, [sp, #56]	; 0x38
 801f364:	fa1f fa8a 	uxth.w	sl, sl
 801f368:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f36a:	b2ad      	uxth	r5, r5
 801f36c:	eba3 030a 	sub.w	r3, r3, sl
 801f370:	fb08 f505 	mul.w	r5, r8, r5
 801f374:	b29b      	uxth	r3, r3
 801f376:	fb09 5303 	mla	r3, r9, r3, r5
 801f37a:	fb0a 3304 	mla	r3, sl, r4, r3
 801f37e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f380:	fb0e 3304 	mla	r3, lr, r4, r3
 801f384:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f388:	2b00      	cmp	r3, #0
 801f38a:	f000 8111 	beq.w	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f38e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f390:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f394:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f398:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f39c:	f000 8192 	beq.w	801f6c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801f3a0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f3a4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f3a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f3ac:	fb0a fe0e 	mul.w	lr, sl, lr
 801f3b0:	fb09 f000 	mul.w	r0, r9, r0
 801f3b4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f3b8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f3bc:	f100 0b20 	add.w	fp, r0, #32
 801f3c0:	44ce      	add	lr, r9
 801f3c2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f3c6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f3ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f3ce:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f3d2:	ea4e 0909 	orr.w	r9, lr, r9
 801f3d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f3da:	8868      	ldrh	r0, [r5, #2]
 801f3dc:	d019      	beq.n	801f412 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f3de:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f3e2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f3e6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f3ea:	fb0a fe0e 	mul.w	lr, sl, lr
 801f3ee:	fb08 f800 	mul.w	r8, r8, r0
 801f3f2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f3f6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f3fa:	f108 0b20 	add.w	fp, r8, #32
 801f3fe:	4486      	add	lr, r0
 801f400:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f404:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f408:	0a00      	lsrs	r0, r0, #8
 801f40a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f40e:	ea4e 0000 	orr.w	r0, lr, r0
 801f412:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f416:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f41a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f41e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f422:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f426:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f42a:	ea4e 0909 	orr.w	r9, lr, r9
 801f42e:	ea4a 0000 	orr.w	r0, sl, r0
 801f432:	f1bc 0f00 	cmp.w	ip, #0
 801f436:	f000 8147 	beq.w	801f6c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f43a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f43e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f440:	3a01      	subs	r2, #1
 801f442:	2cff      	cmp	r4, #255	; 0xff
 801f444:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f448:	f102 0202 	add.w	r2, r2, #2
 801f44c:	eb05 0e02 	add.w	lr, r5, r2
 801f450:	5aaa      	ldrh	r2, [r5, r2]
 801f452:	d018      	beq.n	801f486 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801f454:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f458:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f45c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f460:	fb04 fa02 	mul.w	sl, r4, r2
 801f464:	fb08 f805 	mul.w	r8, r8, r5
 801f468:	f10a 0520 	add.w	r5, sl, #32
 801f46c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f470:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f474:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f478:	4442      	add	r2, r8
 801f47a:	0a2d      	lsrs	r5, r5, #8
 801f47c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f480:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f484:	432a      	orrs	r2, r5
 801f486:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f488:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f48c:	2cff      	cmp	r4, #255	; 0xff
 801f48e:	d01a      	beq.n	801f4c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f490:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f494:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f498:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f49c:	fb04 fa05 	mul.w	sl, r4, r5
 801f4a0:	fb08 f80e 	mul.w	r8, r8, lr
 801f4a4:	f10a 0e20 	add.w	lr, sl, #32
 801f4a8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f4ac:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f4b0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f4b4:	4445      	add	r5, r8
 801f4b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4ba:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f4be:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f4c2:	ea45 050e 	orr.w	r5, r5, lr
 801f4c6:	fb1c fe01 	smulbb	lr, ip, r1
 801f4ca:	f1cc 0810 	rsb	r8, ip, #16
 801f4ce:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f4d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f4d6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f4da:	eba8 0801 	sub.w	r8, r8, r1
 801f4de:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f4e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f4e6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f4ea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f4ee:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f4f2:	ea4a 0202 	orr.w	r2, sl, r2
 801f4f6:	4341      	muls	r1, r0
 801f4f8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f4fc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f500:	fb09 1108 	mla	r1, r9, r8, r1
 801f504:	ea4b 0505 	orr.w	r5, fp, r5
 801f508:	fb0c 1102 	mla	r1, ip, r2, r1
 801f50c:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f510:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f514:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f518:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f51c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f520:	ea42 0e0e 	orr.w	lr, r2, lr
 801f524:	fa1f f28e 	uxth.w	r2, lr
 801f528:	2bff      	cmp	r3, #255	; 0xff
 801f52a:	d103      	bne.n	801f534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f52c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f52e:	29ff      	cmp	r1, #255	; 0xff
 801f530:	f000 80de 	beq.w	801f6f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801f534:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f536:	1215      	asrs	r5, r2, #8
 801f538:	8838      	ldrh	r0, [r7, #0]
 801f53a:	434b      	muls	r3, r1
 801f53c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f542:	f103 0c01 	add.w	ip, r3, #1
 801f546:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f54a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f54e:	fa5f fc83 	uxtb.w	ip, r3
 801f552:	1203      	asrs	r3, r0, #8
 801f554:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f558:	fb13 f30c 	smulbb	r3, r3, ip
 801f55c:	fb05 3501 	mla	r5, r5, r1, r3
 801f560:	10c3      	asrs	r3, r0, #3
 801f562:	10d1      	asrs	r1, r2, #3
 801f564:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f568:	00d2      	lsls	r2, r2, #3
 801f56a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f56e:	b2ad      	uxth	r5, r5
 801f570:	fb13 f30c 	smulbb	r3, r3, ip
 801f574:	b2d2      	uxtb	r2, r2
 801f576:	fb01 3104 	mla	r1, r1, r4, r3
 801f57a:	00c3      	lsls	r3, r0, #3
 801f57c:	b2db      	uxtb	r3, r3
 801f57e:	b289      	uxth	r1, r1
 801f580:	fb13 f30c 	smulbb	r3, r3, ip
 801f584:	fb02 3304 	mla	r3, r2, r4, r3
 801f588:	b29a      	uxth	r2, r3
 801f58a:	1c6b      	adds	r3, r5, #1
 801f58c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f590:	1c53      	adds	r3, r2, #1
 801f592:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f596:	1c4a      	adds	r2, r1, #1
 801f598:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f59c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f5a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f5a4:	0949      	lsrs	r1, r1, #5
 801f5a6:	432b      	orrs	r3, r5
 801f5a8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f5ac:	430b      	orrs	r3, r1
 801f5ae:	803b      	strh	r3, [r7, #0]
 801f5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f5b2:	3702      	adds	r7, #2
 801f5b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f5b6:	4413      	add	r3, r2
 801f5b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f5ba:	9321      	str	r3, [sp, #132]	; 0x84
 801f5bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5be:	441a      	add	r2, r3
 801f5c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f5c2:	3b01      	subs	r3, #1
 801f5c4:	9222      	str	r2, [sp, #136]	; 0x88
 801f5c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5c8:	e687      	b.n	801f2da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f5cc:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801f5ce:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f5d0:	4433      	add	r3, r6
 801f5d2:	9321      	str	r3, [sp, #132]	; 0x84
 801f5d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5d6:	441c      	add	r4, r3
 801f5d8:	9b08      	ldr	r3, [sp, #32]
 801f5da:	3b01      	subs	r3, #1
 801f5dc:	9422      	str	r4, [sp, #136]	; 0x88
 801f5de:	9308      	str	r3, [sp, #32]
 801f5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5e2:	3302      	adds	r3, #2
 801f5e4:	9309      	str	r3, [sp, #36]	; 0x24
 801f5e6:	e656      	b.n	801f296 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f5e8:	d028      	beq.n	801f63c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f5ea:	9b08      	ldr	r3, [sp, #32]
 801f5ec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f5ee:	3b01      	subs	r3, #1
 801f5f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f5f2:	fb00 5003 	mla	r0, r0, r3, r5
 801f5f6:	1400      	asrs	r0, r0, #16
 801f5f8:	f53f ae6a 	bmi.w	801f2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f5fc:	3901      	subs	r1, #1
 801f5fe:	4288      	cmp	r0, r1
 801f600:	f6bf ae66 	bge.w	801f2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f604:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f606:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f608:	fb01 0303 	mla	r3, r1, r3, r0
 801f60c:	141b      	asrs	r3, r3, #16
 801f60e:	f53f ae5f 	bmi.w	801f2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f612:	3a01      	subs	r2, #1
 801f614:	4293      	cmp	r3, r2
 801f616:	f6bf ae5b 	bge.w	801f2d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f61a:	9b08      	ldr	r3, [sp, #32]
 801f61c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f620:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f624:	9313      	str	r3, [sp, #76]	; 0x4c
 801f626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f628:	2b00      	cmp	r3, #0
 801f62a:	f300 8082 	bgt.w	801f732 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f62e:	9b08      	ldr	r3, [sp, #32]
 801f630:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f636:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f63a:	9309      	str	r3, [sp, #36]	; 0x24
 801f63c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f63e:	2b00      	cmp	r3, #0
 801f640:	f340 81ef 	ble.w	801fa22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f648:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f64a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f64e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f652:	eef0 6a62 	vmov.f32	s13, s5
 801f656:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f65a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f65e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f662:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801f666:	eef0 6a43 	vmov.f32	s13, s6
 801f66a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f66e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f672:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f676:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f67a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f67e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f682:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f686:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f68a:	ee12 2a90 	vmov	r2, s5
 801f68e:	eef0 2a47 	vmov.f32	s5, s14
 801f692:	fb92 f3f3 	sdiv	r3, r2, r3
 801f696:	ee13 2a10 	vmov	r2, s6
 801f69a:	9323      	str	r3, [sp, #140]	; 0x8c
 801f69c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f69e:	eeb0 3a67 	vmov.f32	s6, s15
 801f6a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6a6:	9324      	str	r3, [sp, #144]	; 0x90
 801f6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f6aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f6ac:	3b01      	subs	r3, #1
 801f6ae:	9311      	str	r3, [sp, #68]	; 0x44
 801f6b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f6b2:	bf08      	it	eq
 801f6b4:	4613      	moveq	r3, r2
 801f6b6:	9308      	str	r3, [sp, #32]
 801f6b8:	e5df      	b.n	801f27a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f6ba:	fb08 f505 	mul.w	r5, r8, r5
 801f6be:	fb09 5303 	mla	r3, r9, r3, r5
 801f6c2:	e65f      	b.n	801f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801f6c4:	4681      	mov	r9, r0
 801f6c6:	e686      	b.n	801f3d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f6c8:	f1c1 0210 	rsb	r2, r1, #16
 801f6cc:	4341      	muls	r1, r0
 801f6ce:	fb09 1902 	mla	r9, r9, r2, r1
 801f6d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f6d6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f6da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f6de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f6e2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f6e6:	ea42 0909 	orr.w	r9, r2, r9
 801f6ea:	fa1f f289 	uxth.w	r2, r9
 801f6ee:	e71b      	b.n	801f528 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f6f0:	803a      	strh	r2, [r7, #0]
 801f6f2:	e75d      	b.n	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f6f4:	f115 0e01 	adds.w	lr, r5, #1
 801f6f8:	f53f af5a 	bmi.w	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f6fc:	4572      	cmp	r2, lr
 801f6fe:	f6ff af57 	blt.w	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f702:	f110 0e01 	adds.w	lr, r0, #1
 801f706:	f53f af53 	bmi.w	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f70a:	4573      	cmp	r3, lr
 801f70c:	f6ff af50 	blt.w	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f710:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f712:	b21b      	sxth	r3, r3
 801f714:	b212      	sxth	r2, r2
 801f716:	9502      	str	r5, [sp, #8]
 801f718:	9301      	str	r3, [sp, #4]
 801f71a:	9200      	str	r2, [sp, #0]
 801f71c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f720:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f724:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801f728:	4639      	mov	r1, r7
 801f72a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f72c:	f7ff fc02 	bl	801ef34 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f730:	e73e      	b.n	801f5b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f734:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f73a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f73e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f740:	fa1f fc82 	uxth.w	ip, r2
 801f744:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f74a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f74e:	141f      	asrs	r7, r3, #16
 801f750:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f752:	141b      	asrs	r3, r3, #16
 801f754:	fb01 3707 	mla	r7, r1, r7, r3
 801f758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f75a:	eb03 0a07 	add.w	sl, r3, r7
 801f75e:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f762:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f766:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f76a:	b29b      	uxth	r3, r3
 801f76c:	2d00      	cmp	r5, #0
 801f76e:	f000 813d 	beq.w	801f9ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801f772:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f776:	eb0a 0b01 	add.w	fp, sl, r1
 801f77a:	fa1f fa85 	uxth.w	sl, r5
 801f77e:	940f      	str	r4, [sp, #60]	; 0x3c
 801f780:	fb0a fc0c 	mul.w	ip, sl, ip
 801f784:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f788:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f78c:	eba0 000c 	sub.w	r0, r0, ip
 801f790:	9410      	str	r4, [sp, #64]	; 0x40
 801f792:	fa1f fa8a 	uxth.w	sl, sl
 801f796:	b280      	uxth	r0, r0
 801f798:	eba3 030a 	sub.w	r3, r3, sl
 801f79c:	fb08 f000 	mul.w	r0, r8, r0
 801f7a0:	b29b      	uxth	r3, r3
 801f7a2:	fb09 0303 	mla	r3, r9, r3, r0
 801f7a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f7a8:	fb0a 3300 	mla	r3, sl, r0, r3
 801f7ac:	fb0c 3304 	mla	r3, ip, r4, r3
 801f7b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	f000 810b 	beq.w	801f9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f7ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f7bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f7c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f7c2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f7c6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f7ca:	f000 8114 	beq.w	801f9f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801f7ce:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f7d2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f7d6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f7da:	fb0a fc0c 	mul.w	ip, sl, ip
 801f7de:	fb09 f707 	mul.w	r7, r9, r7
 801f7e2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f7e6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f7ea:	f107 0b20 	add.w	fp, r7, #32
 801f7ee:	44cc      	add	ip, r9
 801f7f0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f7f4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f7f8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7fc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f800:	ea4c 0909 	orr.w	r9, ip, r9
 801f804:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f808:	8847      	ldrh	r7, [r0, #2]
 801f80a:	d019      	beq.n	801f840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801f80c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f810:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f814:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f818:	fb0a fc0c 	mul.w	ip, sl, ip
 801f81c:	fb08 f807 	mul.w	r8, r8, r7
 801f820:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f824:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f828:	f108 0b20 	add.w	fp, r8, #32
 801f82c:	44bc      	add	ip, r7
 801f82e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f832:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f836:	0a3f      	lsrs	r7, r7, #8
 801f838:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f83c:	ea4c 0707 	orr.w	r7, ip, r7
 801f840:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f844:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f848:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f84c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f850:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f854:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f858:	ea4c 0909 	orr.w	r9, ip, r9
 801f85c:	ea4a 0707 	orr.w	r7, sl, r7
 801f860:	2d00      	cmp	r5, #0
 801f862:	f000 80ca 	beq.w	801f9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801f866:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f86a:	3901      	subs	r1, #1
 801f86c:	0049      	lsls	r1, r1, #1
 801f86e:	3102      	adds	r1, #2
 801f870:	eb00 0c01 	add.w	ip, r0, r1
 801f874:	5a41      	ldrh	r1, [r0, r1]
 801f876:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f878:	28ff      	cmp	r0, #255	; 0xff
 801f87a:	d019      	beq.n	801f8b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801f87c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f880:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f882:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f886:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f88a:	fb04 fa01 	mul.w	sl, r4, r1
 801f88e:	fb08 f800 	mul.w	r8, r8, r0
 801f892:	f10a 0020 	add.w	r0, sl, #32
 801f896:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f89a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f89e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f8a2:	4441      	add	r1, r8
 801f8a4:	0a00      	lsrs	r0, r0, #8
 801f8a6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f8aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f8ae:	4301      	orrs	r1, r0
 801f8b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f8b2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f8b6:	2cff      	cmp	r4, #255	; 0xff
 801f8b8:	d01a      	beq.n	801f8f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801f8ba:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f8be:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f8c2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f8c6:	fb04 fa00 	mul.w	sl, r4, r0
 801f8ca:	fb08 f80c 	mul.w	r8, r8, ip
 801f8ce:	f10a 0c20 	add.w	ip, sl, #32
 801f8d2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f8d6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f8da:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f8de:	4440      	add	r0, r8
 801f8e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f8e4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f8e8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f8ec:	ea40 000c 	orr.w	r0, r0, ip
 801f8f0:	fb15 fc02 	smulbb	ip, r5, r2
 801f8f4:	f1c5 0810 	rsb	r8, r5, #16
 801f8f8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f8fc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f900:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f904:	eba8 0802 	sub.w	r8, r8, r2
 801f908:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f90c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f910:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f914:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f918:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f91c:	ea4a 0101 	orr.w	r1, sl, r1
 801f920:	437a      	muls	r2, r7
 801f922:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f926:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f92a:	fb09 2208 	mla	r2, r9, r8, r2
 801f92e:	ea4b 0000 	orr.w	r0, fp, r0
 801f932:	fb05 2201 	mla	r2, r5, r1, r2
 801f936:	fb0c 2200 	mla	r2, ip, r0, r2
 801f93a:	0d57      	lsrs	r7, r2, #21
 801f93c:	0952      	lsrs	r2, r2, #5
 801f93e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f942:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f946:	433a      	orrs	r2, r7
 801f948:	2bff      	cmp	r3, #255	; 0xff
 801f94a:	b292      	uxth	r2, r2
 801f94c:	d102      	bne.n	801f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801f94e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f950:	29ff      	cmp	r1, #255	; 0xff
 801f952:	d063      	beq.n	801fa1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801f954:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f956:	1215      	asrs	r5, r2, #8
 801f958:	f8be 1000 	ldrh.w	r1, [lr]
 801f95c:	4343      	muls	r3, r0
 801f95e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f960:	10cf      	asrs	r7, r1, #3
 801f962:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f966:	1c58      	adds	r0, r3, #1
 801f968:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f96c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801f970:	1208      	asrs	r0, r1, #8
 801f972:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f976:	00c9      	lsls	r1, r1, #3
 801f978:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f97c:	b2db      	uxtb	r3, r3
 801f97e:	b2c9      	uxtb	r1, r1
 801f980:	fb10 f003 	smulbb	r0, r0, r3
 801f984:	fb11 f103 	smulbb	r1, r1, r3
 801f988:	fb05 0504 	mla	r5, r5, r4, r0
 801f98c:	10d0      	asrs	r0, r2, #3
 801f98e:	fb17 f703 	smulbb	r7, r7, r3
 801f992:	00d2      	lsls	r2, r2, #3
 801f994:	b2ad      	uxth	r5, r5
 801f996:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f99a:	b2d2      	uxtb	r2, r2
 801f99c:	fb00 7004 	mla	r0, r0, r4, r7
 801f9a0:	1c6b      	adds	r3, r5, #1
 801f9a2:	fb02 1204 	mla	r2, r2, r4, r1
 801f9a6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f9aa:	b292      	uxth	r2, r2
 801f9ac:	b280      	uxth	r0, r0
 801f9ae:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f9b2:	1c57      	adds	r7, r2, #1
 801f9b4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801f9b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801f9bc:	433d      	orrs	r5, r7
 801f9be:	1c47      	adds	r7, r0, #1
 801f9c0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801f9c4:	097f      	lsrs	r7, r7, #5
 801f9c6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f9ca:	433d      	orrs	r5, r7
 801f9cc:	f8ae 5000 	strh.w	r5, [lr]
 801f9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f9d2:	f10e 0e02 	add.w	lr, lr, #2
 801f9d6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f9d8:	4413      	add	r3, r2
 801f9da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f9dc:	9321      	str	r3, [sp, #132]	; 0x84
 801f9de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f9e0:	441a      	add	r2, r3
 801f9e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f9e4:	3b01      	subs	r3, #1
 801f9e6:	9222      	str	r2, [sp, #136]	; 0x88
 801f9e8:	9313      	str	r3, [sp, #76]	; 0x4c
 801f9ea:	e61c      	b.n	801f626 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801f9ec:	fb08 f000 	mul.w	r0, r8, r0
 801f9f0:	fb09 0303 	mla	r3, r9, r3, r0
 801f9f4:	e6dc      	b.n	801f7b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801f9f6:	46b9      	mov	r9, r7
 801f9f8:	e704      	b.n	801f804 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801f9fa:	f1c2 0110 	rsb	r1, r2, #16
 801f9fe:	437a      	muls	r2, r7
 801fa00:	fb09 2901 	mla	r9, r9, r1, r2
 801fa04:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fa08:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801fa0c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801fa10:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fa14:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fa18:	4302      	orrs	r2, r0
 801fa1a:	e795      	b.n	801f948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801fa1c:	f8ae 2000 	strh.w	r2, [lr]
 801fa20:	e7d6      	b.n	801f9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801fa22:	b017      	add	sp, #92	; 0x5c
 801fa24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa2c:	b085      	sub	sp, #20
 801fa2e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801fa32:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801fa36:	2800      	cmp	r0, #0
 801fa38:	9103      	str	r1, [sp, #12]
 801fa3a:	fb00 7406 	mla	r4, r0, r6, r7
 801fa3e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801fa42:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801fa46:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801fa4a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801fa4e:	eb02 0904 	add.w	r9, r2, r4
 801fa52:	9501      	str	r5, [sp, #4]
 801fa54:	f2c0 8141 	blt.w	801fcda <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fa58:	4583      	cmp	fp, r0
 801fa5a:	f340 813e 	ble.w	801fcda <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fa5e:	2f00      	cmp	r7, #0
 801fa60:	f2c0 8137 	blt.w	801fcd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fa64:	42be      	cmp	r6, r7
 801fa66:	f340 8134 	ble.w	801fcd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fa6a:	f812 c004 	ldrb.w	ip, [r2, r4]
 801fa6e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801fa72:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801fa76:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fa7a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801fa7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fa82:	4355      	muls	r5, r2
 801fa84:	fb0c f203 	mul.w	r2, ip, r3
 801fa88:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801fa8c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801fa90:	441d      	add	r5, r3
 801fa92:	f102 0320 	add.w	r3, r2, #32
 801fa96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fa9a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801fa9e:	0a1b      	lsrs	r3, r3, #8
 801faa0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801faa4:	431c      	orrs	r4, r3
 801faa6:	1c7b      	adds	r3, r7, #1
 801faa8:	f100 811c 	bmi.w	801fce4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801faac:	429e      	cmp	r6, r3
 801faae:	f340 8119 	ble.w	801fce4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801fab2:	2900      	cmp	r1, #0
 801fab4:	f000 8119 	beq.w	801fcea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801fab8:	9a01      	ldr	r2, [sp, #4]
 801faba:	f899 3001 	ldrb.w	r3, [r9, #1]
 801fabe:	8855      	ldrh	r5, [r2, #2]
 801fac0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801fac4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801fac8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801facc:	fb08 f802 	mul.w	r8, r8, r2
 801fad0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801fad4:	435d      	muls	r5, r3
 801fad6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801fada:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fade:	44d0      	add	r8, sl
 801fae0:	f105 0a20 	add.w	sl, r5, #32
 801fae4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801fae8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801faec:	0a2d      	lsrs	r5, r5, #8
 801faee:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801faf2:	432a      	orrs	r2, r5
 801faf4:	3001      	adds	r0, #1
 801faf6:	f100 80fe 	bmi.w	801fcf6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fafa:	4583      	cmp	fp, r0
 801fafc:	f340 80fb 	ble.w	801fcf6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fb00:	f1be 0f00 	cmp.w	lr, #0
 801fb04:	f000 80fc 	beq.w	801fd00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801fb08:	2f00      	cmp	r7, #0
 801fb0a:	f2c0 80f1 	blt.w	801fcf0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fb0e:	42be      	cmp	r6, r7
 801fb10:	f340 80ee 	ble.w	801fcf0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fb14:	9801      	ldr	r0, [sp, #4]
 801fb16:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fb1a:	f819 5006 	ldrb.w	r5, [r9, r6]
 801fb1e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801fb22:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fb26:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801fb2a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fb2e:	fb0a fa00 	mul.w	sl, sl, r0
 801fb32:	fb05 f808 	mul.w	r8, r5, r8
 801fb36:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801fb3a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801fb3e:	4482      	add	sl, r0
 801fb40:	f108 0020 	add.w	r0, r8, #32
 801fb44:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fb48:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801fb4c:	0a00      	lsrs	r0, r0, #8
 801fb4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb52:	ea4b 0b00 	orr.w	fp, fp, r0
 801fb56:	3701      	adds	r7, #1
 801fb58:	f100 80d7 	bmi.w	801fd0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fb5c:	42be      	cmp	r6, r7
 801fb5e:	f340 80d4 	ble.w	801fd0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fb62:	2900      	cmp	r1, #0
 801fb64:	f000 80d4 	beq.w	801fd10 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801fb68:	3601      	adds	r6, #1
 801fb6a:	9801      	ldr	r0, [sp, #4]
 801fb6c:	f819 7006 	ldrb.w	r7, [r9, r6]
 801fb70:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801fb74:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801fb78:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801fb7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fb80:	fb09 f906 	mul.w	r9, r9, r6
 801fb84:	fb07 f800 	mul.w	r8, r7, r0
 801fb88:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801fb8c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801fb90:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801fb94:	44d1      	add	r9, sl
 801fb96:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801fb9a:	f108 0020 	add.w	r0, r8, #32
 801fb9e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fba2:	0a00      	lsrs	r0, r0, #8
 801fba4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fba8:	4330      	orrs	r0, r6
 801fbaa:	b28e      	uxth	r6, r1
 801fbac:	fa1f f98e 	uxth.w	r9, lr
 801fbb0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801fbb4:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fbb8:	fb06 f809 	mul.w	r8, r6, r9
 801fbbc:	0136      	lsls	r6, r6, #4
 801fbbe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbc2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801fbc6:	9601      	str	r6, [sp, #4]
 801fbc8:	ea4a 0404 	orr.w	r4, sl, r4
 801fbcc:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fbd0:	fa1f f689 	uxth.w	r6, r9
 801fbd4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fbd8:	fb11 f90e 	smulbb	r9, r1, lr
 801fbdc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbe0:	9602      	str	r6, [sp, #8]
 801fbe2:	4626      	mov	r6, r4
 801fbe4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801fbe8:	f1ce 0410 	rsb	r4, lr, #16
 801fbec:	ea4a 0202 	orr.w	r2, sl, r2
 801fbf0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fbf4:	1a64      	subs	r4, r4, r1
 801fbf6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801fbfa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fbfe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fc02:	434a      	muls	r2, r1
 801fc04:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801fc08:	ea4a 0000 	orr.w	r0, sl, r0
 801fc0c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801fc10:	fb04 2406 	mla	r4, r4, r6, r2
 801fc14:	9903      	ldr	r1, [sp, #12]
 801fc16:	fb09 4200 	mla	r2, r9, r0, r4
 801fc1a:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801fc1e:	9801      	ldr	r0, [sp, #4]
 801fc20:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801fc24:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801fc28:	8809      	ldrh	r1, [r1, #0]
 801fc2a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fc2e:	ea44 0b0b 	orr.w	fp, r4, fp
 801fc32:	9c02      	ldr	r4, [sp, #8]
 801fc34:	1b00      	subs	r0, r0, r4
 801fc36:	9c01      	ldr	r4, [sp, #4]
 801fc38:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801fc3c:	eba4 0608 	sub.w	r6, r4, r8
 801fc40:	b280      	uxth	r0, r0
 801fc42:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801fc46:	b2b6      	uxth	r6, r6
 801fc48:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fc4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc50:	4373      	muls	r3, r6
 801fc52:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fc56:	fb0c 3300 	mla	r3, ip, r0, r3
 801fc5a:	9802      	ldr	r0, [sp, #8]
 801fc5c:	ea42 0e0e 	orr.w	lr, r2, lr
 801fc60:	fb00 3505 	mla	r5, r0, r5, r3
 801fc64:	120b      	asrs	r3, r1, #8
 801fc66:	10c8      	asrs	r0, r1, #3
 801fc68:	fb08 5707 	mla	r7, r8, r7, r5
 801fc6c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801fc70:	00c9      	lsls	r1, r1, #3
 801fc72:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fc76:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801fc7a:	fa1f f28e 	uxth.w	r2, lr
 801fc7e:	b2c9      	uxtb	r1, r1
 801fc80:	b2ff      	uxtb	r7, r7
 801fc82:	437b      	muls	r3, r7
 801fc84:	4378      	muls	r0, r7
 801fc86:	434f      	muls	r7, r1
 801fc88:	1c59      	adds	r1, r3, #1
 801fc8a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fc8e:	1213      	asrs	r3, r2, #8
 801fc90:	f023 0307 	bic.w	r3, r3, #7
 801fc94:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fc98:	1c41      	adds	r1, r0, #1
 801fc9a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801fc9e:	10d1      	asrs	r1, r2, #3
 801fca0:	021b      	lsls	r3, r3, #8
 801fca2:	f021 0103 	bic.w	r1, r1, #3
 801fca6:	00d2      	lsls	r2, r2, #3
 801fca8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fcac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801fcb0:	00c9      	lsls	r1, r1, #3
 801fcb2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fcb6:	430b      	orrs	r3, r1
 801fcb8:	1c79      	adds	r1, r7, #1
 801fcba:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fcbe:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fcc2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fcc6:	431a      	orrs	r2, r3
 801fcc8:	9b03      	ldr	r3, [sp, #12]
 801fcca:	801a      	strh	r2, [r3, #0]
 801fccc:	b005      	add	sp, #20
 801fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd2:	f04f 0c00 	mov.w	ip, #0
 801fcd6:	4664      	mov	r4, ip
 801fcd8:	e6e5      	b.n	801faa6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801fcda:	2300      	movs	r3, #0
 801fcdc:	469c      	mov	ip, r3
 801fcde:	461a      	mov	r2, r3
 801fce0:	461c      	mov	r4, r3
 801fce2:	e707      	b.n	801faf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fce4:	2300      	movs	r3, #0
 801fce6:	461a      	mov	r2, r3
 801fce8:	e704      	b.n	801faf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fcea:	460b      	mov	r3, r1
 801fcec:	460a      	mov	r2, r1
 801fcee:	e701      	b.n	801faf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fcf0:	2500      	movs	r5, #0
 801fcf2:	46ab      	mov	fp, r5
 801fcf4:	e72f      	b.n	801fb56 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801fcf6:	2700      	movs	r7, #0
 801fcf8:	463d      	mov	r5, r7
 801fcfa:	4638      	mov	r0, r7
 801fcfc:	46bb      	mov	fp, r7
 801fcfe:	e754      	b.n	801fbaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fd00:	4677      	mov	r7, lr
 801fd02:	4675      	mov	r5, lr
 801fd04:	4670      	mov	r0, lr
 801fd06:	46f3      	mov	fp, lr
 801fd08:	e74f      	b.n	801fbaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fd0a:	2700      	movs	r7, #0
 801fd0c:	4638      	mov	r0, r7
 801fd0e:	e74c      	b.n	801fbaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fd10:	460f      	mov	r7, r1
 801fd12:	4608      	mov	r0, r1
 801fd14:	e749      	b.n	801fbaa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801fd18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd1c:	b093      	sub	sp, #76	; 0x4c
 801fd1e:	9210      	str	r2, [sp, #64]	; 0x40
 801fd20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fd22:	9011      	str	r0, [sp, #68]	; 0x44
 801fd24:	910e      	str	r1, [sp, #56]	; 0x38
 801fd26:	6850      	ldr	r0, [r2, #4]
 801fd28:	9306      	str	r3, [sp, #24]
 801fd2a:	6812      	ldr	r2, [r2, #0]
 801fd2c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801fd30:	fb00 1303 	mla	r3, r0, r3, r1
 801fd34:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fd38:	9307      	str	r3, [sp, #28]
 801fd3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd3c:	681b      	ldr	r3, [r3, #0]
 801fd3e:	9308      	str	r3, [sp, #32]
 801fd40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd42:	685b      	ldr	r3, [r3, #4]
 801fd44:	9309      	str	r3, [sp, #36]	; 0x24
 801fd46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	dc03      	bgt.n	801fd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fd4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	f340 83b6 	ble.w	80204c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801fd54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fd56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fd5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fd5e:	1e48      	subs	r0, r1, #1
 801fd60:	1e55      	subs	r5, r2, #1
 801fd62:	9b06      	ldr	r3, [sp, #24]
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	f340 8165 	ble.w	8020034 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801fd6a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801fd6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fd6e:	1436      	asrs	r6, r6, #16
 801fd70:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fd74:	d406      	bmi.n	801fd84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fd76:	4286      	cmp	r6, r0
 801fd78:	da04      	bge.n	801fd84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	db02      	blt.n	801fd84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fd7e:	42ab      	cmp	r3, r5
 801fd80:	f2c0 8159 	blt.w	8020036 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fd84:	3601      	adds	r6, #1
 801fd86:	f100 8146 	bmi.w	8020016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd8a:	42b1      	cmp	r1, r6
 801fd8c:	f2c0 8143 	blt.w	8020016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd90:	3301      	adds	r3, #1
 801fd92:	f100 8140 	bmi.w	8020016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd96:	429a      	cmp	r2, r3
 801fd98:	f2c0 813d 	blt.w	8020016 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd9c:	9b06      	ldr	r3, [sp, #24]
 801fd9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fda2:	9f07      	ldr	r7, [sp, #28]
 801fda4:	930f      	str	r3, [sp, #60]	; 0x3c
 801fda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	f340 8166 	ble.w	802007a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fdae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fdb0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801fdb2:	1418      	asrs	r0, r3, #16
 801fdb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fdb6:	142d      	asrs	r5, r5, #16
 801fdb8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fdbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fdbe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801fdc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fdc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801fdc8:	f100 81f0 	bmi.w	80201ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fdcc:	f102 3eff 	add.w	lr, r2, #4294967295
 801fdd0:	4575      	cmp	r5, lr
 801fdd2:	f280 81eb 	bge.w	80201ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fdd6:	2800      	cmp	r0, #0
 801fdd8:	f2c0 81e8 	blt.w	80201ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fddc:	f103 3eff 	add.w	lr, r3, #4294967295
 801fde0:	4570      	cmp	r0, lr
 801fde2:	f280 81e3 	bge.w	80201ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fde6:	b212      	sxth	r2, r2
 801fde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdea:	fa1f fe81 	uxth.w	lr, r1
 801fdee:	fb00 5002 	mla	r0, r0, r2, r5
 801fdf2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fdf6:	eb03 0a00 	add.w	sl, r3, r0
 801fdfa:	f813 9000 	ldrb.w	r9, [r3, r0]
 801fdfe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801fe02:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fe06:	b29b      	uxth	r3, r3
 801fe08:	f1bc 0f00 	cmp.w	ip, #0
 801fe0c:	f000 817b 	beq.w	8020106 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fe10:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801fe14:	eb0a 0b02 	add.w	fp, sl, r2
 801fe18:	fa1f fa8c 	uxth.w	sl, ip
 801fe1c:	940a      	str	r4, [sp, #40]	; 0x28
 801fe1e:	fb0a fe0e 	mul.w	lr, sl, lr
 801fe22:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fe26:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801fe2a:	eba5 050e 	sub.w	r5, r5, lr
 801fe2e:	940b      	str	r4, [sp, #44]	; 0x2c
 801fe30:	fa1f fa8a 	uxth.w	sl, sl
 801fe34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fe36:	b2ad      	uxth	r5, r5
 801fe38:	eba3 030a 	sub.w	r3, r3, sl
 801fe3c:	fb08 f505 	mul.w	r5, r8, r5
 801fe40:	b29b      	uxth	r3, r3
 801fe42:	fb09 5303 	mla	r3, r9, r3, r5
 801fe46:	fb0a 3304 	mla	r3, sl, r4, r3
 801fe4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801fe4c:	fb0e 3304 	mla	r3, lr, r4, r3
 801fe50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	f000 80d1 	beq.w	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801fe5a:	9c08      	ldr	r4, [sp, #32]
 801fe5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fe60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801fe64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801fe68:	f000 8152 	beq.w	8020110 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801fe6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801fe70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801fe74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fe78:	fb0a fe0e 	mul.w	lr, sl, lr
 801fe7c:	fb09 f000 	mul.w	r0, r9, r0
 801fe80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801fe84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fe88:	f100 0b20 	add.w	fp, r0, #32
 801fe8c:	44ce      	add	lr, r9
 801fe8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801fe92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fe96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fe9e:	ea4e 0909 	orr.w	r9, lr, r9
 801fea2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fea6:	8868      	ldrh	r0, [r5, #2]
 801fea8:	d019      	beq.n	801fede <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801feaa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801feae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801feb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801feb6:	fb0a fe0e 	mul.w	lr, sl, lr
 801feba:	fb08 f800 	mul.w	r8, r8, r0
 801febe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801fec2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801fec6:	f108 0b20 	add.w	fp, r8, #32
 801feca:	4486      	add	lr, r0
 801fecc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801fed0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801fed4:	0a00      	lsrs	r0, r0, #8
 801fed6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801feda:	ea4e 0000 	orr.w	r0, lr, r0
 801fede:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801fee2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801fee6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801feea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801feee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801fef2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fef6:	ea4e 0909 	orr.w	r9, lr, r9
 801fefa:	ea4a 0000 	orr.w	r0, sl, r0
 801fefe:	f1bc 0f00 	cmp.w	ip, #0
 801ff02:	f000 8107 	beq.w	8020114 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801ff06:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801ff0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ff0c:	3a01      	subs	r2, #1
 801ff0e:	2cff      	cmp	r4, #255	; 0xff
 801ff10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ff14:	f102 0202 	add.w	r2, r2, #2
 801ff18:	eb05 0e02 	add.w	lr, r5, r2
 801ff1c:	5aaa      	ldrh	r2, [r5, r2]
 801ff1e:	d018      	beq.n	801ff52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801ff20:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801ff24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ff28:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ff2c:	fb04 fa02 	mul.w	sl, r4, r2
 801ff30:	fb08 f805 	mul.w	r8, r8, r5
 801ff34:	f10a 0520 	add.w	r5, sl, #32
 801ff38:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801ff3c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ff40:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801ff44:	4442      	add	r2, r8
 801ff46:	0a2d      	lsrs	r5, r5, #8
 801ff48:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801ff4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff50:	432a      	orrs	r2, r5
 801ff52:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ff54:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801ff58:	2cff      	cmp	r4, #255	; 0xff
 801ff5a:	d01a      	beq.n	801ff92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ff5c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801ff60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff64:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ff68:	fb04 fa05 	mul.w	sl, r4, r5
 801ff6c:	fb08 f80e 	mul.w	r8, r8, lr
 801ff70:	f10a 0e20 	add.w	lr, sl, #32
 801ff74:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801ff78:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ff7c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801ff80:	4445      	add	r5, r8
 801ff82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ff86:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801ff8a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801ff8e:	ea45 050e 	orr.w	r5, r5, lr
 801ff92:	fb1c fe01 	smulbb	lr, ip, r1
 801ff96:	f1cc 0810 	rsb	r8, ip, #16
 801ff9a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801ff9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ffa2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801ffa6:	eba8 0801 	sub.w	r8, r8, r1
 801ffaa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801ffae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ffb2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801ffb6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ffba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801ffbe:	ea4a 0202 	orr.w	r2, sl, r2
 801ffc2:	4341      	muls	r1, r0
 801ffc4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801ffc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ffcc:	fb09 1108 	mla	r1, r9, r8, r1
 801ffd0:	ea4b 0505 	orr.w	r5, fp, r5
 801ffd4:	fb0c 1102 	mla	r1, ip, r2, r1
 801ffd8:	fb0e 1e05 	mla	lr, lr, r5, r1
 801ffdc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801ffe0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ffe4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ffe8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801ffec:	ea42 0e0e 	orr.w	lr, r2, lr
 801fff0:	fa1f f28e 	uxth.w	r2, lr
 801fff4:	2bff      	cmp	r3, #255	; 0xff
 801fff6:	f040 80a1 	bne.w	802013c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801fffa:	803a      	strh	r2, [r7, #0]
 801fffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fffe:	3702      	adds	r7, #2
 8020000:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8020002:	4413      	add	r3, r2
 8020004:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020006:	931d      	str	r3, [sp, #116]	; 0x74
 8020008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802000a:	441a      	add	r2, r3
 802000c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802000e:	3b01      	subs	r3, #1
 8020010:	921e      	str	r2, [sp, #120]	; 0x78
 8020012:	930f      	str	r3, [sp, #60]	; 0x3c
 8020014:	e6c7      	b.n	801fda6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8020016:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020018:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802001a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802001c:	4433      	add	r3, r6
 802001e:	931d      	str	r3, [sp, #116]	; 0x74
 8020020:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020022:	441c      	add	r4, r3
 8020024:	9b06      	ldr	r3, [sp, #24]
 8020026:	3b01      	subs	r3, #1
 8020028:	941e      	str	r4, [sp, #120]	; 0x78
 802002a:	9306      	str	r3, [sp, #24]
 802002c:	9b07      	ldr	r3, [sp, #28]
 802002e:	3302      	adds	r3, #2
 8020030:	9307      	str	r3, [sp, #28]
 8020032:	e696      	b.n	801fd62 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020034:	d028      	beq.n	8020088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020036:	9b06      	ldr	r3, [sp, #24]
 8020038:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802003a:	3b01      	subs	r3, #1
 802003c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802003e:	fb00 5003 	mla	r0, r0, r3, r5
 8020042:	1400      	asrs	r0, r0, #16
 8020044:	f53f aeaa 	bmi.w	801fd9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020048:	3901      	subs	r1, #1
 802004a:	4288      	cmp	r0, r1
 802004c:	f6bf aea6 	bge.w	801fd9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020050:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020052:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020054:	fb01 0303 	mla	r3, r1, r3, r0
 8020058:	141b      	asrs	r3, r3, #16
 802005a:	f53f ae9f 	bmi.w	801fd9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802005e:	3a01      	subs	r2, #1
 8020060:	4293      	cmp	r3, r2
 8020062:	f6bf ae9b 	bge.w	801fd9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020066:	9b06      	ldr	r3, [sp, #24]
 8020068:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802006c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8020070:	930f      	str	r3, [sp, #60]	; 0x3c
 8020072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020074:	2b00      	cmp	r3, #0
 8020076:	f300 80b6 	bgt.w	80201e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 802007a:	9b06      	ldr	r3, [sp, #24]
 802007c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020080:	9b07      	ldr	r3, [sp, #28]
 8020082:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020086:	9307      	str	r3, [sp, #28]
 8020088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802008a:	2b00      	cmp	r3, #0
 802008c:	f340 8218 	ble.w	80204c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8020090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020094:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020096:	ee30 0a04 	vadd.f32	s0, s0, s8
 802009a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802009e:	eef0 6a62 	vmov.f32	s13, s5
 80200a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80200a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200ae:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80200b2:	eef0 6a43 	vmov.f32	s13, s6
 80200b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80200ba:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80200be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200d6:	ee12 2a90 	vmov	r2, s5
 80200da:	eef0 2a47 	vmov.f32	s5, s14
 80200de:	fb92 f3f3 	sdiv	r3, r2, r3
 80200e2:	ee13 2a10 	vmov	r2, s6
 80200e6:	931f      	str	r3, [sp, #124]	; 0x7c
 80200e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200ea:	eeb0 3a67 	vmov.f32	s6, s15
 80200ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80200f2:	9320      	str	r3, [sp, #128]	; 0x80
 80200f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80200f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80200f8:	3b01      	subs	r3, #1
 80200fa:	930e      	str	r3, [sp, #56]	; 0x38
 80200fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80200fe:	bf08      	it	eq
 8020100:	4613      	moveq	r3, r2
 8020102:	9306      	str	r3, [sp, #24]
 8020104:	e61f      	b.n	801fd46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020106:	fb08 f505 	mul.w	r5, r8, r5
 802010a:	fb09 5303 	mla	r3, r9, r3, r5
 802010e:	e69f      	b.n	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8020110:	4681      	mov	r9, r0
 8020112:	e6c6      	b.n	801fea2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8020114:	f1c1 0210 	rsb	r2, r1, #16
 8020118:	4341      	muls	r1, r0
 802011a:	fb09 1902 	mla	r9, r9, r2, r1
 802011e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8020122:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8020126:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802012a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802012e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8020132:	ea42 0909 	orr.w	r9, r2, r9
 8020136:	fa1f f289 	uxth.w	r2, r9
 802013a:	e75b      	b.n	801fff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802013c:	f8b7 c000 	ldrh.w	ip, [r7]
 8020140:	43db      	mvns	r3, r3
 8020142:	ea4f 202c 	mov.w	r0, ip, asr #8
 8020146:	fa5f fe83 	uxtb.w	lr, r3
 802014a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802014e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020152:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8020156:	fb00 f00e 	mul.w	r0, r0, lr
 802015a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802015e:	b2db      	uxtb	r3, r3
 8020160:	1c41      	adds	r1, r0, #1
 8020162:	fb05 f50e 	mul.w	r5, r5, lr
 8020166:	fb03 f30e 	mul.w	r3, r3, lr
 802016a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802016e:	1211      	asrs	r1, r2, #8
 8020170:	f021 0107 	bic.w	r1, r1, #7
 8020174:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020178:	48d3      	ldr	r0, [pc, #844]	; (80204c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802017a:	b2c9      	uxtb	r1, r1
 802017c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8020180:	1c69      	adds	r1, r5, #1
 8020182:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020186:	10d1      	asrs	r1, r2, #3
 8020188:	00d2      	lsls	r2, r2, #3
 802018a:	f021 0103 	bic.w	r1, r1, #3
 802018e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8020192:	00c9      	lsls	r1, r1, #3
 8020194:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020198:	4301      	orrs	r1, r0
 802019a:	1c58      	adds	r0, r3, #1
 802019c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80201a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80201a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80201a8:	430a      	orrs	r2, r1
 80201aa:	e726      	b.n	801fffa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80201ac:	f115 0e01 	adds.w	lr, r5, #1
 80201b0:	f53f af24 	bmi.w	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80201b4:	4572      	cmp	r2, lr
 80201b6:	f6ff af21 	blt.w	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80201ba:	f110 0e01 	adds.w	lr, r0, #1
 80201be:	f53f af1d 	bmi.w	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80201c2:	4573      	cmp	r3, lr
 80201c4:	f6ff af1a 	blt.w	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80201c8:	b21b      	sxth	r3, r3
 80201ca:	b212      	sxth	r2, r2
 80201cc:	9301      	str	r3, [sp, #4]
 80201ce:	9200      	str	r2, [sp, #0]
 80201d0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80201d4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80201d8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80201dc:	4639      	mov	r1, r7
 80201de:	9811      	ldr	r0, [sp, #68]	; 0x44
 80201e0:	f7ff fc22 	bl	801fa28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80201e4:	e70a      	b.n	801fffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80201e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80201e8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80201ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80201ee:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80201f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80201f4:	fa1f fc82 	uxth.w	ip, r2
 80201f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80201fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80201fe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8020202:	141f      	asrs	r7, r3, #16
 8020204:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020206:	141b      	asrs	r3, r3, #16
 8020208:	fb01 3707 	mla	r7, r1, r7, r3
 802020c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802020e:	eb03 0a07 	add.w	sl, r3, r7
 8020212:	f813 9007 	ldrb.w	r9, [r3, r7]
 8020216:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802021a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802021e:	b29b      	uxth	r3, r3
 8020220:	2d00      	cmp	r5, #0
 8020222:	f000 80fe 	beq.w	8020422 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8020226:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802022a:	eb0a 0b01 	add.w	fp, sl, r1
 802022e:	fa1f fa85 	uxth.w	sl, r5
 8020232:	940c      	str	r4, [sp, #48]	; 0x30
 8020234:	fb0a fc0c 	mul.w	ip, sl, ip
 8020238:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802023c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8020240:	eba0 000c 	sub.w	r0, r0, ip
 8020244:	940d      	str	r4, [sp, #52]	; 0x34
 8020246:	fa1f fa8a 	uxth.w	sl, sl
 802024a:	b280      	uxth	r0, r0
 802024c:	eba3 030a 	sub.w	r3, r3, sl
 8020250:	fb08 f000 	mul.w	r0, r8, r0
 8020254:	b29b      	uxth	r3, r3
 8020256:	fb09 0303 	mla	r3, r9, r3, r0
 802025a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802025c:	fb0a 3300 	mla	r3, sl, r0, r3
 8020260:	fb0c 3304 	mla	r3, ip, r4, r3
 8020264:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020268:	2b00      	cmp	r3, #0
 802026a:	f000 80cc 	beq.w	8020406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802026e:	9808      	ldr	r0, [sp, #32]
 8020270:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020274:	9c08      	ldr	r4, [sp, #32]
 8020276:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802027a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802027e:	f000 80d5 	beq.w	802042c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8020282:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020286:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802028a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802028e:	fb0a fc0c 	mul.w	ip, sl, ip
 8020292:	fb09 f707 	mul.w	r7, r9, r7
 8020296:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802029a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802029e:	f107 0b20 	add.w	fp, r7, #32
 80202a2:	44cc      	add	ip, r9
 80202a4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80202a8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80202ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80202b0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80202b4:	ea4c 0909 	orr.w	r9, ip, r9
 80202b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80202bc:	8847      	ldrh	r7, [r0, #2]
 80202be:	d019      	beq.n	80202f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80202c0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80202c4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80202c8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80202cc:	fb0a fc0c 	mul.w	ip, sl, ip
 80202d0:	fb08 f807 	mul.w	r8, r8, r7
 80202d4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80202d8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80202dc:	f108 0b20 	add.w	fp, r8, #32
 80202e0:	44bc      	add	ip, r7
 80202e2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80202e6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80202ea:	0a3f      	lsrs	r7, r7, #8
 80202ec:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80202f0:	ea4c 0707 	orr.w	r7, ip, r7
 80202f4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80202f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80202fc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8020300:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020304:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8020308:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802030c:	ea4c 0909 	orr.w	r9, ip, r9
 8020310:	ea4a 0707 	orr.w	r7, sl, r7
 8020314:	2d00      	cmp	r5, #0
 8020316:	f000 808b 	beq.w	8020430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802031a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802031e:	3901      	subs	r1, #1
 8020320:	0049      	lsls	r1, r1, #1
 8020322:	3102      	adds	r1, #2
 8020324:	eb00 0c01 	add.w	ip, r0, r1
 8020328:	5a41      	ldrh	r1, [r0, r1]
 802032a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802032c:	28ff      	cmp	r0, #255	; 0xff
 802032e:	d019      	beq.n	8020364 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020330:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020334:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020336:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802033a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802033e:	fb04 fa01 	mul.w	sl, r4, r1
 8020342:	fb08 f800 	mul.w	r8, r8, r0
 8020346:	f10a 0020 	add.w	r0, sl, #32
 802034a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802034e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020352:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020356:	4441      	add	r1, r8
 8020358:	0a00      	lsrs	r0, r0, #8
 802035a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802035e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020362:	4301      	orrs	r1, r0
 8020364:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020366:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802036a:	2cff      	cmp	r4, #255	; 0xff
 802036c:	d01a      	beq.n	80203a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802036e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8020372:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020376:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802037a:	fb04 fa00 	mul.w	sl, r4, r0
 802037e:	fb08 f80c 	mul.w	r8, r8, ip
 8020382:	f10a 0c20 	add.w	ip, sl, #32
 8020386:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802038a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802038e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8020392:	4440      	add	r0, r8
 8020394:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020398:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802039c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80203a0:	ea40 000c 	orr.w	r0, r0, ip
 80203a4:	fb15 fc02 	smulbb	ip, r5, r2
 80203a8:	f1c5 0810 	rsb	r8, r5, #16
 80203ac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80203b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80203b4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80203b8:	eba8 0802 	sub.w	r8, r8, r2
 80203bc:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80203c0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80203c4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80203c8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80203cc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80203d0:	ea4a 0101 	orr.w	r1, sl, r1
 80203d4:	437a      	muls	r2, r7
 80203d6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80203da:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80203de:	fb09 2208 	mla	r2, r9, r8, r2
 80203e2:	ea4b 0000 	orr.w	r0, fp, r0
 80203e6:	fb05 2201 	mla	r2, r5, r1, r2
 80203ea:	fb0c 2200 	mla	r2, ip, r0, r2
 80203ee:	0d57      	lsrs	r7, r2, #21
 80203f0:	0952      	lsrs	r2, r2, #5
 80203f2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80203f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80203fa:	433a      	orrs	r2, r7
 80203fc:	2bff      	cmp	r3, #255	; 0xff
 80203fe:	b292      	uxth	r2, r2
 8020400:	d127      	bne.n	8020452 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8020402:	f8ae 2000 	strh.w	r2, [lr]
 8020406:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020408:	f10e 0e02 	add.w	lr, lr, #2
 802040c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802040e:	4413      	add	r3, r2
 8020410:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020412:	931d      	str	r3, [sp, #116]	; 0x74
 8020414:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020416:	441a      	add	r2, r3
 8020418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802041a:	3b01      	subs	r3, #1
 802041c:	921e      	str	r2, [sp, #120]	; 0x78
 802041e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020420:	e627      	b.n	8020072 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8020422:	fb08 f000 	mul.w	r0, r8, r0
 8020426:	fb09 0303 	mla	r3, r9, r3, r0
 802042a:	e71b      	b.n	8020264 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802042c:	46b9      	mov	r9, r7
 802042e:	e743      	b.n	80202b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8020430:	f1c2 0110 	rsb	r1, r2, #16
 8020434:	437a      	muls	r2, r7
 8020436:	fb09 2901 	mla	r9, r9, r1, r2
 802043a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802043e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8020442:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020446:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802044a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802044e:	4302      	orrs	r2, r0
 8020450:	e7d4      	b.n	80203fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8020452:	f8be 7000 	ldrh.w	r7, [lr]
 8020456:	43db      	mvns	r3, r3
 8020458:	4c1b      	ldr	r4, [pc, #108]	; (80204c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802045a:	1238      	asrs	r0, r7, #8
 802045c:	fa5f fc83 	uxtb.w	ip, r3
 8020460:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020464:	10fd      	asrs	r5, r7, #3
 8020466:	00fb      	lsls	r3, r7, #3
 8020468:	fb00 f00c 	mul.w	r0, r0, ip
 802046c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020470:	b2db      	uxtb	r3, r3
 8020472:	fb05 f10c 	mul.w	r1, r5, ip
 8020476:	1c45      	adds	r5, r0, #1
 8020478:	fb03 f30c 	mul.w	r3, r3, ip
 802047c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020480:	1215      	asrs	r5, r2, #8
 8020482:	f025 0507 	bic.w	r5, r5, #7
 8020486:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802048a:	1c4d      	adds	r5, r1, #1
 802048c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8020490:	10d1      	asrs	r1, r2, #3
 8020492:	b2c0      	uxtb	r0, r0
 8020494:	f021 0103 	bic.w	r1, r1, #3
 8020498:	00d2      	lsls	r2, r2, #3
 802049a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802049e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80204a2:	00c9      	lsls	r1, r1, #3
 80204a4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80204a8:	4308      	orrs	r0, r1
 80204aa:	1c59      	adds	r1, r3, #1
 80204ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80204b0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80204b4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80204b8:	4318      	orrs	r0, r3
 80204ba:	f8ae 0000 	strh.w	r0, [lr]
 80204be:	e7a2      	b.n	8020406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80204c0:	b013      	add	sp, #76	; 0x4c
 80204c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204c6:	bf00      	nop
 80204c8:	fffff800 	.word	0xfffff800

080204cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80204cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204d0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80204d4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80204d8:	fb05 4c03 	mla	ip, r5, r3, r4
 80204dc:	2d00      	cmp	r5, #0
 80204de:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80204e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80204e6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80204ea:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80204ee:	8808      	ldrh	r0, [r1, #0]
 80204f0:	f2c0 80a7 	blt.w	8020642 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80204f4:	45aa      	cmp	sl, r5
 80204f6:	f340 80a4 	ble.w	8020642 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80204fa:	2c00      	cmp	r4, #0
 80204fc:	f2c0 809f 	blt.w	802063e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8020500:	42a3      	cmp	r3, r4
 8020502:	f340 809c 	ble.w	802063e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8020506:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802050a:	1c62      	adds	r2, r4, #1
 802050c:	f100 809c 	bmi.w	8020648 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020510:	4293      	cmp	r3, r2
 8020512:	f340 8099 	ble.w	8020648 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8020516:	f1b9 0f00 	cmp.w	r9, #0
 802051a:	f000 8095 	beq.w	8020648 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802051e:	f8be c002 	ldrh.w	ip, [lr, #2]
 8020522:	3501      	adds	r5, #1
 8020524:	f100 8094 	bmi.w	8020650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020528:	45aa      	cmp	sl, r5
 802052a:	f340 8091 	ble.w	8020650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802052e:	2f00      	cmp	r7, #0
 8020530:	f000 808e 	beq.w	8020650 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020534:	2c00      	cmp	r4, #0
 8020536:	f2c0 8089 	blt.w	802064c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802053a:	42a3      	cmp	r3, r4
 802053c:	f340 8086 	ble.w	802064c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020540:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8020544:	3401      	adds	r4, #1
 8020546:	f100 8086 	bmi.w	8020656 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802054a:	42a3      	cmp	r3, r4
 802054c:	f340 8083 	ble.w	8020656 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020550:	f1b9 0f00 	cmp.w	r9, #0
 8020554:	d07f      	beq.n	8020656 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020556:	3301      	adds	r3, #1
 8020558:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802055c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8020560:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020564:	fb19 fe07 	smulbb	lr, r9, r7
 8020568:	f1c7 0210 	rsb	r2, r7, #16
 802056c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020570:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8020574:	eba2 0209 	sub.w	r2, r2, r9
 8020578:	ea44 0808 	orr.w	r8, r4, r8
 802057c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8020580:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020584:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8020588:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802058c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8020590:	ea44 0c0c 	orr.w	ip, r4, ip
 8020594:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8020598:	fb04 f40c 	mul.w	r4, r4, ip
 802059c:	fb02 4808 	mla	r8, r2, r8, r4
 80205a0:	041a      	lsls	r2, r3, #16
 80205a2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80205a6:	b2b4      	uxth	r4, r6
 80205a8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80205ac:	43f6      	mvns	r6, r6
 80205ae:	4313      	orrs	r3, r2
 80205b0:	042a      	lsls	r2, r5, #16
 80205b2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80205b6:	b2f6      	uxtb	r6, r6
 80205b8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80205bc:	fb0e 8303 	mla	r3, lr, r3, r8
 80205c0:	432a      	orrs	r2, r5
 80205c2:	fb07 3202 	mla	r2, r7, r2, r3
 80205c6:	10c7      	asrs	r7, r0, #3
 80205c8:	0d53      	lsrs	r3, r2, #21
 80205ca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80205ce:	0952      	lsrs	r2, r2, #5
 80205d0:	fb17 f706 	smulbb	r7, r7, r6
 80205d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80205d8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80205dc:	431a      	orrs	r2, r3
 80205de:	b293      	uxth	r3, r2
 80205e0:	1202      	asrs	r2, r0, #8
 80205e2:	121d      	asrs	r5, r3, #8
 80205e4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80205e8:	00c0      	lsls	r0, r0, #3
 80205ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80205ee:	fb12 f206 	smulbb	r2, r2, r6
 80205f2:	b2c0      	uxtb	r0, r0
 80205f4:	fb05 2504 	mla	r5, r5, r4, r2
 80205f8:	10da      	asrs	r2, r3, #3
 80205fa:	fb10 f006 	smulbb	r0, r0, r6
 80205fe:	00db      	lsls	r3, r3, #3
 8020600:	b2ad      	uxth	r5, r5
 8020602:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020606:	b2db      	uxtb	r3, r3
 8020608:	fb02 7204 	mla	r2, r2, r4, r7
 802060c:	fb03 0004 	mla	r0, r3, r4, r0
 8020610:	1c6b      	adds	r3, r5, #1
 8020612:	b292      	uxth	r2, r2
 8020614:	b280      	uxth	r0, r0
 8020616:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802061a:	1c43      	adds	r3, r0, #1
 802061c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8020620:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020624:	1c50      	adds	r0, r2, #1
 8020626:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802062a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802062e:	0952      	lsrs	r2, r2, #5
 8020630:	432b      	orrs	r3, r5
 8020632:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020636:	4313      	orrs	r3, r2
 8020638:	800b      	strh	r3, [r1, #0]
 802063a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802063e:	4680      	mov	r8, r0
 8020640:	e763      	b.n	802050a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8020642:	4684      	mov	ip, r0
 8020644:	4680      	mov	r8, r0
 8020646:	e76c      	b.n	8020522 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020648:	4684      	mov	ip, r0
 802064a:	e76a      	b.n	8020522 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802064c:	4605      	mov	r5, r0
 802064e:	e779      	b.n	8020544 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8020650:	4603      	mov	r3, r0
 8020652:	4605      	mov	r5, r0
 8020654:	e782      	b.n	802055c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8020656:	4603      	mov	r3, r0
 8020658:	e780      	b.n	802055c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802065a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802065a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802065e:	b093      	sub	sp, #76	; 0x4c
 8020660:	461d      	mov	r5, r3
 8020662:	9210      	str	r2, [sp, #64]	; 0x40
 8020664:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020666:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802066a:	910a      	str	r1, [sp, #40]	; 0x28
 802066c:	920b      	str	r2, [sp, #44]	; 0x2c
 802066e:	6859      	ldr	r1, [r3, #4]
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	9011      	str	r0, [sp, #68]	; 0x44
 8020674:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8020678:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802067c:	fb01 2707 	mla	r7, r1, r7, r2
 8020680:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8020684:	9307      	str	r3, [sp, #28]
 8020686:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	9309      	str	r3, [sp, #36]	; 0x24
 802068c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802068e:	43db      	mvns	r3, r3
 8020690:	b2db      	uxtb	r3, r3
 8020692:	9308      	str	r3, [sp, #32]
 8020694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020696:	2b00      	cmp	r3, #0
 8020698:	dc03      	bgt.n	80206a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802069a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802069c:	2b00      	cmp	r3, #0
 802069e:	f340 8205 	ble.w	8020aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80206a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80206a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80206ac:	1e48      	subs	r0, r1, #1
 80206ae:	f102 3cff 	add.w	ip, r2, #4294967295
 80206b2:	2d00      	cmp	r5, #0
 80206b4:	f340 80da 	ble.w	802086c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80206b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80206bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80206c0:	d406      	bmi.n	80206d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80206c2:	4586      	cmp	lr, r0
 80206c4:	da04      	bge.n	80206d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	db02      	blt.n	80206d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80206ca:	4563      	cmp	r3, ip
 80206cc:	f2c0 80cf 	blt.w	802086e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80206d0:	f11e 0e01 	adds.w	lr, lr, #1
 80206d4:	f100 80c1 	bmi.w	802085a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80206d8:	4571      	cmp	r1, lr
 80206da:	f2c0 80be 	blt.w	802085a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80206de:	3301      	adds	r3, #1
 80206e0:	f100 80bb 	bmi.w	802085a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80206e4:	429a      	cmp	r2, r3
 80206e6:	f2c0 80b8 	blt.w	802085a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80206ea:	46a9      	mov	r9, r5
 80206ec:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80206f0:	f1b9 0f00 	cmp.w	r9, #0
 80206f4:	f340 80d8 	ble.w	80208a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80206f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80206fa:	1421      	asrs	r1, r4, #16
 80206fc:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020700:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020704:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020708:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802070c:	f100 8112 	bmi.w	8020934 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020710:	f10e 3aff 	add.w	sl, lr, #4294967295
 8020714:	4551      	cmp	r1, sl
 8020716:	f280 810d 	bge.w	8020934 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802071a:	2800      	cmp	r0, #0
 802071c:	f2c0 810a 	blt.w	8020934 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8020720:	f103 3aff 	add.w	sl, r3, #4294967295
 8020724:	4550      	cmp	r0, sl
 8020726:	f280 8105 	bge.w	8020934 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802072a:	fa0f f38e 	sxth.w	r3, lr
 802072e:	fb00 1103 	mla	r1, r0, r3, r1
 8020732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020734:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020738:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802073c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8020740:	f1bc 0f00 	cmp.w	ip, #0
 8020744:	d007      	beq.n	8020756 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8020746:	005b      	lsls	r3, r3, #1
 8020748:	eb0a 0003 	add.w	r0, sl, r3
 802074c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8020750:	930c      	str	r3, [sp, #48]	; 0x30
 8020752:	8843      	ldrh	r3, [r0, #2]
 8020754:	930d      	str	r3, [sp, #52]	; 0x34
 8020756:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802075a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802075e:	fb12 f30c 	smulbb	r3, r2, ip
 8020762:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020766:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802076a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802076e:	10db      	asrs	r3, r3, #3
 8020770:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020774:	ea40 000e 	orr.w	r0, r0, lr
 8020778:	f1cc 0e10 	rsb	lr, ip, #16
 802077c:	ea4a 0101 	orr.w	r1, sl, r1
 8020780:	9f08      	ldr	r7, [sp, #32]
 8020782:	ebae 0e02 	sub.w	lr, lr, r2
 8020786:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802078a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802078e:	4351      	muls	r1, r2
 8020790:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020792:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020796:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020798:	0410      	lsls	r0, r2, #16
 802079a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802079e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80207a2:	4310      	orrs	r0, r2
 80207a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80207a6:	0412      	lsls	r2, r2, #16
 80207a8:	fb03 e000 	mla	r0, r3, r0, lr
 80207ac:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80207b0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80207b4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80207b8:	ea42 020e 	orr.w	r2, r2, lr
 80207bc:	fb03 0302 	mla	r3, r3, r2, r0
 80207c0:	f8b8 0000 	ldrh.w	r0, [r8]
 80207c4:	0d5a      	lsrs	r2, r3, #21
 80207c6:	095b      	lsrs	r3, r3, #5
 80207c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80207cc:	1201      	asrs	r1, r0, #8
 80207ce:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80207d2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80207d6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80207da:	00c0      	lsls	r0, r0, #3
 80207dc:	4313      	orrs	r3, r2
 80207de:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80207e2:	fb11 f107 	smulbb	r1, r1, r7
 80207e6:	b2c0      	uxtb	r0, r0
 80207e8:	b29b      	uxth	r3, r3
 80207ea:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80207ee:	fb10 f007 	smulbb	r0, r0, r7
 80207f2:	fb1e fe07 	smulbb	lr, lr, r7
 80207f6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80207fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80207fe:	fb0c 1c02 	mla	ip, ip, r2, r1
 8020802:	10d9      	asrs	r1, r3, #3
 8020804:	00db      	lsls	r3, r3, #3
 8020806:	fa1f fc8c 	uxth.w	ip, ip
 802080a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802080e:	b2db      	uxtb	r3, r3
 8020810:	fb01 e102 	mla	r1, r1, r2, lr
 8020814:	fb03 0302 	mla	r3, r3, r2, r0
 8020818:	b289      	uxth	r1, r1
 802081a:	b29a      	uxth	r2, r3
 802081c:	f10c 0301 	add.w	r3, ip, #1
 8020820:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020824:	1c53      	adds	r3, r2, #1
 8020826:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802082a:	1c4a      	adds	r2, r1, #1
 802082c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020830:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020834:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020838:	0949      	lsrs	r1, r1, #5
 802083a:	ea43 030c 	orr.w	r3, r3, ip
 802083e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020842:	430b      	orrs	r3, r1
 8020844:	f8a8 3000 	strh.w	r3, [r8]
 8020848:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802084a:	f108 0802 	add.w	r8, r8, #2
 802084e:	f109 39ff 	add.w	r9, r9, #4294967295
 8020852:	441c      	add	r4, r3
 8020854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020856:	441e      	add	r6, r3
 8020858:	e74a      	b.n	80206f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802085a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802085c:	3d01      	subs	r5, #1
 802085e:	441c      	add	r4, r3
 8020860:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020862:	441e      	add	r6, r3
 8020864:	9b07      	ldr	r3, [sp, #28]
 8020866:	3302      	adds	r3, #2
 8020868:	9307      	str	r3, [sp, #28]
 802086a:	e722      	b.n	80206b2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802086c:	d022      	beq.n	80208b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802086e:	1e6b      	subs	r3, r5, #1
 8020870:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020872:	fb00 4003 	mla	r0, r0, r3, r4
 8020876:	1400      	asrs	r0, r0, #16
 8020878:	f53f af37 	bmi.w	80206ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802087c:	3901      	subs	r1, #1
 802087e:	4288      	cmp	r0, r1
 8020880:	f6bf af33 	bge.w	80206ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020884:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020886:	fb01 6303 	mla	r3, r1, r3, r6
 802088a:	141b      	asrs	r3, r3, #16
 802088c:	f53f af2d 	bmi.w	80206ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020890:	3a01      	subs	r2, #1
 8020892:	4293      	cmp	r3, r2
 8020894:	f6bf af29 	bge.w	80206ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020898:	46a8      	mov	r8, r5
 802089a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802089e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 80208a2:	f1b8 0f00 	cmp.w	r8, #0
 80208a6:	dc60      	bgt.n	802096a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80208a8:	9b07      	ldr	r3, [sp, #28]
 80208aa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80208ae:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80208b2:	9307      	str	r3, [sp, #28]
 80208b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	f340 80f8 	ble.w	8020aac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80208bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80208c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80208c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208ca:	eef0 6a62 	vmov.f32	s13, s5
 80208ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208da:	ee16 4a90 	vmov	r4, s13
 80208de:	eef0 6a43 	vmov.f32	s13, s6
 80208e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208e6:	ee16 6a90 	vmov	r6, s13
 80208ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80208f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80208fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80208fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020902:	ee12 2a90 	vmov	r2, s5
 8020906:	eef0 2a47 	vmov.f32	s5, s14
 802090a:	fb92 f3f3 	sdiv	r3, r2, r3
 802090e:	ee13 2a10 	vmov	r2, s6
 8020912:	931f      	str	r3, [sp, #124]	; 0x7c
 8020914:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020916:	eeb0 3a67 	vmov.f32	s6, s15
 802091a:	fb92 f3f3 	sdiv	r3, r2, r3
 802091e:	9320      	str	r3, [sp, #128]	; 0x80
 8020920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020922:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020924:	3b01      	subs	r3, #1
 8020926:	930a      	str	r3, [sp, #40]	; 0x28
 8020928:	bf08      	it	eq
 802092a:	4615      	moveq	r5, r2
 802092c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802092e:	bf18      	it	ne
 8020930:	461d      	movne	r5, r3
 8020932:	e6af      	b.n	8020694 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020934:	f111 0a01 	adds.w	sl, r1, #1
 8020938:	d486      	bmi.n	8020848 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802093a:	45d6      	cmp	lr, sl
 802093c:	db84      	blt.n	8020848 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802093e:	f110 0a01 	adds.w	sl, r0, #1
 8020942:	d481      	bmi.n	8020848 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020944:	4553      	cmp	r3, sl
 8020946:	f6ff af7f 	blt.w	8020848 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802094a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802094c:	b21b      	sxth	r3, r3
 802094e:	9101      	str	r1, [sp, #4]
 8020950:	4641      	mov	r1, r8
 8020952:	9300      	str	r3, [sp, #0]
 8020954:	fa0f f38e 	sxth.w	r3, lr
 8020958:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802095c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8020960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020962:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020964:	f7ff fdb2 	bl	80204cc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020968:	e76e      	b.n	8020848 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802096a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802096c:	1430      	asrs	r0, r6, #16
 802096e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020970:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020974:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020978:	1423      	asrs	r3, r4, #16
 802097a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802097e:	fb01 3000 	mla	r0, r1, r0, r3
 8020982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020984:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020988:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802098c:	8858      	ldrh	r0, [r3, #2]
 802098e:	f1be 0f00 	cmp.w	lr, #0
 8020992:	d00b      	beq.n	80209ac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8020994:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020998:	3901      	subs	r1, #1
 802099a:	0049      	lsls	r1, r1, #1
 802099c:	3102      	adds	r1, #2
 802099e:	eb03 0b01 	add.w	fp, r3, r1
 80209a2:	5a5b      	ldrh	r3, [r3, r1]
 80209a4:	930e      	str	r3, [sp, #56]	; 0x38
 80209a6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80209aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80209ac:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80209b0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80209b4:	fb12 f30e 	smulbb	r3, r2, lr
 80209b8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80209bc:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80209c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80209c4:	10db      	asrs	r3, r3, #3
 80209c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80209ca:	ea41 010c 	orr.w	r1, r1, ip
 80209ce:	f1ce 0c10 	rsb	ip, lr, #16
 80209d2:	ea4b 0000 	orr.w	r0, fp, r0
 80209d6:	9f08      	ldr	r7, [sp, #32]
 80209d8:	ebac 0c02 	sub.w	ip, ip, r2
 80209dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80209e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80209e4:	4350      	muls	r0, r2
 80209e6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80209ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209ec:	fb0c 0c01 	mla	ip, ip, r1, r0
 80209f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80209f2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80209f6:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80209fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80209fc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020a00:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020a04:	0412      	lsls	r2, r2, #16
 8020a06:	ea4b 0101 	orr.w	r1, fp, r1
 8020a0a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020a0e:	fb03 c101 	mla	r1, r3, r1, ip
 8020a12:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020a16:	4302      	orrs	r2, r0
 8020a18:	fb03 1202 	mla	r2, r3, r2, r1
 8020a1c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8020a20:	0952      	lsrs	r2, r2, #5
 8020a22:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020a26:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020a2a:	f8b9 2000 	ldrh.w	r2, [r9]
 8020a2e:	ea4b 0303 	orr.w	r3, fp, r3
 8020a32:	1211      	asrs	r1, r2, #8
 8020a34:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020a38:	b29b      	uxth	r3, r3
 8020a3a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020a3e:	00d2      	lsls	r2, r2, #3
 8020a40:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020a44:	fb11 f107 	smulbb	r1, r1, r7
 8020a48:	1218      	asrs	r0, r3, #8
 8020a4a:	fb1c fc07 	smulbb	ip, ip, r7
 8020a4e:	b2d2      	uxtb	r2, r2
 8020a50:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020a54:	fb12 f207 	smulbb	r2, r2, r7
 8020a58:	fb00 100a 	mla	r0, r0, sl, r1
 8020a5c:	10d9      	asrs	r1, r3, #3
 8020a5e:	00db      	lsls	r3, r3, #3
 8020a60:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020a64:	b280      	uxth	r0, r0
 8020a66:	b2db      	uxtb	r3, r3
 8020a68:	fb01 c10a 	mla	r1, r1, sl, ip
 8020a6c:	fb03 230a 	mla	r3, r3, sl, r2
 8020a70:	1c42      	adds	r2, r0, #1
 8020a72:	b289      	uxth	r1, r1
 8020a74:	b29b      	uxth	r3, r3
 8020a76:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020a7a:	f101 0c01 	add.w	ip, r1, #1
 8020a7e:	1c5a      	adds	r2, r3, #1
 8020a80:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020a84:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020a88:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020a8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020a8e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020a92:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020a96:	441c      	add	r4, r3
 8020a98:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020a9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a9e:	4310      	orrs	r0, r2
 8020aa0:	441e      	add	r6, r3
 8020aa2:	ea40 000c 	orr.w	r0, r0, ip
 8020aa6:	f829 0b02 	strh.w	r0, [r9], #2
 8020aaa:	e6fa      	b.n	80208a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020aac:	b013      	add	sp, #76	; 0x4c
 8020aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ab2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020ab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020ab6:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8020aba:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8020abe:	fb0e 4703 	mla	r7, lr, r3, r4
 8020ac2:	f1be 0f00 	cmp.w	lr, #0
 8020ac6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8020aca:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8020ace:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8020ad2:	8808      	ldrh	r0, [r1, #0]
 8020ad4:	db60      	blt.n	8020b98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020ad6:	45f1      	cmp	r9, lr
 8020ad8:	dd5e      	ble.n	8020b98 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020ada:	2c00      	cmp	r4, #0
 8020adc:	db5a      	blt.n	8020b94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020ade:	42a3      	cmp	r3, r4
 8020ae0:	dd58      	ble.n	8020b94 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020ae2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8020ae6:	1c62      	adds	r2, r4, #1
 8020ae8:	d459      	bmi.n	8020b9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020aea:	4293      	cmp	r3, r2
 8020aec:	dd57      	ble.n	8020b9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020aee:	2d00      	cmp	r5, #0
 8020af0:	d055      	beq.n	8020b9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020af2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8020af6:	f11e 0e01 	adds.w	lr, lr, #1
 8020afa:	d454      	bmi.n	8020ba6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020afc:	45f1      	cmp	r9, lr
 8020afe:	dd52      	ble.n	8020ba6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020b00:	2e00      	cmp	r6, #0
 8020b02:	d050      	beq.n	8020ba6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020b04:	2c00      	cmp	r4, #0
 8020b06:	db4c      	blt.n	8020ba2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020b08:	42a3      	cmp	r3, r4
 8020b0a:	dd4a      	ble.n	8020ba2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020b0c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8020b10:	3401      	adds	r4, #1
 8020b12:	d405      	bmi.n	8020b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020b14:	42a3      	cmp	r3, r4
 8020b16:	dd03      	ble.n	8020b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020b18:	b115      	cbz	r5, 8020b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020b1a:	3301      	adds	r3, #1
 8020b1c:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8020b20:	fb15 f406 	smulbb	r4, r5, r6
 8020b24:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020b28:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020b2c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020b30:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020b34:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020b38:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020b3c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020b40:	ea43 0c0c 	orr.w	ip, r3, ip
 8020b44:	f1c6 0310 	rsb	r3, r6, #16
 8020b48:	ea4e 0707 	orr.w	r7, lr, r7
 8020b4c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020b50:	1b5b      	subs	r3, r3, r5
 8020b52:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020b56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020b5a:	437d      	muls	r5, r7
 8020b5c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020b60:	0403      	lsls	r3, r0, #16
 8020b62:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b66:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020b6a:	4318      	orrs	r0, r3
 8020b6c:	0413      	lsls	r3, r2, #16
 8020b6e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020b72:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020b76:	fb04 c000 	mla	r0, r4, r0, ip
 8020b7a:	4313      	orrs	r3, r2
 8020b7c:	fb06 0003 	mla	r0, r6, r3, r0
 8020b80:	0d43      	lsrs	r3, r0, #21
 8020b82:	0940      	lsrs	r0, r0, #5
 8020b84:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b88:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020b8c:	4318      	orrs	r0, r3
 8020b8e:	8008      	strh	r0, [r1, #0]
 8020b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020b94:	4684      	mov	ip, r0
 8020b96:	e7a6      	b.n	8020ae6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8020b98:	4607      	mov	r7, r0
 8020b9a:	4684      	mov	ip, r0
 8020b9c:	e7ab      	b.n	8020af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020b9e:	4607      	mov	r7, r0
 8020ba0:	e7a9      	b.n	8020af6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020ba2:	4602      	mov	r2, r0
 8020ba4:	e7b4      	b.n	8020b10 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8020ba6:	4602      	mov	r2, r0
 8020ba8:	e7ba      	b.n	8020b20 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08020baa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020baa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bae:	b08f      	sub	sp, #60	; 0x3c
 8020bb0:	461d      	mov	r5, r3
 8020bb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020bb4:	9107      	str	r1, [sp, #28]
 8020bb6:	920c      	str	r2, [sp, #48]	; 0x30
 8020bb8:	6859      	ldr	r1, [r3, #4]
 8020bba:	681b      	ldr	r3, [r3, #0]
 8020bbc:	900d      	str	r0, [sp, #52]	; 0x34
 8020bbe:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8020bc2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8020bc6:	fb01 2707 	mla	r7, r1, r7, r2
 8020bca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020bce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020bd0:	f8d3 8000 	ldr.w	r8, [r3]
 8020bd4:	9b07      	ldr	r3, [sp, #28]
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	dc03      	bgt.n	8020be2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020bdc:	2b00      	cmp	r3, #0
 8020bde:	f340 8182 	ble.w	8020ee6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020be2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020be4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020be8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020bec:	1e48      	subs	r0, r1, #1
 8020bee:	f102 3cff 	add.w	ip, r2, #4294967295
 8020bf2:	2d00      	cmp	r5, #0
 8020bf4:	f340 809b 	ble.w	8020d2e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8020bf8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020bfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020c00:	d406      	bmi.n	8020c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020c02:	4586      	cmp	lr, r0
 8020c04:	da04      	bge.n	8020c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020c06:	2b00      	cmp	r3, #0
 8020c08:	db02      	blt.n	8020c10 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020c0a:	4563      	cmp	r3, ip
 8020c0c:	f2c0 8090 	blt.w	8020d30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020c10:	f11e 0e01 	adds.w	lr, lr, #1
 8020c14:	f100 8084 	bmi.w	8020d20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020c18:	4571      	cmp	r1, lr
 8020c1a:	f2c0 8081 	blt.w	8020d20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020c1e:	3301      	adds	r3, #1
 8020c20:	d47e      	bmi.n	8020d20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020c22:	429a      	cmp	r2, r3
 8020c24:	db7c      	blt.n	8020d20 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020c26:	46aa      	mov	sl, r5
 8020c28:	46b9      	mov	r9, r7
 8020c2a:	f1ba 0f00 	cmp.w	sl, #0
 8020c2e:	f340 8099 	ble.w	8020d64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020c32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c34:	1421      	asrs	r1, r4, #16
 8020c36:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020c3a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020c3e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020c42:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020c46:	f100 80d1 	bmi.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020c4a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020c4e:	4559      	cmp	r1, fp
 8020c50:	f280 80cc 	bge.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020c54:	2800      	cmp	r0, #0
 8020c56:	f2c0 80c9 	blt.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020c5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8020c5e:	4558      	cmp	r0, fp
 8020c60:	f280 80c4 	bge.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020c64:	fa0f fe8e 	sxth.w	lr, lr
 8020c68:	fb00 110e 	mla	r1, r0, lr, r1
 8020c6c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020c70:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020c74:	8841      	ldrh	r1, [r0, #2]
 8020c76:	f1bc 0f00 	cmp.w	ip, #0
 8020c7a:	d00b      	beq.n	8020c94 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8020c7c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8020c80:	3b01      	subs	r3, #1
 8020c82:	005b      	lsls	r3, r3, #1
 8020c84:	3302      	adds	r3, #2
 8020c86:	eb00 0e03 	add.w	lr, r0, r3
 8020c8a:	5ac3      	ldrh	r3, [r0, r3]
 8020c8c:	9308      	str	r3, [sp, #32]
 8020c8e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8020c92:	9309      	str	r3, [sp, #36]	; 0x24
 8020c94:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8020c98:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020c9c:	fb12 f30c 	smulbb	r3, r2, ip
 8020ca0:	f1cc 0e10 	rsb	lr, ip, #16
 8020ca4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020ca8:	10db      	asrs	r3, r3, #3
 8020caa:	ebae 0e02 	sub.w	lr, lr, r2
 8020cae:	ea40 000b 	orr.w	r0, r0, fp
 8020cb2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020cb6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020cba:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020cbe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020cc2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020cc6:	ea4b 0101 	orr.w	r1, fp, r1
 8020cca:	4351      	muls	r1, r2
 8020ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020cce:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020cd2:	0410      	lsls	r0, r2, #16
 8020cd4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020cd8:	9908      	ldr	r1, [sp, #32]
 8020cda:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020cde:	4310      	orrs	r0, r2
 8020ce0:	9a08      	ldr	r2, [sp, #32]
 8020ce2:	0412      	lsls	r2, r2, #16
 8020ce4:	fb03 e000 	mla	r0, r3, r0, lr
 8020ce8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020cec:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020cf0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020cf4:	ea42 020e 	orr.w	r2, r2, lr
 8020cf8:	fb03 0302 	mla	r3, r3, r2, r0
 8020cfc:	0d5a      	lsrs	r2, r3, #21
 8020cfe:	095b      	lsrs	r3, r3, #5
 8020d00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d04:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020d08:	4313      	orrs	r3, r2
 8020d0a:	f8a9 3000 	strh.w	r3, [r9]
 8020d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020d10:	f109 0902 	add.w	r9, r9, #2
 8020d14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020d18:	441c      	add	r4, r3
 8020d1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020d1c:	441e      	add	r6, r3
 8020d1e:	e784      	b.n	8020c2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020d20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020d22:	3d01      	subs	r5, #1
 8020d24:	3702      	adds	r7, #2
 8020d26:	441c      	add	r4, r3
 8020d28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020d2a:	441e      	add	r6, r3
 8020d2c:	e761      	b.n	8020bf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020d2e:	d01d      	beq.n	8020d6c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020d30:	1e6b      	subs	r3, r5, #1
 8020d32:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020d34:	fb00 4003 	mla	r0, r0, r3, r4
 8020d38:	1400      	asrs	r0, r0, #16
 8020d3a:	f53f af74 	bmi.w	8020c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d3e:	3901      	subs	r1, #1
 8020d40:	4288      	cmp	r0, r1
 8020d42:	f6bf af70 	bge.w	8020c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020d48:	fb01 6303 	mla	r3, r1, r3, r6
 8020d4c:	141b      	asrs	r3, r3, #16
 8020d4e:	f53f af6a 	bmi.w	8020c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d52:	3a01      	subs	r2, #1
 8020d54:	4293      	cmp	r3, r2
 8020d56:	f6bf af66 	bge.w	8020c26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d5a:	46a9      	mov	r9, r5
 8020d5c:	46ba      	mov	sl, r7
 8020d5e:	f1b9 0f00 	cmp.w	r9, #0
 8020d62:	dc5b      	bgt.n	8020e1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020d64:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020d68:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020d6c:	9b07      	ldr	r3, [sp, #28]
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	f340 80b9 	ble.w	8020ee6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020d7a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020d7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020d82:	eef0 6a62 	vmov.f32	s13, s5
 8020d86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020d8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020d8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d92:	ee16 4a90 	vmov	r4, s13
 8020d96:	eef0 6a43 	vmov.f32	s13, s6
 8020d9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d9e:	ee16 6a90 	vmov	r6, s13
 8020da2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020da6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020daa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020db2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020db6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020dba:	ee12 2a90 	vmov	r2, s5
 8020dbe:	eef0 2a47 	vmov.f32	s5, s14
 8020dc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dc6:	ee13 2a10 	vmov	r2, s6
 8020dca:	931b      	str	r3, [sp, #108]	; 0x6c
 8020dcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020dce:	eeb0 3a67 	vmov.f32	s6, s15
 8020dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dd6:	931c      	str	r3, [sp, #112]	; 0x70
 8020dd8:	9b07      	ldr	r3, [sp, #28]
 8020dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ddc:	3b01      	subs	r3, #1
 8020dde:	9307      	str	r3, [sp, #28]
 8020de0:	bf08      	it	eq
 8020de2:	4615      	moveq	r5, r2
 8020de4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020de6:	bf18      	it	ne
 8020de8:	461d      	movne	r5, r3
 8020dea:	e6f3      	b.n	8020bd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020dec:	f111 0b01 	adds.w	fp, r1, #1
 8020df0:	d48d      	bmi.n	8020d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020df2:	45de      	cmp	lr, fp
 8020df4:	db8b      	blt.n	8020d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020df6:	f110 0b01 	adds.w	fp, r0, #1
 8020dfa:	d488      	bmi.n	8020d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020dfc:	455b      	cmp	r3, fp
 8020dfe:	db86      	blt.n	8020d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e00:	b21b      	sxth	r3, r3
 8020e02:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020e06:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020e0a:	9300      	str	r3, [sp, #0]
 8020e0c:	4642      	mov	r2, r8
 8020e0e:	fa0f f38e 	sxth.w	r3, lr
 8020e12:	4649      	mov	r1, r9
 8020e14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020e16:	f7ff fe4c 	bl	8020ab2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020e1a:	e778      	b.n	8020d0e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e1e:	1420      	asrs	r0, r4, #16
 8020e20:	1431      	asrs	r1, r6, #16
 8020e22:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020e2a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020e2e:	fb03 0101 	mla	r1, r3, r1, r0
 8020e32:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020e36:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020e3a:	8841      	ldrh	r1, [r0, #2]
 8020e3c:	f1be 0f00 	cmp.w	lr, #0
 8020e40:	d00b      	beq.n	8020e5a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020e42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020e46:	3b01      	subs	r3, #1
 8020e48:	005b      	lsls	r3, r3, #1
 8020e4a:	3302      	adds	r3, #2
 8020e4c:	eb00 0b03 	add.w	fp, r0, r3
 8020e50:	5ac3      	ldrh	r3, [r0, r3]
 8020e52:	930a      	str	r3, [sp, #40]	; 0x28
 8020e54:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e5a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020e5e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020e62:	fb12 f30e 	smulbb	r3, r2, lr
 8020e66:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020e6a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020e6e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020e72:	10db      	asrs	r3, r3, #3
 8020e74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020e78:	ea40 000c 	orr.w	r0, r0, ip
 8020e7c:	f1ce 0c10 	rsb	ip, lr, #16
 8020e80:	ea4b 0101 	orr.w	r1, fp, r1
 8020e84:	f109 39ff 	add.w	r9, r9, #4294967295
 8020e88:	ebac 0c02 	sub.w	ip, ip, r2
 8020e8c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020e90:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020e94:	4351      	muls	r1, r2
 8020e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e98:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020e9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020e9e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020ea2:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8020ea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ea8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020eac:	0412      	lsls	r2, r2, #16
 8020eae:	ea4b 0000 	orr.w	r0, fp, r0
 8020eb2:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8020eb6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020eba:	fb03 c000 	mla	r0, r3, r0, ip
 8020ebe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020ec2:	ea42 0b0b 	orr.w	fp, r2, fp
 8020ec6:	fb03 000b 	mla	r0, r3, fp, r0
 8020eca:	0d43      	lsrs	r3, r0, #21
 8020ecc:	0940      	lsrs	r0, r0, #5
 8020ece:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020ed2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020ed6:	4318      	orrs	r0, r3
 8020ed8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020eda:	441c      	add	r4, r3
 8020edc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020ede:	f82a 0b02 	strh.w	r0, [sl], #2
 8020ee2:	441e      	add	r6, r3
 8020ee4:	e73b      	b.n	8020d5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020ee6:	b00f      	add	sp, #60	; 0x3c
 8020ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020eec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ef0:	b085      	sub	sp, #20
 8020ef2:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020ef6:	9102      	str	r1, [sp, #8]
 8020ef8:	2c00      	cmp	r4, #0
 8020efa:	fb04 7103 	mla	r1, r4, r3, r7
 8020efe:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020f02:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020f06:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020f0a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020f0e:	f2c0 811b 	blt.w	8021148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020f12:	45a6      	cmp	lr, r4
 8020f14:	f340 8118 	ble.w	8021148 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020f18:	2f00      	cmp	r7, #0
 8020f1a:	f2c0 8113 	blt.w	8021144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020f1e:	42bb      	cmp	r3, r7
 8020f20:	f340 8110 	ble.w	8021144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020f24:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020f28:	1c7a      	adds	r2, r7, #1
 8020f2a:	f100 8110 	bmi.w	802114e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020f2e:	4293      	cmp	r3, r2
 8020f30:	f340 810d 	ble.w	802114e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020f34:	2e00      	cmp	r6, #0
 8020f36:	f000 810c 	beq.w	8021152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8020f3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020f3e:	3401      	adds	r4, #1
 8020f40:	f100 810b 	bmi.w	802115a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020f44:	45a6      	cmp	lr, r4
 8020f46:	f340 8108 	ble.w	802115a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8020f4a:	2800      	cmp	r0, #0
 8020f4c:	f000 8108 	beq.w	8021160 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8020f50:	2f00      	cmp	r7, #0
 8020f52:	f2c0 8100 	blt.w	8021156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020f56:	42bb      	cmp	r3, r7
 8020f58:	f340 80fd 	ble.w	8021156 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8020f5c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8020f60:	3701      	adds	r7, #1
 8020f62:	f100 8100 	bmi.w	8021166 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020f66:	42bb      	cmp	r3, r7
 8020f68:	f340 80fd 	ble.w	8021166 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8020f6c:	2e00      	cmp	r6, #0
 8020f6e:	f000 80fc 	beq.w	802116a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8020f72:	3301      	adds	r3, #1
 8020f74:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020f78:	b2b6      	uxth	r6, r6
 8020f7a:	b280      	uxth	r0, r0
 8020f7c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8020f80:	fb00 fe06 	mul.w	lr, r0, r6
 8020f84:	0136      	lsls	r6, r6, #4
 8020f86:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8020f8a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8020f8e:	eba6 070e 	sub.w	r7, r6, lr
 8020f92:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8020f96:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8020f9a:	b280      	uxth	r0, r0
 8020f9c:	b2bf      	uxth	r7, r7
 8020f9e:	1a1b      	subs	r3, r3, r0
 8020fa0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020fa4:	fb0a f607 	mul.w	r6, sl, r7
 8020fa8:	b29b      	uxth	r3, r3
 8020faa:	fb0b 6603 	mla	r6, fp, r3, r6
 8020fae:	fb00 6609 	mla	r6, r0, r9, r6
 8020fb2:	fb0e 6608 	mla	r6, lr, r8, r6
 8020fb6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020fba:	9600      	str	r6, [sp, #0]
 8020fbc:	2e00      	cmp	r6, #0
 8020fbe:	f000 80be 	beq.w	802113e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8020fc2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020fc6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020fca:	9e02      	ldr	r6, [sp, #8]
 8020fcc:	fb0b fc0c 	mul.w	ip, fp, ip
 8020fd0:	fb0b f505 	mul.w	r5, fp, r5
 8020fd4:	8836      	ldrh	r6, [r6, #0]
 8020fd6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020fda:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020fde:	9501      	str	r5, [sp, #4]
 8020fe0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020fe4:	44dc      	add	ip, fp
 8020fe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020fea:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020fee:	9503      	str	r5, [sp, #12]
 8020ff0:	9d01      	ldr	r5, [sp, #4]
 8020ff2:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8020ff6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020ffa:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020ffe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021002:	fb0a fc0c 	mul.w	ip, sl, ip
 8021006:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802100a:	fb0a fa01 	mul.w	sl, sl, r1
 802100e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021012:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021016:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802101a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802101e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8021022:	4465      	add	r5, ip
 8021024:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021028:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802102c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021030:	fb09 fc0c 	mul.w	ip, r9, ip
 8021034:	0a2d      	lsrs	r5, r5, #8
 8021036:	fb09 f904 	mul.w	r9, r9, r4
 802103a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802103e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8021042:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021046:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802104a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802104e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021052:	437d      	muls	r5, r7
 8021054:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021058:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802105c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021060:	4461      	add	r1, ip
 8021062:	fb08 f404 	mul.w	r4, r8, r4
 8021066:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802106a:	fb08 f802 	mul.w	r8, r8, r2
 802106e:	0a09      	lsrs	r1, r1, #8
 8021070:	0a22      	lsrs	r2, r4, #8
 8021072:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021076:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802107a:	fb07 f70a 	mul.w	r7, r7, sl
 802107e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021082:	4414      	add	r4, r2
 8021084:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021088:	0a24      	lsrs	r4, r4, #8
 802108a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802108e:	9a03      	ldr	r2, [sp, #12]
 8021090:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021094:	fb02 5503 	mla	r5, r2, r3, r5
 8021098:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802109c:	9a00      	ldr	r2, [sp, #0]
 802109e:	fb04 540e 	mla	r4, r4, lr, r5
 80210a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80210a6:	1235      	asrs	r5, r6, #8
 80210a8:	fb01 4100 	mla	r1, r1, r0, r4
 80210ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80210b0:	0a09      	lsrs	r1, r1, #8
 80210b2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80210b6:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80210ba:	fb03 7101 	mla	r1, r3, r1, r7
 80210be:	fb0e 1e08 	mla	lr, lr, r8, r1
 80210c2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80210c6:	fb00 e101 	mla	r1, r0, r1, lr
 80210ca:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80210ce:	b287      	uxth	r7, r0
 80210d0:	0a09      	lsrs	r1, r1, #8
 80210d2:	437a      	muls	r2, r7
 80210d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80210d8:	1c53      	adds	r3, r2, #1
 80210da:	4321      	orrs	r1, r4
 80210dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80210e0:	0c0a      	lsrs	r2, r1, #16
 80210e2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80210e6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80210ea:	b2c8      	uxtb	r0, r1
 80210ec:	fb12 f207 	smulbb	r2, r2, r7
 80210f0:	fb14 f407 	smulbb	r4, r4, r7
 80210f4:	b2db      	uxtb	r3, r3
 80210f6:	fb10 f007 	smulbb	r0, r0, r7
 80210fa:	fb05 2503 	mla	r5, r5, r3, r2
 80210fe:	10f2      	asrs	r2, r6, #3
 8021100:	00f6      	lsls	r6, r6, #3
 8021102:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021106:	b2ad      	uxth	r5, r5
 8021108:	b2f6      	uxtb	r6, r6
 802110a:	fb02 4203 	mla	r2, r2, r3, r4
 802110e:	fb06 0303 	mla	r3, r6, r3, r0
 8021112:	b294      	uxth	r4, r2
 8021114:	b299      	uxth	r1, r3
 8021116:	1c6b      	adds	r3, r5, #1
 8021118:	1c62      	adds	r2, r4, #1
 802111a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802111e:	1c4b      	adds	r3, r1, #1
 8021120:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8021124:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021128:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802112c:	0952      	lsrs	r2, r2, #5
 802112e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021132:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021136:	432b      	orrs	r3, r5
 8021138:	4313      	orrs	r3, r2
 802113a:	9a02      	ldr	r2, [sp, #8]
 802113c:	8013      	strh	r3, [r2, #0]
 802113e:	b005      	add	sp, #20
 8021140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021144:	2500      	movs	r5, #0
 8021146:	e6ef      	b.n	8020f28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8021148:	2100      	movs	r1, #0
 802114a:	460d      	mov	r5, r1
 802114c:	e6f7      	b.n	8020f3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802114e:	2100      	movs	r1, #0
 8021150:	e6f5      	b.n	8020f3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8021152:	4631      	mov	r1, r6
 8021154:	e6f3      	b.n	8020f3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8021156:	2400      	movs	r4, #0
 8021158:	e702      	b.n	8020f60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802115a:	2200      	movs	r2, #0
 802115c:	4614      	mov	r4, r2
 802115e:	e70b      	b.n	8020f78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021160:	4602      	mov	r2, r0
 8021162:	4604      	mov	r4, r0
 8021164:	e708      	b.n	8020f78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021166:	2200      	movs	r2, #0
 8021168:	e706      	b.n	8020f78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802116a:	4632      	mov	r2, r6
 802116c:	e704      	b.n	8020f78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802116e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802116e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021172:	b09d      	sub	sp, #116	; 0x74
 8021174:	9219      	str	r2, [sp, #100]	; 0x64
 8021176:	9307      	str	r3, [sp, #28]
 8021178:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802117a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802117e:	901b      	str	r0, [sp, #108]	; 0x6c
 8021180:	931a      	str	r3, [sp, #104]	; 0x68
 8021182:	6850      	ldr	r0, [r2, #4]
 8021184:	9117      	str	r1, [sp, #92]	; 0x5c
 8021186:	6812      	ldr	r2, [r2, #0]
 8021188:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802118c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8021190:	fb00 1303 	mla	r3, r0, r3, r1
 8021194:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021198:	930a      	str	r3, [sp, #40]	; 0x28
 802119a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	9310      	str	r3, [sp, #64]	; 0x40
 80211a0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80211a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80211a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	dc03      	bgt.n	80211b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80211ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	f340 8375 	ble.w	802189e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80211b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80211b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80211ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80211be:	1e48      	subs	r0, r1, #1
 80211c0:	1e57      	subs	r7, r2, #1
 80211c2:	9b07      	ldr	r3, [sp, #28]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	f340 818e 	ble.w	80214e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80211ca:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80211ce:	ea4f 4326 	mov.w	r3, r6, asr #16
 80211d2:	d406      	bmi.n	80211e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80211d4:	4584      	cmp	ip, r0
 80211d6:	da04      	bge.n	80211e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80211d8:	2b00      	cmp	r3, #0
 80211da:	db02      	blt.n	80211e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80211dc:	42bb      	cmp	r3, r7
 80211de:	f2c0 8183 	blt.w	80214e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80211e2:	f11c 0c01 	adds.w	ip, ip, #1
 80211e6:	f100 8173 	bmi.w	80214d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80211ea:	4561      	cmp	r1, ip
 80211ec:	f2c0 8170 	blt.w	80214d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80211f0:	3301      	adds	r3, #1
 80211f2:	f100 816d 	bmi.w	80214d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80211f6:	429a      	cmp	r2, r3
 80211f8:	f2c0 816a 	blt.w	80214d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80211fc:	9b07      	ldr	r3, [sp, #28]
 80211fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021200:	9318      	str	r3, [sp, #96]	; 0x60
 8021202:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021204:	2b00      	cmp	r3, #0
 8021206:	f340 818c 	ble.w	8021522 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802120a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802120c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021210:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021212:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021216:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802121a:	1422      	asrs	r2, r4, #16
 802121c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021220:	689b      	ldr	r3, [r3, #8]
 8021222:	f100 81cd 	bmi.w	80215c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021226:	f103 38ff 	add.w	r8, r3, #4294967295
 802122a:	4542      	cmp	r2, r8
 802122c:	f280 81c8 	bge.w	80215c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021230:	f1bc 0f00 	cmp.w	ip, #0
 8021234:	f2c0 81c4 	blt.w	80215c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021238:	f10e 38ff 	add.w	r8, lr, #4294967295
 802123c:	45c4      	cmp	ip, r8
 802123e:	f280 81bf 	bge.w	80215c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021242:	b21b      	sxth	r3, r3
 8021244:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021246:	fb0c 2203 	mla	r2, ip, r3, r2
 802124a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802124e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021252:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021256:	2800      	cmp	r0, #0
 8021258:	f000 81a9 	beq.w	80215ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802125c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021260:	950c      	str	r5, [sp, #48]	; 0x30
 8021262:	0e2d      	lsrs	r5, r5, #24
 8021264:	9513      	str	r5, [sp, #76]	; 0x4c
 8021266:	b181      	cbz	r1, 802128a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802126c:	3b01      	subs	r3, #1
 802126e:	009b      	lsls	r3, r3, #2
 8021270:	3304      	adds	r3, #4
 8021272:	eb08 0c03 	add.w	ip, r8, r3
 8021276:	f858 3003 	ldr.w	r3, [r8, r3]
 802127a:	9308      	str	r3, [sp, #32]
 802127c:	0e1b      	lsrs	r3, r3, #24
 802127e:	9311      	str	r3, [sp, #68]	; 0x44
 8021280:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021284:	930d      	str	r3, [sp, #52]	; 0x34
 8021286:	0e1b      	lsrs	r3, r3, #24
 8021288:	9314      	str	r3, [sp, #80]	; 0x50
 802128a:	b280      	uxth	r0, r0
 802128c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802128e:	b289      	uxth	r1, r1
 8021290:	fb00 f901 	mul.w	r9, r0, r1
 8021294:	0100      	lsls	r0, r0, #4
 8021296:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802129a:	eba0 0809 	sub.w	r8, r0, r9
 802129e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80212a2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80212a4:	b289      	uxth	r1, r1
 80212a6:	fa1f f888 	uxth.w	r8, r8
 80212aa:	1a5b      	subs	r3, r3, r1
 80212ac:	fb08 f000 	mul.w	r0, r8, r0
 80212b0:	b29b      	uxth	r3, r3
 80212b2:	fb03 000e 	mla	r0, r3, lr, r0
 80212b6:	fb01 0005 	mla	r0, r1, r5, r0
 80212ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80212bc:	fb09 0005 	mla	r0, r9, r5, r0
 80212c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80212c4:	2800      	cmp	r0, #0
 80212c6:	f000 80fa 	beq.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80212ca:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80212ce:	d01b      	beq.n	8021308 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80212d0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80212d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80212d8:	fb0e fa0a 	mul.w	sl, lr, sl
 80212dc:	fb0e fe02 	mul.w	lr, lr, r2
 80212e0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80212e4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80212e8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80212ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80212f0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80212f4:	4452      	add	r2, sl
 80212f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212fa:	0a12      	lsrs	r2, r2, #8
 80212fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021300:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021304:	ea42 020c 	orr.w	r2, r2, ip
 8021308:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802130a:	2dff      	cmp	r5, #255	; 0xff
 802130c:	d021      	beq.n	8021352 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802130e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021310:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021314:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021316:	fb05 fb0b 	mul.w	fp, r5, fp
 802131a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802131c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021320:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021322:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021326:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802132a:	fb05 fa0a 	mul.w	sl, r5, sl
 802132e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021332:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021336:	44de      	add	lr, fp
 8021338:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802133c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021340:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021344:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021348:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802134c:	ea4e 050a 	orr.w	r5, lr, sl
 8021350:	950c      	str	r5, [sp, #48]	; 0x30
 8021352:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021354:	2dff      	cmp	r5, #255	; 0xff
 8021356:	d021      	beq.n	802139c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021358:	9d08      	ldr	r5, [sp, #32]
 802135a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802135e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021360:	fb05 fb0b 	mul.w	fp, r5, fp
 8021364:	9d08      	ldr	r5, [sp, #32]
 8021366:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802136a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802136c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021370:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021374:	fb05 fa0a 	mul.w	sl, r5, sl
 8021378:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802137c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021380:	44de      	add	lr, fp
 8021382:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802138a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802138e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021392:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021396:	ea4e 050a 	orr.w	r5, lr, sl
 802139a:	9508      	str	r5, [sp, #32]
 802139c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802139e:	2dff      	cmp	r5, #255	; 0xff
 80213a0:	d021      	beq.n	80213e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80213a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213a4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80213a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80213aa:	fb05 fb0b 	mul.w	fp, r5, fp
 80213ae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80213b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80213b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80213b6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213be:	fb05 fa0a 	mul.w	sl, r5, sl
 80213c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213c6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80213ca:	44de      	add	lr, fp
 80213cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80213d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80213e0:	ea4e 050a 	orr.w	r5, lr, sl
 80213e4:	950d      	str	r5, [sp, #52]	; 0x34
 80213e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80213e8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80213ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80213f0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80213f4:	9d08      	ldr	r5, [sp, #32]
 80213f6:	fb08 fc0c 	mul.w	ip, r8, ip
 80213fa:	fb03 cc0e 	mla	ip, r3, lr, ip
 80213fe:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021402:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021404:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021408:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802140c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802140e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021412:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021418:	fb08 f80e 	mul.w	r8, r8, lr
 802141c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021420:	fb03 8202 	mla	r2, r3, r2, r8
 8021424:	9b08      	ldr	r3, [sp, #32]
 8021426:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802142a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802142e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021430:	fb01 220a 	mla	r2, r1, sl, r2
 8021434:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021438:	883b      	ldrh	r3, [r7, #0]
 802143a:	fb09 2901 	mla	r9, r9, r1, r2
 802143e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021440:	1219      	asrs	r1, r3, #8
 8021442:	4342      	muls	r2, r0
 8021444:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021448:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802144c:	1c50      	adds	r0, r2, #1
 802144e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021452:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021456:	ea4c 0c09 	orr.w	ip, ip, r9
 802145a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802145e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8021462:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021466:	fa5f fc8c 	uxtb.w	ip, ip
 802146a:	fb12 f205 	smulbb	r2, r2, r5
 802146e:	b2c0      	uxtb	r0, r0
 8021470:	fb1c fc05 	smulbb	ip, ip, r5
 8021474:	fb01 2100 	mla	r1, r1, r0, r2
 8021478:	10da      	asrs	r2, r3, #3
 802147a:	fb1e fe05 	smulbb	lr, lr, r5
 802147e:	00db      	lsls	r3, r3, #3
 8021480:	b289      	uxth	r1, r1
 8021482:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021486:	b2db      	uxtb	r3, r3
 8021488:	fb02 e200 	mla	r2, r2, r0, lr
 802148c:	fb03 c300 	mla	r3, r3, r0, ip
 8021490:	b292      	uxth	r2, r2
 8021492:	fa1f fc83 	uxth.w	ip, r3
 8021496:	1c4b      	adds	r3, r1, #1
 8021498:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802149c:	f10c 0301 	add.w	r3, ip, #1
 80214a0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80214a4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80214a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80214ac:	430b      	orrs	r3, r1
 80214ae:	1c51      	adds	r1, r2, #1
 80214b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80214b4:	0952      	lsrs	r2, r2, #5
 80214b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80214ba:	4313      	orrs	r3, r2
 80214bc:	803b      	strh	r3, [r7, #0]
 80214be:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80214c0:	3702      	adds	r7, #2
 80214c2:	441c      	add	r4, r3
 80214c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80214c6:	441e      	add	r6, r3
 80214c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80214ca:	3b01      	subs	r3, #1
 80214cc:	9318      	str	r3, [sp, #96]	; 0x60
 80214ce:	e698      	b.n	8021202 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80214d0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80214d2:	441c      	add	r4, r3
 80214d4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80214d6:	441e      	add	r6, r3
 80214d8:	9b07      	ldr	r3, [sp, #28]
 80214da:	3b01      	subs	r3, #1
 80214dc:	9307      	str	r3, [sp, #28]
 80214de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214e0:	3302      	adds	r3, #2
 80214e2:	930a      	str	r3, [sp, #40]	; 0x28
 80214e4:	e66d      	b.n	80211c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80214e6:	d023      	beq.n	8021530 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80214e8:	9b07      	ldr	r3, [sp, #28]
 80214ea:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80214ec:	3b01      	subs	r3, #1
 80214ee:	fb00 4003 	mla	r0, r0, r3, r4
 80214f2:	1400      	asrs	r0, r0, #16
 80214f4:	f53f ae82 	bmi.w	80211fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80214f8:	3901      	subs	r1, #1
 80214fa:	4288      	cmp	r0, r1
 80214fc:	f6bf ae7e 	bge.w	80211fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021500:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021502:	fb01 6303 	mla	r3, r1, r3, r6
 8021506:	141b      	asrs	r3, r3, #16
 8021508:	f53f ae78 	bmi.w	80211fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802150c:	3a01      	subs	r2, #1
 802150e:	4293      	cmp	r3, r2
 8021510:	f6bf ae74 	bge.w	80211fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021514:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021518:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802151c:	f1bb 0f00 	cmp.w	fp, #0
 8021520:	dc6c      	bgt.n	80215fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021522:	9b07      	ldr	r3, [sp, #28]
 8021524:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802152a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802152e:	930a      	str	r3, [sp, #40]	; 0x28
 8021530:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021532:	2b00      	cmp	r3, #0
 8021534:	f340 81b3 	ble.w	802189e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8021538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802153c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802153e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021542:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021546:	eef0 6a62 	vmov.f32	s13, s5
 802154a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802154e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021552:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021556:	ee16 4a90 	vmov	r4, s13
 802155a:	eef0 6a43 	vmov.f32	s13, s6
 802155e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021562:	ee16 6a90 	vmov	r6, s13
 8021566:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802156a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802156e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021572:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021576:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802157a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802157e:	ee12 2a90 	vmov	r2, s5
 8021582:	eef0 2a47 	vmov.f32	s5, s14
 8021586:	fb92 f3f3 	sdiv	r3, r2, r3
 802158a:	ee13 2a10 	vmov	r2, s6
 802158e:	9329      	str	r3, [sp, #164]	; 0xa4
 8021590:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021592:	eeb0 3a67 	vmov.f32	s6, s15
 8021596:	fb92 f3f3 	sdiv	r3, r2, r3
 802159a:	932a      	str	r3, [sp, #168]	; 0xa8
 802159c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802159e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80215a0:	3b01      	subs	r3, #1
 80215a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80215a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80215a6:	bf08      	it	eq
 80215a8:	4613      	moveq	r3, r2
 80215aa:	9307      	str	r3, [sp, #28]
 80215ac:	e5fb      	b.n	80211a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80215ae:	2900      	cmp	r1, #0
 80215b0:	f43f ae6b 	beq.w	802128a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80215b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80215b8:	9308      	str	r3, [sp, #32]
 80215ba:	0e1b      	lsrs	r3, r3, #24
 80215bc:	9311      	str	r3, [sp, #68]	; 0x44
 80215be:	e664      	b.n	802128a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80215c0:	f112 0801 	adds.w	r8, r2, #1
 80215c4:	f53f af7b 	bmi.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215c8:	4543      	cmp	r3, r8
 80215ca:	f6ff af78 	blt.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215ce:	f11c 0801 	adds.w	r8, ip, #1
 80215d2:	f53f af74 	bmi.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215d6:	45c6      	cmp	lr, r8
 80215d8:	f6ff af71 	blt.w	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215dc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80215de:	b21b      	sxth	r3, r3
 80215e0:	9201      	str	r2, [sp, #4]
 80215e2:	fa0f f28e 	sxth.w	r2, lr
 80215e6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80215ea:	e9cd c002 	strd	ip, r0, [sp, #8]
 80215ee:	9200      	str	r2, [sp, #0]
 80215f0:	4639      	mov	r1, r7
 80215f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80215f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80215f6:	f7ff fc79 	bl	8020eec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80215fa:	e760      	b.n	80214be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80215fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80215fe:	1427      	asrs	r7, r4, #16
 8021600:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021602:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021606:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802160a:	1433      	asrs	r3, r6, #16
 802160c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021610:	fb01 7303 	mla	r3, r1, r3, r7
 8021614:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8021618:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802161c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021620:	2a00      	cmp	r2, #0
 8021622:	f000 8133 	beq.w	802188c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8021626:	687d      	ldr	r5, [r7, #4]
 8021628:	950e      	str	r5, [sp, #56]	; 0x38
 802162a:	0e2d      	lsrs	r5, r5, #24
 802162c:	9515      	str	r5, [sp, #84]	; 0x54
 802162e:	b178      	cbz	r0, 8021650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021630:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8021634:	3901      	subs	r1, #1
 8021636:	0089      	lsls	r1, r1, #2
 8021638:	3104      	adds	r1, #4
 802163a:	eb07 0e01 	add.w	lr, r7, r1
 802163e:	5879      	ldr	r1, [r7, r1]
 8021640:	9109      	str	r1, [sp, #36]	; 0x24
 8021642:	0e09      	lsrs	r1, r1, #24
 8021644:	9112      	str	r1, [sp, #72]	; 0x48
 8021646:	f8de 1004 	ldr.w	r1, [lr, #4]
 802164a:	910f      	str	r1, [sp, #60]	; 0x3c
 802164c:	0e09      	lsrs	r1, r1, #24
 802164e:	9116      	str	r1, [sp, #88]	; 0x58
 8021650:	b292      	uxth	r2, r2
 8021652:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021654:	b280      	uxth	r0, r0
 8021656:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021658:	fb02 f800 	mul.w	r8, r2, r0
 802165c:	0112      	lsls	r2, r2, #4
 802165e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8021662:	eba2 0e08 	sub.w	lr, r2, r8
 8021666:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802166a:	b280      	uxth	r0, r0
 802166c:	fa1f fe8e 	uxth.w	lr, lr
 8021670:	1a12      	subs	r2, r2, r0
 8021672:	fb0e f101 	mul.w	r1, lr, r1
 8021676:	b292      	uxth	r2, r2
 8021678:	fb02 110c 	mla	r1, r2, ip, r1
 802167c:	fb00 1105 	mla	r1, r0, r5, r1
 8021680:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021682:	fb08 1105 	mla	r1, r8, r5, r1
 8021686:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802168a:	2900      	cmp	r1, #0
 802168c:	f000 80f5 	beq.w	802187a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8021690:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021694:	d019      	beq.n	80216ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8021696:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802169a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802169e:	fb0c fa0a 	mul.w	sl, ip, sl
 80216a2:	fb0c fc03 	mul.w	ip, ip, r3
 80216a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80216aa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80216ae:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80216b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80216ba:	4453      	add	r3, sl
 80216bc:	0a3f      	lsrs	r7, r7, #8
 80216be:	0a1b      	lsrs	r3, r3, #8
 80216c0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80216c4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80216c8:	433b      	orrs	r3, r7
 80216ca:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80216cc:	2dff      	cmp	r5, #255	; 0xff
 80216ce:	d020      	beq.n	8021712 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80216d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80216d2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80216d6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80216d8:	436f      	muls	r7, r5
 80216da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80216dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80216e0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80216e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80216e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80216ea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80216ee:	fb05 fa0a 	mul.w	sl, r5, sl
 80216f2:	44bc      	add	ip, r7
 80216f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80216f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80216fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021700:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021704:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021708:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802170c:	ea4c 050a 	orr.w	r5, ip, sl
 8021710:	950e      	str	r5, [sp, #56]	; 0x38
 8021712:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021714:	2dff      	cmp	r5, #255	; 0xff
 8021716:	d020      	beq.n	802175a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8021718:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802171a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802171e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021720:	436f      	muls	r7, r5
 8021722:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8021724:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021728:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802172c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802172e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021732:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021736:	fb05 fa0a 	mul.w	sl, r5, sl
 802173a:	44bc      	add	ip, r7
 802173c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021740:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021744:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021748:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802174c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021750:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021754:	ea4c 050a 	orr.w	r5, ip, sl
 8021758:	9509      	str	r5, [sp, #36]	; 0x24
 802175a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802175c:	2dff      	cmp	r5, #255	; 0xff
 802175e:	d020      	beq.n	80217a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8021760:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021762:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021766:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021768:	436f      	muls	r7, r5
 802176a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802176c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021770:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021774:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021776:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802177a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802177e:	fb05 fa0a 	mul.w	sl, r5, sl
 8021782:	44bc      	add	ip, r7
 8021784:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802178c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021794:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021798:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802179c:	ea4c 050a 	orr.w	r5, ip, sl
 80217a0:	950f      	str	r5, [sp, #60]	; 0x3c
 80217a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80217a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80217a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80217ac:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80217b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217b2:	fb0e f707 	mul.w	r7, lr, r7
 80217b6:	fb02 770c 	mla	r7, r2, ip, r7
 80217ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80217be:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80217c0:	fb00 770c 	mla	r7, r0, ip, r7
 80217c4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80217c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80217ca:	fb08 770c 	mla	r7, r8, ip, r7
 80217ce:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80217d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80217d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80217d8:	0a3f      	lsrs	r7, r7, #8
 80217da:	fb02 e303 	mla	r3, r2, r3, lr
 80217de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80217e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80217e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80217e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80217ea:	fb00 330a 	mla	r3, r0, sl, r3
 80217ee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80217f2:	f8b9 0000 	ldrh.w	r0, [r9]
 80217f6:	fb08 3c0c 	mla	ip, r8, ip, r3
 80217fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217fc:	1202      	asrs	r2, r0, #8
 80217fe:	4359      	muls	r1, r3
 8021800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021804:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021808:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802180c:	1c4b      	adds	r3, r1, #1
 802180e:	ea47 070c 	orr.w	r7, r7, ip
 8021812:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021816:	0c3b      	lsrs	r3, r7, #16
 8021818:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802181c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8021820:	b2ff      	uxtb	r7, r7
 8021822:	fb13 f305 	smulbb	r3, r3, r5
 8021826:	b2c9      	uxtb	r1, r1
 8021828:	fb17 f705 	smulbb	r7, r7, r5
 802182c:	fb02 3201 	mla	r2, r2, r1, r3
 8021830:	10c3      	asrs	r3, r0, #3
 8021832:	fb1c fc05 	smulbb	ip, ip, r5
 8021836:	00c0      	lsls	r0, r0, #3
 8021838:	b292      	uxth	r2, r2
 802183a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802183e:	b2c0      	uxtb	r0, r0
 8021840:	fb03 c301 	mla	r3, r3, r1, ip
 8021844:	fb00 7001 	mla	r0, r0, r1, r7
 8021848:	1c51      	adds	r1, r2, #1
 802184a:	b29b      	uxth	r3, r3
 802184c:	b280      	uxth	r0, r0
 802184e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021852:	f100 0c01 	add.w	ip, r0, #1
 8021856:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802185a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802185e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021862:	ea4c 0202 	orr.w	r2, ip, r2
 8021866:	f103 0c01 	add.w	ip, r3, #1
 802186a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802186e:	095b      	lsrs	r3, r3, #5
 8021870:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021874:	431a      	orrs	r2, r3
 8021876:	f8a9 2000 	strh.w	r2, [r9]
 802187a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802187c:	f109 0902 	add.w	r9, r9, #2
 8021880:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021884:	441c      	add	r4, r3
 8021886:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021888:	441e      	add	r6, r3
 802188a:	e647      	b.n	802151c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802188c:	2800      	cmp	r0, #0
 802188e:	f43f aedf 	beq.w	8021650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8021892:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8021896:	9109      	str	r1, [sp, #36]	; 0x24
 8021898:	0e09      	lsrs	r1, r1, #24
 802189a:	9112      	str	r1, [sp, #72]	; 0x48
 802189c:	e6d8      	b.n	8021650 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802189e:	b01d      	add	sp, #116	; 0x74
 80218a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080218a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80218a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218a8:	b085      	sub	sp, #20
 80218aa:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80218ae:	9102      	str	r1, [sp, #8]
 80218b0:	2c00      	cmp	r4, #0
 80218b2:	fb04 7103 	mla	r1, r4, r3, r7
 80218b6:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80218ba:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80218be:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80218c2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80218c6:	f2c0 810c 	blt.w	8021ae2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80218ca:	45a6      	cmp	lr, r4
 80218cc:	f340 8109 	ble.w	8021ae2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 80218d0:	2f00      	cmp	r7, #0
 80218d2:	f2c0 8104 	blt.w	8021ade <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80218d6:	42bb      	cmp	r3, r7
 80218d8:	f340 8101 	ble.w	8021ade <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80218dc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80218e0:	1c7a      	adds	r2, r7, #1
 80218e2:	f100 8101 	bmi.w	8021ae8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80218e6:	4293      	cmp	r3, r2
 80218e8:	f340 80fe 	ble.w	8021ae8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80218ec:	2e00      	cmp	r6, #0
 80218ee:	f000 80fd 	beq.w	8021aec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80218f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80218f6:	3401      	adds	r4, #1
 80218f8:	f100 80fc 	bmi.w	8021af4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80218fc:	45a6      	cmp	lr, r4
 80218fe:	f340 80f9 	ble.w	8021af4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8021902:	2800      	cmp	r0, #0
 8021904:	f000 80f9 	beq.w	8021afa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8021908:	2f00      	cmp	r7, #0
 802190a:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802190e:	f2c0 80ef 	blt.w	8021af0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021912:	42bb      	cmp	r3, r7
 8021914:	f340 80ec 	ble.w	8021af0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8021918:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802191c:	3701      	adds	r7, #1
 802191e:	f100 80ef 	bmi.w	8021b00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021922:	42bb      	cmp	r3, r7
 8021924:	f340 80ec 	ble.w	8021b00 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8021928:	2e00      	cmp	r6, #0
 802192a:	f000 80eb 	beq.w	8021b04 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802192e:	6852      	ldr	r2, [r2, #4]
 8021930:	b2b6      	uxth	r6, r6
 8021932:	b280      	uxth	r0, r0
 8021934:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021938:	fb00 fe06 	mul.w	lr, r0, r6
 802193c:	0136      	lsls	r6, r6, #4
 802193e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021942:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021946:	eba6 070e 	sub.w	r7, r6, lr
 802194a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802194e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021952:	b280      	uxth	r0, r0
 8021954:	b2bf      	uxth	r7, r7
 8021956:	1a1b      	subs	r3, r3, r0
 8021958:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802195c:	fb07 f60a 	mul.w	r6, r7, sl
 8021960:	b29b      	uxth	r3, r3
 8021962:	fb0b 6603 	mla	r6, fp, r3, r6
 8021966:	fb00 6609 	mla	r6, r0, r9, r6
 802196a:	fb0e 6608 	mla	r6, lr, r8, r6
 802196e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021972:	9600      	str	r6, [sp, #0]
 8021974:	2e00      	cmp	r6, #0
 8021976:	f000 80af 	beq.w	8021ad8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802197a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802197e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021982:	9e02      	ldr	r6, [sp, #8]
 8021984:	fb0b fc0c 	mul.w	ip, fp, ip
 8021988:	fb0b f505 	mul.w	r5, fp, r5
 802198c:	8836      	ldrh	r6, [r6, #0]
 802198e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021992:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021996:	9501      	str	r5, [sp, #4]
 8021998:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802199c:	44dc      	add	ip, fp
 802199e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219a2:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80219a6:	9503      	str	r5, [sp, #12]
 80219a8:	9d01      	ldr	r5, [sp, #4]
 80219aa:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80219ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80219b2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80219b6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80219ba:	fb0a fc0c 	mul.w	ip, sl, ip
 80219be:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80219c2:	fb0a fa01 	mul.w	sl, sl, r1
 80219c6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80219ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219ce:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80219d2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80219d6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80219da:	4465      	add	r5, ip
 80219dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80219e0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80219e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80219e8:	fb09 fc0c 	mul.w	ip, r9, ip
 80219ec:	0a2d      	lsrs	r5, r5, #8
 80219ee:	fb09 f904 	mul.w	r9, r9, r4
 80219f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80219f6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80219fa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80219fe:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021a02:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021a06:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021a0a:	437d      	muls	r5, r7
 8021a0c:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021a10:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021a14:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021a18:	4461      	add	r1, ip
 8021a1a:	fb08 f404 	mul.w	r4, r8, r4
 8021a1e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021a22:	fb08 f802 	mul.w	r8, r8, r2
 8021a26:	0a09      	lsrs	r1, r1, #8
 8021a28:	0a22      	lsrs	r2, r4, #8
 8021a2a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021a2e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021a32:	fb07 f70a 	mul.w	r7, r7, sl
 8021a36:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021a3a:	4414      	add	r4, r2
 8021a3c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021a40:	0a24      	lsrs	r4, r4, #8
 8021a42:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021a46:	9a03      	ldr	r2, [sp, #12]
 8021a48:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021a4c:	fb02 5503 	mla	r5, r2, r3, r5
 8021a50:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021a54:	fb04 540e 	mla	r4, r4, lr, r5
 8021a58:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021a5c:	fb01 4100 	mla	r1, r1, r0, r4
 8021a60:	0a09      	lsrs	r1, r1, #8
 8021a62:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021a66:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021a6a:	fb03 7101 	mla	r1, r3, r1, r7
 8021a6e:	9b00      	ldr	r3, [sp, #0]
 8021a70:	fb0e 1e08 	mla	lr, lr, r8, r1
 8021a74:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021a78:	43da      	mvns	r2, r3
 8021a7a:	1233      	asrs	r3, r6, #8
 8021a7c:	fb00 e101 	mla	r1, r0, r1, lr
 8021a80:	10f0      	asrs	r0, r6, #3
 8021a82:	b2d2      	uxtb	r2, r2
 8021a84:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021a88:	0a09      	lsrs	r1, r1, #8
 8021a8a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021a8e:	00f6      	lsls	r6, r6, #3
 8021a90:	4353      	muls	r3, r2
 8021a92:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021a96:	4350      	muls	r0, r2
 8021a98:	b2f6      	uxtb	r6, r6
 8021a9a:	4321      	orrs	r1, r4
 8021a9c:	4356      	muls	r6, r2
 8021a9e:	1c5a      	adds	r2, r3, #1
 8021aa0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021aa4:	0c0b      	lsrs	r3, r1, #16
 8021aa6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021aaa:	1c42      	adds	r2, r0, #1
 8021aac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021ab0:	0a0a      	lsrs	r2, r1, #8
 8021ab2:	021b      	lsls	r3, r3, #8
 8021ab4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021ab8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021abc:	00d2      	lsls	r2, r2, #3
 8021abe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021ac2:	4313      	orrs	r3, r2
 8021ac4:	1c72      	adds	r2, r6, #1
 8021ac6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021aca:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8021ace:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021ad2:	4319      	orrs	r1, r3
 8021ad4:	9b02      	ldr	r3, [sp, #8]
 8021ad6:	8019      	strh	r1, [r3, #0]
 8021ad8:	b005      	add	sp, #20
 8021ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ade:	2500      	movs	r5, #0
 8021ae0:	e6fe      	b.n	80218e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8021ae2:	2100      	movs	r1, #0
 8021ae4:	460d      	mov	r5, r1
 8021ae6:	e706      	b.n	80218f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021ae8:	2100      	movs	r1, #0
 8021aea:	e704      	b.n	80218f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021aec:	4631      	mov	r1, r6
 8021aee:	e702      	b.n	80218f6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021af0:	2400      	movs	r4, #0
 8021af2:	e713      	b.n	802191c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8021af4:	2200      	movs	r2, #0
 8021af6:	4614      	mov	r4, r2
 8021af8:	e71a      	b.n	8021930 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021afa:	4602      	mov	r2, r0
 8021afc:	4604      	mov	r4, r0
 8021afe:	e717      	b.n	8021930 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021b00:	2200      	movs	r2, #0
 8021b02:	e715      	b.n	8021930 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021b04:	4632      	mov	r2, r6
 8021b06:	e713      	b.n	8021930 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08021b08 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b0c:	b09b      	sub	sp, #108	; 0x6c
 8021b0e:	9218      	str	r2, [sp, #96]	; 0x60
 8021b10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021b12:	9019      	str	r0, [sp, #100]	; 0x64
 8021b14:	9116      	str	r1, [sp, #88]	; 0x58
 8021b16:	6850      	ldr	r0, [r2, #4]
 8021b18:	9307      	str	r3, [sp, #28]
 8021b1a:	6812      	ldr	r2, [r2, #0]
 8021b1c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021b20:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8021b24:	fb00 1303 	mla	r3, r0, r3, r1
 8021b28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8021b2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b30:	681b      	ldr	r3, [r3, #0]
 8021b32:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	dc03      	bgt.n	8021b42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021b3a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	f340 8387 	ble.w	8022250 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021b42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b44:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021b48:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021b4c:	1e48      	subs	r0, r1, #1
 8021b4e:	1e57      	subs	r7, r2, #1
 8021b50:	9b07      	ldr	r3, [sp, #28]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	f340 8166 	ble.w	8021e24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021b58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021b5c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021b60:	d406      	bmi.n	8021b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021b62:	4584      	cmp	ip, r0
 8021b64:	da04      	bge.n	8021b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	db02      	blt.n	8021b70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021b6a:	42bb      	cmp	r3, r7
 8021b6c:	f2c0 815b 	blt.w	8021e26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021b70:	f11c 0c01 	adds.w	ip, ip, #1
 8021b74:	f100 814b 	bmi.w	8021e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021b78:	4561      	cmp	r1, ip
 8021b7a:	f2c0 8148 	blt.w	8021e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021b7e:	3301      	adds	r3, #1
 8021b80:	f100 8145 	bmi.w	8021e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021b84:	429a      	cmp	r2, r3
 8021b86:	f2c0 8142 	blt.w	8021e0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021b8a:	9b07      	ldr	r3, [sp, #28]
 8021b8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021b90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	f340 8165 	ble.w	8021e62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021b98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021b9a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021b9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ba0:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021ba4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021ba8:	1422      	asrs	r2, r4, #16
 8021baa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021bae:	689b      	ldr	r3, [r3, #8]
 8021bb0:	f100 81d5 	bmi.w	8021f5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021bb4:	f103 38ff 	add.w	r8, r3, #4294967295
 8021bb8:	4542      	cmp	r2, r8
 8021bba:	f280 81d0 	bge.w	8021f5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021bbe:	f1bc 0f00 	cmp.w	ip, #0
 8021bc2:	f2c0 81cc 	blt.w	8021f5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021bc6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021bca:	45c4      	cmp	ip, r8
 8021bcc:	f280 81c7 	bge.w	8021f5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021bd0:	b21b      	sxth	r3, r3
 8021bd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021bd4:	fb0c 2203 	mla	r2, ip, r3, r2
 8021bd8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021bdc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021be0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021be4:	2900      	cmp	r1, #0
 8021be6:	f000 8182 	beq.w	8021eee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021bea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021bee:	950b      	str	r5, [sp, #44]	; 0x2c
 8021bf0:	0e2d      	lsrs	r5, r5, #24
 8021bf2:	9512      	str	r5, [sp, #72]	; 0x48
 8021bf4:	b180      	cbz	r0, 8021c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021bf6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021bfa:	3b01      	subs	r3, #1
 8021bfc:	009b      	lsls	r3, r3, #2
 8021bfe:	3304      	adds	r3, #4
 8021c00:	eb08 0c03 	add.w	ip, r8, r3
 8021c04:	f858 3003 	ldr.w	r3, [r8, r3]
 8021c08:	9308      	str	r3, [sp, #32]
 8021c0a:	0e1b      	lsrs	r3, r3, #24
 8021c0c:	9310      	str	r3, [sp, #64]	; 0x40
 8021c0e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021c12:	930c      	str	r3, [sp, #48]	; 0x30
 8021c14:	0e1b      	lsrs	r3, r3, #24
 8021c16:	9313      	str	r3, [sp, #76]	; 0x4c
 8021c18:	b289      	uxth	r1, r1
 8021c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021c1c:	b280      	uxth	r0, r0
 8021c1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021c20:	fb01 f900 	mul.w	r9, r1, r0
 8021c24:	0109      	lsls	r1, r1, #4
 8021c26:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021c2a:	eba1 0809 	sub.w	r8, r1, r9
 8021c2e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021c32:	b280      	uxth	r0, r0
 8021c34:	fa1f f888 	uxth.w	r8, r8
 8021c38:	1a09      	subs	r1, r1, r0
 8021c3a:	fb08 f303 	mul.w	r3, r8, r3
 8021c3e:	b289      	uxth	r1, r1
 8021c40:	fb01 330e 	mla	r3, r1, lr, r3
 8021c44:	fb00 3305 	mla	r3, r0, r5, r3
 8021c48:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021c4a:	fb09 3305 	mla	r3, r9, r5, r3
 8021c4e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c52:	2b00      	cmp	r3, #0
 8021c54:	f000 80d2 	beq.w	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021c58:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021c5c:	d01b      	beq.n	8021c96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8021c5e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021c62:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c66:	fb0e fa0a 	mul.w	sl, lr, sl
 8021c6a:	fb0e fe02 	mul.w	lr, lr, r2
 8021c6e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021c72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021c76:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021c7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021c82:	4452      	add	r2, sl
 8021c84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c88:	0a12      	lsrs	r2, r2, #8
 8021c8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021c8e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c92:	ea42 020c 	orr.w	r2, r2, ip
 8021c96:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021c98:	2dff      	cmp	r5, #255	; 0xff
 8021c9a:	d021      	beq.n	8021ce0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021c9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021c9e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021ca2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021ca4:	fb05 fb0b 	mul.w	fp, r5, fp
 8021ca8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021caa:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021cae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021cb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021cb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021cb8:	fb05 fa0a 	mul.w	sl, r5, sl
 8021cbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021cc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021cc4:	44de      	add	lr, fp
 8021cc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021cca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021cce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021cd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021cd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021cda:	ea4e 050a 	orr.w	r5, lr, sl
 8021cde:	950b      	str	r5, [sp, #44]	; 0x2c
 8021ce0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021ce2:	2dff      	cmp	r5, #255	; 0xff
 8021ce4:	d021      	beq.n	8021d2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021ce6:	9d08      	ldr	r5, [sp, #32]
 8021ce8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021cec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021cee:	fb05 fb0b 	mul.w	fp, r5, fp
 8021cf2:	9d08      	ldr	r5, [sp, #32]
 8021cf4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021cf8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021cfa:	fb05 fa0e 	mul.w	sl, r5, lr
 8021cfe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021d02:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d0a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d0e:	44de      	add	lr, fp
 8021d10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d24:	ea4e 050a 	orr.w	r5, lr, sl
 8021d28:	9508      	str	r5, [sp, #32]
 8021d2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021d2c:	2dff      	cmp	r5, #255	; 0xff
 8021d2e:	d021      	beq.n	8021d74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021d30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021d32:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021d36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021d38:	fb05 fb0b 	mul.w	fp, r5, fp
 8021d3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021d3e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021d42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021d44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021d48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d4c:	fb05 fa0a 	mul.w	sl, r5, sl
 8021d50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d58:	44de      	add	lr, fp
 8021d5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021d6e:	ea4e 050a 	orr.w	r5, lr, sl
 8021d72:	950c      	str	r5, [sp, #48]	; 0x30
 8021d74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021d76:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021d7a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d7e:	2bff      	cmp	r3, #255	; 0xff
 8021d80:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021d84:	9d08      	ldr	r5, [sp, #32]
 8021d86:	fb08 fc0c 	mul.w	ip, r8, ip
 8021d8a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021d8e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021d94:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021d98:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021d9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021d9e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021da2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021da6:	fb08 f80e 	mul.w	r8, r8, lr
 8021daa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021dae:	fb01 8202 	mla	r2, r1, r2, r8
 8021db2:	9908      	ldr	r1, [sp, #32]
 8021db4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021db8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021dbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021dbe:	fb00 220a 	mla	r2, r0, sl, r2
 8021dc2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021dc6:	fb09 2900 	mla	r9, r9, r0, r2
 8021dca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021dce:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021dd2:	ea4c 0c09 	orr.w	ip, ip, r9
 8021dd6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021dda:	f040 8091 	bne.w	8021f00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021dde:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021de2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8021de6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021dea:	f022 0207 	bic.w	r2, r2, #7
 8021dee:	431a      	orrs	r2, r3
 8021df0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021df4:	ea4c 0c02 	orr.w	ip, ip, r2
 8021df8:	f8a7 c000 	strh.w	ip, [r7]
 8021dfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021dfe:	3702      	adds	r7, #2
 8021e00:	441c      	add	r4, r3
 8021e02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e04:	441e      	add	r6, r3
 8021e06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021e08:	3b01      	subs	r3, #1
 8021e0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8021e0c:	e6c0      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021e0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021e10:	441c      	add	r4, r3
 8021e12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e14:	441e      	add	r6, r3
 8021e16:	9b07      	ldr	r3, [sp, #28]
 8021e18:	3b01      	subs	r3, #1
 8021e1a:	9307      	str	r3, [sp, #28]
 8021e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e1e:	3302      	adds	r3, #2
 8021e20:	930a      	str	r3, [sp, #40]	; 0x28
 8021e22:	e695      	b.n	8021b50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021e24:	d024      	beq.n	8021e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021e26:	9b07      	ldr	r3, [sp, #28]
 8021e28:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021e2a:	3b01      	subs	r3, #1
 8021e2c:	fb00 4003 	mla	r0, r0, r3, r4
 8021e30:	1400      	asrs	r0, r0, #16
 8021e32:	f53f aeaa 	bmi.w	8021b8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e36:	3901      	subs	r1, #1
 8021e38:	4288      	cmp	r0, r1
 8021e3a:	f6bf aea6 	bge.w	8021b8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e3e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021e40:	fb01 6303 	mla	r3, r1, r3, r6
 8021e44:	141b      	asrs	r3, r3, #16
 8021e46:	f53f aea0 	bmi.w	8021b8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e4a:	3a01      	subs	r2, #1
 8021e4c:	4293      	cmp	r3, r2
 8021e4e:	f6bf ae9c 	bge.w	8021b8a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e52:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021e56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021e5a:	f1bb 0f00 	cmp.w	fp, #0
 8021e5e:	f300 809a 	bgt.w	8021f96 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021e62:	9b07      	ldr	r3, [sp, #28]
 8021e64:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e6a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8021e70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	f340 81ec 	ble.w	8022250 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e86:	eef0 6a62 	vmov.f32	s13, s5
 8021e8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e96:	ee16 4a90 	vmov	r4, s13
 8021e9a:	eef0 6a43 	vmov.f32	s13, s6
 8021e9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ea2:	ee16 6a90 	vmov	r6, s13
 8021ea6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021eaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021eae:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021eb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021eb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021eba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ebe:	ee12 2a90 	vmov	r2, s5
 8021ec2:	eef0 2a47 	vmov.f32	s5, s14
 8021ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021eca:	ee13 2a10 	vmov	r2, s6
 8021ece:	9327      	str	r3, [sp, #156]	; 0x9c
 8021ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ed2:	eeb0 3a67 	vmov.f32	s6, s15
 8021ed6:	fb92 f3f3 	sdiv	r3, r2, r3
 8021eda:	9328      	str	r3, [sp, #160]	; 0xa0
 8021edc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021ede:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021ee0:	3b01      	subs	r3, #1
 8021ee2:	9316      	str	r3, [sp, #88]	; 0x58
 8021ee4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ee6:	bf08      	it	eq
 8021ee8:	4613      	moveq	r3, r2
 8021eea:	9307      	str	r3, [sp, #28]
 8021eec:	e622      	b.n	8021b34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8021eee:	2800      	cmp	r0, #0
 8021ef0:	f43f ae92 	beq.w	8021c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021ef4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021ef8:	9308      	str	r3, [sp, #32]
 8021efa:	0e1b      	lsrs	r3, r3, #24
 8021efc:	9310      	str	r3, [sp, #64]	; 0x40
 8021efe:	e68b      	b.n	8021c18 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021f00:	8839      	ldrh	r1, [r7, #0]
 8021f02:	43db      	mvns	r3, r3
 8021f04:	4dd4      	ldr	r5, [pc, #848]	; (8022258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021f06:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021f0a:	fa5f f883 	uxtb.w	r8, r3
 8021f0e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021f12:	10c8      	asrs	r0, r1, #3
 8021f14:	00cb      	lsls	r3, r1, #3
 8021f16:	fb0e fe08 	mul.w	lr, lr, r8
 8021f1a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021f1e:	b2db      	uxtb	r3, r3
 8021f20:	f10e 0101 	add.w	r1, lr, #1
 8021f24:	fb00 f008 	mul.w	r0, r0, r8
 8021f28:	fb03 f308 	mul.w	r3, r3, r8
 8021f2c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021f30:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8021f34:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8021f38:	f100 0e01 	add.w	lr, r0, #1
 8021f3c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8021f40:	b2c9      	uxtb	r1, r1
 8021f42:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021f46:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8021f4a:	00d2      	lsls	r2, r2, #3
 8021f4c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021f50:	430a      	orrs	r2, r1
 8021f52:	1c59      	adds	r1, r3, #1
 8021f54:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8021f58:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021f5c:	e748      	b.n	8021df0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8021f5e:	f112 0801 	adds.w	r8, r2, #1
 8021f62:	f53f af4b 	bmi.w	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f66:	4543      	cmp	r3, r8
 8021f68:	f6ff af48 	blt.w	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f6c:	f11c 0801 	adds.w	r8, ip, #1
 8021f70:	f53f af44 	bmi.w	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f74:	45c6      	cmp	lr, r8
 8021f76:	f6ff af41 	blt.w	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f7a:	b21b      	sxth	r3, r3
 8021f7c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8021f80:	fa0f f28e 	sxth.w	r2, lr
 8021f84:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8021f88:	9200      	str	r2, [sp, #0]
 8021f8a:	4639      	mov	r1, r7
 8021f8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021f8e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021f90:	f7ff fc88 	bl	80218a4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8021f94:	e732      	b.n	8021dfc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021f96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021f98:	1421      	asrs	r1, r4, #16
 8021f9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021f9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021fa0:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8021fa4:	1433      	asrs	r3, r6, #16
 8021fa6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021faa:	fb07 1303 	mla	r3, r7, r3, r1
 8021fae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021fb0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8021fb4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8021fb8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021fbc:	2a00      	cmp	r2, #0
 8021fbe:	f000 8108 	beq.w	80221d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8021fc2:	684d      	ldr	r5, [r1, #4]
 8021fc4:	950d      	str	r5, [sp, #52]	; 0x34
 8021fc6:	0e2d      	lsrs	r5, r5, #24
 8021fc8:	9514      	str	r5, [sp, #80]	; 0x50
 8021fca:	b178      	cbz	r0, 8021fec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8021fcc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8021fd0:	3f01      	subs	r7, #1
 8021fd2:	00bf      	lsls	r7, r7, #2
 8021fd4:	3704      	adds	r7, #4
 8021fd6:	eb01 0e07 	add.w	lr, r1, r7
 8021fda:	59c9      	ldr	r1, [r1, r7]
 8021fdc:	9109      	str	r1, [sp, #36]	; 0x24
 8021fde:	0e09      	lsrs	r1, r1, #24
 8021fe0:	9111      	str	r1, [sp, #68]	; 0x44
 8021fe2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021fe6:	910e      	str	r1, [sp, #56]	; 0x38
 8021fe8:	0e09      	lsrs	r1, r1, #24
 8021fea:	9115      	str	r1, [sp, #84]	; 0x54
 8021fec:	b292      	uxth	r2, r2
 8021fee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021ff0:	b280      	uxth	r0, r0
 8021ff2:	fb02 f900 	mul.w	r9, r2, r0
 8021ff6:	0112      	lsls	r2, r2, #4
 8021ff8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021ffc:	eba2 0e09 	sub.w	lr, r2, r9
 8022000:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022006:	b280      	uxth	r0, r0
 8022008:	fa1f fe8e 	uxth.w	lr, lr
 802200c:	1a09      	subs	r1, r1, r0
 802200e:	fb0e f202 	mul.w	r2, lr, r2
 8022012:	b289      	uxth	r1, r1
 8022014:	fb01 220c 	mla	r2, r1, ip, r2
 8022018:	fb00 2205 	mla	r2, r0, r5, r2
 802201c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802201e:	fb09 2205 	mla	r2, r9, r5, r2
 8022022:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022026:	2a00      	cmp	r2, #0
 8022028:	f000 80ca 	beq.w	80221c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802202c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8022030:	d019      	beq.n	8022066 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8022032:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802203a:	fb0c fa0a 	mul.w	sl, ip, sl
 802203e:	fb0c fc03 	mul.w	ip, ip, r3
 8022042:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022046:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802204a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802204e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022052:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022056:	4453      	add	r3, sl
 8022058:	0a3f      	lsrs	r7, r7, #8
 802205a:	0a1b      	lsrs	r3, r3, #8
 802205c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022060:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022064:	433b      	orrs	r3, r7
 8022066:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022068:	2dff      	cmp	r5, #255	; 0xff
 802206a:	d020      	beq.n	80220ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802206c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802206e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022072:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022074:	436f      	muls	r7, r5
 8022076:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022078:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802207c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022080:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022082:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022086:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802208a:	fb05 fa0a 	mul.w	sl, r5, sl
 802208e:	44bc      	add	ip, r7
 8022090:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022094:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022098:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802209c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80220a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80220a8:	ea4c 050a 	orr.w	r5, ip, sl
 80220ac:	950d      	str	r5, [sp, #52]	; 0x34
 80220ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220b0:	2dff      	cmp	r5, #255	; 0xff
 80220b2:	d020      	beq.n	80220f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80220b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80220b6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80220ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220bc:	436f      	muls	r7, r5
 80220be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80220c0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80220c4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220c6:	fb05 fa0c 	mul.w	sl, r5, ip
 80220ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80220ce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80220d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220d6:	44bc      	add	ip, r7
 80220d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80220dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80220e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80220e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80220e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80220ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80220f0:	ea4c 050a 	orr.w	r5, ip, sl
 80220f4:	9509      	str	r5, [sp, #36]	; 0x24
 80220f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80220f8:	2dff      	cmp	r5, #255	; 0xff
 80220fa:	d020      	beq.n	802213e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80220fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80220fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022102:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022104:	436f      	muls	r7, r5
 8022106:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022108:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802210c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8022110:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022112:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022116:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802211a:	fb05 fa0a 	mul.w	sl, r5, sl
 802211e:	44bc      	add	ip, r7
 8022120:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022124:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022128:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802212c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022130:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022134:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022138:	ea4c 050a 	orr.w	r5, ip, sl
 802213c:	950e      	str	r5, [sp, #56]	; 0x38
 802213e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022140:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022148:	2aff      	cmp	r2, #255	; 0xff
 802214a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802214e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022150:	fb0e f707 	mul.w	r7, lr, r7
 8022154:	fb01 770c 	mla	r7, r1, ip, r7
 8022158:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802215c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802215e:	fb00 770c 	mla	r7, r0, ip, r7
 8022162:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022166:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022168:	fb09 770c 	mla	r7, r9, ip, r7
 802216c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8022170:	fb0e fe0c 	mul.w	lr, lr, ip
 8022174:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8022178:	fb01 e303 	mla	r3, r1, r3, lr
 802217c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802217e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022182:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022186:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022188:	fb00 330a 	mla	r3, r0, sl, r3
 802218c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8022190:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022198:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802219c:	ea47 070c 	orr.w	r7, r7, ip
 80221a0:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80221a4:	d11e      	bne.n	80221e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80221a6:	097a      	lsrs	r2, r7, #5
 80221a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80221ac:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80221b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80221b4:	f023 0307 	bic.w	r3, r3, #7
 80221b8:	4313      	orrs	r3, r2
 80221ba:	431f      	orrs	r7, r3
 80221bc:	f8a8 7000 	strh.w	r7, [r8]
 80221c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80221c2:	f108 0802 	add.w	r8, r8, #2
 80221c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80221ca:	441c      	add	r4, r3
 80221cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221ce:	441e      	add	r6, r3
 80221d0:	e643      	b.n	8021e5a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80221d2:	2800      	cmp	r0, #0
 80221d4:	f43f af0a 	beq.w	8021fec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80221d8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80221dc:	9109      	str	r1, [sp, #36]	; 0x24
 80221de:	0e09      	lsrs	r1, r1, #24
 80221e0:	9111      	str	r1, [sp, #68]	; 0x44
 80221e2:	e703      	b.n	8021fec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80221e4:	f8b8 1000 	ldrh.w	r1, [r8]
 80221e8:	43d2      	mvns	r2, r2
 80221ea:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80221ee:	fa5f fe82 	uxtb.w	lr, r2
 80221f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80221f6:	10c8      	asrs	r0, r1, #3
 80221f8:	00ca      	lsls	r2, r1, #3
 80221fa:	fb0c fc0e 	mul.w	ip, ip, lr
 80221fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022202:	b2d2      	uxtb	r2, r2
 8022204:	f10c 0101 	add.w	r1, ip, #1
 8022208:	fb00 f00e 	mul.w	r0, r0, lr
 802220c:	fb02 f20e 	mul.w	r2, r2, lr
 8022210:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022214:	0c39      	lsrs	r1, r7, #16
 8022216:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802221a:	490f      	ldr	r1, [pc, #60]	; (8022258 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802221c:	fa5f fc8c 	uxtb.w	ip, ip
 8022220:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8022224:	1c41      	adds	r1, r0, #1
 8022226:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802222a:	1c51      	adds	r1, r2, #1
 802222c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022230:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022234:	00c0      	lsls	r0, r0, #3
 8022236:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802223a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802223e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8022242:	ea4c 0c00 	orr.w	ip, ip, r0
 8022246:	ea47 0c0c 	orr.w	ip, r7, ip
 802224a:	f8a8 c000 	strh.w	ip, [r8]
 802224e:	e7b7      	b.n	80221c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8022250:	b01b      	add	sp, #108	; 0x6c
 8022252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022256:	bf00      	nop
 8022258:	fffff800 	.word	0xfffff800

0802225c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022260:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8022264:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022268:	2d00      	cmp	r5, #0
 802226a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802226e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022272:	fb05 0e03 	mla	lr, r5, r3, r0
 8022276:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802227a:	f2c0 808c 	blt.w	8022396 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802227e:	45a9      	cmp	r9, r5
 8022280:	f340 8089 	ble.w	8022396 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8022284:	2800      	cmp	r0, #0
 8022286:	f2c0 8084 	blt.w	8022392 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802228a:	4580      	cmp	r8, r0
 802228c:	f340 8081 	ble.w	8022392 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8022290:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022294:	f01e 0f01 	tst.w	lr, #1
 8022298:	5d16      	ldrb	r6, [r2, r4]
 802229a:	bf0c      	ite	eq
 802229c:	f006 060f 	andeq.w	r6, r6, #15
 80222a0:	1136      	asrne	r6, r6, #4
 80222a2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80222a6:	b2f6      	uxtb	r6, r6
 80222a8:	1c44      	adds	r4, r0, #1
 80222aa:	d477      	bmi.n	802239c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80222ac:	45a0      	cmp	r8, r4
 80222ae:	dd75      	ble.n	802239c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 80222b0:	2f00      	cmp	r7, #0
 80222b2:	d075      	beq.n	80223a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80222b4:	f10e 0a01 	add.w	sl, lr, #1
 80222b8:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80222bc:	f01a 0f01 	tst.w	sl, #1
 80222c0:	5d14      	ldrb	r4, [r2, r4]
 80222c2:	bf0c      	ite	eq
 80222c4:	f004 040f 	andeq.w	r4, r4, #15
 80222c8:	1124      	asrne	r4, r4, #4
 80222ca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80222ce:	b2e4      	uxtb	r4, r4
 80222d0:	3501      	adds	r5, #1
 80222d2:	d469      	bmi.n	80223a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80222d4:	45a9      	cmp	r9, r5
 80222d6:	dd67      	ble.n	80223a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80222d8:	f1bc 0f00 	cmp.w	ip, #0
 80222dc:	d067      	beq.n	80223ae <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80222de:	2800      	cmp	r0, #0
 80222e0:	db60      	blt.n	80223a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80222e2:	4580      	cmp	r8, r0
 80222e4:	dd5e      	ble.n	80223a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80222e6:	eb03 090e 	add.w	r9, r3, lr
 80222ea:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80222ee:	f019 0f01 	tst.w	r9, #1
 80222f2:	5d55      	ldrb	r5, [r2, r5]
 80222f4:	bf0c      	ite	eq
 80222f6:	f005 050f 	andeq.w	r5, r5, #15
 80222fa:	112d      	asrne	r5, r5, #4
 80222fc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022300:	b2ed      	uxtb	r5, r5
 8022302:	3001      	adds	r0, #1
 8022304:	d456      	bmi.n	80223b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8022306:	4580      	cmp	r8, r0
 8022308:	dd54      	ble.n	80223b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802230a:	2f00      	cmp	r7, #0
 802230c:	d054      	beq.n	80223b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802230e:	3301      	adds	r3, #1
 8022310:	449e      	add	lr, r3
 8022312:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022316:	f01e 0f01 	tst.w	lr, #1
 802231a:	5cd0      	ldrb	r0, [r2, r3]
 802231c:	bf0c      	ite	eq
 802231e:	f000 000f 	andeq.w	r0, r0, #15
 8022322:	1100      	asrne	r0, r0, #4
 8022324:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022328:	b2c3      	uxtb	r3, r0
 802232a:	b2ba      	uxth	r2, r7
 802232c:	fa1f fc8c 	uxth.w	ip, ip
 8022330:	fb02 f00c 	mul.w	r0, r2, ip
 8022334:	0112      	lsls	r2, r2, #4
 8022336:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802233a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802233e:	1a12      	subs	r2, r2, r0
 8022340:	fa1f fc8c 	uxth.w	ip, ip
 8022344:	b292      	uxth	r2, r2
 8022346:	eba7 070c 	sub.w	r7, r7, ip
 802234a:	4362      	muls	r2, r4
 802234c:	b2bf      	uxth	r7, r7
 802234e:	fb06 2207 	mla	r2, r6, r7, r2
 8022352:	fb0c 2505 	mla	r5, ip, r5, r2
 8022356:	fb00 5303 	mla	r3, r0, r3, r5
 802235a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802235e:	b1b3      	cbz	r3, 802238e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8022360:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8022364:	435a      	muls	r2, r3
 8022366:	1c53      	adds	r3, r2, #1
 8022368:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802236c:	4a2d      	ldr	r2, [pc, #180]	; (8022424 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802236e:	121b      	asrs	r3, r3, #8
 8022370:	6812      	ldr	r2, [r2, #0]
 8022372:	2bff      	cmp	r3, #255	; 0xff
 8022374:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8022378:	d120      	bne.n	80223bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802237a:	0950      	lsrs	r0, r2, #5
 802237c:	4b2a      	ldr	r3, [pc, #168]	; (8022428 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802237e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022382:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022386:	4033      	ands	r3, r6
 8022388:	4318      	orrs	r0, r3
 802238a:	4302      	orrs	r2, r0
 802238c:	800a      	strh	r2, [r1, #0]
 802238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022392:	2600      	movs	r6, #0
 8022394:	e788      	b.n	80222a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8022396:	2400      	movs	r4, #0
 8022398:	4626      	mov	r6, r4
 802239a:	e799      	b.n	80222d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802239c:	2400      	movs	r4, #0
 802239e:	e797      	b.n	80222d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80223a0:	463c      	mov	r4, r7
 80223a2:	e795      	b.n	80222d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80223a4:	2500      	movs	r5, #0
 80223a6:	e7ac      	b.n	8022302 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 80223a8:	2300      	movs	r3, #0
 80223aa:	461d      	mov	r5, r3
 80223ac:	e7bd      	b.n	802232a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80223ae:	4663      	mov	r3, ip
 80223b0:	4665      	mov	r5, ip
 80223b2:	e7ba      	b.n	802232a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80223b4:	2300      	movs	r3, #0
 80223b6:	e7b8      	b.n	802232a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80223b8:	463b      	mov	r3, r7
 80223ba:	e7b6      	b.n	802232a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80223bc:	880d      	ldrh	r5, [r1, #0]
 80223be:	b29f      	uxth	r7, r3
 80223c0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80223c4:	43db      	mvns	r3, r3
 80223c6:	122c      	asrs	r4, r5, #8
 80223c8:	fb10 f007 	smulbb	r0, r0, r7
 80223cc:	b2db      	uxtb	r3, r3
 80223ce:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80223d2:	b2f6      	uxtb	r6, r6
 80223d4:	b2d2      	uxtb	r2, r2
 80223d6:	fb04 0403 	mla	r4, r4, r3, r0
 80223da:	10e8      	asrs	r0, r5, #3
 80223dc:	fb12 f207 	smulbb	r2, r2, r7
 80223e0:	00ed      	lsls	r5, r5, #3
 80223e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80223e6:	b2a4      	uxth	r4, r4
 80223e8:	fb16 f607 	smulbb	r6, r6, r7
 80223ec:	b2ed      	uxtb	r5, r5
 80223ee:	fb00 6603 	mla	r6, r0, r3, r6
 80223f2:	fb05 2303 	mla	r3, r5, r3, r2
 80223f6:	b2b0      	uxth	r0, r6
 80223f8:	b29a      	uxth	r2, r3
 80223fa:	1c63      	adds	r3, r4, #1
 80223fc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022400:	1c53      	adds	r3, r2, #1
 8022402:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022406:	1c42      	adds	r2, r0, #1
 8022408:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802240c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022410:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022414:	0940      	lsrs	r0, r0, #5
 8022416:	4323      	orrs	r3, r4
 8022418:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802241c:	4303      	orrs	r3, r0
 802241e:	800b      	strh	r3, [r1, #0]
 8022420:	e7b5      	b.n	802238e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8022422:	bf00      	nop
 8022424:	2400ae7c 	.word	0x2400ae7c
 8022428:	00fff800 	.word	0x00fff800

0802242c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022430:	b097      	sub	sp, #92	; 0x5c
 8022432:	9214      	str	r2, [sp, #80]	; 0x50
 8022434:	9309      	str	r3, [sp, #36]	; 0x24
 8022436:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022438:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802243c:	9015      	str	r0, [sp, #84]	; 0x54
 802243e:	910d      	str	r1, [sp, #52]	; 0x34
 8022440:	6850      	ldr	r0, [r2, #4]
 8022442:	930f      	str	r3, [sp, #60]	; 0x3c
 8022444:	6812      	ldr	r2, [r2, #0]
 8022446:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802244a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802244e:	fb00 1303 	mla	r3, r0, r3, r1
 8022452:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022458:	689b      	ldr	r3, [r3, #8]
 802245a:	3301      	adds	r3, #1
 802245c:	f023 0301 	bic.w	r3, r3, #1
 8022460:	930a      	str	r3, [sp, #40]	; 0x28
 8022462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022464:	681f      	ldr	r7, [r3, #0]
 8022466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022468:	2b00      	cmp	r3, #0
 802246a:	dc03      	bgt.n	8022474 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802246c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802246e:	2b00      	cmp	r3, #0
 8022470:	f340 8289 	ble.w	8022986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8022474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022476:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802247a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802247e:	1e48      	subs	r0, r1, #1
 8022480:	f102 3cff 	add.w	ip, r2, #4294967295
 8022484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022486:	2b00      	cmp	r3, #0
 8022488:	f340 80c5 	ble.w	8022616 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802248c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022490:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022494:	d406      	bmi.n	80224a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022496:	4586      	cmp	lr, r0
 8022498:	da04      	bge.n	80224a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802249a:	2b00      	cmp	r3, #0
 802249c:	db02      	blt.n	80224a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802249e:	4563      	cmp	r3, ip
 80224a0:	f2c0 80ba 	blt.w	8022618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80224a4:	f11e 0e01 	adds.w	lr, lr, #1
 80224a8:	f100 80ab 	bmi.w	8022602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80224ac:	4571      	cmp	r1, lr
 80224ae:	f2c0 80a8 	blt.w	8022602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80224b2:	3301      	adds	r3, #1
 80224b4:	f100 80a5 	bmi.w	8022602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80224b8:	429a      	cmp	r2, r3
 80224ba:	f2c0 80a2 	blt.w	8022602 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80224be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224c0:	46c8      	mov	r8, r9
 80224c2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80224c6:	930e      	str	r3, [sp, #56]	; 0x38
 80224c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	f340 80c4 	ble.w	8022658 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80224d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80224d2:	1430      	asrs	r0, r6, #16
 80224d4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80224d8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80224dc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80224e0:	1423      	asrs	r3, r4, #16
 80224e2:	f100 814f 	bmi.w	8022784 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80224e6:	f10c 3bff 	add.w	fp, ip, #4294967295
 80224ea:	455b      	cmp	r3, fp
 80224ec:	f280 814a 	bge.w	8022784 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80224f0:	2800      	cmp	r0, #0
 80224f2:	f2c0 8147 	blt.w	8022784 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80224f6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80224fa:	4558      	cmp	r0, fp
 80224fc:	f280 8142 	bge.w	8022784 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8022500:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022502:	fb00 3305 	mla	r3, r0, r5, r3
 8022506:	0858      	lsrs	r0, r3, #1
 8022508:	07dd      	lsls	r5, r3, #31
 802250a:	f817 c000 	ldrb.w	ip, [r7, r0]
 802250e:	bf54      	ite	pl
 8022510:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022514:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022518:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802251c:	fa5f fc8c 	uxtb.w	ip, ip
 8022520:	2a00      	cmp	r2, #0
 8022522:	f000 80dd 	beq.w	80226e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8022526:	1c58      	adds	r0, r3, #1
 8022528:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802252c:	07c0      	lsls	r0, r0, #31
 802252e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022532:	bf54      	ite	pl
 8022534:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022538:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802253c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022540:	fa5f f08e 	uxtb.w	r0, lr
 8022544:	9010      	str	r0, [sp, #64]	; 0x40
 8022546:	b1d9      	cbz	r1, 8022580 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022548:	4453      	add	r3, sl
 802254a:	0858      	lsrs	r0, r3, #1
 802254c:	07dd      	lsls	r5, r3, #31
 802254e:	f103 0301 	add.w	r3, r3, #1
 8022552:	5c38      	ldrb	r0, [r7, r0]
 8022554:	bf54      	ite	pl
 8022556:	f000 000f 	andpl.w	r0, r0, #15
 802255a:	1100      	asrmi	r0, r0, #4
 802255c:	07dd      	lsls	r5, r3, #31
 802255e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022562:	b2c0      	uxtb	r0, r0
 8022564:	900b      	str	r0, [sp, #44]	; 0x2c
 8022566:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802256a:	f817 e000 	ldrb.w	lr, [r7, r0]
 802256e:	bf54      	ite	pl
 8022570:	f00e 030f 	andpl.w	r3, lr, #15
 8022574:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022578:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802257c:	b2db      	uxtb	r3, r3
 802257e:	9311      	str	r3, [sp, #68]	; 0x44
 8022580:	b292      	uxth	r2, r2
 8022582:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022584:	b289      	uxth	r1, r1
 8022586:	fb02 f301 	mul.w	r3, r2, r1
 802258a:	0112      	lsls	r2, r2, #4
 802258c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022590:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022594:	1ad2      	subs	r2, r2, r3
 8022596:	b289      	uxth	r1, r1
 8022598:	b292      	uxth	r2, r2
 802259a:	1a40      	subs	r0, r0, r1
 802259c:	436a      	muls	r2, r5
 802259e:	b280      	uxth	r0, r0
 80225a0:	fb0c 2c00 	mla	ip, ip, r0, r2
 80225a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80225a6:	fb01 c102 	mla	r1, r1, r2, ip
 80225aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80225ac:	fb03 1302 	mla	r3, r3, r2, r1
 80225b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80225b4:	b1db      	cbz	r3, 80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80225b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225b8:	4353      	muls	r3, r2
 80225ba:	1c5a      	adds	r2, r3, #1
 80225bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80225c0:	4ac6      	ldr	r2, [pc, #792]	; (80228dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80225c2:	121b      	asrs	r3, r3, #8
 80225c4:	6812      	ldr	r2, [r2, #0]
 80225c6:	2bff      	cmp	r3, #255	; 0xff
 80225c8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80225cc:	f040 8099 	bne.w	8022702 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80225d0:	0953      	lsrs	r3, r2, #5
 80225d2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80225d6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80225da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80225de:	f02c 0c07 	bic.w	ip, ip, #7
 80225e2:	ea43 0c0c 	orr.w	ip, r3, ip
 80225e6:	ea4c 0202 	orr.w	r2, ip, r2
 80225ea:	f8a8 2000 	strh.w	r2, [r8]
 80225ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80225f0:	f108 0802 	add.w	r8, r8, #2
 80225f4:	441c      	add	r4, r3
 80225f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80225f8:	441e      	add	r6, r3
 80225fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225fc:	3b01      	subs	r3, #1
 80225fe:	930e      	str	r3, [sp, #56]	; 0x38
 8022600:	e762      	b.n	80224c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022604:	f109 0902 	add.w	r9, r9, #2
 8022608:	441c      	add	r4, r3
 802260a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802260c:	441e      	add	r6, r3
 802260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022610:	3b01      	subs	r3, #1
 8022612:	9309      	str	r3, [sp, #36]	; 0x24
 8022614:	e736      	b.n	8022484 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022616:	d024      	beq.n	8022662 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802261a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802261c:	3b01      	subs	r3, #1
 802261e:	fb00 4003 	mla	r0, r0, r3, r4
 8022622:	1400      	asrs	r0, r0, #16
 8022624:	f53f af4b 	bmi.w	80224be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022628:	3901      	subs	r1, #1
 802262a:	4288      	cmp	r0, r1
 802262c:	f6bf af47 	bge.w	80224be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022630:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022632:	fb01 6303 	mla	r3, r1, r3, r6
 8022636:	141b      	asrs	r3, r3, #16
 8022638:	f53f af41 	bmi.w	80224be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802263c:	3a01      	subs	r2, #1
 802263e:	4293      	cmp	r3, r2
 8022640:	f6bf af3d 	bge.w	80224be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022644:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022648:	46c8      	mov	r8, r9
 802264a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802264e:	930e      	str	r3, [sp, #56]	; 0x38
 8022650:	f1bb 0f00 	cmp.w	fp, #0
 8022654:	f300 80b7 	bgt.w	80227c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8022658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802265a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802265e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022664:	2b00      	cmp	r3, #0
 8022666:	f340 818e 	ble.w	8022986 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802266a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802266e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022670:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022674:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022678:	eef0 6a62 	vmov.f32	s13, s5
 802267c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022680:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022684:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022688:	ee16 4a90 	vmov	r4, s13
 802268c:	eef0 6a43 	vmov.f32	s13, s6
 8022690:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022694:	ee16 6a90 	vmov	r6, s13
 8022698:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802269c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226b0:	ee12 2a90 	vmov	r2, s5
 80226b4:	eef0 2a47 	vmov.f32	s5, s14
 80226b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80226bc:	ee13 2a10 	vmov	r2, s6
 80226c0:	9323      	str	r3, [sp, #140]	; 0x8c
 80226c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80226c4:	eeb0 3a67 	vmov.f32	s6, s15
 80226c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80226cc:	9324      	str	r3, [sp, #144]	; 0x90
 80226ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80226d2:	3b01      	subs	r3, #1
 80226d4:	930d      	str	r3, [sp, #52]	; 0x34
 80226d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80226d8:	bf08      	it	eq
 80226da:	4613      	moveq	r3, r2
 80226dc:	9309      	str	r3, [sp, #36]	; 0x24
 80226de:	e6c2      	b.n	8022466 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80226e0:	2900      	cmp	r1, #0
 80226e2:	f43f af4d 	beq.w	8022580 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80226e6:	eb0a 0003 	add.w	r0, sl, r3
 80226ea:	0843      	lsrs	r3, r0, #1
 80226ec:	07c0      	lsls	r0, r0, #31
 80226ee:	5cfb      	ldrb	r3, [r7, r3]
 80226f0:	bf54      	ite	pl
 80226f2:	f003 030f 	andpl.w	r3, r3, #15
 80226f6:	111b      	asrmi	r3, r3, #4
 80226f8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80226fc:	b2db      	uxtb	r3, r3
 80226fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8022700:	e73e      	b.n	8022580 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022702:	f8b8 e000 	ldrh.w	lr, [r8]
 8022706:	fa1f fb83 	uxth.w	fp, r3
 802270a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802270e:	43db      	mvns	r3, r3
 8022710:	ea4f 202e 	mov.w	r0, lr, asr #8
 8022714:	fb11 f10b 	smulbb	r1, r1, fp
 8022718:	b2db      	uxtb	r3, r3
 802271a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802271e:	fa5f fc8c 	uxtb.w	ip, ip
 8022722:	b2d2      	uxtb	r2, r2
 8022724:	fb00 1003 	mla	r0, r0, r3, r1
 8022728:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802272c:	fb1c fc0b 	smulbb	ip, ip, fp
 8022730:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022734:	b280      	uxth	r0, r0
 8022736:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802273a:	fb12 fb0b 	smulbb	fp, r2, fp
 802273e:	fa5f fe8e 	uxtb.w	lr, lr
 8022742:	fb01 cc03 	mla	ip, r1, r3, ip
 8022746:	fb0e bb03 	mla	fp, lr, r3, fp
 802274a:	1c43      	adds	r3, r0, #1
 802274c:	fa1f fc8c 	uxth.w	ip, ip
 8022750:	fa1f fb8b 	uxth.w	fp, fp
 8022754:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022758:	f10c 0101 	add.w	r1, ip, #1
 802275c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8022760:	f10b 0001 	add.w	r0, fp, #1
 8022764:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022768:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802276c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022770:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022774:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022778:	4318      	orrs	r0, r3
 802277a:	ea40 000c 	orr.w	r0, r0, ip
 802277e:	f8a8 0000 	strh.w	r0, [r8]
 8022782:	e734      	b.n	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022784:	f113 0b01 	adds.w	fp, r3, #1
 8022788:	f53f af31 	bmi.w	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802278c:	45dc      	cmp	ip, fp
 802278e:	f6ff af2e 	blt.w	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022792:	f110 0b01 	adds.w	fp, r0, #1
 8022796:	f53f af2a 	bmi.w	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802279a:	45de      	cmp	lr, fp
 802279c:	f6ff af27 	blt.w	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80227a0:	9302      	str	r3, [sp, #8]
 80227a2:	fa0f f38e 	sxth.w	r3, lr
 80227a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80227a8:	9301      	str	r3, [sp, #4]
 80227aa:	fa0f f38c 	sxth.w	r3, ip
 80227ae:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80227b2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80227b6:	9300      	str	r3, [sp, #0]
 80227b8:	463a      	mov	r2, r7
 80227ba:	4653      	mov	r3, sl
 80227bc:	4641      	mov	r1, r8
 80227be:	9815      	ldr	r0, [sp, #84]	; 0x54
 80227c0:	f7ff fd4c 	bl	802225c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80227c4:	e713      	b.n	80225ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80227c6:	1422      	asrs	r2, r4, #16
 80227c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80227ca:	1433      	asrs	r3, r6, #16
 80227cc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80227d0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80227d4:	fb05 2303 	mla	r3, r5, r3, r2
 80227d8:	085a      	lsrs	r2, r3, #1
 80227da:	07dd      	lsls	r5, r3, #31
 80227dc:	5cba      	ldrb	r2, [r7, r2]
 80227de:	bf54      	ite	pl
 80227e0:	f002 020f 	andpl.w	r2, r2, #15
 80227e4:	1112      	asrmi	r2, r2, #4
 80227e6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80227ea:	b2d2      	uxtb	r2, r2
 80227ec:	2900      	cmp	r1, #0
 80227ee:	d077      	beq.n	80228e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80227f0:	f103 0e01 	add.w	lr, r3, #1
 80227f4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80227f8:	f01e 0f01 	tst.w	lr, #1
 80227fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022800:	bf0c      	ite	eq
 8022802:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022806:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802280a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802280e:	fa5f f58c 	uxtb.w	r5, ip
 8022812:	9512      	str	r5, [sp, #72]	; 0x48
 8022814:	b308      	cbz	r0, 802285a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022816:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022818:	442b      	add	r3, r5
 802281a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802281e:	07dd      	lsls	r5, r3, #31
 8022820:	f103 0301 	add.w	r3, r3, #1
 8022824:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022828:	bf54      	ite	pl
 802282a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802282e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022832:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022836:	fa5f f58c 	uxtb.w	r5, ip
 802283a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802283e:	950c      	str	r5, [sp, #48]	; 0x30
 8022840:	07dd      	lsls	r5, r3, #31
 8022842:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022846:	bf54      	ite	pl
 8022848:	f00c 0c0f 	andpl.w	ip, ip, #15
 802284c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022850:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022854:	fa5f f38c 	uxtb.w	r3, ip
 8022858:	9313      	str	r3, [sp, #76]	; 0x4c
 802285a:	b289      	uxth	r1, r1
 802285c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802285e:	b280      	uxth	r0, r0
 8022860:	fb01 f300 	mul.w	r3, r1, r0
 8022864:	0109      	lsls	r1, r1, #4
 8022866:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802286a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802286e:	1ac9      	subs	r1, r1, r3
 8022870:	b280      	uxth	r0, r0
 8022872:	b289      	uxth	r1, r1
 8022874:	ebac 0c00 	sub.w	ip, ip, r0
 8022878:	4369      	muls	r1, r5
 802287a:	fa1f fc8c 	uxth.w	ip, ip
 802287e:	fb02 120c 	mla	r2, r2, ip, r1
 8022882:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022884:	fb00 2001 	mla	r0, r0, r1, r2
 8022888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802288a:	fb03 0302 	mla	r3, r3, r2, r0
 802288e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022892:	b1d3      	cbz	r3, 80228ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022894:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022896:	4353      	muls	r3, r2
 8022898:	1c5a      	adds	r2, r3, #1
 802289a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802289e:	4a0f      	ldr	r2, [pc, #60]	; (80228dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80228a0:	121b      	asrs	r3, r3, #8
 80228a2:	6812      	ldr	r2, [r2, #0]
 80228a4:	2bff      	cmp	r3, #255	; 0xff
 80228a6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80228aa:	d12d      	bne.n	8022908 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80228ac:	0953      	lsrs	r3, r2, #5
 80228ae:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80228b2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80228b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80228ba:	f02c 0c07 	bic.w	ip, ip, #7
 80228be:	ea43 0c0c 	orr.w	ip, r3, ip
 80228c2:	ea4c 0202 	orr.w	r2, ip, r2
 80228c6:	f8a8 2000 	strh.w	r2, [r8]
 80228ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80228cc:	f108 0802 	add.w	r8, r8, #2
 80228d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80228d4:	441c      	add	r4, r3
 80228d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80228d8:	441e      	add	r6, r3
 80228da:	e6b9      	b.n	8022650 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80228dc:	2400ae7c 	.word	0x2400ae7c
 80228e0:	2800      	cmp	r0, #0
 80228e2:	d0ba      	beq.n	802285a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80228e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80228e6:	442b      	add	r3, r5
 80228e8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228ec:	07db      	lsls	r3, r3, #31
 80228ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228f2:	bf54      	ite	pl
 80228f4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228f8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228fc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022900:	fa5f f38c 	uxtb.w	r3, ip
 8022904:	930c      	str	r3, [sp, #48]	; 0x30
 8022906:	e7a8      	b.n	802285a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8022908:	f8b8 e000 	ldrh.w	lr, [r8]
 802290c:	fa1f fa83 	uxth.w	sl, r3
 8022910:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8022914:	43db      	mvns	r3, r3
 8022916:	ea4f 202e 	mov.w	r0, lr, asr #8
 802291a:	fb11 f10a 	smulbb	r1, r1, sl
 802291e:	b2db      	uxtb	r3, r3
 8022920:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022924:	b2d2      	uxtb	r2, r2
 8022926:	fa5f fc8c 	uxtb.w	ip, ip
 802292a:	fb00 1003 	mla	r0, r0, r3, r1
 802292e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8022932:	fb12 f20a 	smulbb	r2, r2, sl
 8022936:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802293a:	b280      	uxth	r0, r0
 802293c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022940:	fb1c fc0a 	smulbb	ip, ip, sl
 8022944:	fa5f fe8e 	uxtb.w	lr, lr
 8022948:	fb0e 2203 	mla	r2, lr, r3, r2
 802294c:	fb01 cc03 	mla	ip, r1, r3, ip
 8022950:	1c43      	adds	r3, r0, #1
 8022952:	b292      	uxth	r2, r2
 8022954:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022958:	1c51      	adds	r1, r2, #1
 802295a:	fa1f fc8c 	uxth.w	ip, ip
 802295e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022962:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022966:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802296a:	4308      	orrs	r0, r1
 802296c:	f10c 0101 	add.w	r1, ip, #1
 8022970:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022974:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022978:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802297c:	ea40 000c 	orr.w	r0, r0, ip
 8022980:	f8a8 0000 	strh.w	r0, [r8]
 8022984:	e7a1      	b.n	80228ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022986:	b017      	add	sp, #92	; 0x5c
 8022988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802298c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022990:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8022994:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022998:	2d00      	cmp	r5, #0
 802299a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802299e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80229a2:	fb05 0e03 	mla	lr, r5, r3, r0
 80229a6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80229aa:	f2c0 80b0 	blt.w	8022b0e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80229ae:	45a9      	cmp	r9, r5
 80229b0:	f340 80ad 	ble.w	8022b0e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 80229b4:	2800      	cmp	r0, #0
 80229b6:	f2c0 80a8 	blt.w	8022b0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80229ba:	4580      	cmp	r8, r0
 80229bc:	f340 80a5 	ble.w	8022b0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 80229c0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80229c4:	f01e 0f01 	tst.w	lr, #1
 80229c8:	5d16      	ldrb	r6, [r2, r4]
 80229ca:	bf0c      	ite	eq
 80229cc:	f006 060f 	andeq.w	r6, r6, #15
 80229d0:	1136      	asrne	r6, r6, #4
 80229d2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80229d6:	b2f6      	uxtb	r6, r6
 80229d8:	1c44      	adds	r4, r0, #1
 80229da:	f100 809b 	bmi.w	8022b14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80229de:	45a0      	cmp	r8, r4
 80229e0:	f340 8098 	ble.w	8022b14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 80229e4:	2f00      	cmp	r7, #0
 80229e6:	f000 8097 	beq.w	8022b18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 80229ea:	f10e 0a01 	add.w	sl, lr, #1
 80229ee:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80229f2:	f01a 0f01 	tst.w	sl, #1
 80229f6:	5d14      	ldrb	r4, [r2, r4]
 80229f8:	bf0c      	ite	eq
 80229fa:	f004 040f 	andeq.w	r4, r4, #15
 80229fe:	1124      	asrne	r4, r4, #4
 8022a00:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022a04:	b2e4      	uxtb	r4, r4
 8022a06:	3501      	adds	r5, #1
 8022a08:	f100 808a 	bmi.w	8022b20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022a0c:	45a9      	cmp	r9, r5
 8022a0e:	f340 8087 	ble.w	8022b20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022a12:	f1bc 0f00 	cmp.w	ip, #0
 8022a16:	f000 8086 	beq.w	8022b26 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8022a1a:	2800      	cmp	r0, #0
 8022a1c:	db7e      	blt.n	8022b1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022a1e:	4580      	cmp	r8, r0
 8022a20:	dd7c      	ble.n	8022b1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022a22:	eb03 090e 	add.w	r9, r3, lr
 8022a26:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8022a2a:	f019 0f01 	tst.w	r9, #1
 8022a2e:	5d55      	ldrb	r5, [r2, r5]
 8022a30:	bf0c      	ite	eq
 8022a32:	f005 050f 	andeq.w	r5, r5, #15
 8022a36:	112d      	asrne	r5, r5, #4
 8022a38:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022a3c:	b2ed      	uxtb	r5, r5
 8022a3e:	3001      	adds	r0, #1
 8022a40:	d474      	bmi.n	8022b2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022a42:	4580      	cmp	r8, r0
 8022a44:	dd72      	ble.n	8022b2c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022a46:	2f00      	cmp	r7, #0
 8022a48:	d072      	beq.n	8022b30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8022a4a:	3301      	adds	r3, #1
 8022a4c:	449e      	add	lr, r3
 8022a4e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022a52:	f01e 0f01 	tst.w	lr, #1
 8022a56:	5cd0      	ldrb	r0, [r2, r3]
 8022a58:	bf0c      	ite	eq
 8022a5a:	f000 000f 	andeq.w	r0, r0, #15
 8022a5e:	1100      	asrne	r0, r0, #4
 8022a60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022a64:	b2c3      	uxtb	r3, r0
 8022a66:	b2ba      	uxth	r2, r7
 8022a68:	fa1f fc8c 	uxth.w	ip, ip
 8022a6c:	fb02 f00c 	mul.w	r0, r2, ip
 8022a70:	0112      	lsls	r2, r2, #4
 8022a72:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022a76:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022a7a:	1a12      	subs	r2, r2, r0
 8022a7c:	fa1f fc8c 	uxth.w	ip, ip
 8022a80:	b292      	uxth	r2, r2
 8022a82:	eba7 070c 	sub.w	r7, r7, ip
 8022a86:	4362      	muls	r2, r4
 8022a88:	b2bf      	uxth	r7, r7
 8022a8a:	fb06 2207 	mla	r2, r6, r7, r2
 8022a8e:	fb0c 2505 	mla	r5, ip, r5, r2
 8022a92:	fb00 5303 	mla	r3, r0, r3, r5
 8022a96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022a9a:	b3a3      	cbz	r3, 8022b06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8022a9c:	4a25      	ldr	r2, [pc, #148]	; (8022b34 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8022a9e:	880e      	ldrh	r6, [r1, #0]
 8022aa0:	6815      	ldr	r5, [r2, #0]
 8022aa2:	b29a      	uxth	r2, r3
 8022aa4:	1234      	asrs	r4, r6, #8
 8022aa6:	43db      	mvns	r3, r3
 8022aa8:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8022aac:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8022ab0:	b2db      	uxtb	r3, r3
 8022ab2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022ab6:	fb10 f002 	smulbb	r0, r0, r2
 8022aba:	b2ed      	uxtb	r5, r5
 8022abc:	fb17 f702 	smulbb	r7, r7, r2
 8022ac0:	fb04 0403 	mla	r4, r4, r3, r0
 8022ac4:	10f0      	asrs	r0, r6, #3
 8022ac6:	fb15 f202 	smulbb	r2, r5, r2
 8022aca:	00f6      	lsls	r6, r6, #3
 8022acc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022ad0:	b2a4      	uxth	r4, r4
 8022ad2:	b2f6      	uxtb	r6, r6
 8022ad4:	fb00 7003 	mla	r0, r0, r3, r7
 8022ad8:	fb06 2303 	mla	r3, r6, r3, r2
 8022adc:	b280      	uxth	r0, r0
 8022ade:	b29a      	uxth	r2, r3
 8022ae0:	1c63      	adds	r3, r4, #1
 8022ae2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022ae6:	1c53      	adds	r3, r2, #1
 8022ae8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022aec:	1c42      	adds	r2, r0, #1
 8022aee:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022af2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022af6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022afa:	0940      	lsrs	r0, r0, #5
 8022afc:	4323      	orrs	r3, r4
 8022afe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022b02:	4303      	orrs	r3, r0
 8022b04:	800b      	strh	r3, [r1, #0]
 8022b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b0a:	2600      	movs	r6, #0
 8022b0c:	e764      	b.n	80229d8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8022b0e:	2400      	movs	r4, #0
 8022b10:	4626      	mov	r6, r4
 8022b12:	e778      	b.n	8022a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022b14:	2400      	movs	r4, #0
 8022b16:	e776      	b.n	8022a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022b18:	463c      	mov	r4, r7
 8022b1a:	e774      	b.n	8022a06 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022b1c:	2500      	movs	r5, #0
 8022b1e:	e78e      	b.n	8022a3e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8022b20:	2300      	movs	r3, #0
 8022b22:	461d      	mov	r5, r3
 8022b24:	e79f      	b.n	8022a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022b26:	4663      	mov	r3, ip
 8022b28:	4665      	mov	r5, ip
 8022b2a:	e79c      	b.n	8022a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022b2c:	2300      	movs	r3, #0
 8022b2e:	e79a      	b.n	8022a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022b30:	463b      	mov	r3, r7
 8022b32:	e798      	b.n	8022a66 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022b34:	2400ae7c 	.word	0x2400ae7c

08022b38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b3c:	b093      	sub	sp, #76	; 0x4c
 8022b3e:	461d      	mov	r5, r3
 8022b40:	920c      	str	r2, [sp, #48]	; 0x30
 8022b42:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022b44:	9011      	str	r0, [sp, #68]	; 0x44
 8022b46:	9107      	str	r1, [sp, #28]
 8022b48:	6850      	ldr	r0, [r2, #4]
 8022b4a:	6812      	ldr	r2, [r2, #0]
 8022b4c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022b50:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022b54:	fb00 1303 	mla	r3, r0, r3, r1
 8022b58:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022b5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022b5e:	689b      	ldr	r3, [r3, #8]
 8022b60:	3301      	adds	r3, #1
 8022b62:	f023 0301 	bic.w	r3, r3, #1
 8022b66:	9306      	str	r3, [sp, #24]
 8022b68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022b6a:	681f      	ldr	r7, [r3, #0]
 8022b6c:	9b07      	ldr	r3, [sp, #28]
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	dc03      	bgt.n	8022b7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	f340 8267 	ble.w	8023048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022b7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022b7c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022b80:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b84:	1e48      	subs	r0, r1, #1
 8022b86:	f102 3cff 	add.w	ip, r2, #4294967295
 8022b8a:	2d00      	cmp	r5, #0
 8022b8c:	f340 80b7 	ble.w	8022cfe <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022b90:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022b94:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022b98:	d406      	bmi.n	8022ba8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022b9a:	4586      	cmp	lr, r0
 8022b9c:	da04      	bge.n	8022ba8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	db02      	blt.n	8022ba8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022ba2:	4563      	cmp	r3, ip
 8022ba4:	f2c0 80ac 	blt.w	8022d00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8022ba8:	f11e 0e01 	adds.w	lr, lr, #1
 8022bac:	f100 809f 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022bb0:	4571      	cmp	r1, lr
 8022bb2:	f2c0 809c 	blt.w	8022cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022bb6:	3301      	adds	r3, #1
 8022bb8:	f100 8099 	bmi.w	8022cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022bbc:	429a      	cmp	r2, r3
 8022bbe:	f2c0 8096 	blt.w	8022cee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022bc2:	46c8      	mov	r8, r9
 8022bc4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022bc8:	9509      	str	r5, [sp, #36]	; 0x24
 8022bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	f340 80b5 	ble.w	8022d3c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022bd2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022bd6:	1430      	asrs	r0, r6, #16
 8022bd8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022bdc:	9308      	str	r3, [sp, #32]
 8022bde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022be0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022be4:	1423      	asrs	r3, r4, #16
 8022be6:	f100 813f 	bmi.w	8022e68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022bea:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022bee:	455b      	cmp	r3, fp
 8022bf0:	f280 813a 	bge.w	8022e68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022bf4:	2800      	cmp	r0, #0
 8022bf6:	f2c0 8137 	blt.w	8022e68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022bfa:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022bfe:	4558      	cmp	r0, fp
 8022c00:	f280 8132 	bge.w	8022e68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022c04:	9a06      	ldr	r2, [sp, #24]
 8022c06:	fb00 3302 	mla	r3, r0, r2, r3
 8022c0a:	0858      	lsrs	r0, r3, #1
 8022c0c:	07da      	lsls	r2, r3, #31
 8022c0e:	9a08      	ldr	r2, [sp, #32]
 8022c10:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022c14:	bf54      	ite	pl
 8022c16:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022c1a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022c1e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022c22:	fa5f fc8c 	uxtb.w	ip, ip
 8022c26:	2a00      	cmp	r2, #0
 8022c28:	f000 80cc 	beq.w	8022dc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022c2c:	1c58      	adds	r0, r3, #1
 8022c2e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022c32:	07c0      	lsls	r0, r0, #31
 8022c34:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022c38:	bf54      	ite	pl
 8022c3a:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022c3e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022c42:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022c46:	fa5f fe8e 	uxtb.w	lr, lr
 8022c4a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022c4e:	b1b9      	cbz	r1, 8022c80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022c50:	4453      	add	r3, sl
 8022c52:	0858      	lsrs	r0, r3, #1
 8022c54:	07da      	lsls	r2, r3, #31
 8022c56:	5c38      	ldrb	r0, [r7, r0]
 8022c58:	bf54      	ite	pl
 8022c5a:	f000 000f 	andpl.w	r0, r0, #15
 8022c5e:	1100      	asrmi	r0, r0, #4
 8022c60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022c64:	b2c0      	uxtb	r0, r0
 8022c66:	900a      	str	r0, [sp, #40]	; 0x28
 8022c68:	1c58      	adds	r0, r3, #1
 8022c6a:	0843      	lsrs	r3, r0, #1
 8022c6c:	07c2      	lsls	r2, r0, #31
 8022c6e:	5cfb      	ldrb	r3, [r7, r3]
 8022c70:	bf54      	ite	pl
 8022c72:	f003 030f 	andpl.w	r3, r3, #15
 8022c76:	111b      	asrmi	r3, r3, #4
 8022c78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022c7c:	b2db      	uxtb	r3, r3
 8022c7e:	930e      	str	r3, [sp, #56]	; 0x38
 8022c80:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022c84:	b289      	uxth	r1, r1
 8022c86:	fb02 f301 	mul.w	r3, r2, r1
 8022c8a:	0112      	lsls	r2, r2, #4
 8022c8c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022c90:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022c94:	1ad2      	subs	r2, r2, r3
 8022c96:	b289      	uxth	r1, r1
 8022c98:	b292      	uxth	r2, r2
 8022c9a:	1a40      	subs	r0, r0, r1
 8022c9c:	fa1f fe80 	uxth.w	lr, r0
 8022ca0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022ca2:	4342      	muls	r2, r0
 8022ca4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022caa:	fb01 c102 	mla	r1, r1, r2, ip
 8022cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022cb0:	fb03 1302 	mla	r3, r3, r2, r1
 8022cb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022cb8:	2bff      	cmp	r3, #255	; 0xff
 8022cba:	f040 8094 	bne.w	8022de6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022cbe:	4bbf      	ldr	r3, [pc, #764]	; (8022fbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022cc0:	681a      	ldr	r2, [r3, #0]
 8022cc2:	4bbf      	ldr	r3, [pc, #764]	; (8022fc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022cc4:	0951      	lsrs	r1, r2, #5
 8022cc6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022cca:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022cce:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022cd2:	430b      	orrs	r3, r1
 8022cd4:	4313      	orrs	r3, r2
 8022cd6:	f8a8 3000 	strh.w	r3, [r8]
 8022cda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022cdc:	f108 0802 	add.w	r8, r8, #2
 8022ce0:	441c      	add	r4, r3
 8022ce2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ce4:	441e      	add	r6, r3
 8022ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ce8:	3b01      	subs	r3, #1
 8022cea:	9309      	str	r3, [sp, #36]	; 0x24
 8022cec:	e76d      	b.n	8022bca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022cee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022cf0:	3d01      	subs	r5, #1
 8022cf2:	f109 0902 	add.w	r9, r9, #2
 8022cf6:	441c      	add	r4, r3
 8022cf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022cfa:	441e      	add	r6, r3
 8022cfc:	e745      	b.n	8022b8a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022cfe:	d021      	beq.n	8022d44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022d00:	1e6b      	subs	r3, r5, #1
 8022d02:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022d04:	fb00 4003 	mla	r0, r0, r3, r4
 8022d08:	1400      	asrs	r0, r0, #16
 8022d0a:	f53f af5a 	bmi.w	8022bc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d0e:	3901      	subs	r1, #1
 8022d10:	4288      	cmp	r0, r1
 8022d12:	f6bf af56 	bge.w	8022bc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d16:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022d18:	fb01 6303 	mla	r3, r1, r3, r6
 8022d1c:	141b      	asrs	r3, r3, #16
 8022d1e:	f53f af50 	bmi.w	8022bc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d22:	3a01      	subs	r2, #1
 8022d24:	4293      	cmp	r3, r2
 8022d26:	f6bf af4c 	bge.w	8022bc2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022d2e:	46a8      	mov	r8, r5
 8022d30:	46ce      	mov	lr, r9
 8022d32:	9308      	str	r3, [sp, #32]
 8022d34:	f1b8 0f00 	cmp.w	r8, #0
 8022d38:	f300 80b6 	bgt.w	8022ea8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022d3c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022d40:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022d44:	9b07      	ldr	r3, [sp, #28]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	f340 817e 	ble.w	8023048 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022d4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022d50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022d52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d5a:	eef0 6a62 	vmov.f32	s13, s5
 8022d5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022d62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d6a:	ee16 4a90 	vmov	r4, s13
 8022d6e:	eef0 6a43 	vmov.f32	s13, s6
 8022d72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022d76:	ee16 6a90 	vmov	r6, s13
 8022d7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d92:	ee12 2a90 	vmov	r2, s5
 8022d96:	eef0 2a47 	vmov.f32	s5, s14
 8022d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d9e:	ee13 2a10 	vmov	r2, s6
 8022da2:	931f      	str	r3, [sp, #124]	; 0x7c
 8022da4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022da6:	eeb0 3a67 	vmov.f32	s6, s15
 8022daa:	fb92 f3f3 	sdiv	r3, r2, r3
 8022dae:	9320      	str	r3, [sp, #128]	; 0x80
 8022db0:	9b07      	ldr	r3, [sp, #28]
 8022db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022db4:	3b01      	subs	r3, #1
 8022db6:	9307      	str	r3, [sp, #28]
 8022db8:	bf08      	it	eq
 8022dba:	4615      	moveq	r5, r2
 8022dbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022dbe:	bf18      	it	ne
 8022dc0:	461d      	movne	r5, r3
 8022dc2:	e6d3      	b.n	8022b6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022dc4:	2900      	cmp	r1, #0
 8022dc6:	f43f af5b 	beq.w	8022c80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022dca:	eb0a 0003 	add.w	r0, sl, r3
 8022dce:	0843      	lsrs	r3, r0, #1
 8022dd0:	07c0      	lsls	r0, r0, #31
 8022dd2:	5cfb      	ldrb	r3, [r7, r3]
 8022dd4:	bf54      	ite	pl
 8022dd6:	f003 030f 	andpl.w	r3, r3, #15
 8022dda:	111b      	asrmi	r3, r3, #4
 8022ddc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022de0:	b2db      	uxtb	r3, r3
 8022de2:	930a      	str	r3, [sp, #40]	; 0x28
 8022de4:	e74c      	b.n	8022c80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	f43f af77 	beq.w	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022dec:	4a73      	ldr	r2, [pc, #460]	; (8022fbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022dee:	fa1f fe83 	uxth.w	lr, r3
 8022df2:	f8b8 c000 	ldrh.w	ip, [r8]
 8022df6:	43db      	mvns	r3, r3
 8022df8:	6810      	ldr	r0, [r2, #0]
 8022dfa:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022dfe:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022e02:	b2db      	uxtb	r3, r3
 8022e04:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022e08:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022e0c:	fb12 f20e 	smulbb	r2, r2, lr
 8022e10:	b2c0      	uxtb	r0, r0
 8022e12:	fb1b fb0e 	smulbb	fp, fp, lr
 8022e16:	fb01 2103 	mla	r1, r1, r3, r2
 8022e1a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022e1e:	fb10 fe0e 	smulbb	lr, r0, lr
 8022e22:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022e26:	b289      	uxth	r1, r1
 8022e28:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022e2c:	fa5f fc8c 	uxtb.w	ip, ip
 8022e30:	fb02 b203 	mla	r2, r2, r3, fp
 8022e34:	1c48      	adds	r0, r1, #1
 8022e36:	fb0c e303 	mla	r3, ip, r3, lr
 8022e3a:	b292      	uxth	r2, r2
 8022e3c:	b29b      	uxth	r3, r3
 8022e3e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022e42:	f102 0b01 	add.w	fp, r2, #1
 8022e46:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8022e4a:	1c59      	adds	r1, r3, #1
 8022e4c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022e50:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022e54:	0952      	lsrs	r2, r2, #5
 8022e56:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022e5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e5e:	4301      	orrs	r1, r0
 8022e60:	4311      	orrs	r1, r2
 8022e62:	f8a8 1000 	strh.w	r1, [r8]
 8022e66:	e738      	b.n	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022e68:	f113 0b01 	adds.w	fp, r3, #1
 8022e6c:	f53f af35 	bmi.w	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022e70:	45dc      	cmp	ip, fp
 8022e72:	f6ff af32 	blt.w	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022e76:	f110 0b01 	adds.w	fp, r0, #1
 8022e7a:	f53f af2e 	bmi.w	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022e7e:	45de      	cmp	lr, fp
 8022e80:	f6ff af2b 	blt.w	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022e84:	9302      	str	r3, [sp, #8]
 8022e86:	fa0f f38e 	sxth.w	r3, lr
 8022e8a:	9a08      	ldr	r2, [sp, #32]
 8022e8c:	9301      	str	r3, [sp, #4]
 8022e8e:	fa0f f38c 	sxth.w	r3, ip
 8022e92:	9105      	str	r1, [sp, #20]
 8022e94:	4641      	mov	r1, r8
 8022e96:	9300      	str	r3, [sp, #0]
 8022e98:	4653      	mov	r3, sl
 8022e9a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022e9e:	463a      	mov	r2, r7
 8022ea0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022ea2:	f7ff fd73 	bl	802298c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022ea6:	e718      	b.n	8022cda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022ea8:	1422      	asrs	r2, r4, #16
 8022eaa:	9906      	ldr	r1, [sp, #24]
 8022eac:	1433      	asrs	r3, r6, #16
 8022eae:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022eb2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022eb6:	fb01 2303 	mla	r3, r1, r3, r2
 8022eba:	085a      	lsrs	r2, r3, #1
 8022ebc:	07d9      	lsls	r1, r3, #31
 8022ebe:	5cba      	ldrb	r2, [r7, r2]
 8022ec0:	bf54      	ite	pl
 8022ec2:	f002 020f 	andpl.w	r2, r2, #15
 8022ec6:	1112      	asrmi	r2, r2, #4
 8022ec8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022ecc:	b2d2      	uxtb	r2, r2
 8022ece:	2800      	cmp	r0, #0
 8022ed0:	d063      	beq.n	8022f9a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022ed2:	f103 0a01 	add.w	sl, r3, #1
 8022ed6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022eda:	f01a 0f01 	tst.w	sl, #1
 8022ede:	5c79      	ldrb	r1, [r7, r1]
 8022ee0:	bf0c      	ite	eq
 8022ee2:	f001 010f 	andeq.w	r1, r1, #15
 8022ee6:	1109      	asrne	r1, r1, #4
 8022ee8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022eec:	b2c9      	uxtb	r1, r1
 8022eee:	910f      	str	r1, [sp, #60]	; 0x3c
 8022ef0:	f1bc 0f00 	cmp.w	ip, #0
 8022ef4:	d01a      	beq.n	8022f2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022ef6:	9908      	ldr	r1, [sp, #32]
 8022ef8:	440b      	add	r3, r1
 8022efa:	0859      	lsrs	r1, r3, #1
 8022efc:	f013 0f01 	tst.w	r3, #1
 8022f00:	f103 0301 	add.w	r3, r3, #1
 8022f04:	5c79      	ldrb	r1, [r7, r1]
 8022f06:	bf0c      	ite	eq
 8022f08:	f001 010f 	andeq.w	r1, r1, #15
 8022f0c:	1109      	asrne	r1, r1, #4
 8022f0e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f12:	b2c9      	uxtb	r1, r1
 8022f14:	910b      	str	r1, [sp, #44]	; 0x2c
 8022f16:	0859      	lsrs	r1, r3, #1
 8022f18:	07db      	lsls	r3, r3, #31
 8022f1a:	5c79      	ldrb	r1, [r7, r1]
 8022f1c:	bf54      	ite	pl
 8022f1e:	f001 010f 	andpl.w	r1, r1, #15
 8022f22:	1109      	asrmi	r1, r1, #4
 8022f24:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f28:	b2c9      	uxtb	r1, r1
 8022f2a:	9110      	str	r1, [sp, #64]	; 0x40
 8022f2c:	b280      	uxth	r0, r0
 8022f2e:	fa1f fc8c 	uxth.w	ip, ip
 8022f32:	fb00 f30c 	mul.w	r3, r0, ip
 8022f36:	0100      	lsls	r0, r0, #4
 8022f38:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8022f3c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8022f40:	1ac0      	subs	r0, r0, r3
 8022f42:	fa1f fc8c 	uxth.w	ip, ip
 8022f46:	b280      	uxth	r0, r0
 8022f48:	eba1 010c 	sub.w	r1, r1, ip
 8022f4c:	fa1f fa81 	uxth.w	sl, r1
 8022f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022f52:	4348      	muls	r0, r1
 8022f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022f56:	fb02 020a 	mla	r2, r2, sl, r0
 8022f5a:	fb0c 2c01 	mla	ip, ip, r1, r2
 8022f5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f60:	fb03 c302 	mla	r3, r3, r2, ip
 8022f64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022f68:	2bff      	cmp	r3, #255	; 0xff
 8022f6a:	d12b      	bne.n	8022fc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8022f6c:	4b13      	ldr	r3, [pc, #76]	; (8022fbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022f6e:	681a      	ldr	r2, [r3, #0]
 8022f70:	4b13      	ldr	r3, [pc, #76]	; (8022fc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022f72:	0951      	lsrs	r1, r2, #5
 8022f74:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022f78:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022f7c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f80:	430b      	orrs	r3, r1
 8022f82:	4313      	orrs	r3, r2
 8022f84:	f8ae 3000 	strh.w	r3, [lr]
 8022f88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022f8a:	f10e 0e02 	add.w	lr, lr, #2
 8022f8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f92:	441c      	add	r4, r3
 8022f94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022f96:	441e      	add	r6, r3
 8022f98:	e6cc      	b.n	8022d34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022f9a:	f1bc 0f00 	cmp.w	ip, #0
 8022f9e:	d0c5      	beq.n	8022f2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022fa0:	9908      	ldr	r1, [sp, #32]
 8022fa2:	440b      	add	r3, r1
 8022fa4:	0859      	lsrs	r1, r3, #1
 8022fa6:	07db      	lsls	r3, r3, #31
 8022fa8:	5c79      	ldrb	r1, [r7, r1]
 8022faa:	bf54      	ite	pl
 8022fac:	f001 010f 	andpl.w	r1, r1, #15
 8022fb0:	1109      	asrmi	r1, r1, #4
 8022fb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fb6:	b2c9      	uxtb	r1, r1
 8022fb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8022fba:	e7b7      	b.n	8022f2c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022fbc:	2400ae7c 	.word	0x2400ae7c
 8022fc0:	fffff800 	.word	0xfffff800
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d0df      	beq.n	8022f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8022fc8:	4a21      	ldr	r2, [pc, #132]	; (8023050 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8022fca:	fa1f fa83 	uxth.w	sl, r3
 8022fce:	f8be c000 	ldrh.w	ip, [lr]
 8022fd2:	43db      	mvns	r3, r3
 8022fd4:	6810      	ldr	r0, [r2, #0]
 8022fd6:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022fda:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022fde:	b2db      	uxtb	r3, r3
 8022fe0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022fe4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022fe8:	fb12 f20a 	smulbb	r2, r2, sl
 8022fec:	b2c0      	uxtb	r0, r0
 8022fee:	fb1b fb0a 	smulbb	fp, fp, sl
 8022ff2:	fb01 2103 	mla	r1, r1, r3, r2
 8022ff6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022ffa:	fb10 f00a 	smulbb	r0, r0, sl
 8022ffe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023002:	b289      	uxth	r1, r1
 8023004:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023008:	fa5f fc8c 	uxtb.w	ip, ip
 802300c:	fb02 b203 	mla	r2, r2, r3, fp
 8023010:	fb0c 0003 	mla	r0, ip, r3, r0
 8023014:	1c4b      	adds	r3, r1, #1
 8023016:	b292      	uxth	r2, r2
 8023018:	b280      	uxth	r0, r0
 802301a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802301e:	f100 0b01 	add.w	fp, r0, #1
 8023022:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023026:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802302a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802302e:	ea4b 0101 	orr.w	r1, fp, r1
 8023032:	f102 0b01 	add.w	fp, r2, #1
 8023036:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802303a:	0952      	lsrs	r2, r2, #5
 802303c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023040:	4311      	orrs	r1, r2
 8023042:	f8ae 1000 	strh.w	r1, [lr]
 8023046:	e79f      	b.n	8022f88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8023048:	b013      	add	sp, #76	; 0x4c
 802304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802304e:	bf00      	nop
 8023050:	2400ae7c 	.word	0x2400ae7c

08023054 <CRC_Lock>:
 8023054:	4a20      	ldr	r2, [pc, #128]	; (80230d8 <CRC_Lock+0x84>)
 8023056:	b530      	push	{r4, r5, lr}
 8023058:	6813      	ldr	r3, [r2, #0]
 802305a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802305e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023062:	f023 0301 	bic.w	r3, r3, #1
 8023066:	6013      	str	r3, [r2, #0]
 8023068:	4b1c      	ldr	r3, [pc, #112]	; (80230dc <CRC_Lock+0x88>)
 802306a:	681a      	ldr	r2, [r3, #0]
 802306c:	4022      	ands	r2, r4
 802306e:	42aa      	cmp	r2, r5
 8023070:	d005      	beq.n	802307e <CRC_Lock+0x2a>
 8023072:	681b      	ldr	r3, [r3, #0]
 8023074:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023078:	4023      	ands	r3, r4
 802307a:	4293      	cmp	r3, r2
 802307c:	d124      	bne.n	80230c8 <CRC_Lock+0x74>
 802307e:	4b18      	ldr	r3, [pc, #96]	; (80230e0 <CRC_Lock+0x8c>)
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	bb0b      	cbnz	r3, 80230c8 <CRC_Lock+0x74>
 8023084:	4b17      	ldr	r3, [pc, #92]	; (80230e4 <CRC_Lock+0x90>)
 8023086:	681a      	ldr	r2, [r3, #0]
 8023088:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802308c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023090:	d00d      	beq.n	80230ae <CRC_Lock+0x5a>
 8023092:	681a      	ldr	r2, [r3, #0]
 8023094:	f240 4483 	movw	r4, #1155	; 0x483
 8023098:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802309c:	42a2      	cmp	r2, r4
 802309e:	d006      	beq.n	80230ae <CRC_Lock+0x5a>
 80230a0:	681b      	ldr	r3, [r3, #0]
 80230a2:	f240 4285 	movw	r2, #1157	; 0x485
 80230a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80230aa:	4293      	cmp	r3, r2
 80230ac:	d10c      	bne.n	80230c8 <CRC_Lock+0x74>
 80230ae:	4b0e      	ldr	r3, [pc, #56]	; (80230e8 <CRC_Lock+0x94>)
 80230b0:	2201      	movs	r2, #1
 80230b2:	601a      	str	r2, [r3, #0]
 80230b4:	681a      	ldr	r2, [r3, #0]
 80230b6:	2a00      	cmp	r2, #0
 80230b8:	d1fc      	bne.n	80230b4 <CRC_Lock+0x60>
 80230ba:	4b0c      	ldr	r3, [pc, #48]	; (80230ec <CRC_Lock+0x98>)
 80230bc:	6018      	str	r0, [r3, #0]
 80230be:	6818      	ldr	r0, [r3, #0]
 80230c0:	1a43      	subs	r3, r0, r1
 80230c2:	4258      	negs	r0, r3
 80230c4:	4158      	adcs	r0, r3
 80230c6:	bd30      	pop	{r4, r5, pc}
 80230c8:	4b09      	ldr	r3, [pc, #36]	; (80230f0 <CRC_Lock+0x9c>)
 80230ca:	2201      	movs	r2, #1
 80230cc:	601a      	str	r2, [r3, #0]
 80230ce:	681a      	ldr	r2, [r3, #0]
 80230d0:	2a00      	cmp	r2, #0
 80230d2:	d1fc      	bne.n	80230ce <CRC_Lock+0x7a>
 80230d4:	4b07      	ldr	r3, [pc, #28]	; (80230f4 <CRC_Lock+0xa0>)
 80230d6:	e7f1      	b.n	80230bc <CRC_Lock+0x68>
 80230d8:	e0002000 	.word	0xe0002000
 80230dc:	e000ed00 	.word	0xe000ed00
 80230e0:	e0042000 	.word	0xe0042000
 80230e4:	5c001000 	.word	0x5c001000
 80230e8:	58024c08 	.word	0x58024c08
 80230ec:	58024c00 	.word	0x58024c00
 80230f0:	40023008 	.word	0x40023008
 80230f4:	40023000 	.word	0x40023000

080230f8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80230f8:	6101      	str	r1, [r0, #16]
 80230fa:	4770      	bx	lr

080230fc <_ZN8touchgfx8Gestures4tickEv>:
 80230fc:	7b83      	ldrb	r3, [r0, #14]
 80230fe:	b14b      	cbz	r3, 8023114 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023100:	8903      	ldrh	r3, [r0, #8]
 8023102:	3301      	adds	r3, #1
 8023104:	b29b      	uxth	r3, r3
 8023106:	2b07      	cmp	r3, #7
 8023108:	8103      	strh	r3, [r0, #8]
 802310a:	bf81      	itttt	hi
 802310c:	2300      	movhi	r3, #0
 802310e:	8143      	strhhi	r3, [r0, #10]
 8023110:	8183      	strhhi	r3, [r0, #12]
 8023112:	7383      	strbhi	r3, [r0, #14]
 8023114:	4770      	bx	lr
	...

08023118 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023118:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802311c:	4698      	mov	r8, r3
 802311e:	8883      	ldrh	r3, [r0, #4]
 8023120:	4604      	mov	r4, r0
 8023122:	4617      	mov	r7, r2
 8023124:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023128:	eba8 0303 	sub.w	r3, r8, r3
 802312c:	4a19      	ldr	r2, [pc, #100]	; (8023194 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802312e:	460e      	mov	r6, r1
 8023130:	b21b      	sxth	r3, r3
 8023132:	88c1      	ldrh	r1, [r0, #6]
 8023134:	9200      	str	r2, [sp, #0]
 8023136:	2000      	movs	r0, #0
 8023138:	2b00      	cmp	r3, #0
 802313a:	8aa2      	ldrh	r2, [r4, #20]
 802313c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023140:	bfb8      	it	lt
 8023142:	425b      	neglt	r3, r3
 8023144:	f88d 0004 	strb.w	r0, [sp, #4]
 8023148:	f8ad 1008 	strh.w	r1, [sp, #8]
 802314c:	b21b      	sxth	r3, r3
 802314e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023152:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023156:	4293      	cmp	r3, r2
 8023158:	dc07      	bgt.n	802316a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802315a:	1a69      	subs	r1, r5, r1
 802315c:	b209      	sxth	r1, r1
 802315e:	2900      	cmp	r1, #0
 8023160:	bfb8      	it	lt
 8023162:	4249      	neglt	r1, r1
 8023164:	b209      	sxth	r1, r1
 8023166:	428a      	cmp	r2, r1
 8023168:	da10      	bge.n	802318c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802316a:	6920      	ldr	r0, [r4, #16]
 802316c:	4669      	mov	r1, sp
 802316e:	eba8 0606 	sub.w	r6, r8, r6
 8023172:	1bef      	subs	r7, r5, r7
 8023174:	6803      	ldr	r3, [r0, #0]
 8023176:	685b      	ldr	r3, [r3, #4]
 8023178:	4798      	blx	r3
 802317a:	2300      	movs	r3, #0
 802317c:	2001      	movs	r0, #1
 802317e:	8166      	strh	r6, [r4, #10]
 8023180:	8123      	strh	r3, [r4, #8]
 8023182:	81a7      	strh	r7, [r4, #12]
 8023184:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023188:	80e5      	strh	r5, [r4, #6]
 802318a:	73a0      	strb	r0, [r4, #14]
 802318c:	b004      	add	sp, #16
 802318e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023192:	bf00      	nop
 8023194:	08025f6c 	.word	0x08025f6c

08023198 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023198:	b5f0      	push	{r4, r5, r6, r7, lr}
 802319a:	461e      	mov	r6, r3
 802319c:	1e4b      	subs	r3, r1, #1
 802319e:	b085      	sub	sp, #20
 80231a0:	4604      	mov	r4, r0
 80231a2:	2b01      	cmp	r3, #1
 80231a4:	460d      	mov	r5, r1
 80231a6:	4617      	mov	r7, r2
 80231a8:	d84b      	bhi.n	8023242 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80231aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80231ae:	1cd3      	adds	r3, r2, #3
 80231b0:	b29b      	uxth	r3, r3
 80231b2:	2b06      	cmp	r3, #6
 80231b4:	d916      	bls.n	80231e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80231b6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8023258 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80231ba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80231be:	f8cd c004 	str.w	ip, [sp, #4]
 80231c2:	f04f 0c00 	mov.w	ip, #0
 80231c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80231ca:	6900      	ldr	r0, [r0, #16]
 80231cc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80231d0:	a901      	add	r1, sp, #4
 80231d2:	f88d c008 	strb.w	ip, [sp, #8]
 80231d6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80231da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80231de:	6803      	ldr	r3, [r0, #0]
 80231e0:	689b      	ldr	r3, [r3, #8]
 80231e2:	4798      	blx	r3
 80231e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80231e8:	1cd3      	adds	r3, r2, #3
 80231ea:	b29b      	uxth	r3, r3
 80231ec:	2b06      	cmp	r3, #6
 80231ee:	d916      	bls.n	802321e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80231f0:	f8df c064 	ldr.w	ip, [pc, #100]	; 8023258 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80231f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80231f8:	f8cd c004 	str.w	ip, [sp, #4]
 80231fc:	f04f 0c01 	mov.w	ip, #1
 8023200:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023204:	6920      	ldr	r0, [r4, #16]
 8023206:	f8ad 100c 	strh.w	r1, [sp, #12]
 802320a:	a901      	add	r1, sp, #4
 802320c:	f88d c008 	strb.w	ip, [sp, #8]
 8023210:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023214:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023218:	6803      	ldr	r3, [r0, #0]
 802321a:	689b      	ldr	r3, [r3, #8]
 802321c:	4798      	blx	r3
 802321e:	4b0d      	ldr	r3, [pc, #52]	; (8023254 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023220:	a901      	add	r1, sp, #4
 8023222:	6920      	ldr	r0, [r4, #16]
 8023224:	9301      	str	r3, [sp, #4]
 8023226:	2300      	movs	r3, #0
 8023228:	f88d 5008 	strb.w	r5, [sp, #8]
 802322c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023230:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023234:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023238:	6803      	ldr	r3, [r0, #0]
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	4798      	blx	r3
 802323e:	b005      	add	sp, #20
 8023240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023242:	2900      	cmp	r1, #0
 8023244:	d1eb      	bne.n	802321e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023246:	80a2      	strh	r2, [r4, #4]
 8023248:	80c6      	strh	r6, [r0, #6]
 802324a:	60a1      	str	r1, [r4, #8]
 802324c:	81a1      	strh	r1, [r4, #12]
 802324e:	73a1      	strb	r1, [r4, #14]
 8023250:	e7e5      	b.n	802321e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023252:	bf00      	nop
 8023254:	08025f58 	.word	0x08025f58
 8023258:	08025f80 	.word	0x08025f80

0802325c <__aeabi_atexit>:
 802325c:	460b      	mov	r3, r1
 802325e:	4601      	mov	r1, r0
 8023260:	4618      	mov	r0, r3
 8023262:	f000 b853 	b.w	802330c <__cxa_atexit>

08023266 <_ZdlPvj>:
 8023266:	f000 b812 	b.w	802328e <_ZdlPv>

0802326a <__cxa_guard_acquire>:
 802326a:	6803      	ldr	r3, [r0, #0]
 802326c:	07db      	lsls	r3, r3, #31
 802326e:	d406      	bmi.n	802327e <__cxa_guard_acquire+0x14>
 8023270:	7843      	ldrb	r3, [r0, #1]
 8023272:	b103      	cbz	r3, 8023276 <__cxa_guard_acquire+0xc>
 8023274:	deff      	udf	#255	; 0xff
 8023276:	2301      	movs	r3, #1
 8023278:	7043      	strb	r3, [r0, #1]
 802327a:	4618      	mov	r0, r3
 802327c:	4770      	bx	lr
 802327e:	2000      	movs	r0, #0
 8023280:	4770      	bx	lr

08023282 <__cxa_guard_release>:
 8023282:	2301      	movs	r3, #1
 8023284:	6003      	str	r3, [r0, #0]
 8023286:	4770      	bx	lr

08023288 <__cxa_pure_virtual>:
 8023288:	b508      	push	{r3, lr}
 802328a:	f000 f80f 	bl	80232ac <_ZSt9terminatev>

0802328e <_ZdlPv>:
 802328e:	f000 b88f 	b.w	80233b0 <free>

08023292 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023292:	b508      	push	{r3, lr}
 8023294:	4780      	blx	r0
 8023296:	f000 f80e 	bl	80232b6 <abort>
	...

0802329c <_ZSt13get_terminatev>:
 802329c:	4b02      	ldr	r3, [pc, #8]	; (80232a8 <_ZSt13get_terminatev+0xc>)
 802329e:	6818      	ldr	r0, [r3, #0]
 80232a0:	f3bf 8f5b 	dmb	ish
 80232a4:	4770      	bx	lr
 80232a6:	bf00      	nop
 80232a8:	240000c0 	.word	0x240000c0

080232ac <_ZSt9terminatev>:
 80232ac:	b508      	push	{r3, lr}
 80232ae:	f7ff fff5 	bl	802329c <_ZSt13get_terminatev>
 80232b2:	f7ff ffee 	bl	8023292 <_ZN10__cxxabiv111__terminateEPFvvE>

080232b6 <abort>:
 80232b6:	b508      	push	{r3, lr}
 80232b8:	2006      	movs	r0, #6
 80232ba:	f000 fc9d 	bl	8023bf8 <raise>
 80232be:	2001      	movs	r0, #1
 80232c0:	f7de f93a 	bl	8001538 <_exit>

080232c4 <__assert_func>:
 80232c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80232c6:	4614      	mov	r4, r2
 80232c8:	461a      	mov	r2, r3
 80232ca:	4b09      	ldr	r3, [pc, #36]	; (80232f0 <__assert_func+0x2c>)
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	4605      	mov	r5, r0
 80232d0:	68d8      	ldr	r0, [r3, #12]
 80232d2:	b14c      	cbz	r4, 80232e8 <__assert_func+0x24>
 80232d4:	4b07      	ldr	r3, [pc, #28]	; (80232f4 <__assert_func+0x30>)
 80232d6:	9100      	str	r1, [sp, #0]
 80232d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80232dc:	4906      	ldr	r1, [pc, #24]	; (80232f8 <__assert_func+0x34>)
 80232de:	462b      	mov	r3, r5
 80232e0:	f000 f828 	bl	8023334 <fiprintf>
 80232e4:	f7ff ffe7 	bl	80232b6 <abort>
 80232e8:	4b04      	ldr	r3, [pc, #16]	; (80232fc <__assert_func+0x38>)
 80232ea:	461c      	mov	r4, r3
 80232ec:	e7f3      	b.n	80232d6 <__assert_func+0x12>
 80232ee:	bf00      	nop
 80232f0:	240000c4 	.word	0x240000c4
 80232f4:	08026248 	.word	0x08026248
 80232f8:	08026255 	.word	0x08026255
 80232fc:	08026283 	.word	0x08026283

08023300 <atexit>:
 8023300:	2300      	movs	r3, #0
 8023302:	4601      	mov	r1, r0
 8023304:	461a      	mov	r2, r3
 8023306:	4618      	mov	r0, r3
 8023308:	f000 bd52 	b.w	8023db0 <__register_exitproc>

0802330c <__cxa_atexit>:
 802330c:	b510      	push	{r4, lr}
 802330e:	4c05      	ldr	r4, [pc, #20]	; (8023324 <__cxa_atexit+0x18>)
 8023310:	4613      	mov	r3, r2
 8023312:	b12c      	cbz	r4, 8023320 <__cxa_atexit+0x14>
 8023314:	460a      	mov	r2, r1
 8023316:	4601      	mov	r1, r0
 8023318:	2002      	movs	r0, #2
 802331a:	f000 fd49 	bl	8023db0 <__register_exitproc>
 802331e:	bd10      	pop	{r4, pc}
 8023320:	4620      	mov	r0, r4
 8023322:	e7fc      	b.n	802331e <__cxa_atexit+0x12>
 8023324:	08023db1 	.word	0x08023db1

08023328 <__errno>:
 8023328:	4b01      	ldr	r3, [pc, #4]	; (8023330 <__errno+0x8>)
 802332a:	6818      	ldr	r0, [r3, #0]
 802332c:	4770      	bx	lr
 802332e:	bf00      	nop
 8023330:	240000c4 	.word	0x240000c4

08023334 <fiprintf>:
 8023334:	b40e      	push	{r1, r2, r3}
 8023336:	b503      	push	{r0, r1, lr}
 8023338:	4601      	mov	r1, r0
 802333a:	ab03      	add	r3, sp, #12
 802333c:	4805      	ldr	r0, [pc, #20]	; (8023354 <fiprintf+0x20>)
 802333e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023342:	6800      	ldr	r0, [r0, #0]
 8023344:	9301      	str	r3, [sp, #4]
 8023346:	f000 f95b 	bl	8023600 <_vfiprintf_r>
 802334a:	b002      	add	sp, #8
 802334c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023350:	b003      	add	sp, #12
 8023352:	4770      	bx	lr
 8023354:	240000c4 	.word	0x240000c4

08023358 <__libc_init_array>:
 8023358:	b570      	push	{r4, r5, r6, lr}
 802335a:	4d0d      	ldr	r5, [pc, #52]	; (8023390 <__libc_init_array+0x38>)
 802335c:	4c0d      	ldr	r4, [pc, #52]	; (8023394 <__libc_init_array+0x3c>)
 802335e:	1b64      	subs	r4, r4, r5
 8023360:	10a4      	asrs	r4, r4, #2
 8023362:	2600      	movs	r6, #0
 8023364:	42a6      	cmp	r6, r4
 8023366:	d109      	bne.n	802337c <__libc_init_array+0x24>
 8023368:	4d0b      	ldr	r5, [pc, #44]	; (8023398 <__libc_init_array+0x40>)
 802336a:	4c0c      	ldr	r4, [pc, #48]	; (802339c <__libc_init_array+0x44>)
 802336c:	f001 f85a 	bl	8024424 <_init>
 8023370:	1b64      	subs	r4, r4, r5
 8023372:	10a4      	asrs	r4, r4, #2
 8023374:	2600      	movs	r6, #0
 8023376:	42a6      	cmp	r6, r4
 8023378:	d105      	bne.n	8023386 <__libc_init_array+0x2e>
 802337a:	bd70      	pop	{r4, r5, r6, pc}
 802337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023380:	4798      	blx	r3
 8023382:	3601      	adds	r6, #1
 8023384:	e7ee      	b.n	8023364 <__libc_init_array+0xc>
 8023386:	f855 3b04 	ldr.w	r3, [r5], #4
 802338a:	4798      	blx	r3
 802338c:	3601      	adds	r6, #1
 802338e:	e7f2      	b.n	8023376 <__libc_init_array+0x1e>
 8023390:	08026338 	.word	0x08026338
 8023394:	08026338 	.word	0x08026338
 8023398:	08026338 	.word	0x08026338
 802339c:	0802634c 	.word	0x0802634c

080233a0 <malloc>:
 80233a0:	4b02      	ldr	r3, [pc, #8]	; (80233ac <malloc+0xc>)
 80233a2:	4601      	mov	r1, r0
 80233a4:	6818      	ldr	r0, [r3, #0]
 80233a6:	f000 b88d 	b.w	80234c4 <_malloc_r>
 80233aa:	bf00      	nop
 80233ac:	240000c4 	.word	0x240000c4

080233b0 <free>:
 80233b0:	4b02      	ldr	r3, [pc, #8]	; (80233bc <free+0xc>)
 80233b2:	4601      	mov	r1, r0
 80233b4:	6818      	ldr	r0, [r3, #0]
 80233b6:	f000 b819 	b.w	80233ec <_free_r>
 80233ba:	bf00      	nop
 80233bc:	240000c4 	.word	0x240000c4

080233c0 <memcpy>:
 80233c0:	440a      	add	r2, r1
 80233c2:	4291      	cmp	r1, r2
 80233c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80233c8:	d100      	bne.n	80233cc <memcpy+0xc>
 80233ca:	4770      	bx	lr
 80233cc:	b510      	push	{r4, lr}
 80233ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80233d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80233d6:	4291      	cmp	r1, r2
 80233d8:	d1f9      	bne.n	80233ce <memcpy+0xe>
 80233da:	bd10      	pop	{r4, pc}

080233dc <memset>:
 80233dc:	4402      	add	r2, r0
 80233de:	4603      	mov	r3, r0
 80233e0:	4293      	cmp	r3, r2
 80233e2:	d100      	bne.n	80233e6 <memset+0xa>
 80233e4:	4770      	bx	lr
 80233e6:	f803 1b01 	strb.w	r1, [r3], #1
 80233ea:	e7f9      	b.n	80233e0 <memset+0x4>

080233ec <_free_r>:
 80233ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80233ee:	2900      	cmp	r1, #0
 80233f0:	d044      	beq.n	802347c <_free_r+0x90>
 80233f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80233f6:	9001      	str	r0, [sp, #4]
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	f1a1 0404 	sub.w	r4, r1, #4
 80233fe:	bfb8      	it	lt
 8023400:	18e4      	addlt	r4, r4, r3
 8023402:	f000 ff57 	bl	80242b4 <__malloc_lock>
 8023406:	4a1e      	ldr	r2, [pc, #120]	; (8023480 <_free_r+0x94>)
 8023408:	9801      	ldr	r0, [sp, #4]
 802340a:	6813      	ldr	r3, [r2, #0]
 802340c:	b933      	cbnz	r3, 802341c <_free_r+0x30>
 802340e:	6063      	str	r3, [r4, #4]
 8023410:	6014      	str	r4, [r2, #0]
 8023412:	b003      	add	sp, #12
 8023414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023418:	f000 bf52 	b.w	80242c0 <__malloc_unlock>
 802341c:	42a3      	cmp	r3, r4
 802341e:	d908      	bls.n	8023432 <_free_r+0x46>
 8023420:	6825      	ldr	r5, [r4, #0]
 8023422:	1961      	adds	r1, r4, r5
 8023424:	428b      	cmp	r3, r1
 8023426:	bf01      	itttt	eq
 8023428:	6819      	ldreq	r1, [r3, #0]
 802342a:	685b      	ldreq	r3, [r3, #4]
 802342c:	1949      	addeq	r1, r1, r5
 802342e:	6021      	streq	r1, [r4, #0]
 8023430:	e7ed      	b.n	802340e <_free_r+0x22>
 8023432:	461a      	mov	r2, r3
 8023434:	685b      	ldr	r3, [r3, #4]
 8023436:	b10b      	cbz	r3, 802343c <_free_r+0x50>
 8023438:	42a3      	cmp	r3, r4
 802343a:	d9fa      	bls.n	8023432 <_free_r+0x46>
 802343c:	6811      	ldr	r1, [r2, #0]
 802343e:	1855      	adds	r5, r2, r1
 8023440:	42a5      	cmp	r5, r4
 8023442:	d10b      	bne.n	802345c <_free_r+0x70>
 8023444:	6824      	ldr	r4, [r4, #0]
 8023446:	4421      	add	r1, r4
 8023448:	1854      	adds	r4, r2, r1
 802344a:	42a3      	cmp	r3, r4
 802344c:	6011      	str	r1, [r2, #0]
 802344e:	d1e0      	bne.n	8023412 <_free_r+0x26>
 8023450:	681c      	ldr	r4, [r3, #0]
 8023452:	685b      	ldr	r3, [r3, #4]
 8023454:	6053      	str	r3, [r2, #4]
 8023456:	4421      	add	r1, r4
 8023458:	6011      	str	r1, [r2, #0]
 802345a:	e7da      	b.n	8023412 <_free_r+0x26>
 802345c:	d902      	bls.n	8023464 <_free_r+0x78>
 802345e:	230c      	movs	r3, #12
 8023460:	6003      	str	r3, [r0, #0]
 8023462:	e7d6      	b.n	8023412 <_free_r+0x26>
 8023464:	6825      	ldr	r5, [r4, #0]
 8023466:	1961      	adds	r1, r4, r5
 8023468:	428b      	cmp	r3, r1
 802346a:	bf04      	itt	eq
 802346c:	6819      	ldreq	r1, [r3, #0]
 802346e:	685b      	ldreq	r3, [r3, #4]
 8023470:	6063      	str	r3, [r4, #4]
 8023472:	bf04      	itt	eq
 8023474:	1949      	addeq	r1, r1, r5
 8023476:	6021      	streq	r1, [r4, #0]
 8023478:	6054      	str	r4, [r2, #4]
 802347a:	e7ca      	b.n	8023412 <_free_r+0x26>
 802347c:	b003      	add	sp, #12
 802347e:	bd30      	pop	{r4, r5, pc}
 8023480:	2400af70 	.word	0x2400af70

08023484 <sbrk_aligned>:
 8023484:	b570      	push	{r4, r5, r6, lr}
 8023486:	4e0e      	ldr	r6, [pc, #56]	; (80234c0 <sbrk_aligned+0x3c>)
 8023488:	460c      	mov	r4, r1
 802348a:	6831      	ldr	r1, [r6, #0]
 802348c:	4605      	mov	r5, r0
 802348e:	b911      	cbnz	r1, 8023496 <sbrk_aligned+0x12>
 8023490:	f000 fb7a 	bl	8023b88 <_sbrk_r>
 8023494:	6030      	str	r0, [r6, #0]
 8023496:	4621      	mov	r1, r4
 8023498:	4628      	mov	r0, r5
 802349a:	f000 fb75 	bl	8023b88 <_sbrk_r>
 802349e:	1c43      	adds	r3, r0, #1
 80234a0:	d00a      	beq.n	80234b8 <sbrk_aligned+0x34>
 80234a2:	1cc4      	adds	r4, r0, #3
 80234a4:	f024 0403 	bic.w	r4, r4, #3
 80234a8:	42a0      	cmp	r0, r4
 80234aa:	d007      	beq.n	80234bc <sbrk_aligned+0x38>
 80234ac:	1a21      	subs	r1, r4, r0
 80234ae:	4628      	mov	r0, r5
 80234b0:	f000 fb6a 	bl	8023b88 <_sbrk_r>
 80234b4:	3001      	adds	r0, #1
 80234b6:	d101      	bne.n	80234bc <sbrk_aligned+0x38>
 80234b8:	f04f 34ff 	mov.w	r4, #4294967295
 80234bc:	4620      	mov	r0, r4
 80234be:	bd70      	pop	{r4, r5, r6, pc}
 80234c0:	2400af74 	.word	0x2400af74

080234c4 <_malloc_r>:
 80234c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80234c8:	1ccd      	adds	r5, r1, #3
 80234ca:	f025 0503 	bic.w	r5, r5, #3
 80234ce:	3508      	adds	r5, #8
 80234d0:	2d0c      	cmp	r5, #12
 80234d2:	bf38      	it	cc
 80234d4:	250c      	movcc	r5, #12
 80234d6:	2d00      	cmp	r5, #0
 80234d8:	4607      	mov	r7, r0
 80234da:	db01      	blt.n	80234e0 <_malloc_r+0x1c>
 80234dc:	42a9      	cmp	r1, r5
 80234de:	d905      	bls.n	80234ec <_malloc_r+0x28>
 80234e0:	230c      	movs	r3, #12
 80234e2:	603b      	str	r3, [r7, #0]
 80234e4:	2600      	movs	r6, #0
 80234e6:	4630      	mov	r0, r6
 80234e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234ec:	4e2e      	ldr	r6, [pc, #184]	; (80235a8 <_malloc_r+0xe4>)
 80234ee:	f000 fee1 	bl	80242b4 <__malloc_lock>
 80234f2:	6833      	ldr	r3, [r6, #0]
 80234f4:	461c      	mov	r4, r3
 80234f6:	bb34      	cbnz	r4, 8023546 <_malloc_r+0x82>
 80234f8:	4629      	mov	r1, r5
 80234fa:	4638      	mov	r0, r7
 80234fc:	f7ff ffc2 	bl	8023484 <sbrk_aligned>
 8023500:	1c43      	adds	r3, r0, #1
 8023502:	4604      	mov	r4, r0
 8023504:	d14d      	bne.n	80235a2 <_malloc_r+0xde>
 8023506:	6834      	ldr	r4, [r6, #0]
 8023508:	4626      	mov	r6, r4
 802350a:	2e00      	cmp	r6, #0
 802350c:	d140      	bne.n	8023590 <_malloc_r+0xcc>
 802350e:	6823      	ldr	r3, [r4, #0]
 8023510:	4631      	mov	r1, r6
 8023512:	4638      	mov	r0, r7
 8023514:	eb04 0803 	add.w	r8, r4, r3
 8023518:	f000 fb36 	bl	8023b88 <_sbrk_r>
 802351c:	4580      	cmp	r8, r0
 802351e:	d13a      	bne.n	8023596 <_malloc_r+0xd2>
 8023520:	6821      	ldr	r1, [r4, #0]
 8023522:	3503      	adds	r5, #3
 8023524:	1a6d      	subs	r5, r5, r1
 8023526:	f025 0503 	bic.w	r5, r5, #3
 802352a:	3508      	adds	r5, #8
 802352c:	2d0c      	cmp	r5, #12
 802352e:	bf38      	it	cc
 8023530:	250c      	movcc	r5, #12
 8023532:	4629      	mov	r1, r5
 8023534:	4638      	mov	r0, r7
 8023536:	f7ff ffa5 	bl	8023484 <sbrk_aligned>
 802353a:	3001      	adds	r0, #1
 802353c:	d02b      	beq.n	8023596 <_malloc_r+0xd2>
 802353e:	6823      	ldr	r3, [r4, #0]
 8023540:	442b      	add	r3, r5
 8023542:	6023      	str	r3, [r4, #0]
 8023544:	e00e      	b.n	8023564 <_malloc_r+0xa0>
 8023546:	6822      	ldr	r2, [r4, #0]
 8023548:	1b52      	subs	r2, r2, r5
 802354a:	d41e      	bmi.n	802358a <_malloc_r+0xc6>
 802354c:	2a0b      	cmp	r2, #11
 802354e:	d916      	bls.n	802357e <_malloc_r+0xba>
 8023550:	1961      	adds	r1, r4, r5
 8023552:	42a3      	cmp	r3, r4
 8023554:	6025      	str	r5, [r4, #0]
 8023556:	bf18      	it	ne
 8023558:	6059      	strne	r1, [r3, #4]
 802355a:	6863      	ldr	r3, [r4, #4]
 802355c:	bf08      	it	eq
 802355e:	6031      	streq	r1, [r6, #0]
 8023560:	5162      	str	r2, [r4, r5]
 8023562:	604b      	str	r3, [r1, #4]
 8023564:	4638      	mov	r0, r7
 8023566:	f104 060b 	add.w	r6, r4, #11
 802356a:	f000 fea9 	bl	80242c0 <__malloc_unlock>
 802356e:	f026 0607 	bic.w	r6, r6, #7
 8023572:	1d23      	adds	r3, r4, #4
 8023574:	1af2      	subs	r2, r6, r3
 8023576:	d0b6      	beq.n	80234e6 <_malloc_r+0x22>
 8023578:	1b9b      	subs	r3, r3, r6
 802357a:	50a3      	str	r3, [r4, r2]
 802357c:	e7b3      	b.n	80234e6 <_malloc_r+0x22>
 802357e:	6862      	ldr	r2, [r4, #4]
 8023580:	42a3      	cmp	r3, r4
 8023582:	bf0c      	ite	eq
 8023584:	6032      	streq	r2, [r6, #0]
 8023586:	605a      	strne	r2, [r3, #4]
 8023588:	e7ec      	b.n	8023564 <_malloc_r+0xa0>
 802358a:	4623      	mov	r3, r4
 802358c:	6864      	ldr	r4, [r4, #4]
 802358e:	e7b2      	b.n	80234f6 <_malloc_r+0x32>
 8023590:	4634      	mov	r4, r6
 8023592:	6876      	ldr	r6, [r6, #4]
 8023594:	e7b9      	b.n	802350a <_malloc_r+0x46>
 8023596:	230c      	movs	r3, #12
 8023598:	603b      	str	r3, [r7, #0]
 802359a:	4638      	mov	r0, r7
 802359c:	f000 fe90 	bl	80242c0 <__malloc_unlock>
 80235a0:	e7a1      	b.n	80234e6 <_malloc_r+0x22>
 80235a2:	6025      	str	r5, [r4, #0]
 80235a4:	e7de      	b.n	8023564 <_malloc_r+0xa0>
 80235a6:	bf00      	nop
 80235a8:	2400af70 	.word	0x2400af70

080235ac <__sfputc_r>:
 80235ac:	6893      	ldr	r3, [r2, #8]
 80235ae:	3b01      	subs	r3, #1
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	b410      	push	{r4}
 80235b4:	6093      	str	r3, [r2, #8]
 80235b6:	da08      	bge.n	80235ca <__sfputc_r+0x1e>
 80235b8:	6994      	ldr	r4, [r2, #24]
 80235ba:	42a3      	cmp	r3, r4
 80235bc:	db01      	blt.n	80235c2 <__sfputc_r+0x16>
 80235be:	290a      	cmp	r1, #10
 80235c0:	d103      	bne.n	80235ca <__sfputc_r+0x1e>
 80235c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80235c6:	f000 bb33 	b.w	8023c30 <__swbuf_r>
 80235ca:	6813      	ldr	r3, [r2, #0]
 80235cc:	1c58      	adds	r0, r3, #1
 80235ce:	6010      	str	r0, [r2, #0]
 80235d0:	7019      	strb	r1, [r3, #0]
 80235d2:	4608      	mov	r0, r1
 80235d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80235d8:	4770      	bx	lr

080235da <__sfputs_r>:
 80235da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80235dc:	4606      	mov	r6, r0
 80235de:	460f      	mov	r7, r1
 80235e0:	4614      	mov	r4, r2
 80235e2:	18d5      	adds	r5, r2, r3
 80235e4:	42ac      	cmp	r4, r5
 80235e6:	d101      	bne.n	80235ec <__sfputs_r+0x12>
 80235e8:	2000      	movs	r0, #0
 80235ea:	e007      	b.n	80235fc <__sfputs_r+0x22>
 80235ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235f0:	463a      	mov	r2, r7
 80235f2:	4630      	mov	r0, r6
 80235f4:	f7ff ffda 	bl	80235ac <__sfputc_r>
 80235f8:	1c43      	adds	r3, r0, #1
 80235fa:	d1f3      	bne.n	80235e4 <__sfputs_r+0xa>
 80235fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023600 <_vfiprintf_r>:
 8023600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023604:	460d      	mov	r5, r1
 8023606:	b09d      	sub	sp, #116	; 0x74
 8023608:	4614      	mov	r4, r2
 802360a:	4698      	mov	r8, r3
 802360c:	4606      	mov	r6, r0
 802360e:	b118      	cbz	r0, 8023618 <_vfiprintf_r+0x18>
 8023610:	6983      	ldr	r3, [r0, #24]
 8023612:	b90b      	cbnz	r3, 8023618 <_vfiprintf_r+0x18>
 8023614:	f000 fd48 	bl	80240a8 <__sinit>
 8023618:	4b89      	ldr	r3, [pc, #548]	; (8023840 <_vfiprintf_r+0x240>)
 802361a:	429d      	cmp	r5, r3
 802361c:	d11b      	bne.n	8023656 <_vfiprintf_r+0x56>
 802361e:	6875      	ldr	r5, [r6, #4]
 8023620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023622:	07d9      	lsls	r1, r3, #31
 8023624:	d405      	bmi.n	8023632 <_vfiprintf_r+0x32>
 8023626:	89ab      	ldrh	r3, [r5, #12]
 8023628:	059a      	lsls	r2, r3, #22
 802362a:	d402      	bmi.n	8023632 <_vfiprintf_r+0x32>
 802362c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802362e:	f000 fdd9 	bl	80241e4 <__retarget_lock_acquire_recursive>
 8023632:	89ab      	ldrh	r3, [r5, #12]
 8023634:	071b      	lsls	r3, r3, #28
 8023636:	d501      	bpl.n	802363c <_vfiprintf_r+0x3c>
 8023638:	692b      	ldr	r3, [r5, #16]
 802363a:	b9eb      	cbnz	r3, 8023678 <_vfiprintf_r+0x78>
 802363c:	4629      	mov	r1, r5
 802363e:	4630      	mov	r0, r6
 8023640:	f000 fb48 	bl	8023cd4 <__swsetup_r>
 8023644:	b1c0      	cbz	r0, 8023678 <_vfiprintf_r+0x78>
 8023646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023648:	07dc      	lsls	r4, r3, #31
 802364a:	d50e      	bpl.n	802366a <_vfiprintf_r+0x6a>
 802364c:	f04f 30ff 	mov.w	r0, #4294967295
 8023650:	b01d      	add	sp, #116	; 0x74
 8023652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023656:	4b7b      	ldr	r3, [pc, #492]	; (8023844 <_vfiprintf_r+0x244>)
 8023658:	429d      	cmp	r5, r3
 802365a:	d101      	bne.n	8023660 <_vfiprintf_r+0x60>
 802365c:	68b5      	ldr	r5, [r6, #8]
 802365e:	e7df      	b.n	8023620 <_vfiprintf_r+0x20>
 8023660:	4b79      	ldr	r3, [pc, #484]	; (8023848 <_vfiprintf_r+0x248>)
 8023662:	429d      	cmp	r5, r3
 8023664:	bf08      	it	eq
 8023666:	68f5      	ldreq	r5, [r6, #12]
 8023668:	e7da      	b.n	8023620 <_vfiprintf_r+0x20>
 802366a:	89ab      	ldrh	r3, [r5, #12]
 802366c:	0598      	lsls	r0, r3, #22
 802366e:	d4ed      	bmi.n	802364c <_vfiprintf_r+0x4c>
 8023670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023672:	f000 fdb9 	bl	80241e8 <__retarget_lock_release_recursive>
 8023676:	e7e9      	b.n	802364c <_vfiprintf_r+0x4c>
 8023678:	2300      	movs	r3, #0
 802367a:	9309      	str	r3, [sp, #36]	; 0x24
 802367c:	2320      	movs	r3, #32
 802367e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023682:	f8cd 800c 	str.w	r8, [sp, #12]
 8023686:	2330      	movs	r3, #48	; 0x30
 8023688:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802384c <_vfiprintf_r+0x24c>
 802368c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023690:	f04f 0901 	mov.w	r9, #1
 8023694:	4623      	mov	r3, r4
 8023696:	469a      	mov	sl, r3
 8023698:	f813 2b01 	ldrb.w	r2, [r3], #1
 802369c:	b10a      	cbz	r2, 80236a2 <_vfiprintf_r+0xa2>
 802369e:	2a25      	cmp	r2, #37	; 0x25
 80236a0:	d1f9      	bne.n	8023696 <_vfiprintf_r+0x96>
 80236a2:	ebba 0b04 	subs.w	fp, sl, r4
 80236a6:	d00b      	beq.n	80236c0 <_vfiprintf_r+0xc0>
 80236a8:	465b      	mov	r3, fp
 80236aa:	4622      	mov	r2, r4
 80236ac:	4629      	mov	r1, r5
 80236ae:	4630      	mov	r0, r6
 80236b0:	f7ff ff93 	bl	80235da <__sfputs_r>
 80236b4:	3001      	adds	r0, #1
 80236b6:	f000 80aa 	beq.w	802380e <_vfiprintf_r+0x20e>
 80236ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80236bc:	445a      	add	r2, fp
 80236be:	9209      	str	r2, [sp, #36]	; 0x24
 80236c0:	f89a 3000 	ldrb.w	r3, [sl]
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	f000 80a2 	beq.w	802380e <_vfiprintf_r+0x20e>
 80236ca:	2300      	movs	r3, #0
 80236cc:	f04f 32ff 	mov.w	r2, #4294967295
 80236d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80236d4:	f10a 0a01 	add.w	sl, sl, #1
 80236d8:	9304      	str	r3, [sp, #16]
 80236da:	9307      	str	r3, [sp, #28]
 80236dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80236e0:	931a      	str	r3, [sp, #104]	; 0x68
 80236e2:	4654      	mov	r4, sl
 80236e4:	2205      	movs	r2, #5
 80236e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236ea:	4858      	ldr	r0, [pc, #352]	; (802384c <_vfiprintf_r+0x24c>)
 80236ec:	f7dc fdf8 	bl	80002e0 <memchr>
 80236f0:	9a04      	ldr	r2, [sp, #16]
 80236f2:	b9d8      	cbnz	r0, 802372c <_vfiprintf_r+0x12c>
 80236f4:	06d1      	lsls	r1, r2, #27
 80236f6:	bf44      	itt	mi
 80236f8:	2320      	movmi	r3, #32
 80236fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80236fe:	0713      	lsls	r3, r2, #28
 8023700:	bf44      	itt	mi
 8023702:	232b      	movmi	r3, #43	; 0x2b
 8023704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023708:	f89a 3000 	ldrb.w	r3, [sl]
 802370c:	2b2a      	cmp	r3, #42	; 0x2a
 802370e:	d015      	beq.n	802373c <_vfiprintf_r+0x13c>
 8023710:	9a07      	ldr	r2, [sp, #28]
 8023712:	4654      	mov	r4, sl
 8023714:	2000      	movs	r0, #0
 8023716:	f04f 0c0a 	mov.w	ip, #10
 802371a:	4621      	mov	r1, r4
 802371c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023720:	3b30      	subs	r3, #48	; 0x30
 8023722:	2b09      	cmp	r3, #9
 8023724:	d94e      	bls.n	80237c4 <_vfiprintf_r+0x1c4>
 8023726:	b1b0      	cbz	r0, 8023756 <_vfiprintf_r+0x156>
 8023728:	9207      	str	r2, [sp, #28]
 802372a:	e014      	b.n	8023756 <_vfiprintf_r+0x156>
 802372c:	eba0 0308 	sub.w	r3, r0, r8
 8023730:	fa09 f303 	lsl.w	r3, r9, r3
 8023734:	4313      	orrs	r3, r2
 8023736:	9304      	str	r3, [sp, #16]
 8023738:	46a2      	mov	sl, r4
 802373a:	e7d2      	b.n	80236e2 <_vfiprintf_r+0xe2>
 802373c:	9b03      	ldr	r3, [sp, #12]
 802373e:	1d19      	adds	r1, r3, #4
 8023740:	681b      	ldr	r3, [r3, #0]
 8023742:	9103      	str	r1, [sp, #12]
 8023744:	2b00      	cmp	r3, #0
 8023746:	bfbb      	ittet	lt
 8023748:	425b      	neglt	r3, r3
 802374a:	f042 0202 	orrlt.w	r2, r2, #2
 802374e:	9307      	strge	r3, [sp, #28]
 8023750:	9307      	strlt	r3, [sp, #28]
 8023752:	bfb8      	it	lt
 8023754:	9204      	strlt	r2, [sp, #16]
 8023756:	7823      	ldrb	r3, [r4, #0]
 8023758:	2b2e      	cmp	r3, #46	; 0x2e
 802375a:	d10c      	bne.n	8023776 <_vfiprintf_r+0x176>
 802375c:	7863      	ldrb	r3, [r4, #1]
 802375e:	2b2a      	cmp	r3, #42	; 0x2a
 8023760:	d135      	bne.n	80237ce <_vfiprintf_r+0x1ce>
 8023762:	9b03      	ldr	r3, [sp, #12]
 8023764:	1d1a      	adds	r2, r3, #4
 8023766:	681b      	ldr	r3, [r3, #0]
 8023768:	9203      	str	r2, [sp, #12]
 802376a:	2b00      	cmp	r3, #0
 802376c:	bfb8      	it	lt
 802376e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023772:	3402      	adds	r4, #2
 8023774:	9305      	str	r3, [sp, #20]
 8023776:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802385c <_vfiprintf_r+0x25c>
 802377a:	7821      	ldrb	r1, [r4, #0]
 802377c:	2203      	movs	r2, #3
 802377e:	4650      	mov	r0, sl
 8023780:	f7dc fdae 	bl	80002e0 <memchr>
 8023784:	b140      	cbz	r0, 8023798 <_vfiprintf_r+0x198>
 8023786:	2340      	movs	r3, #64	; 0x40
 8023788:	eba0 000a 	sub.w	r0, r0, sl
 802378c:	fa03 f000 	lsl.w	r0, r3, r0
 8023790:	9b04      	ldr	r3, [sp, #16]
 8023792:	4303      	orrs	r3, r0
 8023794:	3401      	adds	r4, #1
 8023796:	9304      	str	r3, [sp, #16]
 8023798:	f814 1b01 	ldrb.w	r1, [r4], #1
 802379c:	482c      	ldr	r0, [pc, #176]	; (8023850 <_vfiprintf_r+0x250>)
 802379e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80237a2:	2206      	movs	r2, #6
 80237a4:	f7dc fd9c 	bl	80002e0 <memchr>
 80237a8:	2800      	cmp	r0, #0
 80237aa:	d03f      	beq.n	802382c <_vfiprintf_r+0x22c>
 80237ac:	4b29      	ldr	r3, [pc, #164]	; (8023854 <_vfiprintf_r+0x254>)
 80237ae:	bb1b      	cbnz	r3, 80237f8 <_vfiprintf_r+0x1f8>
 80237b0:	9b03      	ldr	r3, [sp, #12]
 80237b2:	3307      	adds	r3, #7
 80237b4:	f023 0307 	bic.w	r3, r3, #7
 80237b8:	3308      	adds	r3, #8
 80237ba:	9303      	str	r3, [sp, #12]
 80237bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80237be:	443b      	add	r3, r7
 80237c0:	9309      	str	r3, [sp, #36]	; 0x24
 80237c2:	e767      	b.n	8023694 <_vfiprintf_r+0x94>
 80237c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80237c8:	460c      	mov	r4, r1
 80237ca:	2001      	movs	r0, #1
 80237cc:	e7a5      	b.n	802371a <_vfiprintf_r+0x11a>
 80237ce:	2300      	movs	r3, #0
 80237d0:	3401      	adds	r4, #1
 80237d2:	9305      	str	r3, [sp, #20]
 80237d4:	4619      	mov	r1, r3
 80237d6:	f04f 0c0a 	mov.w	ip, #10
 80237da:	4620      	mov	r0, r4
 80237dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80237e0:	3a30      	subs	r2, #48	; 0x30
 80237e2:	2a09      	cmp	r2, #9
 80237e4:	d903      	bls.n	80237ee <_vfiprintf_r+0x1ee>
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	d0c5      	beq.n	8023776 <_vfiprintf_r+0x176>
 80237ea:	9105      	str	r1, [sp, #20]
 80237ec:	e7c3      	b.n	8023776 <_vfiprintf_r+0x176>
 80237ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80237f2:	4604      	mov	r4, r0
 80237f4:	2301      	movs	r3, #1
 80237f6:	e7f0      	b.n	80237da <_vfiprintf_r+0x1da>
 80237f8:	ab03      	add	r3, sp, #12
 80237fa:	9300      	str	r3, [sp, #0]
 80237fc:	462a      	mov	r2, r5
 80237fe:	4b16      	ldr	r3, [pc, #88]	; (8023858 <_vfiprintf_r+0x258>)
 8023800:	a904      	add	r1, sp, #16
 8023802:	4630      	mov	r0, r6
 8023804:	f3af 8000 	nop.w
 8023808:	4607      	mov	r7, r0
 802380a:	1c78      	adds	r0, r7, #1
 802380c:	d1d6      	bne.n	80237bc <_vfiprintf_r+0x1bc>
 802380e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023810:	07d9      	lsls	r1, r3, #31
 8023812:	d405      	bmi.n	8023820 <_vfiprintf_r+0x220>
 8023814:	89ab      	ldrh	r3, [r5, #12]
 8023816:	059a      	lsls	r2, r3, #22
 8023818:	d402      	bmi.n	8023820 <_vfiprintf_r+0x220>
 802381a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802381c:	f000 fce4 	bl	80241e8 <__retarget_lock_release_recursive>
 8023820:	89ab      	ldrh	r3, [r5, #12]
 8023822:	065b      	lsls	r3, r3, #25
 8023824:	f53f af12 	bmi.w	802364c <_vfiprintf_r+0x4c>
 8023828:	9809      	ldr	r0, [sp, #36]	; 0x24
 802382a:	e711      	b.n	8023650 <_vfiprintf_r+0x50>
 802382c:	ab03      	add	r3, sp, #12
 802382e:	9300      	str	r3, [sp, #0]
 8023830:	462a      	mov	r2, r5
 8023832:	4b09      	ldr	r3, [pc, #36]	; (8023858 <_vfiprintf_r+0x258>)
 8023834:	a904      	add	r1, sp, #16
 8023836:	4630      	mov	r0, r6
 8023838:	f000 f880 	bl	802393c <_printf_i>
 802383c:	e7e4      	b.n	8023808 <_vfiprintf_r+0x208>
 802383e:	bf00      	nop
 8023840:	080262e0 	.word	0x080262e0
 8023844:	08026300 	.word	0x08026300
 8023848:	080262c0 	.word	0x080262c0
 802384c:	08026288 	.word	0x08026288
 8023850:	08026292 	.word	0x08026292
 8023854:	00000000 	.word	0x00000000
 8023858:	080235db 	.word	0x080235db
 802385c:	0802628e 	.word	0x0802628e

08023860 <_printf_common>:
 8023860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023864:	4616      	mov	r6, r2
 8023866:	4699      	mov	r9, r3
 8023868:	688a      	ldr	r2, [r1, #8]
 802386a:	690b      	ldr	r3, [r1, #16]
 802386c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023870:	4293      	cmp	r3, r2
 8023872:	bfb8      	it	lt
 8023874:	4613      	movlt	r3, r2
 8023876:	6033      	str	r3, [r6, #0]
 8023878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802387c:	4607      	mov	r7, r0
 802387e:	460c      	mov	r4, r1
 8023880:	b10a      	cbz	r2, 8023886 <_printf_common+0x26>
 8023882:	3301      	adds	r3, #1
 8023884:	6033      	str	r3, [r6, #0]
 8023886:	6823      	ldr	r3, [r4, #0]
 8023888:	0699      	lsls	r1, r3, #26
 802388a:	bf42      	ittt	mi
 802388c:	6833      	ldrmi	r3, [r6, #0]
 802388e:	3302      	addmi	r3, #2
 8023890:	6033      	strmi	r3, [r6, #0]
 8023892:	6825      	ldr	r5, [r4, #0]
 8023894:	f015 0506 	ands.w	r5, r5, #6
 8023898:	d106      	bne.n	80238a8 <_printf_common+0x48>
 802389a:	f104 0a19 	add.w	sl, r4, #25
 802389e:	68e3      	ldr	r3, [r4, #12]
 80238a0:	6832      	ldr	r2, [r6, #0]
 80238a2:	1a9b      	subs	r3, r3, r2
 80238a4:	42ab      	cmp	r3, r5
 80238a6:	dc26      	bgt.n	80238f6 <_printf_common+0x96>
 80238a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80238ac:	1e13      	subs	r3, r2, #0
 80238ae:	6822      	ldr	r2, [r4, #0]
 80238b0:	bf18      	it	ne
 80238b2:	2301      	movne	r3, #1
 80238b4:	0692      	lsls	r2, r2, #26
 80238b6:	d42b      	bmi.n	8023910 <_printf_common+0xb0>
 80238b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80238bc:	4649      	mov	r1, r9
 80238be:	4638      	mov	r0, r7
 80238c0:	47c0      	blx	r8
 80238c2:	3001      	adds	r0, #1
 80238c4:	d01e      	beq.n	8023904 <_printf_common+0xa4>
 80238c6:	6823      	ldr	r3, [r4, #0]
 80238c8:	68e5      	ldr	r5, [r4, #12]
 80238ca:	6832      	ldr	r2, [r6, #0]
 80238cc:	f003 0306 	and.w	r3, r3, #6
 80238d0:	2b04      	cmp	r3, #4
 80238d2:	bf08      	it	eq
 80238d4:	1aad      	subeq	r5, r5, r2
 80238d6:	68a3      	ldr	r3, [r4, #8]
 80238d8:	6922      	ldr	r2, [r4, #16]
 80238da:	bf0c      	ite	eq
 80238dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80238e0:	2500      	movne	r5, #0
 80238e2:	4293      	cmp	r3, r2
 80238e4:	bfc4      	itt	gt
 80238e6:	1a9b      	subgt	r3, r3, r2
 80238e8:	18ed      	addgt	r5, r5, r3
 80238ea:	2600      	movs	r6, #0
 80238ec:	341a      	adds	r4, #26
 80238ee:	42b5      	cmp	r5, r6
 80238f0:	d11a      	bne.n	8023928 <_printf_common+0xc8>
 80238f2:	2000      	movs	r0, #0
 80238f4:	e008      	b.n	8023908 <_printf_common+0xa8>
 80238f6:	2301      	movs	r3, #1
 80238f8:	4652      	mov	r2, sl
 80238fa:	4649      	mov	r1, r9
 80238fc:	4638      	mov	r0, r7
 80238fe:	47c0      	blx	r8
 8023900:	3001      	adds	r0, #1
 8023902:	d103      	bne.n	802390c <_printf_common+0xac>
 8023904:	f04f 30ff 	mov.w	r0, #4294967295
 8023908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802390c:	3501      	adds	r5, #1
 802390e:	e7c6      	b.n	802389e <_printf_common+0x3e>
 8023910:	18e1      	adds	r1, r4, r3
 8023912:	1c5a      	adds	r2, r3, #1
 8023914:	2030      	movs	r0, #48	; 0x30
 8023916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802391a:	4422      	add	r2, r4
 802391c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023924:	3302      	adds	r3, #2
 8023926:	e7c7      	b.n	80238b8 <_printf_common+0x58>
 8023928:	2301      	movs	r3, #1
 802392a:	4622      	mov	r2, r4
 802392c:	4649      	mov	r1, r9
 802392e:	4638      	mov	r0, r7
 8023930:	47c0      	blx	r8
 8023932:	3001      	adds	r0, #1
 8023934:	d0e6      	beq.n	8023904 <_printf_common+0xa4>
 8023936:	3601      	adds	r6, #1
 8023938:	e7d9      	b.n	80238ee <_printf_common+0x8e>
	...

0802393c <_printf_i>:
 802393c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023940:	7e0f      	ldrb	r7, [r1, #24]
 8023942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023944:	2f78      	cmp	r7, #120	; 0x78
 8023946:	4691      	mov	r9, r2
 8023948:	4680      	mov	r8, r0
 802394a:	460c      	mov	r4, r1
 802394c:	469a      	mov	sl, r3
 802394e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023952:	d807      	bhi.n	8023964 <_printf_i+0x28>
 8023954:	2f62      	cmp	r7, #98	; 0x62
 8023956:	d80a      	bhi.n	802396e <_printf_i+0x32>
 8023958:	2f00      	cmp	r7, #0
 802395a:	f000 80d8 	beq.w	8023b0e <_printf_i+0x1d2>
 802395e:	2f58      	cmp	r7, #88	; 0x58
 8023960:	f000 80a3 	beq.w	8023aaa <_printf_i+0x16e>
 8023964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802396c:	e03a      	b.n	80239e4 <_printf_i+0xa8>
 802396e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023972:	2b15      	cmp	r3, #21
 8023974:	d8f6      	bhi.n	8023964 <_printf_i+0x28>
 8023976:	a101      	add	r1, pc, #4	; (adr r1, 802397c <_printf_i+0x40>)
 8023978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802397c:	080239d5 	.word	0x080239d5
 8023980:	080239e9 	.word	0x080239e9
 8023984:	08023965 	.word	0x08023965
 8023988:	08023965 	.word	0x08023965
 802398c:	08023965 	.word	0x08023965
 8023990:	08023965 	.word	0x08023965
 8023994:	080239e9 	.word	0x080239e9
 8023998:	08023965 	.word	0x08023965
 802399c:	08023965 	.word	0x08023965
 80239a0:	08023965 	.word	0x08023965
 80239a4:	08023965 	.word	0x08023965
 80239a8:	08023af5 	.word	0x08023af5
 80239ac:	08023a19 	.word	0x08023a19
 80239b0:	08023ad7 	.word	0x08023ad7
 80239b4:	08023965 	.word	0x08023965
 80239b8:	08023965 	.word	0x08023965
 80239bc:	08023b17 	.word	0x08023b17
 80239c0:	08023965 	.word	0x08023965
 80239c4:	08023a19 	.word	0x08023a19
 80239c8:	08023965 	.word	0x08023965
 80239cc:	08023965 	.word	0x08023965
 80239d0:	08023adf 	.word	0x08023adf
 80239d4:	682b      	ldr	r3, [r5, #0]
 80239d6:	1d1a      	adds	r2, r3, #4
 80239d8:	681b      	ldr	r3, [r3, #0]
 80239da:	602a      	str	r2, [r5, #0]
 80239dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80239e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80239e4:	2301      	movs	r3, #1
 80239e6:	e0a3      	b.n	8023b30 <_printf_i+0x1f4>
 80239e8:	6820      	ldr	r0, [r4, #0]
 80239ea:	6829      	ldr	r1, [r5, #0]
 80239ec:	0606      	lsls	r6, r0, #24
 80239ee:	f101 0304 	add.w	r3, r1, #4
 80239f2:	d50a      	bpl.n	8023a0a <_printf_i+0xce>
 80239f4:	680e      	ldr	r6, [r1, #0]
 80239f6:	602b      	str	r3, [r5, #0]
 80239f8:	2e00      	cmp	r6, #0
 80239fa:	da03      	bge.n	8023a04 <_printf_i+0xc8>
 80239fc:	232d      	movs	r3, #45	; 0x2d
 80239fe:	4276      	negs	r6, r6
 8023a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a04:	485e      	ldr	r0, [pc, #376]	; (8023b80 <_printf_i+0x244>)
 8023a06:	230a      	movs	r3, #10
 8023a08:	e019      	b.n	8023a3e <_printf_i+0x102>
 8023a0a:	680e      	ldr	r6, [r1, #0]
 8023a0c:	602b      	str	r3, [r5, #0]
 8023a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023a12:	bf18      	it	ne
 8023a14:	b236      	sxthne	r6, r6
 8023a16:	e7ef      	b.n	80239f8 <_printf_i+0xbc>
 8023a18:	682b      	ldr	r3, [r5, #0]
 8023a1a:	6820      	ldr	r0, [r4, #0]
 8023a1c:	1d19      	adds	r1, r3, #4
 8023a1e:	6029      	str	r1, [r5, #0]
 8023a20:	0601      	lsls	r1, r0, #24
 8023a22:	d501      	bpl.n	8023a28 <_printf_i+0xec>
 8023a24:	681e      	ldr	r6, [r3, #0]
 8023a26:	e002      	b.n	8023a2e <_printf_i+0xf2>
 8023a28:	0646      	lsls	r6, r0, #25
 8023a2a:	d5fb      	bpl.n	8023a24 <_printf_i+0xe8>
 8023a2c:	881e      	ldrh	r6, [r3, #0]
 8023a2e:	4854      	ldr	r0, [pc, #336]	; (8023b80 <_printf_i+0x244>)
 8023a30:	2f6f      	cmp	r7, #111	; 0x6f
 8023a32:	bf0c      	ite	eq
 8023a34:	2308      	moveq	r3, #8
 8023a36:	230a      	movne	r3, #10
 8023a38:	2100      	movs	r1, #0
 8023a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023a3e:	6865      	ldr	r5, [r4, #4]
 8023a40:	60a5      	str	r5, [r4, #8]
 8023a42:	2d00      	cmp	r5, #0
 8023a44:	bfa2      	ittt	ge
 8023a46:	6821      	ldrge	r1, [r4, #0]
 8023a48:	f021 0104 	bicge.w	r1, r1, #4
 8023a4c:	6021      	strge	r1, [r4, #0]
 8023a4e:	b90e      	cbnz	r6, 8023a54 <_printf_i+0x118>
 8023a50:	2d00      	cmp	r5, #0
 8023a52:	d04d      	beq.n	8023af0 <_printf_i+0x1b4>
 8023a54:	4615      	mov	r5, r2
 8023a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8023a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8023a5e:	5dc7      	ldrb	r7, [r0, r7]
 8023a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023a64:	4637      	mov	r7, r6
 8023a66:	42bb      	cmp	r3, r7
 8023a68:	460e      	mov	r6, r1
 8023a6a:	d9f4      	bls.n	8023a56 <_printf_i+0x11a>
 8023a6c:	2b08      	cmp	r3, #8
 8023a6e:	d10b      	bne.n	8023a88 <_printf_i+0x14c>
 8023a70:	6823      	ldr	r3, [r4, #0]
 8023a72:	07de      	lsls	r6, r3, #31
 8023a74:	d508      	bpl.n	8023a88 <_printf_i+0x14c>
 8023a76:	6923      	ldr	r3, [r4, #16]
 8023a78:	6861      	ldr	r1, [r4, #4]
 8023a7a:	4299      	cmp	r1, r3
 8023a7c:	bfde      	ittt	le
 8023a7e:	2330      	movle	r3, #48	; 0x30
 8023a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023a88:	1b52      	subs	r2, r2, r5
 8023a8a:	6122      	str	r2, [r4, #16]
 8023a8c:	f8cd a000 	str.w	sl, [sp]
 8023a90:	464b      	mov	r3, r9
 8023a92:	aa03      	add	r2, sp, #12
 8023a94:	4621      	mov	r1, r4
 8023a96:	4640      	mov	r0, r8
 8023a98:	f7ff fee2 	bl	8023860 <_printf_common>
 8023a9c:	3001      	adds	r0, #1
 8023a9e:	d14c      	bne.n	8023b3a <_printf_i+0x1fe>
 8023aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8023aa4:	b004      	add	sp, #16
 8023aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023aaa:	4835      	ldr	r0, [pc, #212]	; (8023b80 <_printf_i+0x244>)
 8023aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023ab0:	6829      	ldr	r1, [r5, #0]
 8023ab2:	6823      	ldr	r3, [r4, #0]
 8023ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8023ab8:	6029      	str	r1, [r5, #0]
 8023aba:	061d      	lsls	r5, r3, #24
 8023abc:	d514      	bpl.n	8023ae8 <_printf_i+0x1ac>
 8023abe:	07df      	lsls	r7, r3, #31
 8023ac0:	bf44      	itt	mi
 8023ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8023ac6:	6023      	strmi	r3, [r4, #0]
 8023ac8:	b91e      	cbnz	r6, 8023ad2 <_printf_i+0x196>
 8023aca:	6823      	ldr	r3, [r4, #0]
 8023acc:	f023 0320 	bic.w	r3, r3, #32
 8023ad0:	6023      	str	r3, [r4, #0]
 8023ad2:	2310      	movs	r3, #16
 8023ad4:	e7b0      	b.n	8023a38 <_printf_i+0xfc>
 8023ad6:	6823      	ldr	r3, [r4, #0]
 8023ad8:	f043 0320 	orr.w	r3, r3, #32
 8023adc:	6023      	str	r3, [r4, #0]
 8023ade:	2378      	movs	r3, #120	; 0x78
 8023ae0:	4828      	ldr	r0, [pc, #160]	; (8023b84 <_printf_i+0x248>)
 8023ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023ae6:	e7e3      	b.n	8023ab0 <_printf_i+0x174>
 8023ae8:	0659      	lsls	r1, r3, #25
 8023aea:	bf48      	it	mi
 8023aec:	b2b6      	uxthmi	r6, r6
 8023aee:	e7e6      	b.n	8023abe <_printf_i+0x182>
 8023af0:	4615      	mov	r5, r2
 8023af2:	e7bb      	b.n	8023a6c <_printf_i+0x130>
 8023af4:	682b      	ldr	r3, [r5, #0]
 8023af6:	6826      	ldr	r6, [r4, #0]
 8023af8:	6961      	ldr	r1, [r4, #20]
 8023afa:	1d18      	adds	r0, r3, #4
 8023afc:	6028      	str	r0, [r5, #0]
 8023afe:	0635      	lsls	r5, r6, #24
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	d501      	bpl.n	8023b08 <_printf_i+0x1cc>
 8023b04:	6019      	str	r1, [r3, #0]
 8023b06:	e002      	b.n	8023b0e <_printf_i+0x1d2>
 8023b08:	0670      	lsls	r0, r6, #25
 8023b0a:	d5fb      	bpl.n	8023b04 <_printf_i+0x1c8>
 8023b0c:	8019      	strh	r1, [r3, #0]
 8023b0e:	2300      	movs	r3, #0
 8023b10:	6123      	str	r3, [r4, #16]
 8023b12:	4615      	mov	r5, r2
 8023b14:	e7ba      	b.n	8023a8c <_printf_i+0x150>
 8023b16:	682b      	ldr	r3, [r5, #0]
 8023b18:	1d1a      	adds	r2, r3, #4
 8023b1a:	602a      	str	r2, [r5, #0]
 8023b1c:	681d      	ldr	r5, [r3, #0]
 8023b1e:	6862      	ldr	r2, [r4, #4]
 8023b20:	2100      	movs	r1, #0
 8023b22:	4628      	mov	r0, r5
 8023b24:	f7dc fbdc 	bl	80002e0 <memchr>
 8023b28:	b108      	cbz	r0, 8023b2e <_printf_i+0x1f2>
 8023b2a:	1b40      	subs	r0, r0, r5
 8023b2c:	6060      	str	r0, [r4, #4]
 8023b2e:	6863      	ldr	r3, [r4, #4]
 8023b30:	6123      	str	r3, [r4, #16]
 8023b32:	2300      	movs	r3, #0
 8023b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023b38:	e7a8      	b.n	8023a8c <_printf_i+0x150>
 8023b3a:	6923      	ldr	r3, [r4, #16]
 8023b3c:	462a      	mov	r2, r5
 8023b3e:	4649      	mov	r1, r9
 8023b40:	4640      	mov	r0, r8
 8023b42:	47d0      	blx	sl
 8023b44:	3001      	adds	r0, #1
 8023b46:	d0ab      	beq.n	8023aa0 <_printf_i+0x164>
 8023b48:	6823      	ldr	r3, [r4, #0]
 8023b4a:	079b      	lsls	r3, r3, #30
 8023b4c:	d413      	bmi.n	8023b76 <_printf_i+0x23a>
 8023b4e:	68e0      	ldr	r0, [r4, #12]
 8023b50:	9b03      	ldr	r3, [sp, #12]
 8023b52:	4298      	cmp	r0, r3
 8023b54:	bfb8      	it	lt
 8023b56:	4618      	movlt	r0, r3
 8023b58:	e7a4      	b.n	8023aa4 <_printf_i+0x168>
 8023b5a:	2301      	movs	r3, #1
 8023b5c:	4632      	mov	r2, r6
 8023b5e:	4649      	mov	r1, r9
 8023b60:	4640      	mov	r0, r8
 8023b62:	47d0      	blx	sl
 8023b64:	3001      	adds	r0, #1
 8023b66:	d09b      	beq.n	8023aa0 <_printf_i+0x164>
 8023b68:	3501      	adds	r5, #1
 8023b6a:	68e3      	ldr	r3, [r4, #12]
 8023b6c:	9903      	ldr	r1, [sp, #12]
 8023b6e:	1a5b      	subs	r3, r3, r1
 8023b70:	42ab      	cmp	r3, r5
 8023b72:	dcf2      	bgt.n	8023b5a <_printf_i+0x21e>
 8023b74:	e7eb      	b.n	8023b4e <_printf_i+0x212>
 8023b76:	2500      	movs	r5, #0
 8023b78:	f104 0619 	add.w	r6, r4, #25
 8023b7c:	e7f5      	b.n	8023b6a <_printf_i+0x22e>
 8023b7e:	bf00      	nop
 8023b80:	08026299 	.word	0x08026299
 8023b84:	080262aa 	.word	0x080262aa

08023b88 <_sbrk_r>:
 8023b88:	b538      	push	{r3, r4, r5, lr}
 8023b8a:	4d06      	ldr	r5, [pc, #24]	; (8023ba4 <_sbrk_r+0x1c>)
 8023b8c:	2300      	movs	r3, #0
 8023b8e:	4604      	mov	r4, r0
 8023b90:	4608      	mov	r0, r1
 8023b92:	602b      	str	r3, [r5, #0]
 8023b94:	f7dd fd48 	bl	8001628 <_sbrk>
 8023b98:	1c43      	adds	r3, r0, #1
 8023b9a:	d102      	bne.n	8023ba2 <_sbrk_r+0x1a>
 8023b9c:	682b      	ldr	r3, [r5, #0]
 8023b9e:	b103      	cbz	r3, 8023ba2 <_sbrk_r+0x1a>
 8023ba0:	6023      	str	r3, [r4, #0]
 8023ba2:	bd38      	pop	{r3, r4, r5, pc}
 8023ba4:	2400b114 	.word	0x2400b114

08023ba8 <_raise_r>:
 8023ba8:	291f      	cmp	r1, #31
 8023baa:	b538      	push	{r3, r4, r5, lr}
 8023bac:	4604      	mov	r4, r0
 8023bae:	460d      	mov	r5, r1
 8023bb0:	d904      	bls.n	8023bbc <_raise_r+0x14>
 8023bb2:	2316      	movs	r3, #22
 8023bb4:	6003      	str	r3, [r0, #0]
 8023bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8023bba:	bd38      	pop	{r3, r4, r5, pc}
 8023bbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023bbe:	b112      	cbz	r2, 8023bc6 <_raise_r+0x1e>
 8023bc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023bc4:	b94b      	cbnz	r3, 8023bda <_raise_r+0x32>
 8023bc6:	4620      	mov	r0, r4
 8023bc8:	f000 f830 	bl	8023c2c <_getpid_r>
 8023bcc:	462a      	mov	r2, r5
 8023bce:	4601      	mov	r1, r0
 8023bd0:	4620      	mov	r0, r4
 8023bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023bd6:	f000 b817 	b.w	8023c08 <_kill_r>
 8023bda:	2b01      	cmp	r3, #1
 8023bdc:	d00a      	beq.n	8023bf4 <_raise_r+0x4c>
 8023bde:	1c59      	adds	r1, r3, #1
 8023be0:	d103      	bne.n	8023bea <_raise_r+0x42>
 8023be2:	2316      	movs	r3, #22
 8023be4:	6003      	str	r3, [r0, #0]
 8023be6:	2001      	movs	r0, #1
 8023be8:	e7e7      	b.n	8023bba <_raise_r+0x12>
 8023bea:	2400      	movs	r4, #0
 8023bec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023bf0:	4628      	mov	r0, r5
 8023bf2:	4798      	blx	r3
 8023bf4:	2000      	movs	r0, #0
 8023bf6:	e7e0      	b.n	8023bba <_raise_r+0x12>

08023bf8 <raise>:
 8023bf8:	4b02      	ldr	r3, [pc, #8]	; (8023c04 <raise+0xc>)
 8023bfa:	4601      	mov	r1, r0
 8023bfc:	6818      	ldr	r0, [r3, #0]
 8023bfe:	f7ff bfd3 	b.w	8023ba8 <_raise_r>
 8023c02:	bf00      	nop
 8023c04:	240000c4 	.word	0x240000c4

08023c08 <_kill_r>:
 8023c08:	b538      	push	{r3, r4, r5, lr}
 8023c0a:	4d07      	ldr	r5, [pc, #28]	; (8023c28 <_kill_r+0x20>)
 8023c0c:	2300      	movs	r3, #0
 8023c0e:	4604      	mov	r4, r0
 8023c10:	4608      	mov	r0, r1
 8023c12:	4611      	mov	r1, r2
 8023c14:	602b      	str	r3, [r5, #0]
 8023c16:	f7dd fc7f 	bl	8001518 <_kill>
 8023c1a:	1c43      	adds	r3, r0, #1
 8023c1c:	d102      	bne.n	8023c24 <_kill_r+0x1c>
 8023c1e:	682b      	ldr	r3, [r5, #0]
 8023c20:	b103      	cbz	r3, 8023c24 <_kill_r+0x1c>
 8023c22:	6023      	str	r3, [r4, #0]
 8023c24:	bd38      	pop	{r3, r4, r5, pc}
 8023c26:	bf00      	nop
 8023c28:	2400b114 	.word	0x2400b114

08023c2c <_getpid_r>:
 8023c2c:	f7dd bc6c 	b.w	8001508 <_getpid>

08023c30 <__swbuf_r>:
 8023c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023c32:	460e      	mov	r6, r1
 8023c34:	4614      	mov	r4, r2
 8023c36:	4605      	mov	r5, r0
 8023c38:	b118      	cbz	r0, 8023c42 <__swbuf_r+0x12>
 8023c3a:	6983      	ldr	r3, [r0, #24]
 8023c3c:	b90b      	cbnz	r3, 8023c42 <__swbuf_r+0x12>
 8023c3e:	f000 fa33 	bl	80240a8 <__sinit>
 8023c42:	4b21      	ldr	r3, [pc, #132]	; (8023cc8 <__swbuf_r+0x98>)
 8023c44:	429c      	cmp	r4, r3
 8023c46:	d12b      	bne.n	8023ca0 <__swbuf_r+0x70>
 8023c48:	686c      	ldr	r4, [r5, #4]
 8023c4a:	69a3      	ldr	r3, [r4, #24]
 8023c4c:	60a3      	str	r3, [r4, #8]
 8023c4e:	89a3      	ldrh	r3, [r4, #12]
 8023c50:	071a      	lsls	r2, r3, #28
 8023c52:	d52f      	bpl.n	8023cb4 <__swbuf_r+0x84>
 8023c54:	6923      	ldr	r3, [r4, #16]
 8023c56:	b36b      	cbz	r3, 8023cb4 <__swbuf_r+0x84>
 8023c58:	6923      	ldr	r3, [r4, #16]
 8023c5a:	6820      	ldr	r0, [r4, #0]
 8023c5c:	1ac0      	subs	r0, r0, r3
 8023c5e:	6963      	ldr	r3, [r4, #20]
 8023c60:	b2f6      	uxtb	r6, r6
 8023c62:	4283      	cmp	r3, r0
 8023c64:	4637      	mov	r7, r6
 8023c66:	dc04      	bgt.n	8023c72 <__swbuf_r+0x42>
 8023c68:	4621      	mov	r1, r4
 8023c6a:	4628      	mov	r0, r5
 8023c6c:	f000 f988 	bl	8023f80 <_fflush_r>
 8023c70:	bb30      	cbnz	r0, 8023cc0 <__swbuf_r+0x90>
 8023c72:	68a3      	ldr	r3, [r4, #8]
 8023c74:	3b01      	subs	r3, #1
 8023c76:	60a3      	str	r3, [r4, #8]
 8023c78:	6823      	ldr	r3, [r4, #0]
 8023c7a:	1c5a      	adds	r2, r3, #1
 8023c7c:	6022      	str	r2, [r4, #0]
 8023c7e:	701e      	strb	r6, [r3, #0]
 8023c80:	6963      	ldr	r3, [r4, #20]
 8023c82:	3001      	adds	r0, #1
 8023c84:	4283      	cmp	r3, r0
 8023c86:	d004      	beq.n	8023c92 <__swbuf_r+0x62>
 8023c88:	89a3      	ldrh	r3, [r4, #12]
 8023c8a:	07db      	lsls	r3, r3, #31
 8023c8c:	d506      	bpl.n	8023c9c <__swbuf_r+0x6c>
 8023c8e:	2e0a      	cmp	r6, #10
 8023c90:	d104      	bne.n	8023c9c <__swbuf_r+0x6c>
 8023c92:	4621      	mov	r1, r4
 8023c94:	4628      	mov	r0, r5
 8023c96:	f000 f973 	bl	8023f80 <_fflush_r>
 8023c9a:	b988      	cbnz	r0, 8023cc0 <__swbuf_r+0x90>
 8023c9c:	4638      	mov	r0, r7
 8023c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ca0:	4b0a      	ldr	r3, [pc, #40]	; (8023ccc <__swbuf_r+0x9c>)
 8023ca2:	429c      	cmp	r4, r3
 8023ca4:	d101      	bne.n	8023caa <__swbuf_r+0x7a>
 8023ca6:	68ac      	ldr	r4, [r5, #8]
 8023ca8:	e7cf      	b.n	8023c4a <__swbuf_r+0x1a>
 8023caa:	4b09      	ldr	r3, [pc, #36]	; (8023cd0 <__swbuf_r+0xa0>)
 8023cac:	429c      	cmp	r4, r3
 8023cae:	bf08      	it	eq
 8023cb0:	68ec      	ldreq	r4, [r5, #12]
 8023cb2:	e7ca      	b.n	8023c4a <__swbuf_r+0x1a>
 8023cb4:	4621      	mov	r1, r4
 8023cb6:	4628      	mov	r0, r5
 8023cb8:	f000 f80c 	bl	8023cd4 <__swsetup_r>
 8023cbc:	2800      	cmp	r0, #0
 8023cbe:	d0cb      	beq.n	8023c58 <__swbuf_r+0x28>
 8023cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8023cc4:	e7ea      	b.n	8023c9c <__swbuf_r+0x6c>
 8023cc6:	bf00      	nop
 8023cc8:	080262e0 	.word	0x080262e0
 8023ccc:	08026300 	.word	0x08026300
 8023cd0:	080262c0 	.word	0x080262c0

08023cd4 <__swsetup_r>:
 8023cd4:	4b32      	ldr	r3, [pc, #200]	; (8023da0 <__swsetup_r+0xcc>)
 8023cd6:	b570      	push	{r4, r5, r6, lr}
 8023cd8:	681d      	ldr	r5, [r3, #0]
 8023cda:	4606      	mov	r6, r0
 8023cdc:	460c      	mov	r4, r1
 8023cde:	b125      	cbz	r5, 8023cea <__swsetup_r+0x16>
 8023ce0:	69ab      	ldr	r3, [r5, #24]
 8023ce2:	b913      	cbnz	r3, 8023cea <__swsetup_r+0x16>
 8023ce4:	4628      	mov	r0, r5
 8023ce6:	f000 f9df 	bl	80240a8 <__sinit>
 8023cea:	4b2e      	ldr	r3, [pc, #184]	; (8023da4 <__swsetup_r+0xd0>)
 8023cec:	429c      	cmp	r4, r3
 8023cee:	d10f      	bne.n	8023d10 <__swsetup_r+0x3c>
 8023cf0:	686c      	ldr	r4, [r5, #4]
 8023cf2:	89a3      	ldrh	r3, [r4, #12]
 8023cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023cf8:	0719      	lsls	r1, r3, #28
 8023cfa:	d42c      	bmi.n	8023d56 <__swsetup_r+0x82>
 8023cfc:	06dd      	lsls	r5, r3, #27
 8023cfe:	d411      	bmi.n	8023d24 <__swsetup_r+0x50>
 8023d00:	2309      	movs	r3, #9
 8023d02:	6033      	str	r3, [r6, #0]
 8023d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023d08:	81a3      	strh	r3, [r4, #12]
 8023d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8023d0e:	e03e      	b.n	8023d8e <__swsetup_r+0xba>
 8023d10:	4b25      	ldr	r3, [pc, #148]	; (8023da8 <__swsetup_r+0xd4>)
 8023d12:	429c      	cmp	r4, r3
 8023d14:	d101      	bne.n	8023d1a <__swsetup_r+0x46>
 8023d16:	68ac      	ldr	r4, [r5, #8]
 8023d18:	e7eb      	b.n	8023cf2 <__swsetup_r+0x1e>
 8023d1a:	4b24      	ldr	r3, [pc, #144]	; (8023dac <__swsetup_r+0xd8>)
 8023d1c:	429c      	cmp	r4, r3
 8023d1e:	bf08      	it	eq
 8023d20:	68ec      	ldreq	r4, [r5, #12]
 8023d22:	e7e6      	b.n	8023cf2 <__swsetup_r+0x1e>
 8023d24:	0758      	lsls	r0, r3, #29
 8023d26:	d512      	bpl.n	8023d4e <__swsetup_r+0x7a>
 8023d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023d2a:	b141      	cbz	r1, 8023d3e <__swsetup_r+0x6a>
 8023d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d30:	4299      	cmp	r1, r3
 8023d32:	d002      	beq.n	8023d3a <__swsetup_r+0x66>
 8023d34:	4630      	mov	r0, r6
 8023d36:	f7ff fb59 	bl	80233ec <_free_r>
 8023d3a:	2300      	movs	r3, #0
 8023d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8023d3e:	89a3      	ldrh	r3, [r4, #12]
 8023d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023d44:	81a3      	strh	r3, [r4, #12]
 8023d46:	2300      	movs	r3, #0
 8023d48:	6063      	str	r3, [r4, #4]
 8023d4a:	6923      	ldr	r3, [r4, #16]
 8023d4c:	6023      	str	r3, [r4, #0]
 8023d4e:	89a3      	ldrh	r3, [r4, #12]
 8023d50:	f043 0308 	orr.w	r3, r3, #8
 8023d54:	81a3      	strh	r3, [r4, #12]
 8023d56:	6923      	ldr	r3, [r4, #16]
 8023d58:	b94b      	cbnz	r3, 8023d6e <__swsetup_r+0x9a>
 8023d5a:	89a3      	ldrh	r3, [r4, #12]
 8023d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023d64:	d003      	beq.n	8023d6e <__swsetup_r+0x9a>
 8023d66:	4621      	mov	r1, r4
 8023d68:	4630      	mov	r0, r6
 8023d6a:	f000 fa63 	bl	8024234 <__smakebuf_r>
 8023d6e:	89a0      	ldrh	r0, [r4, #12]
 8023d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023d74:	f010 0301 	ands.w	r3, r0, #1
 8023d78:	d00a      	beq.n	8023d90 <__swsetup_r+0xbc>
 8023d7a:	2300      	movs	r3, #0
 8023d7c:	60a3      	str	r3, [r4, #8]
 8023d7e:	6963      	ldr	r3, [r4, #20]
 8023d80:	425b      	negs	r3, r3
 8023d82:	61a3      	str	r3, [r4, #24]
 8023d84:	6923      	ldr	r3, [r4, #16]
 8023d86:	b943      	cbnz	r3, 8023d9a <__swsetup_r+0xc6>
 8023d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023d8c:	d1ba      	bne.n	8023d04 <__swsetup_r+0x30>
 8023d8e:	bd70      	pop	{r4, r5, r6, pc}
 8023d90:	0781      	lsls	r1, r0, #30
 8023d92:	bf58      	it	pl
 8023d94:	6963      	ldrpl	r3, [r4, #20]
 8023d96:	60a3      	str	r3, [r4, #8]
 8023d98:	e7f4      	b.n	8023d84 <__swsetup_r+0xb0>
 8023d9a:	2000      	movs	r0, #0
 8023d9c:	e7f7      	b.n	8023d8e <__swsetup_r+0xba>
 8023d9e:	bf00      	nop
 8023da0:	240000c4 	.word	0x240000c4
 8023da4:	080262e0 	.word	0x080262e0
 8023da8:	08026300 	.word	0x08026300
 8023dac:	080262c0 	.word	0x080262c0

08023db0 <__register_exitproc>:
 8023db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023db4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8023e70 <__register_exitproc+0xc0>
 8023db8:	4606      	mov	r6, r0
 8023dba:	f8d8 0000 	ldr.w	r0, [r8]
 8023dbe:	461f      	mov	r7, r3
 8023dc0:	460d      	mov	r5, r1
 8023dc2:	4691      	mov	r9, r2
 8023dc4:	f000 fa0e 	bl	80241e4 <__retarget_lock_acquire_recursive>
 8023dc8:	4b25      	ldr	r3, [pc, #148]	; (8023e60 <__register_exitproc+0xb0>)
 8023dca:	681c      	ldr	r4, [r3, #0]
 8023dcc:	b934      	cbnz	r4, 8023ddc <__register_exitproc+0x2c>
 8023dce:	4c25      	ldr	r4, [pc, #148]	; (8023e64 <__register_exitproc+0xb4>)
 8023dd0:	601c      	str	r4, [r3, #0]
 8023dd2:	4b25      	ldr	r3, [pc, #148]	; (8023e68 <__register_exitproc+0xb8>)
 8023dd4:	b113      	cbz	r3, 8023ddc <__register_exitproc+0x2c>
 8023dd6:	681b      	ldr	r3, [r3, #0]
 8023dd8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023ddc:	6863      	ldr	r3, [r4, #4]
 8023dde:	2b1f      	cmp	r3, #31
 8023de0:	dd07      	ble.n	8023df2 <__register_exitproc+0x42>
 8023de2:	f8d8 0000 	ldr.w	r0, [r8]
 8023de6:	f000 f9ff 	bl	80241e8 <__retarget_lock_release_recursive>
 8023dea:	f04f 30ff 	mov.w	r0, #4294967295
 8023dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023df2:	b34e      	cbz	r6, 8023e48 <__register_exitproc+0x98>
 8023df4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023df8:	b988      	cbnz	r0, 8023e1e <__register_exitproc+0x6e>
 8023dfa:	4b1c      	ldr	r3, [pc, #112]	; (8023e6c <__register_exitproc+0xbc>)
 8023dfc:	b923      	cbnz	r3, 8023e08 <__register_exitproc+0x58>
 8023dfe:	f8d8 0000 	ldr.w	r0, [r8]
 8023e02:	f000 f9f0 	bl	80241e6 <__retarget_lock_release>
 8023e06:	e7f0      	b.n	8023dea <__register_exitproc+0x3a>
 8023e08:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023e0c:	f7ff fac8 	bl	80233a0 <malloc>
 8023e10:	2800      	cmp	r0, #0
 8023e12:	d0f4      	beq.n	8023dfe <__register_exitproc+0x4e>
 8023e14:	2300      	movs	r3, #0
 8023e16:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8023e1a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023e1e:	6863      	ldr	r3, [r4, #4]
 8023e20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023e24:	2201      	movs	r2, #1
 8023e26:	409a      	lsls	r2, r3
 8023e28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023e2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8023e30:	4313      	orrs	r3, r2
 8023e32:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023e36:	2e02      	cmp	r6, #2
 8023e38:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8023e3c:	bf02      	ittt	eq
 8023e3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8023e42:	4313      	orreq	r3, r2
 8023e44:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023e48:	6863      	ldr	r3, [r4, #4]
 8023e4a:	f8d8 0000 	ldr.w	r0, [r8]
 8023e4e:	1c5a      	adds	r2, r3, #1
 8023e50:	3302      	adds	r3, #2
 8023e52:	6062      	str	r2, [r4, #4]
 8023e54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8023e58:	f000 f9c6 	bl	80241e8 <__retarget_lock_release_recursive>
 8023e5c:	2000      	movs	r0, #0
 8023e5e:	e7c6      	b.n	8023dee <__register_exitproc+0x3e>
 8023e60:	2400b10c 	.word	0x2400b10c
 8023e64:	2400b080 	.word	0x2400b080
 8023e68:	080262bc 	.word	0x080262bc
 8023e6c:	080233a1 	.word	0x080233a1
 8023e70:	24000128 	.word	0x24000128

08023e74 <__sflush_r>:
 8023e74:	898a      	ldrh	r2, [r1, #12]
 8023e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e7a:	4605      	mov	r5, r0
 8023e7c:	0710      	lsls	r0, r2, #28
 8023e7e:	460c      	mov	r4, r1
 8023e80:	d458      	bmi.n	8023f34 <__sflush_r+0xc0>
 8023e82:	684b      	ldr	r3, [r1, #4]
 8023e84:	2b00      	cmp	r3, #0
 8023e86:	dc05      	bgt.n	8023e94 <__sflush_r+0x20>
 8023e88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	dc02      	bgt.n	8023e94 <__sflush_r+0x20>
 8023e8e:	2000      	movs	r0, #0
 8023e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023e96:	2e00      	cmp	r6, #0
 8023e98:	d0f9      	beq.n	8023e8e <__sflush_r+0x1a>
 8023e9a:	2300      	movs	r3, #0
 8023e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023ea0:	682f      	ldr	r7, [r5, #0]
 8023ea2:	602b      	str	r3, [r5, #0]
 8023ea4:	d032      	beq.n	8023f0c <__sflush_r+0x98>
 8023ea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023ea8:	89a3      	ldrh	r3, [r4, #12]
 8023eaa:	075a      	lsls	r2, r3, #29
 8023eac:	d505      	bpl.n	8023eba <__sflush_r+0x46>
 8023eae:	6863      	ldr	r3, [r4, #4]
 8023eb0:	1ac0      	subs	r0, r0, r3
 8023eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023eb4:	b10b      	cbz	r3, 8023eba <__sflush_r+0x46>
 8023eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023eb8:	1ac0      	subs	r0, r0, r3
 8023eba:	2300      	movs	r3, #0
 8023ebc:	4602      	mov	r2, r0
 8023ebe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023ec0:	6a21      	ldr	r1, [r4, #32]
 8023ec2:	4628      	mov	r0, r5
 8023ec4:	47b0      	blx	r6
 8023ec6:	1c43      	adds	r3, r0, #1
 8023ec8:	89a3      	ldrh	r3, [r4, #12]
 8023eca:	d106      	bne.n	8023eda <__sflush_r+0x66>
 8023ecc:	6829      	ldr	r1, [r5, #0]
 8023ece:	291d      	cmp	r1, #29
 8023ed0:	d82c      	bhi.n	8023f2c <__sflush_r+0xb8>
 8023ed2:	4a2a      	ldr	r2, [pc, #168]	; (8023f7c <__sflush_r+0x108>)
 8023ed4:	40ca      	lsrs	r2, r1
 8023ed6:	07d6      	lsls	r6, r2, #31
 8023ed8:	d528      	bpl.n	8023f2c <__sflush_r+0xb8>
 8023eda:	2200      	movs	r2, #0
 8023edc:	6062      	str	r2, [r4, #4]
 8023ede:	04d9      	lsls	r1, r3, #19
 8023ee0:	6922      	ldr	r2, [r4, #16]
 8023ee2:	6022      	str	r2, [r4, #0]
 8023ee4:	d504      	bpl.n	8023ef0 <__sflush_r+0x7c>
 8023ee6:	1c42      	adds	r2, r0, #1
 8023ee8:	d101      	bne.n	8023eee <__sflush_r+0x7a>
 8023eea:	682b      	ldr	r3, [r5, #0]
 8023eec:	b903      	cbnz	r3, 8023ef0 <__sflush_r+0x7c>
 8023eee:	6560      	str	r0, [r4, #84]	; 0x54
 8023ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023ef2:	602f      	str	r7, [r5, #0]
 8023ef4:	2900      	cmp	r1, #0
 8023ef6:	d0ca      	beq.n	8023e8e <__sflush_r+0x1a>
 8023ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023efc:	4299      	cmp	r1, r3
 8023efe:	d002      	beq.n	8023f06 <__sflush_r+0x92>
 8023f00:	4628      	mov	r0, r5
 8023f02:	f7ff fa73 	bl	80233ec <_free_r>
 8023f06:	2000      	movs	r0, #0
 8023f08:	6360      	str	r0, [r4, #52]	; 0x34
 8023f0a:	e7c1      	b.n	8023e90 <__sflush_r+0x1c>
 8023f0c:	6a21      	ldr	r1, [r4, #32]
 8023f0e:	2301      	movs	r3, #1
 8023f10:	4628      	mov	r0, r5
 8023f12:	47b0      	blx	r6
 8023f14:	1c41      	adds	r1, r0, #1
 8023f16:	d1c7      	bne.n	8023ea8 <__sflush_r+0x34>
 8023f18:	682b      	ldr	r3, [r5, #0]
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d0c4      	beq.n	8023ea8 <__sflush_r+0x34>
 8023f1e:	2b1d      	cmp	r3, #29
 8023f20:	d001      	beq.n	8023f26 <__sflush_r+0xb2>
 8023f22:	2b16      	cmp	r3, #22
 8023f24:	d101      	bne.n	8023f2a <__sflush_r+0xb6>
 8023f26:	602f      	str	r7, [r5, #0]
 8023f28:	e7b1      	b.n	8023e8e <__sflush_r+0x1a>
 8023f2a:	89a3      	ldrh	r3, [r4, #12]
 8023f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f30:	81a3      	strh	r3, [r4, #12]
 8023f32:	e7ad      	b.n	8023e90 <__sflush_r+0x1c>
 8023f34:	690f      	ldr	r7, [r1, #16]
 8023f36:	2f00      	cmp	r7, #0
 8023f38:	d0a9      	beq.n	8023e8e <__sflush_r+0x1a>
 8023f3a:	0793      	lsls	r3, r2, #30
 8023f3c:	680e      	ldr	r6, [r1, #0]
 8023f3e:	bf08      	it	eq
 8023f40:	694b      	ldreq	r3, [r1, #20]
 8023f42:	600f      	str	r7, [r1, #0]
 8023f44:	bf18      	it	ne
 8023f46:	2300      	movne	r3, #0
 8023f48:	eba6 0807 	sub.w	r8, r6, r7
 8023f4c:	608b      	str	r3, [r1, #8]
 8023f4e:	f1b8 0f00 	cmp.w	r8, #0
 8023f52:	dd9c      	ble.n	8023e8e <__sflush_r+0x1a>
 8023f54:	6a21      	ldr	r1, [r4, #32]
 8023f56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023f58:	4643      	mov	r3, r8
 8023f5a:	463a      	mov	r2, r7
 8023f5c:	4628      	mov	r0, r5
 8023f5e:	47b0      	blx	r6
 8023f60:	2800      	cmp	r0, #0
 8023f62:	dc06      	bgt.n	8023f72 <__sflush_r+0xfe>
 8023f64:	89a3      	ldrh	r3, [r4, #12]
 8023f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023f6a:	81a3      	strh	r3, [r4, #12]
 8023f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8023f70:	e78e      	b.n	8023e90 <__sflush_r+0x1c>
 8023f72:	4407      	add	r7, r0
 8023f74:	eba8 0800 	sub.w	r8, r8, r0
 8023f78:	e7e9      	b.n	8023f4e <__sflush_r+0xda>
 8023f7a:	bf00      	nop
 8023f7c:	20400001 	.word	0x20400001

08023f80 <_fflush_r>:
 8023f80:	b538      	push	{r3, r4, r5, lr}
 8023f82:	690b      	ldr	r3, [r1, #16]
 8023f84:	4605      	mov	r5, r0
 8023f86:	460c      	mov	r4, r1
 8023f88:	b913      	cbnz	r3, 8023f90 <_fflush_r+0x10>
 8023f8a:	2500      	movs	r5, #0
 8023f8c:	4628      	mov	r0, r5
 8023f8e:	bd38      	pop	{r3, r4, r5, pc}
 8023f90:	b118      	cbz	r0, 8023f9a <_fflush_r+0x1a>
 8023f92:	6983      	ldr	r3, [r0, #24]
 8023f94:	b90b      	cbnz	r3, 8023f9a <_fflush_r+0x1a>
 8023f96:	f000 f887 	bl	80240a8 <__sinit>
 8023f9a:	4b14      	ldr	r3, [pc, #80]	; (8023fec <_fflush_r+0x6c>)
 8023f9c:	429c      	cmp	r4, r3
 8023f9e:	d11b      	bne.n	8023fd8 <_fflush_r+0x58>
 8023fa0:	686c      	ldr	r4, [r5, #4]
 8023fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023fa6:	2b00      	cmp	r3, #0
 8023fa8:	d0ef      	beq.n	8023f8a <_fflush_r+0xa>
 8023faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023fac:	07d0      	lsls	r0, r2, #31
 8023fae:	d404      	bmi.n	8023fba <_fflush_r+0x3a>
 8023fb0:	0599      	lsls	r1, r3, #22
 8023fb2:	d402      	bmi.n	8023fba <_fflush_r+0x3a>
 8023fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fb6:	f000 f915 	bl	80241e4 <__retarget_lock_acquire_recursive>
 8023fba:	4628      	mov	r0, r5
 8023fbc:	4621      	mov	r1, r4
 8023fbe:	f7ff ff59 	bl	8023e74 <__sflush_r>
 8023fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023fc4:	07da      	lsls	r2, r3, #31
 8023fc6:	4605      	mov	r5, r0
 8023fc8:	d4e0      	bmi.n	8023f8c <_fflush_r+0xc>
 8023fca:	89a3      	ldrh	r3, [r4, #12]
 8023fcc:	059b      	lsls	r3, r3, #22
 8023fce:	d4dd      	bmi.n	8023f8c <_fflush_r+0xc>
 8023fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fd2:	f000 f909 	bl	80241e8 <__retarget_lock_release_recursive>
 8023fd6:	e7d9      	b.n	8023f8c <_fflush_r+0xc>
 8023fd8:	4b05      	ldr	r3, [pc, #20]	; (8023ff0 <_fflush_r+0x70>)
 8023fda:	429c      	cmp	r4, r3
 8023fdc:	d101      	bne.n	8023fe2 <_fflush_r+0x62>
 8023fde:	68ac      	ldr	r4, [r5, #8]
 8023fe0:	e7df      	b.n	8023fa2 <_fflush_r+0x22>
 8023fe2:	4b04      	ldr	r3, [pc, #16]	; (8023ff4 <_fflush_r+0x74>)
 8023fe4:	429c      	cmp	r4, r3
 8023fe6:	bf08      	it	eq
 8023fe8:	68ec      	ldreq	r4, [r5, #12]
 8023fea:	e7da      	b.n	8023fa2 <_fflush_r+0x22>
 8023fec:	080262e0 	.word	0x080262e0
 8023ff0:	08026300 	.word	0x08026300
 8023ff4:	080262c0 	.word	0x080262c0

08023ff8 <std>:
 8023ff8:	2300      	movs	r3, #0
 8023ffa:	b510      	push	{r4, lr}
 8023ffc:	4604      	mov	r4, r0
 8023ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8024002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024006:	6083      	str	r3, [r0, #8]
 8024008:	8181      	strh	r1, [r0, #12]
 802400a:	6643      	str	r3, [r0, #100]	; 0x64
 802400c:	81c2      	strh	r2, [r0, #14]
 802400e:	6183      	str	r3, [r0, #24]
 8024010:	4619      	mov	r1, r3
 8024012:	2208      	movs	r2, #8
 8024014:	305c      	adds	r0, #92	; 0x5c
 8024016:	f7ff f9e1 	bl	80233dc <memset>
 802401a:	4b05      	ldr	r3, [pc, #20]	; (8024030 <std+0x38>)
 802401c:	6263      	str	r3, [r4, #36]	; 0x24
 802401e:	4b05      	ldr	r3, [pc, #20]	; (8024034 <std+0x3c>)
 8024020:	62a3      	str	r3, [r4, #40]	; 0x28
 8024022:	4b05      	ldr	r3, [pc, #20]	; (8024038 <std+0x40>)
 8024024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024026:	4b05      	ldr	r3, [pc, #20]	; (802403c <std+0x44>)
 8024028:	6224      	str	r4, [r4, #32]
 802402a:	6323      	str	r3, [r4, #48]	; 0x30
 802402c:	bd10      	pop	{r4, pc}
 802402e:	bf00      	nop
 8024030:	080242cd 	.word	0x080242cd
 8024034:	080242ef 	.word	0x080242ef
 8024038:	08024327 	.word	0x08024327
 802403c:	0802434b 	.word	0x0802434b

08024040 <_cleanup_r>:
 8024040:	4901      	ldr	r1, [pc, #4]	; (8024048 <_cleanup_r+0x8>)
 8024042:	f000 b8af 	b.w	80241a4 <_fwalk_reent>
 8024046:	bf00      	nop
 8024048:	08023f81 	.word	0x08023f81

0802404c <__sfmoreglue>:
 802404c:	b570      	push	{r4, r5, r6, lr}
 802404e:	2268      	movs	r2, #104	; 0x68
 8024050:	1e4d      	subs	r5, r1, #1
 8024052:	4355      	muls	r5, r2
 8024054:	460e      	mov	r6, r1
 8024056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802405a:	f7ff fa33 	bl	80234c4 <_malloc_r>
 802405e:	4604      	mov	r4, r0
 8024060:	b140      	cbz	r0, 8024074 <__sfmoreglue+0x28>
 8024062:	2100      	movs	r1, #0
 8024064:	e9c0 1600 	strd	r1, r6, [r0]
 8024068:	300c      	adds	r0, #12
 802406a:	60a0      	str	r0, [r4, #8]
 802406c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8024070:	f7ff f9b4 	bl	80233dc <memset>
 8024074:	4620      	mov	r0, r4
 8024076:	bd70      	pop	{r4, r5, r6, pc}

08024078 <__sfp_lock_acquire>:
 8024078:	4801      	ldr	r0, [pc, #4]	; (8024080 <__sfp_lock_acquire+0x8>)
 802407a:	f000 b8b3 	b.w	80241e4 <__retarget_lock_acquire_recursive>
 802407e:	bf00      	nop
 8024080:	2400b112 	.word	0x2400b112

08024084 <__sfp_lock_release>:
 8024084:	4801      	ldr	r0, [pc, #4]	; (802408c <__sfp_lock_release+0x8>)
 8024086:	f000 b8af 	b.w	80241e8 <__retarget_lock_release_recursive>
 802408a:	bf00      	nop
 802408c:	2400b112 	.word	0x2400b112

08024090 <__sinit_lock_acquire>:
 8024090:	4801      	ldr	r0, [pc, #4]	; (8024098 <__sinit_lock_acquire+0x8>)
 8024092:	f000 b8a7 	b.w	80241e4 <__retarget_lock_acquire_recursive>
 8024096:	bf00      	nop
 8024098:	2400b113 	.word	0x2400b113

0802409c <__sinit_lock_release>:
 802409c:	4801      	ldr	r0, [pc, #4]	; (80240a4 <__sinit_lock_release+0x8>)
 802409e:	f000 b8a3 	b.w	80241e8 <__retarget_lock_release_recursive>
 80240a2:	bf00      	nop
 80240a4:	2400b113 	.word	0x2400b113

080240a8 <__sinit>:
 80240a8:	b510      	push	{r4, lr}
 80240aa:	4604      	mov	r4, r0
 80240ac:	f7ff fff0 	bl	8024090 <__sinit_lock_acquire>
 80240b0:	69a3      	ldr	r3, [r4, #24]
 80240b2:	b11b      	cbz	r3, 80240bc <__sinit+0x14>
 80240b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80240b8:	f7ff bff0 	b.w	802409c <__sinit_lock_release>
 80240bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80240c0:	6523      	str	r3, [r4, #80]	; 0x50
 80240c2:	4b13      	ldr	r3, [pc, #76]	; (8024110 <__sinit+0x68>)
 80240c4:	4a13      	ldr	r2, [pc, #76]	; (8024114 <__sinit+0x6c>)
 80240c6:	681b      	ldr	r3, [r3, #0]
 80240c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80240ca:	42a3      	cmp	r3, r4
 80240cc:	bf04      	itt	eq
 80240ce:	2301      	moveq	r3, #1
 80240d0:	61a3      	streq	r3, [r4, #24]
 80240d2:	4620      	mov	r0, r4
 80240d4:	f000 f820 	bl	8024118 <__sfp>
 80240d8:	6060      	str	r0, [r4, #4]
 80240da:	4620      	mov	r0, r4
 80240dc:	f000 f81c 	bl	8024118 <__sfp>
 80240e0:	60a0      	str	r0, [r4, #8]
 80240e2:	4620      	mov	r0, r4
 80240e4:	f000 f818 	bl	8024118 <__sfp>
 80240e8:	2200      	movs	r2, #0
 80240ea:	60e0      	str	r0, [r4, #12]
 80240ec:	2104      	movs	r1, #4
 80240ee:	6860      	ldr	r0, [r4, #4]
 80240f0:	f7ff ff82 	bl	8023ff8 <std>
 80240f4:	68a0      	ldr	r0, [r4, #8]
 80240f6:	2201      	movs	r2, #1
 80240f8:	2109      	movs	r1, #9
 80240fa:	f7ff ff7d 	bl	8023ff8 <std>
 80240fe:	68e0      	ldr	r0, [r4, #12]
 8024100:	2202      	movs	r2, #2
 8024102:	2112      	movs	r1, #18
 8024104:	f7ff ff78 	bl	8023ff8 <std>
 8024108:	2301      	movs	r3, #1
 802410a:	61a3      	str	r3, [r4, #24]
 802410c:	e7d2      	b.n	80240b4 <__sinit+0xc>
 802410e:	bf00      	nop
 8024110:	08026284 	.word	0x08026284
 8024114:	08024041 	.word	0x08024041

08024118 <__sfp>:
 8024118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802411a:	4607      	mov	r7, r0
 802411c:	f7ff ffac 	bl	8024078 <__sfp_lock_acquire>
 8024120:	4b1e      	ldr	r3, [pc, #120]	; (802419c <__sfp+0x84>)
 8024122:	681e      	ldr	r6, [r3, #0]
 8024124:	69b3      	ldr	r3, [r6, #24]
 8024126:	b913      	cbnz	r3, 802412e <__sfp+0x16>
 8024128:	4630      	mov	r0, r6
 802412a:	f7ff ffbd 	bl	80240a8 <__sinit>
 802412e:	3648      	adds	r6, #72	; 0x48
 8024130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8024134:	3b01      	subs	r3, #1
 8024136:	d503      	bpl.n	8024140 <__sfp+0x28>
 8024138:	6833      	ldr	r3, [r6, #0]
 802413a:	b30b      	cbz	r3, 8024180 <__sfp+0x68>
 802413c:	6836      	ldr	r6, [r6, #0]
 802413e:	e7f7      	b.n	8024130 <__sfp+0x18>
 8024140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8024144:	b9d5      	cbnz	r5, 802417c <__sfp+0x64>
 8024146:	4b16      	ldr	r3, [pc, #88]	; (80241a0 <__sfp+0x88>)
 8024148:	60e3      	str	r3, [r4, #12]
 802414a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802414e:	6665      	str	r5, [r4, #100]	; 0x64
 8024150:	f000 f847 	bl	80241e2 <__retarget_lock_init_recursive>
 8024154:	f7ff ff96 	bl	8024084 <__sfp_lock_release>
 8024158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802415c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8024160:	6025      	str	r5, [r4, #0]
 8024162:	61a5      	str	r5, [r4, #24]
 8024164:	2208      	movs	r2, #8
 8024166:	4629      	mov	r1, r5
 8024168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802416c:	f7ff f936 	bl	80233dc <memset>
 8024170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8024178:	4620      	mov	r0, r4
 802417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802417c:	3468      	adds	r4, #104	; 0x68
 802417e:	e7d9      	b.n	8024134 <__sfp+0x1c>
 8024180:	2104      	movs	r1, #4
 8024182:	4638      	mov	r0, r7
 8024184:	f7ff ff62 	bl	802404c <__sfmoreglue>
 8024188:	4604      	mov	r4, r0
 802418a:	6030      	str	r0, [r6, #0]
 802418c:	2800      	cmp	r0, #0
 802418e:	d1d5      	bne.n	802413c <__sfp+0x24>
 8024190:	f7ff ff78 	bl	8024084 <__sfp_lock_release>
 8024194:	230c      	movs	r3, #12
 8024196:	603b      	str	r3, [r7, #0]
 8024198:	e7ee      	b.n	8024178 <__sfp+0x60>
 802419a:	bf00      	nop
 802419c:	08026284 	.word	0x08026284
 80241a0:	ffff0001 	.word	0xffff0001

080241a4 <_fwalk_reent>:
 80241a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80241a8:	4606      	mov	r6, r0
 80241aa:	4688      	mov	r8, r1
 80241ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80241b0:	2700      	movs	r7, #0
 80241b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80241b6:	f1b9 0901 	subs.w	r9, r9, #1
 80241ba:	d505      	bpl.n	80241c8 <_fwalk_reent+0x24>
 80241bc:	6824      	ldr	r4, [r4, #0]
 80241be:	2c00      	cmp	r4, #0
 80241c0:	d1f7      	bne.n	80241b2 <_fwalk_reent+0xe>
 80241c2:	4638      	mov	r0, r7
 80241c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80241c8:	89ab      	ldrh	r3, [r5, #12]
 80241ca:	2b01      	cmp	r3, #1
 80241cc:	d907      	bls.n	80241de <_fwalk_reent+0x3a>
 80241ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80241d2:	3301      	adds	r3, #1
 80241d4:	d003      	beq.n	80241de <_fwalk_reent+0x3a>
 80241d6:	4629      	mov	r1, r5
 80241d8:	4630      	mov	r0, r6
 80241da:	47c0      	blx	r8
 80241dc:	4307      	orrs	r7, r0
 80241de:	3568      	adds	r5, #104	; 0x68
 80241e0:	e7e9      	b.n	80241b6 <_fwalk_reent+0x12>

080241e2 <__retarget_lock_init_recursive>:
 80241e2:	4770      	bx	lr

080241e4 <__retarget_lock_acquire_recursive>:
 80241e4:	4770      	bx	lr

080241e6 <__retarget_lock_release>:
 80241e6:	4770      	bx	lr

080241e8 <__retarget_lock_release_recursive>:
 80241e8:	4770      	bx	lr

080241ea <__swhatbuf_r>:
 80241ea:	b570      	push	{r4, r5, r6, lr}
 80241ec:	460e      	mov	r6, r1
 80241ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80241f2:	2900      	cmp	r1, #0
 80241f4:	b096      	sub	sp, #88	; 0x58
 80241f6:	4614      	mov	r4, r2
 80241f8:	461d      	mov	r5, r3
 80241fa:	da08      	bge.n	802420e <__swhatbuf_r+0x24>
 80241fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024200:	2200      	movs	r2, #0
 8024202:	602a      	str	r2, [r5, #0]
 8024204:	061a      	lsls	r2, r3, #24
 8024206:	d410      	bmi.n	802422a <__swhatbuf_r+0x40>
 8024208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802420c:	e00e      	b.n	802422c <__swhatbuf_r+0x42>
 802420e:	466a      	mov	r2, sp
 8024210:	f000 f8c2 	bl	8024398 <_fstat_r>
 8024214:	2800      	cmp	r0, #0
 8024216:	dbf1      	blt.n	80241fc <__swhatbuf_r+0x12>
 8024218:	9a01      	ldr	r2, [sp, #4]
 802421a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802421e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024222:	425a      	negs	r2, r3
 8024224:	415a      	adcs	r2, r3
 8024226:	602a      	str	r2, [r5, #0]
 8024228:	e7ee      	b.n	8024208 <__swhatbuf_r+0x1e>
 802422a:	2340      	movs	r3, #64	; 0x40
 802422c:	2000      	movs	r0, #0
 802422e:	6023      	str	r3, [r4, #0]
 8024230:	b016      	add	sp, #88	; 0x58
 8024232:	bd70      	pop	{r4, r5, r6, pc}

08024234 <__smakebuf_r>:
 8024234:	898b      	ldrh	r3, [r1, #12]
 8024236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024238:	079d      	lsls	r5, r3, #30
 802423a:	4606      	mov	r6, r0
 802423c:	460c      	mov	r4, r1
 802423e:	d507      	bpl.n	8024250 <__smakebuf_r+0x1c>
 8024240:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024244:	6023      	str	r3, [r4, #0]
 8024246:	6123      	str	r3, [r4, #16]
 8024248:	2301      	movs	r3, #1
 802424a:	6163      	str	r3, [r4, #20]
 802424c:	b002      	add	sp, #8
 802424e:	bd70      	pop	{r4, r5, r6, pc}
 8024250:	ab01      	add	r3, sp, #4
 8024252:	466a      	mov	r2, sp
 8024254:	f7ff ffc9 	bl	80241ea <__swhatbuf_r>
 8024258:	9900      	ldr	r1, [sp, #0]
 802425a:	4605      	mov	r5, r0
 802425c:	4630      	mov	r0, r6
 802425e:	f7ff f931 	bl	80234c4 <_malloc_r>
 8024262:	b948      	cbnz	r0, 8024278 <__smakebuf_r+0x44>
 8024264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024268:	059a      	lsls	r2, r3, #22
 802426a:	d4ef      	bmi.n	802424c <__smakebuf_r+0x18>
 802426c:	f023 0303 	bic.w	r3, r3, #3
 8024270:	f043 0302 	orr.w	r3, r3, #2
 8024274:	81a3      	strh	r3, [r4, #12]
 8024276:	e7e3      	b.n	8024240 <__smakebuf_r+0xc>
 8024278:	4b0d      	ldr	r3, [pc, #52]	; (80242b0 <__smakebuf_r+0x7c>)
 802427a:	62b3      	str	r3, [r6, #40]	; 0x28
 802427c:	89a3      	ldrh	r3, [r4, #12]
 802427e:	6020      	str	r0, [r4, #0]
 8024280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024284:	81a3      	strh	r3, [r4, #12]
 8024286:	9b00      	ldr	r3, [sp, #0]
 8024288:	6163      	str	r3, [r4, #20]
 802428a:	9b01      	ldr	r3, [sp, #4]
 802428c:	6120      	str	r0, [r4, #16]
 802428e:	b15b      	cbz	r3, 80242a8 <__smakebuf_r+0x74>
 8024290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024294:	4630      	mov	r0, r6
 8024296:	f000 f891 	bl	80243bc <_isatty_r>
 802429a:	b128      	cbz	r0, 80242a8 <__smakebuf_r+0x74>
 802429c:	89a3      	ldrh	r3, [r4, #12]
 802429e:	f023 0303 	bic.w	r3, r3, #3
 80242a2:	f043 0301 	orr.w	r3, r3, #1
 80242a6:	81a3      	strh	r3, [r4, #12]
 80242a8:	89a0      	ldrh	r0, [r4, #12]
 80242aa:	4305      	orrs	r5, r0
 80242ac:	81a5      	strh	r5, [r4, #12]
 80242ae:	e7cd      	b.n	802424c <__smakebuf_r+0x18>
 80242b0:	08024041 	.word	0x08024041

080242b4 <__malloc_lock>:
 80242b4:	4801      	ldr	r0, [pc, #4]	; (80242bc <__malloc_lock+0x8>)
 80242b6:	f7ff bf95 	b.w	80241e4 <__retarget_lock_acquire_recursive>
 80242ba:	bf00      	nop
 80242bc:	2400b111 	.word	0x2400b111

080242c0 <__malloc_unlock>:
 80242c0:	4801      	ldr	r0, [pc, #4]	; (80242c8 <__malloc_unlock+0x8>)
 80242c2:	f7ff bf91 	b.w	80241e8 <__retarget_lock_release_recursive>
 80242c6:	bf00      	nop
 80242c8:	2400b111 	.word	0x2400b111

080242cc <__sread>:
 80242cc:	b510      	push	{r4, lr}
 80242ce:	460c      	mov	r4, r1
 80242d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80242d4:	f000 f894 	bl	8024400 <_read_r>
 80242d8:	2800      	cmp	r0, #0
 80242da:	bfab      	itete	ge
 80242dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80242de:	89a3      	ldrhlt	r3, [r4, #12]
 80242e0:	181b      	addge	r3, r3, r0
 80242e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80242e6:	bfac      	ite	ge
 80242e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80242ea:	81a3      	strhlt	r3, [r4, #12]
 80242ec:	bd10      	pop	{r4, pc}

080242ee <__swrite>:
 80242ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242f2:	461f      	mov	r7, r3
 80242f4:	898b      	ldrh	r3, [r1, #12]
 80242f6:	05db      	lsls	r3, r3, #23
 80242f8:	4605      	mov	r5, r0
 80242fa:	460c      	mov	r4, r1
 80242fc:	4616      	mov	r6, r2
 80242fe:	d505      	bpl.n	802430c <__swrite+0x1e>
 8024300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024304:	2302      	movs	r3, #2
 8024306:	2200      	movs	r2, #0
 8024308:	f000 f868 	bl	80243dc <_lseek_r>
 802430c:	89a3      	ldrh	r3, [r4, #12]
 802430e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024316:	81a3      	strh	r3, [r4, #12]
 8024318:	4632      	mov	r2, r6
 802431a:	463b      	mov	r3, r7
 802431c:	4628      	mov	r0, r5
 802431e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024322:	f000 b817 	b.w	8024354 <_write_r>

08024326 <__sseek>:
 8024326:	b510      	push	{r4, lr}
 8024328:	460c      	mov	r4, r1
 802432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802432e:	f000 f855 	bl	80243dc <_lseek_r>
 8024332:	1c43      	adds	r3, r0, #1
 8024334:	89a3      	ldrh	r3, [r4, #12]
 8024336:	bf15      	itete	ne
 8024338:	6560      	strne	r0, [r4, #84]	; 0x54
 802433a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802433e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024342:	81a3      	strheq	r3, [r4, #12]
 8024344:	bf18      	it	ne
 8024346:	81a3      	strhne	r3, [r4, #12]
 8024348:	bd10      	pop	{r4, pc}

0802434a <__sclose>:
 802434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802434e:	f000 b813 	b.w	8024378 <_close_r>
	...

08024354 <_write_r>:
 8024354:	b538      	push	{r3, r4, r5, lr}
 8024356:	4d07      	ldr	r5, [pc, #28]	; (8024374 <_write_r+0x20>)
 8024358:	4604      	mov	r4, r0
 802435a:	4608      	mov	r0, r1
 802435c:	4611      	mov	r1, r2
 802435e:	2200      	movs	r2, #0
 8024360:	602a      	str	r2, [r5, #0]
 8024362:	461a      	mov	r2, r3
 8024364:	f7dd f90f 	bl	8001586 <_write>
 8024368:	1c43      	adds	r3, r0, #1
 802436a:	d102      	bne.n	8024372 <_write_r+0x1e>
 802436c:	682b      	ldr	r3, [r5, #0]
 802436e:	b103      	cbz	r3, 8024372 <_write_r+0x1e>
 8024370:	6023      	str	r3, [r4, #0]
 8024372:	bd38      	pop	{r3, r4, r5, pc}
 8024374:	2400b114 	.word	0x2400b114

08024378 <_close_r>:
 8024378:	b538      	push	{r3, r4, r5, lr}
 802437a:	4d06      	ldr	r5, [pc, #24]	; (8024394 <_close_r+0x1c>)
 802437c:	2300      	movs	r3, #0
 802437e:	4604      	mov	r4, r0
 8024380:	4608      	mov	r0, r1
 8024382:	602b      	str	r3, [r5, #0]
 8024384:	f7dd f91b 	bl	80015be <_close>
 8024388:	1c43      	adds	r3, r0, #1
 802438a:	d102      	bne.n	8024392 <_close_r+0x1a>
 802438c:	682b      	ldr	r3, [r5, #0]
 802438e:	b103      	cbz	r3, 8024392 <_close_r+0x1a>
 8024390:	6023      	str	r3, [r4, #0]
 8024392:	bd38      	pop	{r3, r4, r5, pc}
 8024394:	2400b114 	.word	0x2400b114

08024398 <_fstat_r>:
 8024398:	b538      	push	{r3, r4, r5, lr}
 802439a:	4d07      	ldr	r5, [pc, #28]	; (80243b8 <_fstat_r+0x20>)
 802439c:	2300      	movs	r3, #0
 802439e:	4604      	mov	r4, r0
 80243a0:	4608      	mov	r0, r1
 80243a2:	4611      	mov	r1, r2
 80243a4:	602b      	str	r3, [r5, #0]
 80243a6:	f7dd f916 	bl	80015d6 <_fstat>
 80243aa:	1c43      	adds	r3, r0, #1
 80243ac:	d102      	bne.n	80243b4 <_fstat_r+0x1c>
 80243ae:	682b      	ldr	r3, [r5, #0]
 80243b0:	b103      	cbz	r3, 80243b4 <_fstat_r+0x1c>
 80243b2:	6023      	str	r3, [r4, #0]
 80243b4:	bd38      	pop	{r3, r4, r5, pc}
 80243b6:	bf00      	nop
 80243b8:	2400b114 	.word	0x2400b114

080243bc <_isatty_r>:
 80243bc:	b538      	push	{r3, r4, r5, lr}
 80243be:	4d06      	ldr	r5, [pc, #24]	; (80243d8 <_isatty_r+0x1c>)
 80243c0:	2300      	movs	r3, #0
 80243c2:	4604      	mov	r4, r0
 80243c4:	4608      	mov	r0, r1
 80243c6:	602b      	str	r3, [r5, #0]
 80243c8:	f7dd f915 	bl	80015f6 <_isatty>
 80243cc:	1c43      	adds	r3, r0, #1
 80243ce:	d102      	bne.n	80243d6 <_isatty_r+0x1a>
 80243d0:	682b      	ldr	r3, [r5, #0]
 80243d2:	b103      	cbz	r3, 80243d6 <_isatty_r+0x1a>
 80243d4:	6023      	str	r3, [r4, #0]
 80243d6:	bd38      	pop	{r3, r4, r5, pc}
 80243d8:	2400b114 	.word	0x2400b114

080243dc <_lseek_r>:
 80243dc:	b538      	push	{r3, r4, r5, lr}
 80243de:	4d07      	ldr	r5, [pc, #28]	; (80243fc <_lseek_r+0x20>)
 80243e0:	4604      	mov	r4, r0
 80243e2:	4608      	mov	r0, r1
 80243e4:	4611      	mov	r1, r2
 80243e6:	2200      	movs	r2, #0
 80243e8:	602a      	str	r2, [r5, #0]
 80243ea:	461a      	mov	r2, r3
 80243ec:	f7dd f90e 	bl	800160c <_lseek>
 80243f0:	1c43      	adds	r3, r0, #1
 80243f2:	d102      	bne.n	80243fa <_lseek_r+0x1e>
 80243f4:	682b      	ldr	r3, [r5, #0]
 80243f6:	b103      	cbz	r3, 80243fa <_lseek_r+0x1e>
 80243f8:	6023      	str	r3, [r4, #0]
 80243fa:	bd38      	pop	{r3, r4, r5, pc}
 80243fc:	2400b114 	.word	0x2400b114

08024400 <_read_r>:
 8024400:	b538      	push	{r3, r4, r5, lr}
 8024402:	4d07      	ldr	r5, [pc, #28]	; (8024420 <_read_r+0x20>)
 8024404:	4604      	mov	r4, r0
 8024406:	4608      	mov	r0, r1
 8024408:	4611      	mov	r1, r2
 802440a:	2200      	movs	r2, #0
 802440c:	602a      	str	r2, [r5, #0]
 802440e:	461a      	mov	r2, r3
 8024410:	f7dd f89c 	bl	800154c <_read>
 8024414:	1c43      	adds	r3, r0, #1
 8024416:	d102      	bne.n	802441e <_read_r+0x1e>
 8024418:	682b      	ldr	r3, [r5, #0]
 802441a:	b103      	cbz	r3, 802441e <_read_r+0x1e>
 802441c:	6023      	str	r3, [r4, #0]
 802441e:	bd38      	pop	{r3, r4, r5, pc}
 8024420:	2400b114 	.word	0x2400b114

08024424 <_init>:
 8024424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024426:	bf00      	nop
 8024428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802442a:	bc08      	pop	{r3}
 802442c:	469e      	mov	lr, r3
 802442e:	4770      	bx	lr

08024430 <_fini>:
 8024430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024432:	bf00      	nop
 8024434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024436:	bc08      	pop	{r3}
 8024438:	469e      	mov	lr, r3
 802443a:	4770      	bx	lr
