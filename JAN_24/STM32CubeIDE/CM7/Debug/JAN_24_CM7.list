
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007594  08007594  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007594  08007594  00017594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800759c  0800759c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800759c  0800759c  0001759c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080075a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  24000074  08007618  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000210  08007618  00020210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001807e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e7  00000000  00000000  00038120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0003a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aa6a  00000000  00000000  0003ca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a62  00000000  00000000  0007746a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018840b  00000000  00000000  0008decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002162d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d0  00000000  00000000  00216328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007500 	.word	0x08007500

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08007500 	.word	0x08007500

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a2      	sub	sp, #136	; 0x88
 8000688:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800068a:	4b5e      	ldr	r3, [pc, #376]	; (8000804 <main+0x180>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d11b      	bne.n	80006ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
}
 80006a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a2:	4b58      	ldr	r3, [pc, #352]	; (8000804 <main+0x180>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b0:	f3bf 8f6f 	isb	sy
}
 80006b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <main+0x180>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a52      	ldr	r2, [pc, #328]	; (8000804 <main+0x180>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
}
 80006c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c8:	f3bf 8f6f 	isb	sy
}
 80006cc:	e000      	b.n	80006d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d0:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <main+0x180>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d138      	bne.n	800074e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <main+0x180>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e4:	f3bf 8f4f 	dsb	sy
}
 80006e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <main+0x180>)
 80006ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f0:	67fb      	str	r3, [r7, #124]	; 0x7c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006f4:	0b5b      	lsrs	r3, r3, #13
 80006f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fa:	67bb      	str	r3, [r7, #120]	; 0x78
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000704:	677b      	str	r3, [r7, #116]	; 0x74
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000708:	015a      	lsls	r2, r3, #5
 800070a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800070e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000710:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000712:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000714:	493b      	ldr	r1, [pc, #236]	; (8000804 <main+0x180>)
 8000716:	4313      	orrs	r3, r2
 8000718:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800071c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800071e:	1e5a      	subs	r2, r3, #1
 8000720:	677a      	str	r2, [r7, #116]	; 0x74
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1ef      	bne.n	8000706 <main+0x82>
    } while(sets-- != 0U);
 8000726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	67ba      	str	r2, [r7, #120]	; 0x78
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e5      	bne.n	80006fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000730:	f3bf 8f4f 	dsb	sy
}
 8000734:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <main+0x180>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a32      	ldr	r2, [pc, #200]	; (8000804 <main+0x180>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000740:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000742:	f3bf 8f4f 	dsb	sy
}
 8000746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000748:	f3bf 8f6f 	isb	sy
}
 800074c:	e000      	b.n	8000750 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800074e:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 fdaa 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f866 	bl	8000824 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <main+0x184>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <main+0x184>)
 8000760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <main+0x184>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 f9bf 	bl	8000af8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800077a:	f000 f8cd 	bl	8000918 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800077e:	f000 f96f 	bl	8000a60 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000782:	f000 f921 	bl	80009c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <main+0x188>)
 8000788:	f004 fc10 	bl	8004fac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint16_t writeBuf = 0b0000110010001111;
 800078c:	f640 438f 	movw	r3, #3215	; 0xc8f
 8000790:	817b      	strh	r3, [r7, #10]
  const uint16_t writeBuf2 = 0b0000110011110000;
 8000792:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 8000796:	813b      	strh	r3, [r7, #8]
  while (1)
  {
	  uart_buf_len = sprintf(uart_buf, "S");
 8000798:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800079c:	491c      	ldr	r1, [pc, #112]	; (8000810 <main+0x18c>)
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fa40 	bl	8006c24 <siprintf>
 80007a4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  spi_buf_len = sprintf(spi_buf, "HI THERE");
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4919      	ldr	r1, [pc, #100]	; (8000814 <main+0x190>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fa38 	bl	8006c24 <siprintf>
 80007b4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80


	  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4816      	ldr	r0, [pc, #88]	; (8000818 <main+0x194>)
 80007be:	f001 f90e 	bl	80019de <HAL_GPIO_TogglePin>


	  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf,1,100);
 80007c2:	f107 010a 	add.w	r1, r7, #10
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	2201      	movs	r2, #1
 80007ca:	4814      	ldr	r0, [pc, #80]	; (800081c <main+0x198>)
 80007cc:	f004 f8b2 	bl	8004934 <HAL_SPI_Transmit>
	  HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 80007d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <main+0x19c>)
 80007de:	f005 f8db 	bl	8005998 <HAL_UART_Transmit>
	  HAL_Delay(5000);
 80007e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007e6:	f000 fdf1 	bl	80013cc <HAL_Delay>
	  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 80007ea:	f107 0108 	add.w	r1, r7, #8
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	2201      	movs	r2, #1
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <main+0x198>)
 80007f4:	f004 f89e 	bl	8004934 <HAL_SPI_Transmit>
	  HAL_Delay(5000);
 80007f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80007fc:	f000 fde6 	bl	80013cc <HAL_Delay>
	  uart_buf_len = sprintf(uart_buf, "S");
 8000800:	e7ca      	b.n	8000798 <main+0x114>
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	58024400 	.word	0x58024400
 800080c:	24000118 	.word	0x24000118
 8000810:	08007518 	.word	0x08007518
 8000814:	0800751c 	.word	0x0800751c
 8000818:	58022000 	.word	0x58022000
 800081c:	24000090 	.word	0x24000090
 8000820:	24000164 	.word	0x24000164

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09c      	sub	sp, #112	; 0x70
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	224c      	movs	r2, #76	; 0x4c
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 f9ee 	bl	8006c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 f9e8 	bl	8006c14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000844:	2004      	movs	r0, #4
 8000846:	f001 f8e5 	bl	8001a14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <SystemClock_Config+0xec>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <SystemClock_Config+0xec>)
 8000854:	f023 0301 	bic.w	r3, r3, #1
 8000858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <SystemClock_Config+0xec>)
 800085c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <SystemClock_Config+0xf0>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a2a      	ldr	r2, [pc, #168]	; (8000914 <SystemClock_Config+0xf0>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xf0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800087c:	bf00      	nop
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <SystemClock_Config+0xf0>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800088a:	d1f8      	bne.n	800087e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089a:	2302      	movs	r3, #2
 800089c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800089e:	2305      	movs	r3, #5
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008b2:	2308      	movs	r3, #8
 80008b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f900 	bl	8001ac8 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008ce:	f000 fa6d 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	233f      	movs	r3, #63	; 0x3f
 80008d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008de:	2308      	movs	r3, #8
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e2:	2340      	movs	r3, #64	; 0x40
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 fd3f 	bl	800237c <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000904:	f000 fa52 	bl	8000dac <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3770      	adds	r7, #112	; 0x70
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58000400 	.word	0x58000400
 8000914:	58024800 	.word	0x58024800

08000918 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800091e:	4a29      	ldr	r2, [pc, #164]	; (80009c4 <MX_SPI2_Init+0xac>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000924:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000928:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800092c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000930:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000932:	4b23      	ldr	r3, [pc, #140]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000934:	220f      	movs	r2, #15
 8000936:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000946:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800094a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800094e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000952:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000988:	2200      	movs	r2, #0
 800098a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800098e:	2200      	movs	r2, #0
 8000990:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_SPI2_Init+0xa8>)
 8000994:	2200      	movs	r2, #0
 8000996:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_SPI2_Init+0xa8>)
 800099a:	2200      	movs	r2, #0
 800099c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_SPI2_Init+0xa8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_SPI2_Init+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_SPI2_Init+0xa8>)
 80009ac:	f003 fe9e 	bl	80046ec <HAL_SPI_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80009b6:	f000 f9f9 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	24000090 	.word	0x24000090
 80009c4:	40003800 	.word	0x40003800

080009c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80009ee:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40;
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_TIM2_Init+0x94>)
 80009fc:	2228      	movs	r2, #40	; 0x28
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a0e:	f004 fa76 	bl	8004efe <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a18:	f000 f9c8 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a2a:	f004 fc57 	bl	80052dc <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 f9ba 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM2_Init+0x94>)
 8000a46:	f004 feab 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a50:	f000 f9ac 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	24000118 	.word	0x24000118

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <MX_USART3_UART_Init+0x94>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000aaa:	f004 ff25 	bl	80058f8 <HAL_UART_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f97a 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000abc:	f005 ffb5 	bl	8006a2a <HAL_UARTEx_SetTxFifoThreshold>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac6:	f000 f971 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aca:	2100      	movs	r1, #0
 8000acc:	4808      	ldr	r0, [pc, #32]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f005 ffea 	bl	8006aa6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f000 f968 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_USART3_UART_Init+0x90>)
 8000ade:	f005 ff6b 	bl	80069b8 <HAL_UARTEx_DisableFifoMode>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae8:	f000 f960 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	24000164 	.word	0x24000164
 8000af4:	40004800 	.word	0x40004800

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a9b      	ldr	r2, [pc, #620]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b99      	ldr	r3, [pc, #612]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2c:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a94      	ldr	r2, [pc, #592]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b91      	ldr	r3, [pc, #580]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a8c      	ldr	r2, [pc, #560]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b8a      	ldr	r3, [pc, #552]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	4b86      	ldr	r3, [pc, #536]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6e:	4a85      	ldr	r2, [pc, #532]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b78:	4b82      	ldr	r3, [pc, #520]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b86:	4b7f      	ldr	r3, [pc, #508]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a7d      	ldr	r2, [pc, #500]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a76      	ldr	r2, [pc, #472]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b73      	ldr	r3, [pc, #460]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc2:	4b70      	ldr	r3, [pc, #448]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a6e      	ldr	r2, [pc, #440]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b6c      	ldr	r3, [pc, #432]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be0:	4b68      	ldr	r3, [pc, #416]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a67      	ldr	r2, [pc, #412]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b64      	ldr	r3, [pc, #400]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0320 	and.w	r3, r3, #32
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b61      	ldr	r3, [pc, #388]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a5f      	ldr	r2, [pc, #380]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <MX_GPIO_Init+0x28c>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SCLK_Pin|VNA_TRIG_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	21c0      	movs	r1, #192	; 0xc0
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <MX_GPIO_Init+0x290>)
 8000c22:	f000 fec3 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4857      	ldr	r0, [pc, #348]	; (8000d8c <MX_GPIO_Init+0x294>)
 8000c2e:	f000 febd 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c38:	4855      	ldr	r0, [pc, #340]	; (8000d90 <MX_GPIO_Init+0x298>)
 8000c3a:	f000 feb7 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	4854      	ldr	r0, [pc, #336]	; (8000d94 <MX_GPIO_Init+0x29c>)
 8000c44:	f000 feb2 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPEC_CLK_Pin|SPEC_RESET_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c4e:	4852      	ldr	r0, [pc, #328]	; (8000d98 <MX_GPIO_Init+0x2a0>)
 8000c50:	f000 feac 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SCLK_Pin VNA_TRIG_Pin */
  GPIO_InitStruct.Pin = ADC_SCLK_Pin|VNA_TRIG_Pin;
 8000c54:	23c0      	movs	r3, #192	; 0xc0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4847      	ldr	r0, [pc, #284]	; (8000d88 <MX_GPIO_Init+0x290>)
 8000c6c:	f000 fcee 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x294>)
 8000c8a:	f000 fcdf 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_TRIG_BUFF_Pin */
  GPIO_InitStruct.Pin = SPEC_TRIG_BUFF_Pin;
 8000c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPEC_TRIG_BUFF_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	483b      	ldr	r0, [pc, #236]	; (8000d90 <MX_GPIO_Init+0x298>)
 8000ca4:	f000 fcd2 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_STRT_BUFF_Pin */
  GPIO_InitStruct.Pin = SPEC_STRT_BUFF_Pin;
 8000ca8:	2340      	movs	r3, #64	; 0x40
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPEC_STRT_BUFF_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <MX_GPIO_Init+0x2a4>)
 8000cbc:	f000 fcc6 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	482d      	ldr	r0, [pc, #180]	; (8000d90 <MX_GPIO_Init+0x298>)
 8000cda:	f000 fcb7 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_MISO_Pin */
  GPIO_InitStruct.Pin = ADC_MISO_Pin;
 8000cde:	2308      	movs	r3, #8
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_MISO_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	482b      	ldr	r0, [pc, #172]	; (8000da0 <MX_GPIO_Init+0x2a8>)
 8000cf2:	f000 fcab 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : VSENSE2_Pin */
  GPIO_InitStruct.Pin = VSENSE2_Pin;
 8000cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VSENSE2_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4826      	ldr	r0, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x2ac>)
 8000d0c:	f000 fc9e 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE1_Pin VSENSE5_Pin */
  GPIO_InitStruct.Pin = VSENSE1_Pin|VSENSE5_Pin;
 8000d10:	2309      	movs	r3, #9
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d14:	2303      	movs	r3, #3
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <MX_GPIO_Init+0x2b0>)
 8000d24:	f000 fc92 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_GPIO_Init+0x29c>)
 8000d40:	f000 fc84 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEC_CLK_Pin SPEC_RESET_Pin */
  GPIO_InitStruct.Pin = SPEC_CLK_Pin|SPEC_RESET_Pin;
 8000d44:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <MX_GPIO_Init+0x2a0>)
 8000d5e:	f000 fc75 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE3_Pin VSENSE4_Pin */
  GPIO_InitStruct.Pin = VSENSE3_Pin|VSENSE4_Pin;
 8000d62:	2303      	movs	r3, #3
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_GPIO_Init+0x29c>)
 8000d76:	f000 fc69 	bl	800164c <HAL_GPIO_Init>

}
 8000d7a:	bf00      	nop
 8000d7c:	3738      	adds	r7, #56	; 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58021c00 	.word	0x58021c00
 8000d90:	58022000 	.word	0x58022000
 8000d94:	58020000 	.word	0x58020000
 8000d98:	58020c00 	.word	0x58020c00
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58021800 	.word	0x58021800
 8000da4:	58021400 	.word	0x58021400
 8000da8:	58020800 	.word	0x58020800

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc4:	4a08      	ldr	r2, [pc, #32]	; (8000de8 <HAL_MspInit+0x30>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_MspInit+0x30>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	58024400 	.word	0x58024400

08000dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0bc      	sub	sp, #240	; 0xf0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	22c0      	movs	r2, #192	; 0xc0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f005 ff01 	bl	8006c14 <memset>
  if(hspi->Instance==SPI2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <HAL_SPI_MspInit+0x138>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d17e      	bne.n	8000f1a <HAL_SPI_MspInit+0x12e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fe2f 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e3c:	f7ff ffb6 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e46:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a29      	ldr	r2, [pc, #164]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_SPI_MspInit+0x13c>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e9a:	2310      	movs	r3, #16
 8000e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <HAL_SPI_MspInit+0x140>)
 8000ec0:	f000 fbc4 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000edc:	2305      	movs	r3, #5
 8000ede:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <HAL_SPI_MspInit+0x144>)
 8000eea:	f000 fbaf 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_SPI_MspInit+0x140>)
 8000f16:	f000 fb99 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37f0      	adds	r7, #240	; 0xf0
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40003800 	.word	0x40003800
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	58020c00 	.word	0x58020c00

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d116      	bne.n	8000f74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x48>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 fb3a 	bl	80015e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f000 fb51 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	58024400 	.word	0x58024400

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0ba      	sub	sp, #232	; 0xe8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	22c0      	movs	r2, #192	; 0xc0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f005 fe37 	bl	8006c14 <memset>
  if(huart->Instance==USART3)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <HAL_UART_MspInit+0xc8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d146      	bne.n	800103e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb0:	f04f 0202 	mov.w	r2, #2
 8000fb4:	f04f 0300 	mov.w	r3, #0
 8000fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fd64 	bl	8002a94 <HAL_RCCEx_PeriphCLKConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fd2:	f7ff feeb 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_UART_MspInit+0xcc>)
 8000fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	; (800104c <HAL_UART_MspInit+0xcc>)
 8000fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <HAL_UART_MspInit+0xcc>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0xcc>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_UART_MspInit+0xcc>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0xcc>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001012:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0xd0>)
 800103a:	f000 fb07 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	37e8      	adds	r7, #232	; 0xe8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004800 	.word	0x40004800
 800104c:	58024400 	.word	0x58024400
 8001050:	58020400 	.word	0x58020400

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f974 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM2_IRQHandler+0x10>)
 80010ae:	f003 fff5 	bl	800509c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000118 	.word	0x24000118

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f005 fd68 	bl	8006bc0 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	24080000 	.word	0x24080000
 800111c:	00000400 	.word	0x00000400
 8001120:	240001f8 	.word	0x240001f8
 8001124:	24000210 	.word	0x24000210

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f000 f826 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f005 fd39 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fa93 	bl	8000684 <main>
  bx  lr
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001168:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800116c:	080075a4 	.word	0x080075a4
  ldr r2, =_sbss
 8001170:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001174:	24000210 	.word	0x24000210

08001178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC3_IRQHandler>
	...

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <SystemInit+0xfc>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <SystemInit+0xfc>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001190:	4b39      	ldr	r3, [pc, #228]	; (8001278 <SystemInit+0xfc>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a38      	ldr	r2, [pc, #224]	; (8001278 <SystemInit+0xfc>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <SystemInit+0x100>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 030f 	and.w	r3, r3, #15
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d807      	bhi.n	80011b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <SystemInit+0x100>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 030f 	bic.w	r3, r3, #15
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <SystemInit+0x100>)
 80011b2:	f043 0307 	orr.w	r3, r3, #7
 80011b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <SystemInit+0x104>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a30      	ldr	r2, [pc, #192]	; (8001280 <SystemInit+0x104>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c4:	4b2e      	ldr	r3, [pc, #184]	; (8001280 <SystemInit+0x104>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <SystemInit+0x104>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	492c      	ldr	r1, [pc, #176]	; (8001280 <SystemInit+0x104>)
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <SystemInit+0x108>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <SystemInit+0x100>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <SystemInit+0x100>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f023 030f 	bic.w	r3, r3, #15
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <SystemInit+0x100>)
 80011ec:	f043 0307 	orr.w	r3, r3, #7
 80011f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <SystemInit+0x104>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <SystemInit+0x104>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <SystemInit+0x104>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <SystemInit+0x104>)
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <SystemInit+0x10c>)
 8001208:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <SystemInit+0x104>)
 800120c:	4a1f      	ldr	r2, [pc, #124]	; (800128c <SystemInit+0x110>)
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <SystemInit+0x104>)
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <SystemInit+0x114>)
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <SystemInit+0x104>)
 8001218:	2200      	movs	r2, #0
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <SystemInit+0x104>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <SystemInit+0x114>)
 8001220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <SystemInit+0x104>)
 8001224:	2200      	movs	r2, #0
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <SystemInit+0x104>)
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <SystemInit+0x114>)
 800122c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <SystemInit+0x104>)
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <SystemInit+0x104>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a11      	ldr	r2, [pc, #68]	; (8001280 <SystemInit+0x104>)
 800123a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SystemInit+0x104>)
 8001242:	2200      	movs	r2, #0
 8001244:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <SystemInit+0x118>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <SystemInit+0x118>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001250:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <SystemInit+0x11c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <SystemInit+0x120>)
 8001258:	4013      	ands	r3, r2
 800125a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125e:	d202      	bcs.n	8001266 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <SystemInit+0x124>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <SystemInit+0x128>)
 8001268:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800126c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	52002000 	.word	0x52002000
 8001280:	58024400 	.word	0x58024400
 8001284:	eaf6ed7f 	.word	0xeaf6ed7f
 8001288:	02020200 	.word	0x02020200
 800128c:	01ff0000 	.word	0x01ff0000
 8001290:	01010280 	.word	0x01010280
 8001294:	580000c0 	.word	0x580000c0
 8001298:	5c001000 	.word	0x5c001000
 800129c:	ffff0000 	.word	0xffff0000
 80012a0:	51008108 	.word	0x51008108
 80012a4:	52004000 	.word	0x52004000

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ae:	2003      	movs	r0, #3
 80012b0:	f000 f98c 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b4:	f001 fa18 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80012b8:	4602      	mov	r2, r0
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_Init+0x68>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <HAL_Init+0x6c>)
 80012c6:	5ccb      	ldrb	r3, [r1, r3]
 80012c8:	f003 031f 	and.w	r3, r3, #31
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_Init+0x68>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_Init+0x6c>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_Init+0x70>)
 80012ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_Init+0x74>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f814 	bl	8001320 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e002      	b.n	8001308 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001302:	f7ff fd59 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	58024400 	.word	0x58024400
 8001314:	08007528 	.word	0x08007528
 8001318:	24000004 	.word	0x24000004
 800131c:	24000000 	.word	0x24000000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001328:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_InitTick+0x60>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e021      	b.n	8001378 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_InitTick+0x64>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_InitTick+0x60>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	fbb3 f3f1 	udiv	r3, r3, r1
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f971 	bl	8001632 <HAL_SYSTICK_Config>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00e      	b.n	8001378 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d80a      	bhi.n	8001376 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001360:	2200      	movs	r2, #0
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f000 f93b 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_InitTick+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2400000c 	.word	0x2400000c
 8001384:	24000000 	.word	0x24000000
 8001388:	24000008 	.word	0x24000008

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	2400000c 	.word	0x2400000c
 80013b0:	240001fc 	.word	0x240001fc

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	240001fc 	.word	0x240001fc

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400000c 	.word	0x2400000c

08001414 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetREVID+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0c1b      	lsrs	r3, r3, #16
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	5c001000 	.word	0x5c001000

0800142c <__NVIC_SetPriorityGrouping>:
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	4313      	orrs	r3, r2
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	; (800146c <__NVIC_SetPriorityGrouping+0x40>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00
 8001470:	05fa0000 	.word	0x05fa0000

08001474 <__NVIC_GetPriorityGrouping>:
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <__NVIC_EnableIRQ+0x38>)
 80014aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff29 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff40 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff33 	bl	8001490 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa4 	bl	8001588 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800165a:	4b89      	ldr	r3, [pc, #548]	; (8001880 <HAL_GPIO_Init+0x234>)
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800165e:	e194      	b.n	800198a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8186 	beq.w	8001984 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x44>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80e0 	beq.w	8001984 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x238>)
 80017c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_GPIO_Init+0x238>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017d4:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_GPIO_Init+0x238>)
 80017d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <HAL_GPIO_Init+0x23c>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_GPIO_Init+0x240>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d052      	beq.n	80018b4 <HAL_GPIO_Init+0x268>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_GPIO_Init+0x244>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d031      	beq.n	800187a <HAL_GPIO_Init+0x22e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <HAL_GPIO_Init+0x248>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02b      	beq.n	8001876 <HAL_GPIO_Init+0x22a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_GPIO_Init+0x24c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d025      	beq.n	8001872 <HAL_GPIO_Init+0x226>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <HAL_GPIO_Init+0x250>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01f      	beq.n	800186e <HAL_GPIO_Init+0x222>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x254>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x21e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_GPIO_Init+0x258>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x21a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <HAL_GPIO_Init+0x25c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x216>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <HAL_GPIO_Init+0x260>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x212>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x264>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x20e>
 8001856:	2309      	movs	r3, #9
 8001858:	e02d      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800185a:	230a      	movs	r3, #10
 800185c:	e02b      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800185e:	2308      	movs	r3, #8
 8001860:	e029      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 8001862:	2307      	movs	r3, #7
 8001864:	e027      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 8001866:	2306      	movs	r3, #6
 8001868:	e025      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800186a:	2305      	movs	r3, #5
 800186c:	e023      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800186e:	2304      	movs	r3, #4
 8001870:	e021      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 8001872:	2303      	movs	r3, #3
 8001874:	e01f      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 8001876:	2302      	movs	r3, #2
 8001878:	e01d      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800187a:	2301      	movs	r3, #1
 800187c:	e01b      	b.n	80018b6 <HAL_GPIO_Init+0x26a>
 800187e:	bf00      	nop
 8001880:	58000080 	.word	0x58000080
 8001884:	58024400 	.word	0x58024400
 8001888:	58000400 	.word	0x58000400
 800188c:	58020000 	.word	0x58020000
 8001890:	58020400 	.word	0x58020400
 8001894:	58020800 	.word	0x58020800
 8001898:	58020c00 	.word	0x58020c00
 800189c:	58021000 	.word	0x58021000
 80018a0:	58021400 	.word	0x58021400
 80018a4:	58021800 	.word	0x58021800
 80018a8:	58021c00 	.word	0x58021c00
 80018ac:	58022000 	.word	0x58022000
 80018b0:	58022400 	.word	0x58022400
 80018b4:	2300      	movs	r3, #0
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f002 0203 	and.w	r2, r2, #3
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	4093      	lsls	r3, r2
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018c6:	4938      	ldr	r1, [pc, #224]	; (80019a8 <HAL_GPIO_Init+0x35c>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	3301      	adds	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	f47f ae63 	bne.w	8001660 <HAL_GPIO_Init+0x14>
  }
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3724      	adds	r7, #36	; 0x24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	58000400 	.word	0x58000400

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	041a      	lsls	r2, r3, #16
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	400b      	ands	r3, r1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	2b06      	cmp	r3, #6
 8001a26:	d00a      	beq.n	8001a3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e040      	b.n	8001abc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e03e      	b.n	8001abc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a46:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a4e:	f7ff fcb1 	bl	80013b4 <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a54:	e009      	b.n	8001a6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a56:	f7ff fcad 	bl	80013b4 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a64:	d901      	bls.n	8001a6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e028      	b.n	8001abc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a76:	d1ee      	bne.n	8001a56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b1e      	cmp	r3, #30
 8001a7c:	d008      	beq.n	8001a90 <HAL_PWREx_ConfigSupply+0x7c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b2e      	cmp	r3, #46	; 0x2e
 8001a82:	d005      	beq.n	8001a90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b1d      	cmp	r3, #29
 8001a88:	d002      	beq.n	8001a90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b2d      	cmp	r3, #45	; 0x2d
 8001a8e:	d114      	bne.n	8001aba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a90:	f7ff fc90 	bl	80013b4 <HAL_GetTick>
 8001a94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a96:	e009      	b.n	8001aac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a98:	f7ff fc8c 	bl	80013b4 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa6:	d901      	bls.n	8001aac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e007      	b.n	8001abc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	58024800 	.word	0x58024800

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f000 bc48 	b.w	800236c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8088 	beq.w	8001bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aea:	4b99      	ldr	r3, [pc, #612]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af4:	4b96      	ldr	r3, [pc, #600]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d007      	beq.n	8001b10 <HAL_RCC_OscConfig+0x48>
 8001b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b02:	2b18      	cmp	r3, #24
 8001b04:	d111      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b8f      	ldr	r3, [pc, #572]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d06d      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x130>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d169      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f000 bc21 	b.w	800236c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x7a>
 8001b34:	4b86      	ldr	r3, [pc, #536]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a85      	ldr	r2, [pc, #532]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e02e      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x9c>
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a80      	ldr	r2, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7d      	ldr	r2, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001b6e:	4b78      	ldr	r3, [pc, #480]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a77      	ldr	r2, [pc, #476]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b75      	ldr	r3, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a74      	ldr	r2, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a70      	ldr	r2, [pc, #448]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6e      	ldr	r3, [pc, #440]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6d      	ldr	r2, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fc04 	bl	80013b4 <HAL_GetTick>
 8001bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fc00 	bl	80013b4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e3d4      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fbf0 	bl	80013b4 <HAL_GetTick>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fbec 	bl	80013b4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e3c0      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bea:	4b59      	ldr	r3, [pc, #356]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x110>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80ca 	beq.w	8001d9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c08:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_RCC_OscConfig+0x166>
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	2b18      	cmp	r3, #24
 8001c22:	d156      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x20a>
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d151      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x17e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e392      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c46:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0219 	bic.w	r2, r3, #25
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	493f      	ldr	r1, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fbac 	bl	80013b4 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fba8 	bl	80013b4 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e37c      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	f7ff fbc9 	bl	8001414 <HAL_GetREVID>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d817      	bhi.n	8001cbc <HAL_RCC_OscConfig+0x1f4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d108      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1de>
 8001c94:	4b2e      	ldr	r3, [pc, #184]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001c9c:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca4:	e07a      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	031b      	lsls	r3, r3, #12
 8001cb4:	4926      	ldr	r1, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cba:	e06f      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	4921      	ldr	r1, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	e064      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d047      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0219 	bic.w	r2, r3, #25
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb62 	bl	80013b4 <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb5e 	bl	80013b4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e332      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	f7ff fb7f 	bl	8001414 <HAL_GetREVID>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d819      	bhi.n	8001d54 <HAL_RCC_OscConfig+0x28c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d108      	bne.n	8001d3a <HAL_RCC_OscConfig+0x272>
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d36:	6053      	str	r3, [r2, #4]
 8001d38:	e030      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	031b      	lsls	r3, r3, #12
 8001d48:	4901      	ldr	r1, [pc, #4]	; (8001d50 <HAL_RCC_OscConfig+0x288>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	e025      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
 8001d50:	58024400 	.word	0x58024400
 8001d54:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	4997      	ldr	r1, [pc, #604]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e018      	b.n	8001d9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6a:	4b95      	ldr	r3, [pc, #596]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff fb1d 	bl	80013b4 <HAL_GetTick>
 8001d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fb19 	bl	80013b4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e2ed      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d90:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a9 	beq.w	8001efc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001daa:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001db2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001db4:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d007      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x308>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b18      	cmp	r3, #24
 8001dc4:	d13a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x374>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d135      	bne.n	8001e3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dd0:	4b7b      	ldr	r3, [pc, #492]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x320>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e2c1      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001de8:	f7ff fb14 	bl	8001414 <HAL_GetREVID>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f241 0203 	movw	r2, #4099	; 0x1003
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d817      	bhi.n	8001e26 <HAL_RCC_OscConfig+0x35e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d108      	bne.n	8001e10 <HAL_RCC_OscConfig+0x348>
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e06:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e0e:	e075      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	069b      	lsls	r3, r3, #26
 8001e1e:	4968      	ldr	r1, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e24:	e06a      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	4962      	ldr	r1, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e3a:	e05f      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d042      	beq.n	8001eca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e44:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a5d      	ldr	r2, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fab0 	bl	80013b4 <HAL_GetTick>
 8001e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e58:	f7ff faac 	bl	80013b4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e280      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e6a:	4b55      	ldr	r3, [pc, #340]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e76:	f7ff facd 	bl	8001414 <HAL_GetREVID>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d817      	bhi.n	8001eb4 <HAL_RCC_OscConfig+0x3ec>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d108      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3d6>
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e9a:	6053      	str	r3, [r2, #4]
 8001e9c:	e02e      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
 8001e9e:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	4944      	ldr	r1, [pc, #272]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
 8001eb2:	e023      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	493f      	ldr	r1, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
 8001ec8:	e018      	b.n	8001efc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fa6d 	bl	80013b4 <HAL_GetTick>
 8001eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ede:	f7ff fa69 	bl	80013b4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e23d      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d036      	beq.n	8001f76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d019      	beq.n	8001f44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fa4a 	bl	80013b4 <HAL_GetTick>
 8001f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fa46 	bl	80013b4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e21a      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x45c>
 8001f42:	e018      	b.n	8001f76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	f023 0301 	bic.w	r3, r3, #1
 8001f4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa30 	bl	80013b4 <HAL_GetTick>
 8001f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fa2c 	bl	80013b4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e200      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d039      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa0d 	bl	80013b4 <HAL_GetTick>
 8001f9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9e:	f7ff fa09 	bl	80013b4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1dd      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x4d6>
 8001fbc:	e01b      	b.n	8001ff6 <HAL_RCC_OscConfig+0x52e>
 8001fbe:	bf00      	nop
 8001fc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fc4:	4b9b      	ldr	r3, [pc, #620]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a9a      	ldr	r2, [pc, #616]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f9f0 	bl	80013b4 <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd8:	f7ff f9ec 	bl	80013b4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1c0      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fea:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8081 	beq.w	8002106 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_OscConfig+0x770>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a8b      	ldr	r2, [pc, #556]	; (8002238 <HAL_RCC_OscConfig+0x770>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002010:	f7ff f9d0 	bl	80013b4 <HAL_GetTick>
 8002014:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7ff f9cc 	bl	80013b4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1a0      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800202a:	4b83      	ldr	r3, [pc, #524]	; (8002238 <HAL_RCC_OscConfig+0x770>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x584>
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	e02d      	b.n	80020a8 <HAL_RCC_OscConfig+0x5e0>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x5a6>
 8002054:	4b77      	ldr	r3, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	; 0x70
 8002060:	4b74      	ldr	r3, [pc, #464]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a73      	ldr	r2, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x5e0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x5c8>
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a6b      	ldr	r2, [pc, #428]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0x5e0>
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a67      	ldr	r2, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
 800209c:	4b65      	ldr	r3, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	4a64      	ldr	r2, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d015      	beq.n	80020dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff f980 	bl	80013b4 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff f97c 	bl	80013b4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e14e      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ce:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ee      	beq.n	80020b8 <HAL_RCC_OscConfig+0x5f0>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f96a 	bl	80013b4 <HAL_GetTick>
 80020e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f966 	bl	80013b4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e138      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020fa:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ee      	bne.n	80020e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 812d 	beq.w	800236a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002110:	4b48      	ldr	r3, [pc, #288]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002118:	2b18      	cmp	r3, #24
 800211a:	f000 80bd 	beq.w	8002298 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2b02      	cmp	r3, #2
 8002124:	f040 809e 	bne.w	8002264 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800212e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff f93e 	bl	80013b4 <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f93a 	bl	80013b4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e10e      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800215c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <HAL_RCC_OscConfig+0x774>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	430a      	orrs	r2, r1
 800216e:	4931      	ldr	r1, [pc, #196]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	628b      	str	r3, [r1, #40]	; 0x28
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	3b01      	subs	r3, #1
 800217a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	3b01      	subs	r3, #1
 8002184:	025b      	lsls	r3, r3, #9
 8002186:	b29b      	uxth	r3, r3
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	3b01      	subs	r3, #1
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	3b01      	subs	r3, #1
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80021a4:	4923      	ldr	r1, [pc, #140]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021aa:	4b22      	ldr	r3, [pc, #136]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_RCC_OscConfig+0x778>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c2:	00d2      	lsls	r2, r2, #3
 80021c4:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f023 020c 	bic.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	4917      	ldr	r1, [pc, #92]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021dc:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f023 0202 	bic.w	r2, r3, #2
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_OscConfig+0x76c>)
 8002224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7ff f8c3 	bl	80013b4 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002230:	e011      	b.n	8002256 <HAL_RCC_OscConfig+0x78e>
 8002232:	bf00      	nop
 8002234:	58024400 	.word	0x58024400
 8002238:	58024800 	.word	0x58024800
 800223c:	fffffc0c 	.word	0xfffffc0c
 8002240:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff f8b6 	bl	80013b4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e08a      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x77c>
 8002262:	e082      	b.n	800236a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a42      	ldr	r2, [pc, #264]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f8a0 	bl	80013b4 <HAL_GetTick>
 8002274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002278:	f7ff f89c 	bl	80013b4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e070      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800228a:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x7b0>
 8002296:	e068      	b.n	800236a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d031      	beq.n	8002310 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0203 	and.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d12a      	bne.n	8002310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d122      	bne.n	8002310 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d11a      	bne.n	8002310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0a5b      	lsrs	r3, r3, #9
 80022de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d111      	bne.n	8002310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0e1b      	lsrs	r3, r3, #24
 8002302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e02b      	b.n	800236c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800231e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	429a      	cmp	r2, r3
 8002328:	d01f      	beq.n	800236a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002336:	f7ff f83d 	bl	80013b4 <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800233c:	bf00      	nop
 800233e:	f7ff f839 	bl	80013b4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	4293      	cmp	r3, r2
 8002348:	d0f9      	beq.n	800233e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800234c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x8b0>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002356:	00d2      	lsls	r2, r2, #3
 8002358:	4906      	ldr	r1, [pc, #24]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 800235a:	4313      	orrs	r3, r2
 800235c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <HAL_RCC_OscConfig+0x8ac>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3730      	adds	r7, #48	; 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58024400 	.word	0x58024400
 8002378:	ffff0007 	.word	0xffff0007

0800237c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e19c      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b87      	ldr	r3, [pc, #540]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 020f 	bic.w	r2, r3, #15
 80023a6:	4985      	ldr	r1, [pc, #532]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b83      	ldr	r3, [pc, #524]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e184      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d010      	beq.n	80023ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d8:	429a      	cmp	r2, r3
 80023da:	d908      	bls.n	80023ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023dc:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	4975      	ldr	r1, [pc, #468]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d010      	beq.n	800241c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002406:	429a      	cmp	r2, r3
 8002408:	d908      	bls.n	800241c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800240a:	4b6d      	ldr	r3, [pc, #436]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	496a      	ldr	r1, [pc, #424]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002418:	4313      	orrs	r3, r2
 800241a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d010      	beq.n	800244a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002434:	429a      	cmp	r2, r3
 8002436:	d908      	bls.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	495e      	ldr	r1, [pc, #376]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002446:	4313      	orrs	r3, r2
 8002448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d010      	beq.n	8002478 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002462:	429a      	cmp	r2, r3
 8002464:	d908      	bls.n	8002478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4953      	ldr	r1, [pc, #332]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002474:	4313      	orrs	r3, r2
 8002476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d010      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	429a      	cmp	r2, r3
 8002492:	d908      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b4a      	ldr	r3, [pc, #296]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f023 020f 	bic.w	r2, r3, #15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4947      	ldr	r1, [pc, #284]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d055      	beq.n	800255e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4940      	ldr	r1, [pc, #256]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024cc:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d121      	bne.n	800251c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0f6      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d115      	bne.n	800251c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ea      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0de      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d6      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800251c:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f023 0207 	bic.w	r2, r3, #7
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4925      	ldr	r1, [pc, #148]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800252a:	4313      	orrs	r3, r2
 800252c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252e:	f7fe ff41 	bl	80013b4 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002534:	e00a      	b.n	800254c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002536:	f7fe ff3d 	bl	80013b4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0be      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	429a      	cmp	r2, r3
 800255c:	d1eb      	bne.n	8002536 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	429a      	cmp	r2, r3
 8002578:	d208      	bcs.n	800258c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f023 020f 	bic.w	r2, r3, #15
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d214      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 020f 	bic.w	r2, r3, #15
 80025a2:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b04      	ldr	r3, [pc, #16]	; (80025bc <HAL_RCC_ClockConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e086      	b.n	80026ca <HAL_RCC_ClockConfig+0x34e>
 80025bc:	52002000 	.word	0x52002000
 80025c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025dc:	429a      	cmp	r2, r3
 80025de:	d208      	bcs.n	80025f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025e0:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4939      	ldr	r1, [pc, #228]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d010      	beq.n	8002620 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800260a:	429a      	cmp	r2, r3
 800260c:	d208      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	492e      	ldr	r1, [pc, #184]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 800261c:	4313      	orrs	r3, r2
 800261e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002638:	429a      	cmp	r2, r3
 800263a:	d208      	bcs.n	800264e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	4922      	ldr	r1, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 800264a:	4313      	orrs	r3, r2
 800264c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002666:	429a      	cmp	r2, r3
 8002668:	d208      	bcs.n	800267c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4917      	ldr	r1, [pc, #92]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002678:	4313      	orrs	r3, r2
 800267a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800267c:	f000 f834 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	4912      	ldr	r1, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x35c>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_ClockConfig+0x358>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_RCC_ClockConfig+0x35c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x360>)
 80026b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x364>)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x368>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe2e 	bl	8001320 <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
 80026d8:	08007528 	.word	0x08007528
 80026dc:	24000004 	.word	0x24000004
 80026e0:	24000000 	.word	0x24000000
 80026e4:	24000008 	.word	0x24000008

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ee:	4bb3      	ldr	r3, [pc, #716]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f6:	2b18      	cmp	r3, #24
 80026f8:	f200 8155 	bhi.w	80029a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80026fc:	a201      	add	r2, pc, #4	; (adr r2, 8002704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002769 	.word	0x08002769
 8002708:	080029a7 	.word	0x080029a7
 800270c:	080029a7 	.word	0x080029a7
 8002710:	080029a7 	.word	0x080029a7
 8002714:	080029a7 	.word	0x080029a7
 8002718:	080029a7 	.word	0x080029a7
 800271c:	080029a7 	.word	0x080029a7
 8002720:	080029a7 	.word	0x080029a7
 8002724:	0800278f 	.word	0x0800278f
 8002728:	080029a7 	.word	0x080029a7
 800272c:	080029a7 	.word	0x080029a7
 8002730:	080029a7 	.word	0x080029a7
 8002734:	080029a7 	.word	0x080029a7
 8002738:	080029a7 	.word	0x080029a7
 800273c:	080029a7 	.word	0x080029a7
 8002740:	080029a7 	.word	0x080029a7
 8002744:	08002795 	.word	0x08002795
 8002748:	080029a7 	.word	0x080029a7
 800274c:	080029a7 	.word	0x080029a7
 8002750:	080029a7 	.word	0x080029a7
 8002754:	080029a7 	.word	0x080029a7
 8002758:	080029a7 	.word	0x080029a7
 800275c:	080029a7 	.word	0x080029a7
 8002760:	080029a7 	.word	0x080029a7
 8002764:	0800279b 	.word	0x0800279b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002768:	4b94      	ldr	r3, [pc, #592]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002774:	4b91      	ldr	r3, [pc, #580]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	4a90      	ldr	r2, [pc, #576]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002786:	e111      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002788:	4b8d      	ldr	r3, [pc, #564]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800278a:	61bb      	str	r3, [r7, #24]
      break;
 800278c:	e10e      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800278e:	4b8d      	ldr	r3, [pc, #564]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002790:	61bb      	str	r3, [r7, #24]
      break;
 8002792:	e10b      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002794:	4b8c      	ldr	r3, [pc, #560]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002796:	61bb      	str	r3, [r7, #24]
      break;
 8002798:	e108      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800279a:	4b88      	ldr	r3, [pc, #544]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027a4:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027b0:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80027ba:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	ee07 3a90 	vmov	s15, r3
 80027ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80e1 	beq.w	80029a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f000 8083 	beq.w	80028ec <HAL_RCC_GetSysClockFreq+0x204>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	f200 80a1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x248>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x114>
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d056      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027fa:	e099      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02d      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	4a6b      	ldr	r2, [pc, #428]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002832:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283a:	ee07 3a90 	vmov	s15, r3
 800283e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002842:	ed97 6a02 	vldr	s12, [r7, #8]
 8002846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80029cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800284a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800284e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002862:	e087      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800286e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80029d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002886:	ed97 6a02 	vldr	s12, [r7, #8]
 800288a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80029cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800288e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028a6:	e065      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80029d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80029cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80028d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ea:	e043      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80029d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028fe:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800290e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80029cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800291e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800292e:	e021      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	ee07 3a90 	vmov	s15, r3
 8002936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80029d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800293e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	ee07 3a90 	vmov	s15, r3
 800294e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002952:	ed97 6a02 	vldr	s12, [r7, #8]
 8002956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80029cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800295a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800295e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002972:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	0a5b      	lsrs	r3, r3, #9
 800297a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800297e:	3301      	adds	r3, #1
 8002980:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002998:	ee17 3a90 	vmov	r3, s15
 800299c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800299e:	e005      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
      break;
 80029a4:	e002      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029a8:	61bb      	str	r3, [r7, #24]
      break;
 80029aa:	bf00      	nop
  }

  return sysclockfreq;
 80029ac:	69bb      	ldr	r3, [r7, #24]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	58024400 	.word	0x58024400
 80029c0:	03d09000 	.word	0x03d09000
 80029c4:	003d0900 	.word	0x003d0900
 80029c8:	017d7840 	.word	0x017d7840
 80029cc:	46000000 	.word	0x46000000
 80029d0:	4c742400 	.word	0x4c742400
 80029d4:	4a742400 	.word	0x4a742400
 80029d8:	4bbebc20 	.word	0x4bbebc20

080029dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80029e2:	f7ff fe81 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490f      	ldr	r1, [pc, #60]	; (8002a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a0a:	5cd3      	ldrb	r3, [r2, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a1a:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	08007528 	.word	0x08007528
 8002a34:	24000004 	.word	0x24000004
 8002a38:	24000000 	.word	0x24000000

08002a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a40:	f7ff ffcc 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	58024400 	.word	0x58024400
 8002a64:	08007528 	.word	0x08007528

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a6c:	f7ff ffb6 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4904      	ldr	r1, [pc, #16]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	08007528 	.word	0x08007528

08002a94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b0ca      	sub	sp, #296	; 0x128
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002ab8:	2500      	movs	r5, #0
 8002aba:	ea54 0305 	orrs.w	r3, r4, r5
 8002abe:	d049      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002aca:	d02f      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002acc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ad0:	d828      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad6:	d01a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002adc:	d822      	bhi.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae6:	d007      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aea:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	4ab7      	ldr	r2, [pc, #732]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002af6:	e01a      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	3308      	adds	r3, #8
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fc8f 	bl	8004424 <RCCEx_PLL2_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b0c:	e00f      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b12:	3328      	adds	r3, #40	; 0x28
 8002b14:	2102      	movs	r1, #2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fd36 	bl	8004588 <RCCEx_PLL3_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b22:	e004      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b2a:	e000      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10a      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b36:	4ba5      	ldr	r3, [pc, #660]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b44:	4aa1      	ldr	r2, [pc, #644]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b46:	430b      	orrs	r3, r1
 8002b48:	6513      	str	r3, [r2, #80]	; 0x50
 8002b4a:	e003      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002b60:	f04f 0900 	mov.w	r9, #0
 8002b64:	ea58 0309 	orrs.w	r3, r8, r9
 8002b68:	d047      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d82a      	bhi.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b91 	.word	0x08002b91
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002bb5 	.word	0x08002bb5
 8002b88:	08002bd3 	.word	0x08002bd3
 8002b8c:	08002bd3 	.word	0x08002bd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b90:	4b8e      	ldr	r3, [pc, #568]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	4a8d      	ldr	r2, [pc, #564]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b9c:	e01a      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fc3c 	bl	8004424 <RCCEx_PLL2_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb8:	3328      	adds	r3, #40	; 0x28
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fce3 	bl	8004588 <RCCEx_PLL3_Config>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bd0:	e000      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bdc:	4b7b      	ldr	r3, [pc, #492]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	f023 0107 	bic.w	r1, r3, #7
 8002be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	4a78      	ldr	r2, [pc, #480]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6513      	str	r3, [r2, #80]	; 0x50
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002c06:	f04f 0b00 	mov.w	fp, #0
 8002c0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c0e:	d04c      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1a:	d030      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c20:	d829      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c22:	2bc0      	cmp	r3, #192	; 0xc0
 8002c24:	d02d      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c26:	2bc0      	cmp	r3, #192	; 0xc0
 8002c28:	d825      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d018      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d821      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d007      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c3a:	e01c      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a62      	ldr	r2, [pc, #392]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c48:	e01c      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4e:	3308      	adds	r3, #8
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fbe6 	bl	8004424 <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c5e:	e011      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c64:	3328      	adds	r3, #40	; 0x28
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fc8d 	bl	8004588 <RCCEx_PLL3_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c74:	e006      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002c8c:	4b4f      	ldr	r3, [pc, #316]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6513      	str	r3, [r2, #80]	; 0x50
 8002ca0:	e003      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002cc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	d053      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd6:	d035      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cdc:	d82e      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ce2:	d031      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ce4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ce8:	d828      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d01a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf4:	d822      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cfe:	d007      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d00:	e01c      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d0e:	e01c      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d14:	3308      	adds	r3, #8
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 fb83 	bl	8004424 <RCCEx_PLL2_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d24:	e011      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d2a:	3328      	adds	r3, #40	; 0x28
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fc2a 	bl	8004588 <RCCEx_PLL3_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d3a:	e006      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d42:	e002      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d44:	bf00      	nop
 8002d46:	e000      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d64:	430b      	orrs	r3, r1
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
 8002d68:	e003      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002d7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	d056      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9e:	d038      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da4:	d831      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002daa:	d034      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002db0:	d82b      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db6:	d01d      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dbc:	d825      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d006      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002dc8:	e01f      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dca:	bf00      	nop
 8002dcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd0:	4ba2      	ldr	r3, [pc, #648]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	4aa1      	ldr	r2, [pc, #644]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de2:	3308      	adds	r3, #8
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 fb1c 	bl	8004424 <RCCEx_PLL2_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002df2:	e011      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df8:	3328      	adds	r3, #40	; 0x28
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fbc3 	bl	8004588 <RCCEx_PLL3_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e08:	e006      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e20:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e30:	4a8a      	ldr	r2, [pc, #552]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	e003      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	d03a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	2b30      	cmp	r3, #48	; 0x30
 8002e68:	d01f      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002e6a:	2b30      	cmp	r3, #48	; 0x30
 8002e6c:	d819      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d00c      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d815      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d019      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d111      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e7e:	4b77      	ldr	r3, [pc, #476]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002e8a:	e011      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e90:	3308      	adds	r3, #8
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fac5 	bl	8004424 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002eb8:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec6:	4a65      	ldr	r2, [pc, #404]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ecc:	e003      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002ee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002eec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	d051      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f00:	d035      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f06:	d82e      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f0c:	d031      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f12:	d828      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f18:	d01a      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d822      	bhi.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d007      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2c:	4b4b      	ldr	r3, [pc, #300]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f38:	e01c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f3e:	3308      	adds	r3, #8
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fa6e 	bl	8004424 <RCCEx_PLL2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f4e:	e011      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f54:	3328      	adds	r3, #40	; 0x28
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 fb15 	bl	8004588 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f64:	e006      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f7c:	4b37      	ldr	r3, [pc, #220]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	4a34      	ldr	r2, [pc, #208]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6513      	str	r3, [r2, #80]	; 0x50
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002faa:	2300      	movs	r3, #0
 8002fac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002fb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	d056      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d033      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002fc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fca:	d82c      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd0:	d02f      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002fd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd6:	d826      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fdc:	d02b      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002fde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fe2:	d820      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fe8:	d012      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002fea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fee:	d81a      	bhi.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d022      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d115      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ffe:	3308      	adds	r3, #8
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fa0e 	bl	8004424 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800300e:	e015      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003014:	3328      	adds	r3, #40	; 0x28
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fab5 	bl	8004588 <RCCEx_PLL3_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003024:	e00a      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800303a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	4a02      	ldr	r2, [pc, #8]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003054:	430b      	orrs	r3, r1
 8003056:	6513      	str	r3, [r2, #80]	; 0x50
 8003058:	e006      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003064:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800307e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003082:	460b      	mov	r3, r1
 8003084:	4313      	orrs	r3, r2
 8003086:	d055      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800308c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003094:	d033      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309a:	d82c      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a0:	d02f      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d826      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030ac:	d02b      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030b2:	d820      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b8:	d012      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80030ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030be:	d81a      	bhi.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d022      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80030c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c8:	d115      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ce:	3308      	adds	r3, #8
 80030d0:	2101      	movs	r1, #1
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f9a6 	bl	8004424 <RCCEx_PLL2_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80030de:	e015      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e4:	3328      	adds	r3, #40	; 0x28
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 fa4d 	bl	8004588 <RCCEx_PLL3_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80030f4:	e00a      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030fc:	e006      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80030fe:	bf00      	nop
 8003100:	e004      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800310a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003114:	4ba3      	ldr	r3, [pc, #652]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800311c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003120:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003124:	4a9f      	ldr	r2, [pc, #636]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003126:	430b      	orrs	r3, r1
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
 800312a:	e003      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003144:	2300      	movs	r3, #0
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800314a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800314e:	460b      	mov	r3, r1
 8003150:	4313      	orrs	r3, r2
 8003152:	d037      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315e:	d00e      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003164:	d816      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800316a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800316e:	d111      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003170:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4a8b      	ldr	r2, [pc, #556]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800317c:	e00f      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003182:	3308      	adds	r3, #8
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f94c 	bl	8004424 <RCCEx_PLL2_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031a6:	4b7f      	ldr	r3, [pc, #508]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	4a7b      	ldr	r2, [pc, #492]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6513      	str	r3, [r2, #80]	; 0x50
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80031d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d039      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d81c      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003231 	.word	0x08003231
 80031f8:	08003205 	.word	0x08003205
 80031fc:	08003213 	.word	0x08003213
 8003200:	08003231 	.word	0x08003231
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4a66      	ldr	r2, [pc, #408]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800320a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003210:	e00f      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003216:	3308      	adds	r3, #8
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f902 	bl	8004424 <RCCEx_PLL2_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800323a:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	f023 0103 	bic.w	r1, r3, #3
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	4a56      	ldr	r2, [pc, #344]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800324a:	430b      	orrs	r3, r1
 800324c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324e:	e003      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800326e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003272:	460b      	mov	r3, r1
 8003274:	4313      	orrs	r3, r2
 8003276:	f000 809f 	beq.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327a:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003286:	f7fe f895 	bl	80013b4 <HAL_GetTick>
 800328a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800328e:	e00b      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fe f890 	bl	80013b4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d903      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032a8:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ed      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d179      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032c8:	4053      	eors	r3, r2
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d015      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032de:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	4a30      	ldr	r2, [pc, #192]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80032f6:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003302:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d118      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f852 	bl	80013b4 <HAL_GetTick>
 8003310:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003314:	e00d      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7fe f84d 	bl	80013b4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003320:	1ad2      	subs	r2, r2, r3
 8003322:	f241 3388 	movw	r3, #5000	; 0x1388
 8003326:	429a      	cmp	r2, r3
 8003328:	d903      	bls.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003330:	e005      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0eb      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800333e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003342:	2b00      	cmp	r3, #0
 8003344:	d129      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800334a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800334e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003356:	d10e      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003364:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003368:	091a      	lsrs	r2, r3, #4
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800336c:	4013      	ands	r3, r2
 800336e:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003370:	430b      	orrs	r3, r1
 8003372:	6113      	str	r3, [r2, #16]
 8003374:	e005      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800337c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003380:	6113      	str	r3, [r2, #16]
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003384:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003394:	430b      	orrs	r3, r1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e00e      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800339e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80033a2:	e009      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033a4:	58024400 	.word	0x58024400
 80033a8:	58024800 	.word	0x58024800
 80033ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f002 0301 	and.w	r3, r2, #1
 80033c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f000 8089 	beq.w	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e0:	2b28      	cmp	r3, #40	; 0x28
 80033e2:	d86b      	bhi.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080034c5 	.word	0x080034c5
 80033f0:	080034bd 	.word	0x080034bd
 80033f4:	080034bd 	.word	0x080034bd
 80033f8:	080034bd 	.word	0x080034bd
 80033fc:	080034bd 	.word	0x080034bd
 8003400:	080034bd 	.word	0x080034bd
 8003404:	080034bd 	.word	0x080034bd
 8003408:	080034bd 	.word	0x080034bd
 800340c:	08003491 	.word	0x08003491
 8003410:	080034bd 	.word	0x080034bd
 8003414:	080034bd 	.word	0x080034bd
 8003418:	080034bd 	.word	0x080034bd
 800341c:	080034bd 	.word	0x080034bd
 8003420:	080034bd 	.word	0x080034bd
 8003424:	080034bd 	.word	0x080034bd
 8003428:	080034bd 	.word	0x080034bd
 800342c:	080034a7 	.word	0x080034a7
 8003430:	080034bd 	.word	0x080034bd
 8003434:	080034bd 	.word	0x080034bd
 8003438:	080034bd 	.word	0x080034bd
 800343c:	080034bd 	.word	0x080034bd
 8003440:	080034bd 	.word	0x080034bd
 8003444:	080034bd 	.word	0x080034bd
 8003448:	080034bd 	.word	0x080034bd
 800344c:	080034c5 	.word	0x080034c5
 8003450:	080034bd 	.word	0x080034bd
 8003454:	080034bd 	.word	0x080034bd
 8003458:	080034bd 	.word	0x080034bd
 800345c:	080034bd 	.word	0x080034bd
 8003460:	080034bd 	.word	0x080034bd
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034bd 	.word	0x080034bd
 800346c:	080034c5 	.word	0x080034c5
 8003470:	080034bd 	.word	0x080034bd
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034bd 	.word	0x080034bd
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034bd 	.word	0x080034bd
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034c5 	.word	0x080034c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	3308      	adds	r3, #8
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 ffc3 	bl	8004424 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034a4:	e00f      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034aa:	3328      	adds	r3, #40	; 0x28
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 f86a 	bl	8004588 <RCCEx_PLL3_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034ba:	e004      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80034c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034ce:	4bbf      	ldr	r3, [pc, #764]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034dc:	4abb      	ldr	r2, [pc, #748]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034de:	430b      	orrs	r3, r1
 80034e0:	6553      	str	r3, [r2, #84]	; 0x54
 80034e2:	e003      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f002 0302 	and.w	r3, r2, #2
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003502:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003506:	460b      	mov	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	d041      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003512:	2b05      	cmp	r3, #5
 8003514:	d824      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003569 	.word	0x08003569
 8003520:	08003535 	.word	0x08003535
 8003524:	0800354b 	.word	0x0800354b
 8003528:	08003569 	.word	0x08003569
 800352c:	08003569 	.word	0x08003569
 8003530:	08003569 	.word	0x08003569
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003538:	3308      	adds	r3, #8
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 ff71 	bl	8004424 <RCCEx_PLL2_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003548:	e00f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354e:	3328      	adds	r3, #40	; 0x28
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f001 f818 	bl	8004588 <RCCEx_PLL3_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003572:	4b96      	ldr	r3, [pc, #600]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f023 0107 	bic.w	r1, r3, #7
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003580:	4a92      	ldr	r2, [pc, #584]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003582:	430b      	orrs	r3, r1
 8003584:	6553      	str	r3, [r2, #84]	; 0x54
 8003586:	e003      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800358c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f002 0304 	and.w	r3, r2, #4
 800359c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4313      	orrs	r3, r2
 80035ae:	d044      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d825      	bhi.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	08003611 	.word	0x08003611
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035f3 	.word	0x080035f3
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e0:	3308      	adds	r3, #8
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 ff1d 	bl	8004424 <RCCEx_PLL2_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80035f0:	e00f      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f6:	3328      	adds	r3, #40	; 0x28
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 ffc4 	bl	8004588 <RCCEx_PLL3_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003606:	e004      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800360e:	e000      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10b      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800361a:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	f023 0107 	bic.w	r1, r3, #7
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	4a68      	ldr	r2, [pc, #416]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800362c:	430b      	orrs	r3, r1
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	e003      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f002 0320 	and.w	r3, r2, #32
 8003646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800364a:	2300      	movs	r3, #0
 800364c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003654:	460b      	mov	r3, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	d055      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003666:	d033      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366c:	d82c      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d02f      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d826      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800367a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800367e:	d02b      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003684:	d820      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368a:	d012      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800368c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003690:	d81a      	bhi.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d022      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369a:	d115      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a0:	3308      	adds	r3, #8
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 febd 	bl	8004424 <RCCEx_PLL2_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036b0:	e015      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b6:	3328      	adds	r3, #40	; 0x28
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ff64 	bl	8004588 <RCCEx_PLL3_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036c6:	e00a      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036ce:	e006      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	4a35      	ldr	r2, [pc, #212]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6553      	str	r3, [r2, #84]	; 0x54
 80036fc:	e003      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003702:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800371c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d058      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003732:	d033      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003734:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003738:	d82c      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d02f      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003744:	d826      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800374a:	d02b      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800374c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003750:	d820      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003756:	d012      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375c:	d81a      	bhi.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d022      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d115      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	3308      	adds	r3, #8
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fe57 	bl	8004424 <RCCEx_PLL2_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800377c:	e015      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003782:	3328      	adds	r3, #40	; 0x28
 8003784:	2102      	movs	r1, #2
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fefe 	bl	8004588 <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003792:	e00a      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800379a:	e006      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800379c:	bf00      	nop
 800379e:	e004      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037a0:	bf00      	nop
 80037a2:	e002      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c2:	4a02      	ldr	r2, [pc, #8]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6593      	str	r3, [r2, #88]	; 0x58
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80037e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d055      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003800:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003804:	d033      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003806:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800380a:	d82c      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d02f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003816:	d826      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003818:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800381c:	d02b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800381e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003822:	d820      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003828:	d012      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800382a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800382e:	d81a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003838:	d115      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	3308      	adds	r3, #8
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fdee 	bl	8004424 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800384e:	e015      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003854:	3328      	adds	r3, #40	; 0x28
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fe95 	bl	8004588 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003884:	4ba1      	ldr	r3, [pc, #644]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003894:	4a9d      	ldr	r2, [pc, #628]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003896:	430b      	orrs	r3, r1
 8003898:	6593      	str	r3, [r2, #88]	; 0x58
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f002 0308 	and.w	r3, r2, #8
 80038b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d01e      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d6:	3328      	adds	r3, #40	; 0x28
 80038d8:	2102      	movs	r1, #2
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fe54 	bl	8004588 <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80038ec:	4b87      	ldr	r3, [pc, #540]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	4a83      	ldr	r2, [pc, #524]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f002 0310 	and.w	r3, r2, #16
 800390e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003918:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d01e      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2102      	movs	r1, #2
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fe25 	bl	8004588 <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800394a:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800395a:	4a6c      	ldr	r2, [pc, #432]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800395c:	430b      	orrs	r3, r1
 800395e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800396c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003976:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d03e      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800398c:	d022      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800398e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003992:	d81b      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d00b      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800399e:	e015      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a4:	3308      	adds	r3, #8
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fd3b 	bl	8004424 <RCCEx_PLL2_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039b4:	e00f      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	3328      	adds	r3, #40	; 0x28
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fde2 	bl	8004588 <RCCEx_PLL3_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80039ca:	e004      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039d2:	e000      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039de:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ee:	4a47      	ldr	r2, [pc, #284]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d03b      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a26:	d01f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a2c:	d818      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a38:	d007      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3c:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	3328      	adds	r3, #40	; 0x28
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd98 	bl	8004588 <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6553      	str	r3, [r2, #84]	; 0x54
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	677b      	str	r3, [r7, #116]	; 0x74
 8003aa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	d034      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003abc:	d007      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003abe:	e011      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003acc:	e00e      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fca4 	bl	8004424 <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b02:	4a02      	ldr	r2, [pc, #8]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b26:	2300      	movs	r3, #0
 8003b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d00c      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	3328      	adds	r3, #40	; 0x28
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fd23 	bl	8004588 <RCCEx_PLL3_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d038      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b76:	d018      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d811      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b82:	d014      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d80b      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d011      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b92:	d106      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4bc3      	ldr	r3, [pc, #780]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4ac2      	ldr	r2, [pc, #776]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ba8:	e004      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bbc:	4bb9      	ldr	r3, [pc, #740]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bcc:	4ab5      	ldr	r2, [pc, #724]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6553      	str	r3, [r2, #84]	; 0x54
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bea:	2300      	movs	r3, #0
 8003bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003bf8:	4baa      	ldr	r3, [pc, #680]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	4aa7      	ldr	r2, [pc, #668]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003c22:	460b      	mov	r3, r1
 8003c24:	4313      	orrs	r3, r2
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c28:	4b9e      	ldr	r3, [pc, #632]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c38:	4a9a      	ldr	r2, [pc, #616]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003c54:	460b      	mov	r3, r1
 8003c56:	4313      	orrs	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c5a:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c68:	4a8e      	ldr	r2, [pc, #568]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003c84:	460b      	mov	r3, r1
 8003c86:	4313      	orrs	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c8a:	4b86      	ldr	r3, [pc, #536]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a85      	ldr	r2, [pc, #532]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c94:	6113      	str	r3, [r2, #16]
 8003c96:	4b83      	ldr	r3, [pc, #524]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c98:	6919      	ldr	r1, [r3, #16]
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ca2:	4a80      	ldr	r2, [pc, #512]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003cc4:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd2:	4a74      	ldr	r2, [pc, #464]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8003cea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cf4:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d04:	4a67      	ldr	r2, [pc, #412]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	2100      	movs	r1, #0
 8003d14:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d20:	460b      	mov	r3, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	d011      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fb78 	bl	8004424 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	2100      	movs	r1, #0
 8003d54:	6239      	str	r1, [r7, #32]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d60:	460b      	mov	r3, r1
 8003d62:	4313      	orrs	r3, r2
 8003d64:	d011      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fb58 	bl	8004424 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	2100      	movs	r1, #0
 8003d94:	61b9      	str	r1, [r7, #24]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003da0:	460b      	mov	r3, r1
 8003da2:	4313      	orrs	r3, r2
 8003da4:	d011      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003daa:	3308      	adds	r3, #8
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb38 	bl	8004424 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6139      	str	r1, [r7, #16]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dea:	3328      	adds	r3, #40	; 0x28
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fbca 	bl	8004588 <RCCEx_PLL3_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	2100      	movs	r1, #0
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e20:	460b      	mov	r3, r1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	d011      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2a:	3328      	adds	r3, #40	; 0x28
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fbaa 	bl	8004588 <RCCEx_PLL3_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	2100      	movs	r1, #0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d011      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6a:	3328      	adds	r3, #40	; 0x28
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb8a 	bl	8004588 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003e8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea4:	58024400 	.word	0x58024400

08003ea8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003eac:	f7fe fd96 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4904      	ldr	r1, [pc, #16]	; (8003ed0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	08007528 	.word	0x08007528

08003ed4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003edc:	4ba1      	ldr	r3, [pc, #644]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ee6:	4b9f      	ldr	r3, [pc, #636]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	0b1b      	lsrs	r3, r3, #12
 8003eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ef2:	4b9c      	ldr	r3, [pc, #624]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003efe:	4b99      	ldr	r3, [pc, #612]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	08db      	lsrs	r3, r3, #3
 8003f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8111 	beq.w	8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f000 8083 	beq.w	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	f200 80a1 	bhi.w	8004074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d056      	beq.n	8003fec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f3e:	e099      	b.n	8004074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f40:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02d      	beq.n	8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f4c:	4b85      	ldr	r3, [pc, #532]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	4a84      	ldr	r2, [pc, #528]	; (8004168 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800416c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fa6:	e087      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004170 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	4b6a      	ldr	r3, [pc, #424]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800416c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fea:	e065      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffe:	4b59      	ldr	r3, [pc, #356]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004012:	eddf 5a56 	vldr	s11, [pc, #344]	; 800416c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800402e:	e043      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800403e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004042:	4b48      	ldr	r3, [pc, #288]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004052:	ed97 6a03 	vldr	s12, [r7, #12]
 8004056:	eddf 5a45 	vldr	s11, [pc, #276]	; 800416c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800405a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004072:	e021      	b.n	80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004086:	4b37      	ldr	r3, [pc, #220]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004096:	ed97 6a03 	vldr	s12, [r7, #12]
 800409a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800416c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800409e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040b8:	4b2a      	ldr	r3, [pc, #168]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	0a5b      	lsrs	r3, r3, #9
 80040be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040de:	ee17 2a90 	vmov	r2, s15
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004100:	edd7 6a07 	vldr	s13, [r7, #28]
 8004104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800410c:	ee17 2a90 	vmov	r2, s15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	0e1b      	lsrs	r3, r3, #24
 800411a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800412a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800412e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 2a90 	vmov	r2, s15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004142:	e008      	b.n	8004156 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	58024400 	.word	0x58024400
 8004168:	03d09000 	.word	0x03d09000
 800416c:	46000000 	.word	0x46000000
 8004170:	4c742400 	.word	0x4c742400
 8004174:	4a742400 	.word	0x4a742400
 8004178:	4bbebc20 	.word	0x4bbebc20

0800417c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800417c:	b480      	push	{r7}
 800417e:	b089      	sub	sp, #36	; 0x24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004184:	4ba1      	ldr	r3, [pc, #644]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800418e:	4b9f      	ldr	r3, [pc, #636]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	0d1b      	lsrs	r3, r3, #20
 8004194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004198:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800419a:	4b9c      	ldr	r3, [pc, #624]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	0a1b      	lsrs	r3, r3, #8
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041a6:	4b99      	ldr	r3, [pc, #612]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	08db      	lsrs	r3, r3, #3
 80041ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	ee07 3a90 	vmov	s15, r3
 80041ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8111 	beq.w	80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	f000 8083 	beq.w	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f200 80a1 	bhi.w	800431c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d056      	beq.n	8004294 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041e6:	e099      	b.n	800431c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041e8:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d02d      	beq.n	8004250 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041f4:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	08db      	lsrs	r3, r3, #3
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	4a84      	ldr	r2, [pc, #528]	; (8004410 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421e:	4b7b      	ldr	r3, [pc, #492]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004232:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800424e:	e087      	b.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004418 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b6a      	ldr	r3, [pc, #424]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a03 	vldr	s12, [r7, #12]
 8004276:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004292:	e065      	b.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800441c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042d6:	e043      	b.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ea:	4b48      	ldr	r3, [pc, #288]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800430a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800431a:	e021      	b.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800441c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800432a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004342:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800435e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	0a5b      	lsrs	r3, r3, #9
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800437a:	edd7 6a07 	vldr	s13, [r7, #28]
 800437e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004386:	ee17 2a90 	vmov	r2, s15
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004398:	ee07 3a90 	vmov	s15, r3
 800439c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b4:	ee17 2a90 	vmov	r2, s15
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	0e1b      	lsrs	r3, r3, #24
 80043c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e2:	ee17 2a90 	vmov	r2, s15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043ea:	e008      	b.n	80043fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
}
 80043fe:	bf00      	nop
 8004400:	3724      	adds	r7, #36	; 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	58024400 	.word	0x58024400
 8004410:	03d09000 	.word	0x03d09000
 8004414:	46000000 	.word	0x46000000
 8004418:	4c742400 	.word	0x4c742400
 800441c:	4a742400 	.word	0x4a742400
 8004420:	4bbebc20 	.word	0x4bbebc20

08004424 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004432:	4b53      	ldr	r3, [pc, #332]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d101      	bne.n	8004442 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e099      	b.n	8004576 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004442:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4e      	ldr	r2, [pc, #312]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004448:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800444c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fc ffb1 	bl	80013b4 <HAL_GetTick>
 8004452:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004454:	e008      	b.n	8004468 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004456:	f7fc ffad 	bl	80013b4 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e086      	b.n	8004576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004474:	4b42      	ldr	r3, [pc, #264]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	031b      	lsls	r3, r3, #12
 8004482:	493f      	ldr	r1, [pc, #252]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	628b      	str	r3, [r1, #40]	; 0x28
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	3b01      	subs	r3, #1
 800448e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	3b01      	subs	r3, #1
 8004498:	025b      	lsls	r3, r3, #9
 800449a:	b29b      	uxth	r3, r3
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	061b      	lsls	r3, r3, #24
 80044b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044b8:	4931      	ldr	r1, [pc, #196]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044be:	4b30      	ldr	r3, [pc, #192]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	492d      	ldr	r1, [pc, #180]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f023 0220 	bic.w	r2, r3, #32
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	4928      	ldr	r1, [pc, #160]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044e2:	4b27      	ldr	r3, [pc, #156]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	4a26      	ldr	r2, [pc, #152]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044e8:	f023 0310 	bic.w	r3, r3, #16
 80044ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044ee:	4b24      	ldr	r3, [pc, #144]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <RCCEx_PLL2_Config+0x160>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	69d2      	ldr	r2, [r2, #28]
 80044fa:	00d2      	lsls	r2, r2, #3
 80044fc:	4920      	ldr	r1, [pc, #128]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004502:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004508:	f043 0310 	orr.w	r3, r3, #16
 800450c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800451a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004520:	e00f      	b.n	8004542 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d106      	bne.n	8004536 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800452e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004534:	e005      	b.n	8004542 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a11      	ldr	r2, [pc, #68]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800453c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 8004548:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800454c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454e:	f7fc ff31 	bl	80013b4 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004554:	e008      	b.n	8004568 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004556:	f7fc ff2d 	bl	80013b4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <RCCEx_PLL2_Config+0x15c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	58024400 	.word	0x58024400
 8004584:	ffff0007 	.word	0xffff0007

08004588 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004596:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d101      	bne.n	80045a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e099      	b.n	80046da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80045a6:	4b4f      	ldr	r3, [pc, #316]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a4e      	ldr	r2, [pc, #312]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b2:	f7fc feff 	bl	80013b4 <HAL_GetTick>
 80045b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045b8:	e008      	b.n	80045cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045ba:	f7fc fefb 	bl	80013b4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e086      	b.n	80046da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1f0      	bne.n	80045ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	051b      	lsls	r3, r3, #20
 80045e6:	493f      	ldr	r1, [pc, #252]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	628b      	str	r3, [r1, #40]	; 0x28
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	b29b      	uxth	r3, r3
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	3b01      	subs	r3, #1
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	3b01      	subs	r3, #1
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800461c:	4931      	ldr	r1, [pc, #196]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800461e:	4313      	orrs	r3, r2
 8004620:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	492d      	ldr	r1, [pc, #180]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004634:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	4928      	ldr	r1, [pc, #160]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004646:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a26      	ldr	r2, [pc, #152]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800464c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <RCCEx_PLL3_Config+0x160>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	69d2      	ldr	r2, [r2, #28]
 800465e:	00d2      	lsls	r2, r2, #3
 8004660:	4920      	ldr	r1, [pc, #128]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004666:	4b1f      	ldr	r3, [pc, #124]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4a19      	ldr	r2, [pc, #100]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800467e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004684:	e00f      	b.n	80046a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800468c:	4b15      	ldr	r3, [pc, #84]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 8004692:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004696:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004698:	e005      	b.n	80046a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80046a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0e      	ldr	r2, [pc, #56]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b2:	f7fc fe7f 	bl	80013b4 <HAL_GetTick>
 80046b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046b8:	e008      	b.n	80046cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046ba:	f7fc fe7b 	bl	80013b4 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e006      	b.n	80046da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <RCCEx_PLL3_Config+0x15c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
 80046e8:	ffff0007 	.word	0xffff0007

080046ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e10f      	b.n	800491e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a87      	ldr	r2, [pc, #540]	; (8004928 <HAL_SPI_Init+0x23c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <HAL_SPI_Init+0x42>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a86      	ldr	r2, [pc, #536]	; (800492c <HAL_SPI_Init+0x240>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00a      	beq.n	800472e <HAL_SPI_Init+0x42>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a84      	ldr	r2, [pc, #528]	; (8004930 <HAL_SPI_Init+0x244>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d005      	beq.n	800472e <HAL_SPI_Init+0x42>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2b0f      	cmp	r3, #15
 8004728:	d901      	bls.n	800472e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0f7      	b.n	800491e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fbca 	bl	8004ec8 <SPI_GetPacketSize>
 8004734:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7b      	ldr	r2, [pc, #492]	; (8004928 <HAL_SPI_Init+0x23c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00c      	beq.n	800475a <HAL_SPI_Init+0x6e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a79      	ldr	r2, [pc, #484]	; (800492c <HAL_SPI_Init+0x240>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <HAL_SPI_Init+0x6e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a78      	ldr	r2, [pc, #480]	; (8004930 <HAL_SPI_Init+0x244>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d002      	beq.n	800475a <HAL_SPI_Init+0x6e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d811      	bhi.n	800477e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800475e:	4a72      	ldr	r2, [pc, #456]	; (8004928 <HAL_SPI_Init+0x23c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d009      	beq.n	8004778 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a70      	ldr	r2, [pc, #448]	; (800492c <HAL_SPI_Init+0x240>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_SPI_Init+0x8c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a6f      	ldr	r2, [pc, #444]	; (8004930 <HAL_SPI_Init+0x244>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d104      	bne.n	8004782 <HAL_SPI_Init+0x96>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b10      	cmp	r3, #16
 800477c:	d901      	bls.n	8004782 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0cd      	b.n	800491e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc fb28 	bl	8000dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80047be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c8:	d119      	bne.n	80047fe <HAL_SPI_Init+0x112>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d103      	bne.n	80047dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10c      	bne.n	80047fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80047e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ec:	d107      	bne.n	80047fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <HAL_SPI_Init+0x13e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b06      	cmp	r3, #6
 8004810:	d90b      	bls.n	800482a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e007      	b.n	800483a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	431a      	orrs	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489a:	ea42 0103 	orr.w	r1, r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40013000 	.word	0x40013000
 800492c:	40003800 	.word	0x40003800
 8004930:	40003c00 	.word	0x40003c00

08004934 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3320      	adds	r3, #32
 800494a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_SPI_Transmit+0x2a>
 800495a:	2302      	movs	r3, #2
 800495c:	e1e1      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004966:	f7fc fd25 	bl	80013b4 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	d007      	beq.n	8004988 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004978:	2302      	movs	r3, #2
 800497a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004984:	7efb      	ldrb	r3, [r7, #27]
 8004986:	e1cc      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_Transmit+0x60>
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d107      	bne.n	80049a4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80049a0:	7efb      	ldrb	r3, [r7, #27]
 80049a2:	e1be      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80049f4:	d108      	bne.n	8004a08 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e009      	b.n	8004a1c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004a1a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	4b96      	ldr	r3, [pc, #600]	; (8004c7c <HAL_SPI_Transmit+0x348>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	88f9      	ldrh	r1, [r7, #6]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a48:	d107      	bne.n	8004a5a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d947      	bls.n	8004af2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004a62:	e03f      	b.n	8004ae4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d114      	bne.n	8004a9c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004a9a:	e023      	b.n	8004ae4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9c:	f7fc fc8a 	bl	80013b4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d803      	bhi.n	8004ab4 <HAL_SPI_Transmit+0x180>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Transmit+0x186>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d114      	bne.n	8004ae4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f936 	bl	8004d2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ace:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e11e      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1b9      	bne.n	8004a64 <HAL_SPI_Transmit+0x130>
 8004af0:	e0f1      	b.n	8004cd6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	f240 80e6 	bls.w	8004cc8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004afc:	e05d      	b.n	8004bba <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d132      	bne.n	8004b72 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d918      	bls.n	8004b4a <HAL_SPI_Transmit+0x216>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d014      	beq.n	8004b4a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	1d1a      	adds	r2, r3, #4
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b02      	subs	r3, #2
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004b48:	e037      	b.n	8004bba <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004b70:	e023      	b.n	8004bba <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b72:	f7fc fc1f 	bl	80013b4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d803      	bhi.n	8004b8a <HAL_SPI_Transmit+0x256>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d102      	bne.n	8004b90 <HAL_SPI_Transmit+0x25c>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d114      	bne.n	8004bba <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f8cb 	bl	8004d2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e0b3      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d19b      	bne.n	8004afe <HAL_SPI_Transmit+0x1ca>
 8004bc6:	e086      	b.n	8004cd6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d154      	bne.n	8004c80 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d918      	bls.n	8004c14 <HAL_SPI_Transmit+0x2e0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d914      	bls.n	8004c14 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004c12:	e059      	b.n	8004cc8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d917      	bls.n	8004c50 <HAL_SPI_Transmit+0x31c>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	881a      	ldrh	r2, [r3, #0]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	1c9a      	adds	r2, r3, #2
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b02      	subs	r3, #2
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004c4e:	e03b      	b.n	8004cc8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3320      	adds	r3, #32
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004c7a:	e025      	b.n	8004cc8 <HAL_SPI_Transmit+0x394>
 8004c7c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c80:	f7fc fb98 	bl	80013b4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d803      	bhi.n	8004c98 <HAL_SPI_Transmit+0x364>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Transmit+0x36a>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d114      	bne.n	8004cc8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f844 	bl	8004d2c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e02c      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f47f af79 	bne.w	8004bc8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2108      	movs	r1, #8
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f8c3 	bl	8004e6c <SPI_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f815 	bl	8004d2c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8004d20:	7efb      	ldrb	r3, [r7, #27]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3720      	adds	r7, #32
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop

08004d2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0210 	orr.w	r2, r2, #16
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <SPI_CloseTransfer+0x13c>)
 8004d78:	400b      	ands	r3, r1
 8004d7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004d8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d014      	beq.n	8004dc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0220 	orr.w	r2, r2, #32
 8004dc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d014      	beq.n	8004df8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00f      	beq.n	8004df8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00f      	beq.n	8004e22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00f      	beq.n	8004e4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	fffffc90 	.word	0xfffffc90

08004e6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004e7c:	e010      	b.n	8004ea0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7e:	f7fc fa99 	bl	80013b4 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d803      	bhi.n	8004e96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d102      	bne.n	8004e9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e00f      	b.n	8004ec0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d0df      	beq.n	8004e7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e049      	b.n	8004fa4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d106      	bne.n	8004f2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7fc f805 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 faf7 	bl	8005530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d001      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e054      	b.n	800506e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d01d      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a22      	ldr	r2, [pc, #136]	; (8005080 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a21      	ldr	r2, [pc, #132]	; (8005084 <HAL_TIM_Base_Start_IT+0xd8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <HAL_TIM_Base_Start_IT+0xdc>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1e      	ldr	r2, [pc, #120]	; (800508c <HAL_TIM_Base_Start_IT+0xe0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_TIM_Base_Start_IT+0xe4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x80>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <HAL_TIM_Base_Start_IT+0xe8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d115      	bne.n	8005058 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	4b19      	ldr	r3, [pc, #100]	; (8005098 <HAL_TIM_Base_Start_IT+0xec>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b06      	cmp	r3, #6
 800503c:	d015      	beq.n	800506a <HAL_TIM_Base_Start_IT+0xbe>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d011      	beq.n	800506a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	e008      	b.n	800506a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e000      	b.n	800506c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010000 	.word	0x40010000
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400
 8005090:	40001800 	.word	0x40001800
 8005094:	40014000 	.word	0x40014000
 8005098:	00010007 	.word	0x00010007

0800509c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0202 	mvn.w	r2, #2
 80050c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fa08 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9fa 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa0b 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b04      	cmp	r3, #4
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0204 	mvn.w	r2, #4
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9de 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9d0 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f9e1 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b08      	cmp	r3, #8
 8005158:	d122      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d11b      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0208 	mvn.w	r2, #8
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9b4 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9a6 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f9b7 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b10      	cmp	r3, #16
 80051ac:	d122      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d11b      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0210 	mvn.w	r2, #16
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2208      	movs	r2, #8
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f98a 	bl	80054f4 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f97c 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f98d 	bl	8005508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0201 	mvn.w	r2, #1
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f956 	bl	80054cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d10e      	bne.n	800524c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d107      	bne.n	800524c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fb42 	bl	80058d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	d10e      	bne.n	800527a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b80      	cmp	r3, #128	; 0x80
 8005268:	d107      	bne.n	800527a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fb35 	bl	80058e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b40      	cmp	r3, #64	; 0x40
 8005286:	d10e      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d107      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f93b 	bl	800551c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d10e      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0220 	mvn.w	r2, #32
 80052ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 faf5 	bl	80058bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_ConfigClockSource+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0dc      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x1d6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	4b6a      	ldr	r3, [pc, #424]	; (80054bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8005314:	4013      	ands	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a64      	ldr	r2, [pc, #400]	; (80054c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	f000 80a9 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 8005334:	4a62      	ldr	r2, [pc, #392]	; (80054c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f200 80ae 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800533c:	4a61      	ldr	r2, [pc, #388]	; (80054c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	f000 80a1 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 8005344:	4a5f      	ldr	r2, [pc, #380]	; (80054c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	f200 80a6 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800534c:	4a5e      	ldr	r2, [pc, #376]	; (80054c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800534e:	4293      	cmp	r3, r2
 8005350:	f000 8099 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 8005354:	4a5c      	ldr	r2, [pc, #368]	; (80054c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005356:	4293      	cmp	r3, r2
 8005358:	f200 809e 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800535c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005360:	f000 8091 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 8005364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005368:	f200 8096 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800536c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005370:	f000 8089 	beq.w	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005378:	f200 808e 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d03e      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0x124>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	f200 8087 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	f000 8086 	beq.w	800549e <HAL_TIM_ConfigClockSource+0x1c2>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d87f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d01a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xf6>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d87b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d050      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x16a>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d877      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053a8:	2b50      	cmp	r3, #80	; 0x50
 80053aa:	d03c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x14a>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d873      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d058      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x18a>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d86f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d064      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d86b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d060      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d867      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d05a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x1aa>
 80053d0:	e062      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f000 f9bd 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e04f      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 f9a6 	bl	8005760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005422:	609a      	str	r2, [r3, #8]
      break;
 8005424:	e03c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 f916 	bl	8005664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2150      	movs	r1, #80	; 0x50
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f970 	bl	8005724 <TIM_ITRx_SetConfig>
      break;
 8005444:	e02c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 f935 	bl	80056c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2160      	movs	r1, #96	; 0x60
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f960 	bl	8005724 <TIM_ITRx_SetConfig>
      break;
 8005464:	e01c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 f8f6 	bl	8005664 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f950 	bl	8005724 <TIM_ITRx_SetConfig>
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 f947 	bl	8005724 <TIM_ITRx_SetConfig>
      break;
 8005496:	e003      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e000      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800549e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	ffceff88 	.word	0xffceff88
 80054c0:	00100040 	.word	0x00100040
 80054c4:	00100030 	.word	0x00100030
 80054c8:	00100020 	.word	0x00100020

080054cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a40      	ldr	r2, [pc, #256]	; (8005644 <TIM_Base_SetConfig+0x114>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d00f      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3d      	ldr	r2, [pc, #244]	; (8005648 <TIM_Base_SetConfig+0x118>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3c      	ldr	r2, [pc, #240]	; (800564c <TIM_Base_SetConfig+0x11c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <TIM_Base_SetConfig+0x120>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <TIM_Base_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2f      	ldr	r2, [pc, #188]	; (8005644 <TIM_Base_SetConfig+0x114>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01f      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005590:	d01b      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <TIM_Base_SetConfig+0x118>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d017      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2b      	ldr	r2, [pc, #172]	; (800564c <TIM_Base_SetConfig+0x11c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <TIM_Base_SetConfig+0x120>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a29      	ldr	r2, [pc, #164]	; (8005654 <TIM_Base_SetConfig+0x124>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a28      	ldr	r2, [pc, #160]	; (8005658 <TIM_Base_SetConfig+0x128>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <TIM_Base_SetConfig+0x12c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a26      	ldr	r2, [pc, #152]	; (8005660 <TIM_Base_SetConfig+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d108      	bne.n	80055dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a10      	ldr	r2, [pc, #64]	; (8005644 <TIM_Base_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00f      	beq.n	8005628 <TIM_Base_SetConfig+0xf8>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a12      	ldr	r2, [pc, #72]	; (8005654 <TIM_Base_SetConfig+0x124>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a11      	ldr	r2, [pc, #68]	; (8005658 <TIM_Base_SetConfig+0x128>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0xf8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <TIM_Base_SetConfig+0x12c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0xf8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a0f      	ldr	r2, [pc, #60]	; (8005660 <TIM_Base_SetConfig+0x130>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d103      	bne.n	8005630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	615a      	str	r2, [r3, #20]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40000400 	.word	0x40000400
 800564c:	40000800 	.word	0x40000800
 8005650:	40000c00 	.word	0x40000c00
 8005654:	40010400 	.word	0x40010400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0201 	bic.w	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 030a 	bic.w	r3, r3, #10
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0210 	bic.w	r2, r3, #16
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	031b      	lsls	r3, r3, #12
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <TIM_ITRx_SetConfig+0x38>)
 8005738:	4013      	ands	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	f043 0307 	orr.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	ffcfff8f 	.word	0xffcfff8f

08005760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800577a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	021a      	lsls	r2, r3, #8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	431a      	orrs	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4313      	orrs	r3, r2
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e06d      	b.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a30      	ldr	r2, [pc, #192]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d108      	bne.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005804:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d022      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800582a:	d01d      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1d      	ldr	r2, [pc, #116]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10c      	bne.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40001800 	.word	0x40001800
 80058b8:	40014000 	.word	0x40014000

080058bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e042      	b.n	8005990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	2b00      	cmp	r3, #0
 8005912:	d106      	bne.n	8005922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7fb fb2f 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	; 0x24
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8ba 	bl	8005ab4 <UART_SetConfig>
 8005940:	4603      	mov	r3, r0
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e022      	b.n	8005990 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fe16 	bl	8006584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fe9d 	bl	80066c8 <UART_CheckIdleState>
 800598e:	4603      	mov	r3, r0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d17b      	bne.n	8005aaa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_UART_Transmit+0x26>
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e074      	b.n	8005aac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059d2:	f7fb fcef 	bl	80013b4 <HAL_GetTick>
 80059d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f0:	d108      	bne.n	8005a04 <HAL_UART_Transmit+0x6c>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	e003      	b.n	8005a0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a0c:	e030      	b.n	8005a70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 feff 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e03d      	b.n	8005aac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	3302      	adds	r3, #2
 8005a4a:	61bb      	str	r3, [r7, #24]
 8005a4c:	e007      	b.n	8005a5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	781a      	ldrb	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1c8      	bne.n	8005a0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fec8 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e006      	b.n	8005aac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
  }
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b092      	sub	sp, #72	; 0x48
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4bbe      	ldr	r3, [pc, #760]	; (8005ddc <UART_SetConfig+0x328>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005aec:	430b      	orrs	r3, r1
 8005aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4ab3      	ldr	r2, [pc, #716]	; (8005de0 <UART_SetConfig+0x32c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d004      	beq.n	8005b20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	4baf      	ldr	r3, [pc, #700]	; (8005de4 <UART_SetConfig+0x330>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f023 010f 	bic.w	r1, r3, #15
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4aa6      	ldr	r2, [pc, #664]	; (8005de8 <UART_SetConfig+0x334>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d177      	bne.n	8005c44 <UART_SetConfig+0x190>
 8005b54:	4ba5      	ldr	r3, [pc, #660]	; (8005dec <UART_SetConfig+0x338>)
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b5c:	2b28      	cmp	r3, #40	; 0x28
 8005b5e:	d86d      	bhi.n	8005c3c <UART_SetConfig+0x188>
 8005b60:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <UART_SetConfig+0xb4>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005c0d 	.word	0x08005c0d
 8005b6c:	08005c3d 	.word	0x08005c3d
 8005b70:	08005c3d 	.word	0x08005c3d
 8005b74:	08005c3d 	.word	0x08005c3d
 8005b78:	08005c3d 	.word	0x08005c3d
 8005b7c:	08005c3d 	.word	0x08005c3d
 8005b80:	08005c3d 	.word	0x08005c3d
 8005b84:	08005c3d 	.word	0x08005c3d
 8005b88:	08005c15 	.word	0x08005c15
 8005b8c:	08005c3d 	.word	0x08005c3d
 8005b90:	08005c3d 	.word	0x08005c3d
 8005b94:	08005c3d 	.word	0x08005c3d
 8005b98:	08005c3d 	.word	0x08005c3d
 8005b9c:	08005c3d 	.word	0x08005c3d
 8005ba0:	08005c3d 	.word	0x08005c3d
 8005ba4:	08005c3d 	.word	0x08005c3d
 8005ba8:	08005c1d 	.word	0x08005c1d
 8005bac:	08005c3d 	.word	0x08005c3d
 8005bb0:	08005c3d 	.word	0x08005c3d
 8005bb4:	08005c3d 	.word	0x08005c3d
 8005bb8:	08005c3d 	.word	0x08005c3d
 8005bbc:	08005c3d 	.word	0x08005c3d
 8005bc0:	08005c3d 	.word	0x08005c3d
 8005bc4:	08005c3d 	.word	0x08005c3d
 8005bc8:	08005c25 	.word	0x08005c25
 8005bcc:	08005c3d 	.word	0x08005c3d
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005c3d 	.word	0x08005c3d
 8005be8:	08005c2d 	.word	0x08005c2d
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	08005c3d 	.word	0x08005c3d
 8005bf4:	08005c3d 	.word	0x08005c3d
 8005bf8:	08005c3d 	.word	0x08005c3d
 8005bfc:	08005c3d 	.word	0x08005c3d
 8005c00:	08005c3d 	.word	0x08005c3d
 8005c04:	08005c3d 	.word	0x08005c3d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e222      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c14:	2304      	movs	r3, #4
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e21e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e21a      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e216      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e212      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c34:	2340      	movs	r3, #64	; 0x40
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e20e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e20a      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a69      	ldr	r2, [pc, #420]	; (8005df0 <UART_SetConfig+0x33c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d130      	bne.n	8005cb0 <UART_SetConfig+0x1fc>
 8005c4e:	4b67      	ldr	r3, [pc, #412]	; (8005dec <UART_SetConfig+0x338>)
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d826      	bhi.n	8005ca8 <UART_SetConfig+0x1f4>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x1ac>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c79 	.word	0x08005c79
 8005c64:	08005c81 	.word	0x08005c81
 8005c68:	08005c89 	.word	0x08005c89
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005ca1 	.word	0x08005ca1
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1ec      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e1e8      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e1e4      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e1e0      	b.n	800605a <UART_SetConfig+0x5a6>
 8005c98:	2320      	movs	r3, #32
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e1dc      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ca0:	2340      	movs	r3, #64	; 0x40
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e1d8      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cae:	e1d4      	b.n	800605a <UART_SetConfig+0x5a6>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a4f      	ldr	r2, [pc, #316]	; (8005df4 <UART_SetConfig+0x340>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d130      	bne.n	8005d1c <UART_SetConfig+0x268>
 8005cba:	4b4c      	ldr	r3, [pc, #304]	; (8005dec <UART_SetConfig+0x338>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d826      	bhi.n	8005d14 <UART_SetConfig+0x260>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x218>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005cf5 	.word	0x08005cf5
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e1b6      	b.n	800605a <UART_SetConfig+0x5a6>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e1b2      	b.n	800605a <UART_SetConfig+0x5a6>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e1ae      	b.n	800605a <UART_SetConfig+0x5a6>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e1aa      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d04:	2320      	movs	r3, #32
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e1a6      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d0c:	2340      	movs	r3, #64	; 0x40
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e1a2      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e19e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <UART_SetConfig+0x344>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d130      	bne.n	8005d88 <UART_SetConfig+0x2d4>
 8005d26:	4b31      	ldr	r3, [pc, #196]	; (8005dec <UART_SetConfig+0x338>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d826      	bhi.n	8005d80 <UART_SetConfig+0x2cc>
 8005d32:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x284>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d51 	.word	0x08005d51
 8005d3c:	08005d59 	.word	0x08005d59
 8005d40:	08005d61 	.word	0x08005d61
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d71 	.word	0x08005d71
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e180      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e17c      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e178      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e174      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d70:	2320      	movs	r3, #32
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e170      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d7e:	e16c      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d86:	e168      	b.n	800605a <UART_SetConfig+0x5a6>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <UART_SetConfig+0x348>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d142      	bne.n	8005e18 <UART_SetConfig+0x364>
 8005d92:	4b16      	ldr	r3, [pc, #88]	; (8005dec <UART_SetConfig+0x338>)
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	d838      	bhi.n	8005e10 <UART_SetConfig+0x35c>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <UART_SetConfig+0x2f0>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005dbd 	.word	0x08005dbd
 8005da8:	08005dc5 	.word	0x08005dc5
 8005dac:	08005dcd 	.word	0x08005dcd
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005e01 	.word	0x08005e01
 8005db8:	08005e09 	.word	0x08005e09
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e14a      	b.n	800605a <UART_SetConfig+0x5a6>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e146      	b.n	800605a <UART_SetConfig+0x5a6>
 8005dcc:	2308      	movs	r3, #8
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e142      	b.n	800605a <UART_SetConfig+0x5a6>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e13e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ddc:	cfff69f3 	.word	0xcfff69f3
 8005de0:	58000c00 	.word	0x58000c00
 8005de4:	11fff4ff 	.word	0x11fff4ff
 8005de8:	40011000 	.word	0x40011000
 8005dec:	58024400 	.word	0x58024400
 8005df0:	40004400 	.word	0x40004400
 8005df4:	40004800 	.word	0x40004800
 8005df8:	40004c00 	.word	0x40004c00
 8005dfc:	40005000 	.word	0x40005000
 8005e00:	2320      	movs	r3, #32
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e128      	b.n	800605a <UART_SetConfig+0x5a6>
 8005e08:	2340      	movs	r3, #64	; 0x40
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e124      	b.n	800605a <UART_SetConfig+0x5a6>
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e120      	b.n	800605a <UART_SetConfig+0x5a6>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4acb      	ldr	r2, [pc, #812]	; (800614c <UART_SetConfig+0x698>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d176      	bne.n	8005f10 <UART_SetConfig+0x45c>
 8005e22:	4bcb      	ldr	r3, [pc, #812]	; (8006150 <UART_SetConfig+0x69c>)
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2a:	2b28      	cmp	r3, #40	; 0x28
 8005e2c:	d86c      	bhi.n	8005f08 <UART_SetConfig+0x454>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <UART_SetConfig+0x380>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005ed9 	.word	0x08005ed9
 8005e38:	08005f09 	.word	0x08005f09
 8005e3c:	08005f09 	.word	0x08005f09
 8005e40:	08005f09 	.word	0x08005f09
 8005e44:	08005f09 	.word	0x08005f09
 8005e48:	08005f09 	.word	0x08005f09
 8005e4c:	08005f09 	.word	0x08005f09
 8005e50:	08005f09 	.word	0x08005f09
 8005e54:	08005ee1 	.word	0x08005ee1
 8005e58:	08005f09 	.word	0x08005f09
 8005e5c:	08005f09 	.word	0x08005f09
 8005e60:	08005f09 	.word	0x08005f09
 8005e64:	08005f09 	.word	0x08005f09
 8005e68:	08005f09 	.word	0x08005f09
 8005e6c:	08005f09 	.word	0x08005f09
 8005e70:	08005f09 	.word	0x08005f09
 8005e74:	08005ee9 	.word	0x08005ee9
 8005e78:	08005f09 	.word	0x08005f09
 8005e7c:	08005f09 	.word	0x08005f09
 8005e80:	08005f09 	.word	0x08005f09
 8005e84:	08005f09 	.word	0x08005f09
 8005e88:	08005f09 	.word	0x08005f09
 8005e8c:	08005f09 	.word	0x08005f09
 8005e90:	08005f09 	.word	0x08005f09
 8005e94:	08005ef1 	.word	0x08005ef1
 8005e98:	08005f09 	.word	0x08005f09
 8005e9c:	08005f09 	.word	0x08005f09
 8005ea0:	08005f09 	.word	0x08005f09
 8005ea4:	08005f09 	.word	0x08005f09
 8005ea8:	08005f09 	.word	0x08005f09
 8005eac:	08005f09 	.word	0x08005f09
 8005eb0:	08005f09 	.word	0x08005f09
 8005eb4:	08005ef9 	.word	0x08005ef9
 8005eb8:	08005f09 	.word	0x08005f09
 8005ebc:	08005f09 	.word	0x08005f09
 8005ec0:	08005f09 	.word	0x08005f09
 8005ec4:	08005f09 	.word	0x08005f09
 8005ec8:	08005f09 	.word	0x08005f09
 8005ecc:	08005f09 	.word	0x08005f09
 8005ed0:	08005f09 	.word	0x08005f09
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e0bc      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e0b8      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e0b4      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e0b0      	b.n	800605a <UART_SetConfig+0x5a6>
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e0ac      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e0a8      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e0a4      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a8f      	ldr	r2, [pc, #572]	; (8006154 <UART_SetConfig+0x6a0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d130      	bne.n	8005f7c <UART_SetConfig+0x4c8>
 8005f1a:	4b8d      	ldr	r3, [pc, #564]	; (8006150 <UART_SetConfig+0x69c>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d826      	bhi.n	8005f74 <UART_SetConfig+0x4c0>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x478>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f55 	.word	0x08005f55
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e086      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e082      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e07e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e07a      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f64:	2320      	movs	r3, #32
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6a:	e076      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e072      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e06e      	b.n	800605a <UART_SetConfig+0x5a6>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a75      	ldr	r2, [pc, #468]	; (8006158 <UART_SetConfig+0x6a4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d130      	bne.n	8005fe8 <UART_SetConfig+0x534>
 8005f86:	4b72      	ldr	r3, [pc, #456]	; (8006150 <UART_SetConfig+0x69c>)
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d826      	bhi.n	8005fe0 <UART_SetConfig+0x52c>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x4e4>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fb1 	.word	0x08005fb1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e050      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e04c      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e048      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e044      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd6:	e040      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fd8:	2340      	movs	r3, #64	; 0x40
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fde:	e03c      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe6:	e038      	b.n	800605a <UART_SetConfig+0x5a6>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a5b      	ldr	r2, [pc, #364]	; (800615c <UART_SetConfig+0x6a8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d130      	bne.n	8006054 <UART_SetConfig+0x5a0>
 8005ff2:	4b57      	ldr	r3, [pc, #348]	; (8006150 <UART_SetConfig+0x69c>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	2b05      	cmp	r3, #5
 8005ffc:	d826      	bhi.n	800604c <UART_SetConfig+0x598>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x550>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	0800601d 	.word	0x0800601d
 8006008:	08006025 	.word	0x08006025
 800600c:	0800602d 	.word	0x0800602d
 8006010:	08006035 	.word	0x08006035
 8006014:	0800603d 	.word	0x0800603d
 8006018:	08006045 	.word	0x08006045
 800601c:	2302      	movs	r3, #2
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e01a      	b.n	800605a <UART_SetConfig+0x5a6>
 8006024:	2304      	movs	r3, #4
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e016      	b.n	800605a <UART_SetConfig+0x5a6>
 800602c:	2308      	movs	r3, #8
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e012      	b.n	800605a <UART_SetConfig+0x5a6>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e00e      	b.n	800605a <UART_SetConfig+0x5a6>
 800603c:	2320      	movs	r3, #32
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e00a      	b.n	800605a <UART_SetConfig+0x5a6>
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604a:	e006      	b.n	800605a <UART_SetConfig+0x5a6>
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006052:	e002      	b.n	800605a <UART_SetConfig+0x5a6>
 8006054:	2380      	movs	r3, #128	; 0x80
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3f      	ldr	r2, [pc, #252]	; (800615c <UART_SetConfig+0x6a8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	f040 80f8 	bne.w	8006256 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006066:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800606a:	2b20      	cmp	r3, #32
 800606c:	dc46      	bgt.n	80060fc <UART_SetConfig+0x648>
 800606e:	2b02      	cmp	r3, #2
 8006070:	f2c0 8082 	blt.w	8006178 <UART_SetConfig+0x6c4>
 8006074:	3b02      	subs	r3, #2
 8006076:	2b1e      	cmp	r3, #30
 8006078:	d87e      	bhi.n	8006178 <UART_SetConfig+0x6c4>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x5cc>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006103 	.word	0x08006103
 8006084:	08006179 	.word	0x08006179
 8006088:	0800610b 	.word	0x0800610b
 800608c:	08006179 	.word	0x08006179
 8006090:	08006179 	.word	0x08006179
 8006094:	08006179 	.word	0x08006179
 8006098:	0800611b 	.word	0x0800611b
 800609c:	08006179 	.word	0x08006179
 80060a0:	08006179 	.word	0x08006179
 80060a4:	08006179 	.word	0x08006179
 80060a8:	08006179 	.word	0x08006179
 80060ac:	08006179 	.word	0x08006179
 80060b0:	08006179 	.word	0x08006179
 80060b4:	08006179 	.word	0x08006179
 80060b8:	0800612b 	.word	0x0800612b
 80060bc:	08006179 	.word	0x08006179
 80060c0:	08006179 	.word	0x08006179
 80060c4:	08006179 	.word	0x08006179
 80060c8:	08006179 	.word	0x08006179
 80060cc:	08006179 	.word	0x08006179
 80060d0:	08006179 	.word	0x08006179
 80060d4:	08006179 	.word	0x08006179
 80060d8:	08006179 	.word	0x08006179
 80060dc:	08006179 	.word	0x08006179
 80060e0:	08006179 	.word	0x08006179
 80060e4:	08006179 	.word	0x08006179
 80060e8:	08006179 	.word	0x08006179
 80060ec:	08006179 	.word	0x08006179
 80060f0:	08006179 	.word	0x08006179
 80060f4:	08006179 	.word	0x08006179
 80060f8:	0800616b 	.word	0x0800616b
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	d037      	beq.n	8006170 <UART_SetConfig+0x6bc>
 8006100:	e03a      	b.n	8006178 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006102:	f7fd fed1 	bl	8003ea8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006108:	e03c      	b.n	8006184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd fee0 	bl	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006118:	e034      	b.n	8006184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800611a:	f107 0318 	add.w	r3, r7, #24
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe f82c 	bl	800417c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006128:	e02c      	b.n	8006184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <UART_SetConfig+0x69c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d016      	beq.n	8006164 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006136:	4b06      	ldr	r3, [pc, #24]	; (8006150 <UART_SetConfig+0x69c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	08db      	lsrs	r3, r3, #3
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	4a07      	ldr	r2, [pc, #28]	; (8006160 <UART_SetConfig+0x6ac>)
 8006142:	fa22 f303 	lsr.w	r3, r2, r3
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006148:	e01c      	b.n	8006184 <UART_SetConfig+0x6d0>
 800614a:	bf00      	nop
 800614c:	40011400 	.word	0x40011400
 8006150:	58024400 	.word	0x58024400
 8006154:	40007800 	.word	0x40007800
 8006158:	40007c00 	.word	0x40007c00
 800615c:	58000c00 	.word	0x58000c00
 8006160:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006164:	4b9d      	ldr	r3, [pc, #628]	; (80063dc <UART_SetConfig+0x928>)
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006168:	e00c      	b.n	8006184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800616a:	4b9d      	ldr	r3, [pc, #628]	; (80063e0 <UART_SetConfig+0x92c>)
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800616e:	e009      	b.n	8006184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006176:	e005      	b.n	8006184 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 81de 	beq.w	8006548 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	4a94      	ldr	r2, [pc, #592]	; (80063e4 <UART_SetConfig+0x930>)
 8006192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006196:	461a      	mov	r2, r3
 8006198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619a:	fbb3 f3f2 	udiv	r3, r3, r2
 800619e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d305      	bcc.n	80061bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d903      	bls.n	80061c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061c2:	e1c1      	b.n	8006548 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	2200      	movs	r2, #0
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	60fa      	str	r2, [r7, #12]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	4a84      	ldr	r2, [pc, #528]	; (80063e4 <UART_SetConfig+0x930>)
 80061d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2200      	movs	r2, #0
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061e6:	f7fa f8cb 	bl	8000380 <__aeabi_uldivmod>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	020b      	lsls	r3, r1, #8
 80061fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006200:	0202      	lsls	r2, r0, #8
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	6849      	ldr	r1, [r1, #4]
 8006206:	0849      	lsrs	r1, r1, #1
 8006208:	2000      	movs	r0, #0
 800620a:	460c      	mov	r4, r1
 800620c:	4605      	mov	r5, r0
 800620e:	eb12 0804 	adds.w	r8, r2, r4
 8006212:	eb43 0905 	adc.w	r9, r3, r5
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	469a      	mov	sl, r3
 800621e:	4693      	mov	fp, r2
 8006220:	4652      	mov	r2, sl
 8006222:	465b      	mov	r3, fp
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	f7fa f8aa 	bl	8000380 <__aeabi_uldivmod>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4613      	mov	r3, r2
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623a:	d308      	bcc.n	800624e <UART_SetConfig+0x79a>
 800623c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d204      	bcs.n	800624e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e17c      	b.n	8006548 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006254:	e178      	b.n	8006548 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625e:	f040 80c5 	bne.w	80063ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006266:	2b20      	cmp	r3, #32
 8006268:	dc48      	bgt.n	80062fc <UART_SetConfig+0x848>
 800626a:	2b00      	cmp	r3, #0
 800626c:	db7b      	blt.n	8006366 <UART_SetConfig+0x8b2>
 800626e:	2b20      	cmp	r3, #32
 8006270:	d879      	bhi.n	8006366 <UART_SetConfig+0x8b2>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <UART_SetConfig+0x7c4>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006303 	.word	0x08006303
 800627c:	0800630b 	.word	0x0800630b
 8006280:	08006367 	.word	0x08006367
 8006284:	08006367 	.word	0x08006367
 8006288:	08006313 	.word	0x08006313
 800628c:	08006367 	.word	0x08006367
 8006290:	08006367 	.word	0x08006367
 8006294:	08006367 	.word	0x08006367
 8006298:	08006323 	.word	0x08006323
 800629c:	08006367 	.word	0x08006367
 80062a0:	08006367 	.word	0x08006367
 80062a4:	08006367 	.word	0x08006367
 80062a8:	08006367 	.word	0x08006367
 80062ac:	08006367 	.word	0x08006367
 80062b0:	08006367 	.word	0x08006367
 80062b4:	08006367 	.word	0x08006367
 80062b8:	08006333 	.word	0x08006333
 80062bc:	08006367 	.word	0x08006367
 80062c0:	08006367 	.word	0x08006367
 80062c4:	08006367 	.word	0x08006367
 80062c8:	08006367 	.word	0x08006367
 80062cc:	08006367 	.word	0x08006367
 80062d0:	08006367 	.word	0x08006367
 80062d4:	08006367 	.word	0x08006367
 80062d8:	08006367 	.word	0x08006367
 80062dc:	08006367 	.word	0x08006367
 80062e0:	08006367 	.word	0x08006367
 80062e4:	08006367 	.word	0x08006367
 80062e8:	08006367 	.word	0x08006367
 80062ec:	08006367 	.word	0x08006367
 80062f0:	08006367 	.word	0x08006367
 80062f4:	08006367 	.word	0x08006367
 80062f8:	08006359 	.word	0x08006359
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d02e      	beq.n	800635e <UART_SetConfig+0x8aa>
 8006300:	e031      	b.n	8006366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006302:	f7fc fb9b 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8006306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006308:	e033      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800630a:	f7fc fbad 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 800630e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006310:	e02f      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fddc 	bl	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006320:	e027      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006322:	f107 0318 	add.w	r3, r7, #24
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd ff28 	bl	800417c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006330:	e01f      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006332:	4b2d      	ldr	r3, [pc, #180]	; (80063e8 <UART_SetConfig+0x934>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800633e:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <UART_SetConfig+0x934>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	08db      	lsrs	r3, r3, #3
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	4a24      	ldr	r2, [pc, #144]	; (80063dc <UART_SetConfig+0x928>)
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006350:	e00f      	b.n	8006372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006352:	4b22      	ldr	r3, [pc, #136]	; (80063dc <UART_SetConfig+0x928>)
 8006354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006356:	e00c      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006358:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <UART_SetConfig+0x92c>)
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800635c:	e009      	b.n	8006372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006364:	e005      	b.n	8006372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80e7 	beq.w	8006548 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <UART_SetConfig+0x930>)
 8006380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006384:	461a      	mov	r2, r3
 8006386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006388:	fbb3 f3f2 	udiv	r3, r3, r2
 800638c:	005a      	lsls	r2, r3, #1
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	441a      	add	r2, r3
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	fbb2 f3f3 	udiv	r3, r2, r3
 800639e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	d916      	bls.n	80063d4 <UART_SetConfig+0x920>
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d212      	bcs.n	80063d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f023 030f 	bic.w	r3, r3, #15
 80063b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	085b      	lsrs	r3, r3, #1
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063c6:	4313      	orrs	r3, r2
 80063c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e0b9      	b.n	8006548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063da:	e0b5      	b.n	8006548 <UART_SetConfig+0xa94>
 80063dc:	03d09000 	.word	0x03d09000
 80063e0:	003d0900 	.word	0x003d0900
 80063e4:	08007538 	.word	0x08007538
 80063e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	dc49      	bgt.n	8006488 <UART_SetConfig+0x9d4>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	db7c      	blt.n	80064f2 <UART_SetConfig+0xa3e>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d87a      	bhi.n	80064f2 <UART_SetConfig+0xa3e>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <UART_SetConfig+0x950>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	0800648f 	.word	0x0800648f
 8006408:	08006497 	.word	0x08006497
 800640c:	080064f3 	.word	0x080064f3
 8006410:	080064f3 	.word	0x080064f3
 8006414:	0800649f 	.word	0x0800649f
 8006418:	080064f3 	.word	0x080064f3
 800641c:	080064f3 	.word	0x080064f3
 8006420:	080064f3 	.word	0x080064f3
 8006424:	080064af 	.word	0x080064af
 8006428:	080064f3 	.word	0x080064f3
 800642c:	080064f3 	.word	0x080064f3
 8006430:	080064f3 	.word	0x080064f3
 8006434:	080064f3 	.word	0x080064f3
 8006438:	080064f3 	.word	0x080064f3
 800643c:	080064f3 	.word	0x080064f3
 8006440:	080064f3 	.word	0x080064f3
 8006444:	080064bf 	.word	0x080064bf
 8006448:	080064f3 	.word	0x080064f3
 800644c:	080064f3 	.word	0x080064f3
 8006450:	080064f3 	.word	0x080064f3
 8006454:	080064f3 	.word	0x080064f3
 8006458:	080064f3 	.word	0x080064f3
 800645c:	080064f3 	.word	0x080064f3
 8006460:	080064f3 	.word	0x080064f3
 8006464:	080064f3 	.word	0x080064f3
 8006468:	080064f3 	.word	0x080064f3
 800646c:	080064f3 	.word	0x080064f3
 8006470:	080064f3 	.word	0x080064f3
 8006474:	080064f3 	.word	0x080064f3
 8006478:	080064f3 	.word	0x080064f3
 800647c:	080064f3 	.word	0x080064f3
 8006480:	080064f3 	.word	0x080064f3
 8006484:	080064e5 	.word	0x080064e5
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d02e      	beq.n	80064ea <UART_SetConfig+0xa36>
 800648c:	e031      	b.n	80064f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800648e:	f7fc fad5 	bl	8002a3c <HAL_RCC_GetPCLK1Freq>
 8006492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006494:	e033      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006496:	f7fc fae7 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 800649a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800649c:	e02f      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fd fd16 	bl	8003ed4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ac:	e027      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ae:	f107 0318 	add.w	r3, r7, #24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fe62 	bl	800417c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064bc:	e01f      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064be:	4b2d      	ldr	r3, [pc, #180]	; (8006574 <UART_SetConfig+0xac0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <UART_SetConfig+0xac0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	08db      	lsrs	r3, r3, #3
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	4a28      	ldr	r2, [pc, #160]	; (8006578 <UART_SetConfig+0xac4>)
 80064d6:	fa22 f303 	lsr.w	r3, r2, r3
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064dc:	e00f      	b.n	80064fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <UART_SetConfig+0xac4>)
 80064e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e2:	e00c      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <UART_SetConfig+0xac8>)
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e8:	e009      	b.n	80064fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f0:	e005      	b.n	80064fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80064fc:	bf00      	nop
    }

    if (pclk != 0U)
 80064fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d021      	beq.n	8006548 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <UART_SetConfig+0xacc>)
 800650a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800650e:	461a      	mov	r2, r3
 8006510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006512:	fbb3 f2f2 	udiv	r2, r3, r2
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	085b      	lsrs	r3, r3, #1
 800651c:	441a      	add	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b0f      	cmp	r3, #15
 800652c:	d909      	bls.n	8006542 <UART_SetConfig+0xa8e>
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006534:	d205      	bcs.n	8006542 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	b29a      	uxth	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e002      	b.n	8006548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2201      	movs	r2, #1
 800654c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2201      	movs	r2, #1
 8006554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006564:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006568:	4618      	mov	r0, r3
 800656a:	3748      	adds	r7, #72	; 0x48
 800656c:	46bd      	mov	sp, r7
 800656e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	03d09000 	.word	0x03d09000
 800657c:	003d0900 	.word	0x003d0900
 8006580:	08007538 	.word	0x08007538

08006584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01a      	beq.n	800669a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006682:	d10a      	bne.n	800669a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	605a      	str	r2, [r3, #4]
  }
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b098      	sub	sp, #96	; 0x60
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066d8:	f7fa fe6c 	bl	80013b4 <HAL_GetTick>
 80066dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d12f      	bne.n	800674c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f88e 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d022      	beq.n	800674c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671a:	653b      	str	r3, [r7, #80]	; 0x50
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e6      	bne.n	8006706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e063      	b.n	8006814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b04      	cmp	r3, #4
 8006758:	d149      	bne.n	80067ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006762:	2200      	movs	r2, #0
 8006764:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f857 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d03c      	beq.n	80067ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	623b      	str	r3, [r7, #32]
   return(result);
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006792:	633b      	str	r3, [r7, #48]	; 0x30
 8006794:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3308      	adds	r3, #8
 80067c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e5      	bne.n	80067a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e012      	b.n	8006814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3758      	adds	r7, #88	; 0x58
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e049      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d045      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fa fdbd 	bl	80013b4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e048      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d031      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d110      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f839 	bl	80068ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2208      	movs	r2, #8
 800687e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e029      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689c:	d111      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f81f 	bl	80068ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00f      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d0a6      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b095      	sub	sp, #84	; 0x54
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006912:	643b      	str	r3, [r7, #64]	; 0x40
 8006914:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e6      	bne.n	80068f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	61fb      	str	r3, [r7, #28]
   return(result);
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <UART_EndRxTransfer+0xc8>)
 800693a:	4013      	ands	r3, r2
 800693c:	64bb      	str	r3, [r7, #72]	; 0x48
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3308      	adds	r3, #8
 8006944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e5      	bne.n	8006926 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d118      	bne.n	8006994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 0310 	bic.w	r3, r3, #16
 8006976:	647b      	str	r3, [r7, #68]	; 0x44
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6979      	ldr	r1, [r7, #20]
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e6      	bne.n	8006962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2220      	movs	r2, #32
 8006998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80069a8:	bf00      	nop
 80069aa:	3754      	adds	r7, #84	; 0x54
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	effffffe 	.word	0xeffffffe

080069b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d101      	bne.n	80069ce <HAL_UARTEx_DisableFifoMode+0x16>
 80069ca:	2302      	movs	r3, #2
 80069cc:	e027      	b.n	8006a1e <HAL_UARTEx_DisableFifoMode+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2224      	movs	r2, #36	; 0x24
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e02d      	b.n	8006a9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2224      	movs	r2, #36	; 0x24
 8006a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f850 	bl	8006b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e02d      	b.n	8006b1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2224      	movs	r2, #36	; 0x24
 8006aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0201 	bic.w	r2, r2, #1
 8006ae4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f812 	bl	8006b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d108      	bne.n	8006b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b44:	e031      	b.n	8006baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b46:	2310      	movs	r3, #16
 8006b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b4a:	2310      	movs	r3, #16
 8006b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	0e5b      	lsrs	r3, r3, #25
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	0f5b      	lsrs	r3, r3, #29
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	7b3a      	ldrb	r2, [r7, #12]
 8006b72:	4911      	ldr	r1, [pc, #68]	; (8006bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006b74:	5c8a      	ldrb	r2, [r1, r2]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b7a:	7b3a      	ldrb	r2, [r7, #12]
 8006b7c:	490f      	ldr	r1, [pc, #60]	; (8006bbc <UARTEx_SetNbDataToProcess+0x98>)
 8006b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	7b7a      	ldrb	r2, [r7, #13]
 8006b90:	4909      	ldr	r1, [pc, #36]	; (8006bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006b92:	5c8a      	ldrb	r2, [r1, r2]
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b98:	7b7a      	ldrb	r2, [r7, #13]
 8006b9a:	4908      	ldr	r1, [pc, #32]	; (8006bbc <UARTEx_SetNbDataToProcess+0x98>)
 8006b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	08007550 	.word	0x08007550
 8006bbc:	08007558 	.word	0x08007558

08006bc0 <__errno>:
 8006bc0:	4b01      	ldr	r3, [pc, #4]	; (8006bc8 <__errno+0x8>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	24000010 	.word	0x24000010

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f000 fc8e 	bl	8007500 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	0800759c 	.word	0x0800759c
 8006c08:	0800759c 	.word	0x0800759c
 8006c0c:	0800759c 	.word	0x0800759c
 8006c10:	080075a0 	.word	0x080075a0

08006c14 <memset>:
 8006c14:	4402      	add	r2, r0
 8006c16:	4603      	mov	r3, r0
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d100      	bne.n	8006c1e <memset+0xa>
 8006c1c:	4770      	bx	lr
 8006c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c22:	e7f9      	b.n	8006c18 <memset+0x4>

08006c24 <siprintf>:
 8006c24:	b40e      	push	{r1, r2, r3}
 8006c26:	b500      	push	{lr}
 8006c28:	b09c      	sub	sp, #112	; 0x70
 8006c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c2c:	9002      	str	r0, [sp, #8]
 8006c2e:	9006      	str	r0, [sp, #24]
 8006c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c34:	4809      	ldr	r0, [pc, #36]	; (8006c5c <siprintf+0x38>)
 8006c36:	9107      	str	r1, [sp, #28]
 8006c38:	9104      	str	r1, [sp, #16]
 8006c3a:	4909      	ldr	r1, [pc, #36]	; (8006c60 <siprintf+0x3c>)
 8006c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c40:	9105      	str	r1, [sp, #20]
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	a902      	add	r1, sp, #8
 8006c48:	f000 f868 	bl	8006d1c <_svfiprintf_r>
 8006c4c:	9b02      	ldr	r3, [sp, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	b01c      	add	sp, #112	; 0x70
 8006c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c58:	b003      	add	sp, #12
 8006c5a:	4770      	bx	lr
 8006c5c:	24000010 	.word	0x24000010
 8006c60:	ffff0208 	.word	0xffff0208

08006c64 <__ssputs_r>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	688e      	ldr	r6, [r1, #8]
 8006c6a:	429e      	cmp	r6, r3
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4690      	mov	r8, r2
 8006c72:	461f      	mov	r7, r3
 8006c74:	d838      	bhi.n	8006ce8 <__ssputs_r+0x84>
 8006c76:	898a      	ldrh	r2, [r1, #12]
 8006c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c7c:	d032      	beq.n	8006ce4 <__ssputs_r+0x80>
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	6909      	ldr	r1, [r1, #16]
 8006c82:	eba5 0901 	sub.w	r9, r5, r1
 8006c86:	6965      	ldr	r5, [r4, #20]
 8006c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c90:	3301      	adds	r3, #1
 8006c92:	444b      	add	r3, r9
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	429d      	cmp	r5, r3
 8006c98:	bf38      	it	cc
 8006c9a:	461d      	movcc	r5, r3
 8006c9c:	0553      	lsls	r3, r2, #21
 8006c9e:	d531      	bpl.n	8006d04 <__ssputs_r+0xa0>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f000 fb63 	bl	800736c <_malloc_r>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	b950      	cbnz	r0, 8006cc0 <__ssputs_r+0x5c>
 8006caa:	230c      	movs	r3, #12
 8006cac:	f8ca 3000 	str.w	r3, [sl]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	6921      	ldr	r1, [r4, #16]
 8006cc2:	464a      	mov	r2, r9
 8006cc4:	f000 fabe 	bl	8007244 <memcpy>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	6126      	str	r6, [r4, #16]
 8006cd6:	6165      	str	r5, [r4, #20]
 8006cd8:	444e      	add	r6, r9
 8006cda:	eba5 0509 	sub.w	r5, r5, r9
 8006cde:	6026      	str	r6, [r4, #0]
 8006ce0:	60a5      	str	r5, [r4, #8]
 8006ce2:	463e      	mov	r6, r7
 8006ce4:	42be      	cmp	r6, r7
 8006ce6:	d900      	bls.n	8006cea <__ssputs_r+0x86>
 8006ce8:	463e      	mov	r6, r7
 8006cea:	6820      	ldr	r0, [r4, #0]
 8006cec:	4632      	mov	r2, r6
 8006cee:	4641      	mov	r1, r8
 8006cf0:	f000 fab6 	bl	8007260 <memmove>
 8006cf4:	68a3      	ldr	r3, [r4, #8]
 8006cf6:	1b9b      	subs	r3, r3, r6
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	4433      	add	r3, r6
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	2000      	movs	r0, #0
 8006d02:	e7db      	b.n	8006cbc <__ssputs_r+0x58>
 8006d04:	462a      	mov	r2, r5
 8006d06:	f000 fba5 	bl	8007454 <_realloc_r>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1e1      	bne.n	8006cd4 <__ssputs_r+0x70>
 8006d10:	6921      	ldr	r1, [r4, #16]
 8006d12:	4650      	mov	r0, sl
 8006d14:	f000 fabe 	bl	8007294 <_free_r>
 8006d18:	e7c7      	b.n	8006caa <__ssputs_r+0x46>
	...

08006d1c <_svfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	4698      	mov	r8, r3
 8006d22:	898b      	ldrh	r3, [r1, #12]
 8006d24:	061b      	lsls	r3, r3, #24
 8006d26:	b09d      	sub	sp, #116	; 0x74
 8006d28:	4607      	mov	r7, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	d50e      	bpl.n	8006d4e <_svfiprintf_r+0x32>
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	b963      	cbnz	r3, 8006d4e <_svfiprintf_r+0x32>
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	f000 fb19 	bl	800736c <_malloc_r>
 8006d3a:	6028      	str	r0, [r5, #0]
 8006d3c:	6128      	str	r0, [r5, #16]
 8006d3e:	b920      	cbnz	r0, 8006d4a <_svfiprintf_r+0x2e>
 8006d40:	230c      	movs	r3, #12
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e0d1      	b.n	8006eee <_svfiprintf_r+0x1d2>
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	616b      	str	r3, [r5, #20]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9309      	str	r3, [sp, #36]	; 0x24
 8006d52:	2320      	movs	r3, #32
 8006d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5c:	2330      	movs	r3, #48	; 0x30
 8006d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f08 <_svfiprintf_r+0x1ec>
 8006d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d66:	f04f 0901 	mov.w	r9, #1
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	469a      	mov	sl, r3
 8006d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d72:	b10a      	cbz	r2, 8006d78 <_svfiprintf_r+0x5c>
 8006d74:	2a25      	cmp	r2, #37	; 0x25
 8006d76:	d1f9      	bne.n	8006d6c <_svfiprintf_r+0x50>
 8006d78:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7c:	d00b      	beq.n	8006d96 <_svfiprintf_r+0x7a>
 8006d7e:	465b      	mov	r3, fp
 8006d80:	4622      	mov	r2, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ff6d 	bl	8006c64 <__ssputs_r>
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f000 80aa 	beq.w	8006ee4 <_svfiprintf_r+0x1c8>
 8006d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d92:	445a      	add	r2, fp
 8006d94:	9209      	str	r2, [sp, #36]	; 0x24
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80a2 	beq.w	8006ee4 <_svfiprintf_r+0x1c8>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006daa:	f10a 0a01 	add.w	sl, sl, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db6:	931a      	str	r3, [sp, #104]	; 0x68
 8006db8:	4654      	mov	r4, sl
 8006dba:	2205      	movs	r2, #5
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	4851      	ldr	r0, [pc, #324]	; (8006f08 <_svfiprintf_r+0x1ec>)
 8006dc2:	f7f9 fa8d 	bl	80002e0 <memchr>
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	b9d8      	cbnz	r0, 8006e02 <_svfiprintf_r+0xe6>
 8006dca:	06d0      	lsls	r0, r2, #27
 8006dcc:	bf44      	itt	mi
 8006dce:	2320      	movmi	r3, #32
 8006dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd4:	0711      	lsls	r1, r2, #28
 8006dd6:	bf44      	itt	mi
 8006dd8:	232b      	movmi	r3, #43	; 0x2b
 8006dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dde:	f89a 3000 	ldrb.w	r3, [sl]
 8006de2:	2b2a      	cmp	r3, #42	; 0x2a
 8006de4:	d015      	beq.n	8006e12 <_svfiprintf_r+0xf6>
 8006de6:	9a07      	ldr	r2, [sp, #28]
 8006de8:	4654      	mov	r4, sl
 8006dea:	2000      	movs	r0, #0
 8006dec:	f04f 0c0a 	mov.w	ip, #10
 8006df0:	4621      	mov	r1, r4
 8006df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df6:	3b30      	subs	r3, #48	; 0x30
 8006df8:	2b09      	cmp	r3, #9
 8006dfa:	d94e      	bls.n	8006e9a <_svfiprintf_r+0x17e>
 8006dfc:	b1b0      	cbz	r0, 8006e2c <_svfiprintf_r+0x110>
 8006dfe:	9207      	str	r2, [sp, #28]
 8006e00:	e014      	b.n	8006e2c <_svfiprintf_r+0x110>
 8006e02:	eba0 0308 	sub.w	r3, r0, r8
 8006e06:	fa09 f303 	lsl.w	r3, r9, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	46a2      	mov	sl, r4
 8006e10:	e7d2      	b.n	8006db8 <_svfiprintf_r+0x9c>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	9103      	str	r1, [sp, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	425b      	neglt	r3, r3
 8006e20:	f042 0202 	orrlt.w	r2, r2, #2
 8006e24:	9307      	strge	r3, [sp, #28]
 8006e26:	9307      	strlt	r3, [sp, #28]
 8006e28:	bfb8      	it	lt
 8006e2a:	9204      	strlt	r2, [sp, #16]
 8006e2c:	7823      	ldrb	r3, [r4, #0]
 8006e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e30:	d10c      	bne.n	8006e4c <_svfiprintf_r+0x130>
 8006e32:	7863      	ldrb	r3, [r4, #1]
 8006e34:	2b2a      	cmp	r3, #42	; 0x2a
 8006e36:	d135      	bne.n	8006ea4 <_svfiprintf_r+0x188>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfb8      	it	lt
 8006e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e48:	3402      	adds	r4, #2
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f18 <_svfiprintf_r+0x1fc>
 8006e50:	7821      	ldrb	r1, [r4, #0]
 8006e52:	2203      	movs	r2, #3
 8006e54:	4650      	mov	r0, sl
 8006e56:	f7f9 fa43 	bl	80002e0 <memchr>
 8006e5a:	b140      	cbz	r0, 8006e6e <_svfiprintf_r+0x152>
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	eba0 000a 	sub.w	r0, r0, sl
 8006e62:	fa03 f000 	lsl.w	r0, r3, r0
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	4303      	orrs	r3, r0
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	4826      	ldr	r0, [pc, #152]	; (8006f0c <_svfiprintf_r+0x1f0>)
 8006e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e78:	2206      	movs	r2, #6
 8006e7a:	f7f9 fa31 	bl	80002e0 <memchr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d038      	beq.n	8006ef4 <_svfiprintf_r+0x1d8>
 8006e82:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <_svfiprintf_r+0x1f4>)
 8006e84:	bb1b      	cbnz	r3, 8006ece <_svfiprintf_r+0x1b2>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	4433      	add	r3, r6
 8006e96:	9309      	str	r3, [sp, #36]	; 0x24
 8006e98:	e767      	b.n	8006d6a <_svfiprintf_r+0x4e>
 8006e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	e7a5      	b.n	8006df0 <_svfiprintf_r+0xd4>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	3401      	adds	r4, #1
 8006ea8:	9305      	str	r3, [sp, #20]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f04f 0c0a 	mov.w	ip, #10
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	3a30      	subs	r2, #48	; 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d903      	bls.n	8006ec4 <_svfiprintf_r+0x1a8>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0c5      	beq.n	8006e4c <_svfiprintf_r+0x130>
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	e7c3      	b.n	8006e4c <_svfiprintf_r+0x130>
 8006ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e7f0      	b.n	8006eb0 <_svfiprintf_r+0x194>
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006ed6:	a904      	add	r1, sp, #16
 8006ed8:	4638      	mov	r0, r7
 8006eda:	f3af 8000 	nop.w
 8006ede:	1c42      	adds	r2, r0, #1
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	d1d6      	bne.n	8006e92 <_svfiprintf_r+0x176>
 8006ee4:	89ab      	ldrh	r3, [r5, #12]
 8006ee6:	065b      	lsls	r3, r3, #25
 8006ee8:	f53f af2c 	bmi.w	8006d44 <_svfiprintf_r+0x28>
 8006eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eee:	b01d      	add	sp, #116	; 0x74
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	ab03      	add	r3, sp, #12
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	4638      	mov	r0, r7
 8006f00:	f000 f87a 	bl	8006ff8 <_printf_i>
 8006f04:	e7eb      	b.n	8006ede <_svfiprintf_r+0x1c2>
 8006f06:	bf00      	nop
 8006f08:	08007560 	.word	0x08007560
 8006f0c:	0800756a 	.word	0x0800756a
 8006f10:	00000000 	.word	0x00000000
 8006f14:	08006c65 	.word	0x08006c65
 8006f18:	08007566 	.word	0x08007566

08006f1c <_printf_common>:
 8006f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	4616      	mov	r6, r2
 8006f22:	4699      	mov	r9, r3
 8006f24:	688a      	ldr	r2, [r1, #8]
 8006f26:	690b      	ldr	r3, [r1, #16]
 8006f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	bfb8      	it	lt
 8006f30:	4613      	movlt	r3, r2
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f38:	4607      	mov	r7, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b10a      	cbz	r2, 8006f42 <_printf_common+0x26>
 8006f3e:	3301      	adds	r3, #1
 8006f40:	6033      	str	r3, [r6, #0]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	0699      	lsls	r1, r3, #26
 8006f46:	bf42      	ittt	mi
 8006f48:	6833      	ldrmi	r3, [r6, #0]
 8006f4a:	3302      	addmi	r3, #2
 8006f4c:	6033      	strmi	r3, [r6, #0]
 8006f4e:	6825      	ldr	r5, [r4, #0]
 8006f50:	f015 0506 	ands.w	r5, r5, #6
 8006f54:	d106      	bne.n	8006f64 <_printf_common+0x48>
 8006f56:	f104 0a19 	add.w	sl, r4, #25
 8006f5a:	68e3      	ldr	r3, [r4, #12]
 8006f5c:	6832      	ldr	r2, [r6, #0]
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	42ab      	cmp	r3, r5
 8006f62:	dc26      	bgt.n	8006fb2 <_printf_common+0x96>
 8006f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f68:	1e13      	subs	r3, r2, #0
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	bf18      	it	ne
 8006f6e:	2301      	movne	r3, #1
 8006f70:	0692      	lsls	r2, r2, #26
 8006f72:	d42b      	bmi.n	8006fcc <_printf_common+0xb0>
 8006f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	47c0      	blx	r8
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d01e      	beq.n	8006fc0 <_printf_common+0xa4>
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	68e5      	ldr	r5, [r4, #12]
 8006f86:	6832      	ldr	r2, [r6, #0]
 8006f88:	f003 0306 	and.w	r3, r3, #6
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	bf08      	it	eq
 8006f90:	1aad      	subeq	r5, r5, r2
 8006f92:	68a3      	ldr	r3, [r4, #8]
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	bf0c      	ite	eq
 8006f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f9c:	2500      	movne	r5, #0
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	bfc4      	itt	gt
 8006fa2:	1a9b      	subgt	r3, r3, r2
 8006fa4:	18ed      	addgt	r5, r5, r3
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	341a      	adds	r4, #26
 8006faa:	42b5      	cmp	r5, r6
 8006fac:	d11a      	bne.n	8006fe4 <_printf_common+0xc8>
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e008      	b.n	8006fc4 <_printf_common+0xa8>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4638      	mov	r0, r7
 8006fba:	47c0      	blx	r8
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d103      	bne.n	8006fc8 <_printf_common+0xac>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	3501      	adds	r5, #1
 8006fca:	e7c6      	b.n	8006f5a <_printf_common+0x3e>
 8006fcc:	18e1      	adds	r1, r4, r3
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	2030      	movs	r0, #48	; 0x30
 8006fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fd6:	4422      	add	r2, r4
 8006fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	e7c7      	b.n	8006f74 <_printf_common+0x58>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4638      	mov	r0, r7
 8006fec:	47c0      	blx	r8
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d0e6      	beq.n	8006fc0 <_printf_common+0xa4>
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7d9      	b.n	8006faa <_printf_common+0x8e>
	...

08006ff8 <_printf_i>:
 8006ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	7e0f      	ldrb	r7, [r1, #24]
 8006ffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007000:	2f78      	cmp	r7, #120	; 0x78
 8007002:	4691      	mov	r9, r2
 8007004:	4680      	mov	r8, r0
 8007006:	460c      	mov	r4, r1
 8007008:	469a      	mov	sl, r3
 800700a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800700e:	d807      	bhi.n	8007020 <_printf_i+0x28>
 8007010:	2f62      	cmp	r7, #98	; 0x62
 8007012:	d80a      	bhi.n	800702a <_printf_i+0x32>
 8007014:	2f00      	cmp	r7, #0
 8007016:	f000 80d8 	beq.w	80071ca <_printf_i+0x1d2>
 800701a:	2f58      	cmp	r7, #88	; 0x58
 800701c:	f000 80a3 	beq.w	8007166 <_printf_i+0x16e>
 8007020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007028:	e03a      	b.n	80070a0 <_printf_i+0xa8>
 800702a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800702e:	2b15      	cmp	r3, #21
 8007030:	d8f6      	bhi.n	8007020 <_printf_i+0x28>
 8007032:	a101      	add	r1, pc, #4	; (adr r1, 8007038 <_printf_i+0x40>)
 8007034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007038:	08007091 	.word	0x08007091
 800703c:	080070a5 	.word	0x080070a5
 8007040:	08007021 	.word	0x08007021
 8007044:	08007021 	.word	0x08007021
 8007048:	08007021 	.word	0x08007021
 800704c:	08007021 	.word	0x08007021
 8007050:	080070a5 	.word	0x080070a5
 8007054:	08007021 	.word	0x08007021
 8007058:	08007021 	.word	0x08007021
 800705c:	08007021 	.word	0x08007021
 8007060:	08007021 	.word	0x08007021
 8007064:	080071b1 	.word	0x080071b1
 8007068:	080070d5 	.word	0x080070d5
 800706c:	08007193 	.word	0x08007193
 8007070:	08007021 	.word	0x08007021
 8007074:	08007021 	.word	0x08007021
 8007078:	080071d3 	.word	0x080071d3
 800707c:	08007021 	.word	0x08007021
 8007080:	080070d5 	.word	0x080070d5
 8007084:	08007021 	.word	0x08007021
 8007088:	08007021 	.word	0x08007021
 800708c:	0800719b 	.word	0x0800719b
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	1d1a      	adds	r2, r3, #4
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	602a      	str	r2, [r5, #0]
 8007098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800709c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0a3      	b.n	80071ec <_printf_i+0x1f4>
 80070a4:	6820      	ldr	r0, [r4, #0]
 80070a6:	6829      	ldr	r1, [r5, #0]
 80070a8:	0606      	lsls	r6, r0, #24
 80070aa:	f101 0304 	add.w	r3, r1, #4
 80070ae:	d50a      	bpl.n	80070c6 <_printf_i+0xce>
 80070b0:	680e      	ldr	r6, [r1, #0]
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	da03      	bge.n	80070c0 <_printf_i+0xc8>
 80070b8:	232d      	movs	r3, #45	; 0x2d
 80070ba:	4276      	negs	r6, r6
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	485e      	ldr	r0, [pc, #376]	; (800723c <_printf_i+0x244>)
 80070c2:	230a      	movs	r3, #10
 80070c4:	e019      	b.n	80070fa <_printf_i+0x102>
 80070c6:	680e      	ldr	r6, [r1, #0]
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070ce:	bf18      	it	ne
 80070d0:	b236      	sxthne	r6, r6
 80070d2:	e7ef      	b.n	80070b4 <_printf_i+0xbc>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	1d19      	adds	r1, r3, #4
 80070da:	6029      	str	r1, [r5, #0]
 80070dc:	0601      	lsls	r1, r0, #24
 80070de:	d501      	bpl.n	80070e4 <_printf_i+0xec>
 80070e0:	681e      	ldr	r6, [r3, #0]
 80070e2:	e002      	b.n	80070ea <_printf_i+0xf2>
 80070e4:	0646      	lsls	r6, r0, #25
 80070e6:	d5fb      	bpl.n	80070e0 <_printf_i+0xe8>
 80070e8:	881e      	ldrh	r6, [r3, #0]
 80070ea:	4854      	ldr	r0, [pc, #336]	; (800723c <_printf_i+0x244>)
 80070ec:	2f6f      	cmp	r7, #111	; 0x6f
 80070ee:	bf0c      	ite	eq
 80070f0:	2308      	moveq	r3, #8
 80070f2:	230a      	movne	r3, #10
 80070f4:	2100      	movs	r1, #0
 80070f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070fa:	6865      	ldr	r5, [r4, #4]
 80070fc:	60a5      	str	r5, [r4, #8]
 80070fe:	2d00      	cmp	r5, #0
 8007100:	bfa2      	ittt	ge
 8007102:	6821      	ldrge	r1, [r4, #0]
 8007104:	f021 0104 	bicge.w	r1, r1, #4
 8007108:	6021      	strge	r1, [r4, #0]
 800710a:	b90e      	cbnz	r6, 8007110 <_printf_i+0x118>
 800710c:	2d00      	cmp	r5, #0
 800710e:	d04d      	beq.n	80071ac <_printf_i+0x1b4>
 8007110:	4615      	mov	r5, r2
 8007112:	fbb6 f1f3 	udiv	r1, r6, r3
 8007116:	fb03 6711 	mls	r7, r3, r1, r6
 800711a:	5dc7      	ldrb	r7, [r0, r7]
 800711c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007120:	4637      	mov	r7, r6
 8007122:	42bb      	cmp	r3, r7
 8007124:	460e      	mov	r6, r1
 8007126:	d9f4      	bls.n	8007112 <_printf_i+0x11a>
 8007128:	2b08      	cmp	r3, #8
 800712a:	d10b      	bne.n	8007144 <_printf_i+0x14c>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	07de      	lsls	r6, r3, #31
 8007130:	d508      	bpl.n	8007144 <_printf_i+0x14c>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	6861      	ldr	r1, [r4, #4]
 8007136:	4299      	cmp	r1, r3
 8007138:	bfde      	ittt	le
 800713a:	2330      	movle	r3, #48	; 0x30
 800713c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007144:	1b52      	subs	r2, r2, r5
 8007146:	6122      	str	r2, [r4, #16]
 8007148:	f8cd a000 	str.w	sl, [sp]
 800714c:	464b      	mov	r3, r9
 800714e:	aa03      	add	r2, sp, #12
 8007150:	4621      	mov	r1, r4
 8007152:	4640      	mov	r0, r8
 8007154:	f7ff fee2 	bl	8006f1c <_printf_common>
 8007158:	3001      	adds	r0, #1
 800715a:	d14c      	bne.n	80071f6 <_printf_i+0x1fe>
 800715c:	f04f 30ff 	mov.w	r0, #4294967295
 8007160:	b004      	add	sp, #16
 8007162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007166:	4835      	ldr	r0, [pc, #212]	; (800723c <_printf_i+0x244>)
 8007168:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800716c:	6829      	ldr	r1, [r5, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f851 6b04 	ldr.w	r6, [r1], #4
 8007174:	6029      	str	r1, [r5, #0]
 8007176:	061d      	lsls	r5, r3, #24
 8007178:	d514      	bpl.n	80071a4 <_printf_i+0x1ac>
 800717a:	07df      	lsls	r7, r3, #31
 800717c:	bf44      	itt	mi
 800717e:	f043 0320 	orrmi.w	r3, r3, #32
 8007182:	6023      	strmi	r3, [r4, #0]
 8007184:	b91e      	cbnz	r6, 800718e <_printf_i+0x196>
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	f023 0320 	bic.w	r3, r3, #32
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	2310      	movs	r3, #16
 8007190:	e7b0      	b.n	80070f4 <_printf_i+0xfc>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	2378      	movs	r3, #120	; 0x78
 800719c:	4828      	ldr	r0, [pc, #160]	; (8007240 <_printf_i+0x248>)
 800719e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071a2:	e7e3      	b.n	800716c <_printf_i+0x174>
 80071a4:	0659      	lsls	r1, r3, #25
 80071a6:	bf48      	it	mi
 80071a8:	b2b6      	uxthmi	r6, r6
 80071aa:	e7e6      	b.n	800717a <_printf_i+0x182>
 80071ac:	4615      	mov	r5, r2
 80071ae:	e7bb      	b.n	8007128 <_printf_i+0x130>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	6826      	ldr	r6, [r4, #0]
 80071b4:	6961      	ldr	r1, [r4, #20]
 80071b6:	1d18      	adds	r0, r3, #4
 80071b8:	6028      	str	r0, [r5, #0]
 80071ba:	0635      	lsls	r5, r6, #24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	d501      	bpl.n	80071c4 <_printf_i+0x1cc>
 80071c0:	6019      	str	r1, [r3, #0]
 80071c2:	e002      	b.n	80071ca <_printf_i+0x1d2>
 80071c4:	0670      	lsls	r0, r6, #25
 80071c6:	d5fb      	bpl.n	80071c0 <_printf_i+0x1c8>
 80071c8:	8019      	strh	r1, [r3, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	6123      	str	r3, [r4, #16]
 80071ce:	4615      	mov	r5, r2
 80071d0:	e7ba      	b.n	8007148 <_printf_i+0x150>
 80071d2:	682b      	ldr	r3, [r5, #0]
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	602a      	str	r2, [r5, #0]
 80071d8:	681d      	ldr	r5, [r3, #0]
 80071da:	6862      	ldr	r2, [r4, #4]
 80071dc:	2100      	movs	r1, #0
 80071de:	4628      	mov	r0, r5
 80071e0:	f7f9 f87e 	bl	80002e0 <memchr>
 80071e4:	b108      	cbz	r0, 80071ea <_printf_i+0x1f2>
 80071e6:	1b40      	subs	r0, r0, r5
 80071e8:	6060      	str	r0, [r4, #4]
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	2300      	movs	r3, #0
 80071f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f4:	e7a8      	b.n	8007148 <_printf_i+0x150>
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	462a      	mov	r2, r5
 80071fa:	4649      	mov	r1, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	47d0      	blx	sl
 8007200:	3001      	adds	r0, #1
 8007202:	d0ab      	beq.n	800715c <_printf_i+0x164>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	079b      	lsls	r3, r3, #30
 8007208:	d413      	bmi.n	8007232 <_printf_i+0x23a>
 800720a:	68e0      	ldr	r0, [r4, #12]
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	4298      	cmp	r0, r3
 8007210:	bfb8      	it	lt
 8007212:	4618      	movlt	r0, r3
 8007214:	e7a4      	b.n	8007160 <_printf_i+0x168>
 8007216:	2301      	movs	r3, #1
 8007218:	4632      	mov	r2, r6
 800721a:	4649      	mov	r1, r9
 800721c:	4640      	mov	r0, r8
 800721e:	47d0      	blx	sl
 8007220:	3001      	adds	r0, #1
 8007222:	d09b      	beq.n	800715c <_printf_i+0x164>
 8007224:	3501      	adds	r5, #1
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	9903      	ldr	r1, [sp, #12]
 800722a:	1a5b      	subs	r3, r3, r1
 800722c:	42ab      	cmp	r3, r5
 800722e:	dcf2      	bgt.n	8007216 <_printf_i+0x21e>
 8007230:	e7eb      	b.n	800720a <_printf_i+0x212>
 8007232:	2500      	movs	r5, #0
 8007234:	f104 0619 	add.w	r6, r4, #25
 8007238:	e7f5      	b.n	8007226 <_printf_i+0x22e>
 800723a:	bf00      	nop
 800723c:	08007571 	.word	0x08007571
 8007240:	08007582 	.word	0x08007582

08007244 <memcpy>:
 8007244:	440a      	add	r2, r1
 8007246:	4291      	cmp	r1, r2
 8007248:	f100 33ff 	add.w	r3, r0, #4294967295
 800724c:	d100      	bne.n	8007250 <memcpy+0xc>
 800724e:	4770      	bx	lr
 8007250:	b510      	push	{r4, lr}
 8007252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725a:	4291      	cmp	r1, r2
 800725c:	d1f9      	bne.n	8007252 <memcpy+0xe>
 800725e:	bd10      	pop	{r4, pc}

08007260 <memmove>:
 8007260:	4288      	cmp	r0, r1
 8007262:	b510      	push	{r4, lr}
 8007264:	eb01 0402 	add.w	r4, r1, r2
 8007268:	d902      	bls.n	8007270 <memmove+0x10>
 800726a:	4284      	cmp	r4, r0
 800726c:	4623      	mov	r3, r4
 800726e:	d807      	bhi.n	8007280 <memmove+0x20>
 8007270:	1e43      	subs	r3, r0, #1
 8007272:	42a1      	cmp	r1, r4
 8007274:	d008      	beq.n	8007288 <memmove+0x28>
 8007276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800727a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800727e:	e7f8      	b.n	8007272 <memmove+0x12>
 8007280:	4402      	add	r2, r0
 8007282:	4601      	mov	r1, r0
 8007284:	428a      	cmp	r2, r1
 8007286:	d100      	bne.n	800728a <memmove+0x2a>
 8007288:	bd10      	pop	{r4, pc}
 800728a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800728e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007292:	e7f7      	b.n	8007284 <memmove+0x24>

08007294 <_free_r>:
 8007294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007296:	2900      	cmp	r1, #0
 8007298:	d044      	beq.n	8007324 <_free_r+0x90>
 800729a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800729e:	9001      	str	r0, [sp, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f1a1 0404 	sub.w	r4, r1, #4
 80072a6:	bfb8      	it	lt
 80072a8:	18e4      	addlt	r4, r4, r3
 80072aa:	f000 f913 	bl	80074d4 <__malloc_lock>
 80072ae:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <_free_r+0x94>)
 80072b0:	9801      	ldr	r0, [sp, #4]
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	b933      	cbnz	r3, 80072c4 <_free_r+0x30>
 80072b6:	6063      	str	r3, [r4, #4]
 80072b8:	6014      	str	r4, [r2, #0]
 80072ba:	b003      	add	sp, #12
 80072bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c0:	f000 b90e 	b.w	80074e0 <__malloc_unlock>
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d908      	bls.n	80072da <_free_r+0x46>
 80072c8:	6825      	ldr	r5, [r4, #0]
 80072ca:	1961      	adds	r1, r4, r5
 80072cc:	428b      	cmp	r3, r1
 80072ce:	bf01      	itttt	eq
 80072d0:	6819      	ldreq	r1, [r3, #0]
 80072d2:	685b      	ldreq	r3, [r3, #4]
 80072d4:	1949      	addeq	r1, r1, r5
 80072d6:	6021      	streq	r1, [r4, #0]
 80072d8:	e7ed      	b.n	80072b6 <_free_r+0x22>
 80072da:	461a      	mov	r2, r3
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b10b      	cbz	r3, 80072e4 <_free_r+0x50>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d9fa      	bls.n	80072da <_free_r+0x46>
 80072e4:	6811      	ldr	r1, [r2, #0]
 80072e6:	1855      	adds	r5, r2, r1
 80072e8:	42a5      	cmp	r5, r4
 80072ea:	d10b      	bne.n	8007304 <_free_r+0x70>
 80072ec:	6824      	ldr	r4, [r4, #0]
 80072ee:	4421      	add	r1, r4
 80072f0:	1854      	adds	r4, r2, r1
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	6011      	str	r1, [r2, #0]
 80072f6:	d1e0      	bne.n	80072ba <_free_r+0x26>
 80072f8:	681c      	ldr	r4, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	4421      	add	r1, r4
 8007300:	6011      	str	r1, [r2, #0]
 8007302:	e7da      	b.n	80072ba <_free_r+0x26>
 8007304:	d902      	bls.n	800730c <_free_r+0x78>
 8007306:	230c      	movs	r3, #12
 8007308:	6003      	str	r3, [r0, #0]
 800730a:	e7d6      	b.n	80072ba <_free_r+0x26>
 800730c:	6825      	ldr	r5, [r4, #0]
 800730e:	1961      	adds	r1, r4, r5
 8007310:	428b      	cmp	r3, r1
 8007312:	bf04      	itt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	6063      	str	r3, [r4, #4]
 800731a:	bf04      	itt	eq
 800731c:	1949      	addeq	r1, r1, r5
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	6054      	str	r4, [r2, #4]
 8007322:	e7ca      	b.n	80072ba <_free_r+0x26>
 8007324:	b003      	add	sp, #12
 8007326:	bd30      	pop	{r4, r5, pc}
 8007328:	24000200 	.word	0x24000200

0800732c <sbrk_aligned>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4e0e      	ldr	r6, [pc, #56]	; (8007368 <sbrk_aligned+0x3c>)
 8007330:	460c      	mov	r4, r1
 8007332:	6831      	ldr	r1, [r6, #0]
 8007334:	4605      	mov	r5, r0
 8007336:	b911      	cbnz	r1, 800733e <sbrk_aligned+0x12>
 8007338:	f000 f8bc 	bl	80074b4 <_sbrk_r>
 800733c:	6030      	str	r0, [r6, #0]
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 f8b7 	bl	80074b4 <_sbrk_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d00a      	beq.n	8007360 <sbrk_aligned+0x34>
 800734a:	1cc4      	adds	r4, r0, #3
 800734c:	f024 0403 	bic.w	r4, r4, #3
 8007350:	42a0      	cmp	r0, r4
 8007352:	d007      	beq.n	8007364 <sbrk_aligned+0x38>
 8007354:	1a21      	subs	r1, r4, r0
 8007356:	4628      	mov	r0, r5
 8007358:	f000 f8ac 	bl	80074b4 <_sbrk_r>
 800735c:	3001      	adds	r0, #1
 800735e:	d101      	bne.n	8007364 <sbrk_aligned+0x38>
 8007360:	f04f 34ff 	mov.w	r4, #4294967295
 8007364:	4620      	mov	r0, r4
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	24000204 	.word	0x24000204

0800736c <_malloc_r>:
 800736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007370:	1ccd      	adds	r5, r1, #3
 8007372:	f025 0503 	bic.w	r5, r5, #3
 8007376:	3508      	adds	r5, #8
 8007378:	2d0c      	cmp	r5, #12
 800737a:	bf38      	it	cc
 800737c:	250c      	movcc	r5, #12
 800737e:	2d00      	cmp	r5, #0
 8007380:	4607      	mov	r7, r0
 8007382:	db01      	blt.n	8007388 <_malloc_r+0x1c>
 8007384:	42a9      	cmp	r1, r5
 8007386:	d905      	bls.n	8007394 <_malloc_r+0x28>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	2600      	movs	r6, #0
 800738e:	4630      	mov	r0, r6
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	4e2e      	ldr	r6, [pc, #184]	; (8007450 <_malloc_r+0xe4>)
 8007396:	f000 f89d 	bl	80074d4 <__malloc_lock>
 800739a:	6833      	ldr	r3, [r6, #0]
 800739c:	461c      	mov	r4, r3
 800739e:	bb34      	cbnz	r4, 80073ee <_malloc_r+0x82>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4638      	mov	r0, r7
 80073a4:	f7ff ffc2 	bl	800732c <sbrk_aligned>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	4604      	mov	r4, r0
 80073ac:	d14d      	bne.n	800744a <_malloc_r+0xde>
 80073ae:	6834      	ldr	r4, [r6, #0]
 80073b0:	4626      	mov	r6, r4
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d140      	bne.n	8007438 <_malloc_r+0xcc>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	4631      	mov	r1, r6
 80073ba:	4638      	mov	r0, r7
 80073bc:	eb04 0803 	add.w	r8, r4, r3
 80073c0:	f000 f878 	bl	80074b4 <_sbrk_r>
 80073c4:	4580      	cmp	r8, r0
 80073c6:	d13a      	bne.n	800743e <_malloc_r+0xd2>
 80073c8:	6821      	ldr	r1, [r4, #0]
 80073ca:	3503      	adds	r5, #3
 80073cc:	1a6d      	subs	r5, r5, r1
 80073ce:	f025 0503 	bic.w	r5, r5, #3
 80073d2:	3508      	adds	r5, #8
 80073d4:	2d0c      	cmp	r5, #12
 80073d6:	bf38      	it	cc
 80073d8:	250c      	movcc	r5, #12
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ffa5 	bl	800732c <sbrk_aligned>
 80073e2:	3001      	adds	r0, #1
 80073e4:	d02b      	beq.n	800743e <_malloc_r+0xd2>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	442b      	add	r3, r5
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	e00e      	b.n	800740c <_malloc_r+0xa0>
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	1b52      	subs	r2, r2, r5
 80073f2:	d41e      	bmi.n	8007432 <_malloc_r+0xc6>
 80073f4:	2a0b      	cmp	r2, #11
 80073f6:	d916      	bls.n	8007426 <_malloc_r+0xba>
 80073f8:	1961      	adds	r1, r4, r5
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	6025      	str	r5, [r4, #0]
 80073fe:	bf18      	it	ne
 8007400:	6059      	strne	r1, [r3, #4]
 8007402:	6863      	ldr	r3, [r4, #4]
 8007404:	bf08      	it	eq
 8007406:	6031      	streq	r1, [r6, #0]
 8007408:	5162      	str	r2, [r4, r5]
 800740a:	604b      	str	r3, [r1, #4]
 800740c:	4638      	mov	r0, r7
 800740e:	f104 060b 	add.w	r6, r4, #11
 8007412:	f000 f865 	bl	80074e0 <__malloc_unlock>
 8007416:	f026 0607 	bic.w	r6, r6, #7
 800741a:	1d23      	adds	r3, r4, #4
 800741c:	1af2      	subs	r2, r6, r3
 800741e:	d0b6      	beq.n	800738e <_malloc_r+0x22>
 8007420:	1b9b      	subs	r3, r3, r6
 8007422:	50a3      	str	r3, [r4, r2]
 8007424:	e7b3      	b.n	800738e <_malloc_r+0x22>
 8007426:	6862      	ldr	r2, [r4, #4]
 8007428:	42a3      	cmp	r3, r4
 800742a:	bf0c      	ite	eq
 800742c:	6032      	streq	r2, [r6, #0]
 800742e:	605a      	strne	r2, [r3, #4]
 8007430:	e7ec      	b.n	800740c <_malloc_r+0xa0>
 8007432:	4623      	mov	r3, r4
 8007434:	6864      	ldr	r4, [r4, #4]
 8007436:	e7b2      	b.n	800739e <_malloc_r+0x32>
 8007438:	4634      	mov	r4, r6
 800743a:	6876      	ldr	r6, [r6, #4]
 800743c:	e7b9      	b.n	80073b2 <_malloc_r+0x46>
 800743e:	230c      	movs	r3, #12
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4638      	mov	r0, r7
 8007444:	f000 f84c 	bl	80074e0 <__malloc_unlock>
 8007448:	e7a1      	b.n	800738e <_malloc_r+0x22>
 800744a:	6025      	str	r5, [r4, #0]
 800744c:	e7de      	b.n	800740c <_malloc_r+0xa0>
 800744e:	bf00      	nop
 8007450:	24000200 	.word	0x24000200

08007454 <_realloc_r>:
 8007454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007458:	4680      	mov	r8, r0
 800745a:	4614      	mov	r4, r2
 800745c:	460e      	mov	r6, r1
 800745e:	b921      	cbnz	r1, 800746a <_realloc_r+0x16>
 8007460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007464:	4611      	mov	r1, r2
 8007466:	f7ff bf81 	b.w	800736c <_malloc_r>
 800746a:	b92a      	cbnz	r2, 8007478 <_realloc_r+0x24>
 800746c:	f7ff ff12 	bl	8007294 <_free_r>
 8007470:	4625      	mov	r5, r4
 8007472:	4628      	mov	r0, r5
 8007474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007478:	f000 f838 	bl	80074ec <_malloc_usable_size_r>
 800747c:	4284      	cmp	r4, r0
 800747e:	4607      	mov	r7, r0
 8007480:	d802      	bhi.n	8007488 <_realloc_r+0x34>
 8007482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007486:	d812      	bhi.n	80074ae <_realloc_r+0x5a>
 8007488:	4621      	mov	r1, r4
 800748a:	4640      	mov	r0, r8
 800748c:	f7ff ff6e 	bl	800736c <_malloc_r>
 8007490:	4605      	mov	r5, r0
 8007492:	2800      	cmp	r0, #0
 8007494:	d0ed      	beq.n	8007472 <_realloc_r+0x1e>
 8007496:	42bc      	cmp	r4, r7
 8007498:	4622      	mov	r2, r4
 800749a:	4631      	mov	r1, r6
 800749c:	bf28      	it	cs
 800749e:	463a      	movcs	r2, r7
 80074a0:	f7ff fed0 	bl	8007244 <memcpy>
 80074a4:	4631      	mov	r1, r6
 80074a6:	4640      	mov	r0, r8
 80074a8:	f7ff fef4 	bl	8007294 <_free_r>
 80074ac:	e7e1      	b.n	8007472 <_realloc_r+0x1e>
 80074ae:	4635      	mov	r5, r6
 80074b0:	e7df      	b.n	8007472 <_realloc_r+0x1e>
	...

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	; (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7f9 fdfc 	bl	80010bc <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	24000208 	.word	0x24000208

080074d4 <__malloc_lock>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__malloc_lock+0x8>)
 80074d6:	f000 b811 	b.w	80074fc <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	2400020c 	.word	0x2400020c

080074e0 <__malloc_unlock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__malloc_unlock+0x8>)
 80074e2:	f000 b80c 	b.w	80074fe <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	2400020c 	.word	0x2400020c

080074ec <_malloc_usable_size_r>:
 80074ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f0:	1f18      	subs	r0, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfbc      	itt	lt
 80074f6:	580b      	ldrlt	r3, [r1, r0]
 80074f8:	18c0      	addlt	r0, r0, r3
 80074fa:	4770      	bx	lr

080074fc <__retarget_lock_acquire_recursive>:
 80074fc:	4770      	bx	lr

080074fe <__retarget_lock_release_recursive>:
 80074fe:	4770      	bx	lr

08007500 <_init>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr

0800750c <_fini>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr
