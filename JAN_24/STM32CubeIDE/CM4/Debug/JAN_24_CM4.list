
JAN_24_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007208  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  081074a0  081074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081074fc  081074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107500  08107500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08107504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  10000010  08107514  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  10000070  08107574  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000634  100000d0  081075d4  000200d0  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  10000704  081075d4  00020704  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00019ad3  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000028c4  00000000  00000000  00039bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013e0  00000000  00000000  0003c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000012d0  00000000  00000000  0003d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c14c  00000000  00000000  0003eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000162fc  00000000  00000000  0007ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018cab4  00000000  00000000  00090f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0021da44  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000055c0  00000000  00000000  0021da94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107488 	.word	0x08107488

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	08107488 	.word	0x08107488

081002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81002d8:	b580      	push	{r7, lr}
 81002da:	b082      	sub	sp, #8
 81002dc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81002de:	4b20      	ldr	r3, [pc, #128]	; (8100360 <main+0x88>)
 81002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81002e4:	4a1e      	ldr	r2, [pc, #120]	; (8100360 <main+0x88>)
 81002e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81002ee:	4b1c      	ldr	r3, [pc, #112]	; (8100360 <main+0x88>)
 81002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81002f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81002f8:	607b      	str	r3, [r7, #4]
 81002fa:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81002fc:	2001      	movs	r0, #1
 81002fe:	f002 fa57 	bl	81027b0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100302:	f003 fa0b 	bl	810371c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100306:	2201      	movs	r2, #1
 8100308:	2102      	movs	r1, #2
 810030a:	2000      	movs	r0, #0
 810030c:	f003 f98c 	bl	8103628 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100310:	4b14      	ldr	r3, [pc, #80]	; (8100364 <main+0x8c>)
 8100312:	681b      	ldr	r3, [r3, #0]
 8100314:	091b      	lsrs	r3, r3, #4
 8100316:	f003 030f 	and.w	r3, r3, #15
 810031a:	2b07      	cmp	r3, #7
 810031c:	d108      	bne.n	8100330 <main+0x58>
 810031e:	4b12      	ldr	r3, [pc, #72]	; (8100368 <main+0x90>)
 8100320:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100324:	4a10      	ldr	r2, [pc, #64]	; (8100368 <main+0x90>)
 8100326:	f043 0301 	orr.w	r3, r3, #1
 810032a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810032e:	e007      	b.n	8100340 <main+0x68>
 8100330:	4b0d      	ldr	r3, [pc, #52]	; (8100368 <main+0x90>)
 8100332:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100336:	4a0c      	ldr	r2, [pc, #48]	; (8100368 <main+0x90>)
 8100338:	f043 0301 	orr.w	r3, r3, #1
 810033c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100340:	f000 ff04 	bl	810114c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 8100344:	f000 f812 	bl	810036c <MX_ETH_Init>
  MX_FDCAN1_Init();
 8100348:	f000 f85c 	bl	8100404 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 810034c:	f000 f8be 	bl	81004cc <MX_FDCAN2_Init>
  MX_FMC_Init();
 8100350:	f000 fa02 	bl	8100758 <MX_FMC_Init>
  MX_SAI2_Init();
 8100354:	f000 f91e 	bl	8100594 <MX_SAI2_Init>
  MX_SDMMC1_MMC_Init();
 8100358:	f000 f9da 	bl	8100710 <MX_SDMMC1_MMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810035c:	e7fe      	b.n	810035c <main+0x84>
 810035e:	bf00      	nop
 8100360:	58024400 	.word	0x58024400
 8100364:	e000ed00 	.word	0xe000ed00
 8100368:	58026400 	.word	0x58026400

0810036c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 810036c:	b580      	push	{r7, lr}
 810036e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100370:	4b1e      	ldr	r3, [pc, #120]	; (81003ec <MX_ETH_Init+0x80>)
 8100372:	4a1f      	ldr	r2, [pc, #124]	; (81003f0 <MX_ETH_Init+0x84>)
 8100374:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100376:	4b1f      	ldr	r3, [pc, #124]	; (81003f4 <MX_ETH_Init+0x88>)
 8100378:	2200      	movs	r2, #0
 810037a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 810037c:	4b1d      	ldr	r3, [pc, #116]	; (81003f4 <MX_ETH_Init+0x88>)
 810037e:	2280      	movs	r2, #128	; 0x80
 8100380:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100382:	4b1c      	ldr	r3, [pc, #112]	; (81003f4 <MX_ETH_Init+0x88>)
 8100384:	22e1      	movs	r2, #225	; 0xe1
 8100386:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100388:	4b1a      	ldr	r3, [pc, #104]	; (81003f4 <MX_ETH_Init+0x88>)
 810038a:	2200      	movs	r2, #0
 810038c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810038e:	4b19      	ldr	r3, [pc, #100]	; (81003f4 <MX_ETH_Init+0x88>)
 8100390:	2200      	movs	r2, #0
 8100392:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100394:	4b17      	ldr	r3, [pc, #92]	; (81003f4 <MX_ETH_Init+0x88>)
 8100396:	2200      	movs	r2, #0
 8100398:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 810039a:	4b14      	ldr	r3, [pc, #80]	; (81003ec <MX_ETH_Init+0x80>)
 810039c:	4a15      	ldr	r2, [pc, #84]	; (81003f4 <MX_ETH_Init+0x88>)
 810039e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 81003a0:	4b12      	ldr	r3, [pc, #72]	; (81003ec <MX_ETH_Init+0x80>)
 81003a2:	2200      	movs	r2, #0
 81003a4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81003a6:	4b11      	ldr	r3, [pc, #68]	; (81003ec <MX_ETH_Init+0x80>)
 81003a8:	4a13      	ldr	r2, [pc, #76]	; (81003f8 <MX_ETH_Init+0x8c>)
 81003aa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81003ac:	4b0f      	ldr	r3, [pc, #60]	; (81003ec <MX_ETH_Init+0x80>)
 81003ae:	4a13      	ldr	r2, [pc, #76]	; (81003fc <MX_ETH_Init+0x90>)
 81003b0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 81003b2:	4b0e      	ldr	r3, [pc, #56]	; (81003ec <MX_ETH_Init+0x80>)
 81003b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 81003b8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 81003ba:	480c      	ldr	r0, [pc, #48]	; (81003ec <MX_ETH_Init+0x80>)
 81003bc:	f001 f8b6 	bl	810152c <HAL_ETH_Init>
 81003c0:	4603      	mov	r3, r0
 81003c2:	2b00      	cmp	r3, #0
 81003c4:	d001      	beq.n	81003ca <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 81003c6:	f000 fa15 	bl	81007f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 81003ca:	2238      	movs	r2, #56	; 0x38
 81003cc:	2100      	movs	r1, #0
 81003ce:	480c      	ldr	r0, [pc, #48]	; (8100400 <MX_ETH_Init+0x94>)
 81003d0:	f007 f852 	bl	8107478 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 81003d4:	4b0a      	ldr	r3, [pc, #40]	; (8100400 <MX_ETH_Init+0x94>)
 81003d6:	2221      	movs	r2, #33	; 0x21
 81003d8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 81003da:	4b09      	ldr	r3, [pc, #36]	; (8100400 <MX_ETH_Init+0x94>)
 81003dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 81003e0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 81003e2:	4b07      	ldr	r3, [pc, #28]	; (8100400 <MX_ETH_Init+0x94>)
 81003e4:	2200      	movs	r2, #0
 81003e6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 81003e8:	bf00      	nop
 81003ea:	bd80      	pop	{r7, pc}
 81003ec:	10000124 	.word	0x10000124
 81003f0:	40028000 	.word	0x40028000
 81003f4:	100006ec 	.word	0x100006ec
 81003f8:	10000070 	.word	0x10000070
 81003fc:	10000010 	.word	0x10000010
 8100400:	100000ec 	.word	0x100000ec

08100404 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8100404:	b580      	push	{r7, lr}
 8100406:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8100408:	4b2e      	ldr	r3, [pc, #184]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810040a:	4a2f      	ldr	r2, [pc, #188]	; (81004c8 <MX_FDCAN1_Init+0xc4>)
 810040c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 810040e:	4b2d      	ldr	r3, [pc, #180]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100410:	2200      	movs	r2, #0
 8100412:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100414:	4b2b      	ldr	r3, [pc, #172]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100416:	2200      	movs	r2, #0
 8100418:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 810041a:	4b2a      	ldr	r3, [pc, #168]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810041c:	2200      	movs	r2, #0
 810041e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100420:	4b28      	ldr	r3, [pc, #160]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100422:	2200      	movs	r2, #0
 8100424:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8100426:	4b27      	ldr	r3, [pc, #156]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100428:	2200      	movs	r2, #0
 810042a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 810042c:	4b25      	ldr	r3, [pc, #148]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810042e:	2210      	movs	r2, #16
 8100430:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100432:	4b24      	ldr	r3, [pc, #144]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100434:	2201      	movs	r2, #1
 8100436:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8100438:	4b22      	ldr	r3, [pc, #136]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810043a:	2202      	movs	r2, #2
 810043c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 810043e:	4b21      	ldr	r3, [pc, #132]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100440:	2202      	movs	r2, #2
 8100442:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100444:	4b1f      	ldr	r3, [pc, #124]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100446:	2201      	movs	r2, #1
 8100448:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 810044a:	4b1e      	ldr	r3, [pc, #120]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810044c:	2201      	movs	r2, #1
 810044e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100450:	4b1c      	ldr	r3, [pc, #112]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100452:	2201      	movs	r2, #1
 8100454:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8100456:	4b1b      	ldr	r3, [pc, #108]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100458:	2201      	movs	r2, #1
 810045a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 810045c:	4b19      	ldr	r3, [pc, #100]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810045e:	2200      	movs	r2, #0
 8100460:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100462:	4b18      	ldr	r3, [pc, #96]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100464:	2200      	movs	r2, #0
 8100466:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100468:	4b16      	ldr	r3, [pc, #88]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810046a:	2200      	movs	r2, #0
 810046c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 810046e:	4b15      	ldr	r3, [pc, #84]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100470:	2200      	movs	r2, #0
 8100472:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100474:	4b13      	ldr	r3, [pc, #76]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100476:	2204      	movs	r2, #4
 8100478:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 810047a:	4b12      	ldr	r3, [pc, #72]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810047c:	2200      	movs	r2, #0
 810047e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100480:	4b10      	ldr	r3, [pc, #64]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100482:	2204      	movs	r2, #4
 8100484:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8100486:	4b0f      	ldr	r3, [pc, #60]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100488:	2200      	movs	r2, #0
 810048a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 810048c:	4b0d      	ldr	r3, [pc, #52]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810048e:	2204      	movs	r2, #4
 8100490:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8100492:	4b0c      	ldr	r3, [pc, #48]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 8100494:	2200      	movs	r2, #0
 8100496:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100498:	4b0a      	ldr	r3, [pc, #40]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 810049a:	2200      	movs	r2, #0
 810049c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 810049e:	4b09      	ldr	r3, [pc, #36]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 81004a0:	2200      	movs	r2, #0
 81004a2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 81004a4:	4b07      	ldr	r3, [pc, #28]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 81004a6:	2200      	movs	r2, #0
 81004a8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81004aa:	4b06      	ldr	r3, [pc, #24]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 81004ac:	2204      	movs	r2, #4
 81004ae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 81004b0:	4804      	ldr	r0, [pc, #16]	; (81004c4 <MX_FDCAN1_Init+0xc0>)
 81004b2:	f001 fc5f 	bl	8101d74 <HAL_FDCAN_Init>
 81004b6:	4603      	mov	r3, r0
 81004b8:	2b00      	cmp	r3, #0
 81004ba:	d001      	beq.n	81004c0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 81004bc:	f000 f99a 	bl	81007f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 81004c0:	bf00      	nop
 81004c2:	bd80      	pop	{r7, pc}
 81004c4:	100001d4 	.word	0x100001d4
 81004c8:	4000a000 	.word	0x4000a000

081004cc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 81004cc:	b580      	push	{r7, lr}
 81004ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 81004d0:	4b2e      	ldr	r3, [pc, #184]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004d2:	4a2f      	ldr	r2, [pc, #188]	; (8100590 <MX_FDCAN2_Init+0xc4>)
 81004d4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81004d6:	4b2d      	ldr	r3, [pc, #180]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004d8:	2200      	movs	r2, #0
 81004da:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 81004dc:	4b2b      	ldr	r3, [pc, #172]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004de:	2200      	movs	r2, #0
 81004e0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 81004e2:	4b2a      	ldr	r3, [pc, #168]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004e4:	2200      	movs	r2, #0
 81004e6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 81004e8:	4b28      	ldr	r3, [pc, #160]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004ea:	2200      	movs	r2, #0
 81004ec:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 81004ee:	4b27      	ldr	r3, [pc, #156]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004f0:	2200      	movs	r2, #0
 81004f2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 81004f4:	4b25      	ldr	r3, [pc, #148]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004f6:	2210      	movs	r2, #16
 81004f8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 81004fa:	4b24      	ldr	r3, [pc, #144]	; (810058c <MX_FDCAN2_Init+0xc0>)
 81004fc:	2201      	movs	r2, #1
 81004fe:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8100500:	4b22      	ldr	r3, [pc, #136]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100502:	2202      	movs	r2, #2
 8100504:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8100506:	4b21      	ldr	r3, [pc, #132]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100508:	2202      	movs	r2, #2
 810050a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 810050c:	4b1f      	ldr	r3, [pc, #124]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810050e:	2201      	movs	r2, #1
 8100510:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100512:	4b1e      	ldr	r3, [pc, #120]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100514:	2201      	movs	r2, #1
 8100516:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100518:	4b1c      	ldr	r3, [pc, #112]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810051a:	2201      	movs	r2, #1
 810051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 810051e:	4b1b      	ldr	r3, [pc, #108]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100520:	2201      	movs	r2, #1
 8100522:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100524:	4b19      	ldr	r3, [pc, #100]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100526:	2200      	movs	r2, #0
 8100528:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 810052a:	4b18      	ldr	r3, [pc, #96]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810052c:	2200      	movs	r2, #0
 810052e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100530:	4b16      	ldr	r3, [pc, #88]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100532:	2200      	movs	r2, #0
 8100534:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8100536:	4b15      	ldr	r3, [pc, #84]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100538:	2200      	movs	r2, #0
 810053a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 810053c:	4b13      	ldr	r3, [pc, #76]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810053e:	2204      	movs	r2, #4
 8100540:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100542:	4b12      	ldr	r3, [pc, #72]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100544:	2200      	movs	r2, #0
 8100546:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100548:	4b10      	ldr	r3, [pc, #64]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810054a:	2204      	movs	r2, #4
 810054c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 810054e:	4b0f      	ldr	r3, [pc, #60]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100550:	2200      	movs	r2, #0
 8100552:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100554:	4b0d      	ldr	r3, [pc, #52]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100556:	2204      	movs	r2, #4
 8100558:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 810055a:	4b0c      	ldr	r3, [pc, #48]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810055c:	2200      	movs	r2, #0
 810055e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100560:	4b0a      	ldr	r3, [pc, #40]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100562:	2200      	movs	r2, #0
 8100564:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8100566:	4b09      	ldr	r3, [pc, #36]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100568:	2200      	movs	r2, #0
 810056a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 810056c:	4b07      	ldr	r3, [pc, #28]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810056e:	2200      	movs	r2, #0
 8100570:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100572:	4b06      	ldr	r3, [pc, #24]	; (810058c <MX_FDCAN2_Init+0xc0>)
 8100574:	2204      	movs	r2, #4
 8100576:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100578:	4804      	ldr	r0, [pc, #16]	; (810058c <MX_FDCAN2_Init+0xc0>)
 810057a:	f001 fbfb 	bl	8101d74 <HAL_FDCAN_Init>
 810057e:	4603      	mov	r3, r0
 8100580:	2b00      	cmp	r3, #0
 8100582:	d001      	beq.n	8100588 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8100584:	f000 f936 	bl	81007f4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8100588:	bf00      	nop
 810058a:	bd80      	pop	{r7, pc}
 810058c:	10000274 	.word	0x10000274
 8100590:	4000a400 	.word	0x4000a400

08100594 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8100594:	b580      	push	{r7, lr}
 8100596:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8100598:	4b58      	ldr	r3, [pc, #352]	; (81006fc <MX_SAI2_Init+0x168>)
 810059a:	4a59      	ldr	r2, [pc, #356]	; (8100700 <MX_SAI2_Init+0x16c>)
 810059c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 810059e:	4b57      	ldr	r3, [pc, #348]	; (81006fc <MX_SAI2_Init+0x168>)
 81005a0:	2200      	movs	r2, #0
 81005a2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 81005a4:	4b55      	ldr	r3, [pc, #340]	; (81006fc <MX_SAI2_Init+0x168>)
 81005a6:	2200      	movs	r2, #0
 81005a8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 81005aa:	4b54      	ldr	r3, [pc, #336]	; (81006fc <MX_SAI2_Init+0x168>)
 81005ac:	2240      	movs	r2, #64	; 0x40
 81005ae:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81005b0:	4b52      	ldr	r3, [pc, #328]	; (81006fc <MX_SAI2_Init+0x168>)
 81005b2:	2200      	movs	r2, #0
 81005b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81005b6:	4b51      	ldr	r3, [pc, #324]	; (81006fc <MX_SAI2_Init+0x168>)
 81005b8:	2200      	movs	r2, #0
 81005ba:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 81005bc:	4b4f      	ldr	r3, [pc, #316]	; (81006fc <MX_SAI2_Init+0x168>)
 81005be:	2200      	movs	r2, #0
 81005c0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81005c2:	4b4e      	ldr	r3, [pc, #312]	; (81006fc <MX_SAI2_Init+0x168>)
 81005c4:	2200      	movs	r2, #0
 81005c6:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 81005c8:	4b4c      	ldr	r3, [pc, #304]	; (81006fc <MX_SAI2_Init+0x168>)
 81005ca:	2200      	movs	r2, #0
 81005cc:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81005ce:	4b4b      	ldr	r3, [pc, #300]	; (81006fc <MX_SAI2_Init+0x168>)
 81005d0:	2200      	movs	r2, #0
 81005d2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81005d4:	4b49      	ldr	r3, [pc, #292]	; (81006fc <MX_SAI2_Init+0x168>)
 81005d6:	4a4b      	ldr	r2, [pc, #300]	; (8100704 <MX_SAI2_Init+0x170>)
 81005d8:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81005da:	4b48      	ldr	r3, [pc, #288]	; (81006fc <MX_SAI2_Init+0x168>)
 81005dc:	2200      	movs	r2, #0
 81005de:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 81005e0:	4b46      	ldr	r3, [pc, #280]	; (81006fc <MX_SAI2_Init+0x168>)
 81005e2:	2200      	movs	r2, #0
 81005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 81005e6:	4b45      	ldr	r3, [pc, #276]	; (81006fc <MX_SAI2_Init+0x168>)
 81005e8:	2200      	movs	r2, #0
 81005ea:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81005ec:	4b43      	ldr	r3, [pc, #268]	; (81006fc <MX_SAI2_Init+0x168>)
 81005ee:	2200      	movs	r2, #0
 81005f0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 81005f2:	4b42      	ldr	r3, [pc, #264]	; (81006fc <MX_SAI2_Init+0x168>)
 81005f4:	2200      	movs	r2, #0
 81005f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 81005fa:	4b40      	ldr	r3, [pc, #256]	; (81006fc <MX_SAI2_Init+0x168>)
 81005fc:	2201      	movs	r2, #1
 81005fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100600:	4b3e      	ldr	r3, [pc, #248]	; (81006fc <MX_SAI2_Init+0x168>)
 8100602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100606:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8100608:	4b3c      	ldr	r3, [pc, #240]	; (81006fc <MX_SAI2_Init+0x168>)
 810060a:	2208      	movs	r2, #8
 810060c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 810060e:	4b3b      	ldr	r3, [pc, #236]	; (81006fc <MX_SAI2_Init+0x168>)
 8100610:	2201      	movs	r2, #1
 8100612:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100614:	4b39      	ldr	r3, [pc, #228]	; (81006fc <MX_SAI2_Init+0x168>)
 8100616:	2200      	movs	r2, #0
 8100618:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 810061a:	4b38      	ldr	r3, [pc, #224]	; (81006fc <MX_SAI2_Init+0x168>)
 810061c:	2200      	movs	r2, #0
 810061e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100620:	4b36      	ldr	r3, [pc, #216]	; (81006fc <MX_SAI2_Init+0x168>)
 8100622:	2200      	movs	r2, #0
 8100624:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8100626:	4b35      	ldr	r3, [pc, #212]	; (81006fc <MX_SAI2_Init+0x168>)
 8100628:	2200      	movs	r2, #0
 810062a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 810062c:	4b33      	ldr	r3, [pc, #204]	; (81006fc <MX_SAI2_Init+0x168>)
 810062e:	2200      	movs	r2, #0
 8100630:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8100632:	4b32      	ldr	r3, [pc, #200]	; (81006fc <MX_SAI2_Init+0x168>)
 8100634:	2201      	movs	r2, #1
 8100636:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8100638:	4b30      	ldr	r3, [pc, #192]	; (81006fc <MX_SAI2_Init+0x168>)
 810063a:	2200      	movs	r2, #0
 810063c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 810063e:	482f      	ldr	r0, [pc, #188]	; (81006fc <MX_SAI2_Init+0x168>)
 8100640:	f005 ff3a 	bl	81064b8 <HAL_SAI_Init>
 8100644:	4603      	mov	r3, r0
 8100646:	2b00      	cmp	r3, #0
 8100648:	d001      	beq.n	810064e <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 810064a:	f000 f8d3 	bl	81007f4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 810064e:	4b2e      	ldr	r3, [pc, #184]	; (8100708 <MX_SAI2_Init+0x174>)
 8100650:	4a2e      	ldr	r2, [pc, #184]	; (810070c <MX_SAI2_Init+0x178>)
 8100652:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8100654:	4b2c      	ldr	r3, [pc, #176]	; (8100708 <MX_SAI2_Init+0x174>)
 8100656:	2200      	movs	r2, #0
 8100658:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 810065a:	4b2b      	ldr	r3, [pc, #172]	; (8100708 <MX_SAI2_Init+0x174>)
 810065c:	2203      	movs	r2, #3
 810065e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8100660:	4b29      	ldr	r3, [pc, #164]	; (8100708 <MX_SAI2_Init+0x174>)
 8100662:	2240      	movs	r2, #64	; 0x40
 8100664:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100666:	4b28      	ldr	r3, [pc, #160]	; (8100708 <MX_SAI2_Init+0x174>)
 8100668:	2200      	movs	r2, #0
 810066a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 810066c:	4b26      	ldr	r3, [pc, #152]	; (8100708 <MX_SAI2_Init+0x174>)
 810066e:	2200      	movs	r2, #0
 8100670:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8100672:	4b25      	ldr	r3, [pc, #148]	; (8100708 <MX_SAI2_Init+0x174>)
 8100674:	2201      	movs	r2, #1
 8100676:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100678:	4b23      	ldr	r3, [pc, #140]	; (8100708 <MX_SAI2_Init+0x174>)
 810067a:	2200      	movs	r2, #0
 810067c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 810067e:	4b22      	ldr	r3, [pc, #136]	; (8100708 <MX_SAI2_Init+0x174>)
 8100680:	2200      	movs	r2, #0
 8100682:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100684:	4b20      	ldr	r3, [pc, #128]	; (8100708 <MX_SAI2_Init+0x174>)
 8100686:	2200      	movs	r2, #0
 8100688:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 810068a:	4b1f      	ldr	r3, [pc, #124]	; (8100708 <MX_SAI2_Init+0x174>)
 810068c:	2200      	movs	r2, #0
 810068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8100690:	4b1d      	ldr	r3, [pc, #116]	; (8100708 <MX_SAI2_Init+0x174>)
 8100692:	2200      	movs	r2, #0
 8100694:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100696:	4b1c      	ldr	r3, [pc, #112]	; (8100708 <MX_SAI2_Init+0x174>)
 8100698:	2200      	movs	r2, #0
 810069a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 810069c:	4b1a      	ldr	r3, [pc, #104]	; (8100708 <MX_SAI2_Init+0x174>)
 810069e:	2200      	movs	r2, #0
 81006a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 81006a4:	4b18      	ldr	r3, [pc, #96]	; (8100708 <MX_SAI2_Init+0x174>)
 81006a6:	2201      	movs	r2, #1
 81006a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81006aa:	4b17      	ldr	r3, [pc, #92]	; (8100708 <MX_SAI2_Init+0x174>)
 81006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 81006b0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 81006b2:	4b15      	ldr	r3, [pc, #84]	; (8100708 <MX_SAI2_Init+0x174>)
 81006b4:	2208      	movs	r2, #8
 81006b6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 81006b8:	4b13      	ldr	r3, [pc, #76]	; (8100708 <MX_SAI2_Init+0x174>)
 81006ba:	2201      	movs	r2, #1
 81006bc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81006be:	4b12      	ldr	r3, [pc, #72]	; (8100708 <MX_SAI2_Init+0x174>)
 81006c0:	2200      	movs	r2, #0
 81006c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 81006c4:	4b10      	ldr	r3, [pc, #64]	; (8100708 <MX_SAI2_Init+0x174>)
 81006c6:	2200      	movs	r2, #0
 81006c8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 81006ca:	4b0f      	ldr	r3, [pc, #60]	; (8100708 <MX_SAI2_Init+0x174>)
 81006cc:	2200      	movs	r2, #0
 81006ce:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 81006d0:	4b0d      	ldr	r3, [pc, #52]	; (8100708 <MX_SAI2_Init+0x174>)
 81006d2:	2200      	movs	r2, #0
 81006d4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 81006d6:	4b0c      	ldr	r3, [pc, #48]	; (8100708 <MX_SAI2_Init+0x174>)
 81006d8:	2200      	movs	r2, #0
 81006da:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 81006dc:	4b0a      	ldr	r3, [pc, #40]	; (8100708 <MX_SAI2_Init+0x174>)
 81006de:	2201      	movs	r2, #1
 81006e0:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 81006e2:	4b09      	ldr	r3, [pc, #36]	; (8100708 <MX_SAI2_Init+0x174>)
 81006e4:	2200      	movs	r2, #0
 81006e6:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 81006e8:	4807      	ldr	r0, [pc, #28]	; (8100708 <MX_SAI2_Init+0x174>)
 81006ea:	f005 fee5 	bl	81064b8 <HAL_SAI_Init>
 81006ee:	4603      	mov	r3, r0
 81006f0:	2b00      	cmp	r3, #0
 81006f2:	d001      	beq.n	81006f8 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 81006f4:	f000 f87e 	bl	81007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 81006f8:	bf00      	nop
 81006fa:	bd80      	pop	{r7, pc}
 81006fc:	10000314 	.word	0x10000314
 8100700:	40015c04 	.word	0x40015c04
 8100704:	0002ee00 	.word	0x0002ee00
 8100708:	100003ac 	.word	0x100003ac
 810070c:	40015c24 	.word	0x40015c24

08100710 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8100710:	b580      	push	{r7, lr}
 8100712:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8100714:	4b0e      	ldr	r3, [pc, #56]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 8100716:	4a0f      	ldr	r2, [pc, #60]	; (8100754 <MX_SDMMC1_MMC_Init+0x44>)
 8100718:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 810071a:	4b0d      	ldr	r3, [pc, #52]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 810071c:	2200      	movs	r2, #0
 810071e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100720:	4b0b      	ldr	r3, [pc, #44]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 8100722:	2200      	movs	r2, #0
 8100724:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_8B;
 8100726:	4b0a      	ldr	r3, [pc, #40]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 8100728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 810072c:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810072e:	4b08      	ldr	r3, [pc, #32]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 8100730:	2200      	movs	r2, #0
 8100732:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8100734:	4b06      	ldr	r3, [pc, #24]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 8100736:	2200      	movs	r2, #0
 8100738:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 810073a:	4805      	ldr	r0, [pc, #20]	; (8100750 <MX_SDMMC1_MMC_Init+0x40>)
 810073c:	f002 f84a 	bl	81027d4 <HAL_MMC_Init>
 8100740:	4603      	mov	r3, r0
 8100742:	2b00      	cmp	r3, #0
 8100744:	d001      	beq.n	810074a <MX_SDMMC1_MMC_Init+0x3a>
  {
    Error_Handler();
 8100746:	f000 f855 	bl	81007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 810074a:	bf00      	nop
 810074c:	bd80      	pop	{r7, pc}
 810074e:	bf00      	nop
 8100750:	10000444 	.word	0x10000444
 8100754:	52007000 	.word	0x52007000

08100758 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100758:	b580      	push	{r7, lr}
 810075a:	b088      	sub	sp, #32
 810075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 810075e:	1d3b      	adds	r3, r7, #4
 8100760:	2200      	movs	r2, #0
 8100762:	601a      	str	r2, [r3, #0]
 8100764:	605a      	str	r2, [r3, #4]
 8100766:	609a      	str	r2, [r3, #8]
 8100768:	60da      	str	r2, [r3, #12]
 810076a:	611a      	str	r2, [r3, #16]
 810076c:	615a      	str	r2, [r3, #20]
 810076e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100770:	4b1e      	ldr	r3, [pc, #120]	; (81007ec <MX_FMC_Init+0x94>)
 8100772:	4a1f      	ldr	r2, [pc, #124]	; (81007f0 <MX_FMC_Init+0x98>)
 8100774:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100776:	4b1d      	ldr	r3, [pc, #116]	; (81007ec <MX_FMC_Init+0x94>)
 8100778:	2201      	movs	r2, #1
 810077a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 810077c:	4b1b      	ldr	r3, [pc, #108]	; (81007ec <MX_FMC_Init+0x94>)
 810077e:	2200      	movs	r2, #0
 8100780:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100782:	4b1a      	ldr	r3, [pc, #104]	; (81007ec <MX_FMC_Init+0x94>)
 8100784:	2204      	movs	r2, #4
 8100786:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100788:	4b18      	ldr	r3, [pc, #96]	; (81007ec <MX_FMC_Init+0x94>)
 810078a:	2210      	movs	r2, #16
 810078c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 810078e:	4b17      	ldr	r3, [pc, #92]	; (81007ec <MX_FMC_Init+0x94>)
 8100790:	2240      	movs	r2, #64	; 0x40
 8100792:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100794:	4b15      	ldr	r3, [pc, #84]	; (81007ec <MX_FMC_Init+0x94>)
 8100796:	2280      	movs	r2, #128	; 0x80
 8100798:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810079a:	4b14      	ldr	r3, [pc, #80]	; (81007ec <MX_FMC_Init+0x94>)
 810079c:	2200      	movs	r2, #0
 810079e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81007a0:	4b12      	ldr	r3, [pc, #72]	; (81007ec <MX_FMC_Init+0x94>)
 81007a2:	2200      	movs	r2, #0
 81007a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 81007a6:	4b11      	ldr	r3, [pc, #68]	; (81007ec <MX_FMC_Init+0x94>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 81007ac:	4b0f      	ldr	r3, [pc, #60]	; (81007ec <MX_FMC_Init+0x94>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81007b2:	2310      	movs	r3, #16
 81007b4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81007b6:	2310      	movs	r3, #16
 81007b8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 81007ba:	2310      	movs	r3, #16
 81007bc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 81007be:	2310      	movs	r3, #16
 81007c0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 81007c2:	2310      	movs	r3, #16
 81007c4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 81007c6:	2310      	movs	r3, #16
 81007c8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 81007ca:	2310      	movs	r3, #16
 81007cc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 81007ce:	1d3b      	adds	r3, r7, #4
 81007d0:	4619      	mov	r1, r3
 81007d2:	4806      	ldr	r0, [pc, #24]	; (81007ec <MX_FMC_Init+0x94>)
 81007d4:	f006 f954 	bl	8106a80 <HAL_SDRAM_Init>
 81007d8:	4603      	mov	r3, r0
 81007da:	2b00      	cmp	r3, #0
 81007dc:	d001      	beq.n	81007e2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81007de:	f000 f809 	bl	81007f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81007e2:	bf00      	nop
 81007e4:	3720      	adds	r7, #32
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
 81007ea:	bf00      	nop
 81007ec:	100006b8 	.word	0x100006b8
 81007f0:	52004140 	.word	0x52004140

081007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007f4:	b480      	push	{r7}
 81007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007f8:	b672      	cpsid	i
}
 81007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007fc:	e7fe      	b.n	81007fc <Error_Handler+0x8>
	...

08100800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100800:	b480      	push	{r7}
 8100802:	b083      	sub	sp, #12
 8100804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100806:	4b0a      	ldr	r3, [pc, #40]	; (8100830 <HAL_MspInit+0x30>)
 8100808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810080c:	4a08      	ldr	r2, [pc, #32]	; (8100830 <HAL_MspInit+0x30>)
 810080e:	f043 0302 	orr.w	r3, r3, #2
 8100812:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100816:	4b06      	ldr	r3, [pc, #24]	; (8100830 <HAL_MspInit+0x30>)
 8100818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810081c:	f003 0302 	and.w	r3, r3, #2
 8100820:	607b      	str	r3, [r7, #4]
 8100822:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100824:	bf00      	nop
 8100826:	370c      	adds	r7, #12
 8100828:	46bd      	mov	sp, r7
 810082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810082e:	4770      	bx	lr
 8100830:	58024400 	.word	0x58024400

08100834 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8100834:	b580      	push	{r7, lr}
 8100836:	b092      	sub	sp, #72	; 0x48
 8100838:	af00      	add	r7, sp, #0
 810083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810083c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100840:	2200      	movs	r2, #0
 8100842:	601a      	str	r2, [r3, #0]
 8100844:	605a      	str	r2, [r3, #4]
 8100846:	609a      	str	r2, [r3, #8]
 8100848:	60da      	str	r2, [r3, #12]
 810084a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 810084c:	687b      	ldr	r3, [r7, #4]
 810084e:	681b      	ldr	r3, [r3, #0]
 8100850:	4a87      	ldr	r2, [pc, #540]	; (8100a70 <HAL_ETH_MspInit+0x23c>)
 8100852:	4293      	cmp	r3, r2
 8100854:	f040 8108 	bne.w	8100a68 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8100858:	4b86      	ldr	r3, [pc, #536]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810085a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810085e:	4a85      	ldr	r2, [pc, #532]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100864:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100868:	4b82      	ldr	r3, [pc, #520]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810086a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100872:	633b      	str	r3, [r7, #48]	; 0x30
 8100874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8100876:	4b7f      	ldr	r3, [pc, #508]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100878:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810087c:	4a7d      	ldr	r2, [pc, #500]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810087e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100882:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100886:	4b7b      	ldr	r3, [pc, #492]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100888:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810088c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8100894:	4b77      	ldr	r3, [pc, #476]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810089a:	4a76      	ldr	r2, [pc, #472]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81008a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81008a4:	4b73      	ldr	r3, [pc, #460]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81008ae:	62bb      	str	r3, [r7, #40]	; 0x28
 81008b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81008b2:	4b70      	ldr	r3, [pc, #448]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008b8:	4a6e      	ldr	r2, [pc, #440]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81008be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008c2:	4b6c      	ldr	r3, [pc, #432]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81008cc:	627b      	str	r3, [r7, #36]	; 0x24
 81008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81008d0:	4b68      	ldr	r3, [pc, #416]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008d6:	4a67      	ldr	r2, [pc, #412]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008d8:	f043 0310 	orr.w	r3, r3, #16
 81008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008e0:	4b64      	ldr	r3, [pc, #400]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008e6:	f003 0310 	and.w	r3, r3, #16
 81008ea:	623b      	str	r3, [r7, #32]
 81008ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81008ee:	4b61      	ldr	r3, [pc, #388]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008f4:	4a5f      	ldr	r2, [pc, #380]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 81008f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81008fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008fe:	4b5d      	ldr	r3, [pc, #372]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100908:	61fb      	str	r3, [r7, #28]
 810090a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810090c:	4b59      	ldr	r3, [pc, #356]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100912:	4a58      	ldr	r2, [pc, #352]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100914:	f043 0304 	orr.w	r3, r3, #4
 8100918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810091c:	4b55      	ldr	r3, [pc, #340]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100922:	f003 0304 	and.w	r3, r3, #4
 8100926:	61bb      	str	r3, [r7, #24]
 8100928:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810092a:	4b52      	ldr	r3, [pc, #328]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100930:	4a50      	ldr	r2, [pc, #320]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810093a:	4b4e      	ldr	r3, [pc, #312]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100944:	617b      	str	r3, [r7, #20]
 8100946:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100948:	4b4a      	ldr	r3, [pc, #296]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810094e:	4a49      	ldr	r2, [pc, #292]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100950:	f043 0301 	orr.w	r3, r3, #1
 8100954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100958:	4b46      	ldr	r3, [pc, #280]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810095e:	f003 0301 	and.w	r3, r3, #1
 8100962:	613b      	str	r3, [r7, #16]
 8100964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100966:	4b43      	ldr	r3, [pc, #268]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810096c:	4a41      	ldr	r2, [pc, #260]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 810096e:	f043 0302 	orr.w	r3, r3, #2
 8100972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100976:	4b3f      	ldr	r3, [pc, #252]	; (8100a74 <HAL_ETH_MspInit+0x240>)
 8100978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810097c:	f003 0302 	and.w	r3, r3, #2
 8100980:	60fb      	str	r3, [r7, #12]
 8100982:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8100984:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8100988:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810098a:	2302      	movs	r3, #2
 810098c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810098e:	2300      	movs	r3, #0
 8100990:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100992:	2300      	movs	r3, #0
 8100994:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100996:	230b      	movs	r3, #11
 8100998:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810099a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810099e:	4619      	mov	r1, r3
 81009a0:	4835      	ldr	r0, [pc, #212]	; (8100a78 <HAL_ETH_MspInit+0x244>)
 81009a2:	f001 fd55 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 81009a6:	2304      	movs	r3, #4
 81009a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009aa:	2302      	movs	r3, #2
 81009ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009ae:	2300      	movs	r3, #0
 81009b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009b2:	2300      	movs	r3, #0
 81009b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81009b6:	230b      	movs	r3, #11
 81009b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 81009ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81009be:	4619      	mov	r1, r3
 81009c0:	482e      	ldr	r0, [pc, #184]	; (8100a7c <HAL_ETH_MspInit+0x248>)
 81009c2:	f001 fd45 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 81009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81009ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009cc:	2302      	movs	r3, #2
 81009ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009d0:	2300      	movs	r3, #0
 81009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009d4:	2300      	movs	r3, #0
 81009d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81009d8:	230b      	movs	r3, #11
 81009da:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 81009dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81009e0:	4619      	mov	r1, r3
 81009e2:	4827      	ldr	r0, [pc, #156]	; (8100a80 <HAL_ETH_MspInit+0x24c>)
 81009e4:	f001 fd34 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 81009e8:	233e      	movs	r3, #62	; 0x3e
 81009ea:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81009ec:	2302      	movs	r3, #2
 81009ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009f0:	2300      	movs	r3, #0
 81009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009f4:	2300      	movs	r3, #0
 81009f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81009f8:	230b      	movs	r3, #11
 81009fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81009fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100a00:	4619      	mov	r1, r3
 8100a02:	4820      	ldr	r0, [pc, #128]	; (8100a84 <HAL_ETH_MspInit+0x250>)
 8100a04:	f001 fd24 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8100a08:	230c      	movs	r3, #12
 8100a0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a0c:	2302      	movs	r3, #2
 8100a0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a10:	2300      	movs	r3, #0
 8100a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a14:	2300      	movs	r3, #0
 8100a16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100a18:	230b      	movs	r3, #11
 8100a1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100a20:	4619      	mov	r1, r3
 8100a22:	4819      	ldr	r0, [pc, #100]	; (8100a88 <HAL_ETH_MspInit+0x254>)
 8100a24:	f001 fd14 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8100a28:	2386      	movs	r3, #134	; 0x86
 8100a2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a2c:	2302      	movs	r3, #2
 8100a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a30:	2300      	movs	r3, #0
 8100a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a34:	2300      	movs	r3, #0
 8100a36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100a38:	230b      	movs	r3, #11
 8100a3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100a40:	4619      	mov	r1, r3
 8100a42:	4812      	ldr	r0, [pc, #72]	; (8100a8c <HAL_ETH_MspInit+0x258>)
 8100a44:	f001 fd04 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8100a48:	2303      	movs	r3, #3
 8100a4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100a4c:	2302      	movs	r3, #2
 8100a4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a50:	2300      	movs	r3, #0
 8100a52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a54:	2300      	movs	r3, #0
 8100a56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100a58:	230b      	movs	r3, #11
 8100a5a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100a5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100a60:	4619      	mov	r1, r3
 8100a62:	480b      	ldr	r0, [pc, #44]	; (8100a90 <HAL_ETH_MspInit+0x25c>)
 8100a64:	f001 fcf4 	bl	8102450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8100a68:	bf00      	nop
 8100a6a:	3748      	adds	r7, #72	; 0x48
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	bd80      	pop	{r7, pc}
 8100a70:	40028000 	.word	0x40028000
 8100a74:	58024400 	.word	0x58024400
 8100a78:	58021800 	.word	0x58021800
 8100a7c:	58021000 	.word	0x58021000
 8100a80:	58022000 	.word	0x58022000
 8100a84:	58020800 	.word	0x58020800
 8100a88:	58021c00 	.word	0x58021c00
 8100a8c:	58020000 	.word	0x58020000
 8100a90:	58020400 	.word	0x58020400

08100a94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8100a94:	b580      	push	{r7, lr}
 8100a96:	b0bc      	sub	sp, #240	; 0xf0
 8100a98:	af00      	add	r7, sp, #0
 8100a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	601a      	str	r2, [r3, #0]
 8100aa4:	605a      	str	r2, [r3, #4]
 8100aa6:	609a      	str	r2, [r3, #8]
 8100aa8:	60da      	str	r2, [r3, #12]
 8100aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100aac:	f107 0318 	add.w	r3, r7, #24
 8100ab0:	22c0      	movs	r2, #192	; 0xc0
 8100ab2:	2100      	movs	r1, #0
 8100ab4:	4618      	mov	r0, r3
 8100ab6:	f006 fcdf 	bl	8107478 <memset>
  if(hfdcan->Instance==FDCAN1)
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	681b      	ldr	r3, [r3, #0]
 8100abe:	4a57      	ldr	r2, [pc, #348]	; (8100c1c <HAL_FDCAN_MspInit+0x188>)
 8100ac0:	4293      	cmp	r3, r2
 8100ac2:	d151      	bne.n	8100b68 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8100ac4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100ac8:	f04f 0300 	mov.w	r3, #0
 8100acc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8100ad0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8100ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ad8:	f107 0318 	add.w	r3, r7, #24
 8100adc:	4618      	mov	r0, r3
 8100ade:	f002 ffed 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100ae2:	4603      	mov	r3, r0
 8100ae4:	2b00      	cmp	r3, #0
 8100ae6:	d001      	beq.n	8100aec <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8100ae8:	f7ff fe84 	bl	81007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100aec:	4b4c      	ldr	r3, [pc, #304]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100aee:	681b      	ldr	r3, [r3, #0]
 8100af0:	3301      	adds	r3, #1
 8100af2:	4a4b      	ldr	r2, [pc, #300]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100af4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100af6:	4b4a      	ldr	r3, [pc, #296]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100af8:	681b      	ldr	r3, [r3, #0]
 8100afa:	2b01      	cmp	r3, #1
 8100afc:	d10e      	bne.n	8100b1c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100afe:	4b49      	ldr	r3, [pc, #292]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100b04:	4a47      	ldr	r2, [pc, #284]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100b0a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8100b0e:	4b45      	ldr	r3, [pc, #276]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b10:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100b18:	617b      	str	r3, [r7, #20]
 8100b1a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100b1c:	4b41      	ldr	r3, [pc, #260]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b22:	4a40      	ldr	r2, [pc, #256]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100b28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b2c:	4b3d      	ldr	r3, [pc, #244]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100b36:	613b      	str	r3, [r7, #16]
 8100b38:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 8100b3a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8100b3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b42:	2302      	movs	r3, #2
 8100b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b48:	2300      	movs	r3, #0
 8100b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b4e:	2300      	movs	r3, #0
 8100b50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8100b54:	2309      	movs	r3, #9
 8100b56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100b5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100b5e:	4619      	mov	r1, r3
 8100b60:	4831      	ldr	r0, [pc, #196]	; (8100c28 <HAL_FDCAN_MspInit+0x194>)
 8100b62:	f001 fc75 	bl	8102450 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8100b66:	e055      	b.n	8100c14 <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8100b68:	687b      	ldr	r3, [r7, #4]
 8100b6a:	681b      	ldr	r3, [r3, #0]
 8100b6c:	4a2f      	ldr	r2, [pc, #188]	; (8100c2c <HAL_FDCAN_MspInit+0x198>)
 8100b6e:	4293      	cmp	r3, r2
 8100b70:	d150      	bne.n	8100c14 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8100b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100b76:	f04f 0300 	mov.w	r3, #0
 8100b7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8100b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8100b82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100b86:	f107 0318 	add.w	r3, r7, #24
 8100b8a:	4618      	mov	r0, r3
 8100b8c:	f002 ff96 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100b90:	4603      	mov	r3, r0
 8100b92:	2b00      	cmp	r3, #0
 8100b94:	d001      	beq.n	8100b9a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8100b96:	f7ff fe2d 	bl	81007f4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100b9a:	4b21      	ldr	r3, [pc, #132]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100b9c:	681b      	ldr	r3, [r3, #0]
 8100b9e:	3301      	adds	r3, #1
 8100ba0:	4a1f      	ldr	r2, [pc, #124]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100ba2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100ba4:	4b1e      	ldr	r3, [pc, #120]	; (8100c20 <HAL_FDCAN_MspInit+0x18c>)
 8100ba6:	681b      	ldr	r3, [r3, #0]
 8100ba8:	2b01      	cmp	r3, #1
 8100baa:	d10e      	bne.n	8100bca <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100bac:	4b1d      	ldr	r3, [pc, #116]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100bb2:	4a1c      	ldr	r2, [pc, #112]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100bb8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8100bbc:	4b19      	ldr	r3, [pc, #100]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100bc6:	60fb      	str	r3, [r7, #12]
 8100bc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100bca:	4b16      	ldr	r3, [pc, #88]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bd0:	4a14      	ldr	r2, [pc, #80]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bd2:	f043 0302 	orr.w	r3, r3, #2
 8100bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bda:	4b12      	ldr	r3, [pc, #72]	; (8100c24 <HAL_FDCAN_MspInit+0x190>)
 8100bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100be0:	f003 0302 	and.w	r3, r3, #2
 8100be4:	60bb      	str	r3, [r7, #8]
 8100be6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8100be8:	f242 0320 	movw	r3, #8224	; 0x2020
 8100bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100bf0:	2302      	movs	r3, #2
 8100bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bf6:	2300      	movs	r3, #0
 8100bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8100c02:	2309      	movs	r3, #9
 8100c04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100c08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100c0c:	4619      	mov	r1, r3
 8100c0e:	4808      	ldr	r0, [pc, #32]	; (8100c30 <HAL_FDCAN_MspInit+0x19c>)
 8100c10:	f001 fc1e 	bl	8102450 <HAL_GPIO_Init>
}
 8100c14:	bf00      	nop
 8100c16:	37f0      	adds	r7, #240	; 0xf0
 8100c18:	46bd      	mov	sp, r7
 8100c1a:	bd80      	pop	{r7, pc}
 8100c1c:	4000a000 	.word	0x4000a000
 8100c20:	100006f4 	.word	0x100006f4
 8100c24:	58024400 	.word	0x58024400
 8100c28:	58021c00 	.word	0x58021c00
 8100c2c:	4000a400 	.word	0x4000a400
 8100c30:	58020400 	.word	0x58020400

08100c34 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8100c34:	b580      	push	{r7, lr}
 8100c36:	b0bc      	sub	sp, #240	; 0xf0
 8100c38:	af00      	add	r7, sp, #0
 8100c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c3c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100c40:	2200      	movs	r2, #0
 8100c42:	601a      	str	r2, [r3, #0]
 8100c44:	605a      	str	r2, [r3, #4]
 8100c46:	609a      	str	r2, [r3, #8]
 8100c48:	60da      	str	r2, [r3, #12]
 8100c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c4c:	f107 0318 	add.w	r3, r7, #24
 8100c50:	22c0      	movs	r2, #192	; 0xc0
 8100c52:	2100      	movs	r1, #0
 8100c54:	4618      	mov	r0, r3
 8100c56:	f006 fc0f 	bl	8107478 <memset>
  if(hmmc->Instance==SDMMC1)
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	681b      	ldr	r3, [r3, #0]
 8100c5e:	4a4b      	ldr	r2, [pc, #300]	; (8100d8c <HAL_MMC_MspInit+0x158>)
 8100c60:	4293      	cmp	r3, r2
 8100c62:	f040 808f 	bne.w	8100d84 <HAL_MMC_MspInit+0x150>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8100c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8100c6a:	f04f 0300 	mov.w	r3, #0
 8100c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8100c72:	2300      	movs	r3, #0
 8100c74:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c76:	f107 0318 	add.w	r3, r7, #24
 8100c7a:	4618      	mov	r0, r3
 8100c7c:	f002 ff1e 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100c80:	4603      	mov	r3, r0
 8100c82:	2b00      	cmp	r3, #0
 8100c84:	d001      	beq.n	8100c8a <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 8100c86:	f7ff fdb5 	bl	81007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8100c8a:	4b41      	ldr	r3, [pc, #260]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100c90:	4a3f      	ldr	r2, [pc, #252]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100c96:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100c9a:	4b3d      	ldr	r3, [pc, #244]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100c9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100ca4:	617b      	str	r3, [r7, #20]
 8100ca6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100ca8:	4b39      	ldr	r3, [pc, #228]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cae:	4a38      	ldr	r2, [pc, #224]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cb0:	f043 0304 	orr.w	r3, r3, #4
 8100cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cb8:	4b35      	ldr	r3, [pc, #212]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cbe:	f003 0304 	and.w	r3, r3, #4
 8100cc2:	613b      	str	r3, [r7, #16]
 8100cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cc6:	4b32      	ldr	r3, [pc, #200]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ccc:	4a30      	ldr	r2, [pc, #192]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cce:	f043 0302 	orr.w	r3, r3, #2
 8100cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cd6:	4b2e      	ldr	r3, [pc, #184]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cdc:	f003 0302 	and.w	r3, r3, #2
 8100ce0:	60fb      	str	r3, [r7, #12]
 8100ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ce4:	4b2a      	ldr	r3, [pc, #168]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cea:	4a29      	ldr	r2, [pc, #164]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cec:	f043 0308 	orr.w	r3, r3, #8
 8100cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cf4:	4b26      	ldr	r3, [pc, #152]	; (8100d90 <HAL_MMC_MspInit+0x15c>)
 8100cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cfa:	f003 0308 	and.w	r3, r3, #8
 8100cfe:	60bb      	str	r3, [r7, #8]
 8100d00:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    PC7     ------> SDMMC1_D7
    PC6     ------> SDMMC1_D6
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8100d02:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8100d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d0a:	2302      	movs	r3, #2
 8100d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d10:	2300      	movs	r3, #0
 8100d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d16:	2303      	movs	r3, #3
 8100d18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100d1c:	230c      	movs	r3, #12
 8100d1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100d22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d26:	4619      	mov	r1, r3
 8100d28:	481a      	ldr	r0, [pc, #104]	; (8100d94 <HAL_MMC_MspInit+0x160>)
 8100d2a:	f001 fb91 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8100d2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d36:	2302      	movs	r3, #2
 8100d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d3c:	2300      	movs	r3, #0
 8100d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d42:	2303      	movs	r3, #3
 8100d44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100d48:	230c      	movs	r3, #12
 8100d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100d4e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d52:	4619      	mov	r1, r3
 8100d54:	4810      	ldr	r0, [pc, #64]	; (8100d98 <HAL_MMC_MspInit+0x164>)
 8100d56:	f001 fb7b 	bl	8102450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8100d5a:	2304      	movs	r3, #4
 8100d5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d60:	2302      	movs	r3, #2
 8100d62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d66:	2300      	movs	r3, #0
 8100d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100d6c:	2303      	movs	r3, #3
 8100d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100d72:	230c      	movs	r3, #12
 8100d74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8100d78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d7c:	4619      	mov	r1, r3
 8100d7e:	4807      	ldr	r0, [pc, #28]	; (8100d9c <HAL_MMC_MspInit+0x168>)
 8100d80:	f001 fb66 	bl	8102450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8100d84:	bf00      	nop
 8100d86:	37f0      	adds	r7, #240	; 0xf0
 8100d88:	46bd      	mov	sp, r7
 8100d8a:	bd80      	pop	{r7, pc}
 8100d8c:	52007000 	.word	0x52007000
 8100d90:	58024400 	.word	0x58024400
 8100d94:	58020800 	.word	0x58020800
 8100d98:	58020400 	.word	0x58020400
 8100d9c:	58020c00 	.word	0x58020c00

08100da0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100da0:	b580      	push	{r7, lr}
 8100da2:	b0b8      	sub	sp, #224	; 0xe0
 8100da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8100da6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100daa:	2200      	movs	r2, #0
 8100dac:	601a      	str	r2, [r3, #0]
 8100dae:	605a      	str	r2, [r3, #4]
 8100db0:	609a      	str	r2, [r3, #8]
 8100db2:	60da      	str	r2, [r3, #12]
 8100db4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8100db6:	4b51      	ldr	r3, [pc, #324]	; (8100efc <HAL_FMC_MspInit+0x15c>)
 8100db8:	681b      	ldr	r3, [r3, #0]
 8100dba:	2b00      	cmp	r3, #0
 8100dbc:	f040 8099 	bne.w	8100ef2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8100dc0:	4b4e      	ldr	r3, [pc, #312]	; (8100efc <HAL_FMC_MspInit+0x15c>)
 8100dc2:	2201      	movs	r2, #1
 8100dc4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dc6:	f107 0308 	add.w	r3, r7, #8
 8100dca:	22c0      	movs	r2, #192	; 0xc0
 8100dcc:	2100      	movs	r1, #0
 8100dce:	4618      	mov	r0, r3
 8100dd0:	f006 fb52 	bl	8107478 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8100dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8100dd8:	f04f 0300 	mov.w	r3, #0
 8100ddc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8100de0:	2300      	movs	r3, #0
 8100de2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100de4:	f107 0308 	add.w	r3, r7, #8
 8100de8:	4618      	mov	r0, r3
 8100dea:	f002 fe67 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100dee:	4603      	mov	r3, r0
 8100df0:	2b00      	cmp	r3, #0
 8100df2:	d001      	beq.n	8100df8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8100df4:	f7ff fcfe 	bl	81007f4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8100df8:	4b41      	ldr	r3, [pc, #260]	; (8100f00 <HAL_FMC_MspInit+0x160>)
 8100dfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100dfe:	4a40      	ldr	r2, [pc, #256]	; (8100f00 <HAL_FMC_MspInit+0x160>)
 8100e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100e04:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100e08:	4b3d      	ldr	r3, [pc, #244]	; (8100f00 <HAL_FMC_MspInit+0x160>)
 8100e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100e12:	607b      	str	r3, [r7, #4]
 8100e14:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8100e16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8100e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e1e:	2302      	movs	r3, #2
 8100e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e24:	2300      	movs	r3, #0
 8100e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e2a:	2303      	movs	r3, #3
 8100e2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e30:	230c      	movs	r3, #12
 8100e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100e36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e3a:	4619      	mov	r1, r3
 8100e3c:	4831      	ldr	r0, [pc, #196]	; (8100f04 <HAL_FMC_MspInit+0x164>)
 8100e3e:	f001 fb07 	bl	8102450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8100e42:	f248 1333 	movw	r3, #33075	; 0x8133
 8100e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e4a:	2302      	movs	r3, #2
 8100e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e50:	2300      	movs	r3, #0
 8100e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e56:	2303      	movs	r3, #3
 8100e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e5c:	230c      	movs	r3, #12
 8100e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100e62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e66:	4619      	mov	r1, r3
 8100e68:	4827      	ldr	r0, [pc, #156]	; (8100f08 <HAL_FMC_MspInit+0x168>)
 8100e6a:	f001 faf1 	bl	8102450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8100e6e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8100e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e76:	2302      	movs	r3, #2
 8100e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e7c:	2300      	movs	r3, #0
 8100e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e82:	2303      	movs	r3, #3
 8100e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e88:	230c      	movs	r3, #12
 8100e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100e8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e92:	4619      	mov	r1, r3
 8100e94:	481d      	ldr	r0, [pc, #116]	; (8100f0c <HAL_FMC_MspInit+0x16c>)
 8100e96:	f001 fadb 	bl	8102450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8100e9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8100e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ea2:	2302      	movs	r3, #2
 8100ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ea8:	2300      	movs	r3, #0
 8100eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100eae:	2303      	movs	r3, #3
 8100eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100eb4:	230c      	movs	r3, #12
 8100eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100eba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ebe:	4619      	mov	r1, r3
 8100ec0:	4813      	ldr	r0, [pc, #76]	; (8100f10 <HAL_FMC_MspInit+0x170>)
 8100ec2:	f001 fac5 	bl	8102450 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8100ec6:	23e0      	movs	r3, #224	; 0xe0
 8100ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ecc:	2302      	movs	r3, #2
 8100ece:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ed8:	2303      	movs	r3, #3
 8100eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100ede:	230c      	movs	r3, #12
 8100ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100ee4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ee8:	4619      	mov	r1, r3
 8100eea:	480a      	ldr	r0, [pc, #40]	; (8100f14 <HAL_FMC_MspInit+0x174>)
 8100eec:	f001 fab0 	bl	8102450 <HAL_GPIO_Init>
 8100ef0:	e000      	b.n	8100ef4 <HAL_FMC_MspInit+0x154>
    return;
 8100ef2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8100ef4:	37e0      	adds	r7, #224	; 0xe0
 8100ef6:	46bd      	mov	sp, r7
 8100ef8:	bd80      	pop	{r7, pc}
 8100efa:	bf00      	nop
 8100efc:	100006f8 	.word	0x100006f8
 8100f00:	58024400 	.word	0x58024400
 8100f04:	58021000 	.word	0x58021000
 8100f08:	58021800 	.word	0x58021800
 8100f0c:	58020c00 	.word	0x58020c00
 8100f10:	58021400 	.word	0x58021400
 8100f14:	58021c00 	.word	0x58021c00

08100f18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8100f18:	b580      	push	{r7, lr}
 8100f1a:	b082      	sub	sp, #8
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100f20:	f7ff ff3e 	bl	8100da0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8100f24:	bf00      	nop
 8100f26:	3708      	adds	r7, #8
 8100f28:	46bd      	mov	sp, r7
 8100f2a:	bd80      	pop	{r7, pc}

08100f2c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8100f2c:	b580      	push	{r7, lr}
 8100f2e:	b0ba      	sub	sp, #232	; 0xe8
 8100f30:	af00      	add	r7, sp, #0
 8100f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f34:	f107 0310 	add.w	r3, r7, #16
 8100f38:	22c0      	movs	r2, #192	; 0xc0
 8100f3a:	2100      	movs	r1, #0
 8100f3c:	4618      	mov	r0, r3
 8100f3e:	f006 fa9b 	bl	8107478 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	681b      	ldr	r3, [r3, #0]
 8100f46:	4a45      	ldr	r2, [pc, #276]	; (810105c <HAL_SAI_MspInit+0x130>)
 8100f48:	4293      	cmp	r3, r2
 8100f4a:	d13e      	bne.n	8100fca <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8100f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100f50:	f04f 0300 	mov.w	r3, #0
 8100f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8100f58:	2300      	movs	r3, #0
 8100f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f5c:	f107 0310 	add.w	r3, r7, #16
 8100f60:	4618      	mov	r0, r3
 8100f62:	f002 fdab 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100f66:	4603      	mov	r3, r0
 8100f68:	2b00      	cmp	r3, #0
 8100f6a:	d001      	beq.n	8100f70 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8100f6c:	f7ff fc42 	bl	81007f4 <Error_Handler>
    }

    if (SAI2_client == 0)
 8100f70:	4b3b      	ldr	r3, [pc, #236]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8100f72:	681b      	ldr	r3, [r3, #0]
 8100f74:	2b00      	cmp	r3, #0
 8100f76:	d10e      	bne.n	8100f96 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8100f78:	4b3a      	ldr	r3, [pc, #232]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8100f7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f7e:	4a39      	ldr	r2, [pc, #228]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8100f80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8100f84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100f88:	4b36      	ldr	r3, [pc, #216]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8100f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8100f92:	60fb      	str	r3, [r7, #12]
 8100f94:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 8100f96:	4b32      	ldr	r3, [pc, #200]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	3301      	adds	r3, #1
 8100f9c:	4a30      	ldr	r2, [pc, #192]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8100f9e:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8100fa0:	23f0      	movs	r3, #240	; 0xf0
 8100fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fa6:	2302      	movs	r3, #2
 8100fa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fac:	2300      	movs	r3, #0
 8100fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fb2:	2300      	movs	r3, #0
 8100fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8100fb8:	230a      	movs	r3, #10
 8100fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100fbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100fc2:	4619      	mov	r1, r3
 8100fc4:	4828      	ldr	r0, [pc, #160]	; (8101068 <HAL_SAI_MspInit+0x13c>)
 8100fc6:	f001 fa43 	bl	8102450 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4a27      	ldr	r2, [pc, #156]	; (810106c <HAL_SAI_MspInit+0x140>)
 8100fd0:	4293      	cmp	r3, r2
 8100fd2:	d13f      	bne.n	8101054 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8100fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8100fd8:	f04f 0300 	mov.w	r3, #0
 8100fdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8100fe0:	2300      	movs	r3, #0
 8100fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fe4:	f107 0310 	add.w	r3, r7, #16
 8100fe8:	4618      	mov	r0, r3
 8100fea:	f002 fd67 	bl	8103abc <HAL_RCCEx_PeriphCLKConfig>
 8100fee:	4603      	mov	r3, r0
 8100ff0:	2b00      	cmp	r3, #0
 8100ff2:	d001      	beq.n	8100ff8 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8100ff4:	f7ff fbfe 	bl	81007f4 <Error_Handler>
    }

      if (SAI2_client == 0)
 8100ff8:	4b19      	ldr	r3, [pc, #100]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	d10e      	bne.n	810101e <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101000:	4b18      	ldr	r3, [pc, #96]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8101002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101006:	4a17      	ldr	r2, [pc, #92]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8101008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810100c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101010:	4b14      	ldr	r3, [pc, #80]	; (8101064 <HAL_SAI_MspInit+0x138>)
 8101012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810101a:	60bb      	str	r3, [r7, #8]
 810101c:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 810101e:	4b10      	ldr	r3, [pc, #64]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8101020:	681b      	ldr	r3, [r3, #0]
 8101022:	3301      	adds	r3, #1
 8101024:	4a0e      	ldr	r2, [pc, #56]	; (8101060 <HAL_SAI_MspInit+0x134>)
 8101026:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810102c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101030:	2302      	movs	r3, #2
 8101032:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101036:	2300      	movs	r3, #0
 8101038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810103c:	2300      	movs	r3, #0
 810103e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101042:	230a      	movs	r3, #10
 8101044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101048:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810104c:	4619      	mov	r1, r3
 810104e:	4808      	ldr	r0, [pc, #32]	; (8101070 <HAL_SAI_MspInit+0x144>)
 8101050:	f001 f9fe 	bl	8102450 <HAL_GPIO_Init>

    }
}
 8101054:	bf00      	nop
 8101056:	37e8      	adds	r7, #232	; 0xe8
 8101058:	46bd      	mov	sp, r7
 810105a:	bd80      	pop	{r7, pc}
 810105c:	40015c04 	.word	0x40015c04
 8101060:	100006fc 	.word	0x100006fc
 8101064:	58024400 	.word	0x58024400
 8101068:	58022000 	.word	0x58022000
 810106c:	40015c24 	.word	0x40015c24
 8101070:	58021800 	.word	0x58021800

08101074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101074:	b480      	push	{r7}
 8101076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101078:	e7fe      	b.n	8101078 <NMI_Handler+0x4>

0810107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810107a:	b480      	push	{r7}
 810107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810107e:	e7fe      	b.n	810107e <HardFault_Handler+0x4>

08101080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101080:	b480      	push	{r7}
 8101082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101084:	e7fe      	b.n	8101084 <MemManage_Handler+0x4>

08101086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101086:	b480      	push	{r7}
 8101088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810108a:	e7fe      	b.n	810108a <BusFault_Handler+0x4>

0810108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810108c:	b480      	push	{r7}
 810108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101090:	e7fe      	b.n	8101090 <UsageFault_Handler+0x4>

08101092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101092:	b480      	push	{r7}
 8101094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101096:	bf00      	nop
 8101098:	46bd      	mov	sp, r7
 810109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810109e:	4770      	bx	lr

081010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81010a0:	b480      	push	{r7}
 81010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81010a4:	bf00      	nop
 81010a6:	46bd      	mov	sp, r7
 81010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ac:	4770      	bx	lr

081010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81010ae:	b480      	push	{r7}
 81010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81010b2:	bf00      	nop
 81010b4:	46bd      	mov	sp, r7
 81010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ba:	4770      	bx	lr

081010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81010bc:	b580      	push	{r7, lr}
 81010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81010c0:	f000 f8d8 	bl	8101274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81010c4:	bf00      	nop
 81010c6:	bd80      	pop	{r7, pc}

081010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101100 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81010cc:	f000 f826 	bl	810111c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81010d0:	480c      	ldr	r0, [pc, #48]	; (8101104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81010d2:	490d      	ldr	r1, [pc, #52]	; (8101108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81010d4:	4a0d      	ldr	r2, [pc, #52]	; (810110c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81010d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81010d8:	e002      	b.n	81010e0 <LoopCopyDataInit>

081010da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81010da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81010dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81010de:	3304      	adds	r3, #4

081010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81010e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81010e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81010e4:	d3f9      	bcc.n	81010da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81010e6:	4a0a      	ldr	r2, [pc, #40]	; (8101110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81010e8:	4c0a      	ldr	r4, [pc, #40]	; (8101114 <LoopFillZerobss+0x22>)
  movs r3, #0
 81010ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 81010ec:	e001      	b.n	81010f2 <LoopFillZerobss>

081010ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81010ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81010f0:	3204      	adds	r2, #4

081010f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81010f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81010f4:	d3fb      	bcc.n	81010ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81010f6:	f006 f98d 	bl	8107414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81010fa:	f7ff f8ed 	bl	81002d8 <main>
  bx  lr
 81010fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101100:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101104:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101108:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 810110c:	08107504 	.word	0x08107504
  ldr r2, =_sbss
 8101110:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8101114:	10000704 	.word	0x10000704

08101118 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101118:	e7fe      	b.n	8101118 <ADC3_IRQHandler>
	...

0810111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810111c:	b480      	push	{r7}
 810111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101120:	4b09      	ldr	r3, [pc, #36]	; (8101148 <SystemInit+0x2c>)
 8101122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101126:	4a08      	ldr	r2, [pc, #32]	; (8101148 <SystemInit+0x2c>)
 8101128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101130:	4b05      	ldr	r3, [pc, #20]	; (8101148 <SystemInit+0x2c>)
 8101132:	691b      	ldr	r3, [r3, #16]
 8101134:	4a04      	ldr	r2, [pc, #16]	; (8101148 <SystemInit+0x2c>)
 8101136:	f043 0310 	orr.w	r3, r3, #16
 810113a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810113c:	bf00      	nop
 810113e:	46bd      	mov	sp, r7
 8101140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101144:	4770      	bx	lr
 8101146:	bf00      	nop
 8101148:	e000ed00 	.word	0xe000ed00

0810114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810114c:	b580      	push	{r7, lr}
 810114e:	b082      	sub	sp, #8
 8101150:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101152:	4b28      	ldr	r3, [pc, #160]	; (81011f4 <HAL_Init+0xa8>)
 8101154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101158:	4a26      	ldr	r2, [pc, #152]	; (81011f4 <HAL_Init+0xa8>)
 810115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810115e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101162:	4b24      	ldr	r3, [pc, #144]	; (81011f4 <HAL_Init+0xa8>)
 8101164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810116c:	603b      	str	r3, [r7, #0]
 810116e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101170:	4b21      	ldr	r3, [pc, #132]	; (81011f8 <HAL_Init+0xac>)
 8101172:	681b      	ldr	r3, [r3, #0]
 8101174:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101178:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810117c:	4a1e      	ldr	r2, [pc, #120]	; (81011f8 <HAL_Init+0xac>)
 810117e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101182:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101184:	4b1c      	ldr	r3, [pc, #112]	; (81011f8 <HAL_Init+0xac>)
 8101186:	681b      	ldr	r3, [r3, #0]
 8101188:	4a1b      	ldr	r2, [pc, #108]	; (81011f8 <HAL_Init+0xac>)
 810118a:	f043 0301 	orr.w	r3, r3, #1
 810118e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101190:	2003      	movs	r0, #3
 8101192:	f000 f985 	bl	81014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101196:	f002 facf 	bl	8103738 <HAL_RCC_GetSysClockFreq>
 810119a:	4602      	mov	r2, r0
 810119c:	4b15      	ldr	r3, [pc, #84]	; (81011f4 <HAL_Init+0xa8>)
 810119e:	699b      	ldr	r3, [r3, #24]
 81011a0:	0a1b      	lsrs	r3, r3, #8
 81011a2:	f003 030f 	and.w	r3, r3, #15
 81011a6:	4915      	ldr	r1, [pc, #84]	; (81011fc <HAL_Init+0xb0>)
 81011a8:	5ccb      	ldrb	r3, [r1, r3]
 81011aa:	f003 031f 	and.w	r3, r3, #31
 81011ae:	fa22 f303 	lsr.w	r3, r2, r3
 81011b2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81011b4:	4b0f      	ldr	r3, [pc, #60]	; (81011f4 <HAL_Init+0xa8>)
 81011b6:	699b      	ldr	r3, [r3, #24]
 81011b8:	f003 030f 	and.w	r3, r3, #15
 81011bc:	4a0f      	ldr	r2, [pc, #60]	; (81011fc <HAL_Init+0xb0>)
 81011be:	5cd3      	ldrb	r3, [r2, r3]
 81011c0:	f003 031f 	and.w	r3, r3, #31
 81011c4:	687a      	ldr	r2, [r7, #4]
 81011c6:	fa22 f303 	lsr.w	r3, r2, r3
 81011ca:	4a0d      	ldr	r2, [pc, #52]	; (8101200 <HAL_Init+0xb4>)
 81011cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81011ce:	4b0c      	ldr	r3, [pc, #48]	; (8101200 <HAL_Init+0xb4>)
 81011d0:	681b      	ldr	r3, [r3, #0]
 81011d2:	4a0c      	ldr	r2, [pc, #48]	; (8101204 <HAL_Init+0xb8>)
 81011d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81011d6:	2000      	movs	r0, #0
 81011d8:	f000 f816 	bl	8101208 <HAL_InitTick>
 81011dc:	4603      	mov	r3, r0
 81011de:	2b00      	cmp	r3, #0
 81011e0:	d001      	beq.n	81011e6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81011e2:	2301      	movs	r3, #1
 81011e4:	e002      	b.n	81011ec <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81011e6:	f7ff fb0b 	bl	8100800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81011ea:	2300      	movs	r3, #0
}
 81011ec:	4618      	mov	r0, r3
 81011ee:	3708      	adds	r7, #8
 81011f0:	46bd      	mov	sp, r7
 81011f2:	bd80      	pop	{r7, pc}
 81011f4:	58024400 	.word	0x58024400
 81011f8:	40024400 	.word	0x40024400
 81011fc:	081074ec 	.word	0x081074ec
 8101200:	10000004 	.word	0x10000004
 8101204:	10000000 	.word	0x10000000

08101208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101208:	b580      	push	{r7, lr}
 810120a:	b082      	sub	sp, #8
 810120c:	af00      	add	r7, sp, #0
 810120e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101210:	4b15      	ldr	r3, [pc, #84]	; (8101268 <HAL_InitTick+0x60>)
 8101212:	781b      	ldrb	r3, [r3, #0]
 8101214:	2b00      	cmp	r3, #0
 8101216:	d101      	bne.n	810121c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101218:	2301      	movs	r3, #1
 810121a:	e021      	b.n	8101260 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810121c:	4b13      	ldr	r3, [pc, #76]	; (810126c <HAL_InitTick+0x64>)
 810121e:	681a      	ldr	r2, [r3, #0]
 8101220:	4b11      	ldr	r3, [pc, #68]	; (8101268 <HAL_InitTick+0x60>)
 8101222:	781b      	ldrb	r3, [r3, #0]
 8101224:	4619      	mov	r1, r3
 8101226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810122a:	fbb3 f3f1 	udiv	r3, r3, r1
 810122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101232:	4618      	mov	r0, r3
 8101234:	f000 f959 	bl	81014ea <HAL_SYSTICK_Config>
 8101238:	4603      	mov	r3, r0
 810123a:	2b00      	cmp	r3, #0
 810123c:	d001      	beq.n	8101242 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810123e:	2301      	movs	r3, #1
 8101240:	e00e      	b.n	8101260 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	2b0f      	cmp	r3, #15
 8101246:	d80a      	bhi.n	810125e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101248:	2200      	movs	r2, #0
 810124a:	6879      	ldr	r1, [r7, #4]
 810124c:	f04f 30ff 	mov.w	r0, #4294967295
 8101250:	f000 f931 	bl	81014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101254:	4a06      	ldr	r2, [pc, #24]	; (8101270 <HAL_InitTick+0x68>)
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810125a:	2300      	movs	r3, #0
 810125c:	e000      	b.n	8101260 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810125e:	2301      	movs	r3, #1
}
 8101260:	4618      	mov	r0, r3
 8101262:	3708      	adds	r7, #8
 8101264:	46bd      	mov	sp, r7
 8101266:	bd80      	pop	{r7, pc}
 8101268:	1000000c 	.word	0x1000000c
 810126c:	10000000 	.word	0x10000000
 8101270:	10000008 	.word	0x10000008

08101274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101274:	b480      	push	{r7}
 8101276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101278:	4b06      	ldr	r3, [pc, #24]	; (8101294 <HAL_IncTick+0x20>)
 810127a:	781b      	ldrb	r3, [r3, #0]
 810127c:	461a      	mov	r2, r3
 810127e:	4b06      	ldr	r3, [pc, #24]	; (8101298 <HAL_IncTick+0x24>)
 8101280:	681b      	ldr	r3, [r3, #0]
 8101282:	4413      	add	r3, r2
 8101284:	4a04      	ldr	r2, [pc, #16]	; (8101298 <HAL_IncTick+0x24>)
 8101286:	6013      	str	r3, [r2, #0]
}
 8101288:	bf00      	nop
 810128a:	46bd      	mov	sp, r7
 810128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101290:	4770      	bx	lr
 8101292:	bf00      	nop
 8101294:	1000000c 	.word	0x1000000c
 8101298:	10000700 	.word	0x10000700

0810129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810129c:	b480      	push	{r7}
 810129e:	af00      	add	r7, sp, #0
  return uwTick;
 81012a0:	4b03      	ldr	r3, [pc, #12]	; (81012b0 <HAL_GetTick+0x14>)
 81012a2:	681b      	ldr	r3, [r3, #0]
}
 81012a4:	4618      	mov	r0, r3
 81012a6:	46bd      	mov	sp, r7
 81012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ac:	4770      	bx	lr
 81012ae:	bf00      	nop
 81012b0:	10000700 	.word	0x10000700

081012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81012b4:	b580      	push	{r7, lr}
 81012b6:	b084      	sub	sp, #16
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81012bc:	f7ff ffee 	bl	810129c <HAL_GetTick>
 81012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81012c6:	68fb      	ldr	r3, [r7, #12]
 81012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81012cc:	d005      	beq.n	81012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81012ce:	4b0a      	ldr	r3, [pc, #40]	; (81012f8 <HAL_Delay+0x44>)
 81012d0:	781b      	ldrb	r3, [r3, #0]
 81012d2:	461a      	mov	r2, r3
 81012d4:	68fb      	ldr	r3, [r7, #12]
 81012d6:	4413      	add	r3, r2
 81012d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81012da:	bf00      	nop
 81012dc:	f7ff ffde 	bl	810129c <HAL_GetTick>
 81012e0:	4602      	mov	r2, r0
 81012e2:	68bb      	ldr	r3, [r7, #8]
 81012e4:	1ad3      	subs	r3, r2, r3
 81012e6:	68fa      	ldr	r2, [r7, #12]
 81012e8:	429a      	cmp	r2, r3
 81012ea:	d8f7      	bhi.n	81012dc <HAL_Delay+0x28>
  {
  }
}
 81012ec:	bf00      	nop
 81012ee:	bf00      	nop
 81012f0:	3710      	adds	r7, #16
 81012f2:	46bd      	mov	sp, r7
 81012f4:	bd80      	pop	{r7, pc}
 81012f6:	bf00      	nop
 81012f8:	1000000c 	.word	0x1000000c

081012fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81012fc:	b480      	push	{r7}
 81012fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101300:	4b03      	ldr	r3, [pc, #12]	; (8101310 <HAL_GetREVID+0x14>)
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	0c1b      	lsrs	r3, r3, #16
}
 8101306:	4618      	mov	r0, r3
 8101308:	46bd      	mov	sp, r7
 810130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810130e:	4770      	bx	lr
 8101310:	5c001000 	.word	0x5c001000

08101314 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8101314:	b480      	push	{r7}
 8101316:	b083      	sub	sp, #12
 8101318:	af00      	add	r7, sp, #0
 810131a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 810131c:	4b06      	ldr	r3, [pc, #24]	; (8101338 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810131e:	685b      	ldr	r3, [r3, #4]
 8101320:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101324:	4904      	ldr	r1, [pc, #16]	; (8101338 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8101326:	687b      	ldr	r3, [r7, #4]
 8101328:	4313      	orrs	r3, r2
 810132a:	604b      	str	r3, [r1, #4]
}
 810132c:	bf00      	nop
 810132e:	370c      	adds	r7, #12
 8101330:	46bd      	mov	sp, r7
 8101332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101336:	4770      	bx	lr
 8101338:	58000400 	.word	0x58000400

0810133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810133c:	b480      	push	{r7}
 810133e:	b085      	sub	sp, #20
 8101340:	af00      	add	r7, sp, #0
 8101342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	f003 0307 	and.w	r3, r3, #7
 810134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810134c:	4b0c      	ldr	r3, [pc, #48]	; (8101380 <__NVIC_SetPriorityGrouping+0x44>)
 810134e:	68db      	ldr	r3, [r3, #12]
 8101350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101352:	68ba      	ldr	r2, [r7, #8]
 8101354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101358:	4013      	ands	r3, r2
 810135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810135c:	68fb      	ldr	r3, [r7, #12]
 810135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101360:	68bb      	ldr	r3, [r7, #8]
 8101362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810136e:	4a04      	ldr	r2, [pc, #16]	; (8101380 <__NVIC_SetPriorityGrouping+0x44>)
 8101370:	68bb      	ldr	r3, [r7, #8]
 8101372:	60d3      	str	r3, [r2, #12]
}
 8101374:	bf00      	nop
 8101376:	3714      	adds	r7, #20
 8101378:	46bd      	mov	sp, r7
 810137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137e:	4770      	bx	lr
 8101380:	e000ed00 	.word	0xe000ed00

08101384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101384:	b480      	push	{r7}
 8101386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101388:	4b04      	ldr	r3, [pc, #16]	; (810139c <__NVIC_GetPriorityGrouping+0x18>)
 810138a:	68db      	ldr	r3, [r3, #12]
 810138c:	0a1b      	lsrs	r3, r3, #8
 810138e:	f003 0307 	and.w	r3, r3, #7
}
 8101392:	4618      	mov	r0, r3
 8101394:	46bd      	mov	sp, r7
 8101396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139a:	4770      	bx	lr
 810139c:	e000ed00 	.word	0xe000ed00

081013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81013a0:	b480      	push	{r7}
 81013a2:	b083      	sub	sp, #12
 81013a4:	af00      	add	r7, sp, #0
 81013a6:	4603      	mov	r3, r0
 81013a8:	6039      	str	r1, [r7, #0]
 81013aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013b0:	2b00      	cmp	r3, #0
 81013b2:	db0a      	blt.n	81013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013b4:	683b      	ldr	r3, [r7, #0]
 81013b6:	b2da      	uxtb	r2, r3
 81013b8:	490c      	ldr	r1, [pc, #48]	; (81013ec <__NVIC_SetPriority+0x4c>)
 81013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013be:	0112      	lsls	r2, r2, #4
 81013c0:	b2d2      	uxtb	r2, r2
 81013c2:	440b      	add	r3, r1
 81013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81013c8:	e00a      	b.n	81013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013ca:	683b      	ldr	r3, [r7, #0]
 81013cc:	b2da      	uxtb	r2, r3
 81013ce:	4908      	ldr	r1, [pc, #32]	; (81013f0 <__NVIC_SetPriority+0x50>)
 81013d0:	88fb      	ldrh	r3, [r7, #6]
 81013d2:	f003 030f 	and.w	r3, r3, #15
 81013d6:	3b04      	subs	r3, #4
 81013d8:	0112      	lsls	r2, r2, #4
 81013da:	b2d2      	uxtb	r2, r2
 81013dc:	440b      	add	r3, r1
 81013de:	761a      	strb	r2, [r3, #24]
}
 81013e0:	bf00      	nop
 81013e2:	370c      	adds	r7, #12
 81013e4:	46bd      	mov	sp, r7
 81013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ea:	4770      	bx	lr
 81013ec:	e000e100 	.word	0xe000e100
 81013f0:	e000ed00 	.word	0xe000ed00

081013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81013f4:	b480      	push	{r7}
 81013f6:	b089      	sub	sp, #36	; 0x24
 81013f8:	af00      	add	r7, sp, #0
 81013fa:	60f8      	str	r0, [r7, #12]
 81013fc:	60b9      	str	r1, [r7, #8]
 81013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101400:	68fb      	ldr	r3, [r7, #12]
 8101402:	f003 0307 	and.w	r3, r3, #7
 8101406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101408:	69fb      	ldr	r3, [r7, #28]
 810140a:	f1c3 0307 	rsb	r3, r3, #7
 810140e:	2b04      	cmp	r3, #4
 8101410:	bf28      	it	cs
 8101412:	2304      	movcs	r3, #4
 8101414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101416:	69fb      	ldr	r3, [r7, #28]
 8101418:	3304      	adds	r3, #4
 810141a:	2b06      	cmp	r3, #6
 810141c:	d902      	bls.n	8101424 <NVIC_EncodePriority+0x30>
 810141e:	69fb      	ldr	r3, [r7, #28]
 8101420:	3b03      	subs	r3, #3
 8101422:	e000      	b.n	8101426 <NVIC_EncodePriority+0x32>
 8101424:	2300      	movs	r3, #0
 8101426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101428:	f04f 32ff 	mov.w	r2, #4294967295
 810142c:	69bb      	ldr	r3, [r7, #24]
 810142e:	fa02 f303 	lsl.w	r3, r2, r3
 8101432:	43da      	mvns	r2, r3
 8101434:	68bb      	ldr	r3, [r7, #8]
 8101436:	401a      	ands	r2, r3
 8101438:	697b      	ldr	r3, [r7, #20]
 810143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810143c:	f04f 31ff 	mov.w	r1, #4294967295
 8101440:	697b      	ldr	r3, [r7, #20]
 8101442:	fa01 f303 	lsl.w	r3, r1, r3
 8101446:	43d9      	mvns	r1, r3
 8101448:	687b      	ldr	r3, [r7, #4]
 810144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810144c:	4313      	orrs	r3, r2
         );
}
 810144e:	4618      	mov	r0, r3
 8101450:	3724      	adds	r7, #36	; 0x24
 8101452:	46bd      	mov	sp, r7
 8101454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101458:	4770      	bx	lr
	...

0810145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810145c:	b580      	push	{r7, lr}
 810145e:	b082      	sub	sp, #8
 8101460:	af00      	add	r7, sp, #0
 8101462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	3b01      	subs	r3, #1
 8101468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810146c:	d301      	bcc.n	8101472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810146e:	2301      	movs	r3, #1
 8101470:	e00f      	b.n	8101492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101472:	4a0a      	ldr	r2, [pc, #40]	; (810149c <SysTick_Config+0x40>)
 8101474:	687b      	ldr	r3, [r7, #4]
 8101476:	3b01      	subs	r3, #1
 8101478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810147a:	210f      	movs	r1, #15
 810147c:	f04f 30ff 	mov.w	r0, #4294967295
 8101480:	f7ff ff8e 	bl	81013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101484:	4b05      	ldr	r3, [pc, #20]	; (810149c <SysTick_Config+0x40>)
 8101486:	2200      	movs	r2, #0
 8101488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810148a:	4b04      	ldr	r3, [pc, #16]	; (810149c <SysTick_Config+0x40>)
 810148c:	2207      	movs	r2, #7
 810148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101490:	2300      	movs	r3, #0
}
 8101492:	4618      	mov	r0, r3
 8101494:	3708      	adds	r7, #8
 8101496:	46bd      	mov	sp, r7
 8101498:	bd80      	pop	{r7, pc}
 810149a:	bf00      	nop
 810149c:	e000e010 	.word	0xe000e010

081014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81014a0:	b580      	push	{r7, lr}
 81014a2:	b082      	sub	sp, #8
 81014a4:	af00      	add	r7, sp, #0
 81014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81014a8:	6878      	ldr	r0, [r7, #4]
 81014aa:	f7ff ff47 	bl	810133c <__NVIC_SetPriorityGrouping>
}
 81014ae:	bf00      	nop
 81014b0:	3708      	adds	r7, #8
 81014b2:	46bd      	mov	sp, r7
 81014b4:	bd80      	pop	{r7, pc}

081014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81014b6:	b580      	push	{r7, lr}
 81014b8:	b086      	sub	sp, #24
 81014ba:	af00      	add	r7, sp, #0
 81014bc:	4603      	mov	r3, r0
 81014be:	60b9      	str	r1, [r7, #8]
 81014c0:	607a      	str	r2, [r7, #4]
 81014c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81014c4:	f7ff ff5e 	bl	8101384 <__NVIC_GetPriorityGrouping>
 81014c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81014ca:	687a      	ldr	r2, [r7, #4]
 81014cc:	68b9      	ldr	r1, [r7, #8]
 81014ce:	6978      	ldr	r0, [r7, #20]
 81014d0:	f7ff ff90 	bl	81013f4 <NVIC_EncodePriority>
 81014d4:	4602      	mov	r2, r0
 81014d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81014da:	4611      	mov	r1, r2
 81014dc:	4618      	mov	r0, r3
 81014de:	f7ff ff5f 	bl	81013a0 <__NVIC_SetPriority>
}
 81014e2:	bf00      	nop
 81014e4:	3718      	adds	r7, #24
 81014e6:	46bd      	mov	sp, r7
 81014e8:	bd80      	pop	{r7, pc}

081014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81014ea:	b580      	push	{r7, lr}
 81014ec:	b082      	sub	sp, #8
 81014ee:	af00      	add	r7, sp, #0
 81014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81014f2:	6878      	ldr	r0, [r7, #4]
 81014f4:	f7ff ffb2 	bl	810145c <SysTick_Config>
 81014f8:	4603      	mov	r3, r0
}
 81014fa:	4618      	mov	r0, r3
 81014fc:	3708      	adds	r7, #8
 81014fe:	46bd      	mov	sp, r7
 8101500:	bd80      	pop	{r7, pc}
	...

08101504 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101504:	b480      	push	{r7}
 8101506:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101508:	4b07      	ldr	r3, [pc, #28]	; (8101528 <HAL_GetCurrentCPUID+0x24>)
 810150a:	681b      	ldr	r3, [r3, #0]
 810150c:	091b      	lsrs	r3, r3, #4
 810150e:	f003 030f 	and.w	r3, r3, #15
 8101512:	2b07      	cmp	r3, #7
 8101514:	d101      	bne.n	810151a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101516:	2303      	movs	r3, #3
 8101518:	e000      	b.n	810151c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810151a:	2301      	movs	r3, #1
  }
}
 810151c:	4618      	mov	r0, r3
 810151e:	46bd      	mov	sp, r7
 8101520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101524:	4770      	bx	lr
 8101526:	bf00      	nop
 8101528:	e000ed00 	.word	0xe000ed00

0810152c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 810152c:	b580      	push	{r7, lr}
 810152e:	b084      	sub	sp, #16
 8101530:	af00      	add	r7, sp, #0
 8101532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	2b00      	cmp	r3, #0
 8101538:	d101      	bne.n	810153e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810153a:	2301      	movs	r3, #1
 810153c:	e0d1      	b.n	81016e2 <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8101544:	2b00      	cmp	r3, #0
 8101546:	d106      	bne.n	8101556 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8101548:	687b      	ldr	r3, [r7, #4]
 810154a:	2223      	movs	r2, #35	; 0x23
 810154c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8101550:	6878      	ldr	r0, [r7, #4]
 8101552:	f7ff f96f 	bl	8100834 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101556:	4b65      	ldr	r3, [pc, #404]	; (81016ec <HAL_ETH_Init+0x1c0>)
 8101558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810155c:	4a63      	ldr	r2, [pc, #396]	; (81016ec <HAL_ETH_Init+0x1c0>)
 810155e:	f043 0302 	orr.w	r3, r3, #2
 8101562:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101566:	4b61      	ldr	r3, [pc, #388]	; (81016ec <HAL_ETH_Init+0x1c0>)
 8101568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810156c:	f003 0302 	and.w	r3, r3, #2
 8101570:	60bb      	str	r3, [r7, #8]
 8101572:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	7a1b      	ldrb	r3, [r3, #8]
 8101578:	2b00      	cmp	r3, #0
 810157a:	d103      	bne.n	8101584 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 810157c:	2000      	movs	r0, #0
 810157e:	f7ff fec9 	bl	8101314 <HAL_SYSCFG_ETHInterfaceSelect>
 8101582:	e003      	b.n	810158c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8101584:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8101588:	f7ff fec4 	bl	8101314 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 810158c:	4b58      	ldr	r3, [pc, #352]	; (81016f0 <HAL_ETH_Init+0x1c4>)
 810158e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	681b      	ldr	r3, [r3, #0]
 8101594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	687a      	ldr	r2, [r7, #4]
 810159c:	6812      	ldr	r2, [r2, #0]
 810159e:	f043 0301 	orr.w	r3, r3, #1
 81015a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81015a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81015a8:	f7ff fe78 	bl	810129c <HAL_GetTick>
 81015ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81015ae:	e011      	b.n	81015d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81015b0:	f7ff fe74 	bl	810129c <HAL_GetTick>
 81015b4:	4602      	mov	r2, r0
 81015b6:	68fb      	ldr	r3, [r7, #12]
 81015b8:	1ad3      	subs	r3, r2, r3
 81015ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 81015be:	d909      	bls.n	81015d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81015c0:	687b      	ldr	r3, [r7, #4]
 81015c2:	2204      	movs	r2, #4
 81015c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81015c8:	687b      	ldr	r3, [r7, #4]
 81015ca:	22e0      	movs	r2, #224	; 0xe0
 81015cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 81015d0:	2301      	movs	r3, #1
 81015d2:	e086      	b.n	81016e2 <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81015d4:	687b      	ldr	r3, [r7, #4]
 81015d6:	681b      	ldr	r3, [r3, #0]
 81015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	f003 0301 	and.w	r3, r3, #1
 81015e2:	2b00      	cmp	r3, #0
 81015e4:	d1e4      	bne.n	81015b0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81015e6:	6878      	ldr	r0, [r7, #4]
 81015e8:	f000 f886 	bl	81016f8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81015ec:	f002 fa1e 	bl	8103a2c <HAL_RCC_GetHCLKFreq>
 81015f0:	4603      	mov	r3, r0
 81015f2:	4a40      	ldr	r2, [pc, #256]	; (81016f4 <HAL_ETH_Init+0x1c8>)
 81015f4:	fba2 2303 	umull	r2, r3, r2, r3
 81015f8:	0c9a      	lsrs	r2, r3, #18
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	681b      	ldr	r3, [r3, #0]
 81015fe:	3a01      	subs	r2, #1
 8101600:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8101604:	6878      	ldr	r0, [r7, #4]
 8101606:	f000 fa71 	bl	8101aec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	681b      	ldr	r3, [r3, #0]
 810160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101612:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8101616:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 810161a:	687a      	ldr	r2, [r7, #4]
 810161c:	6812      	ldr	r2, [r2, #0]
 810161e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8101622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101626:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810162a:	687b      	ldr	r3, [r7, #4]
 810162c:	695b      	ldr	r3, [r3, #20]
 810162e:	f003 0303 	and.w	r3, r3, #3
 8101632:	2b00      	cmp	r3, #0
 8101634:	d009      	beq.n	810164a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	2201      	movs	r2, #1
 810163a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810163e:	687b      	ldr	r3, [r7, #4]
 8101640:	22e0      	movs	r2, #224	; 0xe0
 8101642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8101646:	2301      	movs	r3, #1
 8101648:	e04b      	b.n	81016e2 <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	681b      	ldr	r3, [r3, #0]
 810164e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101652:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8101656:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810165a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 810165e:	687a      	ldr	r2, [r7, #4]
 8101660:	6952      	ldr	r2, [r2, #20]
 8101662:	0051      	lsls	r1, r2, #1
 8101664:	687a      	ldr	r2, [r7, #4]
 8101666:	6812      	ldr	r2, [r2, #0]
 8101668:	430b      	orrs	r3, r1
 810166a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810166e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8101672:	6878      	ldr	r0, [r7, #4]
 8101674:	f000 fad7 	bl	8101c26 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8101678:	6878      	ldr	r0, [r7, #4]
 810167a:	f000 fb1d 	bl	8101cb8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	685b      	ldr	r3, [r3, #4]
 8101682:	3305      	adds	r3, #5
 8101684:	781b      	ldrb	r3, [r3, #0]
 8101686:	021a      	lsls	r2, r3, #8
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	685b      	ldr	r3, [r3, #4]
 810168c:	3304      	adds	r3, #4
 810168e:	781b      	ldrb	r3, [r3, #0]
 8101690:	4619      	mov	r1, r3
 8101692:	687b      	ldr	r3, [r7, #4]
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	430a      	orrs	r2, r1
 8101698:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	685b      	ldr	r3, [r3, #4]
 81016a0:	3303      	adds	r3, #3
 81016a2:	781b      	ldrb	r3, [r3, #0]
 81016a4:	061a      	lsls	r2, r3, #24
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	685b      	ldr	r3, [r3, #4]
 81016aa:	3302      	adds	r3, #2
 81016ac:	781b      	ldrb	r3, [r3, #0]
 81016ae:	041b      	lsls	r3, r3, #16
 81016b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	685b      	ldr	r3, [r3, #4]
 81016b6:	3301      	adds	r3, #1
 81016b8:	781b      	ldrb	r3, [r3, #0]
 81016ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81016bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	685b      	ldr	r3, [r3, #4]
 81016c2:	781b      	ldrb	r3, [r3, #0]
 81016c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81016ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81016cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	2200      	movs	r2, #0
 81016d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	2210      	movs	r2, #16
 81016dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81016e0:	2300      	movs	r3, #0
}
 81016e2:	4618      	mov	r0, r3
 81016e4:	3710      	adds	r7, #16
 81016e6:	46bd      	mov	sp, r7
 81016e8:	bd80      	pop	{r7, pc}
 81016ea:	bf00      	nop
 81016ec:	58024400 	.word	0x58024400
 81016f0:	58000400 	.word	0x58000400
 81016f4:	431bde83 	.word	0x431bde83

081016f8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81016f8:	b580      	push	{r7, lr}
 81016fa:	b084      	sub	sp, #16
 81016fc:	af00      	add	r7, sp, #0
 81016fe:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8101708:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810170a:	68fb      	ldr	r3, [r7, #12]
 810170c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101710:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8101712:	f002 f98b 	bl	8103a2c <HAL_RCC_GetHCLKFreq>
 8101716:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8101718:	68bb      	ldr	r3, [r7, #8]
 810171a:	4a1e      	ldr	r2, [pc, #120]	; (8101794 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810171c:	4293      	cmp	r3, r2
 810171e:	d908      	bls.n	8101732 <HAL_ETH_SetMDIOClockRange+0x3a>
 8101720:	68bb      	ldr	r3, [r7, #8]
 8101722:	4a1d      	ldr	r2, [pc, #116]	; (8101798 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8101724:	4293      	cmp	r3, r2
 8101726:	d804      	bhi.n	8101732 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8101728:	68fb      	ldr	r3, [r7, #12]
 810172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810172e:	60fb      	str	r3, [r7, #12]
 8101730:	e027      	b.n	8101782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8101732:	68bb      	ldr	r3, [r7, #8]
 8101734:	4a18      	ldr	r2, [pc, #96]	; (8101798 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8101736:	4293      	cmp	r3, r2
 8101738:	d908      	bls.n	810174c <HAL_ETH_SetMDIOClockRange+0x54>
 810173a:	68bb      	ldr	r3, [r7, #8]
 810173c:	4a17      	ldr	r2, [pc, #92]	; (810179c <HAL_ETH_SetMDIOClockRange+0xa4>)
 810173e:	4293      	cmp	r3, r2
 8101740:	d204      	bcs.n	810174c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8101742:	68fb      	ldr	r3, [r7, #12]
 8101744:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8101748:	60fb      	str	r3, [r7, #12]
 810174a:	e01a      	b.n	8101782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 810174c:	68bb      	ldr	r3, [r7, #8]
 810174e:	4a13      	ldr	r2, [pc, #76]	; (810179c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8101750:	4293      	cmp	r3, r2
 8101752:	d303      	bcc.n	810175c <HAL_ETH_SetMDIOClockRange+0x64>
 8101754:	68bb      	ldr	r3, [r7, #8]
 8101756:	4a12      	ldr	r2, [pc, #72]	; (81017a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8101758:	4293      	cmp	r3, r2
 810175a:	d911      	bls.n	8101780 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 810175c:	68bb      	ldr	r3, [r7, #8]
 810175e:	4a10      	ldr	r2, [pc, #64]	; (81017a0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8101760:	4293      	cmp	r3, r2
 8101762:	d908      	bls.n	8101776 <HAL_ETH_SetMDIOClockRange+0x7e>
 8101764:	68bb      	ldr	r3, [r7, #8]
 8101766:	4a0f      	ldr	r2, [pc, #60]	; (81017a4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8101768:	4293      	cmp	r3, r2
 810176a:	d804      	bhi.n	8101776 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810176c:	68fb      	ldr	r3, [r7, #12]
 810176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101772:	60fb      	str	r3, [r7, #12]
 8101774:	e005      	b.n	8101782 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8101776:	68fb      	ldr	r3, [r7, #12]
 8101778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810177c:	60fb      	str	r3, [r7, #12]
 810177e:	e000      	b.n	8101782 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8101780:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	681b      	ldr	r3, [r3, #0]
 8101786:	68fa      	ldr	r2, [r7, #12]
 8101788:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 810178c:	bf00      	nop
 810178e:	3710      	adds	r7, #16
 8101790:	46bd      	mov	sp, r7
 8101792:	bd80      	pop	{r7, pc}
 8101794:	01312cff 	.word	0x01312cff
 8101798:	02160ebf 	.word	0x02160ebf
 810179c:	03938700 	.word	0x03938700
 81017a0:	05f5e0ff 	.word	0x05f5e0ff
 81017a4:	08f0d17f 	.word	0x08f0d17f

081017a8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 81017a8:	b480      	push	{r7}
 81017aa:	b085      	sub	sp, #20
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
 81017b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81017b2:	683b      	ldr	r3, [r7, #0]
 81017b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81017b6:	683b      	ldr	r3, [r7, #0]
 81017b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81017ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81017bc:	683b      	ldr	r3, [r7, #0]
 81017be:	791b      	ldrb	r3, [r3, #4]
 81017c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81017c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81017c4:	683b      	ldr	r3, [r7, #0]
 81017c6:	7b1b      	ldrb	r3, [r3, #12]
 81017c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81017ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81017cc:	683b      	ldr	r3, [r7, #0]
 81017ce:	7b5b      	ldrb	r3, [r3, #13]
 81017d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81017d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81017d4:	683b      	ldr	r3, [r7, #0]
 81017d6:	7b9b      	ldrb	r3, [r3, #14]
 81017d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81017dc:	683b      	ldr	r3, [r7, #0]
 81017de:	7bdb      	ldrb	r3, [r3, #15]
 81017e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81017e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81017e4:	683a      	ldr	r2, [r7, #0]
 81017e6:	7c12      	ldrb	r2, [r2, #16]
 81017e8:	2a00      	cmp	r2, #0
 81017ea:	d102      	bne.n	81017f2 <ETH_SetMACConfig+0x4a>
 81017ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81017f0:	e000      	b.n	81017f4 <ETH_SetMACConfig+0x4c>
 81017f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81017f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81017f6:	683a      	ldr	r2, [r7, #0]
 81017f8:	7c52      	ldrb	r2, [r2, #17]
 81017fa:	2a00      	cmp	r2, #0
 81017fc:	d102      	bne.n	8101804 <ETH_SetMACConfig+0x5c>
 81017fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101802:	e000      	b.n	8101806 <ETH_SetMACConfig+0x5e>
 8101804:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8101806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8101808:	683b      	ldr	r3, [r7, #0]
 810180a:	7c9b      	ldrb	r3, [r3, #18]
 810180c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810180e:	431a      	orrs	r2, r3
               macconf->Speed |
 8101810:	683b      	ldr	r3, [r7, #0]
 8101812:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8101814:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8101816:	683b      	ldr	r3, [r7, #0]
 8101818:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810181a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 810181c:	683b      	ldr	r3, [r7, #0]
 810181e:	7f1b      	ldrb	r3, [r3, #28]
 8101820:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8101822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8101824:	683b      	ldr	r3, [r7, #0]
 8101826:	7f5b      	ldrb	r3, [r3, #29]
 8101828:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810182a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810182c:	683a      	ldr	r2, [r7, #0]
 810182e:	7f92      	ldrb	r2, [r2, #30]
 8101830:	2a00      	cmp	r2, #0
 8101832:	d102      	bne.n	810183a <ETH_SetMACConfig+0x92>
 8101834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101838:	e000      	b.n	810183c <ETH_SetMACConfig+0x94>
 810183a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810183c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810183e:	683b      	ldr	r3, [r7, #0]
 8101840:	7fdb      	ldrb	r3, [r3, #31]
 8101842:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8101844:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8101846:	683a      	ldr	r2, [r7, #0]
 8101848:	f892 2020 	ldrb.w	r2, [r2, #32]
 810184c:	2a00      	cmp	r2, #0
 810184e:	d102      	bne.n	8101856 <ETH_SetMACConfig+0xae>
 8101850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101854:	e000      	b.n	8101858 <ETH_SetMACConfig+0xb0>
 8101856:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8101858:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810185a:	683b      	ldr	r3, [r7, #0]
 810185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8101860:	683b      	ldr	r3, [r7, #0]
 8101862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8101866:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8101868:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810186a:	683b      	ldr	r3, [r7, #0]
 810186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 810186e:	4313      	orrs	r3, r2
 8101870:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8101872:	687b      	ldr	r3, [r7, #4]
 8101874:	681b      	ldr	r3, [r3, #0]
 8101876:	681a      	ldr	r2, [r3, #0]
 8101878:	4b57      	ldr	r3, [pc, #348]	; (81019d8 <ETH_SetMACConfig+0x230>)
 810187a:	4013      	ands	r3, r2
 810187c:	687a      	ldr	r2, [r7, #4]
 810187e:	6812      	ldr	r2, [r2, #0]
 8101880:	68f9      	ldr	r1, [r7, #12]
 8101882:	430b      	orrs	r3, r1
 8101884:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8101886:	683b      	ldr	r3, [r7, #0]
 8101888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810188a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810188c:	683b      	ldr	r3, [r7, #0]
 810188e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101892:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8101894:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8101896:	683b      	ldr	r3, [r7, #0]
 8101898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810189c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81018a0:	683b      	ldr	r3, [r7, #0]
 81018a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 81018a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81018a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81018aa:	683a      	ldr	r2, [r7, #0]
 81018ac:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 81018b0:	2a00      	cmp	r2, #0
 81018b2:	d102      	bne.n	81018ba <ETH_SetMACConfig+0x112>
 81018b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 81018b8:	e000      	b.n	81018bc <ETH_SetMACConfig+0x114>
 81018ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81018bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81018be:	683b      	ldr	r3, [r7, #0]
 81018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81018c2:	4313      	orrs	r3, r2
 81018c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	685a      	ldr	r2, [r3, #4]
 81018cc:	4b43      	ldr	r3, [pc, #268]	; (81019dc <ETH_SetMACConfig+0x234>)
 81018ce:	4013      	ands	r3, r2
 81018d0:	687a      	ldr	r2, [r7, #4]
 81018d2:	6812      	ldr	r2, [r2, #0]
 81018d4:	68f9      	ldr	r1, [r7, #12]
 81018d6:	430b      	orrs	r3, r1
 81018d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81018da:	683b      	ldr	r3, [r7, #0]
 81018dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81018e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81018e2:	683b      	ldr	r3, [r7, #0]
 81018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81018e6:	4313      	orrs	r3, r2
 81018e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	681b      	ldr	r3, [r3, #0]
 81018ee:	68db      	ldr	r3, [r3, #12]
 81018f0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 81018f4:	f023 0301 	bic.w	r3, r3, #1
 81018f8:	687a      	ldr	r2, [r7, #4]
 81018fa:	6812      	ldr	r2, [r2, #0]
 81018fc:	68f9      	ldr	r1, [r7, #12]
 81018fe:	430b      	orrs	r3, r1
 8101900:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101902:	683b      	ldr	r3, [r7, #0]
 8101904:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8101908:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810190a:	683b      	ldr	r3, [r7, #0]
 810190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810190e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8101910:	683a      	ldr	r2, [r7, #0]
 8101912:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8101916:	2a00      	cmp	r2, #0
 8101918:	d101      	bne.n	810191e <ETH_SetMACConfig+0x176>
 810191a:	2280      	movs	r2, #128	; 0x80
 810191c:	e000      	b.n	8101920 <ETH_SetMACConfig+0x178>
 810191e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8101920:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8101922:	683b      	ldr	r3, [r7, #0]
 8101924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101926:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8101928:	4313      	orrs	r3, r2
 810192a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101932:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8101936:	4013      	ands	r3, r2
 8101938:	687a      	ldr	r2, [r7, #4]
 810193a:	6812      	ldr	r2, [r2, #0]
 810193c:	68f9      	ldr	r1, [r7, #12]
 810193e:	430b      	orrs	r3, r1
 8101940:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101942:	683b      	ldr	r3, [r7, #0]
 8101944:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8101948:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810194a:	683b      	ldr	r3, [r7, #0]
 810194c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8101950:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8101952:	4313      	orrs	r3, r2
 8101954:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810195e:	f023 0103 	bic.w	r1, r3, #3
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	681b      	ldr	r3, [r3, #0]
 8101966:	68fa      	ldr	r2, [r7, #12]
 8101968:	430a      	orrs	r2, r1
 810196a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	681b      	ldr	r3, [r3, #0]
 8101972:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8101976:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 810197a:	683b      	ldr	r3, [r7, #0]
 810197c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	681b      	ldr	r3, [r3, #0]
 8101982:	430a      	orrs	r2, r1
 8101984:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8101988:	683b      	ldr	r3, [r7, #0]
 810198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810198c:	683a      	ldr	r2, [r7, #0]
 810198e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8101992:	2a00      	cmp	r2, #0
 8101994:	d101      	bne.n	810199a <ETH_SetMACConfig+0x1f2>
 8101996:	2240      	movs	r2, #64	; 0x40
 8101998:	e000      	b.n	810199c <ETH_SetMACConfig+0x1f4>
 810199a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 810199c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 810199e:	683b      	ldr	r3, [r7, #0]
 81019a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 81019a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81019a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81019a8:	683b      	ldr	r3, [r7, #0]
 81019aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 81019ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81019b0:	4313      	orrs	r3, r2
 81019b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	681b      	ldr	r3, [r3, #0]
 81019b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 81019bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	68fa      	ldr	r2, [r7, #12]
 81019c6:	430a      	orrs	r2, r1
 81019c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 81019cc:	bf00      	nop
 81019ce:	3714      	adds	r7, #20
 81019d0:	46bd      	mov	sp, r7
 81019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019d6:	4770      	bx	lr
 81019d8:	00048083 	.word	0x00048083
 81019dc:	c0f88000 	.word	0xc0f88000

081019e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 81019e0:	b480      	push	{r7}
 81019e2:	b085      	sub	sp, #20
 81019e4:	af00      	add	r7, sp, #0
 81019e6:	6078      	str	r0, [r7, #4]
 81019e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81019ea:	687b      	ldr	r3, [r7, #4]
 81019ec:	681b      	ldr	r3, [r3, #0]
 81019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 81019f8:	f023 0302 	bic.w	r3, r3, #2
 81019fc:	683a      	ldr	r2, [r7, #0]
 81019fe:	6811      	ldr	r1, [r2, #0]
 8101a00:	687a      	ldr	r2, [r7, #4]
 8101a02:	6812      	ldr	r2, [r2, #0]
 8101a04:	430b      	orrs	r3, r1
 8101a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101a0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101a0c:	683b      	ldr	r3, [r7, #0]
 8101a0e:	791b      	ldrb	r3, [r3, #4]
 8101a10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8101a12:	683b      	ldr	r3, [r7, #0]
 8101a14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101a16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8101a18:	683b      	ldr	r3, [r7, #0]
 8101a1a:	7b1b      	ldrb	r3, [r3, #12]
 8101a1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8101a1e:	4313      	orrs	r3, r2
 8101a20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101a2a:	685b      	ldr	r3, [r3, #4]
 8101a2c:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8101a30:	f023 0301 	bic.w	r3, r3, #1
 8101a34:	687a      	ldr	r2, [r7, #4]
 8101a36:	6812      	ldr	r2, [r2, #0]
 8101a38:	68f9      	ldr	r1, [r7, #12]
 8101a3a:	430b      	orrs	r3, r1
 8101a3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101a40:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8101a42:	683b      	ldr	r3, [r7, #0]
 8101a44:	7b5b      	ldrb	r3, [r3, #13]
 8101a46:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8101a48:	683b      	ldr	r3, [r7, #0]
 8101a4a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8101a4c:	4313      	orrs	r3, r2
 8101a4e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	681b      	ldr	r3, [r3, #0]
 8101a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101a58:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8101a5c:	4b21      	ldr	r3, [pc, #132]	; (8101ae4 <ETH_SetDMAConfig+0x104>)
 8101a5e:	4013      	ands	r3, r2
 8101a60:	687a      	ldr	r2, [r7, #4]
 8101a62:	6812      	ldr	r2, [r2, #0]
 8101a64:	68f9      	ldr	r1, [r7, #12]
 8101a66:	430b      	orrs	r3, r1
 8101a68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101a6c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8101a70:	683b      	ldr	r3, [r7, #0]
 8101a72:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8101a74:	683b      	ldr	r3, [r7, #0]
 8101a76:	7d1b      	ldrb	r3, [r3, #20]
 8101a78:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8101a7a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8101a7c:	683b      	ldr	r3, [r7, #0]
 8101a7e:	7f5b      	ldrb	r3, [r3, #29]
 8101a80:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8101a82:	4313      	orrs	r3, r2
 8101a84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101a8e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8101a92:	4b15      	ldr	r3, [pc, #84]	; (8101ae8 <ETH_SetDMAConfig+0x108>)
 8101a94:	4013      	ands	r3, r2
 8101a96:	687a      	ldr	r2, [r7, #4]
 8101a98:	6812      	ldr	r2, [r2, #0]
 8101a9a:	68f9      	ldr	r1, [r7, #12]
 8101a9c:	430b      	orrs	r3, r1
 8101a9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101aa2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8101aa6:	683b      	ldr	r3, [r7, #0]
 8101aa8:	7f1b      	ldrb	r3, [r3, #28]
 8101aaa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8101aac:	683b      	ldr	r3, [r7, #0]
 8101aae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8101ab0:	4313      	orrs	r3, r2
 8101ab2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101abc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8101ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101ac4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8101ac8:	687a      	ldr	r2, [r7, #4]
 8101aca:	6812      	ldr	r2, [r2, #0]
 8101acc:	68f9      	ldr	r1, [r7, #12]
 8101ace:	430b      	orrs	r3, r1
 8101ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8101ad4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8101ad8:	bf00      	nop
 8101ada:	3714      	adds	r7, #20
 8101adc:	46bd      	mov	sp, r7
 8101ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ae2:	4770      	bx	lr
 8101ae4:	fffec000 	.word	0xfffec000
 8101ae8:	ffc0efef 	.word	0xffc0efef

08101aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8101aec:	b580      	push	{r7, lr}
 8101aee:	b0a4      	sub	sp, #144	; 0x90
 8101af0:	af00      	add	r7, sp, #0
 8101af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8101af4:	2301      	movs	r3, #1
 8101af6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8101afa:	2300      	movs	r3, #0
 8101afc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8101afe:	2300      	movs	r3, #0
 8101b00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8101b04:	2300      	movs	r3, #0
 8101b06:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8101b0a:	2301      	movs	r3, #1
 8101b0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8101b10:	2301      	movs	r3, #1
 8101b12:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8101b16:	2301      	movs	r3, #1
 8101b18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8101b1c:	2300      	movs	r3, #0
 8101b1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8101b22:	2301      	movs	r3, #1
 8101b24:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8101b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101b2c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8101b2e:	2300      	movs	r3, #0
 8101b30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8101b34:	2300      	movs	r3, #0
 8101b36:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8101b38:	2300      	movs	r3, #0
 8101b3a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8101b3e:	2300      	movs	r3, #0
 8101b40:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8101b44:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8101b48:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8101b4a:	2300      	movs	r3, #0
 8101b4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8101b50:	2300      	movs	r3, #0
 8101b52:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8101b54:	2301      	movs	r3, #1
 8101b56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8101b5a:	2300      	movs	r3, #0
 8101b5c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8101b60:	2300      	movs	r3, #0
 8101b62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8101b66:	2300      	movs	r3, #0
 8101b68:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8101b6a:	2300      	movs	r3, #0
 8101b6c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8101b6e:	2300      	movs	r3, #0
 8101b70:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8101b72:	2300      	movs	r3, #0
 8101b74:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8101b78:	2300      	movs	r3, #0
 8101b7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8101b7e:	2301      	movs	r3, #1
 8101b80:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8101b84:	2320      	movs	r3, #32
 8101b86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8101b8a:	2301      	movs	r3, #1
 8101b8c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8101b90:	2300      	movs	r3, #0
 8101b92:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8101b96:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8101b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8101b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101ba0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8101ba2:	2300      	movs	r3, #0
 8101ba4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8101ba8:	2302      	movs	r3, #2
 8101baa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8101bae:	2300      	movs	r3, #0
 8101bb0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8101bb4:	2300      	movs	r3, #0
 8101bb6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8101bba:	2300      	movs	r3, #0
 8101bbc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8101bc0:	2301      	movs	r3, #1
 8101bc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8101bc6:	2300      	movs	r3, #0
 8101bc8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8101bca:	2301      	movs	r3, #1
 8101bcc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8101bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8101bd4:	4619      	mov	r1, r3
 8101bd6:	6878      	ldr	r0, [r7, #4]
 8101bd8:	f7ff fde6 	bl	81017a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8101bdc:	2301      	movs	r3, #1
 8101bde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8101be0:	2301      	movs	r3, #1
 8101be2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8101be4:	2300      	movs	r3, #0
 8101be6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8101be8:	2300      	movs	r3, #0
 8101bea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8101bee:	2300      	movs	r3, #0
 8101bf0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8101bf2:	2300      	movs	r3, #0
 8101bf4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8101bf6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8101bfa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8101bfc:	2300      	movs	r3, #0
 8101bfe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8101c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8101c04:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8101c06:	2300      	movs	r3, #0
 8101c08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8101c0c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8101c10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8101c12:	f107 0308 	add.w	r3, r7, #8
 8101c16:	4619      	mov	r1, r3
 8101c18:	6878      	ldr	r0, [r7, #4]
 8101c1a:	f7ff fee1 	bl	81019e0 <ETH_SetDMAConfig>
}
 8101c1e:	bf00      	nop
 8101c20:	3790      	adds	r7, #144	; 0x90
 8101c22:	46bd      	mov	sp, r7
 8101c24:	bd80      	pop	{r7, pc}

08101c26 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8101c26:	b480      	push	{r7}
 8101c28:	b085      	sub	sp, #20
 8101c2a:	af00      	add	r7, sp, #0
 8101c2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8101c2e:	2300      	movs	r3, #0
 8101c30:	60fb      	str	r3, [r7, #12]
 8101c32:	e01d      	b.n	8101c70 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	68d9      	ldr	r1, [r3, #12]
 8101c38:	68fa      	ldr	r2, [r7, #12]
 8101c3a:	4613      	mov	r3, r2
 8101c3c:	005b      	lsls	r3, r3, #1
 8101c3e:	4413      	add	r3, r2
 8101c40:	00db      	lsls	r3, r3, #3
 8101c42:	440b      	add	r3, r1
 8101c44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8101c46:	68bb      	ldr	r3, [r7, #8]
 8101c48:	2200      	movs	r2, #0
 8101c4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8101c4c:	68bb      	ldr	r3, [r7, #8]
 8101c4e:	2200      	movs	r2, #0
 8101c50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8101c52:	68bb      	ldr	r3, [r7, #8]
 8101c54:	2200      	movs	r2, #0
 8101c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8101c58:	68bb      	ldr	r3, [r7, #8]
 8101c5a:	2200      	movs	r2, #0
 8101c5c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8101c5e:	68b9      	ldr	r1, [r7, #8]
 8101c60:	687b      	ldr	r3, [r7, #4]
 8101c62:	68fa      	ldr	r2, [r7, #12]
 8101c64:	3206      	adds	r2, #6
 8101c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8101c6a:	68fb      	ldr	r3, [r7, #12]
 8101c6c:	3301      	adds	r3, #1
 8101c6e:	60fb      	str	r3, [r7, #12]
 8101c70:	68fb      	ldr	r3, [r7, #12]
 8101c72:	2b03      	cmp	r3, #3
 8101c74:	d9de      	bls.n	8101c34 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	2200      	movs	r2, #0
 8101c7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	681b      	ldr	r3, [r3, #0]
 8101c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101c84:	461a      	mov	r2, r3
 8101c86:	2303      	movs	r3, #3
 8101c88:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	68da      	ldr	r2, [r3, #12]
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101c98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	68da      	ldr	r2, [r3, #12]
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	681b      	ldr	r3, [r3, #0]
 8101ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101ca8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8101cac:	bf00      	nop
 8101cae:	3714      	adds	r7, #20
 8101cb0:	46bd      	mov	sp, r7
 8101cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cb6:	4770      	bx	lr

08101cb8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8101cb8:	b480      	push	{r7}
 8101cba:	b085      	sub	sp, #20
 8101cbc:	af00      	add	r7, sp, #0
 8101cbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8101cc0:	2300      	movs	r3, #0
 8101cc2:	60fb      	str	r3, [r7, #12]
 8101cc4:	e023      	b.n	8101d0e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	6919      	ldr	r1, [r3, #16]
 8101cca:	68fa      	ldr	r2, [r7, #12]
 8101ccc:	4613      	mov	r3, r2
 8101cce:	005b      	lsls	r3, r3, #1
 8101cd0:	4413      	add	r3, r2
 8101cd2:	00db      	lsls	r3, r3, #3
 8101cd4:	440b      	add	r3, r1
 8101cd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8101cd8:	68bb      	ldr	r3, [r7, #8]
 8101cda:	2200      	movs	r2, #0
 8101cdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8101cde:	68bb      	ldr	r3, [r7, #8]
 8101ce0:	2200      	movs	r2, #0
 8101ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8101ce4:	68bb      	ldr	r3, [r7, #8]
 8101ce6:	2200      	movs	r2, #0
 8101ce8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8101cea:	68bb      	ldr	r3, [r7, #8]
 8101cec:	2200      	movs	r2, #0
 8101cee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8101cf0:	68bb      	ldr	r3, [r7, #8]
 8101cf2:	2200      	movs	r2, #0
 8101cf4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8101cf6:	68bb      	ldr	r3, [r7, #8]
 8101cf8:	2200      	movs	r2, #0
 8101cfa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8101cfc:	68b9      	ldr	r1, [r7, #8]
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	68fa      	ldr	r2, [r7, #12]
 8101d02:	3212      	adds	r2, #18
 8101d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8101d08:	68fb      	ldr	r3, [r7, #12]
 8101d0a:	3301      	adds	r3, #1
 8101d0c:	60fb      	str	r3, [r7, #12]
 8101d0e:	68fb      	ldr	r3, [r7, #12]
 8101d10:	2b03      	cmp	r3, #3
 8101d12:	d9d8      	bls.n	8101cc6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	2200      	movs	r2, #0
 8101d18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	2200      	movs	r2, #0
 8101d1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	2200      	movs	r2, #0
 8101d24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	2200      	movs	r2, #0
 8101d2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8101d2c:	687b      	ldr	r3, [r7, #4]
 8101d2e:	2200      	movs	r2, #0
 8101d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101d3a:	461a      	mov	r2, r3
 8101d3c:	2303      	movs	r3, #3
 8101d3e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	691a      	ldr	r2, [r3, #16]
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101d4e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	691b      	ldr	r3, [r3, #16]
 8101d56:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8101d5a:	687b      	ldr	r3, [r7, #4]
 8101d5c:	681b      	ldr	r3, [r3, #0]
 8101d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101d62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8101d66:	bf00      	nop
 8101d68:	3714      	adds	r7, #20
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d70:	4770      	bx	lr
	...

08101d74 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	b098      	sub	sp, #96	; 0x60
 8101d78:	af00      	add	r7, sp, #0
 8101d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8101d7c:	4a84      	ldr	r2, [pc, #528]	; (8101f90 <HAL_FDCAN_Init+0x21c>)
 8101d7e:	f107 030c 	add.w	r3, r7, #12
 8101d82:	4611      	mov	r1, r2
 8101d84:	224c      	movs	r2, #76	; 0x4c
 8101d86:	4618      	mov	r0, r3
 8101d88:	f005 fb68 	bl	810745c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	2b00      	cmp	r3, #0
 8101d90:	d101      	bne.n	8101d96 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8101d92:	2301      	movs	r3, #1
 8101d94:	e1c6      	b.n	8102124 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	681b      	ldr	r3, [r3, #0]
 8101d9a:	4a7e      	ldr	r2, [pc, #504]	; (8101f94 <HAL_FDCAN_Init+0x220>)
 8101d9c:	4293      	cmp	r3, r2
 8101d9e:	d106      	bne.n	8101dae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8101da8:	461a      	mov	r2, r3
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8101db4:	b2db      	uxtb	r3, r3
 8101db6:	2b00      	cmp	r3, #0
 8101db8:	d106      	bne.n	8101dc8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	2200      	movs	r2, #0
 8101dbe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8101dc2:	6878      	ldr	r0, [r7, #4]
 8101dc4:	f7fe fe66 	bl	8100a94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	699a      	ldr	r2, [r3, #24]
 8101dce:	687b      	ldr	r3, [r7, #4]
 8101dd0:	681b      	ldr	r3, [r3, #0]
 8101dd2:	f022 0210 	bic.w	r2, r2, #16
 8101dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101dd8:	f7ff fa60 	bl	810129c <HAL_GetTick>
 8101ddc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101dde:	e014      	b.n	8101e0a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101de0:	f7ff fa5c 	bl	810129c <HAL_GetTick>
 8101de4:	4602      	mov	r2, r0
 8101de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101de8:	1ad3      	subs	r3, r2, r3
 8101dea:	2b0a      	cmp	r3, #10
 8101dec:	d90d      	bls.n	8101e0a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101df4:	f043 0201 	orr.w	r2, r3, #1
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101dfe:	687b      	ldr	r3, [r7, #4]
 8101e00:	2203      	movs	r2, #3
 8101e02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8101e06:	2301      	movs	r3, #1
 8101e08:	e18c      	b.n	8102124 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	681b      	ldr	r3, [r3, #0]
 8101e0e:	699b      	ldr	r3, [r3, #24]
 8101e10:	f003 0308 	and.w	r3, r3, #8
 8101e14:	2b08      	cmp	r3, #8
 8101e16:	d0e3      	beq.n	8101de0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	681b      	ldr	r3, [r3, #0]
 8101e1c:	699a      	ldr	r2, [r3, #24]
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	f042 0201 	orr.w	r2, r2, #1
 8101e26:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101e28:	f7ff fa38 	bl	810129c <HAL_GetTick>
 8101e2c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101e2e:	e014      	b.n	8101e5a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101e30:	f7ff fa34 	bl	810129c <HAL_GetTick>
 8101e34:	4602      	mov	r2, r0
 8101e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101e38:	1ad3      	subs	r3, r2, r3
 8101e3a:	2b0a      	cmp	r3, #10
 8101e3c:	d90d      	bls.n	8101e5a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8101e44:	f043 0201 	orr.w	r2, r3, #1
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	2203      	movs	r2, #3
 8101e52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8101e56:	2301      	movs	r3, #1
 8101e58:	e164      	b.n	8102124 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	699b      	ldr	r3, [r3, #24]
 8101e60:	f003 0301 	and.w	r3, r3, #1
 8101e64:	2b00      	cmp	r3, #0
 8101e66:	d0e3      	beq.n	8101e30 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	681b      	ldr	r3, [r3, #0]
 8101e6c:	699a      	ldr	r2, [r3, #24]
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	f042 0202 	orr.w	r2, r2, #2
 8101e76:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	7c1b      	ldrb	r3, [r3, #16]
 8101e7c:	2b01      	cmp	r3, #1
 8101e7e:	d108      	bne.n	8101e92 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	699a      	ldr	r2, [r3, #24]
 8101e86:	687b      	ldr	r3, [r7, #4]
 8101e88:	681b      	ldr	r3, [r3, #0]
 8101e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8101e8e:	619a      	str	r2, [r3, #24]
 8101e90:	e007      	b.n	8101ea2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	699a      	ldr	r2, [r3, #24]
 8101e98:	687b      	ldr	r3, [r7, #4]
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8101ea0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	7c5b      	ldrb	r3, [r3, #17]
 8101ea6:	2b01      	cmp	r3, #1
 8101ea8:	d108      	bne.n	8101ebc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101eaa:	687b      	ldr	r3, [r7, #4]
 8101eac:	681b      	ldr	r3, [r3, #0]
 8101eae:	699a      	ldr	r2, [r3, #24]
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8101eb8:	619a      	str	r2, [r3, #24]
 8101eba:	e007      	b.n	8101ecc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	681b      	ldr	r3, [r3, #0]
 8101ec0:	699a      	ldr	r2, [r3, #24]
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8101eca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8101ecc:	687b      	ldr	r3, [r7, #4]
 8101ece:	7c9b      	ldrb	r3, [r3, #18]
 8101ed0:	2b01      	cmp	r3, #1
 8101ed2:	d108      	bne.n	8101ee6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	699a      	ldr	r2, [r3, #24]
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	681b      	ldr	r3, [r3, #0]
 8101ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101ee2:	619a      	str	r2, [r3, #24]
 8101ee4:	e007      	b.n	8101ef6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	699a      	ldr	r2, [r3, #24]
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8101ef4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	699b      	ldr	r3, [r3, #24]
 8101efc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	689a      	ldr	r2, [r3, #8]
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	681b      	ldr	r3, [r3, #0]
 8101f08:	430a      	orrs	r2, r1
 8101f0a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	699a      	ldr	r2, [r3, #24]
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8101f1a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	691a      	ldr	r2, [r3, #16]
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	f022 0210 	bic.w	r2, r2, #16
 8101f2a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	68db      	ldr	r3, [r3, #12]
 8101f30:	2b01      	cmp	r3, #1
 8101f32:	d108      	bne.n	8101f46 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	699a      	ldr	r2, [r3, #24]
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	f042 0204 	orr.w	r2, r2, #4
 8101f42:	619a      	str	r2, [r3, #24]
 8101f44:	e030      	b.n	8101fa8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	68db      	ldr	r3, [r3, #12]
 8101f4a:	2b00      	cmp	r3, #0
 8101f4c:	d02c      	beq.n	8101fa8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	68db      	ldr	r3, [r3, #12]
 8101f52:	2b02      	cmp	r3, #2
 8101f54:	d020      	beq.n	8101f98 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8101f56:	687b      	ldr	r3, [r7, #4]
 8101f58:	681b      	ldr	r3, [r3, #0]
 8101f5a:	699a      	ldr	r2, [r3, #24]
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	681b      	ldr	r3, [r3, #0]
 8101f60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8101f64:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	691a      	ldr	r2, [r3, #16]
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	f042 0210 	orr.w	r2, r2, #16
 8101f74:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	68db      	ldr	r3, [r3, #12]
 8101f7a:	2b03      	cmp	r3, #3
 8101f7c:	d114      	bne.n	8101fa8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	681b      	ldr	r3, [r3, #0]
 8101f82:	699a      	ldr	r2, [r3, #24]
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	681b      	ldr	r3, [r3, #0]
 8101f88:	f042 0220 	orr.w	r2, r2, #32
 8101f8c:	619a      	str	r2, [r3, #24]
 8101f8e:	e00b      	b.n	8101fa8 <HAL_FDCAN_Init+0x234>
 8101f90:	081074a0 	.word	0x081074a0
 8101f94:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	699a      	ldr	r2, [r3, #24]
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	f042 0220 	orr.w	r2, r2, #32
 8101fa6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	699b      	ldr	r3, [r3, #24]
 8101fac:	3b01      	subs	r3, #1
 8101fae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	69db      	ldr	r3, [r3, #28]
 8101fb4:	3b01      	subs	r3, #1
 8101fb6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101fb8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	6a1b      	ldr	r3, [r3, #32]
 8101fbe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101fc0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	695b      	ldr	r3, [r3, #20]
 8101fc8:	3b01      	subs	r3, #1
 8101fca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101fd0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101fd2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	689b      	ldr	r3, [r3, #8]
 8101fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101fdc:	d115      	bne.n	810200a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101fe2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101fe8:	3b01      	subs	r3, #1
 8101fea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8101fec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ff2:	3b01      	subs	r3, #1
 8101ff4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8101ff6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101ffe:	3b01      	subs	r3, #1
 8102000:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8102006:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8102008:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810200e:	2b00      	cmp	r3, #0
 8102010:	d00a      	beq.n	8102028 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	681b      	ldr	r3, [r3, #0]
 8102016:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	430a      	orrs	r2, r1
 8102024:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102030:	4413      	add	r3, r2
 8102032:	2b00      	cmp	r3, #0
 8102034:	d011      	beq.n	810205a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	681b      	ldr	r3, [r3, #0]
 810203a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 810203e:	f023 0107 	bic.w	r1, r3, #7
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102046:	009b      	lsls	r3, r3, #2
 8102048:	3360      	adds	r3, #96	; 0x60
 810204a:	443b      	add	r3, r7
 810204c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	681b      	ldr	r3, [r3, #0]
 8102054:	430a      	orrs	r2, r1
 8102056:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810205e:	2b00      	cmp	r3, #0
 8102060:	d011      	beq.n	8102086 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810206a:	f023 0107 	bic.w	r1, r3, #7
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102072:	009b      	lsls	r3, r3, #2
 8102074:	3360      	adds	r3, #96	; 0x60
 8102076:	443b      	add	r3, r7
 8102078:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	430a      	orrs	r2, r1
 8102082:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810208a:	2b00      	cmp	r3, #0
 810208c:	d012      	beq.n	81020b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8102096:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810209e:	009b      	lsls	r3, r3, #2
 81020a0:	3360      	adds	r3, #96	; 0x60
 81020a2:	443b      	add	r3, r7
 81020a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81020a8:	011a      	lsls	r2, r3, #4
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	430a      	orrs	r2, r1
 81020b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81020b8:	2b00      	cmp	r3, #0
 81020ba:	d012      	beq.n	81020e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	681b      	ldr	r3, [r3, #0]
 81020c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81020c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020cc:	009b      	lsls	r3, r3, #2
 81020ce:	3360      	adds	r3, #96	; 0x60
 81020d0:	443b      	add	r3, r7
 81020d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81020d6:	021a      	lsls	r2, r3, #8
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	430a      	orrs	r2, r1
 81020de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	681b      	ldr	r3, [r3, #0]
 81020e6:	4a11      	ldr	r2, [pc, #68]	; (810212c <HAL_FDCAN_Init+0x3b8>)
 81020e8:	4293      	cmp	r3, r2
 81020ea:	d107      	bne.n	81020fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	685b      	ldr	r3, [r3, #4]
 81020f0:	689a      	ldr	r2, [r3, #8]
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	685b      	ldr	r3, [r3, #4]
 81020f6:	f022 0203 	bic.w	r2, r2, #3
 81020fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	2200      	movs	r2, #0
 8102100:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102104:	687b      	ldr	r3, [r7, #4]
 8102106:	2200      	movs	r2, #0
 8102108:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	2201      	movs	r2, #1
 8102110:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102114:	6878      	ldr	r0, [r7, #4]
 8102116:	f000 f80b 	bl	8102130 <FDCAN_CalcultateRamBlockAddresses>
 810211a:	4603      	mov	r3, r0
 810211c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8102120:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8102124:	4618      	mov	r0, r3
 8102126:	3760      	adds	r7, #96	; 0x60
 8102128:	46bd      	mov	sp, r7
 810212a:	bd80      	pop	{r7, pc}
 810212c:	4000a000 	.word	0x4000a000

08102130 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102130:	b480      	push	{r7}
 8102132:	b085      	sub	sp, #20
 8102134:	af00      	add	r7, sp, #0
 8102136:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810213c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	681b      	ldr	r3, [r3, #0]
 8102142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810214a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810214e:	68ba      	ldr	r2, [r7, #8]
 8102150:	0091      	lsls	r1, r2, #2
 8102152:	687a      	ldr	r2, [r7, #4]
 8102154:	6812      	ldr	r2, [r2, #0]
 8102156:	430b      	orrs	r3, r1
 8102158:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	681b      	ldr	r3, [r3, #0]
 8102160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102164:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810216c:	041a      	lsls	r2, r3, #16
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	430a      	orrs	r2, r1
 8102174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810217c:	68ba      	ldr	r2, [r7, #8]
 810217e:	4413      	add	r3, r2
 8102180:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810218a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810218e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102192:	68ba      	ldr	r2, [r7, #8]
 8102194:	0091      	lsls	r1, r2, #2
 8102196:	687a      	ldr	r2, [r7, #4]
 8102198:	6812      	ldr	r2, [r2, #0]
 810219a:	430b      	orrs	r3, r1
 810219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81021a8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81021b0:	041a      	lsls	r2, r3, #16
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	430a      	orrs	r2, r1
 81021b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81021c0:	005b      	lsls	r3, r3, #1
 81021c2:	68ba      	ldr	r2, [r7, #8]
 81021c4:	4413      	add	r3, r2
 81021c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81021d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81021d4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81021d8:	68ba      	ldr	r2, [r7, #8]
 81021da:	0091      	lsls	r1, r2, #2
 81021dc:	687a      	ldr	r2, [r7, #4]
 81021de:	6812      	ldr	r2, [r2, #0]
 81021e0:	430b      	orrs	r3, r1
 81021e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	681b      	ldr	r3, [r3, #0]
 81021ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81021ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81021f6:	041a      	lsls	r2, r3, #16
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	430a      	orrs	r2, r1
 81021fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102206:	687a      	ldr	r2, [r7, #4]
 8102208:	6c52      	ldr	r2, [r2, #68]	; 0x44
 810220a:	fb02 f303 	mul.w	r3, r2, r3
 810220e:	68ba      	ldr	r2, [r7, #8]
 8102210:	4413      	add	r3, r2
 8102212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810221c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102220:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102224:	68ba      	ldr	r2, [r7, #8]
 8102226:	0091      	lsls	r1, r2, #2
 8102228:	687a      	ldr	r2, [r7, #4]
 810222a:	6812      	ldr	r2, [r2, #0]
 810222c:	430b      	orrs	r3, r1
 810222e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810223a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102242:	041a      	lsls	r2, r3, #16
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	430a      	orrs	r2, r1
 810224a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102252:	687a      	ldr	r2, [r7, #4]
 8102254:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8102256:	fb02 f303 	mul.w	r3, r2, r3
 810225a:	68ba      	ldr	r2, [r7, #8]
 810225c:	4413      	add	r3, r2
 810225e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810226c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8102270:	68ba      	ldr	r2, [r7, #8]
 8102272:	0091      	lsls	r1, r2, #2
 8102274:	687a      	ldr	r2, [r7, #4]
 8102276:	6812      	ldr	r2, [r2, #0]
 8102278:	430b      	orrs	r3, r1
 810227a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102282:	687a      	ldr	r2, [r7, #4]
 8102284:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8102286:	fb02 f303 	mul.w	r3, r2, r3
 810228a:	68ba      	ldr	r2, [r7, #8]
 810228c:	4413      	add	r3, r2
 810228e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810229c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81022a0:	68ba      	ldr	r2, [r7, #8]
 81022a2:	0091      	lsls	r1, r2, #2
 81022a4:	687a      	ldr	r2, [r7, #4]
 81022a6:	6812      	ldr	r2, [r2, #0]
 81022a8:	430b      	orrs	r3, r1
 81022aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81022b6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022be:	041a      	lsls	r2, r3, #16
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	430a      	orrs	r2, r1
 81022c6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022ce:	005b      	lsls	r3, r3, #1
 81022d0:	68ba      	ldr	r2, [r7, #8]
 81022d2:	4413      	add	r3, r2
 81022d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81022de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81022e2:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81022e6:	68ba      	ldr	r2, [r7, #8]
 81022e8:	0091      	lsls	r1, r2, #2
 81022ea:	687a      	ldr	r2, [r7, #4]
 81022ec:	6812      	ldr	r2, [r2, #0]
 81022ee:	430b      	orrs	r3, r1
 81022f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81022fc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102304:	041a      	lsls	r2, r3, #16
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	430a      	orrs	r2, r1
 810230c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8102318:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 810231c:	687b      	ldr	r3, [r7, #4]
 810231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102320:	061a      	lsls	r2, r3, #24
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	430a      	orrs	r2, r1
 8102328:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102330:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8102334:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8102338:	009a      	lsls	r2, r3, #2
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102346:	009b      	lsls	r3, r3, #2
 8102348:	441a      	add	r2, r3
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102356:	00db      	lsls	r3, r3, #3
 8102358:	441a      	add	r2, r3
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102366:	6879      	ldr	r1, [r7, #4]
 8102368:	6c49      	ldr	r1, [r1, #68]	; 0x44
 810236a:	fb01 f303 	mul.w	r3, r1, r3
 810236e:	009b      	lsls	r3, r3, #2
 8102370:	441a      	add	r2, r3
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810237e:	6879      	ldr	r1, [r7, #4]
 8102380:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8102382:	fb01 f303 	mul.w	r3, r1, r3
 8102386:	009b      	lsls	r3, r3, #2
 8102388:	441a      	add	r2, r3
 810238a:	687b      	ldr	r3, [r7, #4]
 810238c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102396:	6879      	ldr	r1, [r7, #4]
 8102398:	6d49      	ldr	r1, [r1, #84]	; 0x54
 810239a:	fb01 f303 	mul.w	r3, r1, r3
 810239e:	009b      	lsls	r3, r3, #2
 81023a0:	441a      	add	r2, r3
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81023b2:	00db      	lsls	r3, r3, #3
 81023b4:	441a      	add	r2, r3
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81023c6:	6879      	ldr	r1, [r7, #4]
 81023c8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 81023ca:	fb01 f303 	mul.w	r3, r1, r3
 81023ce:	009b      	lsls	r3, r3, #2
 81023d0:	441a      	add	r2, r3
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81023e2:	6879      	ldr	r1, [r7, #4]
 81023e4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 81023e6:	fb01 f303 	mul.w	r3, r1, r3
 81023ea:	009b      	lsls	r3, r3, #2
 81023ec:	441a      	add	r2, r3
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81023fa:	4a14      	ldr	r2, [pc, #80]	; (810244c <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81023fc:	4293      	cmp	r3, r2
 81023fe:	d90d      	bls.n	810241c <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102406:	f043 0220 	orr.w	r2, r3, #32
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	2203      	movs	r2, #3
 8102414:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8102418:	2301      	movs	r3, #1
 810241a:	e010      	b.n	810243e <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102420:	60fb      	str	r3, [r7, #12]
 8102422:	e005      	b.n	8102430 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8102424:	68fb      	ldr	r3, [r7, #12]
 8102426:	2200      	movs	r2, #0
 8102428:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	3304      	adds	r3, #4
 810242e:	60fb      	str	r3, [r7, #12]
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102436:	68fa      	ldr	r2, [r7, #12]
 8102438:	429a      	cmp	r2, r3
 810243a:	d3f3      	bcc.n	8102424 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 810243c:	2300      	movs	r3, #0
}
 810243e:	4618      	mov	r0, r3
 8102440:	3714      	adds	r7, #20
 8102442:	46bd      	mov	sp, r7
 8102444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102448:	4770      	bx	lr
 810244a:	bf00      	nop
 810244c:	4000d3fc 	.word	0x4000d3fc

08102450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102450:	b480      	push	{r7}
 8102452:	b089      	sub	sp, #36	; 0x24
 8102454:	af00      	add	r7, sp, #0
 8102456:	6078      	str	r0, [r7, #4]
 8102458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810245a:	2300      	movs	r3, #0
 810245c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810245e:	4b89      	ldr	r3, [pc, #548]	; (8102684 <HAL_GPIO_Init+0x234>)
 8102460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102462:	e194      	b.n	810278e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102464:	683b      	ldr	r3, [r7, #0]
 8102466:	681a      	ldr	r2, [r3, #0]
 8102468:	2101      	movs	r1, #1
 810246a:	69fb      	ldr	r3, [r7, #28]
 810246c:	fa01 f303 	lsl.w	r3, r1, r3
 8102470:	4013      	ands	r3, r2
 8102472:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102474:	693b      	ldr	r3, [r7, #16]
 8102476:	2b00      	cmp	r3, #0
 8102478:	f000 8186 	beq.w	8102788 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810247c:	683b      	ldr	r3, [r7, #0]
 810247e:	685b      	ldr	r3, [r3, #4]
 8102480:	f003 0303 	and.w	r3, r3, #3
 8102484:	2b01      	cmp	r3, #1
 8102486:	d005      	beq.n	8102494 <HAL_GPIO_Init+0x44>
 8102488:	683b      	ldr	r3, [r7, #0]
 810248a:	685b      	ldr	r3, [r3, #4]
 810248c:	f003 0303 	and.w	r3, r3, #3
 8102490:	2b02      	cmp	r3, #2
 8102492:	d130      	bne.n	81024f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	689b      	ldr	r3, [r3, #8]
 8102498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810249a:	69fb      	ldr	r3, [r7, #28]
 810249c:	005b      	lsls	r3, r3, #1
 810249e:	2203      	movs	r2, #3
 81024a0:	fa02 f303 	lsl.w	r3, r2, r3
 81024a4:	43db      	mvns	r3, r3
 81024a6:	69ba      	ldr	r2, [r7, #24]
 81024a8:	4013      	ands	r3, r2
 81024aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81024ac:	683b      	ldr	r3, [r7, #0]
 81024ae:	68da      	ldr	r2, [r3, #12]
 81024b0:	69fb      	ldr	r3, [r7, #28]
 81024b2:	005b      	lsls	r3, r3, #1
 81024b4:	fa02 f303 	lsl.w	r3, r2, r3
 81024b8:	69ba      	ldr	r2, [r7, #24]
 81024ba:	4313      	orrs	r3, r2
 81024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	69ba      	ldr	r2, [r7, #24]
 81024c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	685b      	ldr	r3, [r3, #4]
 81024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81024ca:	2201      	movs	r2, #1
 81024cc:	69fb      	ldr	r3, [r7, #28]
 81024ce:	fa02 f303 	lsl.w	r3, r2, r3
 81024d2:	43db      	mvns	r3, r3
 81024d4:	69ba      	ldr	r2, [r7, #24]
 81024d6:	4013      	ands	r3, r2
 81024d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81024da:	683b      	ldr	r3, [r7, #0]
 81024dc:	685b      	ldr	r3, [r3, #4]
 81024de:	091b      	lsrs	r3, r3, #4
 81024e0:	f003 0201 	and.w	r2, r3, #1
 81024e4:	69fb      	ldr	r3, [r7, #28]
 81024e6:	fa02 f303 	lsl.w	r3, r2, r3
 81024ea:	69ba      	ldr	r2, [r7, #24]
 81024ec:	4313      	orrs	r3, r2
 81024ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	69ba      	ldr	r2, [r7, #24]
 81024f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81024f6:	683b      	ldr	r3, [r7, #0]
 81024f8:	685b      	ldr	r3, [r3, #4]
 81024fa:	f003 0303 	and.w	r3, r3, #3
 81024fe:	2b03      	cmp	r3, #3
 8102500:	d017      	beq.n	8102532 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	68db      	ldr	r3, [r3, #12]
 8102506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102508:	69fb      	ldr	r3, [r7, #28]
 810250a:	005b      	lsls	r3, r3, #1
 810250c:	2203      	movs	r2, #3
 810250e:	fa02 f303 	lsl.w	r3, r2, r3
 8102512:	43db      	mvns	r3, r3
 8102514:	69ba      	ldr	r2, [r7, #24]
 8102516:	4013      	ands	r3, r2
 8102518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810251a:	683b      	ldr	r3, [r7, #0]
 810251c:	689a      	ldr	r2, [r3, #8]
 810251e:	69fb      	ldr	r3, [r7, #28]
 8102520:	005b      	lsls	r3, r3, #1
 8102522:	fa02 f303 	lsl.w	r3, r2, r3
 8102526:	69ba      	ldr	r2, [r7, #24]
 8102528:	4313      	orrs	r3, r2
 810252a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	69ba      	ldr	r2, [r7, #24]
 8102530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102532:	683b      	ldr	r3, [r7, #0]
 8102534:	685b      	ldr	r3, [r3, #4]
 8102536:	f003 0303 	and.w	r3, r3, #3
 810253a:	2b02      	cmp	r3, #2
 810253c:	d123      	bne.n	8102586 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810253e:	69fb      	ldr	r3, [r7, #28]
 8102540:	08da      	lsrs	r2, r3, #3
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	3208      	adds	r2, #8
 8102546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810254c:	69fb      	ldr	r3, [r7, #28]
 810254e:	f003 0307 	and.w	r3, r3, #7
 8102552:	009b      	lsls	r3, r3, #2
 8102554:	220f      	movs	r2, #15
 8102556:	fa02 f303 	lsl.w	r3, r2, r3
 810255a:	43db      	mvns	r3, r3
 810255c:	69ba      	ldr	r2, [r7, #24]
 810255e:	4013      	ands	r3, r2
 8102560:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102562:	683b      	ldr	r3, [r7, #0]
 8102564:	691a      	ldr	r2, [r3, #16]
 8102566:	69fb      	ldr	r3, [r7, #28]
 8102568:	f003 0307 	and.w	r3, r3, #7
 810256c:	009b      	lsls	r3, r3, #2
 810256e:	fa02 f303 	lsl.w	r3, r2, r3
 8102572:	69ba      	ldr	r2, [r7, #24]
 8102574:	4313      	orrs	r3, r2
 8102576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102578:	69fb      	ldr	r3, [r7, #28]
 810257a:	08da      	lsrs	r2, r3, #3
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	3208      	adds	r2, #8
 8102580:	69b9      	ldr	r1, [r7, #24]
 8102582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810258c:	69fb      	ldr	r3, [r7, #28]
 810258e:	005b      	lsls	r3, r3, #1
 8102590:	2203      	movs	r2, #3
 8102592:	fa02 f303 	lsl.w	r3, r2, r3
 8102596:	43db      	mvns	r3, r3
 8102598:	69ba      	ldr	r2, [r7, #24]
 810259a:	4013      	ands	r3, r2
 810259c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810259e:	683b      	ldr	r3, [r7, #0]
 81025a0:	685b      	ldr	r3, [r3, #4]
 81025a2:	f003 0203 	and.w	r2, r3, #3
 81025a6:	69fb      	ldr	r3, [r7, #28]
 81025a8:	005b      	lsls	r3, r3, #1
 81025aa:	fa02 f303 	lsl.w	r3, r2, r3
 81025ae:	69ba      	ldr	r2, [r7, #24]
 81025b0:	4313      	orrs	r3, r2
 81025b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	69ba      	ldr	r2, [r7, #24]
 81025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81025ba:	683b      	ldr	r3, [r7, #0]
 81025bc:	685b      	ldr	r3, [r3, #4]
 81025be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81025c2:	2b00      	cmp	r3, #0
 81025c4:	f000 80e0 	beq.w	8102788 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81025c8:	4b2f      	ldr	r3, [pc, #188]	; (8102688 <HAL_GPIO_Init+0x238>)
 81025ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81025ce:	4a2e      	ldr	r2, [pc, #184]	; (8102688 <HAL_GPIO_Init+0x238>)
 81025d0:	f043 0302 	orr.w	r3, r3, #2
 81025d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81025d8:	4b2b      	ldr	r3, [pc, #172]	; (8102688 <HAL_GPIO_Init+0x238>)
 81025da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81025de:	f003 0302 	and.w	r3, r3, #2
 81025e2:	60fb      	str	r3, [r7, #12]
 81025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81025e6:	4a29      	ldr	r2, [pc, #164]	; (810268c <HAL_GPIO_Init+0x23c>)
 81025e8:	69fb      	ldr	r3, [r7, #28]
 81025ea:	089b      	lsrs	r3, r3, #2
 81025ec:	3302      	adds	r3, #2
 81025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81025f4:	69fb      	ldr	r3, [r7, #28]
 81025f6:	f003 0303 	and.w	r3, r3, #3
 81025fa:	009b      	lsls	r3, r3, #2
 81025fc:	220f      	movs	r2, #15
 81025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102602:	43db      	mvns	r3, r3
 8102604:	69ba      	ldr	r2, [r7, #24]
 8102606:	4013      	ands	r3, r2
 8102608:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	4a20      	ldr	r2, [pc, #128]	; (8102690 <HAL_GPIO_Init+0x240>)
 810260e:	4293      	cmp	r3, r2
 8102610:	d052      	beq.n	81026b8 <HAL_GPIO_Init+0x268>
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	4a1f      	ldr	r2, [pc, #124]	; (8102694 <HAL_GPIO_Init+0x244>)
 8102616:	4293      	cmp	r3, r2
 8102618:	d031      	beq.n	810267e <HAL_GPIO_Init+0x22e>
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	4a1e      	ldr	r2, [pc, #120]	; (8102698 <HAL_GPIO_Init+0x248>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d02b      	beq.n	810267a <HAL_GPIO_Init+0x22a>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	4a1d      	ldr	r2, [pc, #116]	; (810269c <HAL_GPIO_Init+0x24c>)
 8102626:	4293      	cmp	r3, r2
 8102628:	d025      	beq.n	8102676 <HAL_GPIO_Init+0x226>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	4a1c      	ldr	r2, [pc, #112]	; (81026a0 <HAL_GPIO_Init+0x250>)
 810262e:	4293      	cmp	r3, r2
 8102630:	d01f      	beq.n	8102672 <HAL_GPIO_Init+0x222>
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	4a1b      	ldr	r2, [pc, #108]	; (81026a4 <HAL_GPIO_Init+0x254>)
 8102636:	4293      	cmp	r3, r2
 8102638:	d019      	beq.n	810266e <HAL_GPIO_Init+0x21e>
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	4a1a      	ldr	r2, [pc, #104]	; (81026a8 <HAL_GPIO_Init+0x258>)
 810263e:	4293      	cmp	r3, r2
 8102640:	d013      	beq.n	810266a <HAL_GPIO_Init+0x21a>
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	4a19      	ldr	r2, [pc, #100]	; (81026ac <HAL_GPIO_Init+0x25c>)
 8102646:	4293      	cmp	r3, r2
 8102648:	d00d      	beq.n	8102666 <HAL_GPIO_Init+0x216>
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	4a18      	ldr	r2, [pc, #96]	; (81026b0 <HAL_GPIO_Init+0x260>)
 810264e:	4293      	cmp	r3, r2
 8102650:	d007      	beq.n	8102662 <HAL_GPIO_Init+0x212>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	4a17      	ldr	r2, [pc, #92]	; (81026b4 <HAL_GPIO_Init+0x264>)
 8102656:	4293      	cmp	r3, r2
 8102658:	d101      	bne.n	810265e <HAL_GPIO_Init+0x20e>
 810265a:	2309      	movs	r3, #9
 810265c:	e02d      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 810265e:	230a      	movs	r3, #10
 8102660:	e02b      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 8102662:	2308      	movs	r3, #8
 8102664:	e029      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 8102666:	2307      	movs	r3, #7
 8102668:	e027      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 810266a:	2306      	movs	r3, #6
 810266c:	e025      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 810266e:	2305      	movs	r3, #5
 8102670:	e023      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 8102672:	2304      	movs	r3, #4
 8102674:	e021      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 8102676:	2303      	movs	r3, #3
 8102678:	e01f      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 810267a:	2302      	movs	r3, #2
 810267c:	e01d      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 810267e:	2301      	movs	r3, #1
 8102680:	e01b      	b.n	81026ba <HAL_GPIO_Init+0x26a>
 8102682:	bf00      	nop
 8102684:	580000c0 	.word	0x580000c0
 8102688:	58024400 	.word	0x58024400
 810268c:	58000400 	.word	0x58000400
 8102690:	58020000 	.word	0x58020000
 8102694:	58020400 	.word	0x58020400
 8102698:	58020800 	.word	0x58020800
 810269c:	58020c00 	.word	0x58020c00
 81026a0:	58021000 	.word	0x58021000
 81026a4:	58021400 	.word	0x58021400
 81026a8:	58021800 	.word	0x58021800
 81026ac:	58021c00 	.word	0x58021c00
 81026b0:	58022000 	.word	0x58022000
 81026b4:	58022400 	.word	0x58022400
 81026b8:	2300      	movs	r3, #0
 81026ba:	69fa      	ldr	r2, [r7, #28]
 81026bc:	f002 0203 	and.w	r2, r2, #3
 81026c0:	0092      	lsls	r2, r2, #2
 81026c2:	4093      	lsls	r3, r2
 81026c4:	69ba      	ldr	r2, [r7, #24]
 81026c6:	4313      	orrs	r3, r2
 81026c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81026ca:	4938      	ldr	r1, [pc, #224]	; (81027ac <HAL_GPIO_Init+0x35c>)
 81026cc:	69fb      	ldr	r3, [r7, #28]
 81026ce:	089b      	lsrs	r3, r3, #2
 81026d0:	3302      	adds	r3, #2
 81026d2:	69ba      	ldr	r2, [r7, #24]
 81026d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026e0:	693b      	ldr	r3, [r7, #16]
 81026e2:	43db      	mvns	r3, r3
 81026e4:	69ba      	ldr	r2, [r7, #24]
 81026e6:	4013      	ands	r3, r2
 81026e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81026ea:	683b      	ldr	r3, [r7, #0]
 81026ec:	685b      	ldr	r3, [r3, #4]
 81026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81026f2:	2b00      	cmp	r3, #0
 81026f4:	d003      	beq.n	81026fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81026f6:	69ba      	ldr	r2, [r7, #24]
 81026f8:	693b      	ldr	r3, [r7, #16]
 81026fa:	4313      	orrs	r3, r2
 81026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81026fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102702:	69bb      	ldr	r3, [r7, #24]
 8102704:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810270a:	685b      	ldr	r3, [r3, #4]
 810270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810270e:	693b      	ldr	r3, [r7, #16]
 8102710:	43db      	mvns	r3, r3
 8102712:	69ba      	ldr	r2, [r7, #24]
 8102714:	4013      	ands	r3, r2
 8102716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102718:	683b      	ldr	r3, [r7, #0]
 810271a:	685b      	ldr	r3, [r3, #4]
 810271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102720:	2b00      	cmp	r3, #0
 8102722:	d003      	beq.n	810272c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102724:	69ba      	ldr	r2, [r7, #24]
 8102726:	693b      	ldr	r3, [r7, #16]
 8102728:	4313      	orrs	r3, r2
 810272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810272c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102730:	69bb      	ldr	r3, [r7, #24]
 8102732:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102734:	697b      	ldr	r3, [r7, #20]
 8102736:	685b      	ldr	r3, [r3, #4]
 8102738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810273a:	693b      	ldr	r3, [r7, #16]
 810273c:	43db      	mvns	r3, r3
 810273e:	69ba      	ldr	r2, [r7, #24]
 8102740:	4013      	ands	r3, r2
 8102742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102744:	683b      	ldr	r3, [r7, #0]
 8102746:	685b      	ldr	r3, [r3, #4]
 8102748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810274c:	2b00      	cmp	r3, #0
 810274e:	d003      	beq.n	8102758 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102750:	69ba      	ldr	r2, [r7, #24]
 8102752:	693b      	ldr	r3, [r7, #16]
 8102754:	4313      	orrs	r3, r2
 8102756:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102758:	697b      	ldr	r3, [r7, #20]
 810275a:	69ba      	ldr	r2, [r7, #24]
 810275c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810275e:	697b      	ldr	r3, [r7, #20]
 8102760:	681b      	ldr	r3, [r3, #0]
 8102762:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102764:	693b      	ldr	r3, [r7, #16]
 8102766:	43db      	mvns	r3, r3
 8102768:	69ba      	ldr	r2, [r7, #24]
 810276a:	4013      	ands	r3, r2
 810276c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810276e:	683b      	ldr	r3, [r7, #0]
 8102770:	685b      	ldr	r3, [r3, #4]
 8102772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102776:	2b00      	cmp	r3, #0
 8102778:	d003      	beq.n	8102782 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810277a:	69ba      	ldr	r2, [r7, #24]
 810277c:	693b      	ldr	r3, [r7, #16]
 810277e:	4313      	orrs	r3, r2
 8102780:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102782:	697b      	ldr	r3, [r7, #20]
 8102784:	69ba      	ldr	r2, [r7, #24]
 8102786:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102788:	69fb      	ldr	r3, [r7, #28]
 810278a:	3301      	adds	r3, #1
 810278c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810278e:	683b      	ldr	r3, [r7, #0]
 8102790:	681a      	ldr	r2, [r3, #0]
 8102792:	69fb      	ldr	r3, [r7, #28]
 8102794:	fa22 f303 	lsr.w	r3, r2, r3
 8102798:	2b00      	cmp	r3, #0
 810279a:	f47f ae63 	bne.w	8102464 <HAL_GPIO_Init+0x14>
  }
}
 810279e:	bf00      	nop
 81027a0:	bf00      	nop
 81027a2:	3724      	adds	r7, #36	; 0x24
 81027a4:	46bd      	mov	sp, r7
 81027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027aa:	4770      	bx	lr
 81027ac:	58000400 	.word	0x58000400

081027b0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81027b0:	b480      	push	{r7}
 81027b2:	b083      	sub	sp, #12
 81027b4:	af00      	add	r7, sp, #0
 81027b6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81027b8:	4b05      	ldr	r3, [pc, #20]	; (81027d0 <HAL_HSEM_ActivateNotification+0x20>)
 81027ba:	681a      	ldr	r2, [r3, #0]
 81027bc:	4904      	ldr	r1, [pc, #16]	; (81027d0 <HAL_HSEM_ActivateNotification+0x20>)
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	4313      	orrs	r3, r2
 81027c2:	600b      	str	r3, [r1, #0]
#endif
}
 81027c4:	bf00      	nop
 81027c6:	370c      	adds	r7, #12
 81027c8:	46bd      	mov	sp, r7
 81027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ce:	4770      	bx	lr
 81027d0:	58026510 	.word	0x58026510

081027d4 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 81027d4:	b580      	push	{r7, lr}
 81027d6:	b082      	sub	sp, #8
 81027d8:	af00      	add	r7, sp, #0
 81027da:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	2b00      	cmp	r3, #0
 81027e0:	d101      	bne.n	81027e6 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 81027e2:	2301      	movs	r3, #1
 81027e4:	e031      	b.n	810284a <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81027ec:	b2db      	uxtb	r3, r3
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d105      	bne.n	81027fe <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	2200      	movs	r2, #0
 81027f6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 81027f8:	6878      	ldr	r0, [r7, #4]
 81027fa:	f7fe fa1b 	bl	8100c34 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	2203      	movs	r2, #3
 8102802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8102806:	6878      	ldr	r0, [r7, #4]
 8102808:	f000 f824 	bl	8102854 <HAL_MMC_InitCard>
 810280c:	4603      	mov	r3, r0
 810280e:	2b01      	cmp	r3, #1
 8102810:	d101      	bne.n	8102816 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8102812:	2301      	movs	r3, #1
 8102814:	e019      	b.n	810284a <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	2200      	movs	r2, #0
 810281a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	2200      	movs	r2, #0
 8102820:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	2201      	movs	r2, #1
 8102826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	68db      	ldr	r3, [r3, #12]
 810282e:	2b00      	cmp	r3, #0
 8102830:	d00a      	beq.n	8102848 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	68db      	ldr	r3, [r3, #12]
 8102836:	4619      	mov	r1, r3
 8102838:	6878      	ldr	r0, [r7, #4]
 810283a:	f000 fb47 	bl	8102ecc <HAL_MMC_ConfigWideBusOperation>
 810283e:	4603      	mov	r3, r0
 8102840:	2b00      	cmp	r3, #0
 8102842:	d001      	beq.n	8102848 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8102844:	2301      	movs	r3, #1
 8102846:	e000      	b.n	810284a <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8102848:	2300      	movs	r3, #0
}
 810284a:	4618      	mov	r0, r3
 810284c:	3708      	adds	r7, #8
 810284e:	46bd      	mov	sp, r7
 8102850:	bd80      	pop	{r7, pc}
	...

08102854 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8102854:	b590      	push	{r4, r7, lr}
 8102856:	b08d      	sub	sp, #52	; 0x34
 8102858:	af02      	add	r7, sp, #8
 810285a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810285c:	2300      	movs	r3, #0
 810285e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8102860:	2300      	movs	r3, #0
 8102862:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8102864:	2300      	movs	r3, #0
 8102866:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8102868:	2300      	movs	r3, #0
 810286a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810286c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8102870:	f04f 0100 	mov.w	r1, #0
 8102874:	f002 fb2c 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8102878:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810287c:	2b00      	cmp	r3, #0
 810287e:	d109      	bne.n	8102894 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	2201      	movs	r2, #1
 8102884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810288e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8102890:	2301      	movs	r3, #1
 8102892:	e070      	b.n	8102976 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8102894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102896:	0a1b      	lsrs	r3, r3, #8
 8102898:	4a39      	ldr	r2, [pc, #228]	; (8102980 <HAL_MMC_InitCard+0x12c>)
 810289a:	fba2 2303 	umull	r2, r3, r2, r3
 810289e:	091b      	lsrs	r3, r3, #4
 81028a0:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 81028a2:	687b      	ldr	r3, [r7, #4]
 81028a4:	681c      	ldr	r4, [r3, #0]
 81028a6:	466a      	mov	r2, sp
 81028a8:	f107 0318 	add.w	r3, r7, #24
 81028ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 81028b0:	e882 0003 	stmia.w	r2, {r0, r1}
 81028b4:	f107 030c 	add.w	r3, r7, #12
 81028b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 81028ba:	4620      	mov	r0, r4
 81028bc:	f004 f9e2 	bl	8106c84 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4618      	mov	r0, r3
 81028c6:	f004 fa14 	bl	8106cf2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 81028ca:	69fb      	ldr	r3, [r7, #28]
 81028cc:	2b00      	cmp	r3, #0
 81028ce:	d005      	beq.n	81028dc <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81028d0:	69fb      	ldr	r3, [r7, #28]
 81028d2:	005b      	lsls	r3, r3, #1
 81028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81028da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 81028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d007      	beq.n	81028f2 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81028e2:	4a28      	ldr	r2, [pc, #160]	; (8102984 <HAL_MMC_InitCard+0x130>)
 81028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81028ea:	3301      	adds	r3, #1
 81028ec:	4618      	mov	r0, r3
 81028ee:	f7fe fce1 	bl	81012b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 81028f2:	6878      	ldr	r0, [r7, #4]
 81028f4:	f000 fcb4 	bl	8103260 <MMC_PowerON>
 81028f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81028fa:	6a3b      	ldr	r3, [r7, #32]
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d00b      	beq.n	8102918 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	2201      	movs	r2, #1
 8102904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810290c:	6a3b      	ldr	r3, [r7, #32]
 810290e:	431a      	orrs	r2, r3
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8102914:	2301      	movs	r3, #1
 8102916:	e02e      	b.n	8102976 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8102918:	6878      	ldr	r0, [r7, #4]
 810291a:	f000 fba3 	bl	8103064 <MMC_InitCard>
 810291e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8102920:	6a3b      	ldr	r3, [r7, #32]
 8102922:	2b00      	cmp	r3, #0
 8102924:	d00b      	beq.n	810293e <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	2201      	movs	r2, #1
 810292a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 810292e:	687b      	ldr	r3, [r7, #4]
 8102930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102932:	6a3b      	ldr	r3, [r7, #32]
 8102934:	431a      	orrs	r2, r3
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810293a:	2301      	movs	r3, #1
 810293c:	e01b      	b.n	8102976 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8102946:	4618      	mov	r0, r3
 8102948:	f004 fa68 	bl	8106e1c <SDMMC_CmdBlockLength>
 810294c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 810294e:	6a3b      	ldr	r3, [r7, #32]
 8102950:	2b00      	cmp	r3, #0
 8102952:	d00f      	beq.n	8102974 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	4a0b      	ldr	r2, [pc, #44]	; (8102988 <HAL_MMC_InitCard+0x134>)
 810295a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102960:	6a3b      	ldr	r3, [r7, #32]
 8102962:	431a      	orrs	r2, r3
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	2201      	movs	r2, #1
 810296c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8102970:	2301      	movs	r3, #1
 8102972:	e000      	b.n	8102976 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8102974:	2300      	movs	r3, #0
}
 8102976:	4618      	mov	r0, r3
 8102978:	372c      	adds	r7, #44	; 0x2c
 810297a:	46bd      	mov	sp, r7
 810297c:	bd90      	pop	{r4, r7, pc}
 810297e:	bf00      	nop
 8102980:	014f8b59 	.word	0x014f8b59
 8102984:	00012110 	.word	0x00012110
 8102988:	1fe00fff 	.word	0x1fe00fff

0810298c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 810298c:	b580      	push	{r7, lr}
 810298e:	b084      	sub	sp, #16
 8102990:	af00      	add	r7, sp, #0
 8102992:	6078      	str	r0, [r7, #4]
 8102994:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8102996:	2300      	movs	r3, #0
 8102998:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810299e:	0f9b      	lsrs	r3, r3, #30
 81029a0:	b2da      	uxtb	r2, r3
 81029a2:	683b      	ldr	r3, [r7, #0]
 81029a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029aa:	0e9b      	lsrs	r3, r3, #26
 81029ac:	b2db      	uxtb	r3, r3
 81029ae:	f003 030f 	and.w	r3, r3, #15
 81029b2:	b2da      	uxtb	r2, r3
 81029b4:	683b      	ldr	r3, [r7, #0]
 81029b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029bc:	0e1b      	lsrs	r3, r3, #24
 81029be:	b2db      	uxtb	r3, r3
 81029c0:	f003 0303 	and.w	r3, r3, #3
 81029c4:	b2da      	uxtb	r2, r3
 81029c6:	683b      	ldr	r3, [r7, #0]
 81029c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029ce:	0c1b      	lsrs	r3, r3, #16
 81029d0:	b2da      	uxtb	r2, r3
 81029d2:	683b      	ldr	r3, [r7, #0]
 81029d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 81029d6:	687b      	ldr	r3, [r7, #4]
 81029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029da:	0a1b      	lsrs	r3, r3, #8
 81029dc:	b2da      	uxtb	r2, r3
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029e6:	b2da      	uxtb	r2, r3
 81029e8:	683b      	ldr	r3, [r7, #0]
 81029ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029f0:	0d1b      	lsrs	r3, r3, #20
 81029f2:	b29a      	uxth	r2, r3
 81029f4:	683b      	ldr	r3, [r7, #0]
 81029f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81029fc:	0c1b      	lsrs	r3, r3, #16
 81029fe:	b2db      	uxtb	r3, r3
 8102a00:	f003 030f 	and.w	r3, r3, #15
 8102a04:	b2da      	uxtb	r2, r3
 8102a06:	683b      	ldr	r3, [r7, #0]
 8102a08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a0e:	0bdb      	lsrs	r3, r3, #15
 8102a10:	b2db      	uxtb	r3, r3
 8102a12:	f003 0301 	and.w	r3, r3, #1
 8102a16:	b2da      	uxtb	r2, r3
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a20:	0b9b      	lsrs	r3, r3, #14
 8102a22:	b2db      	uxtb	r3, r3
 8102a24:	f003 0301 	and.w	r3, r3, #1
 8102a28:	b2da      	uxtb	r2, r3
 8102a2a:	683b      	ldr	r3, [r7, #0]
 8102a2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8102a2e:	687b      	ldr	r3, [r7, #4]
 8102a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a32:	0b5b      	lsrs	r3, r3, #13
 8102a34:	b2db      	uxtb	r3, r3
 8102a36:	f003 0301 	and.w	r3, r3, #1
 8102a3a:	b2da      	uxtb	r2, r3
 8102a3c:	683b      	ldr	r3, [r7, #0]
 8102a3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a44:	0b1b      	lsrs	r3, r3, #12
 8102a46:	b2db      	uxtb	r3, r3
 8102a48:	f003 0301 	and.w	r3, r3, #1
 8102a4c:	b2da      	uxtb	r2, r3
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8102a52:	683b      	ldr	r3, [r7, #0]
 8102a54:	2200      	movs	r2, #0
 8102a56:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8102a58:	f107 010c 	add.w	r1, r7, #12
 8102a5c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8102a60:	22d4      	movs	r2, #212	; 0xd4
 8102a62:	6878      	ldr	r0, [r7, #4]
 8102a64:	f000 fc4c 	bl	8103300 <MMC_ReadExtCSD>
 8102a68:	4603      	mov	r3, r0
 8102a6a:	2b00      	cmp	r3, #0
 8102a6c:	d001      	beq.n	8102a72 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8102a6e:	2301      	movs	r3, #1
 8102a70:	e129      	b.n	8102cc6 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102a76:	2b00      	cmp	r3, #0
 8102a78:	d163      	bne.n	8102b42 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a7e:	009a      	lsls	r2, r3, #2
 8102a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8102a84:	4013      	ands	r3, r2
 8102a86:	687a      	ldr	r2, [r7, #4]
 8102a88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8102a8a:	0f92      	lsrs	r2, r2, #30
 8102a8c:	431a      	orrs	r2, r3
 8102a8e:	683b      	ldr	r3, [r7, #0]
 8102a90:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a96:	0edb      	lsrs	r3, r3, #27
 8102a98:	b2db      	uxtb	r3, r3
 8102a9a:	f003 0307 	and.w	r3, r3, #7
 8102a9e:	b2da      	uxtb	r2, r3
 8102aa0:	683b      	ldr	r3, [r7, #0]
 8102aa2:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aa8:	0e1b      	lsrs	r3, r3, #24
 8102aaa:	b2db      	uxtb	r3, r3
 8102aac:	f003 0307 	and.w	r3, r3, #7
 8102ab0:	b2da      	uxtb	r2, r3
 8102ab2:	683b      	ldr	r3, [r7, #0]
 8102ab4:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102aba:	0d5b      	lsrs	r3, r3, #21
 8102abc:	b2db      	uxtb	r3, r3
 8102abe:	f003 0307 	and.w	r3, r3, #7
 8102ac2:	b2da      	uxtb	r2, r3
 8102ac4:	683b      	ldr	r3, [r7, #0]
 8102ac6:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102acc:	0c9b      	lsrs	r3, r3, #18
 8102ace:	b2db      	uxtb	r3, r3
 8102ad0:	f003 0307 	and.w	r3, r3, #7
 8102ad4:	b2da      	uxtb	r2, r3
 8102ad6:	683b      	ldr	r3, [r7, #0]
 8102ad8:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ade:	0bdb      	lsrs	r3, r3, #15
 8102ae0:	b2db      	uxtb	r3, r3
 8102ae2:	f003 0307 	and.w	r3, r3, #7
 8102ae6:	b2da      	uxtb	r2, r3
 8102ae8:	683b      	ldr	r3, [r7, #0]
 8102aea:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8102aec:	683b      	ldr	r3, [r7, #0]
 8102aee:	691b      	ldr	r3, [r3, #16]
 8102af0:	1c5a      	adds	r2, r3, #1
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8102af6:	683b      	ldr	r3, [r7, #0]
 8102af8:	7e1b      	ldrb	r3, [r3, #24]
 8102afa:	b2db      	uxtb	r3, r3
 8102afc:	f003 0307 	and.w	r3, r3, #7
 8102b00:	3302      	adds	r3, #2
 8102b02:	2201      	movs	r2, #1
 8102b04:	fa02 f303 	lsl.w	r3, r2, r3
 8102b08:	687a      	ldr	r2, [r7, #4]
 8102b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102b0c:	fb03 f202 	mul.w	r2, r3, r2
 8102b10:	687b      	ldr	r3, [r7, #4]
 8102b12:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8102b14:	683b      	ldr	r3, [r7, #0]
 8102b16:	7a1b      	ldrb	r3, [r3, #8]
 8102b18:	b2db      	uxtb	r3, r3
 8102b1a:	f003 030f 	and.w	r3, r3, #15
 8102b1e:	2201      	movs	r2, #1
 8102b20:	409a      	lsls	r2, r3
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b2a:	687a      	ldr	r2, [r7, #4]
 8102b2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8102b2e:	0a52      	lsrs	r2, r2, #9
 8102b30:	fb03 f202 	mul.w	r2, r3, r2
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8102b38:	687b      	ldr	r3, [r7, #4]
 8102b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102b3e:	651a      	str	r2, [r3, #80]	; 0x50
 8102b40:	e023      	b.n	8102b8a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8102b42:	687b      	ldr	r3, [r7, #4]
 8102b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102b46:	2b01      	cmp	r3, #1
 8102b48:	d10f      	bne.n	8102b6a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8102b4a:	68fa      	ldr	r2, [r7, #12]
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102b5e:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	651a      	str	r2, [r3, #80]	; 0x50
 8102b68:	e00f      	b.n	8102b8a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a58      	ldr	r2, [pc, #352]	; (8102cd0 <HAL_MMC_GetCardCSD+0x344>)
 8102b70:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102b76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	2201      	movs	r2, #1
 8102b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8102b86:	2301      	movs	r3, #1
 8102b88:	e09d      	b.n	8102cc6 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b8e:	0b9b      	lsrs	r3, r3, #14
 8102b90:	b2db      	uxtb	r3, r3
 8102b92:	f003 0301 	and.w	r3, r3, #1
 8102b96:	b2da      	uxtb	r2, r3
 8102b98:	683b      	ldr	r3, [r7, #0]
 8102b9a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102ba0:	09db      	lsrs	r3, r3, #7
 8102ba2:	b2db      	uxtb	r3, r3
 8102ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102ba8:	b2da      	uxtb	r2, r3
 8102baa:	683b      	ldr	r3, [r7, #0]
 8102bac:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102bb2:	b2db      	uxtb	r3, r3
 8102bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102bb8:	b2da      	uxtb	r2, r3
 8102bba:	683b      	ldr	r3, [r7, #0]
 8102bbc:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bc2:	0fdb      	lsrs	r3, r3, #31
 8102bc4:	b2da      	uxtb	r2, r3
 8102bc6:	683b      	ldr	r3, [r7, #0]
 8102bc8:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bce:	0f5b      	lsrs	r3, r3, #29
 8102bd0:	b2db      	uxtb	r3, r3
 8102bd2:	f003 0303 	and.w	r3, r3, #3
 8102bd6:	b2da      	uxtb	r2, r3
 8102bd8:	683b      	ldr	r3, [r7, #0]
 8102bda:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102be0:	0e9b      	lsrs	r3, r3, #26
 8102be2:	b2db      	uxtb	r3, r3
 8102be4:	f003 0307 	and.w	r3, r3, #7
 8102be8:	b2da      	uxtb	r2, r3
 8102bea:	683b      	ldr	r3, [r7, #0]
 8102bec:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bf2:	0d9b      	lsrs	r3, r3, #22
 8102bf4:	b2db      	uxtb	r3, r3
 8102bf6:	f003 030f 	and.w	r3, r3, #15
 8102bfa:	b2da      	uxtb	r2, r3
 8102bfc:	683b      	ldr	r3, [r7, #0]
 8102bfe:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c04:	0d5b      	lsrs	r3, r3, #21
 8102c06:	b2db      	uxtb	r3, r3
 8102c08:	f003 0301 	and.w	r3, r3, #1
 8102c0c:	b2da      	uxtb	r2, r3
 8102c0e:	683b      	ldr	r3, [r7, #0]
 8102c10:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	2200      	movs	r2, #0
 8102c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c20:	0c1b      	lsrs	r3, r3, #16
 8102c22:	b2db      	uxtb	r3, r3
 8102c24:	f003 0301 	and.w	r3, r3, #1
 8102c28:	b2da      	uxtb	r2, r3
 8102c2a:	683b      	ldr	r3, [r7, #0]
 8102c2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c34:	0bdb      	lsrs	r3, r3, #15
 8102c36:	b2db      	uxtb	r3, r3
 8102c38:	f003 0301 	and.w	r3, r3, #1
 8102c3c:	b2da      	uxtb	r2, r3
 8102c3e:	683b      	ldr	r3, [r7, #0]
 8102c40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c48:	0b9b      	lsrs	r3, r3, #14
 8102c4a:	b2db      	uxtb	r3, r3
 8102c4c:	f003 0301 	and.w	r3, r3, #1
 8102c50:	b2da      	uxtb	r2, r3
 8102c52:	683b      	ldr	r3, [r7, #0]
 8102c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8102c58:	687b      	ldr	r3, [r7, #4]
 8102c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c5c:	0b5b      	lsrs	r3, r3, #13
 8102c5e:	b2db      	uxtb	r3, r3
 8102c60:	f003 0301 	and.w	r3, r3, #1
 8102c64:	b2da      	uxtb	r2, r3
 8102c66:	683b      	ldr	r3, [r7, #0]
 8102c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c70:	0b1b      	lsrs	r3, r3, #12
 8102c72:	b2db      	uxtb	r3, r3
 8102c74:	f003 0301 	and.w	r3, r3, #1
 8102c78:	b2da      	uxtb	r2, r3
 8102c7a:	683b      	ldr	r3, [r7, #0]
 8102c7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8102c80:	687b      	ldr	r3, [r7, #4]
 8102c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c84:	0a9b      	lsrs	r3, r3, #10
 8102c86:	b2db      	uxtb	r3, r3
 8102c88:	f003 0303 	and.w	r3, r3, #3
 8102c8c:	b2da      	uxtb	r2, r3
 8102c8e:	683b      	ldr	r3, [r7, #0]
 8102c90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102c98:	0a1b      	lsrs	r3, r3, #8
 8102c9a:	b2db      	uxtb	r3, r3
 8102c9c:	f003 0303 	and.w	r3, r3, #3
 8102ca0:	b2da      	uxtb	r2, r3
 8102ca2:	683b      	ldr	r3, [r7, #0]
 8102ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102cac:	085b      	lsrs	r3, r3, #1
 8102cae:	b2db      	uxtb	r3, r3
 8102cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102cb4:	b2da      	uxtb	r2, r3
 8102cb6:	683b      	ldr	r3, [r7, #0]
 8102cb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8102cbc:	683b      	ldr	r3, [r7, #0]
 8102cbe:	2201      	movs	r2, #1
 8102cc0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8102cc4:	2300      	movs	r3, #0
}
 8102cc6:	4618      	mov	r0, r3
 8102cc8:	3710      	adds	r7, #16
 8102cca:	46bd      	mov	sp, r7
 8102ccc:	bd80      	pop	{r7, pc}
 8102cce:	bf00      	nop
 8102cd0:	1fe00fff 	.word	0x1fe00fff

08102cd4 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b08e      	sub	sp, #56	; 0x38
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	60f8      	str	r0, [r7, #12]
 8102cdc:	60b9      	str	r1, [r7, #8]
 8102cde:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8102ce0:	f7fe fadc 	bl	810129c <HAL_GetTick>
 8102ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8102ce6:	68bb      	ldr	r3, [r7, #8]
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d107      	bne.n	8102cfc <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102cf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8102cf8:	2301      	movs	r3, #1
 8102cfa:	e0de      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8102cfc:	68fb      	ldr	r3, [r7, #12]
 8102cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8102d02:	b2db      	uxtb	r3, r3
 8102d04:	2b01      	cmp	r3, #1
 8102d06:	f040 80d7 	bne.w	8102eb8 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	2200      	movs	r2, #0
 8102d0e:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8102d10:	68fb      	ldr	r3, [r7, #12]
 8102d12:	2203      	movs	r2, #3
 8102d14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8102d18:	68fb      	ldr	r3, [r7, #12]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	2200      	movs	r2, #0
 8102d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8102d20:	68bb      	ldr	r3, [r7, #8]
 8102d22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8102d24:	f04f 33ff 	mov.w	r3, #4294967295
 8102d28:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8102d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102d2e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8102d30:	2390      	movs	r3, #144	; 0x90
 8102d32:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8102d34:	2302      	movs	r3, #2
 8102d36:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8102d38:	2300      	movs	r3, #0
 8102d3a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8102d3c:	2300      	movs	r3, #0
 8102d3e:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8102d40:	68fb      	ldr	r3, [r7, #12]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	f107 0210 	add.w	r2, r7, #16
 8102d48:	4611      	mov	r1, r2
 8102d4a:	4618      	mov	r0, r3
 8102d4c:	f004 f83a 	bl	8106dc4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	68da      	ldr	r2, [r3, #12]
 8102d56:	68fb      	ldr	r3, [r7, #12]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102d5e:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	2100      	movs	r1, #0
 8102d66:	4618      	mov	r0, r3
 8102d68:	f004 f986 	bl	8107078 <SDMMC_CmdSendEXTCSD>
 8102d6c:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8102d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d70:	2b00      	cmp	r3, #0
 8102d72:	d045      	beq.n	8102e00 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102d74:	68fb      	ldr	r3, [r7, #12]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	4a52      	ldr	r2, [pc, #328]	; (8102ec4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8102d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8102d7c:	68fb      	ldr	r3, [r7, #12]
 8102d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d82:	431a      	orrs	r2, r3
 8102d84:	68fb      	ldr	r3, [r7, #12]
 8102d86:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8102d88:	68fb      	ldr	r3, [r7, #12]
 8102d8a:	2201      	movs	r2, #1
 8102d8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8102d90:	2301      	movs	r3, #1
 8102d92:	e092      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8102d94:	68fb      	ldr	r3, [r7, #12]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102d9e:	2b00      	cmp	r3, #0
 8102da0:	d013      	beq.n	8102dca <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8102da2:	2300      	movs	r3, #0
 8102da4:	637b      	str	r3, [r7, #52]	; 0x34
 8102da6:	e00d      	b.n	8102dc4 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8102da8:	68fb      	ldr	r3, [r7, #12]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	4618      	mov	r0, r3
 8102dae:	f003 ff93 	bl	8106cd8 <SDMMC_ReadFIFO>
 8102db2:	4602      	mov	r2, r0
 8102db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102db6:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8102db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102dba:	3304      	adds	r3, #4
 8102dbc:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8102dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102dc0:	3301      	adds	r3, #1
 8102dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8102dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102dc6:	2b07      	cmp	r3, #7
 8102dc8:	d9ee      	bls.n	8102da8 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8102dca:	f7fe fa67 	bl	810129c <HAL_GetTick>
 8102dce:	4602      	mov	r2, r0
 8102dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102dd2:	1ad3      	subs	r3, r2, r3
 8102dd4:	687a      	ldr	r2, [r7, #4]
 8102dd6:	429a      	cmp	r2, r3
 8102dd8:	d902      	bls.n	8102de0 <HAL_MMC_GetCardExtCSD+0x10c>
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d10f      	bne.n	8102e00 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102de0:	68fb      	ldr	r3, [r7, #12]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a37      	ldr	r2, [pc, #220]	; (8102ec4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8102de6:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8102de8:	68fb      	ldr	r3, [r7, #12]
 8102dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102dec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8102df0:	68fb      	ldr	r3, [r7, #12]
 8102df2:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8102df4:	68fb      	ldr	r3, [r7, #12]
 8102df6:	2201      	movs	r2, #1
 8102df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8102dfc:	2303      	movs	r3, #3
 8102dfe:	e05c      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8102e00:	68fb      	ldr	r3, [r7, #12]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e06:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d0c2      	beq.n	8102d94 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8102e0e:	68fb      	ldr	r3, [r7, #12]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	68da      	ldr	r2, [r3, #12]
 8102e14:	68fb      	ldr	r3, [r7, #12]
 8102e16:	681b      	ldr	r3, [r3, #0]
 8102e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102e1c:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e24:	f003 0308 	and.w	r3, r3, #8
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	d00f      	beq.n	8102e4c <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102e2c:	68fb      	ldr	r3, [r7, #12]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	4a24      	ldr	r2, [pc, #144]	; (8102ec4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8102e32:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e38:	f043 0208 	orr.w	r2, r3, #8
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8102e40:	68fb      	ldr	r3, [r7, #12]
 8102e42:	2201      	movs	r2, #1
 8102e44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8102e48:	2301      	movs	r3, #1
 8102e4a:	e036      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e52:	f003 0302 	and.w	r3, r3, #2
 8102e56:	2b00      	cmp	r3, #0
 8102e58:	d00f      	beq.n	8102e7a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102e5a:	68fb      	ldr	r3, [r7, #12]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	4a19      	ldr	r2, [pc, #100]	; (8102ec4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8102e60:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e66:	f043 0202 	orr.w	r2, r3, #2
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	2201      	movs	r2, #1
 8102e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8102e76:	2301      	movs	r3, #1
 8102e78:	e01f      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e80:	f003 0320 	and.w	r3, r3, #32
 8102e84:	2b00      	cmp	r3, #0
 8102e86:	d00f      	beq.n	8102ea8 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	4a0d      	ldr	r2, [pc, #52]	; (8102ec4 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8102e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8102e90:	68fb      	ldr	r3, [r7, #12]
 8102e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102e94:	f043 0220 	orr.w	r2, r3, #32
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	2201      	movs	r2, #1
 8102ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8102ea4:	2301      	movs	r3, #1
 8102ea6:	e008      	b.n	8102eba <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8102ea8:	68fb      	ldr	r3, [r7, #12]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	4a06      	ldr	r2, [pc, #24]	; (8102ec8 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8102eae:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	2201      	movs	r2, #1
 8102eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8102eb8:	2300      	movs	r3, #0
}
 8102eba:	4618      	mov	r0, r3
 8102ebc:	3738      	adds	r7, #56	; 0x38
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}
 8102ec2:	bf00      	nop
 8102ec4:	1fe00fff 	.word	0x1fe00fff
 8102ec8:	18000f3a 	.word	0x18000f3a

08102ecc <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8102ecc:	b5b0      	push	{r4, r5, r7, lr}
 8102ece:	b08c      	sub	sp, #48	; 0x30
 8102ed0:	af02      	add	r7, sp, #8
 8102ed2:	6078      	str	r0, [r7, #4]
 8102ed4:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8102ed6:	2300      	movs	r3, #0
 8102ed8:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	2203      	movs	r2, #3
 8102ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	685b      	ldr	r3, [r3, #4]
 8102ee8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102eec:	2b00      	cmp	r3, #0
 8102eee:	d014      	beq.n	8102f1a <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	685b      	ldr	r3, [r3, #4]
 8102ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d006      	beq.n	8102f0c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8102efe:	2204      	movs	r2, #4
 8102f00:	6839      	ldr	r1, [r7, #0]
 8102f02:	6878      	ldr	r0, [r7, #4]
 8102f04:	f000 faf0 	bl	81034e8 <MMC_PwrClassUpdate>
 8102f08:	6238      	str	r0, [r7, #32]
 8102f0a:	e00c      	b.n	8102f26 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8102f0c:	2202      	movs	r2, #2
 8102f0e:	6839      	ldr	r1, [r7, #0]
 8102f10:	6878      	ldr	r0, [r7, #4]
 8102f12:	f000 fae9 	bl	81034e8 <MMC_PwrClassUpdate>
 8102f16:	6238      	str	r0, [r7, #32]
 8102f18:	e005      	b.n	8102f26 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8102f1a:	2201      	movs	r2, #1
 8102f1c:	6839      	ldr	r1, [r7, #0]
 8102f1e:	6878      	ldr	r0, [r7, #4]
 8102f20:	f000 fae2 	bl	81034e8 <MMC_PwrClassUpdate>
 8102f24:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8102f26:	6a3b      	ldr	r3, [r7, #32]
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d17b      	bne.n	8103024 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8102f2c:	683b      	ldr	r3, [r7, #0]
 8102f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102f32:	d107      	bne.n	8102f44 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	4946      	ldr	r1, [pc, #280]	; (8103054 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8102f3a:	4618      	mov	r0, r3
 8102f3c:	f004 f879 	bl	8107032 <SDMMC_CmdSwitch>
 8102f40:	6238      	str	r0, [r7, #32]
 8102f42:	e019      	b.n	8102f78 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8102f44:	683b      	ldr	r3, [r7, #0]
 8102f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f4a:	d107      	bne.n	8102f5c <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	4941      	ldr	r1, [pc, #260]	; (8103058 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8102f52:	4618      	mov	r0, r3
 8102f54:	f004 f86d 	bl	8107032 <SDMMC_CmdSwitch>
 8102f58:	6238      	str	r0, [r7, #32]
 8102f5a:	e00d      	b.n	8102f78 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8102f5c:	683b      	ldr	r3, [r7, #0]
 8102f5e:	2b00      	cmp	r3, #0
 8102f60:	d107      	bne.n	8102f72 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	493d      	ldr	r1, [pc, #244]	; (810305c <HAL_MMC_ConfigWideBusOperation+0x190>)
 8102f68:	4618      	mov	r0, r3
 8102f6a:	f004 f862 	bl	8107032 <SDMMC_CmdSwitch>
 8102f6e:	6238      	str	r0, [r7, #32]
 8102f70:	e002      	b.n	8102f78 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8102f72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8102f76:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8102f78:	6a3b      	ldr	r3, [r7, #32]
 8102f7a:	2b00      	cmp	r3, #0
 8102f7c:	d152      	bne.n	8103024 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8102f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102f82:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	681a      	ldr	r2, [r3, #0]
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f8c:	041b      	lsls	r3, r3, #16
 8102f8e:	4619      	mov	r1, r3
 8102f90:	4610      	mov	r0, r2
 8102f92:	f004 f80b 	bl	8106fac <SDMMC_CmdSendStatus>
 8102f96:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8102f98:	6a3b      	ldr	r3, [r7, #32]
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	d112      	bne.n	8102fc4 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	2100      	movs	r1, #0
 8102fa4:	4618      	mov	r0, r3
 8102fa6:	f003 fefa 	bl	8106d9e <SDMMC_GetResponse>
 8102faa:	61f8      	str	r0, [r7, #28]
        count--;
 8102fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fae:	3b01      	subs	r3, #1
 8102fb0:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8102fb2:	69fb      	ldr	r3, [r7, #28]
 8102fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d104      	bne.n	8102fc6 <HAL_MMC_ConfigWideBusOperation+0xfa>
 8102fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fbe:	2b00      	cmp	r3, #0
 8102fc0:	d1e0      	bne.n	8102f84 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8102fc2:	e000      	b.n	8102fc6 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8102fc4:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8102fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fc8:	2b00      	cmp	r3, #0
 8102fca:	d025      	beq.n	8103018 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8102fcc:	6a3b      	ldr	r3, [r7, #32]
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d122      	bne.n	8103018 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8102fd2:	69fb      	ldr	r3, [r7, #28]
 8102fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d003      	beq.n	8102fe4 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8102fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8102fe0:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8102fe2:	e01f      	b.n	8103024 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	f107 0408 	add.w	r4, r7, #8
 8102fea:	1d1d      	adds	r5, r3, #4
 8102fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102ff0:	682b      	ldr	r3, [r5, #0]
 8102ff2:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8102ff4:	683b      	ldr	r3, [r7, #0]
 8102ff6:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8102ff8:	687b      	ldr	r3, [r7, #4]
 8102ffa:	681c      	ldr	r4, [r3, #0]
 8102ffc:	466a      	mov	r2, sp
 8102ffe:	f107 0314 	add.w	r3, r7, #20
 8103002:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103006:	e882 0003 	stmia.w	r2, {r0, r1}
 810300a:	f107 0308 	add.w	r3, r7, #8
 810300e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103010:	4620      	mov	r0, r4
 8103012:	f003 fe37 	bl	8106c84 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8103016:	e005      	b.n	8103024 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8103018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810301a:	2b00      	cmp	r3, #0
 810301c:	d102      	bne.n	8103024 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 810301e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103022:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	2201      	movs	r2, #1
 8103028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 810302c:	6a3b      	ldr	r3, [r7, #32]
 810302e:	2b00      	cmp	r3, #0
 8103030:	d00b      	beq.n	810304a <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a0a      	ldr	r2, [pc, #40]	; (8103060 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8103038:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810303e:	6a3b      	ldr	r3, [r7, #32]
 8103040:	431a      	orrs	r2, r3
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8103046:	2301      	movs	r3, #1
 8103048:	e000      	b.n	810304c <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 810304a:	2300      	movs	r3, #0
}
 810304c:	4618      	mov	r0, r3
 810304e:	3728      	adds	r7, #40	; 0x28
 8103050:	46bd      	mov	sp, r7
 8103052:	bdb0      	pop	{r4, r5, r7, pc}
 8103054:	03b70200 	.word	0x03b70200
 8103058:	03b70100 	.word	0x03b70100
 810305c:	03b70000 	.word	0x03b70000
 8103060:	1fe00fff 	.word	0x1fe00fff

08103064 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103064:	b5b0      	push	{r4, r5, r7, lr}
 8103066:	b096      	sub	sp, #88	; 0x58
 8103068:	af02      	add	r7, sp, #8
 810306a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 810306c:	2302      	movs	r3, #2
 810306e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	681b      	ldr	r3, [r3, #0]
 8103076:	4618      	mov	r0, r3
 8103078:	f003 fe4c 	bl	8106d14 <SDMMC_GetPowerState>
 810307c:	4603      	mov	r3, r0
 810307e:	2b00      	cmp	r3, #0
 8103080:	d102      	bne.n	8103088 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8103082:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8103086:	e0e6      	b.n	8103256 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	4618      	mov	r0, r3
 810308e:	f003 ff29 	bl	8106ee4 <SDMMC_CmdSendCID>
 8103092:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103096:	2b00      	cmp	r3, #0
 8103098:	d001      	beq.n	810309e <MMC_InitCard+0x3a>
  {
    return errorstate;
 810309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810309c:	e0db      	b.n	8103256 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	2100      	movs	r1, #0
 81030a4:	4618      	mov	r0, r3
 81030a6:	f003 fe7a 	bl	8106d9e <SDMMC_GetResponse>
 81030aa:	4602      	mov	r2, r0
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	2104      	movs	r1, #4
 81030b6:	4618      	mov	r0, r3
 81030b8:	f003 fe71 	bl	8106d9e <SDMMC_GetResponse>
 81030bc:	4602      	mov	r2, r0
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	2108      	movs	r1, #8
 81030c8:	4618      	mov	r0, r3
 81030ca:	f003 fe68 	bl	8106d9e <SDMMC_GetResponse>
 81030ce:	4602      	mov	r2, r0
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	681b      	ldr	r3, [r3, #0]
 81030d8:	210c      	movs	r1, #12
 81030da:	4618      	mov	r0, r3
 81030dc:	f003 fe5f 	bl	8106d9e <SDMMC_GetResponse>
 81030e0:	4602      	mov	r2, r0
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 81030ee:	4611      	mov	r1, r2
 81030f0:	4618      	mov	r0, r3
 81030f2:	f003 ff36 	bl	8106f62 <SDMMC_CmdSetRelAddMmc>
 81030f6:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 81030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81030fa:	2b00      	cmp	r3, #0
 81030fc:	d001      	beq.n	8103102 <MMC_InitCard+0x9e>
  {
    return errorstate;
 81030fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103100:	e0a9      	b.n	8103256 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103102:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681a      	ldr	r2, [r3, #0]
 810310e:	687b      	ldr	r3, [r7, #4]
 8103110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103112:	041b      	lsls	r3, r3, #16
 8103114:	4619      	mov	r1, r3
 8103116:	4610      	mov	r0, r2
 8103118:	f003 ff03 	bl	8106f22 <SDMMC_CmdSendCSD>
 810311c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 810311e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103120:	2b00      	cmp	r3, #0
 8103122:	d001      	beq.n	8103128 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8103124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103126:	e096      	b.n	8103256 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	2100      	movs	r1, #0
 810312e:	4618      	mov	r0, r3
 8103130:	f003 fe35 	bl	8106d9e <SDMMC_GetResponse>
 8103134:	4602      	mov	r2, r0
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	2104      	movs	r1, #4
 8103140:	4618      	mov	r0, r3
 8103142:	f003 fe2c 	bl	8106d9e <SDMMC_GetResponse>
 8103146:	4602      	mov	r2, r0
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	2108      	movs	r1, #8
 8103152:	4618      	mov	r0, r3
 8103154:	f003 fe23 	bl	8106d9e <SDMMC_GetResponse>
 8103158:	4602      	mov	r2, r0
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	210c      	movs	r1, #12
 8103164:	4618      	mov	r0, r3
 8103166:	f003 fe1a 	bl	8106d9e <SDMMC_GetResponse>
 810316a:	4602      	mov	r2, r0
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	2104      	movs	r1, #4
 8103176:	4618      	mov	r0, r3
 8103178:	f003 fe11 	bl	8106d9e <SDMMC_GetResponse>
 810317c:	4603      	mov	r3, r0
 810317e:	0d1a      	lsrs	r2, r3, #20
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681a      	ldr	r2, [r3, #0]
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810318c:	041b      	lsls	r3, r3, #16
 810318e:	4619      	mov	r1, r3
 8103190:	4610      	mov	r0, r2
 8103192:	f003 fe66 	bl	8106e62 <SDMMC_CmdSelDesel>
 8103196:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810319a:	2b00      	cmp	r3, #0
 810319c:	d001      	beq.n	81031a2 <MMC_InitCard+0x13e>
  {
    return errorstate;
 810319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81031a0:	e059      	b.n	8103256 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 81031a2:	f107 031c 	add.w	r3, r7, #28
 81031a6:	4619      	mov	r1, r3
 81031a8:	6878      	ldr	r0, [r7, #4]
 81031aa:	f7ff fbef 	bl	810298c <HAL_MMC_GetCardCSD>
 81031ae:	4603      	mov	r3, r0
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	d002      	beq.n	81031ba <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81031b8:	e04d      	b.n	8103256 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	681a      	ldr	r2, [r3, #0]
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81031c2:	041b      	lsls	r3, r3, #16
 81031c4:	4619      	mov	r1, r3
 81031c6:	4610      	mov	r0, r2
 81031c8:	f003 fef0 	bl	8106fac <SDMMC_CmdSendStatus>
 81031cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 81031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81031d0:	2b00      	cmp	r3, #0
 81031d2:	d005      	beq.n	81031e0 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81031d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81031da:	431a      	orrs	r2, r3
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	3374      	adds	r3, #116	; 0x74
 81031e4:	f04f 32ff 	mov.w	r2, #4294967295
 81031e8:	4619      	mov	r1, r3
 81031ea:	6878      	ldr	r0, [r7, #4]
 81031ec:	f7ff fd72 	bl	8102cd4 <HAL_MMC_GetCardExtCSD>
 81031f0:	4603      	mov	r3, r0
 81031f2:	2b00      	cmp	r3, #0
 81031f4:	d002      	beq.n	81031fc <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81031fa:	e02c      	b.n	8103256 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681a      	ldr	r2, [r3, #0]
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103204:	041b      	lsls	r3, r3, #16
 8103206:	4619      	mov	r1, r3
 8103208:	4610      	mov	r0, r2
 810320a:	f003 fecf 	bl	8106fac <SDMMC_CmdSendStatus>
 810320e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103212:	2b00      	cmp	r3, #0
 8103214:	d005      	beq.n	8103222 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810321a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810321c:	431a      	orrs	r2, r3
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	f107 0408 	add.w	r4, r7, #8
 8103228:	1d1d      	adds	r5, r3, #4
 810322a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810322c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810322e:	682b      	ldr	r3, [r5, #0]
 8103230:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8103232:	2300      	movs	r3, #0
 8103234:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681c      	ldr	r4, [r3, #0]
 810323a:	466a      	mov	r2, sp
 810323c:	f107 0314 	add.w	r3, r7, #20
 8103240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103244:	e882 0003 	stmia.w	r2, {r0, r1}
 8103248:	f107 0308 	add.w	r3, r7, #8
 810324c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810324e:	4620      	mov	r0, r4
 8103250:	f003 fd18 	bl	8106c84 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8103254:	2300      	movs	r3, #0
}
 8103256:	4618      	mov	r0, r3
 8103258:	3750      	adds	r7, #80	; 0x50
 810325a:	46bd      	mov	sp, r7
 810325c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103260 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8103260:	b580      	push	{r7, lr}
 8103262:	b086      	sub	sp, #24
 8103264:	af00      	add	r7, sp, #0
 8103266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103268:	2300      	movs	r3, #0
 810326a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 810326c:	2300      	movs	r3, #0
 810326e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8103270:	2300      	movs	r3, #0
 8103272:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4618      	mov	r0, r3
 810327a:	f003 fe15 	bl	8106ea8 <SDMMC_CmdGoIdleState>
 810327e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103280:	68fb      	ldr	r3, [r7, #12]
 8103282:	2b00      	cmp	r3, #0
 8103284:	d027      	beq.n	81032d6 <MMC_PowerON+0x76>
  {
    return errorstate;
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	e034      	b.n	81032f4 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 810328a:	68bb      	ldr	r3, [r7, #8]
 810328c:	1c5a      	adds	r2, r3, #1
 810328e:	60ba      	str	r2, [r7, #8]
 8103290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103294:	4293      	cmp	r3, r2
 8103296:	d102      	bne.n	810329e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8103298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810329c:	e02a      	b.n	81032f4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4916      	ldr	r1, [pc, #88]	; (81032fc <MMC_PowerON+0x9c>)
 81032a4:	4618      	mov	r0, r3
 81032a6:	f003 fea4 	bl	8106ff2 <SDMMC_CmdOpCondition>
 81032aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 81032ac:	68fb      	ldr	r3, [r7, #12]
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	d002      	beq.n	81032b8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 81032b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81032b6:	e01d      	b.n	81032f4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	2100      	movs	r1, #0
 81032be:	4618      	mov	r0, r3
 81032c0:	f003 fd6d 	bl	8106d9e <SDMMC_GetResponse>
 81032c4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 81032c6:	697b      	ldr	r3, [r7, #20]
 81032c8:	0fdb      	lsrs	r3, r3, #31
 81032ca:	2b01      	cmp	r3, #1
 81032cc:	d101      	bne.n	81032d2 <MMC_PowerON+0x72>
 81032ce:	2301      	movs	r3, #1
 81032d0:	e000      	b.n	81032d4 <MMC_PowerON+0x74>
 81032d2:	2300      	movs	r3, #0
 81032d4:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 81032d6:	693b      	ldr	r3, [r7, #16]
 81032d8:	2b00      	cmp	r3, #0
 81032da:	d0d6      	beq.n	810328a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 81032dc:	697b      	ldr	r3, [r7, #20]
 81032de:	0e1b      	lsrs	r3, r3, #24
 81032e0:	2bc0      	cmp	r3, #192	; 0xc0
 81032e2:	d103      	bne.n	81032ec <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	2201      	movs	r2, #1
 81032e8:	639a      	str	r2, [r3, #56]	; 0x38
 81032ea:	e002      	b.n	81032f2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	2200      	movs	r2, #0
 81032f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 81032f2:	2300      	movs	r3, #0
}
 81032f4:	4618      	mov	r0, r3
 81032f6:	3718      	adds	r7, #24
 81032f8:	46bd      	mov	sp, r7
 81032fa:	bd80      	pop	{r7, pc}
 81032fc:	c0ff8000 	.word	0xc0ff8000

08103300 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8103300:	b580      	push	{r7, lr}
 8103302:	b090      	sub	sp, #64	; 0x40
 8103304:	af00      	add	r7, sp, #0
 8103306:	60f8      	str	r0, [r7, #12]
 8103308:	60b9      	str	r1, [r7, #8]
 810330a:	603b      	str	r3, [r7, #0]
 810330c:	4613      	mov	r3, r2
 810330e:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103310:	f7fd ffc4 	bl	810129c <HAL_GetTick>
 8103314:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8103316:	2300      	movs	r3, #0
 8103318:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 810331a:	68fb      	ldr	r3, [r7, #12]
 810331c:	2200      	movs	r2, #0
 810331e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103320:	68fb      	ldr	r3, [r7, #12]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	2200      	movs	r2, #0
 8103326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103328:	f04f 33ff 	mov.w	r3, #4294967295
 810332c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 810332e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103332:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103334:	2390      	movs	r3, #144	; 0x90
 8103336:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103338:	2302      	movs	r3, #2
 810333a:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810333c:	2300      	movs	r3, #0
 810333e:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103340:	2301      	movs	r3, #1
 8103342:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	f107 0214 	add.w	r2, r7, #20
 810334c:	4611      	mov	r1, r2
 810334e:	4618      	mov	r0, r3
 8103350:	f003 fd38 	bl	8106dc4 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103354:	68fb      	ldr	r3, [r7, #12]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	2100      	movs	r1, #0
 810335a:	4618      	mov	r0, r3
 810335c:	f003 fe8c 	bl	8107078 <SDMMC_CmdSendEXTCSD>
 8103360:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103364:	2b00      	cmp	r3, #0
 8103366:	d04e      	beq.n	8103406 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103368:	68fb      	ldr	r3, [r7, #12]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a5c      	ldr	r2, [pc, #368]	; (81034e0 <MMC_ReadExtCSD+0x1e0>)
 810336e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8103370:	68fb      	ldr	r3, [r7, #12]
 8103372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103376:	431a      	orrs	r2, r3
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 810337c:	68fb      	ldr	r3, [r7, #12]
 810337e:	2201      	movs	r2, #1
 8103380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8103384:	2301      	movs	r3, #1
 8103386:	e0a6      	b.n	81034d6 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103388:	68fb      	ldr	r3, [r7, #12]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810338e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103392:	2b00      	cmp	r3, #0
 8103394:	d01c      	beq.n	81033d0 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8103396:	2300      	movs	r3, #0
 8103398:	63fb      	str	r3, [r7, #60]	; 0x3c
 810339a:	e013      	b.n	81033c4 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 810339c:	68fb      	ldr	r3, [r7, #12]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4618      	mov	r0, r3
 81033a2:	f003 fc99 	bl	8106cd8 <SDMMC_ReadFIFO>
 81033a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 81033a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81033ac:	4413      	add	r3, r2
 81033ae:	88fa      	ldrh	r2, [r7, #6]
 81033b0:	0892      	lsrs	r2, r2, #2
 81033b2:	b292      	uxth	r2, r2
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d102      	bne.n	81033be <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 81033b8:	68bb      	ldr	r3, [r7, #8]
 81033ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81033bc:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 81033be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81033c0:	3301      	adds	r3, #1
 81033c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81033c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81033c6:	2b07      	cmp	r3, #7
 81033c8:	d9e8      	bls.n	810339c <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 81033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81033cc:	3308      	adds	r3, #8
 81033ce:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81033d0:	f7fd ff64 	bl	810129c <HAL_GetTick>
 81033d4:	4602      	mov	r2, r0
 81033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81033d8:	1ad3      	subs	r3, r2, r3
 81033da:	683a      	ldr	r2, [r7, #0]
 81033dc:	429a      	cmp	r2, r3
 81033de:	d902      	bls.n	81033e6 <MMC_ReadExtCSD+0xe6>
 81033e0:	683b      	ldr	r3, [r7, #0]
 81033e2:	2b00      	cmp	r3, #0
 81033e4:	d10f      	bne.n	8103406 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81033e6:	68fb      	ldr	r3, [r7, #12]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	4a3d      	ldr	r2, [pc, #244]	; (81034e0 <MMC_ReadExtCSD+0x1e0>)
 81033ec:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 81033ee:	68fb      	ldr	r3, [r7, #12]
 81033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81033f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 81033f6:	68fb      	ldr	r3, [r7, #12]
 81033f8:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81033fa:	68fb      	ldr	r3, [r7, #12]
 81033fc:	2201      	movs	r2, #1
 81033fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8103402:	2303      	movs	r3, #3
 8103404:	e067      	b.n	81034d6 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8103406:	68fb      	ldr	r3, [r7, #12]
 8103408:	681b      	ldr	r3, [r3, #0]
 810340a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810340c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8103410:	2b00      	cmp	r3, #0
 8103412:	d0b9      	beq.n	8103388 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103414:	68fb      	ldr	r3, [r7, #12]
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810341a:	f003 0308 	and.w	r3, r3, #8
 810341e:	2b00      	cmp	r3, #0
 8103420:	d00f      	beq.n	8103442 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103422:	68fb      	ldr	r3, [r7, #12]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	4a2e      	ldr	r2, [pc, #184]	; (81034e0 <MMC_ReadExtCSD+0x1e0>)
 8103428:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 810342a:	68fb      	ldr	r3, [r7, #12]
 810342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810342e:	f043 0208 	orr.w	r2, r3, #8
 8103432:	68fb      	ldr	r3, [r7, #12]
 8103434:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103436:	68fb      	ldr	r3, [r7, #12]
 8103438:	2201      	movs	r2, #1
 810343a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 810343e:	2301      	movs	r3, #1
 8103440:	e049      	b.n	81034d6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103448:	f003 0302 	and.w	r3, r3, #2
 810344c:	2b00      	cmp	r3, #0
 810344e:	d00f      	beq.n	8103470 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103450:	68fb      	ldr	r3, [r7, #12]
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	4a22      	ldr	r2, [pc, #136]	; (81034e0 <MMC_ReadExtCSD+0x1e0>)
 8103456:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103458:	68fb      	ldr	r3, [r7, #12]
 810345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810345c:	f043 0202 	orr.w	r2, r3, #2
 8103460:	68fb      	ldr	r3, [r7, #12]
 8103462:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103464:	68fb      	ldr	r3, [r7, #12]
 8103466:	2201      	movs	r2, #1
 8103468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 810346c:	2301      	movs	r3, #1
 810346e:	e032      	b.n	81034d6 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103470:	68fb      	ldr	r3, [r7, #12]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103476:	f003 0320 	and.w	r3, r3, #32
 810347a:	2b00      	cmp	r3, #0
 810347c:	d00f      	beq.n	810349e <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810347e:	68fb      	ldr	r3, [r7, #12]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	4a17      	ldr	r2, [pc, #92]	; (81034e0 <MMC_ReadExtCSD+0x1e0>)
 8103484:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103486:	68fb      	ldr	r3, [r7, #12]
 8103488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810348a:	f043 0220 	orr.w	r2, r3, #32
 810348e:	68fb      	ldr	r3, [r7, #12]
 8103490:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103492:	68fb      	ldr	r3, [r7, #12]
 8103494:	2201      	movs	r2, #1
 8103496:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 810349a:	2301      	movs	r3, #1
 810349c:	e01b      	b.n	81034d6 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 810349e:	68fb      	ldr	r3, [r7, #12]
 81034a0:	681a      	ldr	r2, [r3, #0]
 81034a2:	68fb      	ldr	r3, [r7, #12]
 81034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034a6:	041b      	lsls	r3, r3, #16
 81034a8:	4619      	mov	r1, r3
 81034aa:	4610      	mov	r0, r2
 81034ac:	f003 fd7e 	bl	8106fac <SDMMC_CmdSendStatus>
 81034b0:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 81034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	d005      	beq.n	81034c4 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 81034b8:	68fb      	ldr	r3, [r7, #12]
 81034ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81034be:	431a      	orrs	r2, r3
 81034c0:	68fb      	ldr	r3, [r7, #12]
 81034c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81034c4:	68fb      	ldr	r3, [r7, #12]
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	4a06      	ldr	r2, [pc, #24]	; (81034e4 <MMC_ReadExtCSD+0x1e4>)
 81034ca:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	2201      	movs	r2, #1
 81034d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 81034d4:	2300      	movs	r3, #0
}
 81034d6:	4618      	mov	r0, r3
 81034d8:	3740      	adds	r7, #64	; 0x40
 81034da:	46bd      	mov	sp, r7
 81034dc:	bd80      	pop	{r7, pc}
 81034de:	bf00      	nop
 81034e0:	1fe00fff 	.word	0x1fe00fff
 81034e4:	18000f3a 	.word	0x18000f3a

081034e8 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 81034e8:	b580      	push	{r7, lr}
 81034ea:	b08a      	sub	sp, #40	; 0x28
 81034ec:	af00      	add	r7, sp, #0
 81034ee:	60f8      	str	r0, [r7, #12]
 81034f0:	60b9      	str	r1, [r7, #8]
 81034f2:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 81034f4:	2300      	movs	r3, #0
 81034f6:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 81034f8:	2300      	movs	r3, #0
 81034fa:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 81034fc:	68bb      	ldr	r3, [r7, #8]
 81034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103502:	d004      	beq.n	810350e <MMC_PwrClassUpdate+0x26>
 8103504:	68bb      	ldr	r3, [r7, #8]
 8103506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810350a:	f040 8088 	bne.w	810361e <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 810350e:	2300      	movs	r3, #0
 8103510:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8103512:	f107 0114 	add.w	r1, r7, #20
 8103516:	f04f 33ff 	mov.w	r3, #4294967295
 810351a:	22bb      	movs	r2, #187	; 0xbb
 810351c:	68f8      	ldr	r0, [r7, #12]
 810351e:	f7ff feef 	bl	8103300 <MMC_ReadExtCSD>
 8103522:	4603      	mov	r3, r0
 8103524:	2b00      	cmp	r3, #0
 8103526:	d003      	beq.n	8103530 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8103528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 810352c:	61fb      	str	r3, [r7, #28]
 810352e:	e002      	b.n	8103536 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8103530:	697b      	ldr	r3, [r7, #20]
 8103532:	0e1b      	lsrs	r3, r3, #24
 8103534:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	2b04      	cmp	r3, #4
 810353a:	d105      	bne.n	8103548 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 810353c:	68fb      	ldr	r3, [r7, #12]
 810353e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8103542:	0e1b      	lsrs	r3, r3, #24
 8103544:	61bb      	str	r3, [r7, #24]
 8103546:	e00e      	b.n	8103566 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8103548:	687b      	ldr	r3, [r7, #4]
 810354a:	2b02      	cmp	r3, #2
 810354c:	d106      	bne.n	810355c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 810354e:	68fb      	ldr	r3, [r7, #12]
 8103550:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8103554:	0c1b      	lsrs	r3, r3, #16
 8103556:	b2db      	uxtb	r3, r3
 8103558:	61bb      	str	r3, [r7, #24]
 810355a:	e004      	b.n	8103566 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 810355c:	68fb      	ldr	r3, [r7, #12]
 810355e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8103562:	0e1b      	lsrs	r3, r3, #24
 8103564:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8103566:	69fb      	ldr	r3, [r7, #28]
 8103568:	2b00      	cmp	r3, #0
 810356a:	d158      	bne.n	810361e <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 810356c:	68bb      	ldr	r3, [r7, #8]
 810356e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103572:	d102      	bne.n	810357a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8103574:	69bb      	ldr	r3, [r7, #24]
 8103576:	091b      	lsrs	r3, r3, #4
 8103578:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 810357a:	697a      	ldr	r2, [r7, #20]
 810357c:	69bb      	ldr	r3, [r7, #24]
 810357e:	4053      	eors	r3, r2
 8103580:	f003 030f 	and.w	r3, r3, #15
 8103584:	2b00      	cmp	r3, #0
 8103586:	d04a      	beq.n	810361e <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8103588:	68fb      	ldr	r3, [r7, #12]
 810358a:	681a      	ldr	r2, [r3, #0]
 810358c:	69bb      	ldr	r3, [r7, #24]
 810358e:	021b      	lsls	r3, r3, #8
 8103590:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8103594:	f043 736e 	orr.w	r3, r3, #62390272	; 0x3b80000
 8103598:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 810359c:	4619      	mov	r1, r3
 810359e:	4610      	mov	r0, r2
 81035a0:	f003 fd47 	bl	8107032 <SDMMC_CmdSwitch>
 81035a4:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 81035a6:	69fb      	ldr	r3, [r7, #28]
 81035a8:	2b00      	cmp	r3, #0
 81035aa:	d138      	bne.n	810361e <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 81035ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81035b0:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 81035b2:	68fb      	ldr	r3, [r7, #12]
 81035b4:	681a      	ldr	r2, [r3, #0]
 81035b6:	68fb      	ldr	r3, [r7, #12]
 81035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035ba:	041b      	lsls	r3, r3, #16
 81035bc:	4619      	mov	r1, r3
 81035be:	4610      	mov	r0, r2
 81035c0:	f003 fcf4 	bl	8106fac <SDMMC_CmdSendStatus>
 81035c4:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 81035c6:	69fb      	ldr	r3, [r7, #28]
 81035c8:	2b00      	cmp	r3, #0
 81035ca:	d112      	bne.n	81035f2 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 81035cc:	68fb      	ldr	r3, [r7, #12]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	2100      	movs	r1, #0
 81035d2:	4618      	mov	r0, r3
 81035d4:	f003 fbe3 	bl	8106d9e <SDMMC_GetResponse>
 81035d8:	6238      	str	r0, [r7, #32]
            count--;
 81035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81035dc:	3b01      	subs	r3, #1
 81035de:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 81035e0:	6a3b      	ldr	r3, [r7, #32]
 81035e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d104      	bne.n	81035f4 <MMC_PwrClassUpdate+0x10c>
 81035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81035ec:	2b00      	cmp	r3, #0
 81035ee:	d1e0      	bne.n	81035b2 <MMC_PwrClassUpdate+0xca>
 81035f0:	e000      	b.n	81035f4 <MMC_PwrClassUpdate+0x10c>
              break;
 81035f2:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 81035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81035f6:	2b00      	cmp	r3, #0
 81035f8:	d00b      	beq.n	8103612 <MMC_PwrClassUpdate+0x12a>
 81035fa:	69fb      	ldr	r3, [r7, #28]
 81035fc:	2b00      	cmp	r3, #0
 81035fe:	d108      	bne.n	8103612 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8103600:	6a3b      	ldr	r3, [r7, #32]
 8103602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103606:	2b00      	cmp	r3, #0
 8103608:	d009      	beq.n	810361e <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810360a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810360e:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8103610:	e005      	b.n	810361e <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8103612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103614:	2b00      	cmp	r3, #0
 8103616:	d102      	bne.n	810361e <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8103618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810361c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 810361e:	69fb      	ldr	r3, [r7, #28]
}
 8103620:	4618      	mov	r0, r3
 8103622:	3728      	adds	r7, #40	; 0x28
 8103624:	46bd      	mov	sp, r7
 8103626:	bd80      	pop	{r7, pc}

08103628 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103628:	b580      	push	{r7, lr}
 810362a:	b084      	sub	sp, #16
 810362c:	af00      	add	r7, sp, #0
 810362e:	60f8      	str	r0, [r7, #12]
 8103630:	460b      	mov	r3, r1
 8103632:	607a      	str	r2, [r7, #4]
 8103634:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103636:	4b37      	ldr	r3, [pc, #220]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	f023 0201 	bic.w	r2, r3, #1
 810363e:	4935      	ldr	r1, [pc, #212]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103640:	68fb      	ldr	r3, [r7, #12]
 8103642:	4313      	orrs	r3, r2
 8103644:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d123      	bne.n	8103694 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810364c:	f7fd ff5a 	bl	8101504 <HAL_GetCurrentCPUID>
 8103650:	4603      	mov	r3, r0
 8103652:	2b03      	cmp	r3, #3
 8103654:	d158      	bne.n	8103708 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103656:	4b2f      	ldr	r3, [pc, #188]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103658:	691b      	ldr	r3, [r3, #16]
 810365a:	4a2e      	ldr	r2, [pc, #184]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 810365c:	f023 0301 	bic.w	r3, r3, #1
 8103660:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103662:	4b2d      	ldr	r3, [pc, #180]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103664:	691b      	ldr	r3, [r3, #16]
 8103666:	4a2c      	ldr	r2, [pc, #176]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103668:	f043 0304 	orr.w	r3, r3, #4
 810366c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810366e:	f3bf 8f4f 	dsb	sy
}
 8103672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103674:	f3bf 8f6f 	isb	sy
}
 8103678:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810367a:	7afb      	ldrb	r3, [r7, #11]
 810367c:	2b01      	cmp	r3, #1
 810367e:	d101      	bne.n	8103684 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103680:	bf30      	wfi
 8103682:	e000      	b.n	8103686 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103684:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103686:	4b24      	ldr	r3, [pc, #144]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103688:	691b      	ldr	r3, [r3, #16]
 810368a:	4a23      	ldr	r2, [pc, #140]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810368c:	f023 0304 	bic.w	r3, r3, #4
 8103690:	6113      	str	r3, [r2, #16]
 8103692:	e03c      	b.n	810370e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	2b01      	cmp	r3, #1
 8103698:	d123      	bne.n	81036e2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810369a:	f7fd ff33 	bl	8101504 <HAL_GetCurrentCPUID>
 810369e:	4603      	mov	r3, r0
 81036a0:	2b01      	cmp	r3, #1
 81036a2:	d133      	bne.n	810370c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81036a4:	4b1b      	ldr	r3, [pc, #108]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036a6:	695b      	ldr	r3, [r3, #20]
 81036a8:	4a1a      	ldr	r2, [pc, #104]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036aa:	f023 0302 	bic.w	r3, r3, #2
 81036ae:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036b0:	4b19      	ldr	r3, [pc, #100]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036b2:	691b      	ldr	r3, [r3, #16]
 81036b4:	4a18      	ldr	r2, [pc, #96]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036b6:	f043 0304 	orr.w	r3, r3, #4
 81036ba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81036bc:	f3bf 8f4f 	dsb	sy
}
 81036c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036c2:	f3bf 8f6f 	isb	sy
}
 81036c6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81036c8:	7afb      	ldrb	r3, [r7, #11]
 81036ca:	2b01      	cmp	r3, #1
 81036cc:	d101      	bne.n	81036d2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81036ce:	bf30      	wfi
 81036d0:	e000      	b.n	81036d4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81036d2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036d4:	4b10      	ldr	r3, [pc, #64]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036d6:	691b      	ldr	r3, [r3, #16]
 81036d8:	4a0f      	ldr	r2, [pc, #60]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036da:	f023 0304 	bic.w	r3, r3, #4
 81036de:	6113      	str	r3, [r2, #16]
 81036e0:	e015      	b.n	810370e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81036e2:	f7fd ff0f 	bl	8101504 <HAL_GetCurrentCPUID>
 81036e6:	4603      	mov	r3, r0
 81036e8:	2b03      	cmp	r3, #3
 81036ea:	d106      	bne.n	81036fa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81036ec:	4b09      	ldr	r3, [pc, #36]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036ee:	691b      	ldr	r3, [r3, #16]
 81036f0:	4a08      	ldr	r2, [pc, #32]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036f2:	f023 0304 	bic.w	r3, r3, #4
 81036f6:	6113      	str	r3, [r2, #16]
 81036f8:	e009      	b.n	810370e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81036fa:	4b06      	ldr	r3, [pc, #24]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036fc:	695b      	ldr	r3, [r3, #20]
 81036fe:	4a05      	ldr	r2, [pc, #20]	; (8103714 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103700:	f023 0304 	bic.w	r3, r3, #4
 8103704:	6153      	str	r3, [r2, #20]
 8103706:	e002      	b.n	810370e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103708:	bf00      	nop
 810370a:	e000      	b.n	810370e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810370c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810370e:	3710      	adds	r7, #16
 8103710:	46bd      	mov	sp, r7
 8103712:	bd80      	pop	{r7, pc}
 8103714:	58024800 	.word	0x58024800
 8103718:	e000ed00 	.word	0xe000ed00

0810371c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810371c:	b580      	push	{r7, lr}
 810371e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103720:	f7fd fef0 	bl	8101504 <HAL_GetCurrentCPUID>
 8103724:	4603      	mov	r3, r0
 8103726:	2b03      	cmp	r3, #3
 8103728:	d101      	bne.n	810372e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810372a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810372c:	e001      	b.n	8103732 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810372e:	bf40      	sev
    __WFE ();
 8103730:	bf20      	wfe
}
 8103732:	bf00      	nop
 8103734:	bd80      	pop	{r7, pc}
	...

08103738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103738:	b480      	push	{r7}
 810373a:	b089      	sub	sp, #36	; 0x24
 810373c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810373e:	4bb3      	ldr	r3, [pc, #716]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103740:	691b      	ldr	r3, [r3, #16]
 8103742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103746:	2b18      	cmp	r3, #24
 8103748:	f200 8155 	bhi.w	81039f6 <HAL_RCC_GetSysClockFreq+0x2be>
 810374c:	a201      	add	r2, pc, #4	; (adr r2, 8103754 <HAL_RCC_GetSysClockFreq+0x1c>)
 810374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103752:	bf00      	nop
 8103754:	081037b9 	.word	0x081037b9
 8103758:	081039f7 	.word	0x081039f7
 810375c:	081039f7 	.word	0x081039f7
 8103760:	081039f7 	.word	0x081039f7
 8103764:	081039f7 	.word	0x081039f7
 8103768:	081039f7 	.word	0x081039f7
 810376c:	081039f7 	.word	0x081039f7
 8103770:	081039f7 	.word	0x081039f7
 8103774:	081037df 	.word	0x081037df
 8103778:	081039f7 	.word	0x081039f7
 810377c:	081039f7 	.word	0x081039f7
 8103780:	081039f7 	.word	0x081039f7
 8103784:	081039f7 	.word	0x081039f7
 8103788:	081039f7 	.word	0x081039f7
 810378c:	081039f7 	.word	0x081039f7
 8103790:	081039f7 	.word	0x081039f7
 8103794:	081037e5 	.word	0x081037e5
 8103798:	081039f7 	.word	0x081039f7
 810379c:	081039f7 	.word	0x081039f7
 81037a0:	081039f7 	.word	0x081039f7
 81037a4:	081039f7 	.word	0x081039f7
 81037a8:	081039f7 	.word	0x081039f7
 81037ac:	081039f7 	.word	0x081039f7
 81037b0:	081039f7 	.word	0x081039f7
 81037b4:	081037eb 	.word	0x081037eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037b8:	4b94      	ldr	r3, [pc, #592]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	f003 0320 	and.w	r3, r3, #32
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d009      	beq.n	81037d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81037c4:	4b91      	ldr	r3, [pc, #580]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	08db      	lsrs	r3, r3, #3
 81037ca:	f003 0303 	and.w	r3, r3, #3
 81037ce:	4a90      	ldr	r2, [pc, #576]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037d0:	fa22 f303 	lsr.w	r3, r2, r3
 81037d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81037d6:	e111      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81037d8:	4b8d      	ldr	r3, [pc, #564]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037da:	61bb      	str	r3, [r7, #24]
      break;
 81037dc:	e10e      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81037de:	4b8d      	ldr	r3, [pc, #564]	; (8103a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81037e0:	61bb      	str	r3, [r7, #24]
      break;
 81037e2:	e10b      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81037e4:	4b8c      	ldr	r3, [pc, #560]	; (8103a18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81037e6:	61bb      	str	r3, [r7, #24]
      break;
 81037e8:	e108      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81037ea:	4b88      	ldr	r3, [pc, #544]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037ee:	f003 0303 	and.w	r3, r3, #3
 81037f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81037f4:	4b85      	ldr	r3, [pc, #532]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037f8:	091b      	lsrs	r3, r3, #4
 81037fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81037fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103800:	4b82      	ldr	r3, [pc, #520]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103804:	f003 0301 	and.w	r3, r3, #1
 8103808:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810380a:	4b80      	ldr	r3, [pc, #512]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810380e:	08db      	lsrs	r3, r3, #3
 8103810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103814:	68fa      	ldr	r2, [r7, #12]
 8103816:	fb02 f303 	mul.w	r3, r2, r3
 810381a:	ee07 3a90 	vmov	s15, r3
 810381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103822:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103826:	693b      	ldr	r3, [r7, #16]
 8103828:	2b00      	cmp	r3, #0
 810382a:	f000 80e1 	beq.w	81039f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810382e:	697b      	ldr	r3, [r7, #20]
 8103830:	2b02      	cmp	r3, #2
 8103832:	f000 8083 	beq.w	810393c <HAL_RCC_GetSysClockFreq+0x204>
 8103836:	697b      	ldr	r3, [r7, #20]
 8103838:	2b02      	cmp	r3, #2
 810383a:	f200 80a1 	bhi.w	8103980 <HAL_RCC_GetSysClockFreq+0x248>
 810383e:	697b      	ldr	r3, [r7, #20]
 8103840:	2b00      	cmp	r3, #0
 8103842:	d003      	beq.n	810384c <HAL_RCC_GetSysClockFreq+0x114>
 8103844:	697b      	ldr	r3, [r7, #20]
 8103846:	2b01      	cmp	r3, #1
 8103848:	d056      	beq.n	81038f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810384a:	e099      	b.n	8103980 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810384c:	4b6f      	ldr	r3, [pc, #444]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810384e:	681b      	ldr	r3, [r3, #0]
 8103850:	f003 0320 	and.w	r3, r3, #32
 8103854:	2b00      	cmp	r3, #0
 8103856:	d02d      	beq.n	81038b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103858:	4b6c      	ldr	r3, [pc, #432]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	08db      	lsrs	r3, r3, #3
 810385e:	f003 0303 	and.w	r3, r3, #3
 8103862:	4a6b      	ldr	r2, [pc, #428]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103864:	fa22 f303 	lsr.w	r3, r2, r3
 8103868:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	ee07 3a90 	vmov	s15, r3
 8103870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103874:	693b      	ldr	r3, [r7, #16]
 8103876:	ee07 3a90 	vmov	s15, r3
 810387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810387e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103882:	4b62      	ldr	r3, [pc, #392]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810388a:	ee07 3a90 	vmov	s15, r3
 810388e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103892:	ed97 6a02 	vldr	s12, [r7, #8]
 8103896:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 810389a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810389e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81038b2:	e087      	b.n	81039c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038b4:	693b      	ldr	r3, [r7, #16]
 81038b6:	ee07 3a90 	vmov	s15, r3
 81038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e8>
 81038c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038c6:	4b51      	ldr	r3, [pc, #324]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038ce:	ee07 3a90 	vmov	s15, r3
 81038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81038da:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 81038de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81038f6:	e065      	b.n	81039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038f8:	693b      	ldr	r3, [r7, #16]
 81038fa:	ee07 3a90 	vmov	s15, r3
 81038fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103902:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810390a:	4b40      	ldr	r3, [pc, #256]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810390e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103912:	ee07 3a90 	vmov	s15, r3
 8103916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810391a:	ed97 6a02 	vldr	s12, [r7, #8]
 810391e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810392a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810392e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103936:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810393a:	e043      	b.n	81039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810393c:	693b      	ldr	r3, [r7, #16]
 810393e:	ee07 3a90 	vmov	s15, r3
 8103942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103946:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103a28 <HAL_RCC_GetSysClockFreq+0x2f0>
 810394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810394e:	4b2f      	ldr	r3, [pc, #188]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103956:	ee07 3a90 	vmov	s15, r3
 810395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103962:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103976:	ee67 7a27 	vmul.f32	s15, s14, s15
 810397a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810397e:	e021      	b.n	81039c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103980:	693b      	ldr	r3, [r7, #16]
 8103982:	ee07 3a90 	vmov	s15, r3
 8103986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810398a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103a24 <HAL_RCC_GetSysClockFreq+0x2ec>
 810398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103992:	4b1e      	ldr	r3, [pc, #120]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810399a:	ee07 3a90 	vmov	s15, r3
 810399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81039a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103a1c <HAL_RCC_GetSysClockFreq+0x2e4>
 81039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81039c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81039c4:	4b11      	ldr	r3, [pc, #68]	; (8103a0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039c8:	0a5b      	lsrs	r3, r3, #9
 81039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81039ce:	3301      	adds	r3, #1
 81039d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81039d2:	683b      	ldr	r3, [r7, #0]
 81039d4:	ee07 3a90 	vmov	s15, r3
 81039d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81039dc:	edd7 6a07 	vldr	s13, [r7, #28]
 81039e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81039e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81039e8:	ee17 3a90 	vmov	r3, s15
 81039ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81039ee:	e005      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81039f0:	2300      	movs	r3, #0
 81039f2:	61bb      	str	r3, [r7, #24]
      break;
 81039f4:	e002      	b.n	81039fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81039f6:	4b07      	ldr	r3, [pc, #28]	; (8103a14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81039f8:	61bb      	str	r3, [r7, #24]
      break;
 81039fa:	bf00      	nop
  }

  return sysclockfreq;
 81039fc:	69bb      	ldr	r3, [r7, #24]
}
 81039fe:	4618      	mov	r0, r3
 8103a00:	3724      	adds	r7, #36	; 0x24
 8103a02:	46bd      	mov	sp, r7
 8103a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a08:	4770      	bx	lr
 8103a0a:	bf00      	nop
 8103a0c:	58024400 	.word	0x58024400
 8103a10:	03d09000 	.word	0x03d09000
 8103a14:	003d0900 	.word	0x003d0900
 8103a18:	017d7840 	.word	0x017d7840
 8103a1c:	46000000 	.word	0x46000000
 8103a20:	4c742400 	.word	0x4c742400
 8103a24:	4a742400 	.word	0x4a742400
 8103a28:	4bbebc20 	.word	0x4bbebc20

08103a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103a2c:	b580      	push	{r7, lr}
 8103a2e:	b082      	sub	sp, #8
 8103a30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103a32:	f7ff fe81 	bl	8103738 <HAL_RCC_GetSysClockFreq>
 8103a36:	4602      	mov	r2, r0
 8103a38:	4b11      	ldr	r3, [pc, #68]	; (8103a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a3a:	699b      	ldr	r3, [r3, #24]
 8103a3c:	0a1b      	lsrs	r3, r3, #8
 8103a3e:	f003 030f 	and.w	r3, r3, #15
 8103a42:	4910      	ldr	r1, [pc, #64]	; (8103a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a44:	5ccb      	ldrb	r3, [r1, r3]
 8103a46:	f003 031f 	and.w	r3, r3, #31
 8103a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8103a4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a50:	4b0b      	ldr	r3, [pc, #44]	; (8103a80 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a52:	699b      	ldr	r3, [r3, #24]
 8103a54:	f003 030f 	and.w	r3, r3, #15
 8103a58:	4a0a      	ldr	r2, [pc, #40]	; (8103a84 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a5a:	5cd3      	ldrb	r3, [r2, r3]
 8103a5c:	f003 031f 	and.w	r3, r3, #31
 8103a60:	687a      	ldr	r2, [r7, #4]
 8103a62:	fa22 f303 	lsr.w	r3, r2, r3
 8103a66:	4a08      	ldr	r2, [pc, #32]	; (8103a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a68:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a6a:	4b07      	ldr	r3, [pc, #28]	; (8103a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	4a07      	ldr	r2, [pc, #28]	; (8103a8c <HAL_RCC_GetHCLKFreq+0x60>)
 8103a70:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103a72:	4b05      	ldr	r3, [pc, #20]	; (8103a88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a74:	681b      	ldr	r3, [r3, #0]
}
 8103a76:	4618      	mov	r0, r3
 8103a78:	3708      	adds	r7, #8
 8103a7a:	46bd      	mov	sp, r7
 8103a7c:	bd80      	pop	{r7, pc}
 8103a7e:	bf00      	nop
 8103a80:	58024400 	.word	0x58024400
 8103a84:	081074ec 	.word	0x081074ec
 8103a88:	10000004 	.word	0x10000004
 8103a8c:	10000000 	.word	0x10000000

08103a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103a90:	b580      	push	{r7, lr}
 8103a92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103a94:	f7ff ffca 	bl	8103a2c <HAL_RCC_GetHCLKFreq>
 8103a98:	4602      	mov	r2, r0
 8103a9a:	4b06      	ldr	r3, [pc, #24]	; (8103ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103a9c:	69db      	ldr	r3, [r3, #28]
 8103a9e:	091b      	lsrs	r3, r3, #4
 8103aa0:	f003 0307 	and.w	r3, r3, #7
 8103aa4:	4904      	ldr	r1, [pc, #16]	; (8103ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103aa6:	5ccb      	ldrb	r3, [r1, r3]
 8103aa8:	f003 031f 	and.w	r3, r3, #31
 8103aac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103ab0:	4618      	mov	r0, r3
 8103ab2:	bd80      	pop	{r7, pc}
 8103ab4:	58024400 	.word	0x58024400
 8103ab8:	081074ec 	.word	0x081074ec

08103abc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103ac0:	b0ca      	sub	sp, #296	; 0x128
 8103ac2:	af00      	add	r7, sp, #0
 8103ac4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103ac8:	2300      	movs	r3, #0
 8103aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103ace:	2300      	movs	r3, #0
 8103ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103adc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103ae0:	2500      	movs	r5, #0
 8103ae2:	ea54 0305 	orrs.w	r3, r4, r5
 8103ae6:	d049      	beq.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103af2:	d02f      	beq.n	8103b54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103af4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103af8:	d828      	bhi.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103afe:	d01a      	beq.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b04:	d822      	bhi.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103b06:	2b00      	cmp	r3, #0
 8103b08:	d003      	beq.n	8103b12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b0e:	d007      	beq.n	8103b20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103b10:	e01c      	b.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b12:	4bb8      	ldr	r3, [pc, #736]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b16:	4ab7      	ldr	r2, [pc, #732]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b1e:	e01a      	b.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b24:	3308      	adds	r3, #8
 8103b26:	2102      	movs	r1, #2
 8103b28:	4618      	mov	r0, r3
 8103b2a:	f002 fb61 	bl	81061f0 <RCCEx_PLL2_Config>
 8103b2e:	4603      	mov	r3, r0
 8103b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b34:	e00f      	b.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b3a:	3328      	adds	r3, #40	; 0x28
 8103b3c:	2102      	movs	r1, #2
 8103b3e:	4618      	mov	r0, r3
 8103b40:	f002 fc08 	bl	8106354 <RCCEx_PLL3_Config>
 8103b44:	4603      	mov	r3, r0
 8103b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b4a:	e004      	b.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b4c:	2301      	movs	r3, #1
 8103b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103b52:	e000      	b.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d10a      	bne.n	8103b74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103b5e:	4ba5      	ldr	r3, [pc, #660]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103b6c:	4aa1      	ldr	r2, [pc, #644]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b6e:	430b      	orrs	r3, r1
 8103b70:	6513      	str	r3, [r2, #80]	; 0x50
 8103b72:	e003      	b.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b84:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8103b88:	f04f 0900 	mov.w	r9, #0
 8103b8c:	ea58 0309 	orrs.w	r3, r8, r9
 8103b90:	d047      	beq.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b98:	2b04      	cmp	r3, #4
 8103b9a:	d82a      	bhi.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103b9c:	a201      	add	r2, pc, #4	; (adr r2, 8103ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ba2:	bf00      	nop
 8103ba4:	08103bb9 	.word	0x08103bb9
 8103ba8:	08103bc7 	.word	0x08103bc7
 8103bac:	08103bdd 	.word	0x08103bdd
 8103bb0:	08103bfb 	.word	0x08103bfb
 8103bb4:	08103bfb 	.word	0x08103bfb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bb8:	4b8e      	ldr	r3, [pc, #568]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bbc:	4a8d      	ldr	r2, [pc, #564]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103bc4:	e01a      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bca:	3308      	adds	r3, #8
 8103bcc:	2100      	movs	r1, #0
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f002 fb0e 	bl	81061f0 <RCCEx_PLL2_Config>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103bda:	e00f      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103be0:	3328      	adds	r3, #40	; 0x28
 8103be2:	2100      	movs	r1, #0
 8103be4:	4618      	mov	r0, r3
 8103be6:	f002 fbb5 	bl	8106354 <RCCEx_PLL3_Config>
 8103bea:	4603      	mov	r3, r0
 8103bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103bf0:	e004      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bf2:	2301      	movs	r3, #1
 8103bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103bf8:	e000      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d10a      	bne.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103c04:	4b7b      	ldr	r3, [pc, #492]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c08:	f023 0107 	bic.w	r1, r3, #7
 8103c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c12:	4a78      	ldr	r2, [pc, #480]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c14:	430b      	orrs	r3, r1
 8103c16:	6513      	str	r3, [r2, #80]	; 0x50
 8103c18:	e003      	b.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c2a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8103c2e:	f04f 0b00 	mov.w	fp, #0
 8103c32:	ea5a 030b 	orrs.w	r3, sl, fp
 8103c36:	d04c      	beq.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c42:	d030      	beq.n	8103ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c48:	d829      	bhi.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c4a:	2bc0      	cmp	r3, #192	; 0xc0
 8103c4c:	d02d      	beq.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8103c50:	d825      	bhi.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c52:	2b80      	cmp	r3, #128	; 0x80
 8103c54:	d018      	beq.n	8103c88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103c56:	2b80      	cmp	r3, #128	; 0x80
 8103c58:	d821      	bhi.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c5a:	2b00      	cmp	r3, #0
 8103c5c:	d002      	beq.n	8103c64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103c5e:	2b40      	cmp	r3, #64	; 0x40
 8103c60:	d007      	beq.n	8103c72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103c62:	e01c      	b.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c64:	4b63      	ldr	r3, [pc, #396]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c68:	4a62      	ldr	r2, [pc, #392]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103c70:	e01c      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c76:	3308      	adds	r3, #8
 8103c78:	2100      	movs	r1, #0
 8103c7a:	4618      	mov	r0, r3
 8103c7c:	f002 fab8 	bl	81061f0 <RCCEx_PLL2_Config>
 8103c80:	4603      	mov	r3, r0
 8103c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103c86:	e011      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c8c:	3328      	adds	r3, #40	; 0x28
 8103c8e:	2100      	movs	r1, #0
 8103c90:	4618      	mov	r0, r3
 8103c92:	f002 fb5f 	bl	8106354 <RCCEx_PLL3_Config>
 8103c96:	4603      	mov	r3, r0
 8103c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103c9c:	e006      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c9e:	2301      	movs	r3, #1
 8103ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103ca4:	e002      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103ca6:	bf00      	nop
 8103ca8:	e000      	b.n	8103cac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d10a      	bne.n	8103cca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103cb4:	4b4f      	ldr	r3, [pc, #316]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cb8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cc2:	4a4c      	ldr	r2, [pc, #304]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103cc4:	430b      	orrs	r3, r1
 8103cc6:	6513      	str	r3, [r2, #80]	; 0x50
 8103cc8:	e003      	b.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103cce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cda:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103cde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103ce2:	2300      	movs	r3, #0
 8103ce4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8103ce8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103cec:	460b      	mov	r3, r1
 8103cee:	4313      	orrs	r3, r2
 8103cf0:	d053      	beq.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103cfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103cfe:	d035      	beq.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103d04:	d82e      	bhi.n	8103d64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103d0a:	d031      	beq.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103d0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103d10:	d828      	bhi.n	8103d64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d16:	d01a      	beq.n	8103d4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d1c:	d822      	bhi.n	8103d64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	d003      	beq.n	8103d2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d26:	d007      	beq.n	8103d38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103d28:	e01c      	b.n	8103d64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d2a:	4b32      	ldr	r3, [pc, #200]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d2e:	4a31      	ldr	r2, [pc, #196]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103d36:	e01c      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d3c:	3308      	adds	r3, #8
 8103d3e:	2100      	movs	r1, #0
 8103d40:	4618      	mov	r0, r3
 8103d42:	f002 fa55 	bl	81061f0 <RCCEx_PLL2_Config>
 8103d46:	4603      	mov	r3, r0
 8103d48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103d4c:	e011      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d52:	3328      	adds	r3, #40	; 0x28
 8103d54:	2100      	movs	r1, #0
 8103d56:	4618      	mov	r0, r3
 8103d58:	f002 fafc 	bl	8106354 <RCCEx_PLL3_Config>
 8103d5c:	4603      	mov	r3, r0
 8103d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103d62:	e006      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103d64:	2301      	movs	r3, #1
 8103d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103d6a:	e002      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103d6c:	bf00      	nop
 8103d6e:	e000      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103d76:	2b00      	cmp	r3, #0
 8103d78:	d10b      	bne.n	8103d92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103d7a:	4b1e      	ldr	r3, [pc, #120]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d7e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8103d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103d8a:	4a1a      	ldr	r2, [pc, #104]	; (8103df4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d8c:	430b      	orrs	r3, r1
 8103d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8103d90:	e003      	b.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103da2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8103da6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8103daa:	2300      	movs	r3, #0
 8103dac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8103db0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8103db4:	460b      	mov	r3, r1
 8103db6:	4313      	orrs	r3, r2
 8103db8:	d056      	beq.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103dc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103dc6:	d038      	beq.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103dcc:	d831      	bhi.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103dce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103dd2:	d034      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103dd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103dd8:	d82b      	bhi.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103dda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103dde:	d01d      	beq.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103de0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103de4:	d825      	bhi.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103de6:	2b00      	cmp	r3, #0
 8103de8:	d006      	beq.n	8103df8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103dea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103dee:	d00a      	beq.n	8103e06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103df0:	e01f      	b.n	8103e32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103df2:	bf00      	nop
 8103df4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103df8:	4ba2      	ldr	r3, [pc, #648]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dfc:	4aa1      	ldr	r2, [pc, #644]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e04:	e01c      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e0a:	3308      	adds	r3, #8
 8103e0c:	2100      	movs	r1, #0
 8103e0e:	4618      	mov	r0, r3
 8103e10:	f002 f9ee 	bl	81061f0 <RCCEx_PLL2_Config>
 8103e14:	4603      	mov	r3, r0
 8103e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103e1a:	e011      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e20:	3328      	adds	r3, #40	; 0x28
 8103e22:	2100      	movs	r1, #0
 8103e24:	4618      	mov	r0, r3
 8103e26:	f002 fa95 	bl	8106354 <RCCEx_PLL3_Config>
 8103e2a:	4603      	mov	r3, r0
 8103e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e30:	e006      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103e32:	2301      	movs	r3, #1
 8103e34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103e38:	e002      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103e3a:	bf00      	nop
 8103e3c:	e000      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e44:	2b00      	cmp	r3, #0
 8103e46:	d10b      	bne.n	8103e60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103e48:	4b8e      	ldr	r3, [pc, #568]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e4c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e58:	4a8a      	ldr	r2, [pc, #552]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e5a:	430b      	orrs	r3, r1
 8103e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8103e5e:	e003      	b.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e70:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103e74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103e78:	2300      	movs	r3, #0
 8103e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103e7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103e82:	460b      	mov	r3, r1
 8103e84:	4313      	orrs	r3, r2
 8103e86:	d03a      	beq.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e8e:	2b30      	cmp	r3, #48	; 0x30
 8103e90:	d01f      	beq.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103e92:	2b30      	cmp	r3, #48	; 0x30
 8103e94:	d819      	bhi.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103e96:	2b20      	cmp	r3, #32
 8103e98:	d00c      	beq.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103e9a:	2b20      	cmp	r3, #32
 8103e9c:	d815      	bhi.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d019      	beq.n	8103ed6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103ea2:	2b10      	cmp	r3, #16
 8103ea4:	d111      	bne.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ea6:	4b77      	ldr	r3, [pc, #476]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eaa:	4a76      	ldr	r2, [pc, #472]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103eb2:	e011      	b.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eb8:	3308      	adds	r3, #8
 8103eba:	2102      	movs	r1, #2
 8103ebc:	4618      	mov	r0, r3
 8103ebe:	f002 f997 	bl	81061f0 <RCCEx_PLL2_Config>
 8103ec2:	4603      	mov	r3, r0
 8103ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103ec8:	e006      	b.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103eca:	2301      	movs	r3, #1
 8103ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103ed0:	e002      	b.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103ed2:	bf00      	nop
 8103ed4:	e000      	b.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103ed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103edc:	2b00      	cmp	r3, #0
 8103ede:	d10a      	bne.n	8103ef6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103ee0:	4b68      	ldr	r3, [pc, #416]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ee4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eee:	4a65      	ldr	r2, [pc, #404]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ef0:	430b      	orrs	r3, r1
 8103ef2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103ef4:	e003      	b.n	8103efe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103efa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f06:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103f0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8103f0e:	2300      	movs	r3, #0
 8103f10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8103f14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8103f18:	460b      	mov	r3, r1
 8103f1a:	4313      	orrs	r3, r2
 8103f1c:	d051      	beq.n	8103fc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103f28:	d035      	beq.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103f2e:	d82e      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103f34:	d031      	beq.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103f3a:	d828      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103f40:	d01a      	beq.n	8103f78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103f46:	d822      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f48:	2b00      	cmp	r3, #0
 8103f4a:	d003      	beq.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f50:	d007      	beq.n	8103f62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103f52:	e01c      	b.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f54:	4b4b      	ldr	r3, [pc, #300]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f58:	4a4a      	ldr	r2, [pc, #296]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103f60:	e01c      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f66:	3308      	adds	r3, #8
 8103f68:	2100      	movs	r1, #0
 8103f6a:	4618      	mov	r0, r3
 8103f6c:	f002 f940 	bl	81061f0 <RCCEx_PLL2_Config>
 8103f70:	4603      	mov	r3, r0
 8103f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103f76:	e011      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f7c:	3328      	adds	r3, #40	; 0x28
 8103f7e:	2100      	movs	r1, #0
 8103f80:	4618      	mov	r0, r3
 8103f82:	f002 f9e7 	bl	8106354 <RCCEx_PLL3_Config>
 8103f86:	4603      	mov	r3, r0
 8103f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103f8c:	e006      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f8e:	2301      	movs	r3, #1
 8103f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103f94:	e002      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103f96:	bf00      	nop
 8103f98:	e000      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103f9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d10a      	bne.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103fa4:	4b37      	ldr	r3, [pc, #220]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fa8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103fb2:	4a34      	ldr	r2, [pc, #208]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103fb4:	430b      	orrs	r3, r1
 8103fb6:	6513      	str	r3, [r2, #80]	; 0x50
 8103fb8:	e003      	b.n	8103fc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8103fd2:	2300      	movs	r3, #0
 8103fd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8103fd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8103fdc:	460b      	mov	r3, r1
 8103fde:	4313      	orrs	r3, r2
 8103fe0:	d056      	beq.n	8104090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103fec:	d033      	beq.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103ff2:	d82c      	bhi.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103ff8:	d02f      	beq.n	810405a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103ffe:	d826      	bhi.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104000:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104004:	d02b      	beq.n	810405e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810400a:	d820      	bhi.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810400c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104010:	d012      	beq.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104016:	d81a      	bhi.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104018:	2b00      	cmp	r3, #0
 810401a:	d022      	beq.n	8104062 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810401c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104020:	d115      	bne.n	810404e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104026:	3308      	adds	r3, #8
 8104028:	2101      	movs	r1, #1
 810402a:	4618      	mov	r0, r3
 810402c:	f002 f8e0 	bl	81061f0 <RCCEx_PLL2_Config>
 8104030:	4603      	mov	r3, r0
 8104032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104036:	e015      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810403c:	3328      	adds	r3, #40	; 0x28
 810403e:	2101      	movs	r1, #1
 8104040:	4618      	mov	r0, r3
 8104042:	f002 f987 	bl	8106354 <RCCEx_PLL3_Config>
 8104046:	4603      	mov	r3, r0
 8104048:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810404c:	e00a      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810404e:	2301      	movs	r3, #1
 8104050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104054:	e006      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104056:	bf00      	nop
 8104058:	e004      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810405a:	bf00      	nop
 810405c:	e002      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810405e:	bf00      	nop
 8104060:	e000      	b.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104068:	2b00      	cmp	r3, #0
 810406a:	d10d      	bne.n	8104088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810406c:	4b05      	ldr	r3, [pc, #20]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104070:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8104074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810407a:	4a02      	ldr	r2, [pc, #8]	; (8104084 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810407c:	430b      	orrs	r3, r1
 810407e:	6513      	str	r3, [r2, #80]	; 0x50
 8104080:	e006      	b.n	8104090 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104082:	bf00      	nop
 8104084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810408c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104098:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 810409c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81040a0:	2300      	movs	r3, #0
 81040a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81040a6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81040aa:	460b      	mov	r3, r1
 81040ac:	4313      	orrs	r3, r2
 81040ae:	d055      	beq.n	810415c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040bc:	d033      	beq.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81040be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040c2:	d82c      	bhi.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040c8:	d02f      	beq.n	810412a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81040ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040ce:	d826      	bhi.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81040d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81040d4:	d02b      	beq.n	810412e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81040d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81040da:	d820      	bhi.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81040dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81040e0:	d012      	beq.n	8104108 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81040e6:	d81a      	bhi.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81040e8:	2b00      	cmp	r3, #0
 81040ea:	d022      	beq.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81040ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81040f0:	d115      	bne.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81040f6:	3308      	adds	r3, #8
 81040f8:	2101      	movs	r1, #1
 81040fa:	4618      	mov	r0, r3
 81040fc:	f002 f878 	bl	81061f0 <RCCEx_PLL2_Config>
 8104100:	4603      	mov	r3, r0
 8104102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104106:	e015      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810410c:	3328      	adds	r3, #40	; 0x28
 810410e:	2101      	movs	r1, #1
 8104110:	4618      	mov	r0, r3
 8104112:	f002 f91f 	bl	8106354 <RCCEx_PLL3_Config>
 8104116:	4603      	mov	r3, r0
 8104118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810411c:	e00a      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810411e:	2301      	movs	r3, #1
 8104120:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104124:	e006      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104126:	bf00      	nop
 8104128:	e004      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810412a:	bf00      	nop
 810412c:	e002      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810412e:	bf00      	nop
 8104130:	e000      	b.n	8104134 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104138:	2b00      	cmp	r3, #0
 810413a:	d10b      	bne.n	8104154 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810413c:	4ba4      	ldr	r3, [pc, #656]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104140:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810414c:	4aa0      	ldr	r2, [pc, #640]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810414e:	430b      	orrs	r3, r1
 8104150:	6593      	str	r3, [r2, #88]	; 0x58
 8104152:	e003      	b.n	810415c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104164:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8104168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810416c:	2300      	movs	r3, #0
 810416e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8104172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8104176:	460b      	mov	r3, r1
 8104178:	4313      	orrs	r3, r2
 810417a:	d037      	beq.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104186:	d00e      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810418c:	d816      	bhi.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 810418e:	2b00      	cmp	r3, #0
 8104190:	d018      	beq.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104196:	d111      	bne.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104198:	4b8d      	ldr	r3, [pc, #564]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810419c:	4a8c      	ldr	r2, [pc, #560]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810419e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81041a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81041a4:	e00f      	b.n	81041c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041aa:	3308      	adds	r3, #8
 81041ac:	2101      	movs	r1, #1
 81041ae:	4618      	mov	r0, r3
 81041b0:	f002 f81e 	bl	81061f0 <RCCEx_PLL2_Config>
 81041b4:	4603      	mov	r3, r0
 81041b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81041ba:	e004      	b.n	81041c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041bc:	2301      	movs	r3, #1
 81041be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81041c2:	e000      	b.n	81041c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81041c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81041ca:	2b00      	cmp	r3, #0
 81041cc:	d10a      	bne.n	81041e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81041ce:	4b80      	ldr	r3, [pc, #512]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81041d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041d2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81041dc:	4a7c      	ldr	r2, [pc, #496]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81041de:	430b      	orrs	r3, r1
 81041e0:	6513      	str	r3, [r2, #80]	; 0x50
 81041e2:	e003      	b.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81041e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041f4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81041f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81041fc:	2300      	movs	r3, #0
 81041fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8104202:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8104206:	460b      	mov	r3, r1
 8104208:	4313      	orrs	r3, r2
 810420a:	d039      	beq.n	8104280 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104212:	2b03      	cmp	r3, #3
 8104214:	d81c      	bhi.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8104216:	a201      	add	r2, pc, #4	; (adr r2, 810421c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810421c:	08104259 	.word	0x08104259
 8104220:	0810422d 	.word	0x0810422d
 8104224:	0810423b 	.word	0x0810423b
 8104228:	08104259 	.word	0x08104259
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810422c:	4b68      	ldr	r3, [pc, #416]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104230:	4a67      	ldr	r2, [pc, #412]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8104238:	e00f      	b.n	810425a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810423e:	3308      	adds	r3, #8
 8104240:	2102      	movs	r1, #2
 8104242:	4618      	mov	r0, r3
 8104244:	f001 ffd4 	bl	81061f0 <RCCEx_PLL2_Config>
 8104248:	4603      	mov	r3, r0
 810424a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810424e:	e004      	b.n	810425a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104250:	2301      	movs	r3, #1
 8104252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104256:	e000      	b.n	810425a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8104258:	bf00      	nop
    }

    if (ret == HAL_OK)
 810425a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810425e:	2b00      	cmp	r3, #0
 8104260:	d10a      	bne.n	8104278 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8104262:	4b5b      	ldr	r3, [pc, #364]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104266:	f023 0103 	bic.w	r1, r3, #3
 810426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104270:	4a57      	ldr	r2, [pc, #348]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104272:	430b      	orrs	r3, r1
 8104274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104276:	e003      	b.n	8104280 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810427c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104288:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 810428c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104290:	2300      	movs	r3, #0
 8104292:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8104296:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810429a:	460b      	mov	r3, r1
 810429c:	4313      	orrs	r3, r2
 810429e:	f000 809f 	beq.w	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81042a2:	4b4c      	ldr	r3, [pc, #304]	; (81043d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	4a4b      	ldr	r2, [pc, #300]	; (81043d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81042ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81042ae:	f7fc fff5 	bl	810129c <HAL_GetTick>
 81042b2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81042b6:	e00b      	b.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81042b8:	f7fc fff0 	bl	810129c <HAL_GetTick>
 81042bc:	4602      	mov	r2, r0
 81042be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81042c2:	1ad3      	subs	r3, r2, r3
 81042c4:	2b64      	cmp	r3, #100	; 0x64
 81042c6:	d903      	bls.n	81042d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81042c8:	2303      	movs	r3, #3
 81042ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81042ce:	e005      	b.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81042d0:	4b40      	ldr	r3, [pc, #256]	; (81043d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81042d2:	681b      	ldr	r3, [r3, #0]
 81042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81042d8:	2b00      	cmp	r3, #0
 81042da:	d0ed      	beq.n	81042b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81042dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81042e0:	2b00      	cmp	r3, #0
 81042e2:	d179      	bne.n	81043d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81042e4:	4b3a      	ldr	r3, [pc, #232]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81042e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81042e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81042f0:	4053      	eors	r3, r2
 81042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d015      	beq.n	8104326 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81042fa:	4b35      	ldr	r3, [pc, #212]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81042fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104302:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104306:	4b32      	ldr	r3, [pc, #200]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810430a:	4a31      	ldr	r2, [pc, #196]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104310:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104312:	4b2f      	ldr	r3, [pc, #188]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104316:	4a2e      	ldr	r2, [pc, #184]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810431c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810431e:	4a2c      	ldr	r2, [pc, #176]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104324:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810432a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810432e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104332:	d118      	bne.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104334:	f7fc ffb2 	bl	810129c <HAL_GetTick>
 8104338:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810433c:	e00d      	b.n	810435a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810433e:	f7fc ffad 	bl	810129c <HAL_GetTick>
 8104342:	4602      	mov	r2, r0
 8104344:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8104348:	1ad2      	subs	r2, r2, r3
 810434a:	f241 3388 	movw	r3, #5000	; 0x1388
 810434e:	429a      	cmp	r2, r3
 8104350:	d903      	bls.n	810435a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8104352:	2303      	movs	r3, #3
 8104354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8104358:	e005      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810435a:	4b1d      	ldr	r3, [pc, #116]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810435e:	f003 0302 	and.w	r3, r3, #2
 8104362:	2b00      	cmp	r3, #0
 8104364:	d0eb      	beq.n	810433e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8104366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810436a:	2b00      	cmp	r3, #0
 810436c:	d12b      	bne.n	81043c6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810437a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810437e:	d110      	bne.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8104380:	4b13      	ldr	r3, [pc, #76]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104382:	691b      	ldr	r3, [r3, #16]
 8104384:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8104388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810438c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104390:	091b      	lsrs	r3, r3, #4
 8104392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104396:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810439a:	4a0d      	ldr	r2, [pc, #52]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810439c:	430b      	orrs	r3, r1
 810439e:	6113      	str	r3, [r2, #16]
 81043a0:	e005      	b.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81043a2:	4b0b      	ldr	r3, [pc, #44]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043a4:	691b      	ldr	r3, [r3, #16]
 81043a6:	4a0a      	ldr	r2, [pc, #40]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81043ac:	6113      	str	r3, [r2, #16]
 81043ae:	4b08      	ldr	r3, [pc, #32]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81043ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81043be:	4a04      	ldr	r2, [pc, #16]	; (81043d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043c0:	430b      	orrs	r3, r1
 81043c2:	6713      	str	r3, [r2, #112]	; 0x70
 81043c4:	e00c      	b.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81043c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81043ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81043ce:	e007      	b.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81043d0:	58024400 	.word	0x58024400
 81043d4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81043dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043e8:	f002 0301 	and.w	r3, r2, #1
 81043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81043f0:	2300      	movs	r3, #0
 81043f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81043f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81043fa:	460b      	mov	r3, r1
 81043fc:	4313      	orrs	r3, r2
 81043fe:	f000 8089 	beq.w	8104514 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104408:	2b28      	cmp	r3, #40	; 0x28
 810440a:	d86b      	bhi.n	81044e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810440c:	a201      	add	r2, pc, #4	; (adr r2, 8104414 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104412:	bf00      	nop
 8104414:	081044ed 	.word	0x081044ed
 8104418:	081044e5 	.word	0x081044e5
 810441c:	081044e5 	.word	0x081044e5
 8104420:	081044e5 	.word	0x081044e5
 8104424:	081044e5 	.word	0x081044e5
 8104428:	081044e5 	.word	0x081044e5
 810442c:	081044e5 	.word	0x081044e5
 8104430:	081044e5 	.word	0x081044e5
 8104434:	081044b9 	.word	0x081044b9
 8104438:	081044e5 	.word	0x081044e5
 810443c:	081044e5 	.word	0x081044e5
 8104440:	081044e5 	.word	0x081044e5
 8104444:	081044e5 	.word	0x081044e5
 8104448:	081044e5 	.word	0x081044e5
 810444c:	081044e5 	.word	0x081044e5
 8104450:	081044e5 	.word	0x081044e5
 8104454:	081044cf 	.word	0x081044cf
 8104458:	081044e5 	.word	0x081044e5
 810445c:	081044e5 	.word	0x081044e5
 8104460:	081044e5 	.word	0x081044e5
 8104464:	081044e5 	.word	0x081044e5
 8104468:	081044e5 	.word	0x081044e5
 810446c:	081044e5 	.word	0x081044e5
 8104470:	081044e5 	.word	0x081044e5
 8104474:	081044ed 	.word	0x081044ed
 8104478:	081044e5 	.word	0x081044e5
 810447c:	081044e5 	.word	0x081044e5
 8104480:	081044e5 	.word	0x081044e5
 8104484:	081044e5 	.word	0x081044e5
 8104488:	081044e5 	.word	0x081044e5
 810448c:	081044e5 	.word	0x081044e5
 8104490:	081044e5 	.word	0x081044e5
 8104494:	081044ed 	.word	0x081044ed
 8104498:	081044e5 	.word	0x081044e5
 810449c:	081044e5 	.word	0x081044e5
 81044a0:	081044e5 	.word	0x081044e5
 81044a4:	081044e5 	.word	0x081044e5
 81044a8:	081044e5 	.word	0x081044e5
 81044ac:	081044e5 	.word	0x081044e5
 81044b0:	081044e5 	.word	0x081044e5
 81044b4:	081044ed 	.word	0x081044ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81044b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044bc:	3308      	adds	r3, #8
 81044be:	2101      	movs	r1, #1
 81044c0:	4618      	mov	r0, r3
 81044c2:	f001 fe95 	bl	81061f0 <RCCEx_PLL2_Config>
 81044c6:	4603      	mov	r3, r0
 81044c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81044cc:	e00f      	b.n	81044ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044d2:	3328      	adds	r3, #40	; 0x28
 81044d4:	2101      	movs	r1, #1
 81044d6:	4618      	mov	r0, r3
 81044d8:	f001 ff3c 	bl	8106354 <RCCEx_PLL3_Config>
 81044dc:	4603      	mov	r3, r0
 81044de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81044e2:	e004      	b.n	81044ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044e4:	2301      	movs	r3, #1
 81044e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81044ea:	e000      	b.n	81044ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81044ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d10a      	bne.n	810450c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81044f6:	4bbf      	ldr	r3, [pc, #764]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044fa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104504:	4abb      	ldr	r2, [pc, #748]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104506:	430b      	orrs	r3, r1
 8104508:	6553      	str	r3, [r2, #84]	; 0x54
 810450a:	e003      	b.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810450c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104518:	e9d3 2300 	ldrd	r2, r3, [r3]
 810451c:	f002 0302 	and.w	r3, r2, #2
 8104520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104524:	2300      	movs	r3, #0
 8104526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810452a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810452e:	460b      	mov	r3, r1
 8104530:	4313      	orrs	r3, r2
 8104532:	d041      	beq.n	81045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810453a:	2b05      	cmp	r3, #5
 810453c:	d824      	bhi.n	8104588 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810453e:	a201      	add	r2, pc, #4	; (adr r2, 8104544 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8104540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104544:	08104591 	.word	0x08104591
 8104548:	0810455d 	.word	0x0810455d
 810454c:	08104573 	.word	0x08104573
 8104550:	08104591 	.word	0x08104591
 8104554:	08104591 	.word	0x08104591
 8104558:	08104591 	.word	0x08104591
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104560:	3308      	adds	r3, #8
 8104562:	2101      	movs	r1, #1
 8104564:	4618      	mov	r0, r3
 8104566:	f001 fe43 	bl	81061f0 <RCCEx_PLL2_Config>
 810456a:	4603      	mov	r3, r0
 810456c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104570:	e00f      	b.n	8104592 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104576:	3328      	adds	r3, #40	; 0x28
 8104578:	2101      	movs	r1, #1
 810457a:	4618      	mov	r0, r3
 810457c:	f001 feea 	bl	8106354 <RCCEx_PLL3_Config>
 8104580:	4603      	mov	r3, r0
 8104582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104586:	e004      	b.n	8104592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104588:	2301      	movs	r3, #1
 810458a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810458e:	e000      	b.n	8104592 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104596:	2b00      	cmp	r3, #0
 8104598:	d10a      	bne.n	81045b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810459a:	4b96      	ldr	r3, [pc, #600]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810459e:	f023 0107 	bic.w	r1, r3, #7
 81045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81045a8:	4a92      	ldr	r2, [pc, #584]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81045aa:	430b      	orrs	r3, r1
 81045ac:	6553      	str	r3, [r2, #84]	; 0x54
 81045ae:	e003      	b.n	81045b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81045b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81045b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045c0:	f002 0304 	and.w	r3, r2, #4
 81045c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81045c8:	2300      	movs	r3, #0
 81045ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81045ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81045d2:	460b      	mov	r3, r1
 81045d4:	4313      	orrs	r3, r2
 81045d6:	d044      	beq.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81045e0:	2b05      	cmp	r3, #5
 81045e2:	d825      	bhi.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81045e4:	a201      	add	r2, pc, #4	; (adr r2, 81045ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045ea:	bf00      	nop
 81045ec:	08104639 	.word	0x08104639
 81045f0:	08104605 	.word	0x08104605
 81045f4:	0810461b 	.word	0x0810461b
 81045f8:	08104639 	.word	0x08104639
 81045fc:	08104639 	.word	0x08104639
 8104600:	08104639 	.word	0x08104639
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104608:	3308      	adds	r3, #8
 810460a:	2101      	movs	r1, #1
 810460c:	4618      	mov	r0, r3
 810460e:	f001 fdef 	bl	81061f0 <RCCEx_PLL2_Config>
 8104612:	4603      	mov	r3, r0
 8104614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104618:	e00f      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810461e:	3328      	adds	r3, #40	; 0x28
 8104620:	2101      	movs	r1, #1
 8104622:	4618      	mov	r0, r3
 8104624:	f001 fe96 	bl	8106354 <RCCEx_PLL3_Config>
 8104628:	4603      	mov	r3, r0
 810462a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810462e:	e004      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104630:	2301      	movs	r3, #1
 8104632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104636:	e000      	b.n	810463a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104638:	bf00      	nop
    }

    if (ret == HAL_OK)
 810463a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810463e:	2b00      	cmp	r3, #0
 8104640:	d10b      	bne.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104642:	4b6c      	ldr	r3, [pc, #432]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104646:	f023 0107 	bic.w	r1, r3, #7
 810464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104652:	4a68      	ldr	r2, [pc, #416]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104654:	430b      	orrs	r3, r1
 8104656:	6593      	str	r3, [r2, #88]	; 0x58
 8104658:	e003      	b.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810465a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810465e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104666:	e9d3 2300 	ldrd	r2, r3, [r3]
 810466a:	f002 0320 	and.w	r3, r2, #32
 810466e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8104672:	2300      	movs	r3, #0
 8104674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810467c:	460b      	mov	r3, r1
 810467e:	4313      	orrs	r3, r2
 8104680:	d055      	beq.n	810472e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810468a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810468e:	d033      	beq.n	81046f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104694:	d82c      	bhi.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810469a:	d02f      	beq.n	81046fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81046a0:	d826      	bhi.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81046a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81046a6:	d02b      	beq.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81046a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81046ac:	d820      	bhi.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81046ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81046b2:	d012      	beq.n	81046da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81046b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81046b8:	d81a      	bhi.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81046ba:	2b00      	cmp	r3, #0
 81046bc:	d022      	beq.n	8104704 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81046be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81046c2:	d115      	bne.n	81046f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046c8:	3308      	adds	r3, #8
 81046ca:	2100      	movs	r1, #0
 81046cc:	4618      	mov	r0, r3
 81046ce:	f001 fd8f 	bl	81061f0 <RCCEx_PLL2_Config>
 81046d2:	4603      	mov	r3, r0
 81046d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81046d8:	e015      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046de:	3328      	adds	r3, #40	; 0x28
 81046e0:	2102      	movs	r1, #2
 81046e2:	4618      	mov	r0, r3
 81046e4:	f001 fe36 	bl	8106354 <RCCEx_PLL3_Config>
 81046e8:	4603      	mov	r3, r0
 81046ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81046ee:	e00a      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81046f0:	2301      	movs	r3, #1
 81046f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81046f6:	e006      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81046f8:	bf00      	nop
 81046fa:	e004      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81046fc:	bf00      	nop
 81046fe:	e002      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104700:	bf00      	nop
 8104702:	e000      	b.n	8104706 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810470a:	2b00      	cmp	r3, #0
 810470c:	d10b      	bne.n	8104726 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810470e:	4b39      	ldr	r3, [pc, #228]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104712:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810471e:	4a35      	ldr	r2, [pc, #212]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104720:	430b      	orrs	r3, r1
 8104722:	6553      	str	r3, [r2, #84]	; 0x54
 8104724:	e003      	b.n	810472e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810472a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104736:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810473a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810473e:	2300      	movs	r3, #0
 8104740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104744:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104748:	460b      	mov	r3, r1
 810474a:	4313      	orrs	r3, r2
 810474c:	d058      	beq.n	8104800 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104756:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810475a:	d033      	beq.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 810475c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104760:	d82c      	bhi.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104766:	d02f      	beq.n	81047c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8104768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810476c:	d826      	bhi.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810476e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104772:	d02b      	beq.n	81047cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8104774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104778:	d820      	bhi.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810477a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810477e:	d012      	beq.n	81047a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8104780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104784:	d81a      	bhi.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8104786:	2b00      	cmp	r3, #0
 8104788:	d022      	beq.n	81047d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810478e:	d115      	bne.n	81047bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104794:	3308      	adds	r3, #8
 8104796:	2100      	movs	r1, #0
 8104798:	4618      	mov	r0, r3
 810479a:	f001 fd29 	bl	81061f0 <RCCEx_PLL2_Config>
 810479e:	4603      	mov	r3, r0
 81047a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81047a4:	e015      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047aa:	3328      	adds	r3, #40	; 0x28
 81047ac:	2102      	movs	r1, #2
 81047ae:	4618      	mov	r0, r3
 81047b0:	f001 fdd0 	bl	8106354 <RCCEx_PLL3_Config>
 81047b4:	4603      	mov	r3, r0
 81047b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81047ba:	e00a      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047bc:	2301      	movs	r3, #1
 81047be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81047c2:	e006      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81047c4:	bf00      	nop
 81047c6:	e004      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81047c8:	bf00      	nop
 81047ca:	e002      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81047cc:	bf00      	nop
 81047ce:	e000      	b.n	81047d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047d6:	2b00      	cmp	r3, #0
 81047d8:	d10e      	bne.n	81047f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81047da:	4b06      	ldr	r3, [pc, #24]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81047dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81047de:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 81047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81047ea:	4a02      	ldr	r2, [pc, #8]	; (81047f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81047ec:	430b      	orrs	r3, r1
 81047ee:	6593      	str	r3, [r2, #88]	; 0x58
 81047f0:	e006      	b.n	8104800 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81047f2:	bf00      	nop
 81047f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104808:	f002 0380 	and.w	r3, r2, #128	; 0x80
 810480c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8104810:	2300      	movs	r3, #0
 8104812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8104816:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810481a:	460b      	mov	r3, r1
 810481c:	4313      	orrs	r3, r2
 810481e:	d055      	beq.n	81048cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104824:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104828:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810482c:	d033      	beq.n	8104896 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810482e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104832:	d82c      	bhi.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104838:	d02f      	beq.n	810489a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810483e:	d826      	bhi.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104840:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104844:	d02b      	beq.n	810489e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104846:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810484a:	d820      	bhi.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810484c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104850:	d012      	beq.n	8104878 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8104852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104856:	d81a      	bhi.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104858:	2b00      	cmp	r3, #0
 810485a:	d022      	beq.n	81048a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 810485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104860:	d115      	bne.n	810488e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104866:	3308      	adds	r3, #8
 8104868:	2100      	movs	r1, #0
 810486a:	4618      	mov	r0, r3
 810486c:	f001 fcc0 	bl	81061f0 <RCCEx_PLL2_Config>
 8104870:	4603      	mov	r3, r0
 8104872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104876:	e015      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810487c:	3328      	adds	r3, #40	; 0x28
 810487e:	2102      	movs	r1, #2
 8104880:	4618      	mov	r0, r3
 8104882:	f001 fd67 	bl	8106354 <RCCEx_PLL3_Config>
 8104886:	4603      	mov	r3, r0
 8104888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810488c:	e00a      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810488e:	2301      	movs	r3, #1
 8104890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104894:	e006      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104896:	bf00      	nop
 8104898:	e004      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810489a:	bf00      	nop
 810489c:	e002      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810489e:	bf00      	nop
 81048a0:	e000      	b.n	81048a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81048a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81048a8:	2b00      	cmp	r3, #0
 81048aa:	d10b      	bne.n	81048c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81048ac:	4ba1      	ldr	r3, [pc, #644]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81048ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048b0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81048bc:	4a9d      	ldr	r2, [pc, #628]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81048be:	430b      	orrs	r3, r1
 81048c0:	6593      	str	r3, [r2, #88]	; 0x58
 81048c2:	e003      	b.n	81048cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81048c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048d4:	f002 0308 	and.w	r3, r2, #8
 81048d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81048dc:	2300      	movs	r3, #0
 81048de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81048e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81048e6:	460b      	mov	r3, r1
 81048e8:	4313      	orrs	r3, r2
 81048ea:	d01e      	beq.n	810492a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81048f8:	d10c      	bne.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048fe:	3328      	adds	r3, #40	; 0x28
 8104900:	2102      	movs	r1, #2
 8104902:	4618      	mov	r0, r3
 8104904:	f001 fd26 	bl	8106354 <RCCEx_PLL3_Config>
 8104908:	4603      	mov	r3, r0
 810490a:	2b00      	cmp	r3, #0
 810490c:	d002      	beq.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810490e:	2301      	movs	r3, #1
 8104910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104914:	4b87      	ldr	r3, [pc, #540]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104918:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810491c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104924:	4a83      	ldr	r2, [pc, #524]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104926:	430b      	orrs	r3, r1
 8104928:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104932:	f002 0310 	and.w	r3, r2, #16
 8104936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810493a:	2300      	movs	r3, #0
 810493c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8104940:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8104944:	460b      	mov	r3, r1
 8104946:	4313      	orrs	r3, r2
 8104948:	d01e      	beq.n	8104988 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810494e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104956:	d10c      	bne.n	8104972 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810495c:	3328      	adds	r3, #40	; 0x28
 810495e:	2102      	movs	r1, #2
 8104960:	4618      	mov	r0, r3
 8104962:	f001 fcf7 	bl	8106354 <RCCEx_PLL3_Config>
 8104966:	4603      	mov	r3, r0
 8104968:	2b00      	cmp	r3, #0
 810496a:	d002      	beq.n	8104972 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810496c:	2301      	movs	r3, #1
 810496e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104972:	4b70      	ldr	r3, [pc, #448]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104976:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810497e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104982:	4a6c      	ldr	r2, [pc, #432]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104984:	430b      	orrs	r3, r1
 8104986:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104990:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8104994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8104998:	2300      	movs	r3, #0
 810499a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810499e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81049a2:	460b      	mov	r3, r1
 81049a4:	4313      	orrs	r3, r2
 81049a6:	d03e      	beq.n	8104a26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81049b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81049b4:	d022      	beq.n	81049fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81049b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81049ba:	d81b      	bhi.n	81049f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d003      	beq.n	81049c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81049c4:	d00b      	beq.n	81049de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81049c6:	e015      	b.n	81049f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049cc:	3308      	adds	r3, #8
 81049ce:	2100      	movs	r1, #0
 81049d0:	4618      	mov	r0, r3
 81049d2:	f001 fc0d 	bl	81061f0 <RCCEx_PLL2_Config>
 81049d6:	4603      	mov	r3, r0
 81049d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81049dc:	e00f      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049e2:	3328      	adds	r3, #40	; 0x28
 81049e4:	2102      	movs	r1, #2
 81049e6:	4618      	mov	r0, r3
 81049e8:	f001 fcb4 	bl	8106354 <RCCEx_PLL3_Config>
 81049ec:	4603      	mov	r3, r0
 81049ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81049f2:	e004      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049f4:	2301      	movs	r3, #1
 81049f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81049fa:	e000      	b.n	81049fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81049fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a02:	2b00      	cmp	r3, #0
 8104a04:	d10b      	bne.n	8104a1e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104a06:	4b4b      	ldr	r3, [pc, #300]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a0a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8104a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104a16:	4a47      	ldr	r2, [pc, #284]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104a18:	430b      	orrs	r3, r1
 8104a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8104a1c:	e003      	b.n	8104a26 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a2e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104a32:	67bb      	str	r3, [r7, #120]	; 0x78
 8104a34:	2300      	movs	r3, #0
 8104a36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104a38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8104a3c:	460b      	mov	r3, r1
 8104a3e:	4313      	orrs	r3, r2
 8104a40:	d03b      	beq.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104a4e:	d01f      	beq.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8104a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104a54:	d818      	bhi.n	8104a88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8104a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104a5a:	d003      	beq.n	8104a64 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8104a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104a60:	d007      	beq.n	8104a72 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104a62:	e011      	b.n	8104a88 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a64:	4b33      	ldr	r3, [pc, #204]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a68:	4a32      	ldr	r2, [pc, #200]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104a70:	e00f      	b.n	8104a92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a76:	3328      	adds	r3, #40	; 0x28
 8104a78:	2101      	movs	r1, #1
 8104a7a:	4618      	mov	r0, r3
 8104a7c:	f001 fc6a 	bl	8106354 <RCCEx_PLL3_Config>
 8104a80:	4603      	mov	r3, r0
 8104a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8104a86:	e004      	b.n	8104a92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a88:	2301      	movs	r3, #1
 8104a8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104a8e:	e000      	b.n	8104a92 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8104a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a96:	2b00      	cmp	r3, #0
 8104a98:	d10b      	bne.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104a9a:	4b26      	ldr	r3, [pc, #152]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104aaa:	4a22      	ldr	r2, [pc, #136]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104aac:	430b      	orrs	r3, r1
 8104aae:	6553      	str	r3, [r2, #84]	; 0x54
 8104ab0:	e003      	b.n	8104aba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ac2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104ac6:	673b      	str	r3, [r7, #112]	; 0x70
 8104ac8:	2300      	movs	r3, #0
 8104aca:	677b      	str	r3, [r7, #116]	; 0x74
 8104acc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104ad0:	460b      	mov	r3, r1
 8104ad2:	4313      	orrs	r3, r2
 8104ad4:	d034      	beq.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104adc:	2b00      	cmp	r3, #0
 8104ade:	d003      	beq.n	8104ae8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104ae4:	d007      	beq.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8104ae6:	e011      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ae8:	4b12      	ldr	r3, [pc, #72]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104aec:	4a11      	ldr	r2, [pc, #68]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104af4:	e00e      	b.n	8104b14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104afa:	3308      	adds	r3, #8
 8104afc:	2102      	movs	r1, #2
 8104afe:	4618      	mov	r0, r3
 8104b00:	f001 fb76 	bl	81061f0 <RCCEx_PLL2_Config>
 8104b04:	4603      	mov	r3, r0
 8104b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104b0a:	e003      	b.n	8104b14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104b0c:	2301      	movs	r3, #1
 8104b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b18:	2b00      	cmp	r3, #0
 8104b1a:	d10d      	bne.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104b1c:	4b05      	ldr	r3, [pc, #20]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b2a:	4a02      	ldr	r2, [pc, #8]	; (8104b34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b2c:	430b      	orrs	r3, r1
 8104b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104b30:	e006      	b.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104b32:	bf00      	nop
 8104b34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b48:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8104b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8104b4e:	2300      	movs	r3, #0
 8104b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8104b52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8104b56:	460b      	mov	r3, r1
 8104b58:	4313      	orrs	r3, r2
 8104b5a:	d00c      	beq.n	8104b76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b60:	3328      	adds	r3, #40	; 0x28
 8104b62:	2102      	movs	r1, #2
 8104b64:	4618      	mov	r0, r3
 8104b66:	f001 fbf5 	bl	8106354 <RCCEx_PLL3_Config>
 8104b6a:	4603      	mov	r3, r0
 8104b6c:	2b00      	cmp	r3, #0
 8104b6e:	d002      	beq.n	8104b76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8104b70:	2301      	movs	r3, #1
 8104b72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b7e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8104b82:	663b      	str	r3, [r7, #96]	; 0x60
 8104b84:	2300      	movs	r3, #0
 8104b86:	667b      	str	r3, [r7, #100]	; 0x64
 8104b88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104b8c:	460b      	mov	r3, r1
 8104b8e:	4313      	orrs	r3, r2
 8104b90:	d038      	beq.n	8104c04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104b9e:	d018      	beq.n	8104bd2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104ba4:	d811      	bhi.n	8104bca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104baa:	d014      	beq.n	8104bd6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104bb0:	d80b      	bhi.n	8104bca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104bb2:	2b00      	cmp	r3, #0
 8104bb4:	d011      	beq.n	8104bda <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8104bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104bba:	d106      	bne.n	8104bca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104bbc:	4bc3      	ldr	r3, [pc, #780]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bc0:	4ac2      	ldr	r2, [pc, #776]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104bc8:	e008      	b.n	8104bdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104bca:	2301      	movs	r3, #1
 8104bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104bd0:	e004      	b.n	8104bdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104bd2:	bf00      	nop
 8104bd4:	e002      	b.n	8104bdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104bd6:	bf00      	nop
 8104bd8:	e000      	b.n	8104bdc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d10b      	bne.n	8104bfc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104be4:	4bb9      	ldr	r3, [pc, #740]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104be8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104bf4:	4ab5      	ldr	r2, [pc, #724]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104bf6:	430b      	orrs	r3, r1
 8104bf8:	6553      	str	r3, [r2, #84]	; 0x54
 8104bfa:	e003      	b.n	8104c04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104c00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c0c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8104c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8104c12:	2300      	movs	r3, #0
 8104c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104c16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8104c1a:	460b      	mov	r3, r1
 8104c1c:	4313      	orrs	r3, r2
 8104c1e:	d009      	beq.n	8104c34 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104c20:	4baa      	ldr	r3, [pc, #680]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104c2e:	4aa7      	ldr	r2, [pc, #668]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c30:	430b      	orrs	r3, r1
 8104c32:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c3c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8104c40:	653b      	str	r3, [r7, #80]	; 0x50
 8104c42:	2300      	movs	r3, #0
 8104c44:	657b      	str	r3, [r7, #84]	; 0x54
 8104c46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8104c4a:	460b      	mov	r3, r1
 8104c4c:	4313      	orrs	r3, r2
 8104c4e:	d00a      	beq.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104c50:	4b9e      	ldr	r3, [pc, #632]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c52:	691b      	ldr	r3, [r3, #16]
 8104c54:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104c60:	4a9a      	ldr	r2, [pc, #616]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c62:	430b      	orrs	r3, r1
 8104c64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c6e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8104c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8104c74:	2300      	movs	r3, #0
 8104c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104c78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8104c7c:	460b      	mov	r3, r1
 8104c7e:	4313      	orrs	r3, r2
 8104c80:	d009      	beq.n	8104c96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104c82:	4b92      	ldr	r3, [pc, #584]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c86:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8104c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104c90:	4a8e      	ldr	r2, [pc, #568]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104c92:	430b      	orrs	r3, r1
 8104c94:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c9e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8104ca4:	2300      	movs	r3, #0
 8104ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8104ca8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104cac:	460b      	mov	r3, r1
 8104cae:	4313      	orrs	r3, r2
 8104cb0:	d00e      	beq.n	8104cd0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104cb2:	4b86      	ldr	r3, [pc, #536]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104cb4:	691b      	ldr	r3, [r3, #16]
 8104cb6:	4a85      	ldr	r2, [pc, #532]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104cbc:	6113      	str	r3, [r2, #16]
 8104cbe:	4b83      	ldr	r3, [pc, #524]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104cc0:	6919      	ldr	r1, [r3, #16]
 8104cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104cca:	4a80      	ldr	r2, [pc, #512]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104ccc:	430b      	orrs	r3, r1
 8104cce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cd8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8104cde:	2300      	movs	r3, #0
 8104ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ce2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8104ce6:	460b      	mov	r3, r1
 8104ce8:	4313      	orrs	r3, r2
 8104cea:	d009      	beq.n	8104d00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104cec:	4b77      	ldr	r3, [pc, #476]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cf0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cfa:	4a74      	ldr	r2, [pc, #464]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104cfc:	430b      	orrs	r3, r1
 8104cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d08:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8104d0e:	2300      	movs	r3, #0
 8104d10:	637b      	str	r3, [r7, #52]	; 0x34
 8104d12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8104d16:	460b      	mov	r3, r1
 8104d18:	4313      	orrs	r3, r2
 8104d1a:	d00a      	beq.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104d1c:	4b6b      	ldr	r3, [pc, #428]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d20:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104d2c:	4a67      	ldr	r2, [pc, #412]	; (8104ecc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104d2e:	430b      	orrs	r3, r1
 8104d30:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d3a:	2100      	movs	r1, #0
 8104d3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8104d3e:	f003 0301 	and.w	r3, r3, #1
 8104d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104d44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8104d48:	460b      	mov	r3, r1
 8104d4a:	4313      	orrs	r3, r2
 8104d4c:	d011      	beq.n	8104d72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d52:	3308      	adds	r3, #8
 8104d54:	2100      	movs	r1, #0
 8104d56:	4618      	mov	r0, r3
 8104d58:	f001 fa4a 	bl	81061f0 <RCCEx_PLL2_Config>
 8104d5c:	4603      	mov	r3, r0
 8104d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d66:	2b00      	cmp	r3, #0
 8104d68:	d003      	beq.n	8104d72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d7a:	2100      	movs	r1, #0
 8104d7c:	6239      	str	r1, [r7, #32]
 8104d7e:	f003 0302 	and.w	r3, r3, #2
 8104d82:	627b      	str	r3, [r7, #36]	; 0x24
 8104d84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104d88:	460b      	mov	r3, r1
 8104d8a:	4313      	orrs	r3, r2
 8104d8c:	d011      	beq.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d92:	3308      	adds	r3, #8
 8104d94:	2101      	movs	r1, #1
 8104d96:	4618      	mov	r0, r3
 8104d98:	f001 fa2a 	bl	81061f0 <RCCEx_PLL2_Config>
 8104d9c:	4603      	mov	r3, r0
 8104d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104da2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104da6:	2b00      	cmp	r3, #0
 8104da8:	d003      	beq.n	8104db2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dba:	2100      	movs	r1, #0
 8104dbc:	61b9      	str	r1, [r7, #24]
 8104dbe:	f003 0304 	and.w	r3, r3, #4
 8104dc2:	61fb      	str	r3, [r7, #28]
 8104dc4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104dc8:	460b      	mov	r3, r1
 8104dca:	4313      	orrs	r3, r2
 8104dcc:	d011      	beq.n	8104df2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dd2:	3308      	adds	r3, #8
 8104dd4:	2102      	movs	r1, #2
 8104dd6:	4618      	mov	r0, r3
 8104dd8:	f001 fa0a 	bl	81061f0 <RCCEx_PLL2_Config>
 8104ddc:	4603      	mov	r3, r0
 8104dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104de6:	2b00      	cmp	r3, #0
 8104de8:	d003      	beq.n	8104df2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104dee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dfa:	2100      	movs	r1, #0
 8104dfc:	6139      	str	r1, [r7, #16]
 8104dfe:	f003 0308 	and.w	r3, r3, #8
 8104e02:	617b      	str	r3, [r7, #20]
 8104e04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104e08:	460b      	mov	r3, r1
 8104e0a:	4313      	orrs	r3, r2
 8104e0c:	d011      	beq.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e12:	3328      	adds	r3, #40	; 0x28
 8104e14:	2100      	movs	r1, #0
 8104e16:	4618      	mov	r0, r3
 8104e18:	f001 fa9c 	bl	8106354 <RCCEx_PLL3_Config>
 8104e1c:	4603      	mov	r3, r0
 8104e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8104e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e26:	2b00      	cmp	r3, #0
 8104e28:	d003      	beq.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e3a:	2100      	movs	r1, #0
 8104e3c:	60b9      	str	r1, [r7, #8]
 8104e3e:	f003 0310 	and.w	r3, r3, #16
 8104e42:	60fb      	str	r3, [r7, #12]
 8104e44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104e48:	460b      	mov	r3, r1
 8104e4a:	4313      	orrs	r3, r2
 8104e4c:	d011      	beq.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e52:	3328      	adds	r3, #40	; 0x28
 8104e54:	2101      	movs	r1, #1
 8104e56:	4618      	mov	r0, r3
 8104e58:	f001 fa7c 	bl	8106354 <RCCEx_PLL3_Config>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d003      	beq.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e7a:	2100      	movs	r1, #0
 8104e7c:	6039      	str	r1, [r7, #0]
 8104e7e:	f003 0320 	and.w	r3, r3, #32
 8104e82:	607b      	str	r3, [r7, #4]
 8104e84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104e88:	460b      	mov	r3, r1
 8104e8a:	4313      	orrs	r3, r2
 8104e8c:	d011      	beq.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e92:	3328      	adds	r3, #40	; 0x28
 8104e94:	2102      	movs	r1, #2
 8104e96:	4618      	mov	r0, r3
 8104e98:	f001 fa5c 	bl	8106354 <RCCEx_PLL3_Config>
 8104e9c:	4603      	mov	r3, r0
 8104e9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ea6:	2b00      	cmp	r3, #0
 8104ea8:	d003      	beq.n	8104eb2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104eae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8104eb2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8104eb6:	2b00      	cmp	r3, #0
 8104eb8:	d101      	bne.n	8104ebe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104eba:	2300      	movs	r3, #0
 8104ebc:	e000      	b.n	8104ec0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104ebe:	2301      	movs	r3, #1
}
 8104ec0:	4618      	mov	r0, r3
 8104ec2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8104ec6:	46bd      	mov	sp, r7
 8104ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104ecc:	58024400 	.word	0x58024400

08104ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104ed0:	b580      	push	{r7, lr}
 8104ed2:	b090      	sub	sp, #64	; 0x40
 8104ed4:	af00      	add	r7, sp, #0
 8104ed6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104ede:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8104ee2:	430b      	orrs	r3, r1
 8104ee4:	f040 8094 	bne.w	8105010 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104ee8:	4b9e      	ldr	r3, [pc, #632]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104eec:	f003 0307 	and.w	r3, r3, #7
 8104ef0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ef4:	2b04      	cmp	r3, #4
 8104ef6:	f200 8087 	bhi.w	8105008 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104efa:	a201      	add	r2, pc, #4	; (adr r2, 8104f00 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f00:	08104f15 	.word	0x08104f15
 8104f04:	08104f3d 	.word	0x08104f3d
 8104f08:	08104f65 	.word	0x08104f65
 8104f0c:	08105001 	.word	0x08105001
 8104f10:	08104f8d 	.word	0x08104f8d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f14:	4b93      	ldr	r3, [pc, #588]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f20:	d108      	bne.n	8104f34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f26:	4618      	mov	r0, r3
 8104f28:	f001 f810 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f30:	f000 bd45 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f34:	2300      	movs	r3, #0
 8104f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f38:	f000 bd41 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f3c:	4b89      	ldr	r3, [pc, #548]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f48:	d108      	bne.n	8104f5c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f4a:	f107 0318 	add.w	r3, r7, #24
 8104f4e:	4618      	mov	r0, r3
 8104f50:	f000 fd54 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104f54:	69bb      	ldr	r3, [r7, #24]
 8104f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f58:	f000 bd31 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f5c:	2300      	movs	r3, #0
 8104f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f60:	f000 bd2d 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104f64:	4b7f      	ldr	r3, [pc, #508]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f70:	d108      	bne.n	8104f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f72:	f107 030c 	add.w	r3, r7, #12
 8104f76:	4618      	mov	r0, r3
 8104f78:	f000 fe94 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f80:	f000 bd1d 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f84:	2300      	movs	r3, #0
 8104f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f88:	f000 bd19 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104f8c:	4b75      	ldr	r3, [pc, #468]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104f94:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f96:	4b73      	ldr	r3, [pc, #460]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	f003 0304 	and.w	r3, r3, #4
 8104f9e:	2b04      	cmp	r3, #4
 8104fa0:	d10c      	bne.n	8104fbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d109      	bne.n	8104fbc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104fa8:	4b6e      	ldr	r3, [pc, #440]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104faa:	681b      	ldr	r3, [r3, #0]
 8104fac:	08db      	lsrs	r3, r3, #3
 8104fae:	f003 0303 	and.w	r3, r3, #3
 8104fb2:	4a6d      	ldr	r2, [pc, #436]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8104fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fba:	e01f      	b.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104fbc:	4b69      	ldr	r3, [pc, #420]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104fbe:	681b      	ldr	r3, [r3, #0]
 8104fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fc8:	d106      	bne.n	8104fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104fd0:	d102      	bne.n	8104fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104fd2:	4b66      	ldr	r3, [pc, #408]	; (810516c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fd6:	e011      	b.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104fd8:	4b62      	ldr	r3, [pc, #392]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104fda:	681b      	ldr	r3, [r3, #0]
 8104fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104fe4:	d106      	bne.n	8104ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fec:	d102      	bne.n	8104ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104fee:	4b60      	ldr	r3, [pc, #384]	; (8105170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ff2:	e003      	b.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104ff4:	2300      	movs	r3, #0
 8104ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104ff8:	f000 bce1 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ffc:	f000 bcdf 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105000:	4b5c      	ldr	r3, [pc, #368]	; (8105174 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105004:	f000 bcdb 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105008:	2300      	movs	r3, #0
 810500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810500c:	f000 bcd7 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105014:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8105018:	430b      	orrs	r3, r1
 810501a:	f040 80ad 	bne.w	8105178 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810501e:	4b51      	ldr	r3, [pc, #324]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105022:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8105026:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810502a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810502e:	d056      	beq.n	81050de <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105036:	f200 8090 	bhi.w	810515a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810503c:	2bc0      	cmp	r3, #192	; 0xc0
 810503e:	f000 8088 	beq.w	8105152 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8105042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105044:	2bc0      	cmp	r3, #192	; 0xc0
 8105046:	f200 8088 	bhi.w	810515a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810504c:	2b80      	cmp	r3, #128	; 0x80
 810504e:	d032      	beq.n	81050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105052:	2b80      	cmp	r3, #128	; 0x80
 8105054:	f200 8081 	bhi.w	810515a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810505a:	2b00      	cmp	r3, #0
 810505c:	d003      	beq.n	8105066 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105060:	2b40      	cmp	r3, #64	; 0x40
 8105062:	d014      	beq.n	810508e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105064:	e079      	b.n	810515a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105066:	4b3f      	ldr	r3, [pc, #252]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810506e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105072:	d108      	bne.n	8105086 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105078:	4618      	mov	r0, r3
 810507a:	f000 ff67 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105082:	f000 bc9c 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105086:	2300      	movs	r3, #0
 8105088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810508a:	f000 bc98 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810508e:	4b35      	ldr	r3, [pc, #212]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810509a:	d108      	bne.n	81050ae <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810509c:	f107 0318 	add.w	r3, r7, #24
 81050a0:	4618      	mov	r0, r3
 81050a2:	f000 fcab 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81050a6:	69bb      	ldr	r3, [r7, #24]
 81050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050aa:	f000 bc88 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050ae:	2300      	movs	r3, #0
 81050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050b2:	f000 bc84 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81050b6:	4b2b      	ldr	r3, [pc, #172]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81050be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050c2:	d108      	bne.n	81050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81050c4:	f107 030c 	add.w	r3, r7, #12
 81050c8:	4618      	mov	r0, r3
 81050ca:	f000 fdeb 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81050ce:	68fb      	ldr	r3, [r7, #12]
 81050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050d2:	f000 bc74 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050d6:	2300      	movs	r3, #0
 81050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050da:	f000 bc70 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81050de:	4b21      	ldr	r3, [pc, #132]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81050e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81050e8:	4b1e      	ldr	r3, [pc, #120]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81050ea:	681b      	ldr	r3, [r3, #0]
 81050ec:	f003 0304 	and.w	r3, r3, #4
 81050f0:	2b04      	cmp	r3, #4
 81050f2:	d10c      	bne.n	810510e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d109      	bne.n	810510e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81050fa:	4b1a      	ldr	r3, [pc, #104]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81050fc:	681b      	ldr	r3, [r3, #0]
 81050fe:	08db      	lsrs	r3, r3, #3
 8105100:	f003 0303 	and.w	r3, r3, #3
 8105104:	4a18      	ldr	r2, [pc, #96]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105106:	fa22 f303 	lsr.w	r3, r2, r3
 810510a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810510c:	e01f      	b.n	810514e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810510e:	4b15      	ldr	r3, [pc, #84]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105110:	681b      	ldr	r3, [r3, #0]
 8105112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810511a:	d106      	bne.n	810512a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810511c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810511e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105122:	d102      	bne.n	810512a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105124:	4b11      	ldr	r3, [pc, #68]	; (810516c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105128:	e011      	b.n	810514e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810512a:	4b0e      	ldr	r3, [pc, #56]	; (8105164 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105136:	d106      	bne.n	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8105138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810513a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810513e:	d102      	bne.n	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105140:	4b0b      	ldr	r3, [pc, #44]	; (8105170 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105144:	e003      	b.n	810514e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105146:	2300      	movs	r3, #0
 8105148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810514a:	f000 bc38 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810514e:	f000 bc36 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105152:	4b08      	ldr	r3, [pc, #32]	; (8105174 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105156:	f000 bc32 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810515a:	2300      	movs	r3, #0
 810515c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810515e:	f000 bc2e 	b.w	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105162:	bf00      	nop
 8105164:	58024400 	.word	0x58024400
 8105168:	03d09000 	.word	0x03d09000
 810516c:	003d0900 	.word	0x003d0900
 8105170:	017d7840 	.word	0x017d7840
 8105174:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105178:	e9d7 2300 	ldrd	r2, r3, [r7]
 810517c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8105180:	430b      	orrs	r3, r1
 8105182:	f040 809c 	bne.w	81052be <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105186:	4b9e      	ldr	r3, [pc, #632]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810518a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810518e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105196:	d054      	beq.n	8105242 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810519a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810519e:	f200 808b 	bhi.w	81052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81051a8:	f000 8083 	beq.w	81052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 81051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81051b2:	f200 8081 	bhi.w	81052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81051bc:	d02f      	beq.n	810521e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 81051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81051c4:	d878      	bhi.n	81052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 81051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051c8:	2b00      	cmp	r3, #0
 81051ca:	d004      	beq.n	81051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 81051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81051ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81051d2:	d012      	beq.n	81051fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 81051d4:	e070      	b.n	81052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81051d6:	4b8a      	ldr	r3, [pc, #552]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81051de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81051e2:	d107      	bne.n	81051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81051e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81051e8:	4618      	mov	r0, r3
 81051ea:	f000 feaf 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051f2:	e3e4      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051f4:	2300      	movs	r3, #0
 81051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051f8:	e3e1      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81051fa:	4b81      	ldr	r3, [pc, #516]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81051fc:	681b      	ldr	r3, [r3, #0]
 81051fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105206:	d107      	bne.n	8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105208:	f107 0318 	add.w	r3, r7, #24
 810520c:	4618      	mov	r0, r3
 810520e:	f000 fbf5 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105212:	69bb      	ldr	r3, [r7, #24]
 8105214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105216:	e3d2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105218:	2300      	movs	r3, #0
 810521a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810521c:	e3cf      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810521e:	4b78      	ldr	r3, [pc, #480]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105220:	681b      	ldr	r3, [r3, #0]
 8105222:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105226:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810522a:	d107      	bne.n	810523c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810522c:	f107 030c 	add.w	r3, r7, #12
 8105230:	4618      	mov	r0, r3
 8105232:	f000 fd37 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105236:	68fb      	ldr	r3, [r7, #12]
 8105238:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810523a:	e3c0      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810523c:	2300      	movs	r3, #0
 810523e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105240:	e3bd      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105242:	4b6f      	ldr	r3, [pc, #444]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810524a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810524c:	4b6c      	ldr	r3, [pc, #432]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	f003 0304 	and.w	r3, r3, #4
 8105254:	2b04      	cmp	r3, #4
 8105256:	d10c      	bne.n	8105272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8105258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810525a:	2b00      	cmp	r3, #0
 810525c:	d109      	bne.n	8105272 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810525e:	4b68      	ldr	r3, [pc, #416]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	08db      	lsrs	r3, r3, #3
 8105264:	f003 0303 	and.w	r3, r3, #3
 8105268:	4a66      	ldr	r2, [pc, #408]	; (8105404 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810526a:	fa22 f303 	lsr.w	r3, r2, r3
 810526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105270:	e01e      	b.n	81052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105272:	4b63      	ldr	r3, [pc, #396]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105274:	681b      	ldr	r3, [r3, #0]
 8105276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810527e:	d106      	bne.n	810528e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8105280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105286:	d102      	bne.n	810528e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105288:	4b5f      	ldr	r3, [pc, #380]	; (8105408 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810528a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810528c:	e010      	b.n	81052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810528e:	4b5c      	ldr	r3, [pc, #368]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810529a:	d106      	bne.n	81052aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810529c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810529e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052a2:	d102      	bne.n	81052aa <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81052a4:	4b59      	ldr	r3, [pc, #356]	; (810540c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81052a8:	e002      	b.n	81052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81052aa:	2300      	movs	r3, #0
 81052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81052ae:	e386      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81052b0:	e385      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81052b2:	4b57      	ldr	r3, [pc, #348]	; (8105410 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81052b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052b6:	e382      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81052b8:	2300      	movs	r3, #0
 81052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052bc:	e37f      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81052be:	e9d7 2300 	ldrd	r2, r3, [r7]
 81052c2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 81052c6:	430b      	orrs	r3, r1
 81052c8:	f040 80a7 	bne.w	810541a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 81052cc:	4b4c      	ldr	r3, [pc, #304]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81052d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 81052d4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81052dc:	d055      	beq.n	810538a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 81052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81052e4:	f200 8096 	bhi.w	8105414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81052ee:	f000 8084 	beq.w	81053fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81052f8:	f200 808c 	bhi.w	8105414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81052fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105302:	d030      	beq.n	8105366 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8105304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810530a:	f200 8083 	bhi.w	8105414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105310:	2b00      	cmp	r3, #0
 8105312:	d004      	beq.n	810531e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8105314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105316:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810531a:	d012      	beq.n	8105342 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810531c:	e07a      	b.n	8105414 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810531e:	4b38      	ldr	r3, [pc, #224]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810532a:	d107      	bne.n	810533c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810532c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105330:	4618      	mov	r0, r3
 8105332:	f000 fe0b 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810533a:	e340      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810533c:	2300      	movs	r3, #0
 810533e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105340:	e33d      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105342:	4b2f      	ldr	r3, [pc, #188]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810534a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810534e:	d107      	bne.n	8105360 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105350:	f107 0318 	add.w	r3, r7, #24
 8105354:	4618      	mov	r0, r3
 8105356:	f000 fb51 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810535a:	69bb      	ldr	r3, [r7, #24]
 810535c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810535e:	e32e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105360:	2300      	movs	r3, #0
 8105362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105364:	e32b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105366:	4b26      	ldr	r3, [pc, #152]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810536e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105372:	d107      	bne.n	8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105374:	f107 030c 	add.w	r3, r7, #12
 8105378:	4618      	mov	r0, r3
 810537a:	f000 fc93 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105382:	e31c      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105384:	2300      	movs	r3, #0
 8105386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105388:	e319      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810538a:	4b1d      	ldr	r3, [pc, #116]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810538c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810538e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105392:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105394:	4b1a      	ldr	r3, [pc, #104]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	f003 0304 	and.w	r3, r3, #4
 810539c:	2b04      	cmp	r3, #4
 810539e:	d10c      	bne.n	81053ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81053a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053a2:	2b00      	cmp	r3, #0
 81053a4:	d109      	bne.n	81053ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81053a6:	4b16      	ldr	r3, [pc, #88]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	08db      	lsrs	r3, r3, #3
 81053ac:	f003 0303 	and.w	r3, r3, #3
 81053b0:	4a14      	ldr	r2, [pc, #80]	; (8105404 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81053b2:	fa22 f303 	lsr.w	r3, r2, r3
 81053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81053b8:	e01e      	b.n	81053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81053ba:	4b11      	ldr	r3, [pc, #68]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81053c6:	d106      	bne.n	81053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81053ce:	d102      	bne.n	81053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81053d0:	4b0d      	ldr	r3, [pc, #52]	; (8105408 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81053d4:	e010      	b.n	81053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81053d6:	4b0a      	ldr	r3, [pc, #40]	; (8105400 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81053de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81053e2:	d106      	bne.n	81053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053ea:	d102      	bne.n	81053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81053ec:	4b07      	ldr	r3, [pc, #28]	; (810540c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 81053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 81053f0:	e002      	b.n	81053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81053f2:	2300      	movs	r3, #0
 81053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81053f6:	e2e2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81053f8:	e2e1      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81053fa:	4b05      	ldr	r3, [pc, #20]	; (8105410 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81053fe:	e2de      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105400:	58024400 	.word	0x58024400
 8105404:	03d09000 	.word	0x03d09000
 8105408:	003d0900 	.word	0x003d0900
 810540c:	017d7840 	.word	0x017d7840
 8105410:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8105414:	2300      	movs	r3, #0
 8105416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105418:	e2d1      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810541a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810541e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8105422:	430b      	orrs	r3, r1
 8105424:	f040 809c 	bne.w	8105560 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105428:	4b93      	ldr	r3, [pc, #588]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810542c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105430:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105438:	d054      	beq.n	81054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810543c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105440:	f200 808b 	bhi.w	810555a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105446:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810544a:	f000 8083 	beq.w	8105554 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105454:	f200 8081 	bhi.w	810555a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810545e:	d02f      	beq.n	81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8105460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105466:	d878      	bhi.n	810555a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810546a:	2b00      	cmp	r3, #0
 810546c:	d004      	beq.n	8105478 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105474:	d012      	beq.n	810549c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8105476:	e070      	b.n	810555a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105478:	4b7f      	ldr	r3, [pc, #508]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105484:	d107      	bne.n	8105496 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810548a:	4618      	mov	r0, r3
 810548c:	f000 fd5e 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105494:	e293      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105496:	2300      	movs	r3, #0
 8105498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810549a:	e290      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810549c:	4b76      	ldr	r3, [pc, #472]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81054a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81054a8:	d107      	bne.n	81054ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81054aa:	f107 0318 	add.w	r3, r7, #24
 81054ae:	4618      	mov	r0, r3
 81054b0:	f000 faa4 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81054b4:	69bb      	ldr	r3, [r7, #24]
 81054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054b8:	e281      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054ba:	2300      	movs	r3, #0
 81054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054be:	e27e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81054c0:	4b6d      	ldr	r3, [pc, #436]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054c2:	681b      	ldr	r3, [r3, #0]
 81054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81054c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81054cc:	d107      	bne.n	81054de <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81054ce:	f107 030c 	add.w	r3, r7, #12
 81054d2:	4618      	mov	r0, r3
 81054d4:	f000 fbe6 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81054d8:	68fb      	ldr	r3, [r7, #12]
 81054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054dc:	e26f      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054de:	2300      	movs	r3, #0
 81054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054e2:	e26c      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81054e4:	4b64      	ldr	r3, [pc, #400]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81054e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81054ec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81054ee:	4b62      	ldr	r3, [pc, #392]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054f0:	681b      	ldr	r3, [r3, #0]
 81054f2:	f003 0304 	and.w	r3, r3, #4
 81054f6:	2b04      	cmp	r3, #4
 81054f8:	d10c      	bne.n	8105514 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d109      	bne.n	8105514 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105500:	4b5d      	ldr	r3, [pc, #372]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	08db      	lsrs	r3, r3, #3
 8105506:	f003 0303 	and.w	r3, r3, #3
 810550a:	4a5c      	ldr	r2, [pc, #368]	; (810567c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810550c:	fa22 f303 	lsr.w	r3, r2, r3
 8105510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105512:	e01e      	b.n	8105552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105514:	4b58      	ldr	r3, [pc, #352]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810551c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105520:	d106      	bne.n	8105530 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8105522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105528:	d102      	bne.n	8105530 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810552a:	4b55      	ldr	r3, [pc, #340]	; (8105680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810552c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810552e:	e010      	b.n	8105552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105530:	4b51      	ldr	r3, [pc, #324]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810553c:	d106      	bne.n	810554c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810553e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105544:	d102      	bne.n	810554c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105546:	4b4f      	ldr	r3, [pc, #316]	; (8105684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105548:	63fb      	str	r3, [r7, #60]	; 0x3c
 810554a:	e002      	b.n	8105552 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810554c:	2300      	movs	r3, #0
 810554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105550:	e235      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105552:	e234      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105554:	4b4c      	ldr	r3, [pc, #304]	; (8105688 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8105556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105558:	e231      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810555a:	2300      	movs	r3, #0
 810555c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810555e:	e22e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105564:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8105568:	430b      	orrs	r3, r1
 810556a:	f040 808f 	bne.w	810568c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810556e:	4b42      	ldr	r3, [pc, #264]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105572:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8105576:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8105578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810557a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810557e:	d06b      	beq.n	8105658 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8105580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105586:	d874      	bhi.n	8105672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810558a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810558e:	d056      	beq.n	810563e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8105590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105596:	d86c      	bhi.n	8105672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810559a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810559e:	d03b      	beq.n	8105618 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81055a6:	d864      	bhi.n	8105672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81055ae:	d021      	beq.n	81055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81055b6:	d85c      	bhi.n	8105672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81055b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055ba:	2b00      	cmp	r3, #0
 81055bc:	d004      	beq.n	81055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81055c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055c4:	d004      	beq.n	81055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81055c6:	e054      	b.n	8105672 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81055c8:	f7fe fa62 	bl	8103a90 <HAL_RCC_GetPCLK1Freq>
 81055cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81055ce:	e1f6      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81055d0:	4b29      	ldr	r3, [pc, #164]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81055d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81055dc:	d107      	bne.n	81055ee <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055de:	f107 0318 	add.w	r3, r7, #24
 81055e2:	4618      	mov	r0, r3
 81055e4:	f000 fa0a 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81055e8:	69fb      	ldr	r3, [r7, #28]
 81055ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81055ec:	e1e7      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81055ee:	2300      	movs	r3, #0
 81055f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81055f2:	e1e4      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81055f4:	4b20      	ldr	r3, [pc, #128]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81055fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105600:	d107      	bne.n	8105612 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105602:	f107 030c 	add.w	r3, r7, #12
 8105606:	4618      	mov	r0, r3
 8105608:	f000 fb4c 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810560c:	693b      	ldr	r3, [r7, #16]
 810560e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105610:	e1d5      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105612:	2300      	movs	r3, #0
 8105614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105616:	e1d2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105618:	4b17      	ldr	r3, [pc, #92]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	f003 0304 	and.w	r3, r3, #4
 8105620:	2b04      	cmp	r3, #4
 8105622:	d109      	bne.n	8105638 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105624:	4b14      	ldr	r3, [pc, #80]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105626:	681b      	ldr	r3, [r3, #0]
 8105628:	08db      	lsrs	r3, r3, #3
 810562a:	f003 0303 	and.w	r3, r3, #3
 810562e:	4a13      	ldr	r2, [pc, #76]	; (810567c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105630:	fa22 f303 	lsr.w	r3, r2, r3
 8105634:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105636:	e1c2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105638:	2300      	movs	r3, #0
 810563a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810563c:	e1bf      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810563e:	4b0e      	ldr	r3, [pc, #56]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810564a:	d102      	bne.n	8105652 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810564c:	4b0c      	ldr	r3, [pc, #48]	; (8105680 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810564e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105650:	e1b5      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105652:	2300      	movs	r3, #0
 8105654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105656:	e1b2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105658:	4b07      	ldr	r3, [pc, #28]	; (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105664:	d102      	bne.n	810566c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105666:	4b07      	ldr	r3, [pc, #28]	; (8105684 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810566a:	e1a8      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810566c:	2300      	movs	r3, #0
 810566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105670:	e1a5      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105672:	2300      	movs	r3, #0
 8105674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105676:	e1a2      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105678:	58024400 	.word	0x58024400
 810567c:	03d09000 	.word	0x03d09000
 8105680:	003d0900 	.word	0x003d0900
 8105684:	017d7840 	.word	0x017d7840
 8105688:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810568c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105690:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8105694:	430b      	orrs	r3, r1
 8105696:	d173      	bne.n	8105780 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105698:	4b9c      	ldr	r3, [pc, #624]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810569c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81056a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81056a8:	d02f      	beq.n	810570a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81056b0:	d863      	bhi.n	810577a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056b4:	2b00      	cmp	r3, #0
 81056b6:	d004      	beq.n	81056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81056b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81056ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81056be:	d012      	beq.n	81056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81056c0:	e05b      	b.n	810577a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81056c2:	4b92      	ldr	r3, [pc, #584]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81056c4:	681b      	ldr	r3, [r3, #0]
 81056c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81056ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81056ce:	d107      	bne.n	81056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81056d0:	f107 0318 	add.w	r3, r7, #24
 81056d4:	4618      	mov	r0, r3
 81056d6:	f000 f991 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81056da:	69bb      	ldr	r3, [r7, #24]
 81056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056de:	e16e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056e0:	2300      	movs	r3, #0
 81056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81056e4:	e16b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81056e6:	4b89      	ldr	r3, [pc, #548]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81056ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81056f2:	d107      	bne.n	8105704 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81056f4:	f107 030c 	add.w	r3, r7, #12
 81056f8:	4618      	mov	r0, r3
 81056fa:	f000 fad3 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81056fe:	697b      	ldr	r3, [r7, #20]
 8105700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105702:	e15c      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105704:	2300      	movs	r3, #0
 8105706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105708:	e159      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810570a:	4b80      	ldr	r3, [pc, #512]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810570c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810570e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105712:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105714:	4b7d      	ldr	r3, [pc, #500]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105716:	681b      	ldr	r3, [r3, #0]
 8105718:	f003 0304 	and.w	r3, r3, #4
 810571c:	2b04      	cmp	r3, #4
 810571e:	d10c      	bne.n	810573a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105722:	2b00      	cmp	r3, #0
 8105724:	d109      	bne.n	810573a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105726:	4b79      	ldr	r3, [pc, #484]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	08db      	lsrs	r3, r3, #3
 810572c:	f003 0303 	and.w	r3, r3, #3
 8105730:	4a77      	ldr	r2, [pc, #476]	; (8105910 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105732:	fa22 f303 	lsr.w	r3, r2, r3
 8105736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105738:	e01e      	b.n	8105778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810573a:	4b74      	ldr	r3, [pc, #464]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810573c:	681b      	ldr	r3, [r3, #0]
 810573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105746:	d106      	bne.n	8105756 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8105748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810574a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810574e:	d102      	bne.n	8105756 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105750:	4b70      	ldr	r3, [pc, #448]	; (8105914 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105754:	e010      	b.n	8105778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105756:	4b6d      	ldr	r3, [pc, #436]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810575e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105762:	d106      	bne.n	8105772 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810576a:	d102      	bne.n	8105772 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810576c:	4b6a      	ldr	r3, [pc, #424]	; (8105918 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810576e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105770:	e002      	b.n	8105778 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105772:	2300      	movs	r3, #0
 8105774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105776:	e122      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105778:	e121      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810577a:	2300      	movs	r3, #0
 810577c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810577e:	e11e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105784:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8105788:	430b      	orrs	r3, r1
 810578a:	d133      	bne.n	81057f4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810578c:	4b5f      	ldr	r3, [pc, #380]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810578e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105794:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105798:	2b00      	cmp	r3, #0
 810579a:	d004      	beq.n	81057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810579e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81057a2:	d012      	beq.n	81057ca <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81057a4:	e023      	b.n	81057ee <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81057a6:	4b59      	ldr	r3, [pc, #356]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81057ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81057b2:	d107      	bne.n	81057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81057b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81057b8:	4618      	mov	r0, r3
 81057ba:	f000 fbc7 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057c2:	e0fc      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057c4:	2300      	movs	r3, #0
 81057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81057c8:	e0f9      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81057ca:	4b50      	ldr	r3, [pc, #320]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81057d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81057d6:	d107      	bne.n	81057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81057d8:	f107 0318 	add.w	r3, r7, #24
 81057dc:	4618      	mov	r0, r3
 81057de:	f000 f90d 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81057e2:	6a3b      	ldr	r3, [r7, #32]
 81057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057e6:	e0ea      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057e8:	2300      	movs	r3, #0
 81057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81057ec:	e0e7      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81057ee:	2300      	movs	r3, #0
 81057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81057f2:	e0e4      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81057f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81057f8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 81057fc:	430b      	orrs	r3, r1
 81057fe:	f040 808d 	bne.w	810591c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105802:	4b42      	ldr	r3, [pc, #264]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105806:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810580a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810580e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105812:	d06b      	beq.n	81058ec <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810581a:	d874      	bhi.n	8105906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105822:	d056      	beq.n	81058d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810582a:	d86c      	bhi.n	8105906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810582e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105832:	d03b      	beq.n	81058ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810583a:	d864      	bhi.n	8105906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105842:	d021      	beq.n	8105888 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810584a:	d85c      	bhi.n	8105906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810584e:	2b00      	cmp	r3, #0
 8105850:	d004      	beq.n	810585c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8105852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105858:	d004      	beq.n	8105864 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810585a:	e054      	b.n	8105906 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810585c:	f000 f8b8 	bl	81059d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8105860:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105862:	e0ac      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105864:	4b29      	ldr	r3, [pc, #164]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105866:	681b      	ldr	r3, [r3, #0]
 8105868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810586c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105870:	d107      	bne.n	8105882 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105872:	f107 0318 	add.w	r3, r7, #24
 8105876:	4618      	mov	r0, r3
 8105878:	f000 f8c0 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810587c:	69fb      	ldr	r3, [r7, #28]
 810587e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105880:	e09d      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105882:	2300      	movs	r3, #0
 8105884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105886:	e09a      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105888:	4b20      	ldr	r3, [pc, #128]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105894:	d107      	bne.n	81058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105896:	f107 030c 	add.w	r3, r7, #12
 810589a:	4618      	mov	r0, r3
 810589c:	f000 fa02 	bl	8105ca4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81058a0:	693b      	ldr	r3, [r7, #16]
 81058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058a4:	e08b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058a6:	2300      	movs	r3, #0
 81058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058aa:	e088      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81058ac:	4b17      	ldr	r3, [pc, #92]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81058ae:	681b      	ldr	r3, [r3, #0]
 81058b0:	f003 0304 	and.w	r3, r3, #4
 81058b4:	2b04      	cmp	r3, #4
 81058b6:	d109      	bne.n	81058cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81058b8:	4b14      	ldr	r3, [pc, #80]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	08db      	lsrs	r3, r3, #3
 81058be:	f003 0303 	and.w	r3, r3, #3
 81058c2:	4a13      	ldr	r2, [pc, #76]	; (8105910 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81058c4:	fa22 f303 	lsr.w	r3, r2, r3
 81058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058ca:	e078      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058cc:	2300      	movs	r3, #0
 81058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058d0:	e075      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81058d2:	4b0e      	ldr	r3, [pc, #56]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81058d4:	681b      	ldr	r3, [r3, #0]
 81058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81058de:	d102      	bne.n	81058e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81058e0:	4b0c      	ldr	r3, [pc, #48]	; (8105914 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058e4:	e06b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058e6:	2300      	movs	r3, #0
 81058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058ea:	e068      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81058ec:	4b07      	ldr	r3, [pc, #28]	; (810590c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81058ee:	681b      	ldr	r3, [r3, #0]
 81058f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81058f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81058f8:	d102      	bne.n	8105900 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81058fa:	4b07      	ldr	r3, [pc, #28]	; (8105918 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058fe:	e05e      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105900:	2300      	movs	r3, #0
 8105902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105904:	e05b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8105906:	2300      	movs	r3, #0
 8105908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810590a:	e058      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810590c:	58024400 	.word	0x58024400
 8105910:	03d09000 	.word	0x03d09000
 8105914:	003d0900 	.word	0x003d0900
 8105918:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810591c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105920:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8105924:	430b      	orrs	r3, r1
 8105926:	d148      	bne.n	81059ba <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105928:	4b27      	ldr	r3, [pc, #156]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810592a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810592c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105930:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105938:	d02a      	beq.n	8105990 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810593c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105940:	d838      	bhi.n	81059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8105942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105944:	2b00      	cmp	r3, #0
 8105946:	d004      	beq.n	8105952 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8105948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810594a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810594e:	d00d      	beq.n	810596c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8105950:	e030      	b.n	81059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105952:	4b1d      	ldr	r3, [pc, #116]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105954:	681b      	ldr	r3, [r3, #0]
 8105956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810595a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810595e:	d102      	bne.n	8105966 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8105960:	4b1a      	ldr	r3, [pc, #104]	; (81059cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8105962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105964:	e02b      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105966:	2300      	movs	r3, #0
 8105968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810596a:	e028      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810596c:	4b16      	ldr	r3, [pc, #88]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105974:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105978:	d107      	bne.n	810598a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810597a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810597e:	4618      	mov	r0, r3
 8105980:	f000 fae4 	bl	8105f4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105988:	e019      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810598a:	2300      	movs	r3, #0
 810598c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810598e:	e016      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105990:	4b0d      	ldr	r3, [pc, #52]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810599c:	d107      	bne.n	81059ae <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810599e:	f107 0318 	add.w	r3, r7, #24
 81059a2:	4618      	mov	r0, r3
 81059a4:	f000 f82a 	bl	81059fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81059a8:	69fb      	ldr	r3, [r7, #28]
 81059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81059ac:	e007      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81059ae:	2300      	movs	r3, #0
 81059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059b2:	e004      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81059b4:	2300      	movs	r3, #0
 81059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059b8:	e001      	b.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81059ba:	2300      	movs	r3, #0
 81059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 81059be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81059c0:	4618      	mov	r0, r3
 81059c2:	3740      	adds	r7, #64	; 0x40
 81059c4:	46bd      	mov	sp, r7
 81059c6:	bd80      	pop	{r7, pc}
 81059c8:	58024400 	.word	0x58024400
 81059cc:	017d7840 	.word	0x017d7840

081059d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81059d0:	b580      	push	{r7, lr}
 81059d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81059d4:	f7fe f82a 	bl	8103a2c <HAL_RCC_GetHCLKFreq>
 81059d8:	4602      	mov	r2, r0
 81059da:	4b06      	ldr	r3, [pc, #24]	; (81059f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81059dc:	6a1b      	ldr	r3, [r3, #32]
 81059de:	091b      	lsrs	r3, r3, #4
 81059e0:	f003 0307 	and.w	r3, r3, #7
 81059e4:	4904      	ldr	r1, [pc, #16]	; (81059f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81059e6:	5ccb      	ldrb	r3, [r1, r3]
 81059e8:	f003 031f 	and.w	r3, r3, #31
 81059ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81059f0:	4618      	mov	r0, r3
 81059f2:	bd80      	pop	{r7, pc}
 81059f4:	58024400 	.word	0x58024400
 81059f8:	081074ec 	.word	0x081074ec

081059fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81059fc:	b480      	push	{r7}
 81059fe:	b089      	sub	sp, #36	; 0x24
 8105a00:	af00      	add	r7, sp, #0
 8105a02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a04:	4ba1      	ldr	r3, [pc, #644]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a08:	f003 0303 	and.w	r3, r3, #3
 8105a0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105a0e:	4b9f      	ldr	r3, [pc, #636]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a12:	0b1b      	lsrs	r3, r3, #12
 8105a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105a18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105a1a:	4b9c      	ldr	r3, [pc, #624]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a1e:	091b      	lsrs	r3, r3, #4
 8105a20:	f003 0301 	and.w	r3, r3, #1
 8105a24:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105a26:	4b99      	ldr	r3, [pc, #612]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a2a:	08db      	lsrs	r3, r3, #3
 8105a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a30:	693a      	ldr	r2, [r7, #16]
 8105a32:	fb02 f303 	mul.w	r3, r2, r3
 8105a36:	ee07 3a90 	vmov	s15, r3
 8105a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105a42:	697b      	ldr	r3, [r7, #20]
 8105a44:	2b00      	cmp	r3, #0
 8105a46:	f000 8111 	beq.w	8105c6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105a4a:	69bb      	ldr	r3, [r7, #24]
 8105a4c:	2b02      	cmp	r3, #2
 8105a4e:	f000 8083 	beq.w	8105b58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105a52:	69bb      	ldr	r3, [r7, #24]
 8105a54:	2b02      	cmp	r3, #2
 8105a56:	f200 80a1 	bhi.w	8105b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105a5a:	69bb      	ldr	r3, [r7, #24]
 8105a5c:	2b00      	cmp	r3, #0
 8105a5e:	d003      	beq.n	8105a68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105a60:	69bb      	ldr	r3, [r7, #24]
 8105a62:	2b01      	cmp	r3, #1
 8105a64:	d056      	beq.n	8105b14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105a66:	e099      	b.n	8105b9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a68:	4b88      	ldr	r3, [pc, #544]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	f003 0320 	and.w	r3, r3, #32
 8105a70:	2b00      	cmp	r3, #0
 8105a72:	d02d      	beq.n	8105ad0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a74:	4b85      	ldr	r3, [pc, #532]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105a76:	681b      	ldr	r3, [r3, #0]
 8105a78:	08db      	lsrs	r3, r3, #3
 8105a7a:	f003 0303 	and.w	r3, r3, #3
 8105a7e:	4a84      	ldr	r2, [pc, #528]	; (8105c90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105a80:	fa22 f303 	lsr.w	r3, r2, r3
 8105a84:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105a86:	68bb      	ldr	r3, [r7, #8]
 8105a88:	ee07 3a90 	vmov	s15, r3
 8105a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a90:	697b      	ldr	r3, [r7, #20]
 8105a92:	ee07 3a90 	vmov	s15, r3
 8105a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a9e:	4b7b      	ldr	r3, [pc, #492]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aa6:	ee07 3a90 	vmov	s15, r3
 8105aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ab2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105ace:	e087      	b.n	8105be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105ad0:	697b      	ldr	r3, [r7, #20]
 8105ad2:	ee07 3a90 	vmov	s15, r3
 8105ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ada:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105c98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ae2:	4b6a      	ldr	r3, [pc, #424]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aea:	ee07 3a90 	vmov	s15, r3
 8105aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105af6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105b12:	e065      	b.n	8105be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105b14:	697b      	ldr	r3, [r7, #20]
 8105b16:	ee07 3a90 	vmov	s15, r3
 8105b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b26:	4b59      	ldr	r3, [pc, #356]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b2e:	ee07 3a90 	vmov	s15, r3
 8105b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105b56:	e043      	b.n	8105be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105b58:	697b      	ldr	r3, [r7, #20]
 8105b5a:	ee07 3a90 	vmov	s15, r3
 8105b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b6a:	4b48      	ldr	r3, [pc, #288]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b72:	ee07 3a90 	vmov	s15, r3
 8105b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105b9a:	e021      	b.n	8105be0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105b9c:	697b      	ldr	r3, [r7, #20]
 8105b9e:	ee07 3a90 	vmov	s15, r3
 8105ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ba6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105c9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bae:	4b37      	ldr	r3, [pc, #220]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bb6:	ee07 3a90 	vmov	s15, r3
 8105bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105c94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105bde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105be0:	4b2a      	ldr	r3, [pc, #168]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105be4:	0a5b      	lsrs	r3, r3, #9
 8105be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105bea:	ee07 3a90 	vmov	s15, r3
 8105bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8105bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c06:	ee17 2a90 	vmov	r2, s15
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105c0e:	4b1f      	ldr	r3, [pc, #124]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c12:	0c1b      	lsrs	r3, r3, #16
 8105c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c18:	ee07 3a90 	vmov	s15, r3
 8105c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c34:	ee17 2a90 	vmov	r2, s15
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105c3c:	4b13      	ldr	r3, [pc, #76]	; (8105c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c40:	0e1b      	lsrs	r3, r3, #24
 8105c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c46:	ee07 3a90 	vmov	s15, r3
 8105c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c62:	ee17 2a90 	vmov	r2, s15
 8105c66:	687b      	ldr	r3, [r7, #4]
 8105c68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105c6a:	e008      	b.n	8105c7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	2200      	movs	r2, #0
 8105c70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	2200      	movs	r2, #0
 8105c76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	2200      	movs	r2, #0
 8105c7c:	609a      	str	r2, [r3, #8]
}
 8105c7e:	bf00      	nop
 8105c80:	3724      	adds	r7, #36	; 0x24
 8105c82:	46bd      	mov	sp, r7
 8105c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c88:	4770      	bx	lr
 8105c8a:	bf00      	nop
 8105c8c:	58024400 	.word	0x58024400
 8105c90:	03d09000 	.word	0x03d09000
 8105c94:	46000000 	.word	0x46000000
 8105c98:	4c742400 	.word	0x4c742400
 8105c9c:	4a742400 	.word	0x4a742400
 8105ca0:	4bbebc20 	.word	0x4bbebc20

08105ca4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105ca4:	b480      	push	{r7}
 8105ca6:	b089      	sub	sp, #36	; 0x24
 8105ca8:	af00      	add	r7, sp, #0
 8105caa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105cac:	4ba1      	ldr	r3, [pc, #644]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105cb0:	f003 0303 	and.w	r3, r3, #3
 8105cb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105cb6:	4b9f      	ldr	r3, [pc, #636]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105cba:	0d1b      	lsrs	r3, r3, #20
 8105cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105cc0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105cc2:	4b9c      	ldr	r3, [pc, #624]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105cc6:	0a1b      	lsrs	r3, r3, #8
 8105cc8:	f003 0301 	and.w	r3, r3, #1
 8105ccc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105cce:	4b99      	ldr	r3, [pc, #612]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105cd2:	08db      	lsrs	r3, r3, #3
 8105cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105cd8:	693a      	ldr	r2, [r7, #16]
 8105cda:	fb02 f303 	mul.w	r3, r2, r3
 8105cde:	ee07 3a90 	vmov	s15, r3
 8105ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105cea:	697b      	ldr	r3, [r7, #20]
 8105cec:	2b00      	cmp	r3, #0
 8105cee:	f000 8111 	beq.w	8105f14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105cf2:	69bb      	ldr	r3, [r7, #24]
 8105cf4:	2b02      	cmp	r3, #2
 8105cf6:	f000 8083 	beq.w	8105e00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105cfa:	69bb      	ldr	r3, [r7, #24]
 8105cfc:	2b02      	cmp	r3, #2
 8105cfe:	f200 80a1 	bhi.w	8105e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105d02:	69bb      	ldr	r3, [r7, #24]
 8105d04:	2b00      	cmp	r3, #0
 8105d06:	d003      	beq.n	8105d10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105d08:	69bb      	ldr	r3, [r7, #24]
 8105d0a:	2b01      	cmp	r3, #1
 8105d0c:	d056      	beq.n	8105dbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105d0e:	e099      	b.n	8105e44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105d10:	4b88      	ldr	r3, [pc, #544]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d12:	681b      	ldr	r3, [r3, #0]
 8105d14:	f003 0320 	and.w	r3, r3, #32
 8105d18:	2b00      	cmp	r3, #0
 8105d1a:	d02d      	beq.n	8105d78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105d1c:	4b85      	ldr	r3, [pc, #532]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	08db      	lsrs	r3, r3, #3
 8105d22:	f003 0303 	and.w	r3, r3, #3
 8105d26:	4a84      	ldr	r2, [pc, #528]	; (8105f38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105d28:	fa22 f303 	lsr.w	r3, r2, r3
 8105d2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105d2e:	68bb      	ldr	r3, [r7, #8]
 8105d30:	ee07 3a90 	vmov	s15, r3
 8105d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d38:	697b      	ldr	r3, [r7, #20]
 8105d3a:	ee07 3a90 	vmov	s15, r3
 8105d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d46:	4b7b      	ldr	r3, [pc, #492]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d4e:	ee07 3a90 	vmov	s15, r3
 8105d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105d76:	e087      	b.n	8105e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105d78:	697b      	ldr	r3, [r7, #20]
 8105d7a:	ee07 3a90 	vmov	s15, r3
 8105d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105f40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d8a:	4b6a      	ldr	r3, [pc, #424]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d92:	ee07 3a90 	vmov	s15, r3
 8105d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105dba:	e065      	b.n	8105e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105dbc:	697b      	ldr	r3, [r7, #20]
 8105dbe:	ee07 3a90 	vmov	s15, r3
 8105dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dce:	4b59      	ldr	r3, [pc, #356]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dd6:	ee07 3a90 	vmov	s15, r3
 8105dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8105de2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105dfe:	e043      	b.n	8105e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105e00:	697b      	ldr	r3, [r7, #20]
 8105e02:	ee07 3a90 	vmov	s15, r3
 8105e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e12:	4b48      	ldr	r3, [pc, #288]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e1a:	ee07 3a90 	vmov	s15, r3
 8105e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e42:	e021      	b.n	8105e88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105e44:	697b      	ldr	r3, [r7, #20]
 8105e46:	ee07 3a90 	vmov	s15, r3
 8105e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e56:	4b37      	ldr	r3, [pc, #220]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e5e:	ee07 3a90 	vmov	s15, r3
 8105e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105f3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105e88:	4b2a      	ldr	r3, [pc, #168]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e8c:	0a5b      	lsrs	r3, r3, #9
 8105e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105e92:	ee07 3a90 	vmov	s15, r3
 8105e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105eae:	ee17 2a90 	vmov	r2, s15
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105eb6:	4b1f      	ldr	r3, [pc, #124]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105eba:	0c1b      	lsrs	r3, r3, #16
 8105ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105ec0:	ee07 3a90 	vmov	s15, r3
 8105ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105edc:	ee17 2a90 	vmov	r2, s15
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105ee4:	4b13      	ldr	r3, [pc, #76]	; (8105f34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ee8:	0e1b      	lsrs	r3, r3, #24
 8105eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105eee:	ee07 3a90 	vmov	s15, r3
 8105ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f0a:	ee17 2a90 	vmov	r2, s15
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105f12:	e008      	b.n	8105f26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	2200      	movs	r2, #0
 8105f18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	2200      	movs	r2, #0
 8105f1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	2200      	movs	r2, #0
 8105f24:	609a      	str	r2, [r3, #8]
}
 8105f26:	bf00      	nop
 8105f28:	3724      	adds	r7, #36	; 0x24
 8105f2a:	46bd      	mov	sp, r7
 8105f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f30:	4770      	bx	lr
 8105f32:	bf00      	nop
 8105f34:	58024400 	.word	0x58024400
 8105f38:	03d09000 	.word	0x03d09000
 8105f3c:	46000000 	.word	0x46000000
 8105f40:	4c742400 	.word	0x4c742400
 8105f44:	4a742400 	.word	0x4a742400
 8105f48:	4bbebc20 	.word	0x4bbebc20

08105f4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105f4c:	b480      	push	{r7}
 8105f4e:	b089      	sub	sp, #36	; 0x24
 8105f50:	af00      	add	r7, sp, #0
 8105f52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105f54:	4ba0      	ldr	r3, [pc, #640]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f58:	f003 0303 	and.w	r3, r3, #3
 8105f5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105f5e:	4b9e      	ldr	r3, [pc, #632]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f62:	091b      	lsrs	r3, r3, #4
 8105f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105f68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105f6a:	4b9b      	ldr	r3, [pc, #620]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f6e:	f003 0301 	and.w	r3, r3, #1
 8105f72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105f74:	4b98      	ldr	r3, [pc, #608]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105f78:	08db      	lsrs	r3, r3, #3
 8105f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105f7e:	693a      	ldr	r2, [r7, #16]
 8105f80:	fb02 f303 	mul.w	r3, r2, r3
 8105f84:	ee07 3a90 	vmov	s15, r3
 8105f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105f90:	697b      	ldr	r3, [r7, #20]
 8105f92:	2b00      	cmp	r3, #0
 8105f94:	f000 8111 	beq.w	81061ba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105f98:	69bb      	ldr	r3, [r7, #24]
 8105f9a:	2b02      	cmp	r3, #2
 8105f9c:	f000 8083 	beq.w	81060a6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105fa0:	69bb      	ldr	r3, [r7, #24]
 8105fa2:	2b02      	cmp	r3, #2
 8105fa4:	f200 80a1 	bhi.w	81060ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105fa8:	69bb      	ldr	r3, [r7, #24]
 8105faa:	2b00      	cmp	r3, #0
 8105fac:	d003      	beq.n	8105fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105fae:	69bb      	ldr	r3, [r7, #24]
 8105fb0:	2b01      	cmp	r3, #1
 8105fb2:	d056      	beq.n	8106062 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105fb4:	e099      	b.n	81060ea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105fb6:	4b88      	ldr	r3, [pc, #544]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	f003 0320 	and.w	r3, r3, #32
 8105fbe:	2b00      	cmp	r3, #0
 8105fc0:	d02d      	beq.n	810601e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105fc2:	4b85      	ldr	r3, [pc, #532]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	08db      	lsrs	r3, r3, #3
 8105fc8:	f003 0303 	and.w	r3, r3, #3
 8105fcc:	4a83      	ldr	r2, [pc, #524]	; (81061dc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105fce:	fa22 f303 	lsr.w	r3, r2, r3
 8105fd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105fd4:	68bb      	ldr	r3, [r7, #8]
 8105fd6:	ee07 3a90 	vmov	s15, r3
 8105fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fde:	697b      	ldr	r3, [r7, #20]
 8105fe0:	ee07 3a90 	vmov	s15, r3
 8105fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fec:	4b7a      	ldr	r3, [pc, #488]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ff4:	ee07 3a90 	vmov	s15, r3
 8105ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ffc:	ed97 6a03 	vldr	s12, [r7, #12]
 8106000:	eddf 5a77 	vldr	s11, [pc, #476]	; 81061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106004:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106008:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810600c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106018:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810601c:	e087      	b.n	810612e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810601e:	697b      	ldr	r3, [r7, #20]
 8106020:	ee07 3a90 	vmov	s15, r3
 8106024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106028:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81061e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810602c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106030:	4b69      	ldr	r3, [pc, #420]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106038:	ee07 3a90 	vmov	s15, r3
 810603c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106040:	ed97 6a03 	vldr	s12, [r7, #12]
 8106044:	eddf 5a66 	vldr	s11, [pc, #408]	; 81061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810604c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106054:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106058:	ee67 7a27 	vmul.f32	s15, s14, s15
 810605c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106060:	e065      	b.n	810612e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106062:	697b      	ldr	r3, [r7, #20]
 8106064:	ee07 3a90 	vmov	s15, r3
 8106068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810606c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81061e8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106070:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106074:	4b58      	ldr	r3, [pc, #352]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810607c:	ee07 3a90 	vmov	s15, r3
 8106080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106084:	ed97 6a03 	vldr	s12, [r7, #12]
 8106088:	eddf 5a55 	vldr	s11, [pc, #340]	; 81061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810608c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106090:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106094:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106098:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810609c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060a4:	e043      	b.n	810612e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060a6:	697b      	ldr	r3, [r7, #20]
 81060a8:	ee07 3a90 	vmov	s15, r3
 81060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81061ec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81060b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060b8:	4b47      	ldr	r3, [pc, #284]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060c0:	ee07 3a90 	vmov	s15, r3
 81060c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060c8:	ed97 6a03 	vldr	s12, [r7, #12]
 81060cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 81061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81060d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81060dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060e8:	e021      	b.n	810612e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060ea:	697b      	ldr	r3, [r7, #20]
 81060ec:	ee07 3a90 	vmov	s15, r3
 81060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060f4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81061e4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81060f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060fc:	4b36      	ldr	r3, [pc, #216]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106104:	ee07 3a90 	vmov	s15, r3
 8106108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810610c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106110:	eddf 5a33 	vldr	s11, [pc, #204]	; 81061e0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106114:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106118:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810611c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106120:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106128:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810612c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810612e:	4b2a      	ldr	r3, [pc, #168]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106132:	0a5b      	lsrs	r3, r3, #9
 8106134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106138:	ee07 3a90 	vmov	s15, r3
 810613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106144:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106148:	edd7 6a07 	vldr	s13, [r7, #28]
 810614c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106154:	ee17 2a90 	vmov	r2, s15
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810615c:	4b1e      	ldr	r3, [pc, #120]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106160:	0c1b      	lsrs	r3, r3, #16
 8106162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106166:	ee07 3a90 	vmov	s15, r3
 810616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810616e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106172:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106176:	edd7 6a07 	vldr	s13, [r7, #28]
 810617a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810617e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106182:	ee17 2a90 	vmov	r2, s15
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810618a:	4b13      	ldr	r3, [pc, #76]	; (81061d8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810618e:	0e1b      	lsrs	r3, r3, #24
 8106190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106194:	ee07 3a90 	vmov	s15, r3
 8106198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810619c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81061a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061a4:	edd7 6a07 	vldr	s13, [r7, #28]
 81061a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061b0:	ee17 2a90 	vmov	r2, s15
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81061b8:	e008      	b.n	81061cc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	2200      	movs	r2, #0
 81061be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2200      	movs	r2, #0
 81061c4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	2200      	movs	r2, #0
 81061ca:	609a      	str	r2, [r3, #8]
}
 81061cc:	bf00      	nop
 81061ce:	3724      	adds	r7, #36	; 0x24
 81061d0:	46bd      	mov	sp, r7
 81061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061d6:	4770      	bx	lr
 81061d8:	58024400 	.word	0x58024400
 81061dc:	03d09000 	.word	0x03d09000
 81061e0:	46000000 	.word	0x46000000
 81061e4:	4c742400 	.word	0x4c742400
 81061e8:	4a742400 	.word	0x4a742400
 81061ec:	4bbebc20 	.word	0x4bbebc20

081061f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81061f0:	b580      	push	{r7, lr}
 81061f2:	b084      	sub	sp, #16
 81061f4:	af00      	add	r7, sp, #0
 81061f6:	6078      	str	r0, [r7, #4]
 81061f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81061fa:	2300      	movs	r3, #0
 81061fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81061fe:	4b54      	ldr	r3, [pc, #336]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106202:	f003 0303 	and.w	r3, r3, #3
 8106206:	2b03      	cmp	r3, #3
 8106208:	d101      	bne.n	810620e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810620a:	2301      	movs	r3, #1
 810620c:	e09b      	b.n	8106346 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810620e:	4b50      	ldr	r3, [pc, #320]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	4a4f      	ldr	r2, [pc, #316]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810621a:	f7fb f83f 	bl	810129c <HAL_GetTick>
 810621e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106220:	e008      	b.n	8106234 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106222:	f7fb f83b 	bl	810129c <HAL_GetTick>
 8106226:	4602      	mov	r2, r0
 8106228:	68bb      	ldr	r3, [r7, #8]
 810622a:	1ad3      	subs	r3, r2, r3
 810622c:	2b02      	cmp	r3, #2
 810622e:	d901      	bls.n	8106234 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106230:	2303      	movs	r3, #3
 8106232:	e088      	b.n	8106346 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106234:	4b46      	ldr	r3, [pc, #280]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810623c:	2b00      	cmp	r3, #0
 810623e:	d1f0      	bne.n	8106222 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106240:	4b43      	ldr	r3, [pc, #268]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106244:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	031b      	lsls	r3, r3, #12
 810624e:	4940      	ldr	r1, [pc, #256]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106250:	4313      	orrs	r3, r2
 8106252:	628b      	str	r3, [r1, #40]	; 0x28
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	685b      	ldr	r3, [r3, #4]
 8106258:	3b01      	subs	r3, #1
 810625a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810625e:	687b      	ldr	r3, [r7, #4]
 8106260:	689b      	ldr	r3, [r3, #8]
 8106262:	3b01      	subs	r3, #1
 8106264:	025b      	lsls	r3, r3, #9
 8106266:	b29b      	uxth	r3, r3
 8106268:	431a      	orrs	r2, r3
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	68db      	ldr	r3, [r3, #12]
 810626e:	3b01      	subs	r3, #1
 8106270:	041b      	lsls	r3, r3, #16
 8106272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106276:	431a      	orrs	r2, r3
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	691b      	ldr	r3, [r3, #16]
 810627c:	3b01      	subs	r3, #1
 810627e:	061b      	lsls	r3, r3, #24
 8106280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106284:	4932      	ldr	r1, [pc, #200]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106286:	4313      	orrs	r3, r2
 8106288:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810628a:	4b31      	ldr	r3, [pc, #196]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 810628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810628e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106292:	687b      	ldr	r3, [r7, #4]
 8106294:	695b      	ldr	r3, [r3, #20]
 8106296:	492e      	ldr	r1, [pc, #184]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106298:	4313      	orrs	r3, r2
 810629a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810629c:	4b2c      	ldr	r3, [pc, #176]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 810629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062a0:	f023 0220 	bic.w	r2, r3, #32
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	699b      	ldr	r3, [r3, #24]
 81062a8:	4929      	ldr	r1, [pc, #164]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062aa:	4313      	orrs	r3, r2
 81062ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81062ae:	4b28      	ldr	r3, [pc, #160]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062b2:	4a27      	ldr	r2, [pc, #156]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062b4:	f023 0310 	bic.w	r3, r3, #16
 81062b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81062ba:	4b25      	ldr	r3, [pc, #148]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81062c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81062c6:	687a      	ldr	r2, [r7, #4]
 81062c8:	69d2      	ldr	r2, [r2, #28]
 81062ca:	00d2      	lsls	r2, r2, #3
 81062cc:	4920      	ldr	r1, [pc, #128]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062ce:	4313      	orrs	r3, r2
 81062d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81062d2:	4b1f      	ldr	r3, [pc, #124]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062d6:	4a1e      	ldr	r2, [pc, #120]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062d8:	f043 0310 	orr.w	r3, r3, #16
 81062dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81062de:	683b      	ldr	r3, [r7, #0]
 81062e0:	2b00      	cmp	r3, #0
 81062e2:	d106      	bne.n	81062f2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81062e4:	4b1a      	ldr	r3, [pc, #104]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062e8:	4a19      	ldr	r2, [pc, #100]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81062ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 81062f0:	e00f      	b.n	8106312 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81062f2:	683b      	ldr	r3, [r7, #0]
 81062f4:	2b01      	cmp	r3, #1
 81062f6:	d106      	bne.n	8106306 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81062f8:	4b15      	ldr	r3, [pc, #84]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81062fc:	4a14      	ldr	r2, [pc, #80]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 81062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106302:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106304:	e005      	b.n	8106312 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106306:	4b12      	ldr	r3, [pc, #72]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810630a:	4a11      	ldr	r2, [pc, #68]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 810630c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106312:	4b0f      	ldr	r3, [pc, #60]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106314:	681b      	ldr	r3, [r3, #0]
 8106316:	4a0e      	ldr	r2, [pc, #56]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 8106318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810631c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810631e:	f7fa ffbd 	bl	810129c <HAL_GetTick>
 8106322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106324:	e008      	b.n	8106338 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106326:	f7fa ffb9 	bl	810129c <HAL_GetTick>
 810632a:	4602      	mov	r2, r0
 810632c:	68bb      	ldr	r3, [r7, #8]
 810632e:	1ad3      	subs	r3, r2, r3
 8106330:	2b02      	cmp	r3, #2
 8106332:	d901      	bls.n	8106338 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106334:	2303      	movs	r3, #3
 8106336:	e006      	b.n	8106346 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106338:	4b05      	ldr	r3, [pc, #20]	; (8106350 <RCCEx_PLL2_Config+0x160>)
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106340:	2b00      	cmp	r3, #0
 8106342:	d0f0      	beq.n	8106326 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106344:	7bfb      	ldrb	r3, [r7, #15]
}
 8106346:	4618      	mov	r0, r3
 8106348:	3710      	adds	r7, #16
 810634a:	46bd      	mov	sp, r7
 810634c:	bd80      	pop	{r7, pc}
 810634e:	bf00      	nop
 8106350:	58024400 	.word	0x58024400

08106354 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106354:	b580      	push	{r7, lr}
 8106356:	b084      	sub	sp, #16
 8106358:	af00      	add	r7, sp, #0
 810635a:	6078      	str	r0, [r7, #4]
 810635c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810635e:	2300      	movs	r3, #0
 8106360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106362:	4b54      	ldr	r3, [pc, #336]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106366:	f003 0303 	and.w	r3, r3, #3
 810636a:	2b03      	cmp	r3, #3
 810636c:	d101      	bne.n	8106372 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810636e:	2301      	movs	r3, #1
 8106370:	e09b      	b.n	81064aa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106372:	4b50      	ldr	r3, [pc, #320]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	4a4f      	ldr	r2, [pc, #316]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810637c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810637e:	f7fa ff8d 	bl	810129c <HAL_GetTick>
 8106382:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106384:	e008      	b.n	8106398 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106386:	f7fa ff89 	bl	810129c <HAL_GetTick>
 810638a:	4602      	mov	r2, r0
 810638c:	68bb      	ldr	r3, [r7, #8]
 810638e:	1ad3      	subs	r3, r2, r3
 8106390:	2b02      	cmp	r3, #2
 8106392:	d901      	bls.n	8106398 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106394:	2303      	movs	r3, #3
 8106396:	e088      	b.n	81064aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106398:	4b46      	ldr	r3, [pc, #280]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81063a0:	2b00      	cmp	r3, #0
 81063a2:	d1f0      	bne.n	8106386 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81063a4:	4b43      	ldr	r3, [pc, #268]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 81063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	681b      	ldr	r3, [r3, #0]
 81063b0:	051b      	lsls	r3, r3, #20
 81063b2:	4940      	ldr	r1, [pc, #256]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 81063b4:	4313      	orrs	r3, r2
 81063b6:	628b      	str	r3, [r1, #40]	; 0x28
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	685b      	ldr	r3, [r3, #4]
 81063bc:	3b01      	subs	r3, #1
 81063be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	689b      	ldr	r3, [r3, #8]
 81063c6:	3b01      	subs	r3, #1
 81063c8:	025b      	lsls	r3, r3, #9
 81063ca:	b29b      	uxth	r3, r3
 81063cc:	431a      	orrs	r2, r3
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	68db      	ldr	r3, [r3, #12]
 81063d2:	3b01      	subs	r3, #1
 81063d4:	041b      	lsls	r3, r3, #16
 81063d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81063da:	431a      	orrs	r2, r3
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	691b      	ldr	r3, [r3, #16]
 81063e0:	3b01      	subs	r3, #1
 81063e2:	061b      	lsls	r3, r3, #24
 81063e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81063e8:	4932      	ldr	r1, [pc, #200]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 81063ea:	4313      	orrs	r3, r2
 81063ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81063ee:	4b31      	ldr	r3, [pc, #196]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 81063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	695b      	ldr	r3, [r3, #20]
 81063fa:	492e      	ldr	r1, [pc, #184]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 81063fc:	4313      	orrs	r3, r2
 81063fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106400:	4b2c      	ldr	r3, [pc, #176]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106404:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	699b      	ldr	r3, [r3, #24]
 810640c:	4929      	ldr	r1, [pc, #164]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810640e:	4313      	orrs	r3, r2
 8106410:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106412:	4b28      	ldr	r3, [pc, #160]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106416:	4a27      	ldr	r2, [pc, #156]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810641c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810641e:	4b25      	ldr	r3, [pc, #148]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106426:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810642a:	687a      	ldr	r2, [r7, #4]
 810642c:	69d2      	ldr	r2, [r2, #28]
 810642e:	00d2      	lsls	r2, r2, #3
 8106430:	4920      	ldr	r1, [pc, #128]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106432:	4313      	orrs	r3, r2
 8106434:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106436:	4b1f      	ldr	r3, [pc, #124]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810643a:	4a1e      	ldr	r2, [pc, #120]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810643c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106442:	683b      	ldr	r3, [r7, #0]
 8106444:	2b00      	cmp	r3, #0
 8106446:	d106      	bne.n	8106456 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106448:	4b1a      	ldr	r3, [pc, #104]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810644c:	4a19      	ldr	r2, [pc, #100]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810644e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106454:	e00f      	b.n	8106476 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106456:	683b      	ldr	r3, [r7, #0]
 8106458:	2b01      	cmp	r3, #1
 810645a:	d106      	bne.n	810646a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810645c:	4b15      	ldr	r3, [pc, #84]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106460:	4a14      	ldr	r2, [pc, #80]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106462:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106468:	e005      	b.n	8106476 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810646a:	4b12      	ldr	r3, [pc, #72]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810646e:	4a11      	ldr	r2, [pc, #68]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106476:	4b0f      	ldr	r3, [pc, #60]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	4a0e      	ldr	r2, [pc, #56]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106482:	f7fa ff0b 	bl	810129c <HAL_GetTick>
 8106486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106488:	e008      	b.n	810649c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810648a:	f7fa ff07 	bl	810129c <HAL_GetTick>
 810648e:	4602      	mov	r2, r0
 8106490:	68bb      	ldr	r3, [r7, #8]
 8106492:	1ad3      	subs	r3, r2, r3
 8106494:	2b02      	cmp	r3, #2
 8106496:	d901      	bls.n	810649c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106498:	2303      	movs	r3, #3
 810649a:	e006      	b.n	81064aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810649c:	4b05      	ldr	r3, [pc, #20]	; (81064b4 <RCCEx_PLL3_Config+0x160>)
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81064a4:	2b00      	cmp	r3, #0
 81064a6:	d0f0      	beq.n	810648a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81064aa:	4618      	mov	r0, r3
 81064ac:	3710      	adds	r7, #16
 81064ae:	46bd      	mov	sp, r7
 81064b0:	bd80      	pop	{r7, pc}
 81064b2:	bf00      	nop
 81064b4:	58024400 	.word	0x58024400

081064b8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81064b8:	b580      	push	{r7, lr}
 81064ba:	b08a      	sub	sp, #40	; 0x28
 81064bc:	af00      	add	r7, sp, #0
 81064be:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	2b00      	cmp	r3, #0
 81064c4:	d101      	bne.n	81064ca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81064c6:	2301      	movs	r3, #1
 81064c8:	e290      	b.n	81069ec <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81064ca:	f7fa ff17 	bl	81012fc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81064d4:	2b01      	cmp	r3, #1
 81064d6:	d113      	bne.n	8106500 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	4a96      	ldr	r2, [pc, #600]	; (8106738 <HAL_SAI_Init+0x280>)
 81064de:	4293      	cmp	r3, r2
 81064e0:	d004      	beq.n	81064ec <HAL_SAI_Init+0x34>
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	681b      	ldr	r3, [r3, #0]
 81064e6:	4a95      	ldr	r2, [pc, #596]	; (810673c <HAL_SAI_Init+0x284>)
 81064e8:	4293      	cmp	r3, r2
 81064ea:	d107      	bne.n	81064fc <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81064f0:	2b01      	cmp	r3, #1
 81064f2:	d103      	bne.n	81064fc <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81064f8:	2b00      	cmp	r3, #0
 81064fa:	d001      	beq.n	8106500 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81064fc:	2301      	movs	r3, #1
 81064fe:	e275      	b.n	81069ec <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a8c      	ldr	r2, [pc, #560]	; (8106738 <HAL_SAI_Init+0x280>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d004      	beq.n	8106514 <HAL_SAI_Init+0x5c>
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a8c      	ldr	r2, [pc, #560]	; (8106740 <HAL_SAI_Init+0x288>)
 8106510:	4293      	cmp	r3, r2
 8106512:	d102      	bne.n	810651a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8106514:	4b8b      	ldr	r3, [pc, #556]	; (8106744 <HAL_SAI_Init+0x28c>)
 8106516:	61bb      	str	r3, [r7, #24]
 8106518:	e028      	b.n	810656c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	4a8a      	ldr	r2, [pc, #552]	; (8106748 <HAL_SAI_Init+0x290>)
 8106520:	4293      	cmp	r3, r2
 8106522:	d004      	beq.n	810652e <HAL_SAI_Init+0x76>
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	4a88      	ldr	r2, [pc, #544]	; (810674c <HAL_SAI_Init+0x294>)
 810652a:	4293      	cmp	r3, r2
 810652c:	d102      	bne.n	8106534 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810652e:	4b88      	ldr	r3, [pc, #544]	; (8106750 <HAL_SAI_Init+0x298>)
 8106530:	61bb      	str	r3, [r7, #24]
 8106532:	e01b      	b.n	810656c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	4a86      	ldr	r2, [pc, #536]	; (8106754 <HAL_SAI_Init+0x29c>)
 810653a:	4293      	cmp	r3, r2
 810653c:	d004      	beq.n	8106548 <HAL_SAI_Init+0x90>
 810653e:	687b      	ldr	r3, [r7, #4]
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	4a85      	ldr	r2, [pc, #532]	; (8106758 <HAL_SAI_Init+0x2a0>)
 8106544:	4293      	cmp	r3, r2
 8106546:	d102      	bne.n	810654e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8106548:	4b84      	ldr	r3, [pc, #528]	; (810675c <HAL_SAI_Init+0x2a4>)
 810654a:	61bb      	str	r3, [r7, #24]
 810654c:	e00e      	b.n	810656c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810654e:	687b      	ldr	r3, [r7, #4]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	4a7a      	ldr	r2, [pc, #488]	; (810673c <HAL_SAI_Init+0x284>)
 8106554:	4293      	cmp	r3, r2
 8106556:	d004      	beq.n	8106562 <HAL_SAI_Init+0xaa>
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	4a80      	ldr	r2, [pc, #512]	; (8106760 <HAL_SAI_Init+0x2a8>)
 810655e:	4293      	cmp	r3, r2
 8106560:	d102      	bne.n	8106568 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8106562:	4b80      	ldr	r3, [pc, #512]	; (8106764 <HAL_SAI_Init+0x2ac>)
 8106564:	61bb      	str	r3, [r7, #24]
 8106566:	e001      	b.n	810656c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8106568:	2301      	movs	r3, #1
 810656a:	e23f      	b.n	81069ec <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8106572:	b2db      	uxtb	r3, r3
 8106574:	2b00      	cmp	r3, #0
 8106576:	d106      	bne.n	8106586 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2200      	movs	r2, #0
 810657c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8106580:	6878      	ldr	r0, [r7, #4]
 8106582:	f7fa fcd3 	bl	8100f2c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8106586:	6878      	ldr	r0, [r7, #4]
 8106588:	f000 fa40 	bl	8106a0c <SAI_Disable>
 810658c:	4603      	mov	r3, r0
 810658e:	2b00      	cmp	r3, #0
 8106590:	d001      	beq.n	8106596 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8106592:	2301      	movs	r3, #1
 8106594:	e22a      	b.n	81069ec <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8106596:	687b      	ldr	r3, [r7, #4]
 8106598:	2202      	movs	r2, #2
 810659a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	68db      	ldr	r3, [r3, #12]
 81065a2:	2b02      	cmp	r3, #2
 81065a4:	d00c      	beq.n	81065c0 <HAL_SAI_Init+0x108>
 81065a6:	2b02      	cmp	r3, #2
 81065a8:	d80d      	bhi.n	81065c6 <HAL_SAI_Init+0x10e>
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d002      	beq.n	81065b4 <HAL_SAI_Init+0xfc>
 81065ae:	2b01      	cmp	r3, #1
 81065b0:	d003      	beq.n	81065ba <HAL_SAI_Init+0x102>
 81065b2:	e008      	b.n	81065c6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81065b4:	2300      	movs	r3, #0
 81065b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065b8:	e008      	b.n	81065cc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81065ba:	2310      	movs	r3, #16
 81065bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065be:	e005      	b.n	81065cc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81065c0:	2320      	movs	r3, #32
 81065c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065c4:	e002      	b.n	81065cc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81065c6:	2300      	movs	r3, #0
 81065c8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	689b      	ldr	r3, [r3, #8]
 81065d0:	2b05      	cmp	r3, #5
 81065d2:	d832      	bhi.n	810663a <HAL_SAI_Init+0x182>
 81065d4:	a201      	add	r2, pc, #4	; (adr r2, 81065dc <HAL_SAI_Init+0x124>)
 81065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065da:	bf00      	nop
 81065dc:	081065f5 	.word	0x081065f5
 81065e0:	081065fb 	.word	0x081065fb
 81065e4:	08106603 	.word	0x08106603
 81065e8:	0810660b 	.word	0x0810660b
 81065ec:	0810661b 	.word	0x0810661b
 81065f0:	0810662b 	.word	0x0810662b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81065f4:	2300      	movs	r3, #0
 81065f6:	61fb      	str	r3, [r7, #28]
      break;
 81065f8:	e022      	b.n	8106640 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81065fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81065fe:	61fb      	str	r3, [r7, #28]
      break;
 8106600:	e01e      	b.n	8106640 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106606:	61fb      	str	r3, [r7, #28]
      break;
 8106608:	e01a      	b.n	8106640 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810660a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810660e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8106610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106612:	f043 0301 	orr.w	r3, r3, #1
 8106616:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106618:	e012      	b.n	8106640 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810661a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810661e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8106620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106622:	f043 0302 	orr.w	r3, r3, #2
 8106626:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106628:	e00a      	b.n	8106640 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810662a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810662e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8106630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106632:	f043 0303 	orr.w	r3, r3, #3
 8106636:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106638:	e002      	b.n	8106640 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 810663a:	2300      	movs	r3, #0
 810663c:	61fb      	str	r3, [r7, #28]
      break;
 810663e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8106640:	69bb      	ldr	r3, [r7, #24]
 8106642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106644:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	6a1b      	ldr	r3, [r3, #32]
 810664a:	2b00      	cmp	r3, #0
 810664c:	f000 80c5 	beq.w	81067da <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8106650:	2300      	movs	r3, #0
 8106652:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	4a37      	ldr	r2, [pc, #220]	; (8106738 <HAL_SAI_Init+0x280>)
 810665a:	4293      	cmp	r3, r2
 810665c:	d004      	beq.n	8106668 <HAL_SAI_Init+0x1b0>
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	4a37      	ldr	r2, [pc, #220]	; (8106740 <HAL_SAI_Init+0x288>)
 8106664:	4293      	cmp	r3, r2
 8106666:	d106      	bne.n	8106676 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106668:	f44f 7080 	mov.w	r0, #256	; 0x100
 810666c:	f04f 0100 	mov.w	r1, #0
 8106670:	f7fe fc2e 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8106674:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	681b      	ldr	r3, [r3, #0]
 810667a:	4a33      	ldr	r2, [pc, #204]	; (8106748 <HAL_SAI_Init+0x290>)
 810667c:	4293      	cmp	r3, r2
 810667e:	d004      	beq.n	810668a <HAL_SAI_Init+0x1d2>
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	4a31      	ldr	r2, [pc, #196]	; (810674c <HAL_SAI_Init+0x294>)
 8106686:	4293      	cmp	r3, r2
 8106688:	d106      	bne.n	8106698 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810668a:	f44f 7000 	mov.w	r0, #512	; 0x200
 810668e:	f04f 0100 	mov.w	r1, #0
 8106692:	f7fe fc1d 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 8106696:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	4a2d      	ldr	r2, [pc, #180]	; (8106754 <HAL_SAI_Init+0x29c>)
 810669e:	4293      	cmp	r3, r2
 81066a0:	d004      	beq.n	81066ac <HAL_SAI_Init+0x1f4>
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	4a2c      	ldr	r2, [pc, #176]	; (8106758 <HAL_SAI_Init+0x2a0>)
 81066a8:	4293      	cmp	r3, r2
 81066aa:	d106      	bne.n	81066ba <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81066ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 81066b0:	f04f 0100 	mov.w	r1, #0
 81066b4:	f7fe fc0c 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 81066b8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	681b      	ldr	r3, [r3, #0]
 81066be:	4a1f      	ldr	r2, [pc, #124]	; (810673c <HAL_SAI_Init+0x284>)
 81066c0:	4293      	cmp	r3, r2
 81066c2:	d106      	bne.n	81066d2 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81066c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 81066c8:	f04f 0100 	mov.w	r1, #0
 81066cc:	f7fe fc00 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 81066d0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	4a22      	ldr	r2, [pc, #136]	; (8106760 <HAL_SAI_Init+0x2a8>)
 81066d8:	4293      	cmp	r3, r2
 81066da:	d106      	bne.n	81066ea <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81066dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81066e0:	f04f 0100 	mov.w	r1, #0
 81066e4:	f7fe fbf4 	bl	8104ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 81066e8:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	699b      	ldr	r3, [r3, #24]
 81066ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81066f2:	d139      	bne.n	8106768 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81066f8:	2b04      	cmp	r3, #4
 81066fa:	d102      	bne.n	8106702 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81066fc:	2340      	movs	r3, #64	; 0x40
 81066fe:	60fb      	str	r3, [r7, #12]
 8106700:	e00a      	b.n	8106718 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8106702:	687b      	ldr	r3, [r7, #4]
 8106704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106706:	2b08      	cmp	r3, #8
 8106708:	d103      	bne.n	8106712 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810670a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810670e:	60fb      	str	r3, [r7, #12]
 8106710:	e002      	b.n	8106718 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8106712:	687b      	ldr	r3, [r7, #4]
 8106714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106716:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8106718:	697a      	ldr	r2, [r7, #20]
 810671a:	4613      	mov	r3, r2
 810671c:	009b      	lsls	r3, r3, #2
 810671e:	4413      	add	r3, r2
 8106720:	005b      	lsls	r3, r3, #1
 8106722:	4619      	mov	r1, r3
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	6a1b      	ldr	r3, [r3, #32]
 8106728:	68fa      	ldr	r2, [r7, #12]
 810672a:	fb02 f303 	mul.w	r3, r2, r3
 810672e:	fbb1 f3f3 	udiv	r3, r1, r3
 8106732:	613b      	str	r3, [r7, #16]
 8106734:	e030      	b.n	8106798 <HAL_SAI_Init+0x2e0>
 8106736:	bf00      	nop
 8106738:	40015804 	.word	0x40015804
 810673c:	58005404 	.word	0x58005404
 8106740:	40015824 	.word	0x40015824
 8106744:	40015800 	.word	0x40015800
 8106748:	40015c04 	.word	0x40015c04
 810674c:	40015c24 	.word	0x40015c24
 8106750:	40015c00 	.word	0x40015c00
 8106754:	40016004 	.word	0x40016004
 8106758:	40016024 	.word	0x40016024
 810675c:	40016000 	.word	0x40016000
 8106760:	58005424 	.word	0x58005424
 8106764:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810676c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106770:	d101      	bne.n	8106776 <HAL_SAI_Init+0x2be>
 8106772:	2302      	movs	r3, #2
 8106774:	e000      	b.n	8106778 <HAL_SAI_Init+0x2c0>
 8106776:	2301      	movs	r3, #1
 8106778:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810677a:	697a      	ldr	r2, [r7, #20]
 810677c:	4613      	mov	r3, r2
 810677e:	009b      	lsls	r3, r3, #2
 8106780:	4413      	add	r3, r2
 8106782:	005b      	lsls	r3, r3, #1
 8106784:	4619      	mov	r1, r3
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	6a1b      	ldr	r3, [r3, #32]
 810678a:	68ba      	ldr	r2, [r7, #8]
 810678c:	fb02 f303 	mul.w	r3, r2, r3
 8106790:	021b      	lsls	r3, r3, #8
 8106792:	fbb1 f3f3 	udiv	r3, r1, r3
 8106796:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106798:	693b      	ldr	r3, [r7, #16]
 810679a:	4a96      	ldr	r2, [pc, #600]	; (81069f4 <HAL_SAI_Init+0x53c>)
 810679c:	fba2 2303 	umull	r2, r3, r2, r3
 81067a0:	08da      	lsrs	r2, r3, #3
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81067a6:	6939      	ldr	r1, [r7, #16]
 81067a8:	4b92      	ldr	r3, [pc, #584]	; (81069f4 <HAL_SAI_Init+0x53c>)
 81067aa:	fba3 2301 	umull	r2, r3, r3, r1
 81067ae:	08da      	lsrs	r2, r3, #3
 81067b0:	4613      	mov	r3, r2
 81067b2:	009b      	lsls	r3, r3, #2
 81067b4:	4413      	add	r3, r2
 81067b6:	005b      	lsls	r3, r3, #1
 81067b8:	1aca      	subs	r2, r1, r3
 81067ba:	2a08      	cmp	r2, #8
 81067bc:	d904      	bls.n	81067c8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81067c2:	1c5a      	adds	r2, r3, #1
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81067cc:	2b04      	cmp	r3, #4
 81067ce:	d104      	bne.n	81067da <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81067d4:	085a      	lsrs	r2, r3, #1
 81067d6:	687b      	ldr	r3, [r7, #4]
 81067d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	685b      	ldr	r3, [r3, #4]
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d003      	beq.n	81067ea <HAL_SAI_Init+0x332>
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	685b      	ldr	r3, [r3, #4]
 81067e6:	2b02      	cmp	r3, #2
 81067e8:	d109      	bne.n	81067fe <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067ee:	2b01      	cmp	r3, #1
 81067f0:	d101      	bne.n	81067f6 <HAL_SAI_Init+0x33e>
 81067f2:	2300      	movs	r3, #0
 81067f4:	e001      	b.n	81067fa <HAL_SAI_Init+0x342>
 81067f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 81067fa:	623b      	str	r3, [r7, #32]
 81067fc:	e008      	b.n	8106810 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106802:	2b01      	cmp	r3, #1
 8106804:	d102      	bne.n	810680c <HAL_SAI_Init+0x354>
 8106806:	f44f 7300 	mov.w	r3, #512	; 0x200
 810680a:	e000      	b.n	810680e <HAL_SAI_Init+0x356>
 810680c:	2300      	movs	r3, #0
 810680e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106810:	f7fa fd74 	bl	81012fc <HAL_GetREVID>
 8106814:	4603      	mov	r3, r0
 8106816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810681a:	d331      	bcc.n	8106880 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	6819      	ldr	r1, [r3, #0]
 8106822:	687b      	ldr	r3, [r7, #4]
 8106824:	681a      	ldr	r2, [r3, #0]
 8106826:	4b74      	ldr	r3, [pc, #464]	; (81069f8 <HAL_SAI_Init+0x540>)
 8106828:	400b      	ands	r3, r1
 810682a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	6819      	ldr	r1, [r3, #0]
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	685a      	ldr	r2, [r3, #4]
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810683a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106840:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106846:	431a      	orrs	r2, r3
 8106848:	6a3b      	ldr	r3, [r7, #32]
 810684a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810684c:	69fb      	ldr	r3, [r7, #28]
 810684e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106854:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	695b      	ldr	r3, [r3, #20]
 810685a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106860:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106862:	687b      	ldr	r3, [r7, #4]
 8106864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106866:	051b      	lsls	r3, r3, #20
 8106868:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810686e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106870:	687b      	ldr	r3, [r7, #4]
 8106872:	691b      	ldr	r3, [r3, #16]
 8106874:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	430a      	orrs	r2, r1
 810687c:	601a      	str	r2, [r3, #0]
 810687e:	e02d      	b.n	81068dc <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	681b      	ldr	r3, [r3, #0]
 8106884:	6819      	ldr	r1, [r3, #0]
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	681a      	ldr	r2, [r3, #0]
 810688a:	4b5c      	ldr	r3, [pc, #368]	; (81069fc <HAL_SAI_Init+0x544>)
 810688c:	400b      	ands	r3, r1
 810688e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	681b      	ldr	r3, [r3, #0]
 8106894:	6819      	ldr	r1, [r3, #0]
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	685a      	ldr	r2, [r3, #4]
 810689a:	687b      	ldr	r3, [r7, #4]
 810689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810689e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81068a4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81068a6:	687b      	ldr	r3, [r7, #4]
 81068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81068aa:	431a      	orrs	r2, r3
 81068ac:	6a3b      	ldr	r3, [r7, #32]
 81068ae:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81068b0:	69fb      	ldr	r3, [r7, #28]
 81068b2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81068b8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	695b      	ldr	r3, [r3, #20]
 81068be:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81068c4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81068ca:	051b      	lsls	r3, r3, #20
 81068cc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81068d2:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	430a      	orrs	r2, r1
 81068da:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	681b      	ldr	r3, [r3, #0]
 81068e0:	685b      	ldr	r3, [r3, #4]
 81068e2:	687a      	ldr	r2, [r7, #4]
 81068e4:	6812      	ldr	r2, [r2, #0]
 81068e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81068ea:	f023 030f 	bic.w	r3, r3, #15
 81068ee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	6859      	ldr	r1, [r3, #4]
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	69da      	ldr	r2, [r3, #28]
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068fe:	431a      	orrs	r2, r3
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106904:	431a      	orrs	r2, r3
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	681b      	ldr	r3, [r3, #0]
 810690a:	430a      	orrs	r2, r1
 810690c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	681b      	ldr	r3, [r3, #0]
 8106912:	6899      	ldr	r1, [r3, #8]
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681a      	ldr	r2, [r3, #0]
 8106918:	4b39      	ldr	r3, [pc, #228]	; (8106a00 <HAL_SAI_Init+0x548>)
 810691a:	400b      	ands	r3, r1
 810691c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	6899      	ldr	r1, [r3, #8]
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106928:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810692e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8106934:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106936:	687b      	ldr	r3, [r7, #4]
 8106938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 810693a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106940:	3b01      	subs	r3, #1
 8106942:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106944:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	681b      	ldr	r3, [r3, #0]
 810694a:	430a      	orrs	r2, r1
 810694c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	681b      	ldr	r3, [r3, #0]
 8106952:	68d9      	ldr	r1, [r3, #12]
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	681a      	ldr	r2, [r3, #0]
 8106958:	f24f 0320 	movw	r3, #61472	; 0xf020
 810695c:	400b      	ands	r3, r1
 810695e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	681b      	ldr	r3, [r3, #0]
 8106964:	68d9      	ldr	r1, [r3, #12]
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810696e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106974:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106976:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810697c:	3b01      	subs	r3, #1
 810697e:	021b      	lsls	r3, r3, #8
 8106980:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	681b      	ldr	r3, [r3, #0]
 8106986:	430a      	orrs	r2, r1
 8106988:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 810698a:	687b      	ldr	r3, [r7, #4]
 810698c:	681b      	ldr	r3, [r3, #0]
 810698e:	4a1d      	ldr	r2, [pc, #116]	; (8106a04 <HAL_SAI_Init+0x54c>)
 8106990:	4293      	cmp	r3, r2
 8106992:	d004      	beq.n	810699e <HAL_SAI_Init+0x4e6>
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	4a1b      	ldr	r2, [pc, #108]	; (8106a08 <HAL_SAI_Init+0x550>)
 810699a:	4293      	cmp	r3, r2
 810699c:	d119      	bne.n	81069d2 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810699e:	69bb      	ldr	r3, [r7, #24]
 81069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81069a2:	f023 0201 	bic.w	r2, r3, #1
 81069a6:	69bb      	ldr	r3, [r7, #24]
 81069a8:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81069b0:	2b01      	cmp	r3, #1
 81069b2:	d10e      	bne.n	81069d2 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81069b4:	687b      	ldr	r3, [r7, #4]
 81069b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81069bc:	3b01      	subs	r3, #1
 81069be:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81069c0:	431a      	orrs	r2, r3
 81069c2:	69bb      	ldr	r3, [r7, #24]
 81069c4:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81069c6:	69bb      	ldr	r3, [r7, #24]
 81069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81069ca:	f043 0201 	orr.w	r2, r3, #1
 81069ce:	69bb      	ldr	r3, [r7, #24]
 81069d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	2200      	movs	r2, #0
 81069d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81069da:	687b      	ldr	r3, [r7, #4]
 81069dc:	2201      	movs	r2, #1
 81069de:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	2200      	movs	r2, #0
 81069e6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 81069ea:	2300      	movs	r3, #0
}
 81069ec:	4618      	mov	r0, r3
 81069ee:	3728      	adds	r7, #40	; 0x28
 81069f0:	46bd      	mov	sp, r7
 81069f2:	bd80      	pop	{r7, pc}
 81069f4:	cccccccd 	.word	0xcccccccd
 81069f8:	f005c010 	.word	0xf005c010
 81069fc:	f805c010 	.word	0xf805c010
 8106a00:	fff88000 	.word	0xfff88000
 8106a04:	40015804 	.word	0x40015804
 8106a08:	58005404 	.word	0x58005404

08106a0c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106a0c:	b480      	push	{r7}
 8106a0e:	b085      	sub	sp, #20
 8106a10:	af00      	add	r7, sp, #0
 8106a12:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106a14:	4b18      	ldr	r3, [pc, #96]	; (8106a78 <SAI_Disable+0x6c>)
 8106a16:	681b      	ldr	r3, [r3, #0]
 8106a18:	4a18      	ldr	r2, [pc, #96]	; (8106a7c <SAI_Disable+0x70>)
 8106a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8106a1e:	0b1b      	lsrs	r3, r3, #12
 8106a20:	009b      	lsls	r3, r3, #2
 8106a22:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106a24:	2300      	movs	r3, #0
 8106a26:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	681a      	ldr	r2, [r3, #0]
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106a36:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106a38:	68fb      	ldr	r3, [r7, #12]
 8106a3a:	2b00      	cmp	r3, #0
 8106a3c:	d10a      	bne.n	8106a54 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106a44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8106a4e:	2303      	movs	r3, #3
 8106a50:	72fb      	strb	r3, [r7, #11]
      break;
 8106a52:	e009      	b.n	8106a68 <SAI_Disable+0x5c>
    }
    count--;
 8106a54:	68fb      	ldr	r3, [r7, #12]
 8106a56:	3b01      	subs	r3, #1
 8106a58:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	681b      	ldr	r3, [r3, #0]
 8106a5e:	681b      	ldr	r3, [r3, #0]
 8106a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106a64:	2b00      	cmp	r3, #0
 8106a66:	d1e7      	bne.n	8106a38 <SAI_Disable+0x2c>

  return status;
 8106a68:	7afb      	ldrb	r3, [r7, #11]
}
 8106a6a:	4618      	mov	r0, r3
 8106a6c:	3714      	adds	r7, #20
 8106a6e:	46bd      	mov	sp, r7
 8106a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a74:	4770      	bx	lr
 8106a76:	bf00      	nop
 8106a78:	10000000 	.word	0x10000000
 8106a7c:	95cbec1b 	.word	0x95cbec1b

08106a80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8106a80:	b580      	push	{r7, lr}
 8106a82:	b082      	sub	sp, #8
 8106a84:	af00      	add	r7, sp, #0
 8106a86:	6078      	str	r0, [r7, #4]
 8106a88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	2b00      	cmp	r3, #0
 8106a8e:	d101      	bne.n	8106a94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8106a90:	2301      	movs	r3, #1
 8106a92:	e02b      	b.n	8106aec <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8106a9a:	b2db      	uxtb	r3, r3
 8106a9c:	2b00      	cmp	r3, #0
 8106a9e:	d106      	bne.n	8106aae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	2200      	movs	r2, #0
 8106aa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8106aa8:	6878      	ldr	r0, [r7, #4]
 8106aaa:	f7fa fa35 	bl	8100f18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	2202      	movs	r2, #2
 8106ab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	681a      	ldr	r2, [r3, #0]
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	3304      	adds	r3, #4
 8106abe:	4619      	mov	r1, r3
 8106ac0:	4610      	mov	r0, r2
 8106ac2:	f000 f819 	bl	8106af8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	6818      	ldr	r0, [r3, #0]
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	685b      	ldr	r3, [r3, #4]
 8106ace:	461a      	mov	r2, r3
 8106ad0:	6839      	ldr	r1, [r7, #0]
 8106ad2:	f000 f86e 	bl	8106bb2 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8106ad6:	4b07      	ldr	r3, [pc, #28]	; (8106af4 <HAL_SDRAM_Init+0x74>)
 8106ad8:	681b      	ldr	r3, [r3, #0]
 8106ada:	4a06      	ldr	r2, [pc, #24]	; (8106af4 <HAL_SDRAM_Init+0x74>)
 8106adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8106ae0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8106ae2:	687b      	ldr	r3, [r7, #4]
 8106ae4:	2201      	movs	r2, #1
 8106ae6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8106aea:	2300      	movs	r3, #0
}
 8106aec:	4618      	mov	r0, r3
 8106aee:	3708      	adds	r7, #8
 8106af0:	46bd      	mov	sp, r7
 8106af2:	bd80      	pop	{r7, pc}
 8106af4:	52004000 	.word	0x52004000

08106af8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8106af8:	b480      	push	{r7}
 8106afa:	b083      	sub	sp, #12
 8106afc:	af00      	add	r7, sp, #0
 8106afe:	6078      	str	r0, [r7, #4]
 8106b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8106b02:	683b      	ldr	r3, [r7, #0]
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	2b00      	cmp	r3, #0
 8106b08:	d123      	bne.n	8106b52 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	681b      	ldr	r3, [r3, #0]
 8106b0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106b12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106b16:	683a      	ldr	r2, [r7, #0]
 8106b18:	6851      	ldr	r1, [r2, #4]
 8106b1a:	683a      	ldr	r2, [r7, #0]
 8106b1c:	6892      	ldr	r2, [r2, #8]
 8106b1e:	4311      	orrs	r1, r2
 8106b20:	683a      	ldr	r2, [r7, #0]
 8106b22:	68d2      	ldr	r2, [r2, #12]
 8106b24:	4311      	orrs	r1, r2
 8106b26:	683a      	ldr	r2, [r7, #0]
 8106b28:	6912      	ldr	r2, [r2, #16]
 8106b2a:	4311      	orrs	r1, r2
 8106b2c:	683a      	ldr	r2, [r7, #0]
 8106b2e:	6952      	ldr	r2, [r2, #20]
 8106b30:	4311      	orrs	r1, r2
 8106b32:	683a      	ldr	r2, [r7, #0]
 8106b34:	6992      	ldr	r2, [r2, #24]
 8106b36:	4311      	orrs	r1, r2
 8106b38:	683a      	ldr	r2, [r7, #0]
 8106b3a:	69d2      	ldr	r2, [r2, #28]
 8106b3c:	4311      	orrs	r1, r2
 8106b3e:	683a      	ldr	r2, [r7, #0]
 8106b40:	6a12      	ldr	r2, [r2, #32]
 8106b42:	4311      	orrs	r1, r2
 8106b44:	683a      	ldr	r2, [r7, #0]
 8106b46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8106b48:	430a      	orrs	r2, r1
 8106b4a:	431a      	orrs	r2, r3
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	601a      	str	r2, [r3, #0]
 8106b50:	e028      	b.n	8106ba4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8106b5a:	683b      	ldr	r3, [r7, #0]
 8106b5c:	69d9      	ldr	r1, [r3, #28]
 8106b5e:	683b      	ldr	r3, [r7, #0]
 8106b60:	6a1b      	ldr	r3, [r3, #32]
 8106b62:	4319      	orrs	r1, r3
 8106b64:	683b      	ldr	r3, [r7, #0]
 8106b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b68:	430b      	orrs	r3, r1
 8106b6a:	431a      	orrs	r2, r3
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	685b      	ldr	r3, [r3, #4]
 8106b74:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8106b78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8106b7c:	683a      	ldr	r2, [r7, #0]
 8106b7e:	6851      	ldr	r1, [r2, #4]
 8106b80:	683a      	ldr	r2, [r7, #0]
 8106b82:	6892      	ldr	r2, [r2, #8]
 8106b84:	4311      	orrs	r1, r2
 8106b86:	683a      	ldr	r2, [r7, #0]
 8106b88:	68d2      	ldr	r2, [r2, #12]
 8106b8a:	4311      	orrs	r1, r2
 8106b8c:	683a      	ldr	r2, [r7, #0]
 8106b8e:	6912      	ldr	r2, [r2, #16]
 8106b90:	4311      	orrs	r1, r2
 8106b92:	683a      	ldr	r2, [r7, #0]
 8106b94:	6952      	ldr	r2, [r2, #20]
 8106b96:	4311      	orrs	r1, r2
 8106b98:	683a      	ldr	r2, [r7, #0]
 8106b9a:	6992      	ldr	r2, [r2, #24]
 8106b9c:	430a      	orrs	r2, r1
 8106b9e:	431a      	orrs	r2, r3
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8106ba4:	2300      	movs	r3, #0
}
 8106ba6:	4618      	mov	r0, r3
 8106ba8:	370c      	adds	r7, #12
 8106baa:	46bd      	mov	sp, r7
 8106bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb0:	4770      	bx	lr

08106bb2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8106bb2:	b480      	push	{r7}
 8106bb4:	b085      	sub	sp, #20
 8106bb6:	af00      	add	r7, sp, #0
 8106bb8:	60f8      	str	r0, [r7, #12]
 8106bba:	60b9      	str	r1, [r7, #8]
 8106bbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	2b00      	cmp	r3, #0
 8106bc2:	d128      	bne.n	8106c16 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8106bc4:	68fb      	ldr	r3, [r7, #12]
 8106bc6:	689b      	ldr	r3, [r3, #8]
 8106bc8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8106bcc:	68bb      	ldr	r3, [r7, #8]
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	1e59      	subs	r1, r3, #1
 8106bd2:	68bb      	ldr	r3, [r7, #8]
 8106bd4:	685b      	ldr	r3, [r3, #4]
 8106bd6:	3b01      	subs	r3, #1
 8106bd8:	011b      	lsls	r3, r3, #4
 8106bda:	4319      	orrs	r1, r3
 8106bdc:	68bb      	ldr	r3, [r7, #8]
 8106bde:	689b      	ldr	r3, [r3, #8]
 8106be0:	3b01      	subs	r3, #1
 8106be2:	021b      	lsls	r3, r3, #8
 8106be4:	4319      	orrs	r1, r3
 8106be6:	68bb      	ldr	r3, [r7, #8]
 8106be8:	68db      	ldr	r3, [r3, #12]
 8106bea:	3b01      	subs	r3, #1
 8106bec:	031b      	lsls	r3, r3, #12
 8106bee:	4319      	orrs	r1, r3
 8106bf0:	68bb      	ldr	r3, [r7, #8]
 8106bf2:	691b      	ldr	r3, [r3, #16]
 8106bf4:	3b01      	subs	r3, #1
 8106bf6:	041b      	lsls	r3, r3, #16
 8106bf8:	4319      	orrs	r1, r3
 8106bfa:	68bb      	ldr	r3, [r7, #8]
 8106bfc:	695b      	ldr	r3, [r3, #20]
 8106bfe:	3b01      	subs	r3, #1
 8106c00:	051b      	lsls	r3, r3, #20
 8106c02:	4319      	orrs	r1, r3
 8106c04:	68bb      	ldr	r3, [r7, #8]
 8106c06:	699b      	ldr	r3, [r3, #24]
 8106c08:	3b01      	subs	r3, #1
 8106c0a:	061b      	lsls	r3, r3, #24
 8106c0c:	430b      	orrs	r3, r1
 8106c0e:	431a      	orrs	r2, r3
 8106c10:	68fb      	ldr	r3, [r7, #12]
 8106c12:	609a      	str	r2, [r3, #8]
 8106c14:	e02f      	b.n	8106c76 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8106c16:	68fb      	ldr	r3, [r7, #12]
 8106c18:	689b      	ldr	r3, [r3, #8]
 8106c1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106c22:	68ba      	ldr	r2, [r7, #8]
 8106c24:	68d2      	ldr	r2, [r2, #12]
 8106c26:	3a01      	subs	r2, #1
 8106c28:	0311      	lsls	r1, r2, #12
 8106c2a:	68ba      	ldr	r2, [r7, #8]
 8106c2c:	6952      	ldr	r2, [r2, #20]
 8106c2e:	3a01      	subs	r2, #1
 8106c30:	0512      	lsls	r2, r2, #20
 8106c32:	430a      	orrs	r2, r1
 8106c34:	431a      	orrs	r2, r3
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8106c3a:	68fb      	ldr	r3, [r7, #12]
 8106c3c:	68db      	ldr	r3, [r3, #12]
 8106c3e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8106c42:	68bb      	ldr	r3, [r7, #8]
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	1e59      	subs	r1, r3, #1
 8106c48:	68bb      	ldr	r3, [r7, #8]
 8106c4a:	685b      	ldr	r3, [r3, #4]
 8106c4c:	3b01      	subs	r3, #1
 8106c4e:	011b      	lsls	r3, r3, #4
 8106c50:	4319      	orrs	r1, r3
 8106c52:	68bb      	ldr	r3, [r7, #8]
 8106c54:	689b      	ldr	r3, [r3, #8]
 8106c56:	3b01      	subs	r3, #1
 8106c58:	021b      	lsls	r3, r3, #8
 8106c5a:	4319      	orrs	r1, r3
 8106c5c:	68bb      	ldr	r3, [r7, #8]
 8106c5e:	691b      	ldr	r3, [r3, #16]
 8106c60:	3b01      	subs	r3, #1
 8106c62:	041b      	lsls	r3, r3, #16
 8106c64:	4319      	orrs	r1, r3
 8106c66:	68bb      	ldr	r3, [r7, #8]
 8106c68:	699b      	ldr	r3, [r3, #24]
 8106c6a:	3b01      	subs	r3, #1
 8106c6c:	061b      	lsls	r3, r3, #24
 8106c6e:	430b      	orrs	r3, r1
 8106c70:	431a      	orrs	r2, r3
 8106c72:	68fb      	ldr	r3, [r7, #12]
 8106c74:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8106c76:	2300      	movs	r3, #0
}
 8106c78:	4618      	mov	r0, r3
 8106c7a:	3714      	adds	r7, #20
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c82:	4770      	bx	lr

08106c84 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8106c84:	b084      	sub	sp, #16
 8106c86:	b480      	push	{r7}
 8106c88:	b085      	sub	sp, #20
 8106c8a:	af00      	add	r7, sp, #0
 8106c8c:	6078      	str	r0, [r7, #4]
 8106c8e:	f107 001c 	add.w	r0, r7, #28
 8106c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8106c96:	2300      	movs	r3, #0
 8106c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8106c9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8106c9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8106c9e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8106ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8106ca2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8106ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8106ca6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8106ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8106caa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8106cac:	68fa      	ldr	r2, [r7, #12]
 8106cae:	4313      	orrs	r3, r2
 8106cb0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	685a      	ldr	r2, [r3, #4]
 8106cb6:	4b07      	ldr	r3, [pc, #28]	; (8106cd4 <SDMMC_Init+0x50>)
 8106cb8:	4013      	ands	r3, r2
 8106cba:	68fa      	ldr	r2, [r7, #12]
 8106cbc:	431a      	orrs	r2, r3
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8106cc2:	2300      	movs	r3, #0
}
 8106cc4:	4618      	mov	r0, r3
 8106cc6:	3714      	adds	r7, #20
 8106cc8:	46bd      	mov	sp, r7
 8106cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cce:	b004      	add	sp, #16
 8106cd0:	4770      	bx	lr
 8106cd2:	bf00      	nop
 8106cd4:	ffc02c00 	.word	0xffc02c00

08106cd8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8106cd8:	b480      	push	{r7}
 8106cda:	b083      	sub	sp, #12
 8106cdc:	af00      	add	r7, sp, #0
 8106cde:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8106ce6:	4618      	mov	r0, r3
 8106ce8:	370c      	adds	r7, #12
 8106cea:	46bd      	mov	sp, r7
 8106cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cf0:	4770      	bx	lr

08106cf2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8106cf2:	b480      	push	{r7}
 8106cf4:	b083      	sub	sp, #12
 8106cf6:	af00      	add	r7, sp, #0
 8106cf8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	681b      	ldr	r3, [r3, #0]
 8106cfe:	f043 0203 	orr.w	r2, r3, #3
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8106d06:	2300      	movs	r3, #0
}
 8106d08:	4618      	mov	r0, r3
 8106d0a:	370c      	adds	r7, #12
 8106d0c:	46bd      	mov	sp, r7
 8106d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d12:	4770      	bx	lr

08106d14 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8106d14:	b480      	push	{r7}
 8106d16:	b083      	sub	sp, #12
 8106d18:	af00      	add	r7, sp, #0
 8106d1a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8106d1c:	687b      	ldr	r3, [r7, #4]
 8106d1e:	681b      	ldr	r3, [r3, #0]
 8106d20:	f003 0303 	and.w	r3, r3, #3
}
 8106d24:	4618      	mov	r0, r3
 8106d26:	370c      	adds	r7, #12
 8106d28:	46bd      	mov	sp, r7
 8106d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d2e:	4770      	bx	lr

08106d30 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8106d30:	b480      	push	{r7}
 8106d32:	b085      	sub	sp, #20
 8106d34:	af00      	add	r7, sp, #0
 8106d36:	6078      	str	r0, [r7, #4]
 8106d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8106d3a:	2300      	movs	r3, #0
 8106d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8106d3e:	683b      	ldr	r3, [r7, #0]
 8106d40:	681a      	ldr	r2, [r3, #0]
 8106d42:	687b      	ldr	r3, [r7, #4]
 8106d44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8106d46:	683b      	ldr	r3, [r7, #0]
 8106d48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8106d4a:	683b      	ldr	r3, [r7, #0]
 8106d4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8106d4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8106d50:	683b      	ldr	r3, [r7, #0]
 8106d52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8106d54:	431a      	orrs	r2, r3
                       Command->CPSM);
 8106d56:	683b      	ldr	r3, [r7, #0]
 8106d58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8106d5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8106d5c:	68fa      	ldr	r2, [r7, #12]
 8106d5e:	4313      	orrs	r3, r2
 8106d60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	68da      	ldr	r2, [r3, #12]
 8106d66:	4b06      	ldr	r3, [pc, #24]	; (8106d80 <SDMMC_SendCommand+0x50>)
 8106d68:	4013      	ands	r3, r2
 8106d6a:	68fa      	ldr	r2, [r7, #12]
 8106d6c:	431a      	orrs	r2, r3
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8106d72:	2300      	movs	r3, #0
}
 8106d74:	4618      	mov	r0, r3
 8106d76:	3714      	adds	r7, #20
 8106d78:	46bd      	mov	sp, r7
 8106d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d7e:	4770      	bx	lr
 8106d80:	fffee0c0 	.word	0xfffee0c0

08106d84 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8106d84:	b480      	push	{r7}
 8106d86:	b083      	sub	sp, #12
 8106d88:	af00      	add	r7, sp, #0
 8106d8a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	691b      	ldr	r3, [r3, #16]
 8106d90:	b2db      	uxtb	r3, r3
}
 8106d92:	4618      	mov	r0, r3
 8106d94:	370c      	adds	r7, #12
 8106d96:	46bd      	mov	sp, r7
 8106d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d9c:	4770      	bx	lr

08106d9e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8106d9e:	b480      	push	{r7}
 8106da0:	b085      	sub	sp, #20
 8106da2:	af00      	add	r7, sp, #0
 8106da4:	6078      	str	r0, [r7, #4]
 8106da6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	3314      	adds	r3, #20
 8106dac:	461a      	mov	r2, r3
 8106dae:	683b      	ldr	r3, [r7, #0]
 8106db0:	4413      	add	r3, r2
 8106db2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8106db4:	68fb      	ldr	r3, [r7, #12]
 8106db6:	681b      	ldr	r3, [r3, #0]
}
 8106db8:	4618      	mov	r0, r3
 8106dba:	3714      	adds	r7, #20
 8106dbc:	46bd      	mov	sp, r7
 8106dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dc2:	4770      	bx	lr

08106dc4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8106dc4:	b480      	push	{r7}
 8106dc6:	b085      	sub	sp, #20
 8106dc8:	af00      	add	r7, sp, #0
 8106dca:	6078      	str	r0, [r7, #4]
 8106dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8106dce:	2300      	movs	r3, #0
 8106dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8106dd2:	683b      	ldr	r3, [r7, #0]
 8106dd4:	681a      	ldr	r2, [r3, #0]
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8106dda:	683b      	ldr	r3, [r7, #0]
 8106ddc:	685a      	ldr	r2, [r3, #4]
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8106de2:	683b      	ldr	r3, [r7, #0]
 8106de4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8106de6:	683b      	ldr	r3, [r7, #0]
 8106de8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8106dea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8106dec:	683b      	ldr	r3, [r7, #0]
 8106dee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8106df0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8106df2:	683b      	ldr	r3, [r7, #0]
 8106df4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8106df6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8106df8:	68fa      	ldr	r2, [r7, #12]
 8106dfa:	4313      	orrs	r3, r2
 8106dfc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	431a      	orrs	r2, r3
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8106e0e:	2300      	movs	r3, #0

}
 8106e10:	4618      	mov	r0, r3
 8106e12:	3714      	adds	r7, #20
 8106e14:	46bd      	mov	sp, r7
 8106e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e1a:	4770      	bx	lr

08106e1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8106e1c:	b580      	push	{r7, lr}
 8106e1e:	b088      	sub	sp, #32
 8106e20:	af00      	add	r7, sp, #0
 8106e22:	6078      	str	r0, [r7, #4]
 8106e24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8106e26:	683b      	ldr	r3, [r7, #0]
 8106e28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8106e2a:	2310      	movs	r3, #16
 8106e2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8106e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106e34:	2300      	movs	r3, #0
 8106e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106e3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106e3e:	f107 0308 	add.w	r3, r7, #8
 8106e42:	4619      	mov	r1, r3
 8106e44:	6878      	ldr	r0, [r7, #4]
 8106e46:	f7ff ff73 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8106e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8106e4e:	2110      	movs	r1, #16
 8106e50:	6878      	ldr	r0, [r7, #4]
 8106e52:	f000 f935 	bl	81070c0 <SDMMC_GetCmdResp1>
 8106e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106e58:	69fb      	ldr	r3, [r7, #28]
}
 8106e5a:	4618      	mov	r0, r3
 8106e5c:	3720      	adds	r7, #32
 8106e5e:	46bd      	mov	sp, r7
 8106e60:	bd80      	pop	{r7, pc}

08106e62 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8106e62:	b580      	push	{r7, lr}
 8106e64:	b088      	sub	sp, #32
 8106e66:	af00      	add	r7, sp, #0
 8106e68:	6078      	str	r0, [r7, #4]
 8106e6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8106e6c:	683b      	ldr	r3, [r7, #0]
 8106e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8106e70:	2307      	movs	r3, #7
 8106e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8106e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106e78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106e7a:	2300      	movs	r3, #0
 8106e7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106e82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106e84:	f107 0308 	add.w	r3, r7, #8
 8106e88:	4619      	mov	r1, r3
 8106e8a:	6878      	ldr	r0, [r7, #4]
 8106e8c:	f7ff ff50 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8106e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8106e94:	2107      	movs	r1, #7
 8106e96:	6878      	ldr	r0, [r7, #4]
 8106e98:	f000 f912 	bl	81070c0 <SDMMC_GetCmdResp1>
 8106e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106e9e:	69fb      	ldr	r3, [r7, #28]
}
 8106ea0:	4618      	mov	r0, r3
 8106ea2:	3720      	adds	r7, #32
 8106ea4:	46bd      	mov	sp, r7
 8106ea6:	bd80      	pop	{r7, pc}

08106ea8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8106ea8:	b580      	push	{r7, lr}
 8106eaa:	b088      	sub	sp, #32
 8106eac:	af00      	add	r7, sp, #0
 8106eae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8106eb0:	2300      	movs	r3, #0
 8106eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8106eb4:	2300      	movs	r3, #0
 8106eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8106eb8:	2300      	movs	r3, #0
 8106eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106ebc:	2300      	movs	r3, #0
 8106ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106ec4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106ec6:	f107 0308 	add.w	r3, r7, #8
 8106eca:	4619      	mov	r1, r3
 8106ecc:	6878      	ldr	r0, [r7, #4]
 8106ece:	f7ff ff2f 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8106ed2:	6878      	ldr	r0, [r7, #4]
 8106ed4:	f000 fa70 	bl	81073b8 <SDMMC_GetCmdError>
 8106ed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106eda:	69fb      	ldr	r3, [r7, #28]
}
 8106edc:	4618      	mov	r0, r3
 8106ede:	3720      	adds	r7, #32
 8106ee0:	46bd      	mov	sp, r7
 8106ee2:	bd80      	pop	{r7, pc}

08106ee4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8106ee4:	b580      	push	{r7, lr}
 8106ee6:	b088      	sub	sp, #32
 8106ee8:	af00      	add	r7, sp, #0
 8106eea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8106eec:	2300      	movs	r3, #0
 8106eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8106ef0:	2302      	movs	r3, #2
 8106ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8106ef4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8106ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106efa:	2300      	movs	r3, #0
 8106efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106f02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106f04:	f107 0308 	add.w	r3, r7, #8
 8106f08:	4619      	mov	r1, r3
 8106f0a:	6878      	ldr	r0, [r7, #4]
 8106f0c:	f7ff ff10 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8106f10:	6878      	ldr	r0, [r7, #4]
 8106f12:	f000 f9c7 	bl	81072a4 <SDMMC_GetCmdResp2>
 8106f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106f18:	69fb      	ldr	r3, [r7, #28]
}
 8106f1a:	4618      	mov	r0, r3
 8106f1c:	3720      	adds	r7, #32
 8106f1e:	46bd      	mov	sp, r7
 8106f20:	bd80      	pop	{r7, pc}

08106f22 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8106f22:	b580      	push	{r7, lr}
 8106f24:	b088      	sub	sp, #32
 8106f26:	af00      	add	r7, sp, #0
 8106f28:	6078      	str	r0, [r7, #4]
 8106f2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8106f2c:	683b      	ldr	r3, [r7, #0]
 8106f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8106f30:	2309      	movs	r3, #9
 8106f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8106f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8106f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106f3a:	2300      	movs	r3, #0
 8106f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106f44:	f107 0308 	add.w	r3, r7, #8
 8106f48:	4619      	mov	r1, r3
 8106f4a:	6878      	ldr	r0, [r7, #4]
 8106f4c:	f7ff fef0 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8106f50:	6878      	ldr	r0, [r7, #4]
 8106f52:	f000 f9a7 	bl	81072a4 <SDMMC_GetCmdResp2>
 8106f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106f58:	69fb      	ldr	r3, [r7, #28]
}
 8106f5a:	4618      	mov	r0, r3
 8106f5c:	3720      	adds	r7, #32
 8106f5e:	46bd      	mov	sp, r7
 8106f60:	bd80      	pop	{r7, pc}

08106f62 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 8106f62:	b580      	push	{r7, lr}
 8106f64:	b088      	sub	sp, #32
 8106f66:	af00      	add	r7, sp, #0
 8106f68:	6078      	str	r0, [r7, #4]
 8106f6a:	460b      	mov	r3, r1
 8106f6c:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8106f6e:	887b      	ldrh	r3, [r7, #2]
 8106f70:	041b      	lsls	r3, r3, #16
 8106f72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8106f74:	2303      	movs	r3, #3
 8106f76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8106f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106f7e:	2300      	movs	r3, #0
 8106f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106f88:	f107 0308 	add.w	r3, r7, #8
 8106f8c:	4619      	mov	r1, r3
 8106f8e:	6878      	ldr	r0, [r7, #4]
 8106f90:	f7ff fece 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 8106f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8106f98:	2103      	movs	r1, #3
 8106f9a:	6878      	ldr	r0, [r7, #4]
 8106f9c:	f000 f890 	bl	81070c0 <SDMMC_GetCmdResp1>
 8106fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106fa2:	69fb      	ldr	r3, [r7, #28]
}
 8106fa4:	4618      	mov	r0, r3
 8106fa6:	3720      	adds	r7, #32
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	bd80      	pop	{r7, pc}

08106fac <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8106fac:	b580      	push	{r7, lr}
 8106fae:	b088      	sub	sp, #32
 8106fb0:	af00      	add	r7, sp, #0
 8106fb2:	6078      	str	r0, [r7, #4]
 8106fb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8106fb6:	683b      	ldr	r3, [r7, #0]
 8106fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8106fba:	230d      	movs	r3, #13
 8106fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8106fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8106fc4:	2300      	movs	r3, #0
 8106fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8106fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8106fcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8106fce:	f107 0308 	add.w	r3, r7, #8
 8106fd2:	4619      	mov	r1, r3
 8106fd4:	6878      	ldr	r0, [r7, #4]
 8106fd6:	f7ff feab 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8106fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8106fde:	210d      	movs	r1, #13
 8106fe0:	6878      	ldr	r0, [r7, #4]
 8106fe2:	f000 f86d 	bl	81070c0 <SDMMC_GetCmdResp1>
 8106fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8106fe8:	69fb      	ldr	r3, [r7, #28]
}
 8106fea:	4618      	mov	r0, r3
 8106fec:	3720      	adds	r7, #32
 8106fee:	46bd      	mov	sp, r7
 8106ff0:	bd80      	pop	{r7, pc}

08106ff2 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8106ff2:	b580      	push	{r7, lr}
 8106ff4:	b088      	sub	sp, #32
 8106ff6:	af00      	add	r7, sp, #0
 8106ff8:	6078      	str	r0, [r7, #4]
 8106ffa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8106ffc:	683b      	ldr	r3, [r7, #0]
 8106ffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8107000:	2301      	movs	r3, #1
 8107002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8107008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810700a:	2300      	movs	r3, #0
 810700c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810700e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8107012:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107014:	f107 0308 	add.w	r3, r7, #8
 8107018:	4619      	mov	r1, r3
 810701a:	6878      	ldr	r0, [r7, #4]
 810701c:	f7ff fe88 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8107020:	6878      	ldr	r0, [r7, #4]
 8107022:	f000 f989 	bl	8107338 <SDMMC_GetCmdResp3>
 8107026:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107028:	69fb      	ldr	r3, [r7, #28]
}
 810702a:	4618      	mov	r0, r3
 810702c:	3720      	adds	r7, #32
 810702e:	46bd      	mov	sp, r7
 8107030:	bd80      	pop	{r7, pc}

08107032 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107032:	b580      	push	{r7, lr}
 8107034:	b088      	sub	sp, #32
 8107036:	af00      	add	r7, sp, #0
 8107038:	6078      	str	r0, [r7, #4]
 810703a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 810703c:	683b      	ldr	r3, [r7, #0]
 810703e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8107040:	2306      	movs	r3, #6
 8107042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8107048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810704a:	2300      	movs	r3, #0
 810704c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810704e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8107052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107054:	f107 0308 	add.w	r3, r7, #8
 8107058:	4619      	mov	r1, r3
 810705a:	6878      	ldr	r0, [r7, #4]
 810705c:	f7ff fe68 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8107060:	f241 3288 	movw	r2, #5000	; 0x1388
 8107064:	2106      	movs	r1, #6
 8107066:	6878      	ldr	r0, [r7, #4]
 8107068:	f000 f82a 	bl	81070c0 <SDMMC_GetCmdResp1>
 810706c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810706e:	69fb      	ldr	r3, [r7, #28]
}
 8107070:	4618      	mov	r0, r3
 8107072:	3720      	adds	r7, #32
 8107074:	46bd      	mov	sp, r7
 8107076:	bd80      	pop	{r7, pc}

08107078 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107078:	b580      	push	{r7, lr}
 810707a:	b088      	sub	sp, #32
 810707c:	af00      	add	r7, sp, #0
 810707e:	6078      	str	r0, [r7, #4]
 8107080:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8107082:	683b      	ldr	r3, [r7, #0]
 8107084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8107086:	2308      	movs	r3, #8
 8107088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810708a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810708e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107090:	2300      	movs	r3, #0
 8107092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8107098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810709a:	f107 0308 	add.w	r3, r7, #8
 810709e:	4619      	mov	r1, r3
 81070a0:	6878      	ldr	r0, [r7, #4]
 81070a2:	f7ff fe45 	bl	8106d30 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 81070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 81070aa:	2108      	movs	r1, #8
 81070ac:	6878      	ldr	r0, [r7, #4]
 81070ae:	f000 f807 	bl	81070c0 <SDMMC_GetCmdResp1>
 81070b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81070b4:	69fb      	ldr	r3, [r7, #28]
}
 81070b6:	4618      	mov	r0, r3
 81070b8:	3720      	adds	r7, #32
 81070ba:	46bd      	mov	sp, r7
 81070bc:	bd80      	pop	{r7, pc}
	...

081070c0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 81070c0:	b580      	push	{r7, lr}
 81070c2:	b088      	sub	sp, #32
 81070c4:	af00      	add	r7, sp, #0
 81070c6:	60f8      	str	r0, [r7, #12]
 81070c8:	460b      	mov	r3, r1
 81070ca:	607a      	str	r2, [r7, #4]
 81070cc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 81070ce:	4b70      	ldr	r3, [pc, #448]	; (8107290 <SDMMC_GetCmdResp1+0x1d0>)
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	4a70      	ldr	r2, [pc, #448]	; (8107294 <SDMMC_GetCmdResp1+0x1d4>)
 81070d4:	fba2 2303 	umull	r2, r3, r2, r3
 81070d8:	0a5a      	lsrs	r2, r3, #9
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	fb02 f303 	mul.w	r3, r2, r3
 81070e0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 81070e2:	69fb      	ldr	r3, [r7, #28]
 81070e4:	1e5a      	subs	r2, r3, #1
 81070e6:	61fa      	str	r2, [r7, #28]
 81070e8:	2b00      	cmp	r3, #0
 81070ea:	d102      	bne.n	81070f2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 81070ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81070f0:	e0c9      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81070f6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 81070f8:	69ba      	ldr	r2, [r7, #24]
 81070fa:	4b67      	ldr	r3, [pc, #412]	; (8107298 <SDMMC_GetCmdResp1+0x1d8>)
 81070fc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d0ef      	beq.n	81070e2 <SDMMC_GetCmdResp1+0x22>
 8107102:	69bb      	ldr	r3, [r7, #24]
 8107104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8107108:	2b00      	cmp	r3, #0
 810710a:	d1ea      	bne.n	81070e2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810710c:	68fb      	ldr	r3, [r7, #12]
 810710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107110:	f003 0304 	and.w	r3, r3, #4
 8107114:	2b00      	cmp	r3, #0
 8107116:	d004      	beq.n	8107122 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8107118:	68fb      	ldr	r3, [r7, #12]
 810711a:	2204      	movs	r2, #4
 810711c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810711e:	2304      	movs	r3, #4
 8107120:	e0b1      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8107122:	68fb      	ldr	r3, [r7, #12]
 8107124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107126:	f003 0301 	and.w	r3, r3, #1
 810712a:	2b00      	cmp	r3, #0
 810712c:	d004      	beq.n	8107138 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810712e:	68fb      	ldr	r3, [r7, #12]
 8107130:	2201      	movs	r2, #1
 8107132:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8107134:	2301      	movs	r3, #1
 8107136:	e0a6      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8107138:	68fb      	ldr	r3, [r7, #12]
 810713a:	4a58      	ldr	r2, [pc, #352]	; (810729c <SDMMC_GetCmdResp1+0x1dc>)
 810713c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810713e:	68f8      	ldr	r0, [r7, #12]
 8107140:	f7ff fe20 	bl	8106d84 <SDMMC_GetCommandResponse>
 8107144:	4603      	mov	r3, r0
 8107146:	461a      	mov	r2, r3
 8107148:	7afb      	ldrb	r3, [r7, #11]
 810714a:	4293      	cmp	r3, r2
 810714c:	d001      	beq.n	8107152 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810714e:	2301      	movs	r3, #1
 8107150:	e099      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8107152:	2100      	movs	r1, #0
 8107154:	68f8      	ldr	r0, [r7, #12]
 8107156:	f7ff fe22 	bl	8106d9e <SDMMC_GetResponse>
 810715a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810715c:	697a      	ldr	r2, [r7, #20]
 810715e:	4b50      	ldr	r3, [pc, #320]	; (81072a0 <SDMMC_GetCmdResp1+0x1e0>)
 8107160:	4013      	ands	r3, r2
 8107162:	2b00      	cmp	r3, #0
 8107164:	d101      	bne.n	810716a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8107166:	2300      	movs	r3, #0
 8107168:	e08d      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810716a:	697b      	ldr	r3, [r7, #20]
 810716c:	2b00      	cmp	r3, #0
 810716e:	da02      	bge.n	8107176 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8107170:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8107174:	e087      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8107176:	697b      	ldr	r3, [r7, #20]
 8107178:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810717c:	2b00      	cmp	r3, #0
 810717e:	d001      	beq.n	8107184 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8107180:	2340      	movs	r3, #64	; 0x40
 8107182:	e080      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8107184:	697b      	ldr	r3, [r7, #20]
 8107186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810718a:	2b00      	cmp	r3, #0
 810718c:	d001      	beq.n	8107192 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810718e:	2380      	movs	r3, #128	; 0x80
 8107190:	e079      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8107192:	697b      	ldr	r3, [r7, #20]
 8107194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107198:	2b00      	cmp	r3, #0
 810719a:	d002      	beq.n	81071a2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810719c:	f44f 7380 	mov.w	r3, #256	; 0x100
 81071a0:	e071      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 81071a2:	697b      	ldr	r3, [r7, #20]
 81071a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81071a8:	2b00      	cmp	r3, #0
 81071aa:	d002      	beq.n	81071b2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 81071ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 81071b0:	e069      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 81071b2:	697b      	ldr	r3, [r7, #20]
 81071b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81071b8:	2b00      	cmp	r3, #0
 81071ba:	d002      	beq.n	81071c2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 81071bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81071c0:	e061      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 81071c2:	697b      	ldr	r3, [r7, #20]
 81071c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81071c8:	2b00      	cmp	r3, #0
 81071ca:	d002      	beq.n	81071d2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 81071cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81071d0:	e059      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 81071d2:	697b      	ldr	r3, [r7, #20]
 81071d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81071d8:	2b00      	cmp	r3, #0
 81071da:	d002      	beq.n	81071e2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 81071dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81071e0:	e051      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 81071e2:	697b      	ldr	r3, [r7, #20]
 81071e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81071e8:	2b00      	cmp	r3, #0
 81071ea:	d002      	beq.n	81071f2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 81071ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81071f0:	e049      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 81071f2:	697b      	ldr	r3, [r7, #20]
 81071f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81071f8:	2b00      	cmp	r3, #0
 81071fa:	d002      	beq.n	8107202 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 81071fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8107200:	e041      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8107202:	697b      	ldr	r3, [r7, #20]
 8107204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107208:	2b00      	cmp	r3, #0
 810720a:	d002      	beq.n	8107212 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810720c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107210:	e039      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8107212:	697b      	ldr	r3, [r7, #20]
 8107214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8107218:	2b00      	cmp	r3, #0
 810721a:	d002      	beq.n	8107222 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810721c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8107220:	e031      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8107222:	697b      	ldr	r3, [r7, #20]
 8107224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107228:	2b00      	cmp	r3, #0
 810722a:	d002      	beq.n	8107232 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810722c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8107230:	e029      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8107232:	697b      	ldr	r3, [r7, #20]
 8107234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107238:	2b00      	cmp	r3, #0
 810723a:	d002      	beq.n	8107242 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810723c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8107240:	e021      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8107242:	697b      	ldr	r3, [r7, #20]
 8107244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8107248:	2b00      	cmp	r3, #0
 810724a:	d002      	beq.n	8107252 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810724c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8107250:	e019      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8107252:	697b      	ldr	r3, [r7, #20]
 8107254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8107258:	2b00      	cmp	r3, #0
 810725a:	d002      	beq.n	8107262 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810725c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8107260:	e011      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8107262:	697b      	ldr	r3, [r7, #20]
 8107264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8107268:	2b00      	cmp	r3, #0
 810726a:	d002      	beq.n	8107272 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810726c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8107270:	e009      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8107272:	697b      	ldr	r3, [r7, #20]
 8107274:	f003 0308 	and.w	r3, r3, #8
 8107278:	2b00      	cmp	r3, #0
 810727a:	d002      	beq.n	8107282 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810727c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8107280:	e001      	b.n	8107286 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8107282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8107286:	4618      	mov	r0, r3
 8107288:	3720      	adds	r7, #32
 810728a:	46bd      	mov	sp, r7
 810728c:	bd80      	pop	{r7, pc}
 810728e:	bf00      	nop
 8107290:	10000000 	.word	0x10000000
 8107294:	10624dd3 	.word	0x10624dd3
 8107298:	00200045 	.word	0x00200045
 810729c:	002000c5 	.word	0x002000c5
 81072a0:	fdffe008 	.word	0xfdffe008

081072a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 81072a4:	b480      	push	{r7}
 81072a6:	b085      	sub	sp, #20
 81072a8:	af00      	add	r7, sp, #0
 81072aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81072ac:	4b1f      	ldr	r3, [pc, #124]	; (810732c <SDMMC_GetCmdResp2+0x88>)
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	4a1f      	ldr	r2, [pc, #124]	; (8107330 <SDMMC_GetCmdResp2+0x8c>)
 81072b2:	fba2 2303 	umull	r2, r3, r2, r3
 81072b6:	0a5b      	lsrs	r3, r3, #9
 81072b8:	f241 3288 	movw	r2, #5000	; 0x1388
 81072bc:	fb02 f303 	mul.w	r3, r2, r3
 81072c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81072c2:	68fb      	ldr	r3, [r7, #12]
 81072c4:	1e5a      	subs	r2, r3, #1
 81072c6:	60fa      	str	r2, [r7, #12]
 81072c8:	2b00      	cmp	r3, #0
 81072ca:	d102      	bne.n	81072d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81072cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81072d0:	e026      	b.n	8107320 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 81072d2:	687b      	ldr	r3, [r7, #4]
 81072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81072d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81072d8:	68bb      	ldr	r3, [r7, #8]
 81072da:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81072de:	2b00      	cmp	r3, #0
 81072e0:	d0ef      	beq.n	81072c2 <SDMMC_GetCmdResp2+0x1e>
 81072e2:	68bb      	ldr	r3, [r7, #8]
 81072e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81072e8:	2b00      	cmp	r3, #0
 81072ea:	d1ea      	bne.n	81072c2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81072f0:	f003 0304 	and.w	r3, r3, #4
 81072f4:	2b00      	cmp	r3, #0
 81072f6:	d004      	beq.n	8107302 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81072f8:	687b      	ldr	r3, [r7, #4]
 81072fa:	2204      	movs	r2, #4
 81072fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81072fe:	2304      	movs	r3, #4
 8107300:	e00e      	b.n	8107320 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107306:	f003 0301 	and.w	r3, r3, #1
 810730a:	2b00      	cmp	r3, #0
 810730c:	d004      	beq.n	8107318 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	2201      	movs	r2, #1
 8107312:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8107314:	2301      	movs	r3, #1
 8107316:	e003      	b.n	8107320 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8107318:	687b      	ldr	r3, [r7, #4]
 810731a:	4a06      	ldr	r2, [pc, #24]	; (8107334 <SDMMC_GetCmdResp2+0x90>)
 810731c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810731e:	2300      	movs	r3, #0
}
 8107320:	4618      	mov	r0, r3
 8107322:	3714      	adds	r7, #20
 8107324:	46bd      	mov	sp, r7
 8107326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810732a:	4770      	bx	lr
 810732c:	10000000 	.word	0x10000000
 8107330:	10624dd3 	.word	0x10624dd3
 8107334:	002000c5 	.word	0x002000c5

08107338 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8107338:	b480      	push	{r7}
 810733a:	b085      	sub	sp, #20
 810733c:	af00      	add	r7, sp, #0
 810733e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8107340:	4b1a      	ldr	r3, [pc, #104]	; (81073ac <SDMMC_GetCmdResp3+0x74>)
 8107342:	681b      	ldr	r3, [r3, #0]
 8107344:	4a1a      	ldr	r2, [pc, #104]	; (81073b0 <SDMMC_GetCmdResp3+0x78>)
 8107346:	fba2 2303 	umull	r2, r3, r2, r3
 810734a:	0a5b      	lsrs	r3, r3, #9
 810734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8107350:	fb02 f303 	mul.w	r3, r2, r3
 8107354:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8107356:	68fb      	ldr	r3, [r7, #12]
 8107358:	1e5a      	subs	r2, r3, #1
 810735a:	60fa      	str	r2, [r7, #12]
 810735c:	2b00      	cmp	r3, #0
 810735e:	d102      	bne.n	8107366 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8107360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8107364:	e01b      	b.n	810739e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8107366:	687b      	ldr	r3, [r7, #4]
 8107368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810736a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810736c:	68bb      	ldr	r3, [r7, #8]
 810736e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8107372:	2b00      	cmp	r3, #0
 8107374:	d0ef      	beq.n	8107356 <SDMMC_GetCmdResp3+0x1e>
 8107376:	68bb      	ldr	r3, [r7, #8]
 8107378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810737c:	2b00      	cmp	r3, #0
 810737e:	d1ea      	bne.n	8107356 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107384:	f003 0304 	and.w	r3, r3, #4
 8107388:	2b00      	cmp	r3, #0
 810738a:	d004      	beq.n	8107396 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	2204      	movs	r2, #4
 8107390:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8107392:	2304      	movs	r3, #4
 8107394:	e003      	b.n	810739e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	4a06      	ldr	r2, [pc, #24]	; (81073b4 <SDMMC_GetCmdResp3+0x7c>)
 810739a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810739c:	2300      	movs	r3, #0
}
 810739e:	4618      	mov	r0, r3
 81073a0:	3714      	adds	r7, #20
 81073a2:	46bd      	mov	sp, r7
 81073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a8:	4770      	bx	lr
 81073aa:	bf00      	nop
 81073ac:	10000000 	.word	0x10000000
 81073b0:	10624dd3 	.word	0x10624dd3
 81073b4:	002000c5 	.word	0x002000c5

081073b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 81073b8:	b480      	push	{r7}
 81073ba:	b085      	sub	sp, #20
 81073bc:	af00      	add	r7, sp, #0
 81073be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81073c0:	4b11      	ldr	r3, [pc, #68]	; (8107408 <SDMMC_GetCmdError+0x50>)
 81073c2:	681b      	ldr	r3, [r3, #0]
 81073c4:	4a11      	ldr	r2, [pc, #68]	; (810740c <SDMMC_GetCmdError+0x54>)
 81073c6:	fba2 2303 	umull	r2, r3, r2, r3
 81073ca:	0a5b      	lsrs	r3, r3, #9
 81073cc:	f241 3288 	movw	r2, #5000	; 0x1388
 81073d0:	fb02 f303 	mul.w	r3, r2, r3
 81073d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	1e5a      	subs	r2, r3, #1
 81073da:	60fa      	str	r2, [r7, #12]
 81073dc:	2b00      	cmp	r3, #0
 81073de:	d102      	bne.n	81073e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81073e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81073e4:	e009      	b.n	81073fa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81073ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81073ee:	2b00      	cmp	r3, #0
 81073f0:	d0f1      	beq.n	81073d6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	4a06      	ldr	r2, [pc, #24]	; (8107410 <SDMMC_GetCmdError+0x58>)
 81073f6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 81073f8:	2300      	movs	r3, #0
}
 81073fa:	4618      	mov	r0, r3
 81073fc:	3714      	adds	r7, #20
 81073fe:	46bd      	mov	sp, r7
 8107400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107404:	4770      	bx	lr
 8107406:	bf00      	nop
 8107408:	10000000 	.word	0x10000000
 810740c:	10624dd3 	.word	0x10624dd3
 8107410:	002000c5 	.word	0x002000c5

08107414 <__libc_init_array>:
 8107414:	b570      	push	{r4, r5, r6, lr}
 8107416:	4d0d      	ldr	r5, [pc, #52]	; (810744c <__libc_init_array+0x38>)
 8107418:	4c0d      	ldr	r4, [pc, #52]	; (8107450 <__libc_init_array+0x3c>)
 810741a:	1b64      	subs	r4, r4, r5
 810741c:	10a4      	asrs	r4, r4, #2
 810741e:	2600      	movs	r6, #0
 8107420:	42a6      	cmp	r6, r4
 8107422:	d109      	bne.n	8107438 <__libc_init_array+0x24>
 8107424:	4d0b      	ldr	r5, [pc, #44]	; (8107454 <__libc_init_array+0x40>)
 8107426:	4c0c      	ldr	r4, [pc, #48]	; (8107458 <__libc_init_array+0x44>)
 8107428:	f000 f82e 	bl	8107488 <_init>
 810742c:	1b64      	subs	r4, r4, r5
 810742e:	10a4      	asrs	r4, r4, #2
 8107430:	2600      	movs	r6, #0
 8107432:	42a6      	cmp	r6, r4
 8107434:	d105      	bne.n	8107442 <__libc_init_array+0x2e>
 8107436:	bd70      	pop	{r4, r5, r6, pc}
 8107438:	f855 3b04 	ldr.w	r3, [r5], #4
 810743c:	4798      	blx	r3
 810743e:	3601      	adds	r6, #1
 8107440:	e7ee      	b.n	8107420 <__libc_init_array+0xc>
 8107442:	f855 3b04 	ldr.w	r3, [r5], #4
 8107446:	4798      	blx	r3
 8107448:	3601      	adds	r6, #1
 810744a:	e7f2      	b.n	8107432 <__libc_init_array+0x1e>
 810744c:	081074fc 	.word	0x081074fc
 8107450:	081074fc 	.word	0x081074fc
 8107454:	081074fc 	.word	0x081074fc
 8107458:	08107500 	.word	0x08107500

0810745c <memcpy>:
 810745c:	440a      	add	r2, r1
 810745e:	4291      	cmp	r1, r2
 8107460:	f100 33ff 	add.w	r3, r0, #4294967295
 8107464:	d100      	bne.n	8107468 <memcpy+0xc>
 8107466:	4770      	bx	lr
 8107468:	b510      	push	{r4, lr}
 810746a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810746e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107472:	4291      	cmp	r1, r2
 8107474:	d1f9      	bne.n	810746a <memcpy+0xe>
 8107476:	bd10      	pop	{r4, pc}

08107478 <memset>:
 8107478:	4402      	add	r2, r0
 810747a:	4603      	mov	r3, r0
 810747c:	4293      	cmp	r3, r2
 810747e:	d100      	bne.n	8107482 <memset+0xa>
 8107480:	4770      	bx	lr
 8107482:	f803 1b01 	strb.w	r1, [r3], #1
 8107486:	e7f9      	b.n	810747c <memset+0x4>

08107488 <_init>:
 8107488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810748a:	bf00      	nop
 810748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810748e:	bc08      	pop	{r3}
 8107490:	469e      	mov	lr, r3
 8107492:	4770      	bx	lr

08107494 <_fini>:
 8107494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107496:	bf00      	nop
 8107498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810749a:	bc08      	pop	{r3}
 810749c:	469e      	mov	lr, r3
 810749e:	4770      	bx	lr
